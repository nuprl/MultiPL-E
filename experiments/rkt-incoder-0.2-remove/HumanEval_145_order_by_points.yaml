name: HumanEval_145_order_by_points
language: rkt
prompt: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
  ;; in ascending order according to the sum of their digits.\n;; Note: if there are\
  \ several items with similar sum of their digits,\n;; order them based on their\
  \ index in original list.\n;; For example:\n(define (order_by_points nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
  \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
  \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56\
  \ 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
  \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
  \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
  \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
completions: ["  (sort nums\n        (lambda (x y)\n          (if (= (+ x y) 0)\n\
    \              (- x y)\n              (if (< x y)\n                  (- x y)\n\
    \                  (- y x)))))) ;; #lang racket\n", "  (define (helper nums acc\
    \ index)\n    (cond\n      [(empty? nums) (cons index acc)]\n      [(equal? (sum\
    \ (rest nums)) acc) (cons index acc)]\n      [else (helper (rest nums) (cons index\
    \ acc) (+ index 1))]))\n  (helper nums '() (length nums)))\n", "  (if (null? nums)\n\
    \      '()\n      (append (list (+ (first nums) (second nums))\n             \
    \      (length (rest nums)))\n              (order_by_points (rest nums)))))\n",
  "  (sort nums\n        (lambda (x y)\n          (if (= (sum (digits x)) (sum (digits\
    \ y)))\n              (< (length x) (length y)) (< (length y) \n             \
    \                                 (length x))\n              (< (sum (digits x))\
    \ (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n   \
    \           (< (length x) (length y))\n              (< (length y) \n        \
    \          (length x))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (length\
    \ x) (length y))\n              (< (length y) \n                  (length x))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (length x) (length y))\n           \
    \   (< (length y) \n                  (length x))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (length x) (length y))\n              (< (length y) \n     \
    \             (length x))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (length\
    \ x) (length y))\n              (< (length y) \n                  (length x))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (length x) (length y))\n           \
    \   (< (length y) \n                  (length x))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (length x) (length y))\n              (< (length y) \n     \
    \             (length x))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (length\
    \ x) (length y))\n              (< (length y) \n                  (length x))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (length x) (length y))\n           \
    \   (< (length y) \n                  (length x))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n", "  (if (null? nums)\n      '()\n      (append (sort\
    \ (map sum (map digits nums))\n                     (lambda (x y) (< (+ x y) 0))\n\
    \                     #:key (lambda (x) (- x y)))\n              (cons (car nums)\
    \ (order_by_points (cdr nums))))))\n", "  (sort nums\n        (lambda (x y)\n\
    \          (if (= (+ x y) 0)\n              (- x y)\n              (if (= (+ x\
    \ y) 10)\n                  (- x y)\n                  (if (= (+ x y) 100)\n \
    \                     (- x y)\n                      (if (= (+ x y) 1000)\n  \
    \                        (- x y)\n                          (if (= (+ x y) 10000)\n\
    \                              (- x y)\n                              (if (= (+\
    \ x y) 100000)\n                                  (- x y)\n                  \
    \                (if (= (+ x y) 1000000)\n                                   \
    \   (- x y)\n                                      (if (= (+ x y) 10000000)\n\
    \                                          (- x y)\n                         \
    \                 (- x y))))))))))\n", "  (sort nums\n        (lambda (a b)\n\
    \          (if (= (sum (digits a)) (sum (digits b)))\n              (< (length\
    \ a) (length b))\n              (< (length b) (length a)))\n          (< (sum\
    \ (digits a)) (sum (digits b)))\n          (< (length a) (length b)))\n      \
    \  (digits nums)))\n", "  (define (helper nums acc)\n    (if (null? nums)\n  \
    \      acc\n        (helper (cdr nums) (cons (+ (car nums) (* 10 acc)) acc))))\n\
    \  (helper nums nil))\n", "  (if (null? nums)\n      '()\n      (let ((sum (fold_left\
    \ (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n            (cons nums\
    \ nums)\n            (cons (cons nums nums) (order_by_points (cdr nums)))))))\n",
  "  (sort nums\n        (lambda (a b)\n          (+ (digit-sum a) (digit-sum b))\n\
    \          (< (digit-sum a) (digit-sum b))))\n  )\n", "  (if (null? nums)\n  \
    \    '()\n      (append (sort (map sum (map digit-sum nums))\n               \
    \      (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (> (+\
    \ x y) 0))\n                     nums)\n              (order_by_points (cdr nums)))))\n",
  "  (cond\n    [(empty? nums) empty]\n    [(equal? (first nums) (first nums)) (cons\
    \ (first nums) nums)]\n    [else (cons (first nums)\n                (order_by_points\
    \ (rest nums)))]))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map cdr nums))\n                     <)\n              (cons (first nums)\
    \ nums)\n              (order_by_points (rest nums)))))\n", "  (cond\n    [(empty?\
    \ nums) empty]\n    [(= (length nums) 1) nums]\n    [else (cons (first nums)\n\
    \                (order_by_points (rest nums)))]))\n", "  (define (helper nums\
    \ acc)\n    (if (null? nums)\n        acc\n        (helper (cdr nums) (cons (+\
    \ (car nums) (car acc)) acc)))))\n  (helper nums nil))\n", "  (define (helper\
    \ nums acc)\n    (if (null? nums)\n        acc\n        (helper (cdr nums) (cons\
    \ (+ (car nums) (car acc)) acc))))\n  (helper nums '()))\n", "  (cond\n    [(empty?\
    \ nums) '()]\n    [(= (length nums) 1) nums]\n    [else (append (sort (map sum\
    \ (map digits (reverse nums))) <)\n                   (reverse nums))]))\n", " \
    \ (if (null? nums)\n      '()\n      (append (sort (map sum (map digit-value nums))\n\
    \                     (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (> (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (> (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (> (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (> (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (> (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (> (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (> (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (> (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (> (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (> (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (> (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (> (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (> (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (> (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (> (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (> (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (> (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (> (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (> (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (> (+ x y) 0))\n                     (lambda\
    \ (x y) (", "  (if (null? nums)\n      '()\n      (append (list (+ (first nums)\
    \ (second nums))\n                    (second nums))\n              (order_by_points\
    \ (rest nums)))))\n", "  (cond\n    [(empty? nums) empty]\n    [(zero? (first\
    \ nums)) (cons (first nums) empty)]\n    [else (cons (first nums)\n          \
    \      (order_by_points (rest nums)))]))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map digit-value nums))\n                     <)\n\
    \              (cons (first nums) nums)\n              (order_by_points (rest\
    \ nums)))))\n", "  (if (null? nums)\n      '()\n      (append (list (+ (first\
    \ nums) (second nums))\n                    (second nums))\n              (order_by_points\
    \ (rest nums)))))\n", "  (if (null? nums)\n      '()\n      (let ((sum (sum (map\
    \ digit nums))))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                   (lambda (x y)\n            \
    \                         (if (< x y)\n                                      \
    \   (cons x y)\n                                         (cons y x)))))))))\n",
  "  (if (empty? nums)\n      '()\n      (append (sort (map sum (map cdr nums))\n\
    \                     (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< x y)))\n              (cons (first nums) (order_by_points (rest nums))))))\n",
  "  (define (helper nums acc)\n    (cond\n      [(empty? nums) (cons acc '())]\n\
    \      [(digit-sum (first nums)) (helper (rest nums) (cons (first nums) acc))]\n\
    \      [else (helper (rest nums) (cons (first nums) acc))]\n      ))\n  (helper\
    \ nums '()))\n", "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n\
    \        (helper (cdr nums)\n                (cons (+ (car nums) (car acc)) acc)))))\n\
    \  (helper nums '()))\n", "  (if (null? nums)\n      '()\n      (append (list\
    \ (+ (first nums) (second nums))\n                   (length nums))\n        \
    \      (order_by_points (rest nums)))))\n", "  (cond\n    [(empty? nums) '()]\n\
    \    [(zero? (first nums)) (cons (first nums) (order_by_points (rest nums)))]\n\
    \    [else (cons (first nums)\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums)))]))\n", "  (define (helper nums\
    \ sum)\n    (cond\n      [(empty? nums) '()]\n      [(= sum 0) (cons (first nums)\
    \ (helper (rest nums) (first nums)))]\n      [(< sum 0) (helper (rest nums) (+\
    \ sum (first nums)))]\n      [else (helper (rest nums) (+ sum (first nums)))]))\n\
    \  (helper nums 0))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ digits-sum nums)\n                    (lambda (x y) (< (+ x y) 0))\n       \
    \             (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) ", "  (sort\
    \ nums\n        (lambda (a b)\n          (if (= (sum (digits a)) (sum (digits\
    \ b)))\n              (< (length a) (length b))\n              (< (length b) (length\
    \ a)))\n          (< (sum (digits a)) (sum (digits b)))\n          (< (length\
    \ a) (length b)))\n        (digits nums)))\n", "  (define (helper nums acc)\n\
    \    (cond\n      [(empty? nums) (cons acc empty)]\n      [(equal? (first nums)\
    \ (first acc)) (helper (rest nums) (cons (first nums) acc))]\n      [else (helper\
    \ (rest nums) (cons (first nums) acc))]\n      ))\n  (helper nums empty))\n",
  "  (if (null? nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n\
    \                    (second nums))\n              (order_by_points (rest nums)))))\n",
  "  (cond\n    [(empty? nums) empty]\n    [(zero? (first nums)) (cons (first nums)\
    \ empty)]\n    [else (cons (first nums)\n                (order_by_points (rest\
    \ nums)))]))\n", "  (if (null? nums)\n      '()\n      (append (list (+ (first\
    \ nums) (second nums))\n                    (second nums))\n              (order_by_points\
    \ (rest nums)))))\n", "  (if (null? nums)\n      '()\n      (let ((sum (sum (map\
    \ (lambda (x) (mod x 10)) nums))))\n        (if (= sum 0)\n            (cons (first\
    \ nums) (order_by_points (rest nums)))\n            (cons (first nums)\n     \
    \             (order_by_points (rest nums)\n                                 \
    \ (lambda (x y)\n                                    (if (= x y)\n           \
    \                             (+ x y)\n                                      \
    \  (+ x y)))))))))\n", "  (if (empty? nums)\n      '()\n      (append (list (+\
    \ (first nums) (second nums))\n                    (first nums))\n           \
    \   (order_by_points (rest nums)))))\n", "  (if (null? nums)\n      '()\n    \
    \  (append (list (+ (first nums) (second nums))\n                    (second nums))\n\
    \              (order_by_points (rest nums)))))\n", "  (if (empty? nums)\n   \
    \   '()\n      (append (list (+ (first nums) (second nums))\n                \
    \    (second nums))\n              (order_by_points (rest nums)))))\n", "  (if\
    \ (empty? nums)\n      '()\n      (let ((sum (sum (cdr nums))))\n        (if (=\
    \ sum 0)\n            (cons (car nums) (order_by_points (cdr nums)))\n       \
    \     (cons (cons (car nums) (order_by_points (cdr nums))) (order_by_points (cdr\
    \ nums)))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum\
    \ (map digits (reverse nums))) <)\n              nums)))\n", "  (if (null? nums)\n\
    \      '()\n      (append (sort (map digit-sum (map digits nums))\n          \
    \           (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))) <)\n              nums)))\n", "  (cond\n    [(empty? nums) '()]\n  \
    \  [(equal? (first nums) (first nums)) (order_by_points rest nums)]\n    [else\
    \ (cons (first nums)\n                (order_by_points (rest nums) (first nums)))]))\n",
  "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(equal?\
    \ (sum (first nums)) 0)\n       (helper (rest nums) (cons (first nums) acc))]\n\
    \      [else\n       (helper (rest nums) (cons (first nums) acc))]\n      ))\n\
    \  (helper nums nil))\n", "  (define (helper nums acc)\n    (cond\n      [(empty?\
    \ nums) acc]\n      [(equal? (sum (first nums)) 0)\n       (helper (rest nums)\
    \ (cons (first nums) acc))]\n      [else (helper (rest nums) (cons (first nums)\
    \ acc))]\n      ))\n  (helper nums empty))\n", "  (define (helper nums sum)\n\
    \    (cond\n      [(empty? nums) '()]\n      [(= sum 0) (cons (first nums) (helper\
    \ (rest nums) (first nums)))]\n      [(< sum 0) (helper (rest nums) (+ sum (first\
    \ nums)))]\n      [else (helper (rest nums) (+ sum (first nums)))]))\n  (helper\
    \ nums 0))\n", "  (if (empty? nums)\n      '()\n      (append (list (+ (first\
    \ nums) (second nums))\n                    (second nums))\n              (order_by_points\
    \ (rest nums)))))\n", "  (define (helper nums acc)\n    (cond\n      [(empty?\
    \ nums) (reverse acc)]\n      [(equal? (sum (first nums)) acc) (helper (rest nums)\
    \ (cons (first nums) acc))]\n      [else (helper (rest nums) (cons (first nums)\
    \ acc))]\n      ))\n  (helper nums nil))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map cdr nums))\n                     <)\n     \
    \         (cons (car nums) nums))))\n", "  (sort nums\n        (lambda (x y)\n\
    \          (if (= (+ x y) 0)\n              (- x y)\n              (if (= (+ x\
    \ y) 0)\n                  (- y x)\n                  (if (= (+ x y) 0)\n    \
    \                  (- x y)\n                      (if (= (+ x y) 0)\n        \
    \                  (- y x)\n                          (if (= (+ x y) 0)\n    \
    \                          (- x y)\n                              (if (= (+ x\
    \ y) 0)\n                                  (- y x)\n                         \
    \         (if (= (+ x y) 0)\n                                      (- x y)\n \
    \                                     (if (= (+ x y) 0)\n                    \
    \                      (- y x)\n                                          (if\
    \ (= (+ x y) 0)\n                                              (- x y)\n     \
    \                                         (if (= (+ x y) 0)\n                \
    \                                  (- y x)\n                                 \
    \                 (if (= (+ x y) 0)\n                                        \
    \              (- x y)\n                                                     \
    \ (if (= (+ x y) 0)\n                                                        \
    \  (- y x)\n                                                          (if (= (+\
    \ x y) 0)\n                                                              (- x\
    \ y)\n                                                              (if (= (+\
    \ x y) 0)\n                                                                  (-\
    \ y x)\n                                                                  (if\
    \ (= (+ x y) 0)\n                                                            \
    \          (- x y)\n                                                         \
    \             (if (= (+ x y) 0)\n                                            \
    \                              (- y x)\n                                     \
    \                                     (if (= (+ x y) 0)\n                    \
    \                                                          (- x y)\n         \
    \                                                                     (if (= (+\
    \ x y) 0)\n                                                                  \
    \                (- y x)\n                                                   \
    \                               (if (= (+ x y) 0)\n                          \
    \                                                            (- x y)\n       \
    \                                                                            \
    \   (if (= (+ x y) 0)\n                                                      \
    \                                    (- y x)\n                               \
    \                                                           (if (= (+ x y) 0)\n\
    \                                                                            \
    \                  (- x y)\n                                                 \
    \                                             (if (= (+ x y) 0)\n            \
    \                                                                            \
    \          (- y x)\n                                                         \
    \                                         (if (= (+ x y) 0)\n                \
    \                                                                            \
    \          (- x y)\n                                                         \
    \                                             (if (= (+ x y) 0)\n            \
    \                                                                            \
    \                  (- y x)\n                                                 \
    \                                                         (if (= (+ x y) 0)\n\
    \                                                                            \
    \                                  (- x y)\n                                 \
    \                                                                            \
    \ (if (= (+ x y) 0)\n                                                        \
    \                                                          (- y x)\n         \
    \                                                                            \
    \                             (if (= (+ x y) 0)\n                            \
    \                                                                            \
    \              (- x y)\n                                                     \
    \                                                                 (if (= (+ x\
    \ y) 0)\n                                                                    \
    \                                                      (- y x)\n             \
    \                                                                            \
    \                                 (if (= (+ x y) 0)\n                        \
    \                                                                            \
    \                          (- x y)\n                                         \
    \                                                                            \
    \         (if (= (+ x y) 0)", "  (if (null? nums)\n      '()\n      (append (list\
    \ (+ (first nums) (second nums))\n                    (second nums))\n       \
    \       (order_by_points (rest nums)))))\n", "  (define (helper nums acc)\n  \
    \  (cond\n      [(empty? nums) acc]\n      [(equal? (sum (first nums)) 0)\n  \
    \     (helper (rest nums) (cons (first nums) acc))]\n      [else (helper (rest\
    \ nums) (cons (first nums) acc))]\n      ))\n  (helper nums '()))\n", "  (if (null?\
    \ nums)\n      '()\n      (append (sort (map sum (map cdr nums))\n           \
    \          (lambda (x y)\n                       (< (+ x y) y)))\n           \
    \   (list (car nums)))))\n", "  (cond\n    [(empty? nums) '()]\n    [(zero? (first\
    \ nums)) nums]\n    [else (cons (first nums)\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums)))]))\n", "  (cond\n\
    \    [(empty? nums) '()]\n    [(= (length nums) 1) nums]\n    [else (append (order_by_points\
    \ (sub1 nums))\n                  (cons (sub1 (first nums)) nums))]))\n", "  (cond\n\
    \    [(empty? nums) '()]\n    [(zero? (first nums)) (cons (first nums) '())]\n\
    \    [else (cons (first nums)\n                (order_by_points (rest nums)))]))\n",
  "  (if (null? nums)\n      '()\n      (append (sort (map digit-sum (map reverse\
    \ nums))\n                     <)\n              (cons (first nums) nums)\n  \
    \            (order_by_points (rest nums)))))\n", "  (sort nums\n        (lambda\
    \ (x y)\n          (if (= (sum (digits x)) (sum (digits y)))\n              (<\
    \ (length nums) (length nums))\n              (< (length nums) (length nums))\n\
    \              (< (digits x) (digits y))\n              (< (digits x) (digits\
    \ y))\n              (< (digits y) 0))\n              (< (sum (digits x)) (sum\
    \ (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n        \
    \      (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits x))\
    \ (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n   \
    \           (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (< (sum (digits x)) (sum (digits y)))\n              (< (sum (digits\
    \ x)) (sum (digits y)))\n              (< (sum (digits x)) (sum (digits y)))\n\
    \              (", "  (if (empty? nums)\n      '()\n      (append (list (sum (first\
    \ nums))\n                    (length (first nums))\n                    (first\
    \ nums))\n              (order_by_points (rest nums)))))\n", "  (if (empty? nums)\n\
    \      '()\n      (append (sort (map sum (map digits nums))\n                \
    \     <)\n              (cons (first nums) nums))))\n", "  (if (null? nums)\n\
    \      '()\n      (append (sort (map sum (map digits (reverse nums))))\n     \
    \         (cons (car nums) (order_by_points (cdr nums))))))\n", "  (sort nums\n\
    \        (lambda (x y)\n          (if (= (sum (modulo x 10)) (sum (modulo y 10)))\n\
    \              (- x y)\n              (- y x))))))\n", "  (if (null? nums)\n \
    \     '()\n      (append (sort (map digit-sum (map digits nums))\n           \
    \         (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ y x) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ y x) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ y x) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ y x)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ y x) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ y x) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ y x) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ y x) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ y x) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ y x) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ y x) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ y x) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ y x) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ y x)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ y x) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ y x) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ y x) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ y x) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ y x) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ y x) 0))\n            \
    \        (lambda (x y) (< (", "  (sort nums\n        (lambda (a b)\n         \
    \ (+ (digit-value a) (digit-value b)))))\n", "  (cond\n    [(empty? nums) '()]\n\
    \    [(= (length nums) 1) nums]\n    [else (cons (first nums)\n              \
    \  (order_by_points (rest nums)))]))\n", "  (cond\n    [(empty? nums) '()]\n \
    \   [(zero? (first nums)) (cons (first nums) '())]\n    [else (cons (first nums)\n\
    \                (order_by_points (rest nums)))]))\n", "  (if (null? nums)\n \
    \     '()\n      (append (sort (map sum (map digits (reverse nums))) <)\n    \
    \          (cons (first nums) nums))))\n", "  (if (null? nums)\n      '()\n  \
    \    (append (sort (map digit-sum nums)\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) ", "  (sort nums\n        (lambda (x y)\n          (if (= (sum (digit-value\
    \ x)) (sum (digit-value y)))\n              (< (length nums) (- x y))\n      \
    \        (< (length nums) (- y x)))\n          (< (length nums) (- x y))\n   \
    \       (< (length nums) (- y x))))))\n", "  (cond\n    [(empty? nums) '()]\n\
    \    [(= (length nums) 1) nums]\n    [else (append (order_by_points (sub1 nums))\n\
    \                  (list (first nums))))]\n  ))\n", "  (define (helper nums sum)\n\
    \    (cond\n      [(empty? nums) (list sum)]\n      [(< sum (car nums)) (cons\
    \ (car nums) (helper (cdr nums) sum))]\n      [else (helper (cdr nums) (+ sum\
    \ (car nums)))]))\n  (helper nums 0))\n", "  (if (null? nums)\n      '()\n   \
    \   (append (sort (map digit-sum nums)\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n           \
    \          (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (<\
    \ (+ x y) 0))\n                     (lambda (x y) (< (+ x ", "  (define (helper\
    \ nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(equal? (sum (first\
    \ nums)) 0)\n       (helper (rest nums) (cons (first nums) acc))]\n      [else\n\
    \       (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums nil))\n",
  "  (if (null? nums)\n      '()\n      (let ((sum (fold_left (lambda (x y) (+ x y))\
    \ 0 nums)))\n        (cons (if (= sum 0) nums (fold-left (lambda (x y) (cons x\
    \ y)) '() nums))\n              (order_by_points (cdr nums)))))))\n", "  (if (empty?\
    \ nums)\n      '()\n      (append (sort (map sum (map digits (reverse nums))))\n\
    \              (cons (first nums) (order_by_points (rest nums))))))\n", "  (if\
    \ (null? nums)\n      '()\n      (let ((sum (sum (map digit nums))))\n       \
    \ (cons (cons (car nums) sum)\n              (order_by_points (cdr nums)))))))\n",
  "  (cond\n    [(empty? nums) '()]\n    [(zero? (first nums)) '()]\n    [else (cons\
    \ (first nums)\n                (order_by_points (rest nums)))]))\n", "  (define\
    \ (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(equal? (sum\
    \ (first nums)) acc) (helper (rest nums) (cons (first nums) acc))]\n      [else\
    \ (helper (rest nums) (cons (first nums) acc))]\n    ))\n  (helper nums nil))\n",
  "  (if (null? nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n\
    \                    (second nums)\n                    (first nums))\n      \
    \        (order_by_points (rest nums)))))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map digits (reverse nums))) <)\n              \
    \ (reverse nums))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map cdr nums))\n                    (lambda (x y) (< (+ x y) 0))\n    \
    \                (lambda (x y) (> (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (> (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (> (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (> (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (> (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (> (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (> (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (> (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (> (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (> (+ x y) 0))\n                    (lambda (x y) (< (+ ", "  (cond\n\
    \    [(empty? nums) '()]\n    [(= (length nums) 1) nums]\n    [else (append (order_by_points\
    \ (sub1 nums))\n                  (list (first nums))))]\n  )\n)\n", "  (if (null?\
    \ nums)\n      '()\n      (append (sort (map sum (map digits (reverse nums)))\
    \ <)\n              nums)))\n", "  (if (null? nums)\n      '()\n      (append\
    \ (sort (map sum (map digits (reverse nums))) <)\n              (cons nums (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      '()\n      (let ((sum (sum (map\
    \ digit nums))))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                 (lambda (x y)\n              \
    \                     (if (< x y)\n                                       (cons\
    \ x y)\n                                       (cons y x)))))))))\n", "  (define\
    \ (helper nums acc i)\n    (if (null? nums)\n        acc\n        (helper (cdr\
    \ nums) (cons (+ (car nums) (* i 10)) acc) (inc i))))\n  (helper nums nil 0))\n",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))) <)\n              nums)))\n", "  (if (null? nums)\n      '()\n     \
    \ (append (list (+ (first nums) (second nums))\n                   (length (first\
    \ nums)))\n              (order_by_points (rest nums)))))\n", "  (define (helper\
    \ nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(equal? (sum (first\
    \ nums)) 0)\n       (helper (rest nums) (cons (first nums) acc))]\n      [else\
    \ (helper (rest nums) (cons (first nums) acc))]\n      ))\n  (helper nums nil))\n",
  "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(equal?\
    \ (sum (first nums)) acc) (helper (rest nums) (cons (first nums) acc))]\n    \
    \  [else (helper (rest nums) (cons (first nums) acc))]\n    ))\n  (helper nums\
    \ nil))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum (map\
    \ digits nums))\n                     (lambda (x y) (< (+ x y) 0))\n         \
    \            <)\n               (cons (car nums) (order_by_points (cdr nums))))))\n",
  "  (cond\n    [(empty? nums) '()]\n    [(= (length nums) 1) nums]\n    [else (append\
    \ (order_by_points (sub1 nums))\n                   (list (first nums))\n    \
    \               (order_by_points (rest nums)))]))\n", "  (if (null? nums)\n  \
    \    '()\n      (append (sort (map sum (map digits (reverse nums))) <)\n     \
    \         nums)))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits (reverse nums))) <)\n              nums)))\n", "  (if (null?\
    \ nums)\n      '()\n      (append (sort (map digit-sum (map digits nums))\n  \
    \                   <)\n              nums)))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map digit-value nums))\n                     <)\n\
    \              (cons (first nums) nums)\n              (order_by_points (rest\
    \ nums)))))\n", "  (define (helper nums acc)\n    (cond\n      [(empty? nums)\
    \ (reverse acc)]\n      [(equal? (sum (first nums)) (sum (first acc)))\n     \
    \  (helper (rest nums) (cons (first nums) acc))]\n      [else (helper (rest nums)\
    \ (cons (first acc) acc))]\n    ))\n  (helper nums empty))\n", "  (if (null? nums)\n\
    \      '()\n      (append (list (+ (first nums) (second nums))\n             \
    \       (second nums))\n              (order_by_points (rest nums)))))\n", " \
    \ (if (null? nums)\n      '()\n      (append (sort (map digit-sum nums)\n    \
    \                 (lambda (x y)\n                       (< (+ x y) y))\n     \
    \                #:key (lambda (x y)\n                            (< (length x)\
    \ (length y)))\n                     #:stable true)\n              (order_by_points\
    \ (cdr nums)))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map digit-sum nums))\n                     (lambda (x y) (< (+ x y) 0))\n\
    \                     <)\n              (cons (first nums) (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum\
    \ (map digit-sums nums))\n                    (lambda (x y) (< (+ x y) 0))\n \
    \                   (lambda (x y) (> (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (> (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (>\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (> (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (> (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (> (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (>\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (> (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (> (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (> (+ x y) 0))\n                    (lambda (x y) (", "  (define\
    \ (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(equal? (sum\
    \ (first nums)) 0)\n       (helper (rest nums) (cons (first nums) acc))]\n   \
    \   [else\n       (helper (rest nums) (cons (first nums) acc))]\n      ))\n  (helper\
    \ nums nil))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum\
    \ (map digits (reverse nums))) <)\n              (cons (first nums) nums)\n  \
    \            (order_by_points (rest nums)))))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map digits (reverse nums))))\n              (cons\
    \ (first nums) (order_by_points (rest nums))))))\n", "  (cond\n    [(empty? nums)\
    \ '()]\n    [(= (length nums) 1) nums]\n    [else (cons (first nums)\n       \
    \         (order_by_points (rest nums))\n                (order_by_points (rest\
    \ nums))\n                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums))\n                (order_by_points (rest nums))\n              \
    \  (order_by_points (rest nums))\n                (order_by_points (rest nums))\n\
    \                (order_by_points (rest nums))\n                (order_by_", " \
    \ (if (null? nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n\
    \                   (length (rest nums)))\n              (order_by_points (rest\
    \ nums)))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum (map\
    \ digits nums)) <)\n              (cons (car nums) (order_by_points (cdr nums))))))\n",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))) <)\n              nums)))\n", "  (cond\n    [(empty? nums) '()]\n  \
    \  [(equal? (first nums) (first nums)) (order_by_points rest nums)]\n    [else\
    \ (cons (first nums) (order_by_points rest nums))]))\n", "  (if (null? nums)\n\
    \      '()\n      (append (sort (map sum (map digits (reverse nums))))\n     \
    \         (cons (car nums) (order_by_points (cdr nums))))))\n", "  (if (null?\
    \ nums)\n      '()\n      (append (list (sum (first nums))\n                 \
    \   (length (first nums))\n                    (first nums))\n              (order_by_points\
    \ (rest nums)))))\n", "  (if (null? nums)\n      '()\n      (append (list (+ (first\
    \ nums) (second nums))\n                   (length nums))\n              (order_by_points\
    \ (rest nums)))))\n", "  (if (null? nums)\n      '()\n      (let ((sum (fold_left\
    \ (lambda (x y) (+ x y)) 0 (map digits (reverse nums)))))\n        (if (= sum\
    \ 0)\n            (cons 0 (reverse nums))\n            (cons sum (reverse nums))))))\n",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map cdr nums))\n \
    \                    (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (", "  (if (null? nums)\n      '()\n      (let ((sum (+ (first nums)\
    \ (second nums))))\n        (cons (if (= sum 0)\n                   (first nums)\n\
    \                   (second nums))\n              (order_by_points (rest nums))))))\n",
  "  (sort nums\n        (lambda (x y)\n          (if (= (+ x y) 0)\n            \
    \  (- x y)\n              (if (= (+ x y) 0)\n                  (- y x)\n     \
    \             (if (= (+ x y) 0)\n                      (- x y)\n             \
    \         (if (= (+ x y) 0)\n                          (- y x)\n             \
    \             (if (= (+ x y) 0)\n                              (- x y)\n     \
    \                         (if (= (+ x y) 0)\n                                \
    \  (- y x)\n                                  (if (= (+ x y) 0)\n            \
    \                          (- x y)\n                                      (if\
    \ (= (+ x y) 0)\n                                          (- y x)\n         \
    \                                 (if (= (+ x y) 0)\n                        \
    \                      (- x y)\n                                             \
    \ (if (= (+ x y) 0)\n                                                  (- y x)\n\
    \                                                  (if (= (+ x y) 0)\n       \
    \                                               (- x y)\n                    \
    \                                  (if (= (+ x y) 0)\n                       \
    \                                   (- y x)\n                                \
    \                          (if (= (+ x y) 0)\n                               \
    \                               (- x y)\n                                    \
    \                          (if (= (+ x y) 0)\n                               \
    \                                   (- y x)\n                                \
    \                                  (if (= (+ x y) 0)\n                       \
    \                                               (- x y)\n                    \
    \                                                  (if (= (+ x y) 0)\n       \
    \                                                                   (- y x)\n\
    \                                                                          (if\
    \ (= (+ x y) 0)\n                                                            \
    \                  (- x y)\n                                                 \
    \                             (if (= (+ x y) 0)\n                            \
    \                                                      (- y x)\n             \
    \                                                                     (if (= (+\
    \ x y) 0)\n                                                                  \
    \                    (- x y)\n                                               \
    \                                       (if (= (+ x y) 0)\n                  \
    \                                                                        (- y\
    \ x)\n                                                                       \
    \                   (if (= (+ x y) 0)\n                                      \
    \                                                        (- x y)\n           \
    \                                                                            \
    \       (if (= (+ x y) 0)\n                                                  \
    \                                                (- y x)\n                   \
    \                                                                            \
    \   (if (= (+ x y) 0)\n                                                      \
    \                                                (- x y)\n                   \
    \                                                                            \
    \       (if (= (+ x y) 0)\n                                                  \
    \                                                        (- y x)\n           \
    \                                                                            \
    \                   (if (= (+ x y) 0)\n                                      \
    \                                                                        (- x\
    \ y)\n                                                                       \
    \                                       (if (= (+ x y) 0)\n                  \
    \                                                                            \
    \                    (- y x)\n                                               \
    \                                                                   (if (= (+\
    \ x y) 0)\n                                                                  \
    \                                                    (- x y)\n               \
    \                                                                            \
    \                           (if (= (+ x y) 0)\n                              \
    \                                                                            \
    \                (- y x)\n                                                   \
    \                                                                       (if (=\
    \ (+ x y) 0)\n                                                               \
    \                                                               (- x y)\n    \
    \                                                                            \
    \                                              (if (= (+ x y) 0)", "  (sort nums\n\
    \        (lambda (x y)\n          (if (= (sum (digits x)) (sum (digits y)))\n\
    \              (< (length nums) (length nums))\n              (< (length nums)\
    \ (length nums))\n              (< (length nums) (length nums))\n            \
    \  (< (length nums) (length nums))\n              (< (length nums) (length nums))\n\
    \              (< (length nums) (length nums))\n              (< (length nums)\
    \ (length nums))\n              (< (length nums) (length nums))\n            \
    \  (< (length nums) (length nums))\n              (< (length nums) (length nums))\n\
    \              (< (length nums) (length nums))\n              (< (length nums)\
    \ (length nums))\n              (< (length nums) (length nums))\n            \
    \  (< (length nums) (length nums))\n              (< (length nums) (length nums))\n\
    \              (< (length nums) (length nums))\n              (< (length nums)\
    \ (length nums))\n              (< (length nums) (length nums))\n            \
    \  (< (length nums) (length nums))\n              (< (length nums) (length nums))\n\
    \              (< (length nums) (length nums))\n              (< (length nums)\
    \ (length nums))\n              (< (length nums) (length nums))\n            \
    \  (< (length nums) (length nums))\n              (< (length nums) (length nums))\n\
    \              (< (length nums) (length nums))\n              (< (length nums)\
    \ (length nums))\n              (< (length nums) (length nums))\n            \
    \  (< (length nums) (length nums))\n              (< (length nums) (length nums))\n\
    \              (< (length nums) (length nums))\n              (< (length nums)\
    \ (length nums))\n              (< (length nums) (length nums))\n            \
    \  (< (length nums) (length nums))\n              (< (length nums) (length nums))\n\
    \              (< (length nums) (length nums))\n              (< (length nums)\
    \ (length nums))\n              (< (length nums) (length nums))\n            \
    \  (< (length nums) (length nums))\n              (< (length nums) (length nums))\n\
    \              (< (length nums) (length nums))\n              (< (length nums)\
    \ (length nums))\n              (< (length nums) (length nums))\n            \
    \  (< (length nums) (length nums))\n", "  (if (null? nums)\n      '()\n      (append\
    \ (sort (map sum (map cdr nums))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ ", " \
    \ (if (null? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))))\n              (cons (car nums) (order_by_points (cdr nums))))))\n",
  "  (sort nums\n        (lambda (x y)\n          (if (= (sum (digit-part x)) (sum\
    \ (digit-part y)))\n              (< (length nums) (length nums))\n          \
    \    (< (length nums) (length nums))))))\n", "  (cond\n    [(empty? nums) '()]\n\
    \    [(= (length nums) 1) nums]\n    [else (append (sort (map sum (map digits\
    \ (rest nums))) <)\n                  (cons (first nums) (order_by_points (rest\
    \ nums))))]))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum\
    \ (map digits nums)) <)\n              nums)))\n", "  (cond\n    [(empty? nums)\
    \ '()]\n    [(= (length nums) 1) nums]\n    [else (cons (first nums)\n       \
    \         (order_by_points (rest nums)))]))\n", "  (define (helper nums acc)\n\
    \    (cond\n      [(empty? nums) acc]\n      [(< 0 (car nums)) (helper (cdr nums)\
    \ (cons (car nums) acc))]\n      [else (helper (cdr nums) (cons (car nums) acc))]\n\
    \      ))\n  (helper nums '()))\n", "  (if (null? nums)\n      '()\n      (append\
    \ (list (+ (first nums) (second nums))\n                    (second nums))\n \
    \             (order_by_points (rest nums)))))\n", "  (if (null? nums)\n     \
    \ '()\n      (append (sort (map digit-sum (map digits nums))\n               \
    \      <)\n              (cons (first nums) nums))))\n", "  (define (helper nums\
    \ sum)\n    (cond\n      [(empty? nums) (list sum)]\n      [(equal? sum (first\
    \ nums)) (helper (rest nums) (+ sum first))]\n      [else (helper (rest nums)\
    \ (+ sum first))]))\n  (helper nums 0))\n", "  (if (empty? nums)\n      '()\n\
    \      (append (list (+ (first nums) (second nums))\n                   (length\
    \ (first nums)))\n              (order_by_points (rest nums)))))\n", "  (if (null?\
    \ nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n     \
    \               (order_by_points (rest nums)))\n              (list (first nums)\n\
    \                    (second nums)))))\n", "  (if (null? nums)\n      '()\n  \
    \    (append (sort (map sum (map digits (reverse nums))))\n              (cons\
    \ (first nums) nums))))\n", "  (cond\n    [(empty? nums) '()]\n    [(zero? (first\
    \ nums)) (cons (first nums) '())]\n    [else (cons (first nums)\n            \
    \    (order_by_points (rest nums)))]))\n", "  (cond\n    [(empty? nums) '()]\n\
    \    [(= (length nums) 1) nums]\n    [else (append (order_by_points (sub1 nums))\n\
    \                  (list (first nums))))]\n))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map digit-sum (map digit-value nums))\n                \
    \     <)\n              (cons (first nums) (order_by_points (rest nums))))))\n",
  "  (if (null? nums)\n      '()\n      (let ((sum (+ 0 (first nums))))\n        (cons\
    \ (first nums)\n              (order_by_points (rest nums)\n                 \
    \            (lambda (x y)\n                               (if (= x y)\n     \
    \                              sum\n                                   (if (<\
    \ x y)\n                                       (+ sum (quotient x y))\n      \
    \                                 (+ sum (quotient y x)))))))))\n", "  (if (null?\
    \ nums)\n      '()\n      (let ((sum (sum-digits (first nums))))\n        (cons\
    \ (first nums)\n              (order_by_points (rest nums)\n                 \
    \             (lambda (x y)\n                                (if (= x y)\n   \
    \                                 (+ x y)\n                                  \
    \  (if (< x y)\n                                        (+ x sum)\n          \
    \                              (+ y sum)))))))))\n", "  (cond\n    [(empty? nums)\
    \ '()]\n    [(zero? (first nums)) (cons (first nums) '())]\n    [else (cons (first\
    \ nums)\n                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums)))]))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ digit-sum (map digits nums)) <)\n              nums)))\n", "  (sort nums\n \
    \       (lambda (a b)\n          (+ (digit-value a) (digit-value b)))))\n", " \
    \ (define (helper nums sum)\n    (cond\n      [(empty? nums) '()]\n      [(equal?\
    \ sum 0) (cons 0 (reverse nums))]\n      [(equal? sum 1) (cons 1 (reverse nums))]\n\
    \      [(equal? sum 2) (cons 2 (reverse nums))]\n      [(equal? sum 3) (cons 3\
    \ (reverse nums))]\n      [(equal? sum 4) (cons 4 (reverse nums))]\n      [(equal?\
    \ sum 5) (cons 5 (reverse nums))]\n      [(equal? sum 6) (cons 6 (reverse nums))]\n\
    \      [(equal? sum 7) (cons 7 (reverse nums))]\n      [(equal? sum 8) (cons 8\
    \ (reverse nums))]\n      [(equal? sum 9) (cons 9 (reverse nums))]\n      [else\
    \ (cons (car nums) (helper (cdr nums) (+ sum (car nums))))]\n      ))\n  (helper\
    \ nums 0))\n", "  (if (null? nums)\n      '()\n      (append (list (+ (first nums)\
    \ (second nums))\n                    (second nums))\n              (order_by_points\
    \ (rest nums)))))\n", "  (if (null? nums)\n      '()\n      (append (list (+ (first\
    \ nums) (second nums))\n                    (second nums))\n              (order_by_points\
    \ (rest nums)))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits (reverse nums))))\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ digit-sum nums)\n                     <)\n              (cons (first nums) nums))))\n",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map cdr nums))\n \
    \                    (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< x y)))\n              (cons (car nums) (order_by_points (cdr nums))))))\n",
  "  (if (null? nums)\n      '()\n      (let ((sum (sum (map digit nums))))\n    \
    \    (cons (cons nums sum)\n              (order_by_points (cdr nums))))))\n",
  "  (cond\n    [(empty? nums) '()]\n    [(zero? (first nums)) (cons (first nums)\
    \ '())]\n    [else (cons (first nums)\n                (order_by_points (rest\
    \ nums))\n                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums)))]))\n", "  (cond\n    [(empty? nums) '()]\n    [(zero? (first nums))\
    \ (cons (first nums) '())]\n    [else (cons (first nums)\n                (order_by_points\
    \ (rest nums)))]))\n", "  (sort nums\n        (lambda (a b)\n          (+ (digit-sum\
    \ a) (digit-sum b))))\n  )\n", "  (if (null? nums)\n      '()\n      (append (sort\
    \ (map sum (map digits nums)) <)\n              (list nums))))\n", "  (cond\n\
    \    [(empty? nums) '()]\n    [(= (length nums) 1) nums]\n    [else (append (sort\
    \ (map sum (map digits (reverse nums))) <)\n                  (order_by_points\
    \ (rest nums))]))))\n", "  (define (helper nums acc)\n    (if (null? nums)\n \
    \       acc\n        (helper (cdr nums) (cons (+ (car nums) (car acc)) acc)))))\n\
    \  (helper nums '()))\n", "  (if (null? nums)\n      '()\n      (append (sort\
    \ (map digit-sum nums)\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x ", "  (sort nums\n        (lambda (x\
    \ y)\n          (if (= (+ x y) 0)\n              (< x y)\n              (< y x)))))\n",
  "  (if (null? nums)\n      '()\n      (let ((sum (fold_left (lambda (x y) (+ x y))\
    \ 0 nums)))\n        (if (= sum 0)\n            (cons nums nums)\n           \
    \ (cons (first nums) (order_by_points (rest nums)))))))\n", "  (cond\n    [(empty?\
    \ nums) '()]\n    [(= (length nums) 1) nums]\n    [else (append (order_by_points\
    \ (sub1 nums))\n                  (list (first nums))))]\n  ))\n", "  (cond\n\
    \    [(empty? nums) '()]\n    [(zero? (first nums)) (cons (first nums) '())]\n\
    \    [else (cons (first nums)\n                (order_by_points (rest nums)))]))\n",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map digits nums))\n\
    \                     <)\n              (cons (first nums) nums)\n           \
    \   (order_by_points (rest nums)))))\n", "  (sort nums\n        (lambda (a b)\n\
    \          (+ (digit-sum a) (digit-sum b))))\n  )\n", "  (if (null? nums)\n  \
    \    '()\n      (append (sort (map sum (map digits (reverse nums))))\n       \
    \       (cons (car nums) (order_by_points (cdr nums))))))\n", "  (if (null? nums)\n\
    \      '()\n      (append (list (+ (first nums) (second nums))\n             \
    \      (length (rest nums)))\n              (order_by_points (rest nums)))))\n",
  "  (cond\n    [(empty? nums) '()]\n    [(zero? (first nums)) (cons (first nums)\
    \ (order_by_points (rest nums)))]\n    [else (cons (first nums)\n            \
    \    (order_by_points (rest nums)\n                               (lambda (x y)\n\
    \                                (if (= (sum (first nums)) x)\n              \
    \                      (cons x y)\n                                    (cons y\
    \ x)))))]))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum (map\
    \ digit-part nums))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     nums)\n  \
    \            (order_by_points (cdr nums)))))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map digit-value nums))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   nums)\n              (order_by_points (cdr nums)))))\n", " \
    \ (if (null? nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n\
    \                    (order_by_points (rest nums)))\n              (list (first\
    \ nums)\n                    (second nums)))))\n", "  (if (empty? nums)\n    \
    \  '()\n      (append (sort (map digit-sum (map digit-value nums))\n         \
    \            (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y)\
    \ (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n        \
    \             (lambda (x y) (< (+ x y) 0))\n                     (lambda (", " \
    \ (define (helper nums acc)\n    (cond\n      [(empty? nums) (cons acc empty)]\n\
    \      [(equal? (first nums) (first acc)) (helper (rest nums) (cons (first nums)\
    \ acc))]\n      [else (helper (rest nums) (cons (first nums) acc))]\n    ))\n\
    \  (helper nums empty))\n", "  (sort nums\n        (lambda (x y)\n          (if\
    \ (= (sum (modulo x 10) (modulo y 10)) 0)\n              (< (length nums) (length\
    \ nums))\n              (< (length nums) (length nums))))))\n", "  (if (null?\
    \ nums)\n      '()\n      (append (sort (map digit-sum nums)\n               \
    \      (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n              \
    \       (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+\
    \ x ", "  (if (null? nums)\n      '()\n      (append (sort (map digit-sum nums)\n\
    \                     (lambda (x y) (< (+ x y) 10))\n                     (lambda\
    \ (x y) (> (+ x y) 10))\n                     #:key (lambda (x y) (+ (digit-sum\
    \ x) digit-sum y))\n                     #:stable #t)\n              (cons (first\
    \ nums) (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      '()\n\
    \      (let ((sum (sum (map digit nums))))\n        (cond ((= sum 0) nums)\n \
    \             ((< sum 0) (order_by_points '()))\n              (else (cons (first\
    \ nums) (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n      '()\n\
    \      (let ((sum (sum-digits (first nums))))\n        (cons (first nums)\n  \
    \             (order_by_points (rest nums)\n                               (lambda\
    \ (x y)\n                                 (if (= x y)\n                      \
    \               (+ x y)\n                                     (< x y)))))))))\n",
  "  (if (null? nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n\
    \                    (second nums))\n              (order_by_points (rest nums)))))\n",
  "  (if (null? nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n\
    \                    (second nums))\n              (order_by_points (rest nums)))))\n",
  "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (helper\
    \ (cdr nums) (cons (+ (car nums) (car acc)) acc)))))\n  (helper nums nil))\n",
  "  (if (null? nums)\n      '()\n      (let ((sum (sum-digits (first nums))))\n \
    \       (cons (first nums)\n              (order_by_points (rest nums)\n     \
    \                          (lambda (x y)\n                                 (if\
    \ (= x y)\n                                     (+ x y)\n                    \
    \                 (= x sum))))))))\n", "  (sort nums\n        (lambda (a b)\n\
    \          (+ (digit-sum a) (digit-sum b)))\n        'asc))\n", "  (if (null?\
    \ nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n     \
    \               (order_by_points (rest nums)))\n              (list (first nums)\n\
    \                    (second nums)))))\n", "  (define (helper nums acc)\n    (cond\n\
    \      [(empty? nums) (cons acc '())]\n      [(equal? (first nums) (first acc))\
    \ (helper (rest nums) (cons (first nums) acc))]\n      [else (helper (rest nums)\
    \ (cons (first nums) acc))]\n      ))\n  (helper nums '()))\n", "  (define (helper\
    \ nums sum)\n    (cond\n      [(empty? nums) '()]\n      [(equal? sum (first nums))\
    \ (cons nums (helper (rest nums) (+ sum first)))]\n      [else (cons (first nums)\
    \ (helper (rest nums) (+ sum first)))]))\n  (helper nums 0))\n", "  (if (null?\
    \ nums)\n      '()\n      (let ((sum (sum-digits (first nums))))\n        (cons\
    \ (first nums)\n              (order_by_points (rest nums)\n                 \
    \             (lambda (x y)\n                                (if (= x y)\n   \
    \                                 0\n                                    (+ x\
    \ y)))))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map digit-sum\
    \ (map reverse nums))\n                     <)\n              (cons (first nums)\
    \ nums))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum (map\
    \ digits nums)) <)\n              (cons 0 (car nums))\n              (order_by_points\
    \ (cdr nums)))))\n", "  (define (helper nums sum)\n    (cond\n      [(empty? nums)\
    \ (list sum)]\n      [(equal? sum (first nums)) (cons sum (helper (rest nums)\
    \ sum))]\n      [else (helper (rest nums) (+ sum (first nums)))]))\n  (helper\
    \ nums 0))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum (map\
    \ digits (reverse nums))) <)\n              (cons (first nums) nums))))\n", " \
    \ (if (null? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))))\n              (cons (first nums) nums))))\n", "  (if (null? nums)\n\
    \      '()\n      (append (sort (map sum (map digits nums))\n                \
    \     (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (> (+ x\
    \ y) 0))\n                     #:key (lambda (x) (- x y)))\n              (cons\
    \ (car nums) (order_by_points (cdr nums))))))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map digits nums))\n                     <)\n  \
    \            (cons (first nums) nums)\n              (order_by_points (rest nums)))))\n",
  "  (sort nums\n        (lambda (a b)\n          (if (= (sum (digits a)) (sum (digits\
    \ b)))\n              (< (length a) (length b))\n              (< (length b) (length\
    \ a)))\n          (< (sum (digits a)) (sum (digits b)))\n          (< (length\
    \ a) (length b)))\n        (digits nums)))\n", "  (if (null? nums)\n      '()\n\
    \      (append (list (+ (first nums) (second nums))\n                   (length\
    \ (first nums)))\n              (order_by_points (rest nums)))))\n", "  (if (null?\
    \ nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n     \
    \              (length (first nums)))\n              (order_by_points (rest nums)))))\n",
  "  (if (null? nums)\n      '()\n      (append (list (+ (first nums) (second nums))\n\
    \                   (length (rest nums)))\n              (order_by_points (rest\
    \ nums)))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum (map\
    \ digits (reverse nums))) <)\n              nums)))\n", "  (if (null? nums)\n\
    \      '()\n      (append (sort (map sum (map digits (reverse nums))))\n     \
    \         (list (car nums)))))\n", "  (if (null? nums)\n      '()\n      (let\
    \ ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n        (cons (list-ref nums\
    \ (sort (lambda (x) (< (+ x sum) 0))))\n              (order_by_points (cdr nums))))))\n",
  "  (sort nums\n        (lambda (x y)\n          (if (= (sum (modulo x 10) (modulo\
    \ y 10)) 0)\n              (if (< x y)\n                  (- x y)\n          \
    \        (- y x))\n              (if (< x y)\n                  (- x y)\n    \
    \              (- y x))\n              (if (< x y)\n                  (- x y)\n\
    \                  (- y x))))))\n", "  (if (null? nums)\n      '()\n      (append\
    \ (sort (map digit-sum nums)\n                     (lambda (x y)\n           \
    \             (< (+ x y) y))\n                    (lambda (x y)\n            \
    \            (< (+ x y) y))))))\n", "  (cond\n    [(empty? nums) '()]\n    [(=\
    \ (length nums) 1) nums]\n    [else (cons (first nums)\n                (order_by_points\
    \ (rest nums)))]))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits nums))\n                     (lambda (x y) (< (+ x y) 0))\n\
    \                     (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ ", "  (if (null? nums)\n      '()\n  \
    \    (append (list (+ (first nums) (second nums))\n                   (length\
    \ (first nums)))\n              (order_by_points (rest nums)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
