name: HumanEval_49_modp
language: rkt
prompt: "#lang racket\n\n;; Return 2^n modulo p (be aware of numerics).\n(define (modp\
  \ n p)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n\
  \    (check-equal? (candidate 3 5) 3)\n    (check-equal? (candidate 1101 101) 2)\n\
  \    (check-equal? (candidate 0 101) 1)\n    (check-equal? (candidate 3 11) 8)\n\
  \    (check-equal? (candidate 100 101) 1)\n    (check-equal? (candidate 30 5) 4)\n\
  \    (check-equal? (candidate 31 5) 3)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      0\n      (* p (modp n (sub1 p))))) ;; #lang racket\n",
  "  (if (= n 0)\n      p\n      (modp (- n 1) (* p p))))\n", "  (if (= n 0)\n   \
    \   p\n      (modp (- n 1) (modulo (modulo n p) p))))\n", "  (if (= n 0)\n   \
    \   0\n      (modulo (modulo (modulo n p) p) p)))\n", "  (mod n p))\n", "  (if\
    \ (= n 0)\n      0\n      (modulo (expt 2 n) p)))\n", "  (let ((m (modulo n p)))\n\
    \    (if (= m 0)\n        p\n        (modp m p))))\n", "  (if (= n 0)\n      0\n\
    \      (modulo (expt 2 n) p)))\n", "  (let ((m (mod-n n p)))\n    (if (= m 0)\n\
    \        p\n        (modp m (mod-n m p)))))\n", "  (let ((m (modulo n p)))\n \
    \   (if (= m 0)\n        p\n        (modp m p))))\n", "  (mod n p))\n", "  (if\
    \ (= n 0)\n      p\n      (modp (- n 1) (* p p))))\n", "  (if (= n 0)\n      0\n\
    \      (* 2 (modp n (remainder p 2)))))\n", "  (if (= n 0)\n      0\n      (modulo\
    \ (expt 2 n) p)))\n", "  (mod n p))\n", "  (if (= n 0)\n      0\n      (mod n\
    \ (expt p 2))))\n", "  (if (= n 0)\n      0\n      (modulo (* 2 n) p)))\n", " \
    \ (mod n p))\n", "  (mod n p))\n", "  (let ((m (modulo n p)))\n    (if (= m 0)\n\
    \        p\n        (modp m p))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
