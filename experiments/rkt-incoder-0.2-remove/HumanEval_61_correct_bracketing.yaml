name: HumanEval_61_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"(\" and \")\".\n;; return True\
  \ if every opening bracket has a corresponding closing bracket.\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"()\") #t)\n    (check-equal? (candidate \"(()())\"\
  ) #t)\n    (check-equal? (candidate \"()()(()())()\") #t)\n    (check-equal? (candidate\
  \ \"()()((()()())())(()()(()))\") #t)\n    (check-equal? (candidate \"((()())))\"\
  ) #f)\n    (check-equal? (candidate \")(()\") #f)\n    (check-equal? (candidate\
  \ \"(\") #f)\n    (check-equal? (candidate \"((((\") #f)\n    (check-equal? (candidate\
  \ \")\") #f)\n    (check-equal? (candidate \"(()\") #f)\n    (check-equal? (candidate\
  \ \"()()(()())())(()\") #f)\n    (check-equal? (candidate \"()()(()())()))()\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (let ((bracket-count 0))\n    (cond\n      [(empty? brackets) #t]\n\
    \      [(equal? (first brackets) '(') (set! bracket-count (+ bracket-count 1))]\n\
    \      [(equal? (first brackets) ')') (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (+ bracket-count 1))]\n      [else (set! bracket-count\
    \ (- bracket-count 1))]\n      [else (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (- bracket-count 1))]\n      [else (set! bracket-count\
    \ (- bracket-count 1))]\n      [else (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (- bracket-count 1))]\n      [else (set! bracket-count\
    \ (- bracket-count 1))]\n      [else (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (- bracket-count 1))]\n      [else (set! bracket-count\
    \ (- bracket-count 1))]\n      [else (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (- bracket-count 1))]\n      [else (set! bracket-count\
    \ (- bracket-count 1))]\n      [else (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (- bracket-count 1))]\n      [else (set! bracket-count\
    \ (- bracket-count 1))]\n      [else (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (- bracket-count 1))]\n      [else (set! bracket-count\
    \ (- bracket-count 1))]\n      [else (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (- bracket-count 1))]\n      [else (set! bracket-count\
    \ (- bracket-count 1))]\n      [else (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (- bracket-count 1))]\n      [else (set! bracket-count\
    \ (- bracket-count 1))]\n      [else (set! bracket-count (- bracket-count 1))]\n\
    \      [else (set! bracket-count (- bracket-count ", "  (cond\n    [(empty? brackets)\
    \ true]\n    [(equal? (first brackets) '(') (correct_bracketing (substring brackets\
    \ 1 )))]\n    [else false]))\n", "  (let ((brackets-stack '())\n        (brackets-stack-size\
    \ 0))\n    (cond\n      [(empty? brackets)\n       (empty? brackets-stack)]\n\
    \      [(equal? (car brackets) '(')\n       (push (car brackets) brackets-stack)]\n\
    \      [else\n       (push (car brackets) brackets-stack)]\n      [(equal? (car\
    \ brackets) ')')\n       (cond\n         [(empty? brackets-stack)\n          (equal?\
    \ (car brackets-stack) '())]\n         [else\n          (let ((opening-stack (cdr\
    \ brackets-stack)))\n            (cond\n              [(equal? (car opening-stack)\
    \ '(')\n               (push (car opening-stack) brackets-stack)]\n          \
    \    [else\n               (push (car opening-stack) brackets-stack)]\n      \
    \        [(equal? (car opening-stack) ')')\n               (cond\n           \
    \      [(empty? brackets-stack)\n                  (equal? (car opening-stack)\
    \ '())]\n                 [else\n                  (let ((closing-stack (cdr opening-stack)))\n\
    \                    (cond\n                      [(equal? (car closing-stack)\
    \ '(')\n                       (push (car closing-stack) brackets-stack)]\n  \
    \                    [else\n                       (push (car closing-stack) brackets-stack)]\n\
    \                      [(equal? (car closing-stack) ')')\n                   \
    \    (cond\n                         [(empty? opening-stack)\n               \
    \          (equal? (car closing-stack) '())]\n                         [else\n\
    \                         (let ((closing-brackets-stack (cdr closing-stack)))\n\
    \                          (cond\n                            [(equal? (car closing-brackets-stack)\
    \ '(')\n                             (push (car closing-brackets-stack) brackets-stack)]\n\
    \                            [else\n                             (push (car closing-brackets-stack)\
    \ brackets-stack)]\n                            [(equal? (car closing-brackets-stack)\
    \ ')')\n                             (cond\n                               [(empty?\
    \ opening-stack)\n                               (equal? (car closing-brackets-stack)\
    \ '())]\n                               [else\n                              \
    \ (let ((closing-brackets-stack (cdr closing-brackets-stack)))\n             \
    \                   (cond\n                                  [(equal? (car closing-brackets-stack)\
    \ '(')\n                                   (push (", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) '(') (correct_bracketing (substring brackets\
    \ 1 )))]\n    [else (correct_bracketing (substring brackets 1 ))]))\n", "  (cond\n\
    \    [(empty? brackets) true]\n    [(equal? (first brackets) '(') (correct_bracketing\
    \ (substring brackets 1 )))]\n    [else false]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) '(') (correct_bracketing (substring brackets\
    \ 1 )))]\n    [else (correct_bracketing (substring brackets 1 ))]))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (car brackets) '(') (correct_bracketing\
    \ (substring brackets 1 1)))]\n    [else (correct_bracketing (substring brackets\
    \ 1 -1))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (car brackets)\
    \ \"(\") #f]\n    [(equal? (car brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (cdr brackets))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first\
    \ brackets) '(') (correct_bracketing (substring brackets 1 )))]\n    [else (correct_bracketing\
    \ (substring brackets 1 ))]))\n", "  (cond\n    [(empty? brackets) true]\n   \
    \ [(equal? (first brackets) '(') (correct_bracketing (rest brackets))]\n    [else\
    \ false]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ '(') (correct_bracketing (substring brackets 1 )))]\n    [else (correct_bracketing\
    \ (substring brackets 1 ))]))\n", "  (cond\n    [(empty? brackets) true]\n   \
    \ [(equal? (first brackets) '(') (correct_bracketing (rest brackets))]\n    [else\
    \ false]))\n", "  (let ((bracket-count 0))\n    (cond\n      [(empty? brackets)\
    \ #t]\n      [(equal? (car brackets) '(') (add1 (bracket-count))]\n      [(equal?\
    \ (car brackets) ')') (sub1 (bracket-count))]\n      [else (correct_bracketing\
    \ (cdr brackets))])))\n", "  (let ((bracket-stack '())\n        (bracket-count\
    \ 0))\n    (cond\n      [(empty? brackets) true]\n      [(equal? (first brackets)\
    \ '(') (push! bracket-stack brackets)\n        (set! bracket-count (add1 bracket-count))\n\
    \        (cond\n          [(empty? bracket-stack) true]\n          [(equal? (first\
    \ bracket-stack) ')') (set! bracket-count (sub1 bracket-count))\n            (cond\n\
    \              [(equal? bracket-count 0) true]\n              [(equal? bracket-count\
    \ 1) false]\n              [else (correct_bracketing (rest bracket-stack))]))]\n\
    \          [else (correct_bracketing (rest bracket-stack))]))]\n      [else false]))))\n",
  "  (cond\n    [(empty? brackets) true]\n    [(equal? (first brackets) '(') (correct_bracketing\
    \ (sub1 brackets))]\n    [else false]))\n", "  (cond\n    [(empty? brackets) #t]\n\
    \    [(equal? (first brackets) '(') (correct_bracketing (substring brackets 1\
    \ )))]\n    [else (correct_bracketing (substring brackets 1 ))]))\n", "  (cond\n\
    \    [(empty? brackets) true]\n    [(equal? (first brackets) \"(\") (correct_bracketing\
    \ (substring brackets 1 )))]\n    [else false]))\n", "  (let ((bracket-count 0))\n\
    \    (cond\n      [(empty? brackets) #t]\n      [(equal? (first brackets) '(')\
    \ (set! bracket-count (+ 1 bracket-count))\n        (cond\n          [(equal?\
    \ (first brackets) ')') (set! bracket-count (- 1 bracket-count))\n          [(equal?\
    \ (first brackets) '(') (set! bracket-count (- 1 bracket-count))\n          [(equal?\
    \ (first brackets) ')') (set! bracket-count (+ 1 bracket-count))\n          [(equal?\
    \ (first brackets) '(') (set! bracket-count (+ 1 bracket-count))\n          [else\
    \ (error \"Invalid bracketing\")]\n          ]\n          [else (error \"Invalid\
    \ bracketing\")]\n          ]\n          [else (error \"Invalid bracketing\")]\n\
    \          ]\n          [else (error \"Invalid bracketing\")]\n          ]\n \
    \         [else (error \"Invalid bracketing\")]\n          ]\n          [else\
    \ (error \"Invalid bracketing\")]\n          ]\n          [else (error \"Invalid\
    \ bracketing\")]\n          ]\n          [else (error \"Invalid bracketing\")]\n\
    \          ]\n          [else (error \"Invalid bracketing\")]\n          ]\n \
    \         [else (error \"Invalid bracketing\")]\n          ]\n          [else\
    \ (error \"Invalid bracketing\")]\n          ]\n          [else (error \"Invalid\
    \ bracketing\")]\n          ]\n          [else (error \"Invalid bracketing\")]\n\
    \          ]\n          [else (error \"Invalid bracketing\")]\n          ]\n \
    \         [else (error \"Invalid bracketing\")]\n          ]\n          [else\
    \ (error \"Invalid bracketing\")]\n          ]\n          [else (error \"Invalid\
    \ bracketing\")]\n          ]\n          [else (error \"Invalid bracketing\")]\n\
    \          ]\n          [else (error \"Invalid bracketing\")]\n          ]\n \
    \         [else (error \"Invalid bracketing\")]\n          ]\n          [else\
    \ (error \"Invalid bracketing\")]\n          ]\n          [else (error \"Invalid\
    \ bracketing\")]\n          ]\n          [else (error \"Invalid bracketing\")]\n\
    \          ]\n          [else (error \"Invalid bracketing\")]\n          ]\n \
    \         [else (error \"Invalid bracketing\")]\n          ]\n          [else\
    \ (error \"Invalid bracketing\")]\n          ]\n          [else (error \"Invalid\
    \ bracketing\")]\n          ]\n", "  (let ((bracket-stack '())\n        (opening-brackets\
    \ '())\n        (closing-brackets '()))\n    (loop for i from 0 to (length brackets)\n\
    \          with [bracket = char-code (car brackets)]\n          with [opening\
    \ = char-code (car opening-brackets)]\n          with [closing = char-code (car\
    \ closing-brackets)]\n          when (and (= opening bracket) (= closing bracket))\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening closing)\n          collect (cons closing opening)\n\
    \          collect (cons opening bracket)\n          collect (cons closing bracket)\n\
    \          collect (cons opening ", "  (cond\n    [(empty? brackets) true]\n \
    \   [(equal? (car brackets) '(') (correct_bracketing (cdr brackets)))]\n    [else\
    \ false]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
