name: HumanEval_6_parse_nested_parens
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n;; For each of the group,\
  \ output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n(define (parse_nested_parens paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3))\n\
  \    (check-equal? (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4))\n   \
  \ (check-equal? (candidate \"(()(())((())))\") (list 4))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((paren_string paren_string)\n             (levels 0))\n\
    \    (cond\n      [(empty? paren_string) levels]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list level)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ 0]\n      [(equal? (first paren_string) '(') (add1 paren_count)]\n      [else\
    \ (loop (rest paren_string) (add1 paren_count))]))\n  (loop (reverse paren_string)\
    \ 0))\n", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string) level]\n      [(char= (char (first paren_string))\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (char (first paren_string))\
    \ ')') (loop (rest paren_string) (sub1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=\
    \ (char (first paren_string)) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (char (first paren_string)) ')') (loop (rest paren_string) (sub1\
    \ level))]\n      [else (loop (rest paren_string) (add1 level))]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(equal? (car paren_string) '(') (add1\
    \ paren_count)]\n      [(equal? (car paren_string) ')') (sub1 paren_count)]\n\
    \      [else (loop (cdr paren_string) (add1 paren_count))]))\n  paren_count)\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse (list levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      ", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse (list level))]\n      [(char=? (first paren_string) '( () ( ()\
    \ ))) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n\
    \      [(char=? (first paren_string) '( () ())) (incf level)]\n      [(char=?\
    \ (first paren_string) '( () ())) (incf level)]\n      [(char=? (first paren_string)\
    \ '( () ())) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf\
    \ level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n    \
    \  [(char=? (first paren_string) '( () ())) (incf level)]\n      [(char=? (first\
    \ paren_string) '( () ())) (incf level)]\n      [(char=? (first paren_string)\
    \ '( () ())) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf\
    \ level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n    \
    \  [(char=? (first paren_string) '( () ())) (incf level)]\n      [(char=? (first\
    \ paren_string) '( () ())) (incf level)]\n      [(char=? (first paren_string)\
    \ '( () ())) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf\
    \ level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n    \
    \  [(char=? (first paren_string) '( () ())) (incf level)]\n      [(char=? (first\
    \ paren_string) '( () ())) (incf level)]\n      [(char=? (first paren_string)\
    \ '( () ())) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf\
    \ level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n    \
    \  [(char=? (first paren_string) '( () ())", "  (let ((level (0))\n        (paren_stack\
    \ (make-array '(0) '(paren_stack))))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '())\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '(()))\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()))\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()))\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '(()())\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()))\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()()))\n       (reverse (build-list level empty))]\n      [(equal? (car\
    \ paren_string) '((()()()))\n       (reverse (build-list level empty))]\n    \
    \  [(equal? (car paren_string) '((()()()()))\n       (reverse (build-list level\
    \ empty))]\n      [(equal? (car paren_string) '((()()()()))\n       (reverse (build-list\
    \ level empty))]\n      [(equal? (car paren_string) '((()()()()()))\n       (reverse\
    \ (build-list level empty))]\n      [(equal? (car paren_string) '((()()()()()))\n\
    \       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()()()()))\n       (reverse (build-list level empty))]\n      [(equal?\
    \ (car paren_string) '((()()()()()()))\n       (reverse (build-list level empty))]\n\
    \      [(equal? (car paren_string) '((()()()()()()))\n       (reverse (build-list\
    \ level empty))]\n      [(equal? (car paren_string) '((()()()()()()()))\n    \
    \   (reverse (build-list level empty))]\n      [(equal? (car paren_string) '((()()()()()()()))\n\
    \       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()))\n       (reverse (build-list level empty))]\n      [(equal?\
    \ (car paren_string) '((()()()()()()()()))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (if (= paren_count 0)\n           (list 0)\n           (list 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [else\n       (loop (rest paren_string) (+ 1 paren_count))]))))\n", " \
    \ (let loop ((parens paren_string)\n             (levels 0))\n    (cond\n    \
    \  [(empty? parens) levels]\n      [(char=? (car parens) '(') (loop (cdr parens)\
    \ (add1 levels))]\n      [else (loop (cdr parens) (add1 levels))])))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| c |>\nThanks for the answer. I'm still trying\
    \ to wrap my head around this solution. I'm also trying to understand how it works.\
    \ I understand that `parse_nested_parens` takes in a string and returns the number\
    \ of levels of nesting, but I don't understand how `loop` works. How does it know\
    \ to increment `levels` by 1? How does it know to stop incrementing `levels` when\
    \ it reaches the end of the string?\n<|/ c |>\n<| c |>\n`loop` calls `loop` recursively,\
    \ passing in the remaining string and increasing the levels by 1 each time it\
    \ recurses. `loop` stops recursing when it reaches the end of the string.\n<|/\
    \ c |>\n<| c |>\nI see. So `loop` calls `loop` recursively, passing in the remaining\
    \ string and increasing the levels by 1 each time it recurses. `loop` stops recursing\
    \ when it reaches the end of the string. How does it know to increment `levels`\
    \ by 1? How does it know to stop incrementing `levels` when it reaches the end\
    \ of the string?\n<|/ c |>\n<| c |>\n`loop` calls `loop` recursively, passing\
    \ in the remaining string and increasing the levels by 1 each time it recurses.\
    \ `loop` stops recursing when it reaches the end of the string. How does it know\
    \ to increment `levels` by 1? How does it know to stop incrementing `levels` when\
    \ it reaches the end of the string?\n<|/ c |>\n<| c |>\n`loop` calls `loop` recursively,\
    \ passing in the remaining string and increasing the levels by 1 each time it\
    \ recurses. `loop` stops recursing when it reaches the end of the string. How\
    \ does it know to increment `levels` by 1? How does it know to stop incrementing\
    \ `levels` when it reaches the end of the string?\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (let ((level (0))\n        (chars '()))\n    (loop for c in\
    \ paren_string\n          until (char=? c #\\)\n          collect c\n        \
    \  (if (char=? c #\\)\n              (set! level (+ level 1))\n              (set!\
    \ chars (cons c chars))\n              (set! chars (cons #\\( chars))))\n    \
    \      (if (char=? c #\\)\n              (set! level (+ level 1))\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #", "  (let loop ((paren_string paren_string)\n       \
    \      (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ loop ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ parens) level]\n      [(char=? (first parens) '(') (loop (rest parens) (+ level\
    \ 1))]\n      [else (loop (rest parens) level)])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char= (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n", "  (let loop ((parens\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? parens) (list)]\
    \ \n      [(equal? (car parens) '(') (loop (cdr parens) (+ level 1)))]\n     \
    \ [(equal? (car parens) ')') (loop (cdr parens) level)]\n      [else (loop (cdr\
    \ parens) level)])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string)\n       (if (= level\
    \ 0)\n           (list 0)\n           (list level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) ')')\n       (loop (rest paren_string) (- level 1))]\n      [else\n\
    \       (loop (rest paren_string) (+ level 1))])))\n", "  (let ((levels 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (list levels)]\n      [(equal?\
    \ (first paren_string) '(')\n       (let ((level (+ 1 (length paren_string))))\n\
    \         (cons level \n              (parse_nested_parens (rest paren_string))))]\n\
    \      [(equal? (first paren_string) '(#')\n       (let ((level (+ 1 (length paren_string))))\n\
    \         (cons level \n              (parse_nested_parens (rest paren_string))))]\n\
    \      [else\n       (let ((level (+ 1 (length paren_string))))\n         (cons\
    \ level \n              (parse_nested_parens (rest paren_string))))]\n      )))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (if (= paren_count 0)\n           (list\
    \ 0)\n           (list 1))]\n      [(equal? (first paren_string) '(')\n      \
    \ (loop (rest paren_string) (+ 1 paren_count))]\n      [else\n       (loop (rest\
    \ paren_string) (+ 1 paren_count))]))))\n", "  (let ((level (0))\n        (groups\
    \ (string-split paren_string)))\n    (for group\n      (if (null? group)\n   \
    \       (cons group level))\n      (if (char-equal? (car group) '(')\n       \
    \   (let ((group (cdr group)))\n            (if (null? group)\n              \
    \  (cons group level))\n            (if (char-equal? (car group) '(')\n      \
    \          (let ((group (cdr group)))\n                  (if (null? group)\n \
    \                     (cons group level))\n                  (if (char-equal?\
    \ (car group) ')')\n                      (let ((group (cdr group)))\n       \
    \                 (if (null? group)\n                            (cons group level))\n\
    \                        (if (char-equal? (car group) ')')\n                 \
    \           (let ((group (cdr group)))\n                              (if (null?\
    \ group)\n                                  (cons group level))\n            \
    \                  (if (char-equal? (car group) ')')\n                       \
    \           (let ((group (cdr group)))\n                                    (if\
    \ (null? group)\n                                        (cons group level))\n\
    \                                    (if (char-equal? (car group) ')')\n     \
    \                                   (let ((group (cdr group)))\n             \
    \                             (if (null? group)\n                            \
    \                  (cons group level))\n                                     \
    \     (if (char-equal? (car group) ')')\n                                    \
    \          (let ((group (cdr group)))\n                                      \
    \          (if (null? group)\n                                               \
    \     (cons group level))\n                                                (if\
    \ (char-equal? (car group) ')')\n                                            \
    \        (let ((group (cdr group)))\n                                        \
    \              (if (null? group)\n                                           \
    \               (cons group level))\n                                        \
    \              (if (char-equal? (car group) ')')\n                           \
    \                               (let ((group (cdr group)))\n                 \
    \                                           (if (null? group)\n              \
    \                                                  (cons group level))\n     \
    \                                                       (if (char-equal? (car\
    \ group) ')')\n                                                              \
    \  (let ((group (cdr group)))\n                                              \
    \                    (if (null? group)\n                                     \
    \                                 (cons group level))\n                      \
    \                                            (if (char-equal? (car group) ')')\n\
    \                                                                      (let ((group\
    \ (cdr group)))\n                                                            \
    \            (if (null? group)\n                                             \
    \                               (cons group level))\n                        \
    \                                                (if (char-equal? (car group)\
    \ ')')\n                                                                     \
    \       (let ((group (cdr group)))\n                                         \
    \                                     (if (null? group)\n                    \
    \                                                              (cons group level))",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let ((levels 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(equal? (car paren_string) '(') (add1\
    \ levels)]\n      [(equal? (car paren_string) '(#\\Space) (add1 levels)]\n   \
    \   [else (add1 (parse_nested_parens (cdr paren_string)))]\n    )\n    levels))\n",
  "  (let loop ((parens paren_string)\n             (levels 0))\n    (cond\n     \
    \ [(empty? parens) (list levels)]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens)\
    \ (add1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1\
    \ levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 levels))]\n\
    \      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 levels))]\n \
    \     [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 levels))]\n  \
    \    [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 levels))]\n   \
    \   [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 levels))]\n    \
    \  [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 levels))]\n     \
    \ [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 levels))]\n      [(equal?\
    \ (first parens) '(#\\)) (loop (rest parens) (add1 levels))]\n      [(equal? (first\
    \ parens) '(#\\)) (loop (rest parens) (add1 levels))]\n      [(equal? (first parens)\
    \ '(#\\)) (loop (rest parens) (add1 levels))]\n      [(equal? (first parens) '(#\\\
    )) (loop (rest parens) (add1 levels))]\n      [(equal? (first parens) '(#\\))\
    \ (loop (rest parens) (add1 levels))]\n      [(equal? (first parens) '(#\\)) (loop\
    \ (rest parens) (add1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest\
    \ parens) (add1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens)\
    \ (add1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1\
    \ levels))]\n      [(equal? (first parens) '(#", "  (let ((levels 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(equal? (first paren_string) '(') (add1\
    \ levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 ", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ ((levels 0))\n    (cond\n      [(empty? paren_string) 0]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [else (add1 (parse_nested_parens (rest\
    \ paren_string)))])))\n", "  (let ((levels 0))\n    (cond\n      [(empty? paren_string)\
    \ 0]\n      [(equal? (first paren_string) '(') (add1 levels)]\n      [else (add1\
    \ (parse_nested_parens (rest paren_string)))]))\n  (cond\n    [(= levels 0) 0]\n\
    \    [else (+ 1 (levels))]))\n", "  (let loop ((paren_string paren_string)\n \
    \            (paren_count 0))\n    (cond\n      [(empty? paren_string)\n     \
    \  (if (= paren_count 0)\n           (list 0)\n           (list 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n          \
    \   (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n     \
    \        (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (list level)]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [else\n       (loop (rest paren_string) (add1 level))]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(equal? (first paren_string) '(') (add1\
    \ paren_count)]\n      [else (loop (rest paren_string) (add1 paren_count))]))\n\
    \  (loop (reverse paren_string) 0))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(equal? (first paren_string) '(') (add1\
    \ paren_count)]\n      [else (loop (rest paren_string) (add1 paren_count))]))\n\
    \  (loop (reverse paren_string) 0))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ level)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (+ level 1))]\n      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (+ level 1))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- level 1))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- level 1))]\n      [else\n       (loop (cdr paren_string) (+ level 1))]\n\
    \      )))\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (if (= level 0)\n     \
    \      (list 0)\n           (list level))]\n      [(equal? (car paren_string)\
    \ '(')\n       (loop (cdr paren_string) (+ level 1))]\n      [else\n       (loop\
    \ (cdr paren_string) (+ level 1))]\n      )))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char= (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n", "  (let loop ((parens\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? parens) level]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(", "  (let loop ((parens paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? parens) (list)] \n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n  \
    \    [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n    \
    \  [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(#\\)) (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(#\\)) (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(#\\\
    )) (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(#\\)) (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n  \
    \    [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n    \
    \  [(equal? (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(#\\)) (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) ", "  (let loop ((parens paren_string)\n             (level 0))\n  \
    \  (cond\n      [(empty? parens) level]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest\
    \ parens) (add1 level))]\n      [else (loop (rest parens) level)])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string) level]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let ((result '()))\n   \
    \ (loop for (i 0) in string->list paren_string\n          for group = (substring\
    \ paren_string i i)\n          for level = (string-length group)\n          for\
    \ j = (string-length paren_string)\n          until (= i j)\n          collect\
    \ (cons group result))\n    result))\n", "  (let ((levels 0))\n    (cond\n   \
    \   [(empty? paren_string) 0]\n      [(equal? (first paren_string) '(') (add1\
    \ levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 ", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string)\n       (if (= level\
    \ 0)\n           (list 0)]\n      [(char=? (car paren_string) '(')\n       (loop\
    \ (cdr paren_string) (+ level 1))]\n      [else\n       (loop (cdr paren_string)\
    \ (+ level 1))]\n      )))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ (list levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      ", "  (let loop ((parens paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? parens) (list levels)]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (+ 1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest\
    \ parens) (+ 1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens)\
    \ (+ 1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (+\
    \ 1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1\
    \ levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 levels))]\n\
    \      [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 levels))]\n  \
    \    [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 levels))]\n    \
    \  [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 levels))]\n      [(equal?\
    \ (first parens) '(#\\)) (loop (rest parens) (+ 1 levels))]\n      [(equal? (first\
    \ parens) '(#\\)) (loop (rest parens) (+ 1 levels))]\n      [(equal? (first parens)\
    \ '(#\\)) (loop (rest parens) (+ 1 levels))]\n      [(equal? (first parens) '(#\\\
    )) (loop (rest parens) (+ 1 levels))]\n      [(equal? (first parens) '(#\\)) (loop\
    \ (rest parens) (+ 1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest\
    \ parens) (+ 1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens)\
    \ (+ 1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (+\
    \ 1 levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1\
    \ levels))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 levels))]\n\
    \      [(equal? (first parens) '(#", "  (let loop ((parens paren_string)\n   \
    \          (level 0))\n    (cond\n      [(empty? parens) (list level)]\n     \
    \ [(equal? (car parens) '(') (loop (cdr parens) (+ level 1)))]\n      [(equal?\
    \ (car parens) ')') (loop (cdr parens) level)]\n      [else (loop (cdr parens)\
    \ level)])))\n", "  (let ((levels 0))\n    (cond\n      [(empty? paren_string)\
    \ 0]\n      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (add1 levels)]\n      [else (add1 (parse_nested_parens (rest paren_string)))]\n\
    \    )\n    (cond\n      [(equal? levels 0) 0]\n      [(equal? levels 1) 1]\n\
    \      [(equal? levels 2) 2]\n      [(equal? levels 3) 3]\n      [(equal? levels\
    \ 4) 4]\n      [(equal? levels 5) 5]\n      [(equal? levels 6) 6]\n      [(equal?\
    \ levels 7) 7]\n      [(equal? levels 8) 8]\n      [(equal? levels 9) 9]\n   \
    \   [(equal? levels 10) 10]\n      [(equal? levels 11) 11]\n      [(equal? levels\
    \ 12) 12]\n      [(equal? levels 13) 13]\n      [(equal? levels 14) 14]\n    \
    \  [(equal? levels 15) 15]\n      [(equal? levels 16) 16]\n      [(equal? levels\
    \ 17) 17]\n      [(equal? levels 18) 18]\n      [(equal? levels 19) 19]\n    \
    \  [(equal? levels 20) 20]\n      [(equal? levels 21) 21]\n      [(equal? levels\
    \ 22) 22]\n      [(equal? levels 23) 23]\n      [(equal? levels 24) 24]\n    \
    \  [(equal? levels 25) 25]\n      [(equal? levels 26) 26]\n      [(equal? levels\
    \ 27) 27]\n      [(equal? levels 28) 28]\n      [(equal? levels 29) 29]\n    \
    \  [(equal? levels 30) 30]\n      [(equal? levels 31) 31]\n      [(equal? levels\
    \ 32) 32]\n      [(equal? levels 33) 33]\n      [(equal? levels 34) 34]\n    \
    \  [(equal? levels 35) 35]\n      [(equal? levels 36) 36]\n      [(equal? levels\
    \ 37) 37]\n      [(equal? levels 38) 38]\n      [(equal? levels 39) 39]", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (list levels)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) ')')\n       (loop (rest paren_string)\n             (-\
    \ 1 levels))]\n      [else\n       (loop (rest paren_string)\n             (+\
    \ 1 levels))])))\n", "  (let ((level (0))\n        (groups (string-split paren_string)))\n\
    \    (let loop ((i 0))\n      (if (null? groups)\n          level\n          (let\
    \ ((group (car groups))\n                (next_group (cdr groups)))\n        \
    \    (if (null? next_group)\n                (loop (+ i 1))\n                (loop\
    \ (+ i 1)\n                       (cons group next_group)))))))))\n", "  (let\
    \ ((levels 0))\n    (cond\n      [(empty? paren_string) 0]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 ", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) 0]\n      [(equal? (car paren_string) '(') (add1 paren_count)]\n\
    \      [else (loop (cdr paren_string) (add1 paren_count))]))\n  (if (= paren_count\
    \ 0)\n      0\n      (+ 1 (loop (cdr paren_string) 0))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (if (= levels 0)\n           (list 0)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [else\n       (loop\
    \ (rest paren_string) (+ 1 levels))]\n      )))\n", "  (let ((level (0))\n   \
    \     (nest (make-array '(0) '(list)))\n        (levels (make-array '(0) '(list)))\n\
    \        (level-char '())\n        (level-chars '()))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse nest)\n       ]\n      [(char=? (car paren_string)\
    \ '(')\n       (push (car paren_string) levels)\n       (push (car paren_string)\
    \ nest)\n       (incf level)\n       ]\n      [(char=? (car paren_string) '(')\n\
    \       (push (car paren_string) levels)\n       (push (car paren_string) nest)\n\
    \       (incf level)\n       ]\n      [(char=? (car paren_string) ')')\n     \
    \  (decf level)\n       (cond\n         [(> level 0)\n          (push (car paren_string)\
    \ levels)\n          (push (car paren_string) nest)\n          (decf level)\n\
    \          ]\n         [else\n          (push (car paren_string) levels)\n   \
    \       (push (car paren_string) nest)\n          (decf level)\n          ]\n\
    \         ]\n      [(char=? (car paren_string) ')')\n       (decf level)\n   \
    \    (cond\n         [(> level 0)\n          (push (car paren_string) levels)\n\
    \          (push (car paren_string) nest)\n          (decf level)\n          ]\n\
    \         [else\n          (push (car paren_string) levels)\n          (push (car\
    \ paren_string) nest)\n          (decf level)\n          ]\n         ]\n     \
    \ [(char=? (car paren_string) '(')\n       (push (car paren_string) levels)\n\
    \       (push (car paren_string) nest)\n       (incf level)\n       ]\n      [(char=?\
    \ (car paren_string) '(')\n       (push (car paren_string) levels)\n       (push\
    \ (car paren_string) nest)\n       (incf level)\n       ]\n      [(char=? (car\
    \ paren_string) ')')\n       (decf level)\n       (cond\n         [(> level 0)\n\
    \          (push (car paren_string) levels)\n          (push (car paren_string)\
    \ nest)\n          (decf level)\n          ]\n         [else\n          (push\
    \ (car ", "  (let ((levels 0))\n    (cond\n      [(empty? paren_string) 0]\n \
    \     [(equal? (first paren_string) '(') (add1 levels)]\n      [else (add1 (parse_nested_parens\
    \ (rest paren_string)))]\n    )\n    (cond\n      [(equal? (first paren_string)\
    \ ')') (sub1 levels)]\n      [else (sub1 (parse_nested_parens (rest paren_string)))]\n\
    \    )\n    (cond\n      [(equal? (first paren_string) '(') (add1 levels)]\n \
    \     [else (add1 (parse_nested_parens (rest paren_string)))]\n    )\n    (cond\n\
    \      [(equal? (first paren_string) ')') (sub1 levels)]\n      [else (sub1 (parse_nested_parens\
    \ (rest paren_string)))]\n    )\n    (cond\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [else (add1 (parse_nested_parens (rest paren_string)))]\n\
    \    )\n    (cond\n      [(equal? (first paren_string) ')') (sub1 levels)]\n \
    \     [else (sub1 (parse_nested_parens (rest paren_string)))]\n    )\n    (cond\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [else (add1 (parse_nested_parens\
    \ (rest paren_string)))]\n    )\n    (cond\n      [(equal? (first paren_string)\
    \ ')') (sub1 levels)]\n      [else (sub1 (parse_nested_parens (rest paren_string)))]\n\
    \    )\n    (cond\n      [(equal? (first paren_string) '(') (add1 levels)]\n \
    \     [else (add1 (parse_nested_parens (rest paren_string)))]\n    )\n    (cond\n\
    \      [(equal? (first paren_string) ')') (sub1 levels)]\n      [else (sub1 (parse_nested_parens\
    \ (rest paren_string)))]\n    )\n    (cond\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [else (add1 (parse_nested_parens (rest paren_string)))]\n\
    \    )\n    (cond\n      [(equal? (first paren_string) ')') (sub1 levels)]\n \
    \     [else (sub1 (parse_nested_parens (rest paren_string)))]\n    )\n    (cond\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [else (add1 (parse_nested_parens\
    \ (rest paren_string)))]\n    )\n    (cond\n      [(equal? (first paren_string)\
    \ ')') (sub1 levels)]\n      [else (sub1 (parse_nested_parens (", "  (let ((result\
    \ '()))\n    (loop for i from 0 to (length paren_string)\n          for char from\
    \ 0 to (length paren_string)\n          when (char=? paren_string[i] paren_string[char])\n\
    \          collect (cons i result))\n    (reverse result)))\n", "  (let ((levels\
    \ 0))\n    (cond\n      [(empty? paren_string) 0]\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 ", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse levels)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n", "  (let loop ((parens paren_string)\n       \
    \      (level 0))\n    (cond\n      [(empty? parens) level]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      ", "  (let ((result\
    \ '()))\n    (loop for i from 0 to (length paren_string)\n          for char from\
    \ 0 to (length paren_string)\n          when (char= (char paren_string i) char)\n\
    \          collect (cons (- i 1) result))\n    result))\n", "  (let ((levels 0))\n\
    \    (cond\n      [(empty? paren_string) 0]\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Tab) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Tab) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Tab) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Newline)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Tab) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Newline) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Tab) (add1\
    \ levels)]\n      [(equal? (first paren_string) '(#\\Newline) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Tab) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Tab) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Tab) (add1 levels)]\n      [(equal? (first paren_string) '(#\\New", " \
    \ (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (if (= paren_count 0)\n           (list\
    \ 0)\n           (list 1))]\n      [(char=? (car paren_string) '(')\n       (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [(char=? (car paren_string) ')')\n\
    \       (loop (cdr paren_string) (- 1 paren_count))]\n      [else\n       (loop\
    \ (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) 0]\n \
    \     [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (if (= paren_count 0)\n\
    \           (list 0)]\n      [(char=? (car paren_string) '(')\n       (loop (cdr\
    \ paren_string) (+ 1 paren_count))]\n      [else\n       (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n     \
    \ [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n \
    \     [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ level)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (+ level 1))]\n      [else\n       (loop (cdr paren_string) (+ level 1))])))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [else (loop (rest paren_string)\
    \ (+ level 1))])))\n", "  (let loop ((paren_string paren_string)\n           \
    \  (paren_count 0))\n    (cond\n      [(empty? paren_string) 0]\n      [(equal?\
    \ (first paren_string) '(') (add1 paren_count)]\n      [(equal? (first paren_string)\
    \ ')') (sub1 paren_count)]\n      [else (loop (rest paren_string) (add1 paren_count))]))\n\
    \  paren_count)\n", "  (let ((levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(equal? (first paren_string) '(') (add1 levels)]\n      [else\
    \ (add1 (parse_nested_parens (rest paren_string)))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (if (= paren_count 0)\n           (list 0)\n           (list paren_count))]\n\
    \      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string) (+ 1\
    \ paren_count))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- 1 paren_count))]\n      [else\n       (loop (cdr paren_string) (+ 1 paren_count))]))))\n",
  "  (let ((levels 0))\n    (cond\n      [(empty? paren_string) 0]\n      [(equal?\
    \ (first paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [else\n       (loop (rest paren_string) (+ level 1))]\n  \
    \    )))\n", "  (let loop ((paren_string paren_string)\n             (levels 0))\n\
    \    (cond\n      [(empty? paren_string) levels]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(", "  (let loop ((parens\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? parens) level]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (+ level 1))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) level)]\n      [else (loop (rest parens)\
    \ level)])))\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [else\n       (loop (rest paren_string) (add1 level))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (if (= paren_count 0)\n           (list 0)\n\
    \           (list 1))]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))]\n      )))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (if (= paren_count 0)\n           (list\
    \ 0)\n           (list 1))]\n      [(char= (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n \
    \     [(char= (first paren_string) '(')\n       (loop (rest paren_string) (+ 1\
    \ paren_count))]\n      [(char= (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n \
    \     [(char= (first paren_string) '(')\n       (loop (rest paren_string) (+ 1\
    \ paren_count))]\n      [(char= (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n \
    \     [(char= (first paren_string) '(')\n       (loop (rest paren_string) (+ 1\
    \ paren_count))]\n      [(char= (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count", "  (let\
    \ ((result '()))\n    (loop\n       [(i 0) (level 0)]\n       [else\n        (cond\n\
    \          [(string=? (char-ref paren_string i) '(') (set! level (+ level 1))]\n\
    \          [(string=? (char-ref paren_string i) ')') (set! level (- level 1))]\n\
    \          [else (set! i (+ i 1))]\n          [(> level 0) (set! result (cons\
    \ (substring paren_string 0 i) result))]\n          [else (set! result (cons (substring\
    \ paren_string 0 i) result))]\n          [else (set! result (cons (substring paren_string\
    \ 0 i) result))]\n          [else (set! result (cons (substring paren_string 0\
    \ i) result))]\n          [else (set! result (cons (substring paren_string 0 i)\
    \ result))]\n          [else (set! result (cons (substring paren_string 0 i) result))]\n\
    \          [else (set! result (cons (substring paren_string 0 i) result))]\n \
    \         [else (set! result (cons (substring paren_string 0 i) result))]\n  \
    \        [else (set! result (cons (substring paren_string 0 i) result))]\n   \
    \       [else (set! result (cons (substring paren_string 0 i) result))]\n    \
    \      [else (set! result (cons (substring paren_string 0 i) result))]\n     \
    \     [else (set! result (cons (substring paren_string 0 i) result))]\n      \
    \    [else (set! result (cons (substring paren_string 0 i) result))]\n       \
    \   [else (set! result (cons (substring paren_string 0 i) result))]\n        \
    \  [else (set! result (cons (substring paren_string 0 i) result))]\n         \
    \ [else (set! result (cons (substring paren_string 0 i) result))]\n          [else\
    \ (set! result (cons (substring paren_string 0 i) result))]\n          [else (set!\
    \ result (cons (substring paren_string 0 i) result))]\n          [else (set! result\
    \ (cons (substring paren_string 0 i) result))]\n          [else (set! result (cons\
    \ (substring paren_string 0 i) result))]\n          [else (set! result (cons (substring\
    \ paren_string 0 i) result))]\n          [else (", "  (let ((result '()))\n  \
    \  (cond\n      [(empty? paren_string) result]\n      [(equal? (first paren_string)\
    \ '(') (parse_nested_parens (rest paren_string)))\n       (cons (first paren_string)\
    \ (parse_nested_parens (rest paren_string)))]\n      [(equal? (first paren_string)\
    \ '(') (cons (first paren_string) (parse_nested_parens (rest paren_string))))\n\
    \       (cons (first paren_string) (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string))))]\n      [(equal? (first paren_string) '(') (cons (first\
    \ paren_string) (cons (first paren_string) (parse_nested_parens (rest paren_string))))\n\
    \       (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (parse_nested_parens (rest paren_string)))))]\n      [(equal? (first paren_string)\
    \ '(') (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (parse_nested_parens (rest paren_string)))))\n       (cons (first paren_string)\
    \ (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (parse_nested_parens (rest paren_string)))))]\n      [(equal? (first paren_string)\
    \ '(') (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (cons (first paren_string) (parse_nested_parens (rest paren_string)))))\n  \
    \     (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (cons (first paren_string) (cons (first paren_string) (parse_nested_parens (rest\
    \ paren_string)))))])]\n      [(equal? (first paren_string) '(') (cons (first\
    \ paren_string) (cons (first paren_string) (cons (first paren_string) (cons (first\
    \ paren_string) (cons (first paren_string) (parse_nested_parens (rest paren_string)))))\n\
    \       (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (parse_nested_parens (rest paren_string)))))]))]\n      [(equal? (first paren_string)\
    \ '(') (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (parse_nested_parens (rest paren_string)))))\n       (cons (first paren_string)\
    \ (cons (first paren_string) (cons (first paren_string) (cons (first paren_string",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (if (= paren_count 0)\n           (list 0)\n           (list paren_count))]\n\
    \      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string) (+ paren_count\
    \ 1))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- paren_count 1))]\n      [else\n       (loop (cdr paren_string) (+ paren_count\
    \ 1))])))\n", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string) level]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse (list levels))]\n      [(equal? (first paren_string) '(')\n \
    \      (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      ", "  (let ((levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(equal? (first paren_string) '(') (add1 levels)]\n      [else\
    \ (parse_nested_parens (rest paren_string))]))\n  )\n", "  (let loop ((parens\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? parens) (list)]\
    \ \n      [(equal? (car parens) '(') (loop (cdr parens) (+ level 1)))]\n     \
    \ [(equal? (car parens) ')') (loop (cdr parens) level)]\n      [else (loop (cdr\
    \ parens) level)])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char=?\
    \ (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n      [else\
    \ (loop (cdr paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [else\n       (loop (rest paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ ((level (0))\n        (nest (make-array '(0 '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()\
    \ '() '() '() '() '() '() '() '() '() '() '() '() '", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list level)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (+ level 1))]\n      [else\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      )))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (+ 1 levels))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- 1 levels))]\n      [else\n       (loop (cdr paren_string) (+ 1 levels))])))\n",
  "  (let ((level (0))\n        (nest (0))\n        (char (first paren_string)))\n\
    \    (cond\n      [(empty? paren_string)\n       (cons level nest)]\n      [(char=\
    \ char ')']\n      (cond\n        [(empty? (rest paren_string))\n         (cons\
    \ level nest)]\n        [(empty? (rest nest))\n         (cons level nest)]\n \
    \       [else\n         (cond\n           [(char= char ')']\n           (cond\n\
    \             [(empty? (rest paren_string))\n              (cons level nest)]\n\
    \             [else\n              (cons (- level 1) nest)]))]\n        [else\n\
    \         (cond\n           [(char= char ')']\n           (cond\n            \
    \ [(empty? (rest paren_string))\n              (cons level nest)]\n          \
    \   [else\n              (cons (- level 1) nest)]))]\n        [else\n        \
    \ (cond\n           [(char= char ')']\n           (cond\n             [(empty?\
    \ (rest paren_string))\n              (cons level nest)]\n             [else\n\
    \              (cons (- level 1) nest)]))]\n        [else\n         (cond\n  \
    \         [(char= char ')']\n           (cond\n             [(empty? (rest paren_string))\n\
    \              (cons level nest)]\n             [else\n              (cons (-\
    \ level 1) nest)]))]\n        [else\n         (cond\n           [(char= char ')']\n\
    \           (cond\n             [(empty? (rest paren_string))\n              (cons\
    \ level nest)]\n             [else\n              (cons (- level 1) nest)]))]\n\
    \        [else\n         (cond\n           [(char= char ')']\n           (cond\n\
    \             [(empty? (rest paren_string))\n              (cons level nest)]\n\
    \             [else\n              (cons (- level 1) nest)]))]\n        [else\n\
    \         (cond\n           [(char= char ')']\n           (cond\n            \
    \ [(empty? (rest paren_string))\n              (cons level nest)]\n          \
    \   [else\n              (cons (- level 1) nest)]))]\n        [else\n        \
    \ (cond\n           [(char= char ')']\n           (cond\n             [(empty?\
    \ (rest paren_string))\n              (cons level nest)]\n             [else\n\
    \              (cons (- level 1) nest)]))]\n        [else\n         (cond\n  \
    \         [(char= char ')']\n           (cond\n             [(empty? (rest paren_string))\n\
    \              (cons level nest", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n",
  "  (let ((result '()))\n    (loop for i from 0 to (length paren_string)\n      \
    \    for char from 0 to (length paren_string)\n          when (char (string->char\
    \ (substring paren_string i char)))\n          collect (cond ((char=? (char (string->char\
    \ (substring paren_string i char)) '('))\n                           (cons (cons\
    \ (cons i result) '())\n                                (parse_nested_parens (substring\
    \ paren_string (i+2) char)))\n                           (char=? (char (string->char\
    \ (substring paren_string i char)) '('))\n                           (cons (cons\
    \ (cons i result) '())\n                                (parse_nested_parens (substring\
    \ paren_string (i+2) char))))\n                    ((char=? (char (string->char\
    \ (substring paren_string i char)) '('))\n                     (cons (cons (cons\
    \ i result) '())\n                          (parse_nested_parens (substring paren_string\
    \ (i+2) char))))\n                    (else\n                     (cons (cons\
    \ (cons i result) '())\n                          (parse_nested_parens (substring\
    \ paren_string (i+2) char)))))))\n</code>\n<|/ a tags=racket,scheme |>\n<| a dscore=0\
    \ |>\n<code>", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (cons level 0)]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [else\n       (loop (rest paren_string) (add1 level))]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) levels]\n      [(char= (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(char= (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(", "  (let ((levels\
    \ 0))\n    (let loop ((paren_string paren_string)\n               (levels levels))\n\
    \      (cond\n        ((null? paren_string)\n         (if (= levels 0)\n     \
    \        (list 0)\n             (list levels)))\n        ((char= (first paren_string)\
    \ '( () ( () )))\n         (loop (rest paren_string) (+ 1 levels)))\n        ((char=\
    \ (first paren_string) '( () ( () )))\n         (loop (rest paren_string) (+ 1\
    \ levels)))\n        ((char= (first paren_string) '( () ( () )))\n         (loop\
    \ (rest paren_string) (+ 1 levels)))\n        ((char= (first paren_string) '(\
    \ () ( () )))\n         (loop (rest paren_string) (+ 1 levels)))\n        ((char=\
    \ (first paren_string) '( () ( () )))\n         (loop (rest paren_string) (+ 1\
    \ levels)))\n        ((char= (first paren_string) '( () ( () )))\n         (loop\
    \ (rest paren_string) (+ 1 levels)))\n        ((char= (first paren_string) '(\
    \ () ( () )))\n         (loop (rest paren_string) (+ 1 levels)))\n        ((char=\
    \ (first paren_string) '( () ( () )))\n         (loop (rest paren_string) (+ 1\
    \ levels)))\n        ((char= (first paren_string) '( () ( () )))\n         (loop\
    \ (rest paren_string) (+ 1 levels)))\n        ((char= (first paren_string) '(\
    \ () ( () )))\n         (loop (rest paren_string) (+ 1 levels)))\n        ((char=\
    \ (first paren_string) '( () ( () )))\n         (loop (rest paren_string) (+ 1\
    \ levels)))\n        ((char= (first paren_string) '( () ( () )))\n         (loop\
    \ (rest paren_string) (+ 1 levels)))\n        ((char= (first paren_string) '(\
    \ () ( () )))\n         (loop (rest paren_string) (+ 1 levels)))\n        ((char=\
    \ (first paren_string) '( () ( () )))\n         (loop (rest paren_string) (+ 1\
    \ levels)))\n        ((char= (first paren_string) '( () ( () )))\n         (loop\
    \ (rest paren_string) (+ 1 levels)))\n        ((char= (first paren_string) '(\
    \ () ( () )))\n         (loop (rest paren_string) (", "  (let ((level (0))\n \
    \       (nest (0))\n        (parens (string->list paren_string)))\n    (cond\n\
    \      [(empty? parens) (list level)]\n      [(equal? (car parens) '(') (set!\
    \ level (+ level 1))\n        (cond\n          [(empty? (cdr parens)) (list level)]\n\
    \          [(equal? (car parens) '(') (set! level (+ level 1))\n            (cond\n\
    \              [(empty? (cdr parens)) (list level)]\n              [(equal? (car\
    \ parens) '(') (set! level (+ level 1))\n                (cond\n             \
    \     [(empty? (cdr parens)) (list level)]\n                  [(equal? (car parens)\
    \ '(') (set! level (+ level 1))\n                    (cond\n                 \
    \     [(empty? (cdr parens)) (list level)]\n                      [(equal? (car\
    \ parens) '(') (set! level (+ level 1))\n                        (cond\n     \
    \                     [(empty? (cdr parens)) (list level)]\n                 \
    \         [(equal? (car parens) '(') (set! level (+ level 1))\n              \
    \              (cond\n                              [(empty? (cdr parens)) (list\
    \ level)]\n                              [(equal? (car parens) '(') (set! level\
    \ (+ level 1))\n                                (cond\n                      \
    \            [(empty? (cdr parens)) (list level)]\n                          \
    \        [(equal? (car parens) '(') (set! level (+ level 1))\n               \
    \                     (cond\n                                      [(empty? (cdr\
    \ parens)) (list level)]\n                                      [(equal? (car\
    \ parens) '(') (set! level (+ level 1))\n                                    \
    \    (cond\n                                          [(empty? (cdr parens)) (list\
    \ level)]\n                                          [(equal? (car parens) '(')\
    \ (set! level (+ level 1))\n                                            (cond\n\
    \                                              [(empty? (cdr parens)) (list level)]\n\
    \                                              [(equal? (car parens) '(') (set!\
    \ level (+ level 1))\n                                                (cond\n\
    \                                                  [(empty? (cdr parens)) (list\
    \ level)]\n                                                  [(equal? (car parens)\
    \ '(') (set! level (+ level 1))\n                                            \
    \        (cond\n                                                      [(empty?\
    \ (cdr parens)) (list level)]\n                                              \
    \        [(equal? (car parens) '(') (set! level (+ level 1))\n               \
    \                                         (cond\n                            \
    \                              [(empty? (cdr parens)) (list level)]\n        \
    \                                                  [(equal? (car parens) '(')\
    \ (set! ", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string) level]\n      [(char=? (car paren_string)\
    \ '(') (loop (cdr paren_string) (+ level 1))]\n      [(char=? (car paren_string)\
    \ ')') (loop (cdr paren_string) (- level 1))]\n      [else (loop (cdr paren_string)\
    \ (+ level 1))])))\n", "  (let loop ((paren_string paren_string)\n           \
    \  (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list levels)]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [else\n       (loop (rest paren_string) (add1 levels))]\n \
    \     )))\n", "  (let loop ((parens paren_string)\n             (level 0))\n \
    \   (cond\n      [(empty? parens) level]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) level)]\n      [else (loop (rest parens) level)])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (if (= paren_count 0)\n           (list 0)\n\
    \           (list 1))]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first\
    \ paren_string) ')')\n       (loop (rest paren_string) (- 1 paren_count))]\n \
    \     [(equal? (first paren_string) ')')\n       (loop (rest paren_string) (-\
    \ 1 paren_count))]\n      [else\n       (loop (rest paren_string) (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [else\n       (loop (rest paren_string) (add1 level))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char= (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n", "  (let loop ((parens paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? parens) level]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop", "  (let ((result '()))\n\
    \    (cond\n      [(empty? paren_string) result]\n      [(equal? (first paren_string)\
    \ '(') (parse_nested_parens (rest paren_string))\n       (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(') (parse_nested_parens (rest\
    \ paren_string))\n       (parse_nested_parens (rest paren_string))\n       (cons\
    \ (first paren_string) result))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string))\n   \
    \    (parse_nested_parens (rest paren_string))\n       (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(') (parse_nested_parens (rest\
    \ paren_string))\n       (parse_nested_parens (rest paren_string))\n       (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string))\n   \
    \    (cons (first paren_string) result))]\n      [(equal? (first paren_string)\
    \ '(') (parse_nested_parens (rest paren_string))\n       (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string))\n   \
    \    (parse_nested_parens (rest paren_string))\n       (parse_nested_parens (rest\
    \ paren_string))\n       (parse_nested_parens (rest paren_string))\n       (cons\
    \ (first paren_string) result))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string))\n   \
    \    (parse_nested_parens (rest paren_string))\n       (parse_nested_parens (rest\
    \ paren_string))\n       (parse_nested_parens (rest paren_string))\n       (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string))\n   \
    \    (cons (first paren_string) result))]\n      [(equal? (first paren_string)\
    \ '(') (parse_nested_parens (rest paren_string))\n       (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string))\n   \
    \    (parse_nested_parens (rest paren_string))\n       (parse_nested_parens (rest\
    \ paren_string))\n       (parse_nested_parens (rest paren_string))\n       (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(') (parse_nested_parens (rest paren_string))\n      \
    \ (parse_nested_parens (rest paren_string))\n       (parse_nested_parens (rest\
    \ paren_string))\n       (parse_nested_parens (rest paren_string))\n       (parse_",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (if (zero? paren_count)\n           (list\
    \ 0)\n           (list 1))]\n      [(equal? (first paren_string) '(')\n      \
    \ (loop (rest paren_string)\n             (add1 paren_count))]\n      [else\n\
    \       (loop (rest paren_string)\n             (add1 paren_count))]))))\n", " \
    \ (let loop ((parens paren_string)\n             (level 0))\n    (cond\n     \
    \ [(empty? parens) level]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      ", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (if (= paren_count 0)\n           (list 0)\n           (list 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string)\n             (- paren_count 1))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n    )\n  )\n)\n", "  (let ((levels\
    \ 0))\n    (cond\n      [(empty? paren_string) 0]\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 ", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ (list level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string) level]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let ((result '()))\n   \
    \ (cond\n      [(empty? paren_string) result]\n      [(equal? (first paren_string)\
    \ '(') (parse_nested_parens (rest paren_string))\n       (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(') (parse_nested_parens (rest\
    \ paren_string))\n       (cons (first paren_string) (parse_nested_parens (rest\
    \ paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string", "  (let loop ((paren_string paren_string)\n           \
    \  (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal?\
    \ (car paren_string) '(') (loop (cdr paren_string) (+ level 1)))]\n      [(equal?\
    \ (car paren_string) ')') (loop (cdr paren_string) (- level 1))]\n      [else\
    \ (loop (cdr paren_string) (+ level 1))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (if (= paren_count 0)\n           (list 0)\n           (list 1))]\n      [(equal?\
    \ (car paren_string) '(')\n       (loop (cdr paren_string)\n             (+ paren_count\
    \ 1))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\n\
    \             (- paren_count 1))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (+ paren_count 1))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ (list level))]\n      [(char=? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (+ level 1))]\n      [(char=? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (+ level 1))]\n      [else\n       (loop (cdr paren_string) (+ level 1))]\n\
    \      )))\n", "  (let ((levels 0))\n    (cond\n      [(empty? paren_string) 0]\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 ", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (list level)]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n", "  (let ((levels 0))\n\
    \    (cond\n      [(empty? paren_string) 0]\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 ", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ level)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [else\n       (loop (rest paren_string) (add1 level))]))))\n",
  "  (let loop ((parens paren_string)\n             (levels 0))\n    (cond\n     \
    \ [(empty? parens) levels]\n      [(char= (first parens) '(') (loop (rest parens)\
    \ (add1 levels))]\n      [(char= (first parens) '(') (loop (rest parens) (add1\
    \ levels))]\n      [(char= (first parens) '(') (loop (rest parens) (add1 levels))]\n\
    \      [(char= (first parens) '(') (loop (rest parens) (add1 levels))]\n     \
    \ [(char= (first parens) '(') (loop (rest parens) (add1 levels))]\n      [(char=\
    \ (first parens) '(') (loop (rest parens) (add1 levels))]\n      [(char= (first\
    \ parens) '(') (loop (rest parens) (add1 levels))]\n      [(char= (first parens)\
    \ '(') (loop (rest parens) (add1 levels))]\n      [(char= (first parens) '(')\
    \ (loop (rest parens) (add1 levels))]\n      [(char= (first parens) '(') (loop\
    \ (rest parens) (add1 levels))]\n      [(char= (first parens) '(') (loop (rest\
    \ parens) (add1 levels))]\n      [(char= (first parens) '(') (loop (rest parens)\
    \ (add1 levels))]\n      [(char= (first parens) '(') (loop (rest parens) (add1\
    \ levels))]\n      [(char= (first parens) '(') (loop (rest parens) (add1 levels))]\n\
    \      [(char= (first parens) '(') (loop (rest parens) (add1 levels))]\n     \
    \ [(char= (first parens) '(') (loop (rest parens) (add1 levels))]\n      [(char=\
    \ (first parens) '(') (loop (rest parens) (add1 levels))]\n      [(char= (first\
    \ parens) '(') (loop (rest parens) (add1 levels))]\n      [(char= (first parens)\
    \ '(') (loop (rest parens) (add1 levels))]\n      [(char= (first parens) '(')\
    \ (loop (rest parens) (add1 levels))]\n      [(char= (first parens) '(') (loop\
    \ (rest parens) (add1 levels))]\n      ", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (if\
    \ (= levels 0)\n           (list 0)]\n      [(char=? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (if (zero? paren_count)\n           (list 0)\n           (list 1))]\n\
    \      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string) (+ 1\
    \ paren_count))]\n      [else\n       (loop (cdr paren_string) (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list level)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [else\n\
    \       (loop (rest paren_string) (+ level 1))]\n      )))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list level)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (+ level 1))]\n      [else\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      )))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (if\
    \ (= paren_count 0)\n           (list 0)\n           (list 1))]\n      [(equal?\
    \ (car paren_string) '(')\n       (loop (cdr paren_string)\n             (+ paren_count\
    \ 1))]\n      [else\n       (loop (cdr paren_string)\n             (+ paren_count\
    \ 1))]\n      )))\n", "  (let loop ((paren_string paren_string)\n            \
    \ (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal? (first\
    \ paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string) level]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ level))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string) (sub1\
    \ level))]\n      [else (loop (cdr paren_string) (add1 level))]))))\n", "  (let\
    \ loop ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ parens) level]\n      [(equal? (first parens) '(') (loop (rest parens)\n   \
    \                                    (+ level 1)))]\n      [(equal? (first parens)\
    \ '(#\\)) (loop (rest parens)\n                                      (+ level\
    \ 1))]\n      [else (loop (rest parens)\n                 (+ level 1))])))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list level)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [else\n       (loop\
    \ (rest paren_string) (+ level 1))]\n      )))\n", "  (let loop ((parens paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? parens) level]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(", "  (let loop\
    \ ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty? parens)\
    \ level]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string) level]\n      [(char= (char (first paren_string))\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (level 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n\
    \      [(char=? (car paren_string) '(')\n       (loop (cdr paren_string) (+ level\
    \ 1))]\n      [else\n       (loop (cdr paren_string) (+ level 1))])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string) level]\n      [(char= (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 level))]\n      [(char= (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (sub1 level))]\n      [else (loop (rest paren_string) (add1 level))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list level)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list level)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (", "  (let loop ((paren_string paren_string)\n             (level 0))\n   \
    \ (cond\n      [(empty? paren_string)\n       (if (= level 0)\n           (list\
    \ 0)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1)))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string) (- level 1)))]\n      [else\n       (loop (rest paren_string)\
    \ (+ level 1))])))\n", "  (let loop ((paren_string paren_string)\n           \
    \  (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char=\
    \ (char (first paren_string)) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (char (first paren_string)) ')') (loop (rest paren_string) (sub1\
    \ levels))]\n      [else (loop (rest paren_string) (add1 levels))])))\n", "  (let\
    \ ((result '()))\n    (cond\n      [(empty? paren_string) result]\n      [(equal?\
    \ (first paren_string) '(') (parse_nested_parens (rest paren_string))\n      \
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(')\
    \ (parse_nested_parens (rest paren_string))\n       (parse_nested_parens (rest\
    \ paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string)))]\n \
    \     [(equal? (first paren_string) '(') (parse_nested_parens (rest paren_string))\n\
    \       (parse_nested_parens (rest paren_string)))]\n      [(equal? (first paren_string)\
    \ '(') (parse_nested_parens (rest paren_string))\n       (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string)))]\n \
    \     [(equal? (first paren_string) '(') (parse_nested_parens (rest paren_string))\n\
    \       (parse_nested_parens (rest paren_string)))]\n      [(equal? (first paren_string)\
    \ '(') (parse_nested_parens (rest paren_string))\n       (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string)))]\n \
    \     [(equal? (first paren_string) '(') (parse_nested_parens (rest paren_string))\n\
    \       (parse_nested_parens (rest paren_string)))]\n      [(equal? (first paren_string)\
    \ '(') (parse_nested_parens (rest paren_string))\n       (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string)))]\n \
    \     [(equal? (first paren_string) '(') (parse_nested_parens (rest paren_string))\n\
    \       (parse_nested_parens (rest paren_string)))]\n      [(equal? (first paren_string)\
    \ '(') (parse_nested_parens (rest paren_string))\n       (parse_nested_parens\
    \ (rest paren_string)))]\n      [(equal? (first paren_string) '(') (parse_nested_parens\
    \ (rest paren_string))\n       (parse_nested_parens (rest paren_string)))]\n \
    \     [(equal? (first paren_string) '(') (parse_nested_parens (rest paren_string))\n\
    \       (parse_nested_parens (rest paren_string", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (sub1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n    \
    \   ]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [else\n       (loop (rest paren_string) (add1\
    \ level))\n       ]\n      )\n    )\n  )\n", "  (let ((levels 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(equal? (first paren_string) '(') (add1\
    \ levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 ", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n\
    \      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string) (+ level\
    \ 1))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- level 1))]\n      [else\n       (loop (cdr paren_string) (+ level 1))])))\n",
  "  (let loop ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ parens) level]\n      [(equal? (first parens) '(') (loop (rest parens)\n   \
    \                                    (+ level 1)))]\n      [(equal? (first parens)\
    \ '(#\\)) (loop (rest parens)\n                                       (+ level\
    \ 0))]\n      [else (loop (rest parens)\n                 (+ level 0))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(equal? (first paren_string) '(') (add1\
    \ paren_count)]\n      [else (loop (rest paren_string) (add1 paren_count))]))\n\
    \  paren_count)\n", "  (let ((levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (first paren_string) '(')\n       (let\
    \ ((level (+ 1 (length paren_string))))\n         (cons (cons level levels)\n\
    \               (parse_nested_parens (rest paren_string))))]\n      [else\n  \
    \     (let ((level (+ 1 (length paren_string))))\n         (cons (cons level levels)\n\
    \               (parse_nested_parens (rest paren_string))))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (if (= paren_count 0)\n           (list 0)\n\
    \           (list 1))]\n      [(char= (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first\
    \ paren_string) ')')\n       (loop (rest paren_string) (- 1 paren_count))]\n \
    \     [(char= (first paren_string) ')')\n       (loop (rest paren_string) (- 1\
    \ paren_count))]\n      [else\n       (loop (rest paren_string) (+ 1 paren_count))]))))\n",
  "  (let loop ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ parens) level]\n      [(equal? (car parens) '(') (loop (cdr parens) (+ level\
    \ 1)))]\n      [(equal? (car parens) ')') (loop (cdr parens) level)]\n      [else\
    \ (loop (cdr parens) level)])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [else (loop (cdr paren_string) (add1 levels))])))\n", "  (let ((levels\
    \ 0))\n    (cond\n      [(empty? paren_string) 0]\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Tab) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Tab) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Tab) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Newline)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Tab) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Newline) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Tab) (add1\
    \ levels)]\n      [(equal? (first paren_string) '(#\\Newline) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Tab) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Tab) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Tab) (add1 levels)]\n      [(equal? (first paren_string) '(#\\New", " \
    \ (let loop ((parens paren_string)\n             (level 0))\n    (cond\n     \
    \ [(empty? parens) level]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) level)]\n\
    \      [else (loop (rest parens) level)])))\n", "  (let loop ((parens paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? parens) level]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (+ level 1))]\n      [else (loop (rest\
    \ parens) level)])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ ((result '()))\n    (loop\n       for i from 0 to (length paren_string)\n  \
    \     for char from (+ i 1) to (length paren_string)\n       when (char (char-alphabet\
    \ char))\n       do (set! result (cons char (parse_nested_parens (substring paren_string\
    \ i char))))\n       finally (return result))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (if (= paren_count 0)\n           (list 0)\n           (list 1))]\n  \
    \    [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n  \
    \           (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (if\
    \ (= levels 0)\n           (list 0)]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ 1 levels))]\n      [else\n       (loop (rest\
    \ paren_string) (+ 1 levels))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (if (= paren_count 0)\n           (list 0)\n           (list 1))]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n \
    \     [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n \
    \     [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n \
    \     [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 paren_count", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse levels)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n", "  (let loop ((paren_string paren_string)\n \
    \            (paren_count 0))\n    (cond\n      [(empty? paren_string)\n     \
    \  (if (= paren_count 0)\n           (list 0)\n           (list 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(equal? (first paren_string) ')')\n       (loop (rest paren_string) (-\
    \ 1 paren_count))]\n      [else\n       (loop (rest paren_string) (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))\n  (if (= paren_count 0)\n      0\n   \
    \   (+ 1 (loop (rest paren_string) 0))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ level)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [else\n       (loop (rest paren_string) (add1 level))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (if (= level 0)\n           (list 0)]\n\
    \      [(char= (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [else\n       (loop (rest paren_string) (+ level 1))]\n  \
    \    )))\n", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (cons level 0)]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list level)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr\
    \ paren_string) (+ level 1))]\n      [else\n       (loop (cdr paren_string) (+\
    \ level 1))]))))\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) 0]\n      [(equal? (first paren_string)\
    \ '(') (add1 paren_count)]\n      [else (loop (rest paren_string) (add1 paren_count))]))\n\
    \  (if (= paren_count 0)\n      0\n      (+ 1 (loop (rest paren_string) 0))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char= (first paren_string) '(')\
    \ (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]", "  (let ((result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(equal? (first paren_string) '(') (parse_nested_parens (rest\
    \ paren_string)))]\n      [(equal? (first paren_string) '(#\\Space) (parse_nested_parens\
    \ (rest paren_string)))]\n      [else (cons (first paren_string) (parse_nested_parens\
    \ (rest paren_string)))])))\n", "  (let loop ((paren_string paren_string)\n  \
    \           (paren_count 0))\n    (cond\n      [(empty? paren_string)\n      \
    \ (if (= paren_count 0)\n           (list 0)\n           (list 1))]\n      [(equal?\
    \ (car paren_string) '(')\n       (loop (cdr paren_string)\n             (+ paren_count\
    \ 1))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\n\
    \             (- paren_count 1))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (+ paren_count 1))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(", "  (let loop ((parens paren_string)\n             (level 0))\n   \
    \ (cond\n      [(empty? parens) (list level)]\n      [(char= (first parens) '(')\
    \ (loop (rest parens) (+ level 1))]\n      [(char= (first parens) ')') (loop (rest\
    \ parens) level)]\n      [else (loop (rest parens) level)])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (if (= paren_count 0)\n           (list 0)\n\
    \           (list paren_count))]\n      [(equal? (first paren_string) '(')\n \
    \      (loop (rest paren_string)\n             (+ paren_count 1))]\n      [else\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      )))\n",
  "  (let loop ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ parens) level]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [else (loop (rest parens) level)])))\n", "  (let ((level (0))\n\
    \        (groups (string-split paren_string)))\n    (for-each (lambda (group)\n\
    \                (let ((level (+ level 1)))\n                  (cond ((null? group)\
    \ level)\n                        ((char=? (car group) '(') (+ level 1))\n   \
    \                     ((char=? (car group) ')') (- level 1))\n               \
    \         (else (+ level 0))))\n              groups)\n    level))\n", "  (let\
    \ ((levels 0))\n    (cond\n      [(empty? paren_string) 0]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(#\\)) (add1 levels)]\n      [(equal? (first paren_string) '(#\\\
    )) (add1 levels)]\n      [(", "  (let ((result '()))\n    (cond\n      [(empty?\
    \ paren_string) result]\n      [(equal? (car paren_string) '(') (parse_nested_parens\
    \ (cdr paren_string))\n       (cons (car paren_string) result))]\n      [(equal?\
    \ (car paren_string) '(') (parse_nested_parens (cdr paren_string))\n       (cons\
    \ (car paren_string) (parse_nested_parens (cdr paren_string)))]\n      [(equal?\
    \ (car paren_string) ')') (parse_nested_parens (cdr paren_string))\n       (cons\
    \ (car paren_string) (cons (car paren_string) result))]\n      [(equal? (car paren_string)\
    \ ')') (parse_nested_parens (cdr paren_string))\n       (cons (car paren_string)\
    \ (cons (car paren_string) (parse_nested_parens (cdr paren_string))))]\n     \
    \ [(equal? (car paren_string) '(') (parse_nested_parens (cdr paren_string))\n\
    \       (cons (car paren_string) (cons (car paren_string) (cons (car paren_string)\
    \ result)))]\n      [(equal? (car paren_string) '(') (parse_nested_parens (cdr\
    \ paren_string))\n       (cons (car paren_string) (cons (car paren_string) (cons\
    \ (car paren_string) (parse_nested_parens (cdr paren_string)))))]\n      [(equal?\
    \ (car paren_string) ')') (parse_nested_parens (cdr paren_string))\n       (cons\
    \ (car paren_string) (cons (car paren_string) (cons (car paren_string) (cons (car\
    \ paren_string) result))))]\n      [(equal? (car paren_string) ')') (parse_nested_parens\
    \ (cdr paren_string))\n       (cons (car paren_string) (cons (car paren_string)\
    \ (cons (car paren_string) (cons (car paren_string) (cons (car paren_string) result)))))]\n\
    \      [(equal? (car paren_string) '(') (parse_nested_parens (cdr paren_string))\n\
    \       (cons (car paren_string) (cons (car paren_string) (cons (car paren_string)\
    \ (cons (car paren_string) (cons (car paren_string) (parse_nested_parens (cdr\
    \ paren_string)))))\n       (cons (car paren_string) (cons (car paren_string)\
    \ (cons (car paren_string) (cons (car paren_string) (cons (car paren_string) (cons\
    \ (c", "  (let loop ((paren_string paren_string)\n             (levels 0))\n \
    \   (cond\n      [(empty? paren_string) levels]\n      [(char= (char (first paren_string))\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (char (first paren_string))\
    \ ')') (loop (rest paren_string) (sub1 levels))]\n      [else (loop (rest paren_string)\
    \ (add1 levels))])))\n", "  (let ((levels 0))\n    (cond\n      [(empty? paren_string)\
    \ 0]\n      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n\
    \      [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(') (add1 levels)]\n  \
    \    [(equal? (first paren_string) '(') (add1 levels)]\n      [(equal? (first\
    \ paren_string) '(') (add1 levels)]\n      [(equal? (first paren_string) '(')\
    \ (add1 ", "  (let ((levels 0))\n    (let loop ((paren_string paren_string)\n\
    \               (levels levels))\n      (cond ((string-length paren_string) levels)\n\
    \            ((char= paren_string '(') (loop (substring paren_string 0 (string-length\
    \ paren_string)) (add1 levels)))\n            ((char= paren_string ')') (loop\
    \ (substring paren_string 1 (string-length paren_string)) (sub1 levels)))\n  \
    \          (else (loop (substring paren_string 0 (string-length paren_string))\
    \ levels)))))))\n", "  (let loop ((parens paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? parens) (list levels)]\n      [(equal? (car parens)\
    \ '(') (loop (cdr parens) (+ 1 levels))]\n      [(equal? (car parens) ')') (loop\
    \ (cdr parens) levels)]\n      [else (loop (cdr parens) levels)]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) levels]\n      [(char= (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(char= (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(char=? (car paren_string) '(') (loop", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let ((level (0))\n        (nest (0))\n     \
    \   (parens (string-split paren_string)))\n    (cond\n      [(empty? parens) (list\
    \ level)]\n      [(equal? (car parens) '(') (set! level (+ level 1))\n       \
    \ (cond\n          [(empty? parens) (list level)]\n          [(equal? (car parens)\
    \ '(') (set! level (+ level 1))\n            (cond\n              [(empty? parens)\
    \ (list level)]\n              [(equal? (car parens) '(') (set! level (+ level\
    \ 1))\n                (cond\n                  [(empty? parens) (list level)]\n\
    \                  [(equal? (car parens) '(') (set! level (+ level 1))\n     \
    \               (cond\n                      [(empty? parens) (list level)]\n\
    \                      [(equal? (car parens) '(') (set! level (+ level 1))\n \
    \                       (cond\n                          [(empty? parens) (list\
    \ level)]\n                          [(equal? (car parens) '(') (set! level (+\
    \ level 1))\n                            (cond\n                             \
    \ [(empty? parens) (list level)]\n                              [(equal? (car\
    \ parens) '(') (set! level (+ level 1))\n                                (cond\n\
    \                                  [(empty? parens) (list level)]\n          \
    \                        [(equal? (car parens) '(') (set! level (+ level 1))\n\
    \                                    (cond\n                                 \
    \     [(empty? parens) (list level)]\n                                      [(equal?\
    \ (car parens) '(') (set! level (+ level 1))\n                               \
    \         (cond\n                                          [(empty? parens) (list\
    \ level)]\n                                          [(equal? (car parens) '(')\
    \ (set! level (+ level 1))\n                                            (cond\n\
    \                                              [(empty? parens) (list level)]\n\
    \                                              [(equal? (car parens) '(') (set!\
    \ level (+ level 1))\n                                                (cond\n\
    \                                                  [(empty? parens) (list level)]\n\
    \                                                  [(equal? (car parens) '(')\
    \ (set! level (+ level 1))\n                                                 \
    \   (cond\n                                                      [(empty? parens)\
    \ (list level)]\n                                                      [(equal?\
    \ (car parens) '(') (set! level (+ level 1))\n                               \
    \                         (cond\n                                            \
    \              [(empty? parens) (list level)]\n                              \
    \                            [(equal? (car parens) '(') (set! level (+ level 1))\n\
    \                                                            (cond\n         \
    \                                                     [(empty? parens) (list level)]\n\
    \                                                              [(equal? (car ",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list level)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [else\n       (loop\
    \ (rest paren_string) (add1 level))]))))\n", "  (let loop ((parens paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? parens) level]\n      [(char=\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char= (first\
    \ parens) '(') (loop (rest parens) level)]\n      [(char= (first parens) ')')\
    \ (loop (rest parens) (sub1 level))]\n      [(char= (first parens) ')') (loop\
    \ (rest parens) level)]\n      [else (loop (rest parens) level)])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
