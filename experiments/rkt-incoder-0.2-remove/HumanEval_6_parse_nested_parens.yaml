name: HumanEval_6_parse_nested_parens
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n;; For each of the group,\
  \ output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n(define (parse_nested_parens paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3))\n\
  \    (check-equal? (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4))\n   \
  \ (check-equal? (candidate \"(()(())((())))\") (list 4))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((paren_string paren_string)\n             (levels 0))\n\
    \    (cond\n      [(empty? paren_string) levels]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list level)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ 0]\n      [(equal? (first paren_string) '(') (add1 paren_count)]\n      [else\
    \ (loop (rest paren_string) (add1 paren_count))]))\n  (loop (reverse paren_string)\
    \ 0))\n", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string) level]\n      [(char= (char (first paren_string))\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (char (first paren_string))\
    \ ')') (loop (rest paren_string) (sub1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=\
    \ (char (first paren_string)) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (char (first paren_string)) ')') (loop (rest paren_string) (sub1\
    \ level))]\n      [else (loop (rest paren_string) (add1 level))]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(equal? (car paren_string) '(') (add1\
    \ paren_count)]\n      [(equal? (car paren_string) ')') (sub1 paren_count)]\n\
    \      [else (loop (cdr paren_string) (add1 paren_count))]))\n  paren_count)\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse (list levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      ", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse (list level))]\n      [(char=? (first paren_string) '( () ( ()\
    \ ))) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n\
    \      [(char=? (first paren_string) '( () ())) (incf level)]\n      [(char=?\
    \ (first paren_string) '( () ())) (incf level)]\n      [(char=? (first paren_string)\
    \ '( () ())) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf\
    \ level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n    \
    \  [(char=? (first paren_string) '( () ())) (incf level)]\n      [(char=? (first\
    \ paren_string) '( () ())) (incf level)]\n      [(char=? (first paren_string)\
    \ '( () ())) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf\
    \ level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n    \
    \  [(char=? (first paren_string) '( () ())) (incf level)]\n      [(char=? (first\
    \ paren_string) '( () ())) (incf level)]\n      [(char=? (first paren_string)\
    \ '( () ())) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf\
    \ level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n    \
    \  [(char=? (first paren_string) '( () ())) (incf level)]\n      [(char=? (first\
    \ paren_string) '( () ())) (incf level)]\n      [(char=? (first paren_string)\
    \ '( () ())) (incf level)]\n      [(char=? (first paren_string) '( () ())) (incf\
    \ level)]\n      [(char=? (first paren_string) '( () ())) (incf level)]\n    \
    \  [(char=? (first paren_string) '( () ())", "  (let ((level (0))\n        (paren_stack\
    \ (make-array '(0) '(paren_stack))))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '())\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '(()))\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()))\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()))\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '(()())\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()))\n       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()()))\n       (reverse (build-list level empty))]\n      [(equal? (car\
    \ paren_string) '((()()()))\n       (reverse (build-list level empty))]\n    \
    \  [(equal? (car paren_string) '((()()()()))\n       (reverse (build-list level\
    \ empty))]\n      [(equal? (car paren_string) '((()()()()))\n       (reverse (build-list\
    \ level empty))]\n      [(equal? (car paren_string) '((()()()()()))\n       (reverse\
    \ (build-list level empty))]\n      [(equal? (car paren_string) '((()()()()()))\n\
    \       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()()()()))\n       (reverse (build-list level empty))]\n      [(equal?\
    \ (car paren_string) '((()()()()()()))\n       (reverse (build-list level empty))]\n\
    \      [(equal? (car paren_string) '((()()()()()()))\n       (reverse (build-list\
    \ level empty))]\n      [(equal? (car paren_string) '((()()()()()()()))\n    \
    \   (reverse (build-list level empty))]\n      [(equal? (car paren_string) '((()()()()()()()))\n\
    \       (reverse (build-list level empty))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()))\n       (reverse (build-list level empty))]\n      [(equal?\
    \ (car paren_string) '((()()()()()()()()))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (if (= paren_count 0)\n           (list 0)\n           (list 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [else\n       (loop (rest paren_string) (+ 1 paren_count))]))))\n", " \
    \ (let loop ((parens paren_string)\n             (levels 0))\n    (cond\n    \
    \  [(empty? parens) levels]\n      [(char=? (car parens) '(') (loop (cdr parens)\
    \ (add1 levels))]\n      [else (loop (cdr parens) (add1 levels))])))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| c |>\nThanks for the answer. I'm still trying\
    \ to wrap my head around this solution. I'm also trying to understand how it works.\
    \ I understand that `parse_nested_parens` takes in a string and returns the number\
    \ of levels of nesting, but I don't understand how `loop` works. How does it know\
    \ to increment `levels` by 1? How does it know to stop incrementing `levels` when\
    \ it reaches the end of the string?\n<|/ c |>\n<| c |>\n`loop` calls `loop` recursively,\
    \ passing in the remaining string and increasing the levels by 1 each time it\
    \ recurses. `loop` stops recursing when it reaches the end of the string.\n<|/\
    \ c |>\n<| c |>\nI see. So `loop` calls `loop` recursively, passing in the remaining\
    \ string and increasing the levels by 1 each time it recurses. `loop` stops recursing\
    \ when it reaches the end of the string. How does it know to increment `levels`\
    \ by 1? How does it know to stop incrementing `levels` when it reaches the end\
    \ of the string?\n<|/ c |>\n<| c |>\n`loop` calls `loop` recursively, passing\
    \ in the remaining string and increasing the levels by 1 each time it recurses.\
    \ `loop` stops recursing when it reaches the end of the string. How does it know\
    \ to increment `levels` by 1? How does it know to stop incrementing `levels` when\
    \ it reaches the end of the string?\n<|/ c |>\n<| c |>\n`loop` calls `loop` recursively,\
    \ passing in the remaining string and increasing the levels by 1 each time it\
    \ recurses. `loop` stops recursing when it reaches the end of the string. How\
    \ does it know to increment `levels` by 1? How does it know to stop incrementing\
    \ `levels` when it reaches the end of the string?\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (let ((level (0))\n        (chars '()))\n    (loop for c in\
    \ paren_string\n          until (char=? c #\\)\n          collect c\n        \
    \  (if (char=? c #\\)\n              (set! level (+ level 1))\n              (set!\
    \ chars (cons c chars))\n              (set! chars (cons #\\( chars))))\n    \
    \      (if (char=? c #\\)\n              (set! level (+ level 1))\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #\\) chars))\n          (if (char=? c #\\)\n          \
    \    (set! chars (cons #", "  (let loop ((paren_string paren_string)\n       \
    \      (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ loop ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ parens) level]\n      [(char=? (first parens) '(') (loop (rest parens) (+ level\
    \ 1))]\n      [else (loop (rest parens) level)])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char= (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n", "  (let loop ((parens\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? parens) (list)]\
    \ \n      [(equal? (car parens) '(') (loop (cdr parens) (+ level 1)))]\n     \
    \ [(equal? (car parens) ')') (loop (cdr parens) level)]\n      [else (loop (cdr\
    \ parens) level)])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string)\n       (if (= level\
    \ 0)\n           (list 0)\n           (list level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) ')')\n       (loop (rest paren_string) (- level 1))]\n      [else\n\
    \       (loop (rest paren_string) (+ level 1))])))\n", "  (let ((levels 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (list levels)]\n      [(equal?\
    \ (first paren_string) '(')\n       (let ((level (+ 1 (length paren_string))))\n\
    \         (cons level \n              (parse_nested_parens (rest paren_string))))]\n\
    \      [(equal? (first paren_string) '(#')\n       (let ((level (+ 1 (length paren_string))))\n\
    \         (cons level \n              (parse_nested_parens (rest paren_string))))]\n\
    \      [else\n       (let ((level (+ 1 (length paren_string))))\n         (cons\
    \ level \n              (parse_nested_parens (rest paren_string))))]\n      )))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
