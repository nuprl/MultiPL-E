name: HumanEval_58_common
language: rkt
prompt: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
  (define (common l1 l2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
  \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
  \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
  \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
  \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
completions: ["  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal?\
    \ (first l1) x)) l2)\n          #'<) '<))\n", "  (sort (remove-duplicates \n \
    \         (remove-if-not (lambda (x) (equal? (car l1) x)) l2)\n          ) \n\
    \        (lambda (x) (< (car l1) x))))\n", "  (sort (remove-duplicates \n    \
    \      (remove-if-not (lambda (x) (equal? (car l1) x)) l2)) \n        (lambda\
    \ (x) (equal? (car l1) x))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (car l1) x)) l2)) \n        (lambda (x)\
    \ (< (car l1) x))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)) \n        (lambda (x) (equal? (first\
    \ l1) x))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (car\
    \ l1) x)) l2)\n          ) \n        >\n        (lambda (x y) (equal? (car l1)\
    \ y))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x)\
    \ (equal? (first l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          ) \n        (lambda (x) (< (length l1) (length l2)))\
    \ \n        ) \n      )\n  )\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)) \n        (lambda (x) (equal? (first\
    \ l1) x))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          ) \n        (lambda (x) (equal? (first\
    \ l1) x))\n        ) \n        ) \n)\n", "  (sort (remove-duplicates \n      \
    \    (filter (lambda (x) (equal? (car l1) x)) \n                   (remove-duplicates\
    \ \n                    (filter (lambda (x) (equal? (car l2) x)) \n          \
    \                   (remove-duplicates \n                              (filter\
    \ (lambda (x) (equal? (car l2) x)) \n                                       (remove-duplicates\
    \ \n                                        (filter (lambda (x) (equal? (car l1)\
    \ x)) \n                                                 (remove-duplicates \n\
    \                                                  (filter (lambda (x) (equal?\
    \ (car l2) x)) \n                                                           (remove-duplicates\
    \ \n                                                            (filter (lambda\
    \ (x) (equal? (car l1) x)) \n                                                \
    \                     (remove-duplicates \n                                  \
    \                                   (filter (lambda (x) (equal? (car l2) x)) \n\
    \                                                                            \
    \   (remove-duplicates \n                                                    \
    \                            (filter (lambda (x) (equal? (car l1) x)) \n     \
    \                                                                            \
    \        (remove-duplicates \n                                               \
    \                                           (filter (lambda (x) (equal? (car l2)\
    \ x)) \n                                                                     \
    \                              (remove-duplicates \n                         \
    \                                                                           (filter\
    \ (lambda (x) (equal? (car l1) x)) \n                                        \
    \                                                                   (remove-duplicates\
    \ \n                                                                         \
    \                                   (filter (lambda (x) (equal? (car l2) x)) \n\
    \                                                                            \
    \                                         (remove-duplicates \n              \
    \                                                                            \
    \                            (filter (lambda (x) (equal? (car l1) x)) \n     \
    \                                                                            \
    \                                              (remove-duplicates \n         \
    \                                                                            \
    \                                                           (filter (lambda (x)\
    \ (equal? (car l2) x)) \n                                                    \
    \                                                                            \
    \                         (remove-duplicates \n                              \
    \                                                                            \
    \                                                (filter (lambda (x) (equal? (car\
    \ l1) x)) \n                                                                 \
    \                                                                            \
    \                      (remove-duplicates \n                                 \
    \                                                                            \
    \                                                       (filter (lambda (x) (equal?\
    \ (car l2) x)) \n                                                            \
    \                                                                            \
    \                                   (remove-duplicates \n                    \
    \                                                                            \
    \                                                                            (filter\
    \ (lambda (x) (equal? (car l1) x)) \n                                        \
    \                                                                            \
    \                                                                 (remove-duplicates\
    \ \n                                                                         \
    \                                                                            \
    \                                 (filter (lambda (x) (equal? (car l2) x)) \n\
    \                                                                            \
    \                                                                            \
    \                                       (remove-duplicates \n                \
    \                                                                            \
    \                                                                            \
    \                                    (filter (lambda (x) (equal? (car l1) x))\
    \ \n                                                                         \
    \                                                                            \
    \                                                                    (remove-duplicates\
    \ \n                                                                         \
    \                                                                            \
    \                                                                     (filter\
    \ (lambda (x) (equal? (car l2) x)) \n                                        \
    \                                                                            \
    \                                                                            \
    \                                   (remove-duplicates \n                    \
    \                                                                            \
    \                                                                            \
    \                                                        (filter (lambda (x) (equal?\
    \ (car l1) x)) \n                                                            \
    \                                                                            \
    \                                                                            \
    \                       (remove-", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)) \n        (lambda (x) (equal? (first\
    \ l1) x))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (car l1) x)) l2)) \n        (lambda (x) (equal? (car l1) x))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? x l1))\
    \ l2)) \n        (lambda (x) (< (length x) 1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? x l1)) l2)) \n        (lambda\
    \ (x) (< (length x) 1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)) \n        (lambda (x) (< (length l1)\
    \ (length l2)))))\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `remove-if-not` can\
    \ be replaced with `(remove-if-not (lambda (x) (equal? (first l1) x)) l2)`\n<|/\
    \ c |>\n<| c |>\nYes, that's true. I was just trying to keep it simple.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nHere's a solution using Racket's built-in hash tables:\n\
    <code>", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal?\
    \ x l1)) l2)) \n        (lambda (x) (equal? x l1))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
