name: HumanEval_88_sort_array
language: rkt
prompt: "#lang racket\n\n;; Given an array of non-negative integers, return a copy\
  \ of the given array after sorting,\n;; you will sort the given array in ascending\
  \ order if the sum( first index value, last index value) is odd,\n;; or sort it\
  \ in descending order if the sum( first index value, last index value) is even.\n\
  ;; Note:\n;; * don't change the given array.\n;; Examples:\n(define (sort_array\
  \ array)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 5)) (list 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3\
  \ 4 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0))\n\
  \    (check-equal? (candidate (list 2 1)) (list 1 2))\n    (check-equal? (candidate\
  \ (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87))\n    (check-equal? (candidate\
  \ (list 21 14 23 11)) (list 23 21 14 11))\n))\n\n(test-humaneval)"
completions: ["  (if (null? array)\n      '()\n      (let ([sum (+ (first array) (last\
    \ array))])\n        (if (odd? sum)\n            (sort_array (sort (sort array\
    \ (lambda (x) (- x sum))) <))\n            (sort_array (sort (sort array (lambda\
    \ (x) (- x sum))) >))))))\n", "  (if (null? array)\n      '()\n      (let ((sum\
    \ (+ (first array) (last array))))\n        (if (odd? sum)\n            (sort_array\
    \ (sort (list array (first array) (last array)) (lambda (x y) (< x y))))\n   \
    \         (sort_array (sort (list array (first array) (last array)) (lambda (x\
    \ y) (> x y))))))))\n", "  (sort_array-helper array (length array) 0))\n", " \
    \ (sort array (lambda (x y)\n              (if (odd? (+ x y))\n              \
    \    (- x y)\n                  (+ x y))))\n  )\n", "  (if (null? array)\n   \
    \   '()\n      (if (even? (sum (first array) (last array)))\n          (sort_array\
    \ (sort_array (sub1 array))) (sort_array (sub1 array))\n          (sort_array\
    \ (sub1 array)))))\n", "  (sort array (lambda (x y)\n              (if (odd? (+\
    \ x y))\n                  (- x y)\n                  (+ x y))))\n  )\n", "  (if\
    \ (null? array)\n      '()\n      (if (even? (sum (first array) (last array)))\n\
    \          (sort_array (rest array))\n          (sort_array (cons (first array)\
    \ (sort_array (rest array)))))))\n", "  (sort_array array (length array)))\n",
  "  (if (null? array)\n      '()\n      (let ([sum (+ 0 (car array))])\n        (if\
    \ (odd? sum)\n            (sort_array (sort_array (cdr array))\n             \
    \         (cons (car array) (cdr array)))\n            (sort_array (sort_array\
    \ (cdr array))\n                      (cons (car array) (cons (cdr array) '())))))))\n",
  "  (sort array <))\n", "  (sort array (lambda (x y)\n              (if (odd? (+\
    \ x y))\n                  (- y x)\n                  (+ x y))))))\n", "  (sort\
    \ array (lambda (x y) (if (odd? (+ x y)) -1 1))))\n", "  (if (null? array)\n \
    \     '()\n      (let ((sum (+ 0 (car array)))\n            (index (length array))\n\
    \            (result (make-array (length array) 'int)))\n        (do ((i 0 (+\
    \ i 1))\n             (j 0 (+ j 1)))\n            ((or (< i index) (< j index))\n\
    \             (set! result (append result (list array)))\n             (set! index\
    \ (+ i j)))\n          ((or (= i index) (= j index))\n           (set! result\
    \ (append result (list array)))\n           (set! index (+ i j)))\n        (set!\
    \ result (append result (sort (subseq array i index) '<)\n                   \
    \            (sort (subseq array index j) '>))))\n        (set! result (sort result\
    \ '<)))))\n", "  (sort_array_helper array (length array) 0))\n", "  (sort array\
    \ (lambda (x y) (if (odd? x) (- y x) y))))\n", "  (if (null? array)\n      '()\n\
    \      (append (sort_array (sub1 array))\n              (list (car array))\n \
    \             (sort_array (sub1 array)))))\n", "  (if (null? array)\n      '()\n\
    \      (append (sort_array (sub1 array))\n              (if (even? (+ first last))\n\
    \                  (cons (first array) (sort_array (sub1 array)))\n          \
    \        (cons (first array) (sort_array (sub1 array)))))))\n", "  (if (null?\
    \ array)\n      '()\n      (append (sort_array (sub1 array))\n              (list\
    \ (car array))\n              (sort_array (sub1 array))))\n  )\n", "  (if (null?\
    \ array)\n      '()\n      (let ((sum (+ array[0] (last array))) (result (list\
    \ array)))\n        (if (odd? sum)\n            (sort_array (append result (list\
    \ array))) ; descending order\n            (sort_array (append result (list array)))\
    \ ; ascending order\n            (sort_array (append result (list array))) ; descending\
    \ order\n            (sort_array (append result (list array))) ; ascending order\n\
    \            (sort_array (append result (list array))) ; descending order\n  \
    \          (sort_array (append result (list array))) ; ascending order\n     \
    \       (sort_array (append result (list array))) ; descending order\n       \
    \     (sort_array (append result (list array))) ; ascending order\n          \
    \  (sort_array (append result (list array))) ; descending order\n            (sort_array\
    \ (append result (list array))) ; ascending order\n            (sort_array (append\
    \ result (list array))) ; descending order\n            (sort_array (append result\
    \ (list array))) ; ascending order\n            (sort_array (append result (list\
    \ array))) ; descending order\n            (sort_array (append result (list array)))\
    \ ; ascending order\n            (sort_array (append result (list array))) ; descending\
    \ order\n            (sort_array (append result (list array))) ; ascending order\n\
    \            (sort_array (append result (list array))) ; descending order\n  \
    \          (sort_array (append result (list array))) ; ascending order\n     \
    \       (sort_array (append result (list array))) ; descending order\n       \
    \     (sort_array (append result (list array))) ; ascending order\n          \
    \  (sort_array (append result (list array))) ; descending order\n            (sort_array\
    \ (append result (list array))) ; ascending order\n            (sort_array (append\
    \ result (list array))) ; descending order\n            (sort_array (append result\
    \ (list array))) ; ascending order\n            (sort_array (append result (list\
    \ array))) ; descending order\n            (sort_array (append result (list array)))\
    \ ; ascending order\n            (sort_array (append result (list array))) ; descending\
    \ order\n            (sort_array (append result (list array))) ; ascending order\n\
    \            (sort_array (append result (list array))) ; descending order\n  \
    \          (sort_array (append result (list array))) ; asc", "  (if (null? array)\n\
    \      '()\n      (let ([sum (+ 0 (first array))])\n        (if (odd? sum)\n \
    \           (sort_array (rest array))\n            (sort_array (cons (first array)\
    \ (rest array)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
