name: HumanEval_103_rounded_avg
language: rkt
prompt: "#lang racket\n\n;; You are given two positive integers n and m, and your\
  \ task is to compute the\n;; average of the integers from n through m (including\
  \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
  ;; If n is greater than m, return -1.\n;; Example:\n(define (rounded_avg n m)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
  \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
  \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
  \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851) \"\
  0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n    (check-equal?\
  \ (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate 350 902) \"\
  0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal?\
  \ (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal?\
  \ (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(> n m) -1]\n    [else (/ (+ n m) (+ n m))]))\n", " \
    \ (let ((sum (+ n m)))\n    (if (> n m)\n        -1\n        (/ (+ n m) 2)\n \
    \     )\n  )\n)\n", "  (let ((sum (+ n m)))\n    (if (< n m)\n        -1\n   \
    \     (/ sum 2)\n    )\n))\n", "  (if (> n m)\n      -1\n      (/ n (+ m 1))))\n",
  "  (let ((avg 0))\n    (if (> n m)\n        -1\n        (set! avg (/ (+ n m) 2))\n\
    \        (set! avg (round avg))\n        (set! avg (number->string avg))\n   \
    \     avg)))\n", "  (cond\n    [(< n m) -1]\n    [else (/ (+ n m) (+ n m))]))\n",
  "  (cond\n    [(or (< n m) (> n m)) -1]\n    [else (/ (+ n m) (+ n m))]))\n", " \
    \ (let ((sum (+ n m)))\n    (if (> n m)\n        -1\n        (/ (+ n m) 2)\n \
    \     )\n    )\n  )\n", "  (cond\n    [(> n m) -1]\n    [else (/ (+ n m) (+ n\
    \ m))]))\n", "  (let ((sum (+ n m)))\n    (cond\n      [(< sum m) -1]\n      [(<\
    \ sum n) 0]\n      [else (round (/ sum 2))]\n    )\n  )\n)\n", "  (let ((avg 0))\n\
    \    (if (> n m)\n        -1\n        (let ((i (- n m)))\n          (if (< i 10)\n\
    \              (set! avg (+ avg i))\n              (set! avg (+ avg 10))))\n \
    \       avg)))\n", "  (if (> n m)\n      -1\n      (/ (+ n m) (+ n m))))\n", " \
    \ (let ((avg 0))\n    (cond\n      [(> n m) -1]\n      [(< n m) (+ avg 1)]\n \
    \     [else (+ avg (* n m))]))\n  (format \"~d\" (/ avg 2)))\n", "  (let ((sum\
    \ (+ n m)))\n    (if (> n m)\n        -1\n        (/ sum 2))))\n", "  (cond\n\
    \    [(< n m) -1]\n    [else (/ (+ n m) (+ n m))]))\n", "  (if (> n m)\n     \
    \ -1\n      (/ n (+ m 1))))\n", "  (cond\n    [(or (= n m) (n>m)) -1]\n    [else\
    \ (/ (+ n m) 2)]))\n", "  (cond\n    [(or (= n m) (null m)) -1]\n    [(= n m)\
    \ 0]\n    [(= m 0) 1]\n    [else (/ (+ n m 1) 2)]))\n", "  (cond\n    [(< n m)\
    \ -1]\n    [else (/ (+ n m) (+ n m))]))\n", "  (if (> n m)\n      -1\n      (/\
    \ (+ n m) (+ n m))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
