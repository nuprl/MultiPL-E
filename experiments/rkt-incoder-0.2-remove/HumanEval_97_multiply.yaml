name: HumanEval_97_multiply
language: rkt
prompt: "#lang racket\n\n;; Complete the function that takes two integers and returns\
  \ \n;; the product of their unit digits.\n;; Assume the input is always valid.\n\
  ;; Examples:\n(define (multiply a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n\
  \    (check-equal? (candidate 148 412) 16)\n    (check-equal? (candidate 19 28)\
  \ 72)\n    (check-equal? (candidate 2020 1851) 0)\n    (check-equal? (candidate\
  \ 14 -15) 20)\n    (check-equal? (candidate 76 67) 42)\n    (check-equal? (candidate\
  \ 17 27) 49)\n    (check-equal? (candidate 0 1) 0)\n    (check-equal? (candidate\
  \ 0 0) 0)\n))\n\n(test-humaneval)"
completions: ["  (cond ((= a 0) 0)\n        ((= b 0) 0)\n        ((= a b) (* a a))\n\
    \        (else (* a (multiply (quotient a b) (quotient b 10))))))\n", "  (cond\
    \ [(< a b) (* a b)]\n        [(= a b) (* a a)]\n        [else (* a b)]))\n", " \
    \ (cond [(< a b) 0]\n        [(= a b) 1]\n        [else (* a (multiply (quotient\
    \ a b) (quotient b 10)))]))\n", "  (cond [(< a b) (* a b)]\n        [else (* a\
    \ (multiply (quotient a b) b))]))\n", "  (cond [(< a b) 0]\n        [(< b 10)\
    \ 0]\n        [else (* a (multiply (quotient a 10) b))]))\n", "  (cond [(= a 0)\
    \ 1]\n        [(= b 0) 0]\n        [else (* a (multiply (quotient a 10) b))]))\n",
  "  (cond\n    [(< a 0) 0]\n    [(< b 0) 0]\n    [else (* a (multiply (quotient a\
    \ 10) b))]))\n", "  (cond\n    [(zero? a) (zero? b)]\n    [(zero? b) (zero? a)]\n\
    \    [else (* a b)]))\n", "  (cond [(< a b) 0]\n        [(= a b) 1]\n        [else\
    \ (* a (multiply (quotient a b) (quotient b 10)))]))\n", "  (cond [(< a b) (*\
    \ a b)]\n        [(< b a) (* b a)]\n        [else (* a b)]))\n", "  (cond [(=\
    \ a 0) 1]\n        [(= b 0) 0]\n        [else (* a (multiply (quotient a 10) b)])))\
    \ \n", "  (cond\n    [(< a b) (* a b)]\n    [else (* a b)]))\n", "  (cond\n  \
    \  [(< a 10) 0]\n    [(< b 10) 0]\n    [else (* a (multiply (quotient a 10) b))]\n\
    \  ))\n", "  (cond\n    [(< a b) (* a b)]\n    [else (* a b)]))\n", "  (cond [(<\
    \ a b) 0]\n        [(= a b) 1]\n        [else (* a (multiply (quotient a b) (quotient\
    \ b 10)))]))\n", "  (cond [(= a 0) 1]\n        [(= b 0) 0]\n        [(= b 1) a]\n\
    \        [else (* a (multiply (quotient a b) (quotient b 10)))]))\n", "  (cond\
    \ [(= a 0) 0]\n        [(= b 0) 0]\n        [(= a b) (* a a)]\n        [else (*\
    \ a (multiply (quotient a b) (quotient b 10)))]))\n", "  (cond ((= a 0) 0)\n \
    \       ((= b 0) 0)\n        ((= a 1) 1)\n        ((= b 1) 1)\n        ((= a 2)\
    \ (* a b))\n        ((= b 2) (* b a))\n        (else (* a (multiply (quotient\
    \ a b) (quotient b a))))))\n", "  (cond ((< a b) 0)\n        ((< b 10) 0)\n  \
    \      ((= a b) 1)\n        (else (* a (multiply (quotient a 10) b))))))\n", " \
    \ (cond [(< a b) (* a b)]\n        [(= a b) (* a a)]\n        [else (* a b)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
