name: HumanEval_91_is_bored
language: rkt
prompt: "#lang racket\n\n;; You'll be given a string of words, and your task is to\
  \ count the number\n;; of boredoms. A boredom is a sentence that starts with the\
  \ word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
  (define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"\
    !\") 0]\n    [(equal? (first S) \".\") 0]\n    [else 0]))\n", "  (and (equal?\
    \ (first S) \"I\")\n       (equal? (rest S) \".\")\n       (equal? (rest S) \"\
    '\")\n       (equal? (rest S) \"?\")\n       (equal? (rest S) \"!\")))\n", " \
    \ (cond\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [(equal?\
    \ (first S) \".\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \"?\") (+\
    \ 1 (is_bored (rest S)))]\n    [(equal? (first S) \"!\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else 0]))\n", "  (cond\n    [(empty? S) false]\n    [(equal? (first\
    \ S) \"I\") true]\n    [else (is_bored (rest S))]))\n", "  (cond\n    ((null?\
    \ S) '())\n    ((eq? (car S) \"I\") (cons (car S) (is_bored (cdr S))))\n    ((eq?\
    \ (car S) \".\") (cons (car S) (is_bored (cdr S))))\n    ((eq? (car S) \"?\")\
    \ (cons (car S) (is_bored (cdr S))))\n    ((eq? (car S) \"!\") (cons (car S) (is_bored\
    \ (cdr S))))\n    (else (is_bored (cdr S)))))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \".\") (+ 1 (is_bored\
    \ (rest S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored (rest S)))]\n    [(equal?\
    \ (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (cond\n \
    \   ((null? S) '())\n    ((equal? (car S) \"I\") (cons \"I\" (is_bored (cdr S))))\n\
    \    ((equal? (car S) \".\") (cons (car S) (is_bored (cdr S))))\n    ((equal?\
    \ (car S) \"?\") (cons (car S) (is_bored (cdr S))))\n    ((equal? (car S) \"!\"\
    ) (cons (car S) (is_bored (cdr S))))\n    (else (is_bored (cdr S)))))\n", "  (cond\n\
    \    [(empty? S) false]\n    [(equal? (first S) \"I\") true]\n    [(equal? (first\
    \ S) \".\") true]\n    [(equal? (first S) \"?\") true]\n    [(equal? (first S)\
    \ \"!\") true]\n    [else false]))\n", "  (cond\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n   \
    \ [(equal? (first S) \"!\") 0]\n    [else 0]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \".\") (+ 1 (is_bored\
    \ (rest S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored (rest S)))]\n    [(equal?\
    \ (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (cond\n \
    \   [(empty? S) false]\n    [(equal? (first S) \"I\") true]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) false]\n    [(equal? (first S) \"\
    I\") true]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \".\") (+ 1 (is_bored\
    \ (rest S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored (rest S)))]\n    [(equal?\
    \ (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") true]\n    [(equal? (first S) \"!\") true]\n   \
    \ [(equal? (first S) \".\") true]\n    [(equal? (first S) \"?\") true]\n    [else\
    \ false]))\n", "  (cond\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [(equal? (first S) \".\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first\
    \ S) \"?\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \"!\") (+ 1 (is_bored\
    \ (rest S)))]\n    [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n\
    \    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [else 0]))\n", "  (cond\n    [(empty? S) false]\n \
    \   [(equal? (first S) \"I\") true]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) false]\n    [(equal? (first S) \"I\") true]\n    [(equal? (first\
    \ S) \".\") true]\n    [(equal? (first S) \"?\") true]\n    [(equal? (first S)\
    \ \"!\") true]\n    [else false]))\n", "  (cond\n    [(equal? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \".\") (+ 1 (is_bored (rest\
    \ S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored (rest S)))]\n    [(equal?\
    \ (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (cond\n \
    \   [(empty? S) false]\n    [(equal? (first S) \"I\") true]\n    [else (is_bored\
    \ (rest S))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
