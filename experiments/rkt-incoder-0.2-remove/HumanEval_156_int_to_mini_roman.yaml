name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n(define (int_to_mini_roman number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< number 1) \"I\"]\n    [(< number 5) \"V\"]\n    [(<\
    \ number 10) \"X\"]\n    [(< number 50) \"L\"]\n    [(< number 100) \"C\"]\n \
    \   [(< number 500) \"D\"]\n    [(< number 1000) \"M\"]\n    [else (int_to_mini_roman\
    \ number)])\n)\n", "  (cond\n    [(= number 0) \"zero\"]\n    [(= number 1) \"\
    one\"]\n    [(= number 2) \"two\"]\n    [(= number 3) \"three\"]\n    [(= number\
    \ 4) \"four\"]\n    [(= number 5) \"five\"]\n    [(= number 6) \"six\"]\n    [(=\
    \ number 7) \"seven\"]\n    [(= number 8) \"eight\"]\n    [(= number 9) \"nine\"\
    ]\n    [else (int_to_mini_roman number-1)]))\n", "  (cond\n    [(= number 0) \"\
    \"]\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (let ([remainder\
    \ (modulo number 1000)])\n              (cond\n               [(= remainder 0)\
    \ \"\"]\n               [(< remainder 100) (int_to_mini_roman remainder)]\n  \
    \             [else (cons (char->string 'M) (int_to_mini_roman remainder))]))]))\n",
  "  (cond\n    [(< number 1) \"I\"]\n    [(< number 5) \"IV\"]\n    [(< number 10)\
    \ \"V\"]\n    [(< number 50) \"IX\"]\n    [(< number 100) \"X\"]\n    [(< number\
    \ 500) \"XL\"]\n    [(< number 1000) \"L\"]\n    [(< number 5000) \"XC\"]\n  \
    \  [(< number 10000) \"C\"]\n    [(< number 50000) \"CD\"]\n    [(< number 100000)\
    \ \"D\"]\n    [(< number 500000) \"CM\"]\n    [else \"M\"]\n  )\n)\n", "  (cond\n\
    \    [(< number 1) (error \"Invalid input: number must be positive.\")]\n    [else\
    \ (cond\n            [(< number 1000) (error \"Invalid input: number must be less\
    \ than 1000.\")]\n            [else (cond\n                    [else (cond\n \
    \                           [(< number 500) (error \"Invalid input: number must\
    \ be less than 500.\")]\n                            [(< number 100) (error \"\
    Invalid input: number must be less than 100.\")]\n                           \
    \ [(< number 50) (error \"Invalid input: number must be less than 50.\")]\n  \
    \                          [(< number 10) (error \"Invalid input: number must\
    \ be less than 10.\")]\n                            [(< number 1) (error \"Invalid\
    \ input: number must be less than 1.\")]\n                            [(< number\
    \ 0) (error \"Invalid input: number must be less than 0.\")]\n               \
    \             [(< number -1) (error \"Invalid input: number must be less than\
    \ -1.\")]\n                            [(< number -10) (error \"Invalid input:\
    \ number must be less than -10.\")]\n                            [(< number -100)\
    \ (error \"Invalid input: number must be less than -100.\")]\n               \
    \             [(< number -500) (error \"Invalid input: number must be less than\
    \ -500.\")]\n                            [(< number -1000) (error \"Invalid input:\
    \ number must be less than -1000.\")]\n                            [(< number\
    \ -10000) (error \"Invalid input: number must be less than -10000.\")]\n     \
    \                       [(< number -1000000) (error \"Invalid input: number must\
    \ be less than -1000000.\")]\n                            [(< number -100000000)\
    \ (error \"Invalid input: number must be less than -100000000.\")]\n         \
    \                   [(< number -10000000000) (error \"Invalid input: number must\
    \ be less than -10000000000.\")]\n                            [(< number -1000000000000)\
    \ (error \"Invalid input: number must be less than -1000000000000.\")]\n     \
    \                       [(< number -10000000000000) (error \"Invalid input: number\
    \ must be less than -10000000000000.\")]\n                            [(< number\
    \ -100000000000000) (error \"Invalid input: number must be less than -100000000000000.\"\
    )]\n                            [(< number -1000000000000000) (error \"Invalid\
    \ input: number must be less than -1000000000000000.\")]\n                   \
    \         [(< number -10000000000000000) (error \"Invalid input: number must be\
    \ less than -10000000000000000.\")]\n                            [(< number -100000000000000000)\
    \ (error \"Invalid input: number must be less than -100000000000000000.\")]\n\
    \                            [(< number -1000000000000000000) (error \"Invalid\
    \ input: number must be less than -1000000000000000000.\")]\n                \
    \            [(< number -10000000000000000000) (error \"Invalid input: number\
    \ must be less than -10000000000000000000.\")]\n                            [(<\
    \ number -100000000000000000000) (error ", "  (cond\n    [(< number 1) \"I\"]\n\
    \    [(< number 4) \"IV\"]\n    [(< number 5) \"V\"]\n    [(< number 9) \"IX\"\
    ]\n    [(< number 10) \"X\"]\n    [(< number 40) \"XL\"]\n    [(< number 50) \"\
    L\"]\n    [(< number 90) \"XC\"]\n    [(< number 100) \"C\"]\n    [else \"?\"\
    ]\n  )\n)\n", "  (cond\n    [(< number 1) \"I\"]\n    [(< number 5) \"V\"]\n \
    \   [(< number 10) \"X\"]\n    [(< number 50) \"L\"]\n    [(< number 100) \"C\"\
    ]\n    [(< number 500) \"D\"]\n    [(< number 1000) \"M\"]\n    [else \"?\"]\n\
    \  )\n)\n", "  (cond\n    [(< number 1) (error \"Invalid input: must be greater\
    \ than 1\")]\n    [(< number 1000) (error \"Invalid input: must be less than 1000\"\
    )]\n    [else (mini_roman (- number 1))]))\n", "  (cond\n    [(< number 1) \"\
    I\"]\n    [(< number 5) \"V\"]\n    [(< number 10) \"X\"]\n    [(< number 50)\
    \ \"L\"]\n    [(< number 100) \"C\"]\n    [(< number 500) \"D\"]\n    [(< number\
    \ 1000) \"M\"]\n    [else \"?\"]))\n", "  (cond\n    [(= number 0) \"\"]\n   \
    \ [(= number 1) \"I\"]\n    [(= number 2) \"II\"]\n    [(= number 3) \"III\"]\n\
    \    [(= number 4) \"IV\"]\n    [(= number 5) \"V\"]\n    [(= number 6) \"VI\"\
    ]\n    [(= number 7) \"VII\"]\n    [(= number 8) \"VIII\"]\n    [(= number 9)\
    \ \"IX\"]\n    [(= number 10) \"X\"]\n    [(= number 11) \"XI\"]\n    [(= number\
    \ 12) \"XII\"]\n    [(= number 13) \"XIII\"]\n    [(= number 14) \"XIV\"]\n  \
    \  [(= number 15) \"XV\"]\n    [(= number 16) \"XVI\"]\n    [(= number 17) \"\
    XVII\"]\n    [(= number 18) \"XVIII\"]\n    [(= number 19) \"XIX\"]\n    [(= number\
    \ 20) \"XX\"]\n    [(= number 21) \"XXI\"]\n    [(= number 22) \"XXII\"]\n   \
    \ [(= number 23) \"XXIII\"]\n    [(= number 24) \"XXIV\"]\n    [(= number 25)\
    \ \"XXV\"]\n    [(= number 26) \"XXVI\"]\n    [(= number 27) \"XXVII\"]\n    [(=\
    \ number 28) \"XXVIII\"]\n    [(= number 29) \"XXIX\"]\n    [(= number 30) \"\
    XXX\"]\n    [(= number 31) \"XXXI\"]\n    [(= number 32) \"XXXII\"]\n    [(= number\
    \ 33) \"XXXIII\"]\n    [(= number 34) \"XXXIV\"]\n    [(= number 35) \"XXXV\"\
    ]\n    [(= number 36) \"XXXVI\"]\n    [(= number 37) \"XXXVII\"]\n    [(= number\
    \ 38) \"XXXVIII\"]\n    [(= number 39) \"XXXIX\"]\n    [(= number 40) \"XL\"]\n\
    \    [(= number 41) \"L\"]\n    [(= number 42) \"LX\"]\n    [(= number 43) \"\
    LXX\"]\n    [(= number 44) \"LXXX\"]\n    [(= number 45) \"LXXXX\"]\n    [(= number\
    \ 46) \"LXXXXX\"]\n    [(= number 47) \"LXXXII\"]\n    [(= number 48) \"LXXXIII\"\
    ]\n    [(= number 49) \"LXXXIV\"]", "  (cond\n    [(= number 0) \"\"]\n    [(=\
    \ number 1) \"I\"]\n    [(= number 2) \"II\"]\n    [(= number 3) \"III\"]\n  \
    \  [(= number 4) \"IV\"]\n    [(= number 5) \"V\"]\n    [(= number 6) \"VI\"]\n\
    \    [(= number 7) \"VII\"]\n    [(= number 8) \"VIII\"]\n    [(= number 9) \"\
    IX\"]\n    [(= number 10) \"X\"]\n    [(= number 11) \"XI\"]\n    [(= number 12)\
    \ \"XII\"]\n    [(= number 13) \"XIII\"]\n    [(= number 14) \"XIV\"]\n    [(=\
    \ number 15) \"XV\"]\n    [(= number 16) \"XVI\"]\n    [(= number 17) \"XVII\"\
    ]\n    [(= number 18) \"XVIII\"]\n    [(= number 19) \"XIX\"]\n    [(= number\
    \ 20) \"XX\"]\n    [(= number 21) \"XXI\"]\n    [(= number 22) \"XXII\"]\n   \
    \ [(= number 23) \"XXIII\"]\n    [(= number 24) \"XXIV\"]\n    [(= number 25)\
    \ \"XXV\"]\n    [(= number 26) \"XXVI\"]\n    [(= number 27) \"XXVII\"]\n    [(=\
    \ number 28) \"XXVIII\"]\n    [(= number 29) \"XXIX\"]\n    [(= number 30) \"\
    XXX\"]\n    [(= number 31) \"XXXI\"]\n    [(= number 32) \"XXXII\"]\n    [(= number\
    \ 33) \"XXXIII\"]\n    [(= number 34) \"XXXIV\"]\n    [(= number 35) \"XXXV\"\
    ]\n    [(= number 36) \"XXXVI\"]\n    [(= number 37) \"XXXVII\"]\n    [(= number\
    \ 38) \"XXXVIII\"]\n    [(= number 39) \"XXXIX\"]\n    [(= number 40) \"XL\"]\n\
    \    [(= number 41) \"L\"]\n    [(= number 42) \"LX\"]\n    [(= number 43) \"\
    LXX\"]\n    [(= number 44) \"LXXX\"]\n    [(= number 45) \"LXXXX\"]\n    [(= number\
    \ 46) \"LXXXXX\"]\n    [(= number 47) \"LXXXII\"]\n    [(= number 48) \"LXXXIII\"\
    ]\n    [(= number 49) \"LXXXIV\"]", "  (cond\n    [(< number 1) \"\"]\n    [(<\
    \ number 1000) (int_to_mini_roman number)]\n    [else (cons (char (floor (/ number\
    \ 1000))) (int_to_mini_roman number))]))\n", "  (cond\n    [(< number 1) \"I\"\
    ]\n    [(< number 5) \"V\"]\n    [(< number 10) \"X\"]\n    [(< number 50) \"\
    L\"]\n    [(< number 100) \"C\"]\n    [(< number 500) \"D\"]\n    [(< number 1000)\
    \ \"M\"]\n    [else (int_to_mini_roman number)]\n  ))\n", "  (cond\n    [(< number\
    \ 1) \"I\"]\n    [(< number 5) \"IV\"]\n    [(< number 10) \"V\"]\n    [(< number\
    \ 50) \"IX\"]\n    [(< number 100) \"X\"]\n    [else \"?\"]))\n", "  (cond\n \
    \   [(< number 1) \"I\"]\n    [(< number 4) \"IV\"]\n    [(< number 5) \"V\"]\n\
    \    [(< number 9) \"IX\"]\n    [else (int_to_mini_roman number-1)]))\n", "  (cond\n\
    \    [(< number 1) (error \"Invalid input: must be greater than 1\")]\n    [else\
    \ (let ([roman (make-array (floor (/ number 100)) #:element-type 'string)])\n\
    \            (let loop ([i 0])\n              (cond\n                [(< i number)\
    \ roman]\n                [else (loop (+ i 1))]\n                [else (set! roman\
    \ (string-append roman \"M\")\n                             (loop (+ i 1)))]))]))\n",
  "  (cond\n    [(< number 1) \"I\"]\n    [(< number 5) \"IV\"]\n    [(< number 10)\
    \ \"V\"]\n    [(< number 50) \"IX\"]\n    [(< number 100) \"X\"]\n    [else (int_to_mini_roman\
    \ number)])\n  )\n", "  (cond\n    [(< number 1) \"I\"]\n    [(< number 5) \"\
    V\"]\n    [(< number 10) \"X\"]\n    [(< number 50) \"L\"]\n    [(< number 100)\
    \ \"C\"]\n    [(< number 500) \"D\"]\n    [(< number 1000) \"M\"]\n    [else (int_to_mini_roman\
    \ number)])\n)\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (char->string (char->integer 'M')) (int_to_mini_roman\
    \ number))]))\n", "  (cond\n    [(< number 1) \"I\"]\n    [(< number 5) \"V\"\
    ]\n    [(< number 10) \"X\"]\n    [(< number 50) \"L\"]\n    [(< number 100) \"\
    C\"]\n    [(< number 500) \"D\"]\n    [(< number 1000) \"M\"]\n    [else (int_to_mini_roman\
    \ number)])\n)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
