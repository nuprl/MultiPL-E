name: HumanEval_159_eat
language: rkt
prompt: "#lang racket\n\n;; You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n;; but now you need to eat more carrots to complete the day's\
  \ meals.\n;; you should return an array of [ total number of eaten carrots after\
  \ your meals,\n;; the number of carrots left after your meals ]\n;; if there are\
  \ not enough remaining carrots, you will eat all remaining carrots, but will still\
  \ be hungry.\n;; Example:\n;; Variables:\n;; @number : integer\n;; the number of\
  \ carrots that you have eaten.\n;; @need : integer\n;; the number of carrots that\
  \ you need to eat.\n;; @remaining : integer\n;; the number of remaining carrots\
  \ thet exist in stock\n;; Constrain:\n;; * 0 <= number <= 1000\n;; * 0 <= need <=\
  \ 1000\n;; * 0 <= remaining <= 1000\n;; Have fun :)\n(define (eat number need remaining)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n\
  \    (check-equal? (candidate 5 6 10) (list 11 4))\n    (check-equal? (candidate\
  \ 4 8 9) (list 12 1))\n    (check-equal? (candidate 1 10 10) (list 11 0))\n    (check-equal?\
  \ (candidate 2 11 5) (list 7 0))\n    (check-equal? (candidate 4 5 7) (list 9 2))\n\
  \    (check-equal? (candidate 4 5 1) (list 5 0))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= remaining 0) (list number 0)]\n    [else (cons (-\
    \ remaining need)\n                (cons remaining (eat number (- remaining need)\
    \ remaining)))]))\n", "  (cond\n    [(= remaining 0) (list 0 0)]\n    [(= remaining\
    \ (- need number)) (list 0 number)]\n    [else (cons (- remaining (- need number))\
    \ (eat number (- need number) (remaining 0))]\n  )\n)\n", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining (- need number)) (list number 0)]\n \
    \   [else (cons (- remaining (- need number)) (eat number (- need number) (remaining\
    \ 0))]\n  )\n)\n", "  (cond\n    [(= remaining 0) (list 0 0)]\n    [(= remaining\
    \ (- need number)) (list number 0)]\n    [else (cons (- remaining (- need number))\
    \ (eat number (- need number) (remaining 0))) ]))\n", "  (cond\n    [(= remaining\
    \ 0) (list 0 0)]\n    [(= remaining (- need number)) (list 0 0)]\n    [else (cons\
    \ (- remaining (- need number)) (eat number (- need number) (remaining 0))]\n\
    \  )\n)\n", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining\
    \ (- need number)) (list number 0)]\n    [else (cons (- remaining (- need number))\
    \ (eat number (- need number) (remaining 0))]\n  )\n)\n", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining need) (list number need)]\n    [else\
    \ (cons (- remaining need) (cons number need))]))\n", "  (cond\n    [(= remaining\
    \ 0) (list number need)]\n    [else (cons (- remaining (* need number)) (eat number\
    \ (+ need 1) remaining))]\n  ))\n", "  (cond\n    [(= remaining 0) (list number\
    \ 0)]\n    [else (cons (- remaining need) (eat number (- remaining need) (- remaining\
    \ 1)))]))\n", "  (cond\n    [(= remaining 0) (list 0 0)]\n    [else (cons (- remaining\
    \ need) (cons remaining (cons number 0))\n                (cons (- remaining need)\
    \ (cons remaining (cons number 0))\n                (cons (- remaining need) (cons\
    \ remaining (cons number 0))\n                (cons (- remaining need) (cons remaining\
    \ (cons number 0))\n                (cons (- remaining need) (cons remaining (cons\
    \ number 0))\n                (cons (- remaining need) (cons remaining (cons number\
    \ 0))\n                (cons (- remaining need) (cons remaining (cons number 0))\n\
    \                (cons (- remaining need) (cons remaining (cons number 0))\n \
    \               (cons (- remaining need) (cons remaining (cons number 0))\n  \
    \              (cons (- remaining need) (cons remaining (cons number 0))\n   \
    \             (cons (- remaining need) (cons remaining (cons number 0))\n    \
    \            (cons (- remaining need) (cons remaining (cons number 0))\n     \
    \           (cons (- remaining need) (cons remaining (cons number 0))\n      \
    \          (cons (- remaining need) (cons remaining (cons number 0))\n       \
    \         (cons (- remaining need) (cons remaining (cons number 0))\n        \
    \        (cons (- remaining need) (cons remaining (cons number 0))\n         \
    \       (cons (- remaining need) (cons remaining (cons number 0))\n          \
    \      (cons (- remaining need) (cons remaining (cons number 0))\n           \
    \     (cons (- remaining need) (cons remaining (cons number 0))\n            \
    \    (cons (- remaining need) (cons remaining (cons number 0))\n             \
    \   (cons (- remaining need) (cons remaining (cons number 0))\n              \
    \  (cons (- remaining need) (cons remaining (cons number 0))\n               \
    \ (cons (- remaining need) (cons remaining (cons number 0))\n                (cons\
    \ (- remaining need) (cons remaining (cons number 0))\n                (cons (-\
    \ remaining need) (cons remaining (cons number 0))\n                (cons (- remaining\
    \ need) (cons remaining (cons number 0))\n                (cons (- remaining need)\
    \ (cons remaining (cons number 0))\n                (cons (- remaining need) (cons\
    \ remaining (cons number 0))\n                (cons (- remaining need) (cons remaining\
    \ (cons number 0))\n                (cons (- remaining need) (cons remaining (cons\
    \ number 0))\n                (cons (- remaining need) (cons remaining (cons number\
    \ 0))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining (-\
    \ number need)) (list number 0)]\n    [else (cons (- remaining (- number need))\
    \ (eat number (- number need) (- remaining (- number need))))]))\n", "  (cond\n\
    \    [(= remaining 0) (list 0 0)]\n    [(= remaining (- need number)) (list number\
    \ 0)]\n    [else (cons (- remaining (- need number)) (eat number (- need number)\
    \ (remaining 0))]\n  )\n)\n", "  (cond\n    [(= remaining 0) (list 0 0)]\n   \
    \ [(= remaining (- need number)) (list number 0)]\n    [else (cons (- remaining\
    \ (- need number)) (eat number (- need number) (remaining 0))]\n  )\n)\n", " \
    \ (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining (- need number))\
    \ (list number 0)]\n    [else (cons (- remaining (- need number)) (eat number\
    \ (- need number) (remaining 0))]\n  )\n)\n", "  (cond\n    [(= remaining 0) (list\
    \ number 0)]\n    [(= remaining (- need number)) (list number 0)]\n    [else (cons\
    \ (- remaining (- need number)) (eat number (- need number) (remaining 0)))]))\n",
  "  (cond\n    [(= remaining 0) (list 0 0)]\n    [(= remaining (- need number)) (list\
    \ number 0)]\n    [else (cons (- remaining (- need number)) (eat number (- need\
    \ number) (remaining 0))) ]))\n", "  (cond\n    [(= remaining 0) (list 0 0)]\n\
    \    [(= remaining need) (list number 0)]\n    [else (list (+ number need) (-\
    \ remaining need))]))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n  \
    \  [(= remaining (- need number)) (list number 0)]\n    [else (cons (- remaining\
    \ (- need number)) (eat number (- need number) (remaining 0))]\n  )\n)\n", " \
    \ (cond\n    [(= remaining 0) (list 0 0)]\n    [(= remaining (- need number))\
    \ (list number 0)]\n    [else (cons (- remaining (- need number)) (eat number\
    \ (- need number) (remaining 0))]\n  )\n)\n", "  (cond\n    [(= remaining 0) (list\
    \ 0 0)]\n    [(= remaining (- need number)) (list 0 number)]\n    [else (cons\
    \ (- remaining (- need number)) (eat number (- need number) (remaining 0))]\n\
    \  )\n)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
