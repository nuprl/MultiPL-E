name: HumanEval_29_filter_by_prefix
language: rkt
prompt: "#lang racket\n\n;; Filter an input list of strings only for ones that start\
  \ with a given prefix.\n(define (filter_by_prefix strings prefix)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
  \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
  \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
  \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
completions: ["  (filter (lambda (x) (string-match prefix x))\n         strings))\n",
  "  (filter (lambda (x) (string-match prefix x))\n         strings))\n", "  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n", "  (filter (lambda\
    \ (x) (string-match prefix x))\n         strings))\n", "  (filter (lambda (x)\
    \ (string-match prefix x))\n         strings))\n", "  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n", "  (filter (lambda (x) (string-match prefix\
    \ x))\n         strings))\n", "  (filter (lambda (str)\n            (string-match\
    \ prefix str))\n          strings))\n", "  (filter strings-starts-with prefix))\n",
  "  (filter (lambda (x) (string-match prefix x))\n         strings))\n", "  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n",
  "  (filter (lambda (x) (string-match prefix x))\n         strings))\n", "  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n", "  (filter (lambda\
    \ (x) (equal? (string-prefix x prefix) prefix)) strings))\n", "  (filter (lambda\
    \ (x) (string-match prefix x))\n         strings))\n", "  (filter (lambda (x)\
    \ (string-match prefix x))\n         strings))\n", "  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n", "  (filter (lambda (str)\n            (string-match\
    \ prefix str))\n          strings))\n", "  (filter (lambda (x) (string-match prefix\
    \ x))\n         strings))\n", "  (filter (lambda (x) (string-match prefix x))\n\
    \         strings))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
