name: HumanEval_132_is_nested
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes a string as input which contains\
  \ only square brackets.\n;; The function should return True if and only if there\
  \ is a valid subsequence of brackets \n;; where at least one bracket in the subsequence\
  \ is nested.\n(define (is_nested string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n\
  \    (check-equal? (candidate \"[[]]\") #t)\n    (check-equal? (candidate \"[]]]]]]][[[[[]\"\
  ) #f)\n    (check-equal? (candidate \"[][]\") #f)\n    (check-equal? (candidate\
  \ \"[]\") #f)\n    (check-equal? (candidate \"[[[[]]]]\") #t)\n    (check-equal?\
  \ (candidate \"[]]]]]]]]]]\") #f)\n    (check-equal? (candidate \"[][][[]]\") #t)\n\
  \    (check-equal? (candidate \"[[]\") #f)\n    (check-equal? (candidate \"[]]\"\
  ) #f)\n    (check-equal? (candidate \"[[]][[\") #t)\n    (check-equal? (candidate\
  \ \"[[][]]\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate\
  \ \"[[[[[[[[\") #f)\n    (check-equal? (candidate \"]]]]]]]]\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? string) #t]\n        [(equal? (first string) '(')\
    \ (is_nested (rest string))] \n        [(equal? (first string) '[') (is_nested\
    \ (rest string))] \n        [(equal? (first string) '{') (is_nested (rest string))]\
    \ \n        [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first\
    \ string) '[') (is_nested (subseq string 2))]\n        [(equal? (first string)\
    \ '(') (is_nested (subseq string 2))]\n        [else #f]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '(') (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested\
    \ (rest string))] \n    [else #f]))\n", "  (cond [(empty? string) #t]\n      \
    \  [(equal? (first string) '[') (is_nested (subseq string 1))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(')\
    \ (is_nested (rest string))] \n    [else #f]))\n", "  (cond\n    [(empty? string)\
    \ #t]\n    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr string))\n\
    \               (is_nested (string-append '[ (car string) ])))]))\n", "  (cond\
    \ [(empty? string) #t]\n        [(equal? (car string) '(') (is_nested (cdr string)))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first\
    \ string) '(') (is_nested (rest string))] \n        [(equal? (first string) '[')\
    \ (is_nested (rest string))] \n        [(equal? (first string) '{') (is_nested\
    \ (rest string))] \n        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n\
    \    [(equal? (first string) '(') (is_nested (rest string)))]\n    [else #f]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (car string) '[') (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (first string) '[') #t]\n    [else (and (equal? (first string) '[')\n      \
    \         (is_nested (substring (first string) 1 )))]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))] \n\
    \    [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string)\
    \ '(') (is_nested (cdr string)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '(') (is_nested (cdr string)))]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '(') (is_nested (rest string)))]\n    [else (is_nested (rest string))]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))] \n        [(equal? (first string) '[') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '{') (is_nested (rest string))] \n       \
    \ [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '(') (is_nested (rest string)))]\n    [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[') #t]\n    [else\
    \ (and (equal? (car string) '[')\n              (is_nested (cdr string)))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested\
    \ (rest string)))]\n    [else #f]))\n", "  (let ((brackets '())\n        (i 0))\n\
    \    (cond\n      [(empty? string) #t]\n      [(equal? (char-ref string i) '[)\
    \ #t]\n      [(char-ref string i) '[\n        (set! brackets (cons i brackets))\n\
    \        (incf i)]\n      [(char-ref string i) '(\n        (cond\n          [(empty?\
    \ brackets) #t]\n          [(equal? (char-ref (car brackets) i) '[) #t]\n    \
    \      [(char-ref (car brackets) i) '[\n            (set! brackets (cdr brackets))\n\
    \            (incf i)]\n          [(char-ref (car brackets) i) '(\n          \
    \  (cond\n              [(empty? brackets) #t]\n              [(equal? (char-ref\
    \ (car brackets) i) '[) #t]\n              [(char-ref (car brackets) i) '[\n \
    \               (set! brackets (cdr brackets))\n                (incf i)]\n  \
    \            [(char-ref (car brackets) i) '(\n                (cond\n        \
    \          [(empty? brackets) #t]\n                  [(equal? (char-ref (car brackets)\
    \ i) '[) #t]\n                  [(char-ref (car brackets) i) '[\n            \
    \        (set! brackets (cdr brackets))\n                    (incf i)]\n     \
    \             [(char-ref (car brackets) i) '(\n                    (cond\n   \
    \                   [(empty? brackets) #t]\n                      [(equal? (char-ref\
    \ (car brackets) i) '[) #t]\n                      [(char-ref (car brackets) i)\
    \ '[\n                        (set! brackets (cdr brackets))\n               \
    \         (incf i)]\n                      [(char-ref (car brackets) i) '(\n \
    \                       (cond\n                          [(empty? brackets) #t]\n\
    \                          [(equal? (char-ref (car brackets) i) '[) #t]\n    \
    \                      [(char-ref (car brackets) i) '[\n                     \
    \       (set! brackets (cdr brackets))\n                            (incf i)]\n\
    \                          [(char-ref (car brackets) i) '(\n                 \
    \           (cond\n                              [(empty? brackets) #t]\n    \
    \                          [(equal? (char-ref (car brackets) i) '[) #t]\n    \
    \                          [(char-ref (car brackets) i) '[\n                 \
    \               (set! brackets (cdr brackets))\n                             \
    \   (incf i)]\n                              [(char-ref ", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '[') #t]\n    [else (and (equal? (first\
    \ string) '[')\n               (is_nested (substring (first string) 1 )))]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))] \n        [(equal? (first string) '[') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '{') (is_nested (rest string))] \n       \
    \ [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (car string)\
    \ '[) #t]\n        [(equal? (car string) '(') #f]\n        [(equal? (car string)\
    \ '{') #f]\n        [(equal? (car string) '[') #f]\n        [else (is_nested (cdr\
    \ string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string)\
    \ '(') (is_nested (cdr string)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '[') #t]\n    [else (and (equal? (first\
    \ string) '[') (is_nested (rest string)))]))\n", "  (cond [(empty? string) #t]\n\
    \        [(equal? (first string) '(') (is_nested (rest string))] \n        [(equal?\
    \ (first string) '[') (is_nested (rest string))] \n        [(equal? (first string)\
    \ '{') (is_nested (rest string))] \n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '(') (is_nested (rest string)))]\n\
    \    [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string)\
    \ '(') (is_nested (rest string))]\n        [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n        [(equal? (first string) '{') (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n        [(equal? (first string) '(')\
    \ (is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (first string) '[') #t]\n        [(equal? (first string)\
    \ '(') #f]\n        [else (is_nested (rest string))]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '(') (is_nested (cdr string)))]\n   \
    \ [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string)\
    \ '(') (is_nested (rest string))] \n        [(equal? (first string) '[') (is_nested\
    \ (rest string))] \n        [(equal? (first string) '{') (is_nested (rest string))]\
    \ \n        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '(') (is_nested (rest string)))]\n    [else (is_nested (rest string))]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))] \n        [(equal? (first string) '[') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '{') (is_nested (rest string))] \n       \
    \ [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '(') (is_nested (rest string)))]\n    [else #f]))\n", "  (let loop ((i 0) (s\
    \ string) (result #f))\n    (cond\n      [(empty? s) result]\n      [(equal? (car\
    \ s) '(') (loop (+ i 1) (cdr s) (or (not result) (equal? (car s) '('))))]\n  \
    \    [(equal? (car s) '[') (loop (+ i 1) (cdr s) (or (not result) (equal? (car\
    \ s) '['))))]\n      [(equal? (car s) ']') (loop (+ i 1) (cdr s) (or (not result)\
    \ (equal? (car s) ']'))))]\n    result))\n", "  (cond\n    [(empty? string) #t]\n\
    \    [(equal? (first string) '(') (is_nested (rest string))] \n    [(equal? (first\
    \ string) '[') (is_nested (rest string))] \n    [(equal? (first string) '{') (is_nested\
    \ (rest string))] \n    [else #f]))\n", "  (cond [(empty? string) #t]\n      \
    \  [(equal? (first string) '(') (is_nested (rest string))] \n        [(equal?\
    \ (first string) '[') (is_nested (rest string))] \n        [(equal? (first string)\
    \ '{') (is_nested (rest string))] \n        [else #f]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '[') (is_nested (rest string))] \n       \
    \ [(equal? (first string) '{') (is_nested (rest string))] \n        [else #f]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))] \n        [(equal? (first string) '[') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '{') (is_nested (rest string))] \n       \
    \ [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string)\
    \ '(') (is_nested (rest string))] \n        [(equal? (first string) '[') (is_nested\
    \ (rest string))] \n        [(equal? (first string) '{') (is_nested (rest string))]\
    \ \n        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car\
    \ string) '(') (is_nested (cdr string)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '(') (is_nested (cdr string)))]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '(') (is_nested (rest string))\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))\n    [(equal? (first string) '{') (is_nested (rest string))\n\
    \    [else #f]]))))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '(') (is_nested (rest string)))]\n    [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested\
    \ (rest string)))]\n    [else #f]))\n", "  (cond [(empty? string) #t]\n      \
    \  [(equal? (first string) '[') (is_nested (subseq string 1))]\n        [(equal?\
    \ (first string) '(') (is_nested (subseq string 1))]\n        [else #f]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))] \n        [(equal? (first string) '[') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '{') (is_nested (rest string))] \n       \
    \ [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string)\
    \ '(') (is_nested (rest string))]\n        [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n        [(equal? (first string) '{') (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car\
    \ string) '(') (is_nested (cdr string)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '(') (is_nested (rest string)))]\n\
    \    [else (is_nested (rest string))]))\n", "  (cond\n    [(empty? string) #t]\n\
    \    [(equal? (first string) '(') (is_nested (rest string)))]\n    [else #f]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (car string) '[) #t]\n        [(equal?\
    \ (car string) '(') #f]\n        [(equal? (car string) '[') #f]\n        [else\
    \ (is_nested (cdr string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (car string) '(') (is_nested (cdr string)))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))\n\
    \    [(equal? (first string) '[') (is_nested (rest string))\n    [(equal? (first\
    \ string) '{') (is_nested (rest string))\n    [else #f]]))))\n", "  (cond\n  \
    \  [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))\n\
    \    [(equal? (first string) '[') (is_nested (rest string))\n    [(equal? (first\
    \ string) '{') (is_nested (rest string))\n    [(equal? (first string) '<) (is_nested\
    \ (rest string))\n    [(equal? (first string) '>) (is_nested (rest string))\n\
    \    [(equal? (first string) '#) (is_nested (rest string))\n    [else (is_nested\
    \ (rest string))]]))]))\n", "  (cond [(empty? string) #t]\n        [(equal? (car\
    \ string) '[) #t]\n        [else (and (equal? (car string) '[) (is_nested (cdr\
    \ string)))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '(') (is_nested (rest string)))]\n    [else #f]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\n     \
    \   [(equal? (first string) '[') (is_nested (rest string))]\n        [(equal?\
    \ (first string) '{') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))]\
    \ \n    [(equal? (first string) '[') (is_nested (rest string))] \n    [(equal?\
    \ (first string) '{') (is_nested (rest string))] \n    [else #f]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (car string) '[') (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string)\
    \ '(') (is_nested (rest string))]\n        [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n        [(equal? (first string) '{') (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car\
    \ string) '[') (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))] \n\
    \    [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (car string)\
    \ '[) #t]\n        [(equal? (car string) '(') #f]\n        [(equal? (car string)\
    \ '[') #f]\n        [(equal? (car string) ')') #f]\n        [(equal? (car string)\
    \ ']') #f]\n        [else (is_nested (cdr string))]))\n", "  (let ((brackets '())\n\
    \        (nesting '()))\n    (cond\n      [(empty? string) #t]\n      [(char=?\
    \ (car string) '[)\n       (push (car string) brackets)\n       (push '() nesting)]\n\
    \      [(char=? (car string) '(]\n       (push (car string) brackets)\n      \
    \ (push '() nesting)]\n      [(char=? (car string) '[)\n       (push (car string)\
    \ brackets)\n       (push '() nesting)]\n      [(char=? (car string) '(]\n   \
    \    (push (car string) brackets)\n       (push '() nesting)]\n      [(char=?\
    \ (car string) '[)\n       (push (car string) brackets)\n       (push '() nesting)]\n\
    \      [(char=? (car string) '(]\n       (push (car string) brackets)\n      \
    \ (push '() nesting)]\n      [(char=? (car string) '[)\n       (push (car string)\
    \ brackets)\n       (push '() nesting)]\n      [(char=? (car string) '(]\n   \
    \    (push (car string) brackets)\n       (push '() nesting)]\n      [(char=?\
    \ (car string) '[)\n       (push (car string) brackets)\n       (push '() nesting)]\n\
    \      [(char=? (car string) '(]\n       (push (car string) brackets)\n      \
    \ (push '() nesting)]\n      [(char=? (car string) '[)\n       (push (car string)\
    \ brackets)\n       (push '() nesting)]\n      [(char=? (car string) '(]\n   \
    \    (push (car string) brackets)\n       (push '() nesting)]\n      [(char=?\
    \ (car string) '[)\n       (push (car string) brackets)\n       (push '() nesting)]\n\
    \      [(char=? (car string) '(]\n       (push (car string) brackets)\n      \
    \ (push '() nesting)]\n      [(char=? (car string) '[)\n       (push (car string)\
    \ brackets)\n       (push '() nesting)]\n      [(char=? (car string) '(]\n   \
    \    (push (car string) brackets)", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (first string) '(') (is_nested (rest string))\n    [(equal? (first string) '[')\
    \ (is_nested (rest string))\n    [(equal? (first string) '{') (is_nested (rest\
    \ string))\n    [else #f]]))))\n", "  (let ((brackets '())\n        (nesting '()))\n\
    \    (cond\n      [(empty? string) #t]\n      [(char=? (car string) '[)\n    \
    \   (push (car string) brackets)]\n      [(char=? (car string) '(]\n       (push\
    \ (car string) nesting)]\n      [(char=? (car string) '[)\n       (cond\n    \
    \     [(empty? (cdr string)) #t]\n         [(char=? (car string) '(]\n       \
    \  (push (car string) nesting)\n         [(char=? (car string) '[)\n         (cond\n\
    \           [(empty? (cdr string)) #t]\n           [(char=? (car string) '(]\n\
    \           (push (car string) nesting)\n           [(char=? (car string) '[)\n\
    \           (cond\n             [(empty? (cdr string)) #t]\n             [(char=?\
    \ (car string) '(]\n             (push (car string) nesting)\n             [(char=?\
    \ (car string) '[)\n             (cond\n               [(empty? (cdr string))\
    \ #t]\n               [(char=? (car string) '(]\n               (push (car string)\
    \ nesting)\n               [(char=? (car string) '[)\n               (cond\n \
    \                [(empty? (cdr string)) #t]\n                 [(char=? (car string)\
    \ '(]\n                 (push (car string) nesting)\n                 [(char=?\
    \ (car string) '[)\n                 (cond\n                   [(empty? (cdr string))\
    \ #t]\n                   [(char=? (car string) '(]\n                   (push\
    \ (car string) nesting)\n                   [(char=? (car string) '[)\n      \
    \             (cond\n                     [(empty? (cdr string)) #t]\n       \
    \              [(char=? (car string) '(]\n                     (push (car string)\
    \ nesting)\n                     [(char=? (car string) '[)\n                 \
    \    (cond\n                       [(empty? (cdr string)) #t]\n              \
    \         [(char=? (car string) '(]\n                       (push (car string)\
    \ nesting)\n                       [(char=? (car string) '[)\n               \
    \        (cond\n                         [(empty? (cdr string)) #t", "  (cond\
    \ [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '(') (is_nested (rest string))\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))\n    [(equal? (first string) '{') (is_nested (rest string))\n\
    \    [else #f]]))))\n", "  (cond [(empty? string) #t]\n        [(equal? (first\
    \ string) '(') (is_nested (rest string))] \n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))\n\
    \    [(equal? (first string) '[') (is_nested (rest string))\n    [(equal? (first\
    \ string) '{') (is_nested (rest string))\n    [else #f]]))))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '[') (is_nested (subseq string\
    \ 2))]\n        [(equal? (first string) '(') (is_nested (subseq string 2))]\n\
    \        [(equal? (first string) '{') (is_nested (subseq string 2))]\n       \
    \ [(equal? (first string) '[') (is_nested (subseq string 3))]\n        [(equal?\
    \ (first string) '(') (is_nested (subseq string 3))]\n        [(equal? (first\
    \ string) '{') (is_nested (subseq string 3))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (car string) '(') (is_nested (cdr string)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string)\
    \ '(') (is_nested (cdr string)))]\n    [else #f]))\n", "  (let ((stack '())\n\
    \        (opens '()))\n    (cond ((null? string) #f)\n          ((char=? (car\
    \ string) '[)\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '()\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '()\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '()\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '()\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '()\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '()\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '()\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '()\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '()\n           (push (car string) stack))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '()\n           (push (car string) opens))\n          ((char=? (car\
    \ string) '[)\n           (push (car string) stack))\n          ((char=? (car ",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') #f)\n     (is_nested\
    \ (rest string))]\n    [else (is_nested (rest string))]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (car string) '[) #t]\n        [else (and (equal?\
    \ (car string) '[) (is_nested (cdr string)))]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (car string) '[) #t]\n        [(equal? (car string) '(')\
    \ #f]\n        [(equal? (car string) ')') #f]\n        [(equal? (car string) '[')\
    \ (is_nested (cdr string))]\n        [(equal? (car string) '(') (is_nested (cdr\
    \ string))]\n        [else (is_nested (cdr string))]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (first string) '[') (is_nested (rest string))]\n     \
    \   [(equal? (first string) '(') (is_nested (rest string))]\n        [else #f]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '(') (is_nested (cdr\
    \ string)))]\n    [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [(equal? (first string)\
    \ '(') (is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (car string) '[) #t]\n        [else (or (is_nested (cdr\
    \ string))\n                   (equal? (car string) '(')\n                   (equal?\
    \ (car string) '{'))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI believe\
    \ this solution is wrong. Try it with `(is_nested \"()\")`.\n<|/ c |>\n<| c |>\n\
    Yes, I believe you are right. I've edited my answer to include a solution that\
    \ is correct now.\n<|/ c |>\n<| a tags=racket,scheme |>\nA simple recursive function\
    \ will do the job:\n<code>", "  (cond [(empty? string) #t]\n        [(equal? (car\
    \ string) '(') (is_nested (cdr string)))]\n        [else #f]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (car string) '[) #t]\n        [(equal? (car string)\
    \ '(') #f]\n        [(equal? (car string) ')') #f]\n        [(equal? (car string)\
    \ '[') (is_nested (cdr string))]\n        [else (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else (is_nested (rest string))]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (car string) '(') #f)\n         (is_nested (cdr\
    \ string))]\n        [else #t]))\n", "  (cond [(empty? string) #t]\n        [(equal?\
    \ (car string) '[) #t]\n        [(equal? (car string) '(') #f]\n        [(equal?\
    \ (car string) '[') #f]\n        [else (is_nested (cdr string))]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))\n\
    \    [(equal? (first string) '[') (is_nested (rest string))\n    [(equal? (first\
    \ string) '{') (is_nested (rest string))\n    [else #f]]))))\n", "  (cond\n  \
    \  [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested (rest string)))]\n\
    \    [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string)\
    \ '(') (is_nested (rest string))] \n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '[) #t]\n    [else (and (equal? (car\
    \ string) '[) (is_nested (cdr string)))]))\n", "  (cond [(empty? string) #t]\n\
    \        [(equal? (first string) '(') (is_nested (rest string))] \n        [(equal?\
    \ (first string) '[') (is_nested (rest string))] \n        [(equal? (first string)\
    \ '{') (is_nested (rest string))] \n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '(') (is_nested (rest string)))]\n\
    \    [else (is_nested (rest string))]))\n", "  (let loop ((i 0)\n            \
    \ (result #f))\n    (cond\n      [(empty? string) #f]\n      [(equal? (char (car\
    \ string)) #\\]) (loop (add1 i) (not result))]\n      [(equal? (char (car string))\
    \ #\\]) (loop (add1 i) (result))]\n      [(equal? (char (car string)) #\\[) (loop\
    \ (add1 i) (not result))]\n      [(equal? (char (car string)) #\\[) (loop (add1\
    \ i) (result))]\n      [else (loop (add1 i) (not result))]))\n  result)\n", " \
    \ (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested\
    \ (rest string)))]\n    [else (is_nested (rest string))]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '[') (is_nested (rest string))] \n       \
    \ [(equal? (first string) '{') (is_nested (rest string))] \n        [else #f]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (car string) '(') (is_nested (cdr\
    \ string)))]\n        [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal?\
    \ (car string) '[) #t]\n        [(equal? (car string) '(') #f]\n        [(equal?\
    \ (car string) '[') #f]\n        [(equal? (car string) '{') #f]\n        [else\
    \ (is_nested (cdr string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (first string) '[') #t]\n    [else (and (equal? (first string) '[') (equal?\
    \ (rest string) ']'))]\n  )\n)\n", "  (let ((brackets '())\n        (nesting '()))\n\
    \    (cond\n      [(empty? string) #t]\n      [(char=? (car string) '[) #t]\n\
    \      [(char=? (car string) '() #t]\n      [(char=? (car string) '#() #t]\n \
    \     [(char=? (car string) '#{}) #t]\n      [(char=? (car string) '#|) #t]\n\
    \      [(char=? (car string) '#|#|) #t]\n      [(char=? (car string) '#|#|#|)\
    \ #t]\n      [(char=? (car string) '#|#|#|#|) #t]\n      [(char=? (car string)\
    \ '#|#|#|#|#|#|) #t]\n      [(char=? (car string) '#|#|#|#|#|#|#|#|) #t]\n   \
    \   [(char=? (car string) '#|#|#|#|#|#|#|#|#|#|#|) #t]\n      [(char=? (car string)\
    \ '#|#|#|#|#|#|#|#|#|#|#|#|#|#|) #t]\n      [(char=? (car string) '#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#|#",
  "  (let loop ((i 0))\n    (cond\n      [(empty? string) #t]\n      [(equal? (char-ref\
    \ string i) '(') (loop (+ i 1))]\n      [(equal? (char-ref string i) ')') (loop\
    \ (+ i 1))]\n      [else (loop (+ i 1))]\n    )))\n", "  (cond\n    [(empty? string)\
    \ #t]\n    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr string))\n\
    \               (is_nested (append '[ (car string) (cdr string))))]))\n", "  (cond\
    \ [(empty? string) #t]\n        [(equal? (first string) '[') (is_nested (subseq\
    \ string 1 -1))]\n        [else #f]))\n", "  (cond [(empty? string) #t]\n    \
    \    [(equal? (first string) '[') (is_nested (rest string))]\n        [(equal?\
    \ (first string) '(') (is_nested (rest string))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0)\n             (string string))\n    (cond\n      [(empty? string)\
    \ #t]\n      [(equal? (char-ref string i) '[) (loop (+ i 1) (string-append string\
    \ '[))\n                                (loop (+ i 1) (string-append string '(]))]\n\
    \      [else (loop (+ i 1) string)]))))\n", "  (cond\n    [(empty? string) #t]\n\
    \    [(equal? (car string) '[') (is_nested (cdr string))]\n    [else #f]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '[') #t]\n      \
    \  [(equal? (first string) '(') #f]\n        [(equal? (first string) '{') #f]\n\
    \        [(equal? (first string) '[') #f]\n        [(equal? (first string) '(')\
    \ #f]\n        [(equal? (first string) '{') #f]\n        [(equal? (first string)\
    \ '[') #f]\n        [(equal? (first string) '(') #f]\n        [(equal? (first\
    \ string) '{') #f]\n        [(equal? (first string) '[') #f]\n        [(equal?\
    \ (first string) '(') #f]\n        [(equal? (first string) '{') #f]\n        [(equal?\
    \ (first string) '[') #f]\n        [(equal? (first string) '(') #f]\n        [(equal?\
    \ (first string) '{') #f]\n        [(equal? (first string) '[') #f]\n        [(equal?\
    \ (first string) '(') #f]\n        [(equal? (first string) '{') #f]\n        [(equal?\
    \ (first string) '[') #f]\n        [(equal? (first string) '(') #f]\n        [(equal?\
    \ (first string) '{') #f]\n        [(equal? (first string) '[') #f]\n        [(equal?\
    \ (first string) '(') #f]\n        [(equal? (first string) '{') #f]\n        [(equal?\
    \ (first string) '[') #f]\n        [(equal? (first string) '(') #f]\n        [(equal?\
    \ (first string) '{') #f]\n        [(equal? (first string) '[') #f]\n        [(equal?\
    \ (first string) '(') #f]\n        [(equal? (first string) '{') #f]\n        [(equal?\
    \ (first string) '[') #f]\n        [(equal? (first string) '(') #f]\n        [(equal?\
    \ (first string) '{') #f]\n        [(equal? (first string) '[') #f]\n        [(equal?\
    \ (first string) '(') #f]\n        [(equal? (first string) '{') #f]\n        [(equal?\
    \ (first string) '[') #f]\n        [(equal? (first string) '(') #f]\n        [(equal?\
    \ (first string) ", "  (cond [(empty? string) #t]\n        [(equal? (car string)\
    \ '[') #t]\n        [(equal? (car string) '(') #f]\n        [(equal? (car string)\
    \ '{') #f]\n        [(equal? (car string) ')') #f]\n        [(equal? (car string)\
    \ '}') #f]\n        [else (is_nested (cdr string))]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (car string) '[) #t]\n        [(equal? (car string) '(')\
    \ #f]\n        [(equal? (car string) '{') #f]\n        [(equal? (car string) '[')\
    \ #f]\n        [(equal? (car string) ')') #f]\n        [(equal? (car string) '}')\
    \ #f]\n        [(equal? (car string) ']') #f]\n        [else (is_nested (cdr string))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n    [else #f]))\n", "  (cond [(empty? string) #t]\n       \
    \ [(equal? (first string) '(') (is_nested (rest string))] \n        [else (is_nested\
    \ (rest string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '(') (is_nested (rest string))\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))\n    [(equal? (first string) '{') (is_nested (rest string))\n\
    \    [else #f]]))))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '(') (is_nested (rest string)))]\n    [else (and (equal? (first string)\
    \ '[') (is_nested (rest string)))]))\n", "  (cond [(empty? string) #t]\n     \
    \   [(equal? (car string) '(') (is_nested (cdr string)))]\n        [(equal? (car\
    \ string) '[') (is_nested (cdr string)))]\n        [(equal? (car string) '{')\
    \ (is_nested (cdr string)))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (first string) '[') #t]\n        [(equal? (first string)\
    \ '(') #f]\n        [else (is_nested (rest string))]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\n     \
    \   [(equal? (first string) '[') (is_nested (rest string))]\n        [(equal?\
    \ (first string) '{') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))\n\
    \    [(equal? (first string) '[') (is_nested (rest string))\n    [(equal? (first\
    \ string) '{') (is_nested (rest string))\n    [else #f]]))))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\n\
    \        [(equal? (first string) '[') (is_nested (rest string))]\n        [(equal?\
    \ (first string) '{') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #t]\n        [(equal? (first string) '[') #t]\n        [(equal?\
    \ (first string) '(') #f]\n        [(equal? (first string) '{') #f]\n        [else\
    \ (is_nested (rest string))]))\n", "  (cond [(empty? string) #t]\n        [(equal?\
    \ (car string) '[') #t]\n        [(equal? (car string) '(') #t]\n        [else\
    \ (is_nested (cdr string))]))\n", "  (cond [(empty? string) #t]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (car string) '[') #t]\n    [else (and\
    \ (equal? (car string) '[') (equal? (cdr string) '['))\n            (is_nested\
    \ (cdr string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '(') (is_nested (rest string)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '[') #t]\n        [else (or (equal?\
    \ (first string) '(') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '(') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '(') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '(')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '(') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '(') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '(') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '(') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '(') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '(') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '(') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '(') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '(') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '(') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '(')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string",
  "  (cond [(empty? string) #t]\n        [(equal? (car string) '[) #t]\n        [(equal?\
    \ (car string) '(') #f)\n         (is_nested (cdr string))]\n        [else (is_nested\
    \ (cdr string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '(') #f)\n     (is_nested (rest string))]\n    [else (equal? (first\
    \ string) '[') #t)\n     (is_nested (rest string))]\n    [else (equal? (first\
    \ string) '{') #f)\n     (is_nested (rest string))]\n    [else #f]))\n", "  (cond\
    \ [(empty? string) #t]\n        [(equal? (car string) '[) #t]\n        [(equal?\
    \ (car string) '(') #f]\n        [(equal? (car string) ')') #f]\n        [else\
    \ (is_nested (cdr string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (car string) '(') (is_nested (cdr string)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (car string) '(') (is_nested (cdr string)))]\n\
    \        [(equal? (car string) '[') (is_nested (cdr string)))]\n        [(equal?\
    \ (car string) '{') (is_nested (cdr string)))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))] \n        [(equal? (first string) '[') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '{') (is_nested (rest string))] \n       \
    \ [else #f]))\n", "  (let ((brackets '())\n        (nesting 0))\n    (cond ((null?\
    \ string) #f)\n          ((char= (first string) '[)\n           (push (first string)\
    \ brackets)\n           (incf nesting))\n          ((char= (first string) '()\n\
    \           (push (first string) brackets)\n           (incf nesting))\n     \
    \     ((char= (first string) '[)\n           (push (first string) brackets)\n\
    \           (incf nesting))\n          ((char= (first string) '()\n          \
    \ (push (first string) brackets)\n           (incf nesting))\n          ((char=\
    \ (first string) '[)\n           (push (first string) brackets)\n           (incf\
    \ nesting))\n          ((char= (first string) '()\n           (push (first string)\
    \ brackets)\n           (incf nesting))\n          ((char= (first string) '[)\n\
    \           (push (first string) brackets)\n           (incf nesting))\n     \
    \     ((char= (first string) '()\n           (push (first string) brackets)\n\
    \           (incf nesting))\n          ((char= (first string) '[)\n          \
    \ (push (first string) brackets)\n           (incf nesting))\n          ((char=\
    \ (first string) '()\n           (push (first string) brackets)\n           (incf\
    \ nesting))\n          ((char= (first string) '[)\n           (push (first string)\
    \ brackets)\n           (incf nesting))\n          ((char= (first string) '()\n\
    \           (push (first string) brackets)\n           (incf nesting))\n     \
    \     ((char= (first string) '[)\n           (push (first string) brackets)\n\
    \           (incf nesting))\n          ((char= (first string) '()\n          \
    \ (push (first string) brackets)\n           (incf nesting))\n          ((char=\
    \ (first string) '[)\n           (push (first string) brackets)\n           (incf\
    \ nesting))\n          ((char= (first string) '()\n           (push (first string)\
    \ brackets)\n           (incf nesting))\n          ((char= (first string) '[)\n\
    \           (push (first string) brackets)\n           (incf nesting))\n     \
    \     ((char= (first string) '()\n           (push", "  (cond\n    [(empty? string)\
    \ #t]\n    [(equal? (first string) '(') (is_nested (rest string))\n    [(equal?\
    \ (first string) '[') (is_nested (rest string))\n    [(equal? (first string) '{')\
    \ (is_nested (rest string))\n    [(equal? (first string) '<) (is_nested (rest\
    \ string))\n    [(equal? (first string) '>) (is_nested (rest string))\n    [(equal?\
    \ (first string) '#) (is_nested (rest string))\n    [else (is_nested (rest string))]]))]))\n",
  "  (let loop ((i 0) (s string) (result #f))\n    (cond ((null? s) result)\n    \
    \      ((char= (first s) #\\[) (loop (+ i 1) (substring s i (+ i 1)) result))\n\
    \          (else (loop (+ i 1) (substring s i) result))))\n  result)\n", "  (cond\
    \ [(empty? string) #t]\n        [(equal? (car string) '[) #t]\n        [else (or\
    \ (equal? (car string) '[) (equal? (car string) '(') (equal? (car string) '{')\
    \ (equal? (car string) '[') (equal? (car string) '{') (equal? (car string) '(')\
    \ (equal? (car string) '{') (equal? (car string) '[') (equal? (car string) '{')\
    \ (equal? (car string) '(') (equal? (car string) '{') (equal? (car string) '[')\
    \ (equal? (car string) '{') (equal? (car string) '(') (equal? (car string) '{')\
    \ (equal? (car string) '[') (equal? (car string) '{') (equal? (car string) '(')\
    \ (equal? (car string) '{') (equal? (car string) '[') (equal? (car string) '{')\
    \ (equal? (car string) '(') (equal? (car string) '{') (equal? (car string) '[')\
    \ (equal? (car string) '{') (equal? (car string) '(') (equal? (car string) '{')\
    \ (equal? (car string) '[') (equal? (car string) '{') (equal? (car string) '(')\
    \ (equal? (car string) '{') (equal? (car string) '[') (equal? (car string) '{')\
    \ (equal? (car string) '(') (equal? (car string) '{') (equal? (car string) '[')\
    \ (equal? (car string) '{') (equal? (car string) '(') (equal? (car string) '{')\
    \ (equal? (car string) '[') (equal? (car string) '{') (equal? (car string) '(')\
    \ (equal? (car string) '{') (equal? (car string) '[') (equal? (car string) '{')\
    \ (equal? (car string) '(') (equal? (car string) '{') (equal? (car string) '[')\
    \ (equal? (car string) '{') (equal? (car string) '(') (equal? (car string) '{')\
    \ (equal? (car string) '[') (equal? (car string) '{') (equal? (car string) ",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested\
    \ (rest string))] \n    [(equal? (first string) '[') (is_nested (rest string))]\
    \ \n    [(equal? (first string) '{') (is_nested (rest string))] \n    [else #f]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '(') #f)\n     (is_nested\
    \ (cdr string))]\n    [else (is_nested (cdr string))]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))] \n\
    \    [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '(') (is_nested (rest string))\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))\n    [(equal? (first string) '{') (is_nested (rest string))\n\
    \    [(equal? (first string) '<) (is_nested (rest string))\n    [(equal? (first\
    \ string) '>) (is_nested (rest string))\n    [(equal? (first string) '#) (is_nested\
    \ (rest string))\n    [else (is_nested (rest string))]]))]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (car string) '(') (is_nested (cdr string)))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '(') (is_nested (rest string)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\
    \ \n        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '(') #f)\n     (is_nested (rest string))]\n\
    \    [else (or (equal? (first string) '[') #f)\n            (equal? (first string)\
    \ '{') #f)\n            (equal? (first string) '(') #f)\n            (equal? (first\
    \ string) '[') #f)\n            (equal? (first string) '{') #f)\n            (equal?\
    \ (first string) '(') #f)\n            (equal? (first string) '[') #f)\n     \
    \       (equal? (first string) '{') #f)\n            (equal? (first string) '(')\
    \ #f)\n            (equal? (first string) '[') #f)\n            (equal? (first\
    \ string) '{') #f)\n            (equal? (first string) '(') #f)\n            (equal?\
    \ (first string) '[') #f)\n            (equal? (first string) '{') #f)\n     \
    \       (equal? (first string) '(') #f)\n            (equal? (first string) '[')\
    \ #f)\n            (equal? (first string) '{') #f)\n            (equal? (first\
    \ string) '(') #f)\n            (equal? (first string) '[') #f)\n            (equal?\
    \ (first string) '{') #f)\n            (equal? (first string) '(') #f)\n     \
    \       (equal? (first string) '[') #f)\n            (equal? (first string) '{')\
    \ #f)\n            (equal? (first string) '(') #f)\n            (equal? (first\
    \ string) '[') #f)\n            (equal? (first string) '{') #f)\n            (equal?\
    \ (first string) '(') #f)\n            (equal? (first string) '[') #f)\n     \
    \       (equal? (first string) '{') #f)\n            (equal? (first string) '(')\
    \ #f)\n            (equal? (first string) '[') #f)\n            (equal? (first\
    \ string) '{') #f)\n            (equal? (first string) '(') #f)\n            (equal?\
    \ (first string) '[') #f)\n            (equal? (first string) '{') #f)\n     \
    \       (equal? (first string) '(') #f)\n            (equal? (first string) '[')\
    \ #f)\n            (equal? (first string) '{') #f)\n            (equal? (first\
    \ string) '(') #f)\n            (equal? (first string) '[') #f)\n            (equal?\
    \ (first string) '{') #f)\n            (equal? (first string) '(') #f)\n     \
    \       (equal? (first string) '[') #f)\n            (equal? (first ", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (car string) '(') #f)\n     (is_nested\
    \ (cdr string))]\n    [else (is_nested (cdr string))]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '[') (is_nested (rest string))] \n       \
    \ [(equal? (first string) '{') (is_nested (rest string))] \n        [else #f]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested\
    \ (rest string))] \n    [else #f]))\n", "  (cond [(empty? string) #t]\n      \
    \  [(equal? (first string) '(') (is_nested (rest string))] \n        [else #f]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[) #t]\n    [else\
    \ (and (equal? (car string) '[) (is_nested (cdr string)))]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\n\
    \        [(equal? (first string) '[') (is_nested (rest string))]\n        [(equal?\
    \ (first string) '{') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '(') #f)\n     (is_nested\
    \ (rest string))]\n    [else (is_nested (rest string))]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '[') (is_nested (rest string))] \n       \
    \ [(equal? (first string) '{') (is_nested (rest string))] \n        [else #f]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested\
    \ (rest string)))]\n    [else #f]))\n", "  (cond [(empty? string) #t]\n      \
    \  [(equal? (car string) '[') #t]\n        [(equal? (car string) '(') #f]\n  \
    \      [(equal? (car string) '{') #f]\n        [(equal? (car string) '[') #f]\n\
    \        [(equal? (car string) '(') #f]\n        [(equal? (car string) '{')\n\
    \         (and (equal? (car string) '[') (equal? (car string) '['))\n        \
    \ (and (equal? (car string) '(') (equal? (car string) '('))\n         (and (equal?\
    \ (car string) '{') (equal? (car string) '{'))\n         (and (equal? (car string)\
    \ '[') (equal? (car string) '('))\n         (and (equal? (car string) '(') (equal?\
    \ (car string) '['))\n         (and (equal? (car string) '{') (equal? (car string)\
    \ '{'))\n         (and (equal? (car string) '[') (equal? (car string) '{'))\n\
    \         (and (equal? (car string) '(') (equal? (car string) '{'))\n        \
    \ (and (equal? (car string) '{') (equal? (car string) '{'))\n         (and (equal?\
    \ (car string) '[') (equal? (car string) '['))\n         (and (equal? (car string)\
    \ '(') (equal? (car string) '('))\n         (and (equal? (car string) '{') (equal?\
    \ (car string) '{'))\n         (and (equal? (car string) '[') (equal? (car string)\
    \ '('))\n         (and (equal? (car string) '(') (equal? (car string) '['))\n\
    \         (and (equal? (car string) '{') (equal? (car string) '{'))\n        \
    \ (and (equal? (car string) '[') (equal? (car string) '{'))\n         (and (equal?\
    \ (car string) '(') (equal? (car string) '{'))\n         (and (equal? (car string)\
    \ '{') (equal? (car string) '{'))\n         (and (equal? (car string) '[') (equal?\
    \ (car string) '['))\n         (and (equal? (car string) '(') (equal? (car string)\
    \ '('))\n         (and (equal? (car ", "  (cond\n    [(empty? string) #t]\n  \
    \  [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr string))\n   \
    \            (is_nested (substring string 0 (- (length string) 1)))\n        \
    \       (is_nested (substring string 1 (- (length string) 1)))\n             \
    \  (is_nested (substring string 2 (- (length string) 1)))\n               (is_nested\
    \ (substring string 3 (- (length string) 1)))\n               (is_nested (substring\
    \ string 4 (- (length string) 1)))\n               (is_nested (substring string\
    \ 5 (- (length string) 1)))\n               (is_nested (substring string 6 (-\
    \ (length string) 1)))\n               (is_nested (substring string 7 (- (length\
    \ string) 1)))\n               (is_nested (substring string 8 (- (length string)\
    \ 1)))\n               (is_nested (substring string 9 (- (length string) 1)))\n\
    \               (is_nested (substring string 10 (- (length string) 1)))\n    \
    \           (is_nested (substring string 11 (- (length string) 1)))\n        \
    \       (is_nested (substring string 12 (- (length string) 1)))\n            \
    \   (is_nested (substring string 13 (- (length string) 1)))\n               (is_nested\
    \ (substring string 14 (- (length string) 1)))\n               (is_nested (substring\
    \ string 15 (- (length string) 1)))\n               (is_nested (substring string\
    \ 16 (- (length string) 1)))\n               (is_nested (substring string 17 (-\
    \ (length string) 1)))\n               (is_nested (substring string 18 (- (length\
    \ string) 1)))\n               (is_nested (substring string 19 (- (length string)\
    \ 1)))\n               (is_nested (substring string 20 (- (length string) 1)))\n\
    \               (is_nested (substring string 21 (- (length string) 1)))\n    \
    \           (is_nested (substring string 22 (- (length string) 1)))\n        \
    \       (is_nested (substring string 23 (- (length string) 1)))\n            \
    \   (is_nested (substring string 24 (- (length string) 1)))\n               (is_nested\
    \ (substring string 25 (- (length string) 1)))\n               (is_nested (substring\
    \ string 26 (- (length string) 1)))\n               (is_nested (substring string\
    \ 27 (- (length string) 1)))\n               (is_nested (substring string 28 (-\
    \ (length string) 1)))\n               (is_nested (substring string 29 (- (length\
    \ string) ", "  (cond [(empty? string) #t]\n        [(equal? (first string) '(')\
    \ (is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (first string) '[') #t]\n        [else (or (equal? (first\
    \ string) '(') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '<') (equal? (first string) '>') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '<') (equal? (first string)\
    \ '>') (equal? (first string) '(') (equal? (first string) '{') (equal? (first\
    \ string) '<') (equal? (first string) '>') (equal? (first string) '[') (equal?\
    \ (first string) '<') (equal? (first string) '>') (equal? (first string) '(')\
    \ (equal? (first string) '{') (equal? (first string) '<') (equal? (first string)\
    \ '>') (equal? (first string) '[') (equal? (first string) '<') (equal? (first\
    \ string) '>') (equal? (first string) '(') (equal? (first string) '{') (equal?\
    \ (first string) '<') (equal? (first string) '>') (equal? (first string) '[')\
    \ (equal? (first string) '<') (equal? (first string) '>') (equal? (first string)\
    \ '(') (equal? (first string) '{') (equal? (first string) '<') (equal? (first\
    \ string) '>') (equal? (first string) '[') (equal? (first string) '<') (equal?\
    \ (first string) '>') (equal? (first string) '(') (equal? (first string) '{')\
    \ (equal? (first string) '<') (equal? (first string) '>') (equal? (first string)\
    \ '[') (equal? (first string) '<') (equal? (first string) '>') (equal? (first\
    \ string) '(') (equal? (first string) '{') (equal? (first string) '<') (equal?\
    \ (first string) '>') (equal? (first string) '[') (equal? (first string) '<')\
    \ (equal? (first string) '>') (equal? (first string) '(') (equal? (first string)\
    \ '{') (equal? (first string) '<') (equal? (first string) '>') (equal? (first\
    \ string) '[') (equal? (first string) '<') (equal? (first string) '>') (equal?\
    \ (first string", "  (cond [(empty? string) #t]\n        [(equal? (car string)\
    \ '[) #t]\n        [else (and (equal? (car string) '[) (is_nested (cdr string)))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested\
    \ (rest string)))]\n    [else (is_nested (rest string))]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '(') (is_nested (cdr string)))]\n   \
    \ [else #f]))\n", "  (let ((stack '())\n        (open (list '())))\n    (cond\
    \ ((null? string) #f)\n          ((char=? (car string) '[)\n           (push (car\
    \ string) stack))\n          ((char=? (car string) '()\n           (push (car\
    \ string) stack)\n           (push (car string) open))\n          ((char=? (car\
    \ string) ']) \n           (if (null? (cdr stack))\n               (if (null?\
    \ (cdr open))\n                   (if (null? (cdr string))\n                 \
    \      (begin\n                         (set! stack '())\n                   \
    \      (set! open (list '()))\n                         (return #f)\n        \
    \               (begin\n                         (set! stack '())\n          \
    \               (set! open (list '()))\n                         (return #t)))\n\
    \                   (begin\n                     (set! stack '())\n          \
    \           (set! open (list '()))\n                     (return #t)))\n     \
    \          (begin\n                 (set! stack (cdr stack))\n               \
    \  (set! open (cdr open))\n                 (return #t)))\n          ((char=?\
    \ (car string) '[)\n           (begin\n             (set! stack (cons (car stack)\
    \ stack))\n             (set! open (cons (car open) open))\n             (return\
    \ #t)))\n          ((char=? (car string) '()\n           (begin\n            \
    \ (set! stack (cons (car stack) stack))\n             (set! open (cons (car open)\
    \ open))\n             (return #t)))\n          ((char=? (car string) ']) \n \
    \          (begin\n             (set! stack (cons (car stack) stack))\n      \
    \       (set! open (cons (car open) open))\n             (return #t)))\n     \
    \     ((char=? (car string) '#\\)\n           (begin\n             (set! stack\
    \ (cons (car stack) stack))\n             (set! open (cons (car open) open))\n\
    \             (return #t)))\n          ((char=? (car string) '#\\)\n         \
    \  (begin\n             (set! stack (cons (car stack) stack))\n             (set!\
    \ open (cons (car open) open))\n             (return #t)))\n          ((char=?\
    \ (car string) '#\\[)\n           (begin\n             (set! stack (cons (car ",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))] \n        [(equal? (first string) '[') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '{') (is_nested (rest string))] \n       \
    \ [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '(') (is_nested (rest string)))]\n    [else (is_nested (rest string))]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (car string) '(') (is_nested (cdr\
    \ string)))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n   \
    \ [(equal? (first string) '[') (is_nested (rest string))]\n    [else (is_nested\
    \ (rest string))]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first\
    \ string) '(') (is_nested (rest string))]\n        [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n        [(equal? (first string) '{') (is_nested\
    \ (rest string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n\
    \    [(equal? (car string) '(') (is_nested (cdr string)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[') #t]\n    [else\
    \ (and (equal? (car string) '[') (is_nested (cdr string)))]))\n", "  (cond\n \
    \   [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested (rest string))]\
    \ \n    [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first\
    \ string) '(') (is_nested (rest string))\n         (and (equal? (first string)\
    \ '(') (is_nested (rest string)))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '(') (is_nested (cdr string)))]\n   \
    \ [else #f]))\n", "  (let ((brackets '())\n        (nesting '()))\n    (cond\n\
    \      [(empty? string) #t]\n      [(char=? (car string) '[)\n       (push (car\
    \ string) brackets)]\n      [(char=? (car string) '()\n       (push (car string)\
    \ nesting)\n       (push (cdr string) nesting)]\n      [else (and (empty? brackets)\
    \ (empty? nesting))]))))\n", "  (cond [(empty? string) #t]\n        [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n        [(equal? (first string) '(')\
    \ (is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (first string) '(') (is_nested (rest string))]\n     \
    \   [(equal? (first string) '[') (is_nested (rest string))]\n        [(equal?\
    \ (first string) '{') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #t]\n        [(equal? (car string) '[) #t]\n        [else (or\
    \ (is_nested (cdr string))\n                   (is_nested (substring string 0\
    \ (- (length string) 1)))\n                   (is_nested (substring string 1 (-\
    \ (length string) 1))))]))\n", "  (cond [(empty? string) #t]\n        [(equal?\
    \ (first string) '(') (is_nested (rest string))] \n        [(equal? (first string)\
    \ '[') (is_nested (rest string))] \n        [(equal? (first string) '{') (is_nested\
    \ (rest string))] \n        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n\
    \    [(equal? (car string) '(') (is_nested (cdr string)))]\n    [else #f]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))] \n        [(equal? (first string) '[') (is_nested (rest string))]\
    \ \n        [(equal? (first string) '{') (is_nested (rest string))] \n       \
    \ [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '(') (is_nested (rest string))] \n    [(equal? (first string) '[') (is_nested\
    \ (rest string))] \n    [(equal? (first string) '{') (is_nested (rest string))]\
    \ \n    [else #f]))\n", "  (let loop ((i 0) (string string) (result #f))\n   \
    \ (if (< i string.length)\n        (if (char=? (char-code (char string i)) '[')\n\
    \            (loop (+ i 1) (substring string i (+ i 1)) result)\n            (loop\
    \ (+ i 1) (substring string i (+ i 1)) result))\n        result)))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (car string) '(') (is_nested (cdr string)))]\n\
    \    [else #f]))\n", "  (let loop ((i 0) (string string))\n    (if (or (= i 0)\
    \ (equal? string #\\))\n        #t\n        (if (equal? (char-ref string i) #\\\
    )\n            (loop (+ i 1) (substring string 0 (- i 1)))\n            (loop\
    \ (+ i 1) (substring string i (length string)))))))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (first string) '(') (is_nested (rest string))] \n    \
    \    [(equal? (first string) '[') (is_nested (rest string))] \n        [(equal?\
    \ (first string) '{') (is_nested (rest string))] \n        [else #f]))\n", " \
    \ (let loop ((i 0))\n    (if (< i string.length)\n        (let ((j (substring\
    \ string i (+ i 1)))\n              (k 0))\n          (if (equal? (char-code (char\
    \ j k)) #\\[)\n              (loop (+ i 1))\n              (loop (+ i 1))))\n\
    \        false)))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '(') (is_nested (rest string)))]\n    [(equal? (first string) '[') (is_nested\
    \ (rest string)))]\n    [(equal? (first string) '{') (is_nested (rest string)))]\n\
    \    [(equal? (first string) '(') (is_nested (rest string)))]\n    [(equal? (first\
    \ string) '[') (is_nested (rest string)))]\n    [(equal? (first string) '{') (is_nested\
    \ (rest string)))]\n    [else #f]))\n", "  (cond [(empty? string) #t]\n      \
    \  [(equal? (car string) '[) #t]\n        [else (or (is_nested (cdr string))\n\
    \                   (is_nested (car string)))]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (first string) '[') (is_nested (rest string))]\n     \
    \   [(equal? (first string) '(') (is_nested (rest string))]\n        [else #f]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (first string) '(') (is_nested (rest\
    \ string))] \n        [else (equal? (first string) '[') (is_nested (rest string))]))\n",
  "  (let ((brackets '())\n        (nesting '()))\n    (cond ((empty? string) #f)\n\
    \          ((equal? (first string) '(') #f)\n          ((equal? (first string)\
    \ '[') #f)\n          ((equal? (first string) '{') #f)\n          ((equal? (first\
    \ string) '(') (push (first string) brackets))\n          ((equal? (first string)\
    \ '[') (push (first string) brackets))\n          ((equal? (first string) '{')\n\
    \           (push (first string) brackets))\n          ((equal? (first string)\
    \ ']') (push (first string) brackets))\n          ((equal? (first string) '}')\
    \ (push (first string) brackets))\n          ((equal? (first string) '[') (push\
    \ (first string) nesting))\n          ((equal? (first string) '{') (push (first\
    \ string) nesting))\n          ((equal? (first string) ']') (push (first string)\
    \ nesting))\n          ((equal? (first string) '}') (push (first string) nesting))\n\
    \          ((equal? (first string) '(') (push (first string) nesting))\n     \
    \     ((equal? (first string) '[') (push (first string) nesting))\n          ((equal?\
    \ (first string) '{')\n           (push (first string) nesting))\n          ((equal?\
    \ (first string) ']') (push (first string) nesting))\n          ((equal? (first\
    \ string) '}') (push (first string) nesting))\n          ((equal? (first string)\
    \ '[') (push (first string) nesting))\n          ((equal? (first string) '{')\n\
    \           (push (first string) nesting))\n          ((equal? (first string)\
    \ ']') (push (first string) nesting))\n          ((equal? (first string) '}')\
    \ (push (first string) nesting))\n          ((equal? (first string) '(') (push\
    \ (first string) nesting))\n          ((equal? (first string) '[') (push (first\
    \ string) nesting))\n          ((equal? (first string) '{')\n           (push\
    \ (first string) nesting))\n          ((equal? (first string) ']') (push (first\
    \ string) nesting))\n          ((equal? (first string) '}') (push (first string)\
    \ nesting))\n          ((equal? (first string) '(') (push (first string) nesting",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '(') (is_nested\
    \ (rest string))] \n    [else #f]))\n", "  (cond [(empty? string) #t]\n      \
    \  [(equal? (first string) '(') (is_nested (rest string))] \n        [(equal?\
    \ (first string) '[') (is_nested (rest string))] \n        [(equal? (first string)\
    \ '{') (is_nested (rest string))] \n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr\
    \ string))\n               (is_nested (car string)))]))\n", "  (let loop ((i 0))\n\
    \    (if (< i string.length)\n        (let ((c (char string i))\n            \
    \  (j (char string (i + 1))))\n          (and (char=? (char c '[')\n         \
    \             (char=? (char c ']'))\n                      (char=? (char j '[')\n\
    \                      (char=? (char j ']'))))\n          (loop (+ i 1)))))\n\
    \  false)\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '(')\
    \ #f)\n     (is_nested (cdr string))]\n    [else (is_nested (cdr string))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '(') #f)\n     (is_nested\
    \ (cdr string))]\n    [else (is_nested (cdr string))]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '[') #t]\n    [else (and (equal? (first\
    \ string) '[')\n               (is_nested (substring (first string) 1 string)))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '(') (is_nested (cdr\
    \ string)))]\n    [else #f]))\n", "  (cond [(empty? string) #t]\n        [(equal?\
    \ (car string) '(') (is_nested (cdr string)))]\n        [(equal? (car string)\
    \ '[') (is_nested (cdr string)))]\n        [(equal? (car string) '{') (is_nested\
    \ (cdr string)))]\n        [else #f]))\n", "  (let loop ((i 0) (string string)\
    \ (result #f))\n    (if (or (char=? (string-ref string i) '[) (char=? (string-ref\
    \ string i) '())\n        (if (or (char=? (string-ref string (i-1)) '[) (char=?\
    \ (string-ref string (i-1)) '('))\n            (if (or (char=? (string-ref string\
    \ (i-1)) '[) (char=? (string-ref string (i-1)) '('))\n                (if (or\
    \ (char=? (string-ref string (i-1)) '[) (char=? (string-ref string (i-1)) '('))\n\
    \                    (if (or (char=? (string-ref string (i-1)) '[) (char=? (string-ref\
    \ string (i-1)) '('))\n                        (if (or (char=? (string-ref string\
    \ (i-1)) '[) (char=? (string-ref string (i-1)) '('))\n                       \
    \     (if (or (char=? (string-ref string (i-1)) '[) (char=? (string-ref string\
    \ (i-1)) '('))\n                                (if (or (char=? (string-ref string\
    \ (i-1)) '[) (char=? (string-ref string (i-1)) '('))\n                       \
    \             (if (or (char=? (string-ref string (i-1)) '[) (char=? (string-ref\
    \ string (i-1)) '('))\n                                        (if (or (char=?\
    \ (string-ref string (i-1)) '[) (char=? (string-ref string (i-1)) '('))\n    \
    \                                        (if (or (char=? (string-ref string (i-1))\
    \ '[) (char=? (string-ref string (i-1)) '('))\n                              \
    \                  (if (or (char=? (string-ref string (i-1)) '[) (char=? (string-ref\
    \ string (i-1)) '('))\n                                                    (if\
    \ (or (char=? (string-ref string (i-1)) '[) (char=? (string-ref string (i-1))\
    \ '('))\n                                                        (if (or (char=?\
    \ (string-ref string (i-1)) '[) (char=? (string-ref string (i-1)) '('))\n    \
    \                                                        (if (or (char=? (string-ref\
    \ string (i-1)) '[) (char=? (string-ref string (i-1)) '('))\n                \
    \                                                (if (or (char=? (string-ref string\
    \ (i-1)) '[) (char=? (string-ref string (i-1)) '('))\n                       \
    \                                             (if (or (char=? (string-ref string\
    \ (i-1)) '[) (char=? (string-ref string (i-1)) '('))\n                       \
    \                                                 (if (or (char=? (string-ref\
    \ string (i-1)"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
