language: rkt
name: HumanEval_85_add
results:
- exit_code: 1
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (if (even? (car lst)) (car lst) (+ (car lst) (even?\
    \ (car lst)))))\n      (add (cdr lst))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpth64kjlq.rkt:6:2: if: bad syntax\n  in: (if (null? lst) (quote\
    \ ()) (cons (if (even? (car lst)) (car lst) (+ (car lst) (even? (car lst)))))\
    \ (add (cdr lst)))\n  location...:\n   /tmp/tmpth64kjlq.rkt:6:2\n"
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (if (even? (car lst))\n          (cons (car lst) (add\
    \ (cdr lst)))\n          (cons (car lst) (add (cdr lst))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:17:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:18:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:19:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:20:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040036
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040036
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (if (even? (car lst))\n          (cons (car lst) (add\
    \ (cdr lst)))\n          (cons (car lst) (add (cdr lst))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:17:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:18:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:19:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:20:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp088sa_kq.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp088sa_kq.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp088sa_kq.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp088sa_kq.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040036
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040036
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3qig8ndh.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040036
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (if (even? (car lst))\n          (cons (car lst) (add\
    \ (cdr lst)))\n          (cons (car lst) (add (cdr lst))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:17:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:18:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:19:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:20:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (if (even? (car lst))\n          (cons (car lst) (add\
    \ (cdr lst)))\n          (cons (car lst) (add (cdr lst))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:17:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:18:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:19:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf2b_yc4.rkt:20:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp65b8y12k.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp65b8y12k.rkt:17:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp65b8y12k.rkt:18:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp65b8y12k.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0up2ypc9.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (if (even? (car lst))\n                 (car lst)\n\
    \                 (car lst))\n            (add (cdr lst)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx2bgziib.rkt:18:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx2bgziib.rkt:19:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx2bgziib.rkt:20:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx2bgziib.rkt:21:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (first lst)) (cons (first lst) (add (rest\
    \ lst)))]\n    [else (cons (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptdliqkts.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) empty]\n    [(even? (car lst)) (cons (car lst) (add (cdr lst)))]\n\
    \    [else (cons (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95whfois.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (if (null?\
    \ lst)\n      '()\n      (cons (car lst)\n            (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:16:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:17:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:18:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtejy870.rkt:19:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n(define (add lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:16:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:17:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:18:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbq14l_q.rkt:19:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040181
