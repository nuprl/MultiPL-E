name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n(define (mean_absolute_deviation\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length\
    \ numbers)))\n", "  (let ((mean 0))\n    (map (lambda (x) (+ x (/ x numbers)))\
    \ numbers)\n    (/ (apply + numbers) (length numbers))))\n", "  (let ((mean (mean\
    \ numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n\
    \       (length numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n",
  "  (define (mean xs)\n    (/ (apply + xs) (length xs)))\n  (define (mad xs mean)\n\
    \    (/ (apply + xs) (apply - (map - mean xs))))\n  (mad (map - mean numbers)\
    \ (mean numbers)))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs\
    \ numbers)) \n       (apply + (map - mean numbers)))))\n", "  (let ((mean (mean\
    \ numbers)))\n    (/ (apply + (map abs numbers)) \n       (- mean mean))))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) (- (length numbers)\
    \ 2))))\n", "  (let ((mean 0))\n    (map (lambda (x) (+ x (/ x numbers))) numbers)\n\
    \    (/ (apply + numbers) (length numbers))))\n", "  (let ((mean 0))\n    (for\
    \ ((i numbers))\n      (set! mean (+ mean i))\n      (set! mean (/ (- mean mean)\
    \ 2)))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers))\
    \ \n       (apply + (map - mean numbers)))))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length\
    \ numbers))))\n", "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n     (length numbers)))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n",
  "  (/ (apply + (map abs numbers)) \n     (apply + (map length numbers))))\n", " \
    \ (let ((mean 0))\n    (for ((x numbers))\n      (set! mean (+ mean x))\n    \
    \  (set! mean mean / numbers))\n    mean))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map abs (- numbers mean))) \n       (length numbers))))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) length))\n", "  (let\
    \ ((mean 0))\n    (for ((x numbers))\n      (set! mean (+ mean x))\n      (set!\
    \ mean (/ (- mean mean) 2)))))\n", "  (let ((mean (mean numbers)))\n    (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers))))\n", "  (let ((mean (mean numbers)))\n\
    \    (apply + (map (lambda (x) (abs (- x mean))) numbers))))\n", "  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs numbers)) (- (length numbers) 2))))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (apply\
    \ + (map - mean numbers)))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) \n       (length numbers))))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map abs numbers)) \n       (apply + (map - mean numbers)))))\n",
  "  (let ((mean (mean numbers)))\n    (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers))\
    \ \n       (apply + (map - numbers mean)))))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length\
    \ numbers))))\n", "  (let ((mean (/ (apply + numbers) (length numbers))))\n  \
    \  (/ (apply (lambda (x) (abs (- x mean)))\n              numbers)\n       mean)))\n",
  "  (/ (apply + (map abs (- numbers mean))) \n     (length numbers)))\n", "  (define\
    \ (mean x)\n    (/ (apply + x) (length x)))\n  (define (mad x mean)\n    (/ (apply\
    \ abs (- x mean)) (length x)))\n  (apply + (map (lambda (x) (mad x mean)) numbers)))\n",
  "  (let ((mean 0))\n    (for ((i numbers))\n      (set! mean (+ mean i))\n     \
    \ (/ (- mean i) numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n",
  "  (let ((mean 0))\n    (for ((i numbers))\n      (set! mean (+ mean i))\n     \
    \ (set! mean (/ (- mean mean) 2))\n      mean)))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map abs numbers)) (- (apply abs mean))))))\n", "  (/ (apply\
    \ + (map abs (- numbers mean))) (nub (map length numbers))))\n", "  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) length))\n", "  (let ((mean (mean\
    \ numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n\
    \       (length numbers))))\n", "  (/ (apply + (map abs numbers)) \n     (apply\
    \ + (map length numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs (- numbers mean))) \n       (length numbers))))\n", "  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n", "  (define (mean\
    \ x)\n    (/ (apply + x) (length x)))\n  (define (deviation x)\n    (/ (apply\
    \ - x) (length x)))\n  (define (mean x y)\n    (/ (+ x y) 2))\n  (define (deviation\
    \ x y)\n    (/ (- x y) 2))\n  (define (mean x y z)\n    (/ (+ x y z) 3))\n  (define\
    \ (deviation x y z)\n    (/ (- x y z) 3))\n  (define (mean x y z w)\n    (/ (+\
    \ x y z w) 4))\n  (define (deviation x y z w)\n    (/ (- x y z w) 4))\n  (define\
    \ (mean x y z w x)\n    (/ (+ x y z w x) 5))\n  (define (deviation x y z w x)\n\
    \    (/ (- x y z w x) 5))\n  (define (mean x y z w x y)\n    (/ (+ x y z w x y)\
    \ 6))\n  (define (deviation x y z w x y)\n    (/ (- x y z w x y) 6))\n  (define\
    \ (mean x y z w x y z)\n    (/ (+ x y z w x y z) 7))\n  (define (deviation x y\
    \ z w x y z)\n    (/ (- x y z w x y z) 7))\n  (define (mean x y z w x y z w)\n\
    \    (/ (+ x y z w x y z w) 8))\n  (define (deviation x y z w x y z w)\n    (/\
    \ (- x y z w x y z w) 8))\n  (define (mean x y z w x y z w x)\n    (/ (+ x y z\
    \ w x y z w x) 9))\n  (define (deviation x y z w x y z w x)\n    (/ (- x y z w\
    \ x y z w x) 9))\n  (define (mean x y z w x y z w x y)\n    (/ (+ x y z w x y\
    \ z w x y) 10))\n  (define (deviation x y z w x y z w x y)\n    (/ (- x y z w\
    \ x y z w x y) 10))\n  (define (mean x y z w x y z w x y z)\n    (/ (+ x y z w\
    \ x y z w x y z) 11))\n  (define (deviation x y z w x y z w x y z)\n    (/ (-\
    \ x y z w x y z w x y ", "  (let ((mean 0))\n    (map (lambda (x) (+ x (/ x numbers)))\
    \ numbers)\n    (/ (- mean numbers) (- mean numbers))))\n", "  (let ((mean (mean\
    \ numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n       (length numbers))))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n",
  "  (let ((mean (mean numbers)))\n    (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers))))\n", "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n     (length numbers)))\n", "  (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) count))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map\
    \ abs numbers)) (apply + numbers))))\n", "  (define (mean x)\n    (/ (apply +\
    \ x) (length x)))\n  (define (deviation x)\n    (/ (apply - x) (length x)))\n\
    \  (define (mean xs)\n    (/ (apply + xs) (length xs)))\n  (define (deviation\
    \ xs)\n    (/ (apply - xs) (length xs)))\n  (define (mean xs k)\n    (/ (apply\
    \ + xs (- k 1)) (length xs)))\n  (define (deviation xs k)\n    (/ (apply - xs\
    \ (- k 1)) (length xs)))\n  (define (mean xs k d)\n    (/ (apply + xs (- k d))\
    \ (length xs)))\n  (define (deviation xs k d)\n    (/ (apply - xs (- k d)) (length\
    \ xs)))\n  (define (mean xs k d m)\n    (/ (apply + xs (- k d)) (length xs)))\n\
    \  (define (deviation xs k d m)\n    (/ (apply - xs (- k d)) (length xs)))\n \
    \ (define (mean xs k d m d)\n    (/ (apply + xs (- k d)) (length xs)))\n  (define\
    \ (deviation xs k d m d)\n    (/ (apply - xs (- k d)) (length xs)))\n  (define\
    \ (mean xs k d m d m)\n    (/ (apply + xs (- k d)) (length xs)))\n  (define (deviation\
    \ xs k d m d m)\n    (/ (apply - xs (- k d)) (length xs)))\n  (define (mean xs\
    \ k d m d m d)\n    (/ (apply + xs (- k d)) (length xs)))\n  (define (deviation\
    \ xs k d m d m d)\n    (/ (apply - xs (- k d)) (length xs)))\n  (define (mean\
    \ xs k d m d m d m)\n    (/ (apply + xs (- k d)) (length xs)))\n  (define (deviation\
    \ xs k d m d m d m)\n    (/ (apply - xs (- k d)) (length xs)))\n  (define (mean\
    \ xs k d m d m d m d)\n    (/ (apply + xs (- k d)) (length xs)))\n  (define (deviation\
    \ xs k d m d m d m d)\n    (/ (apply - xs (- k d)) (length xs)))\n  (define (mean\
    \ xs k d m d m d ", "  (let ((mean 0))\n    (for ((i numbers))\n      (set! mean\
    \ (+ mean i))\n      (set! mean (/ mean numbers))\n      (set! mean 0))\n    mean))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) \n       (length numbers))))\n", "  (let ((mean 0))\n    (for ((x\
    \ numbers))\n      (set! mean (+ mean x))\n      (/ (- mean x) numbers))))\n",
  "  (let ((mean 0))\n    (for ((i numbers))\n      (set! mean (+ mean i))\n     \
    \ (set! mean (/ mean numbers))\n      (set! mean 0))\n    mean))\n", "  (let ((mean\
    \ 0))\n    (map (lambda (x)\n           (let ((diff (abs (- x mean))))\n     \
    \        (set! mean (+ mean x))\n             diff))\n         numbers)))\n",
  "  (/ (apply + (map abs (- numbers mean))) (nub (map length numbers))))\n", "  (let\
    \ ((mean 0))\n    (for ((x numbers))\n      (set! mean (+ mean x))\n      (/ (-\
    \ x mean) 2))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs\
    \ numbers)) (- mean mean))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs (- numbers mean))) \n       (length numbers))))\n", "  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) length))\n", "  (/ (apply + (map\
    \ (lambda (x) (abs (- x mean))) numbers)) length))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length\
    \ numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers))\
    \ \n       (apply + (map - mean numbers)))))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length\
    \ numbers))))\n", "  (define (mean x)\n    (/ (+ x x) (length numbers)))\n  (define\
    \ (mean x y)\n    (/ (+ x y) 2))\n  (define (mean x y z)\n    (/ (+ x y z) 3))\n\
    \  (define (mean x y z w)\n    (/ (+ x y z w) 4))\n  (define (mean x y z w x)\n\
    \    (/ (+ x y z w x) 5))\n  (define (mean x y z w x y)\n    (/ (+ x y z w x y)\
    \ 6))\n  (define (mean x y z w x y z)\n    (/ (+ x y z w x y z) 7))\n  (define\
    \ (mean x y z w x y z w)\n    (/ (+ x y z w x y z w) 8))\n  (define (mean x y\
    \ z w x y z w x)\n    (/ (+ x y z w x y z w x) 9))\n  (define (mean x y z w x\
    \ y z w x y)\n    (/ (+ x y z w x y z w x y) 10))\n  (define (mean x y z w x y\
    \ z w x y z)\n    (/ (+ x y z w x y z w x y z) 11))\n  (define (mean x y z w x\
    \ y z w x y z w)\n    (/ (+ x y z w x y z w x y z w) 12))\n  (define (mean x y\
    \ z w x y z w x y z w x)\n    (/ (+ x y z w x y z w x y z w x) 13))\n  (define\
    \ (mean x y z w x y z w x y z w x y)\n    (/ (+ x y z w x y z w x y z w x y) 14))\n\
    \  (define (mean x y z w x y z w x y z w x y z)\n    (/ (+ x y z w x y z w x y\
    \ z w x y z) 15))\n  (define (mean x y z w x y z w x y z w x y z w)\n    (/ (+\
    \ x y z w x y z w x y z w x y z w) 16))\n  (define (mean x y z w x y z w x y z\
    \ w x y z w x)\n    (/ (+ x y z w x y z w x y z w x y z w x) 17))\n  (define (mean\
    \ x y z w x y z w x y z w x ", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n",
  "  (define (mean x)\n    (/ (apply + x) (length x)))\n  (define (deviation x mean)\n\
    \    (/ (abs (- x mean)) (length x)))\n  (apply + (map (lambda (x) (deviation\
    \ x mean)) numbers)))\n</code>\n<|/ a dscore=2 |>\n<| a tags=racket,scheme |>\n\
    Here's a solution that uses only built-in functions:\n<code>", "  (let ((mean\
    \ 0))\n    (for ((i numbers))\n      (let ((diff (- i mean)))\n        (set! mean\
    \ (+ mean diff))\n        (set! diff 0)))))\n", "  (let ((mean 0))\n    (for ((x\
    \ numbers))\n      (set! mean (+ mean x))\n      (/ (- mean x) numbers))))\n",
  "  (define (mean x)\n    (/ (apply + x) (length x)))\n  (define (deviation x mean)\n\
    \    (/ (abs (- x mean)) (length x)))\n  (define (mad x mean)\n    (/ (apply +\
    \ x) 2))\n  (apply + \n    (map (lambda (x) (mad x mean)) numbers)))\n", "  (define\
    \ (mean xs)\n    (/ (apply + xs) (length xs)))\n  (define (deviation xs)\n   \
    \ (/ (apply - xs) (length xs)))\n  (define (mad xs mean)\n    (/ (apply + xs)\
    \ (apply - mean xs)))\n  (mad numbers mean))\n", "  (/ (apply + (map (lambda (x)\
    \ (abs (- x mean))) numbers)) count))\n", "  (/ (apply + (map (lambda (x) (abs\
    \ (- x mean))) numbers)) length))\n", "  (let ((mean (mean numbers)))\n    (/\
    \ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) (nub (map length numbers))))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (apply\
    \ + numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs\
    \ numbers)) (- (length numbers) 2))))\n", "  (let ((mean (mean numbers)))\n  \
    \  (/ (apply + (map abs numbers)) (- (apply abs mean))))))\n", "  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n       (length numbers))))\n", "  (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) count))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map\
    \ (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n", " \
    \ (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (-\
    \ mean mean))))\n", "  (/ (apply + (map abs numbers)) (length numbers)))\n", " \
    \ (define (mad x mean)\n    (if (null? x)\n        0\n        (+ (abs (- x mean))\
    \ (mad (cdr x) mean))))\n  (mad (apply + numbers) (apply + numbers)))\n", "  (/\
    \ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n\
    \       (length numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n\
    \       (length numbers))))\n", "  (let ((mean (mean numbers)))\n    (apply +\
    \ (map (lambda (x) (abs (- x mean))) numbers))))\n", "  (let ((mean 0))\n    (for\
    \ ((x numbers))\n      (set! mean (+ mean x))\n      (/ (- mean x) numbers))))\n",
  "  (let ((mean (mean numbers)))\n    (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers))\
    \ \n       (apply + (map - mean numbers)))))\n", "  (let ((mean 0))\n    (for\
    \ ((x numbers))\n      (set! mean (+ mean x))\n      (set! mean mean)\n      (/\
    \ (- mean x) numbers))))\n", "  (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) n))\n", "  (let ((mean 0))\n    (map (lambda (x) (+ x (* x x)))\n\
    \         numbers)\n    (/ (apply + (map - numbers mean)) (length numbers))))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n\
    \       (length numbers))))\n", "  (let ((mean (/ (reduce + numbers) (length numbers))))\n\
    \    (/ (reduce (lambda (x y) (abs (- x y))) numbers) (length numbers))))\n",
  "  (define (mean x)\n    (/ (apply + x) (length x)))\n  (define (deviation x mean)\n\
    \    (/ (abs (- x mean)) (length x)))\n  (define (mad x mean)\n    (/ (apply +\
    \ x) 2))\n  (define (mad x mean deviation)\n    (/ (apply + x) 2))\n  (define\
    \ (mad x mean deviation mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad mad\
    \ mad mad mad mad mad mad mad mad mad mad mad mad ", "  (/ (apply + (map (lambda\
    \ (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n", "  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (apply + (map\
    \ - mean numbers)))))\n", "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n     (length numbers)))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs (- numbers mean))) \n       (length numbers))))\n", "  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (apply + (map\
    \ - mean numbers)))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map\
    \ abs numbers)) \n       (apply + (map - mean numbers)))))\n", "  (let ((mean\
    \ (mean numbers)))\n    (apply + (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n\
    \       (length numbers))))\n", "  (let ((mean 0))\n    (for ((x numbers))\n \
    \     (set! mean (+ mean x))\n      (/ (- mean x) numbers))))\n", "  (let ((mean\
    \ (mean numbers)))\n    (apply + (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (define (mean x)\n    (/ (apply + x) (length x)))\n  (define (deviation x mean)\n\
    \    (/ (abs (- x mean)) (length x)))\n  (define (mad x mean)\n    (/ (apply +\
    \ x) (apply - x mean)))\n  (apply + (map (lambda (x) (deviation x mean)) numbers)))\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThank you for your answer! I really appreciate\
    \ it! I didn't know about `map` so I learned something new. I'm still a beginner\
    \ at Racket so I appreciate your help and patience.\n<|/ c |>\n<| c |>\nNo problem!\
    \ I hope you enjoy learning Racket. :)\n<|/ c |>\n<| c |>\nI do enjoy learning\
    \ Racket but I'm still a beginner at it. I really want to learn it but I'm still\
    \ a beginner at it. I'm still trying to learn it but I'm still a beginner at it.\
    \ I really want to learn it but I'm still a beginner at it. I really want to learn\
    \ it but I'm still a beginner at it. I really want to learn it but I'm still a\
    \ beginner at it. I really want to learn it but I'm still a beginner at it. I\
    \ really want to learn it but I'm still a beginner at it. I really want to learn\
    \ it but I'm still a beginner at it. I really want to learn it but I'm still a\
    \ beginner at it. I really want to learn it but I'm still a beginner at it. I\
    \ really want to learn it but I'm still a beginner at it. I really want to learn\
    \ it but I'm still a beginner at it. I really want to learn it but I'm still a\
    \ beginner at it. I really want to learn it but I'm still a beginner at it. I\
    \ really want to learn it but I'm still a beginner at it. I really want to learn\
    \ it but I'm still a beginner at it. I really want to learn it but I'm still a\
    \ beginner at it. I really want to learn it but I'm still a beginner at it. I\
    \ really want to learn it but I'm still a beginner at it. I really want to learn\
    \ it but I'm still a beginner at it. I really want to learn it but I'm still a\
    \ beginner at it. I really want to learn it but I'm still a beginner at it. I\
    \ really want to learn it but I'm still a beginner at it. I really want to learn\
    \ it but I'm still a beginner at it. I really want to learn it but I'm still a\
    \ beginner at it. I ", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs\
    \ numbers)) (- (length numbers) 2))))\n", "  (let ((mean 0))\n    (for ((i numbers))\n\
    \      (set! mean (+ mean i))\n      (set! mean mean))\n    (/ (- mean mean) numbers)))\n",
  "  (define (mean x)\n    (/ (+ x x) (length numbers)))\n  (define (deviation x mean)\n\
    \    (/ (- x mean) (length numbers)))\n  (define (mad numbers mean)\n    (/ (apply\
    \ + numbers) (apply - numbers mean)))\n  (mad (map deviation numbers mean) mean))\n",
  "  (define (mean x)\n    (/ (apply + x) (length x)))\n  (define (mad x)\n    (/\
    \ (apply (lambda (y) (abs (- x y))) x) 2))\n  (apply (lambda (x) (mad x)) numbers))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) count))\n", "  (let\
    \ ((mean 0))\n    (map (lambda (x) (+ x (/ x mean)))\n         numbers)))\n",
  "  (/ (apply + (map abs numbers)) (length numbers)))\n", "  (/ (apply + (map abs\
    \ (- numbers mean))) length))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs (- numbers mean))) \n       (length numbers))))\n", "  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n       (length\
    \ numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs (-\
    \ numbers mean))) \n       (length numbers))))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map abs (- numbers mean))) \n       (length numbers))))\n",
  "  (define (mean x)\n    (/ (apply + x) (length x)))\n  (define (mean x y)\n   \
    \ (/ (apply + x) (apply + y)))\n  (define (mean x y z)\n    (/ (apply + x) (apply\
    \ + y) (apply + z)))\n  (define (mean x y z w)\n    (/ (apply + x) (apply + y)\
    \ (apply + z) (apply + w)))\n  (define (mean x y z w x)\n    (/ (apply + x) (apply\
    \ + y) (apply + z) (apply + w) (apply + x)))\n  (define (mean x y z w x y)\n \
    \   (/ (apply + x) (apply + y) (apply + z) (apply + w) (apply + x) (apply + y)))\n\
    \  (define (mean x y z w x y z)\n    (/ (apply + x) (apply + y) (apply + z) (apply\
    \ + w) (apply + x) (apply + y) (apply + z)))\n  (define (mean x y z w x y z w)\n\
    \    (/ (apply + x) (apply + y) (apply + z) (apply + w) (apply + x) (apply + y)\
    \ (apply + z) (apply + w)))\n  (define (mean x y z w x y z w x)\n    (/ (apply\
    \ + x) (apply + y) (apply + z) (apply + w) (apply + x) (apply + y) (apply + z)\
    \ (apply + w) (apply + x)))\n  (define (mean x y z w x y z w x y)\n    (/ (apply\
    \ + x) (apply + y) (apply + z) (apply + w) (apply + x) (apply + y) (apply + z)\
    \ (apply + w) (apply + x) (apply + y)))\n  (define (mean x y z w x y z w x y z)\n\
    \    (/ (apply + x) (apply + y) (apply + z) (apply + w) (apply + x) (apply + y)\
    \ (apply + z) (apply + w) (apply + x) (apply + y) (apply + z)))\n  (define (mean\
    \ x y z w x y z w x y z w)\n    (/ (apply + x) (apply + y) (apply + z) (apply\
    \ + w) (apply + x) (apply + y) (apply + z) (apply + w) (apply + x) (apply + y)\
    \ (apply + z) (apply + w)))\n  (define (mean x y z w x y z w x y z w x)\n    (/\
    \ (apply + x", "  (let ((mean 0))\n    (map (lambda (x)\n           (let ((diff\
    \ (abs (- x mean))))\n             (set! mean (+ mean x))\n             diff))\n\
    \         numbers)))\n", "  (let ((mean 0))\n    (for ((i numbers))\n      (set!\
    \ mean (+ mean (/ i numbers)))\n      (set! i (- i mean))\n      (set! mean (/\
    \ mean numbers))\n      i)))\n", "  (define (mean xs)\n    (/ (apply + xs) (length\
    \ xs)))\n  (define (deviation x mean)\n    (abs (- x mean)))\n  (define (mad xs\
    \ mean)\n    (/ (apply + xs) (apply + map (lambda (x) (deviation x mean)) xs)))\n\
    \  (mad numbers mean))\n", "  (/ (apply + (map abs numbers)) (length numbers)))\n",
  "  (let ((mean 0))\n    (map (lambda (x) (+ x (* x x)))\n         numbers)\n   \
    \ (/ (apply + numbers) (length numbers))\n    (/ (apply - numbers (map - mean))\
    \ (length numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map\
    \ abs (- numbers mean))) \n       (length numbers))))\n", "  (let ((mean (mean\
    \ numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n       (length numbers))))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) \n       (length numbers))))\n", "  (/ (apply + (map (lambda (x) (abs\
    \ (- x mean))) numbers)) n))\n", "  (/ (apply + (map abs numbers)) \n     (apply\
    \ + (map length numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs numbers)) \n       (apply + (map - mean numbers)))))\n", "  (let\
    \ ((mean (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) \n       (length numbers))))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length\
    \ numbers))))\n", "  (let ((mean 0))\n    (map (lambda (x) (+ x (/ x numbers)))\
    \ numbers)\n    (/ (apply + numbers) (length numbers))))\n", "  (define (mean\
    \ x)\n    (/ (apply + x) (length x)))\n  (define (deviation x mean)\n    (/ (abs\
    \ (- x mean)) (length x)))\n  (define (mean x mean)\n    (/ (+ x mean) (length\
    \ x)))\n  (define (deviation x mean deviation)\n    (/ (+ x mean deviation) (length\
    \ x)))\n  (define (mean x mean deviation deviation)\n    (/ (+ x mean deviation\
    \ deviation) (length x)))\n  (define (deviation x mean deviation deviation)\n\
    \    (/ (+ x mean deviation deviation) (length x)))\n  (define (mean x mean deviation\
    \ deviation deviation)\n    (/ (+ x mean deviation deviation deviation) (length\
    \ x)))\n  (define (deviation x mean deviation deviation deviation)\n    (/ (+\
    \ x mean deviation deviation deviation) (length x)))\n  (define (mean x mean deviation\
    \ deviation deviation deviation)\n    (/ (+ x mean deviation deviation deviation\
    \ deviation) (length x)))\n  (define (deviation x mean deviation deviation deviation\
    \ deviation)\n    (/ (+ x mean deviation deviation deviation deviation) (length\
    \ x)))\n  (define (mean x mean deviation deviation deviation deviation deviation)\n\
    \    (/ (+ x mean deviation deviation deviation deviation deviation) (length x)))\n\
    \  (define (deviation x mean deviation deviation deviation deviation deviation)\n\
    \    (/ (+ x mean deviation deviation deviation deviation deviation deviation)\
    \ (length x)))\n  (define (mean x mean deviation deviation deviation deviation\
    \ deviation deviation)\n    (/ (+ x mean deviation deviation deviation deviation\
    \ deviation deviation deviation) (length x)))\n  (define (deviation x mean deviation\
    \ deviation deviation deviation deviation deviation deviation)\n    (/ (+ x mean\
    \ deviation deviation deviation deviation deviation deviation deviation deviation)\
    \ (length x)))\n  (define (mean x mean deviation deviation deviation deviation\
    \ deviation deviation deviation deviation deviation)\n    (/ (+ x mean deviation\
    \ deviation deviation deviation deviation deviation deviation deviation deviation)\
    \ (length x)))\n  (define (deviation x mean deviation deviation deviation deviation\
    \ deviation deviation deviation deviation deviation deviation)\n    (/ (+ x mean\
    \ deviation devi", "  (/ (apply + (map abs (- numbers mean))) numbers))\n", " \
    \ (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (apply\
    \ + (map - mean numbers)))))\n", "  (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) length))\n", "  (define (mean x)\n    (/ (apply + x) (length x)))\n\
    \  (define (deviation x mean)\n    (/ (abs (- x mean)) (length x)))\n  (apply\
    \ + \n    (map (lambda (x) (deviation x mean)) numbers)))\n", "  (let ((mean (/\
    \ (apply + numbers) (length numbers))))\n    (/ (apply (lambda (x) (abs (- x mean)))\n\
    \              numbers)\n       (length numbers))))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length\
    \ numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers))\
    \ \n       (- mean mean))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs numbers)) \n       (apply + (map - mean numbers)))))\n", "  (let\
    \ ((mean (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) \n       (length numbers))))\n", "  (/ (apply + (map abs numbers))\
    \ (length numbers)))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map\
    \ (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n", " \
    \ (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (apply\
    \ + (map - mean numbers)))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs numbers)) \n       (- mean mean))))\n", "  (/ (apply + (map (lambda\
    \ (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n", "  (/ (apply +\
    \ (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n", " \
    \ (/ (apply + (map abs (- numbers mean))) \n     (length numbers)))\n", "  (/\
    \ (apply + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (-\
    \ mean mean))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs\
    \ numbers)) \n       (- mean mean))))\n", "  (let ((mean 0))\n    (map (lambda\
    \ (x)\n           (let ((diff (abs (- x mean))))\n             (set! mean (+ mean\
    \ x))\n             diff))\n         numbers)))\n", "  (let ((mean (mean numbers)))\n\
    \    (apply + (map (lambda (x) (abs (- x mean))) numbers))))\n", "  (let ((mean\
    \ 0))\n    (map (lambda (x) (+ x (/ x mean))) numbers)\n    (/ (apply + numbers)\
    \ (length numbers))))\n", "  (/ (apply + (map abs (- numbers mean))) count))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (apply\
    \ + (map - numbers mean)))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs (- numbers mean))) \n       (length numbers))))\n", "  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n", "  (let ((mean (mean\
    \ numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n\
    \       (length numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs numbers)) \n       (apply + (map - mean numbers)))))\n", "  (let\
    \ ((mean 0))\n    (for ((i numbers))\n      (set! mean (+ mean i))\n      (set!\
    \ mean (/ (- mean mean) 2)))))\n", "  (let ((mean 0))\n    (map (lambda (x) (+\
    \ x (/ x numbers))) numbers)\n    (/ (apply + (map abs numbers)) numbers))))\n",
  "  (define (mean xs)\n    (/ (apply + xs) (length xs)))\n  (define (deviation xs\
    \ mean)\n    (/ (apply - xs mean) (length xs)))\n  (define (mad xs mean)\n   \
    \ (/ (apply abs (xs - mean)) (length xs)))\n  (mad numbers mean))\n", "  (/ (apply\
    \ + (map abs (- numbers mean))) \n     (length numbers)))\n", "  (define (mean\
    \ xs)\n    (/ (apply + xs) (length xs)))\n  (define (deviation xs)\n    (/ (apply\
    \ - xs) (length xs)))\n  (define (mad xs mean)\n    (/ (apply + xs) (apply - (map\
    \ - mean xs))))\n  (mad numbers mean))\n", "  (let ((mean (mean numbers)))\n \
    \   (/ (apply + (map abs numbers)) \n       (- mean mean))))\n", "  (/ (apply\
    \ + (map abs (- numbers mean))) (nub (map length numbers))))\n", "  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (apply + (map\
    \ - numbers mean)))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map\
    \ abs (- numbers mean))) \n       (length numbers))))\n", "  (/ (apply + (map\
    \ (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n", " \
    \ (let ((mean (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n\
    \       (length numbers))))\n", "  (/ (apply + (map abs numbers)) (length numbers)))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) \n       (length numbers))))\n", "  (/ (apply + (map (lambda (x) (abs\
    \ (- x mean))) numbers)) \n     (length numbers)))\n", "  (/ (apply + (map abs\
    \ numbers)) (length numbers)))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map abs numbers)) \n       (apply + (map - mean numbers)))))\n", "  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) \n       (length numbers))))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map abs numbers)) \n       (apply + (map - mean numbers)))))\n",
  "  (define (mean x)\n    (/ (apply + x) (length x)))\n  (define (mad x)\n    (/\
    \ (apply (lambda (x) (abs (- x mean))) x) \n       (length x)))\n  (apply mad\
    \ (map mad numbers)))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map\
    \ abs numbers)) \n       (apply + (map - mean numbers)))))\n", "  (let ((mean\
    \ 0))\n    (for ((i numbers))\n      (set! mean (+ mean i))\n      (set! mean\
    \ (/ mean numbers))\n      (set! mean 0))\n    mean))\n", "  (let ((mean 0))\n\
    \    (for ((x numbers))\n      (set! mean (+ mean x))\n      (set! mean (/ mean\
    \ numbers))\n      (set! mean 0))\n    mean))\n", "  (/ (apply + (map (lambda\
    \ (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n", "  (let ((mean\
    \ 0))\n    (map (lambda (x)\n           (let ((diff (abs (- x mean))))\n     \
    \        (set! mean (+ mean x))\n             diff))\n         numbers)))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) \n       (length numbers))))\n", "  (define (mean x)\n    (/ (apply\
    \ + x) (length x)))\n  (define (deviation x)\n    (/ (apply - x) (length x)))\n\
    \  (define (mean x y)\n    (/ (+ x y) 2))\n  (define (deviation x y)\n    (/ (-\
    \ x y) 2))\n  (define (mean x y z)\n    (/ (+ x y z) 3))\n  (define (deviation\
    \ x y z)\n    (/ (- x y z) 3))\n  (define (mean x y z w)\n    (/ (+ x y z w) 4))\n\
    \  (define (deviation x y z w)\n    (/ (- x y z w) 4))\n  (define (mean x y z\
    \ w x)\n    (/ (+ x y z w x) 5))\n  (define (deviation x y z w x)\n    (/ (- x\
    \ y z w x) 5))\n  (define (mean x y z w x y)\n    (/ (+ x y z w x y) 6))\n  (define\
    \ (deviation x y z w x y)\n    (/ (- x y z w x y) 6))\n  (define (mean x y z w\
    \ x y z)\n    (/ (+ x y z w x y z) 7))\n  (define (deviation x y z w x y z)\n\
    \    (/ (- x y z w x y z) 7))\n  (define (mean x y z w x y z w)\n    (/ (+ x y\
    \ z w x y z w) 8))\n  (define (deviation x y z w x y z w)\n    (/ (- x y z w x\
    \ y z w) 8))\n  (define (mean x y z w x y z w x)\n    (/ (+ x y z w x y z w x)\
    \ 9))\n  (define (deviation x y z w x y z w x)\n    (/ (- x y z w x y z w x) 9))\n\
    \  (define (mean x y z w x y z w x y)\n    (/ (+ x y z w x y z w x y) 10))\n \
    \ (define (deviation x y z w x y z w x y)\n    (/ (- x y z w x y z w x y) 10))\n\
    \  (define (mean x y z w x y z w x y z)\n    (/ (+ x y z w x y z w x y z) 11))\n\
    \  (define (deviation x y z w x y z w x y z)\n    (/ (- x y z w x y z w x y ",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) \n       (apply\
    \ + (map - mean numbers)))))\n", "  (let ((mean 0))\n    (for ((i numbers))\n\
    \      (set! mean (+ mean i))\n      (set! mean / (length numbers))\n      (/\
    \ (- mean i) mean))))\n", "  (/ (apply + (map abs (- numbers mean))) \n     (length\
    \ numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
