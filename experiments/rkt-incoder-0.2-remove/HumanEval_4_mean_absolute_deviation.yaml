name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n(define (mean_absolute_deviation\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length\
    \ numbers)))\n", "  (let ((mean 0))\n    (map (lambda (x) (+ x (/ x numbers)))\
    \ numbers)\n    (/ (apply + numbers) (length numbers))))\n", "  (let ((mean (mean\
    \ numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n\
    \       (length numbers))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n",
  "  (define (mean xs)\n    (/ (apply + xs) (length xs)))\n  (define (mad xs mean)\n\
    \    (/ (apply + xs) (apply - (map - mean xs))))\n  (mad (map - mean numbers)\
    \ (mean numbers)))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs\
    \ numbers)) \n       (apply + (map - mean numbers)))))\n", "  (let ((mean (mean\
    \ numbers)))\n    (/ (apply + (map abs numbers)) \n       (- mean mean))))\n",
  "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers)) (- (length numbers)\
    \ 2))))\n", "  (let ((mean 0))\n    (map (lambda (x) (+ x (/ x numbers))) numbers)\n\
    \    (/ (apply + numbers) (length numbers))))\n", "  (let ((mean 0))\n    (for\
    \ ((i numbers))\n      (set! mean (+ mean i))\n      (set! mean (/ (- mean mean)\
    \ 2)))))\n", "  (let ((mean (mean numbers)))\n    (/ (apply + (map abs numbers))\
    \ \n       (apply + (map - mean numbers)))))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length\
    \ numbers))))\n", "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n     (length numbers)))\n", "  (let ((mean (mean numbers)))\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n       (length numbers))))\n",
  "  (/ (apply + (map abs numbers)) \n     (apply + (map length numbers))))\n", " \
    \ (let ((mean 0))\n    (for ((x numbers))\n      (set! mean (+ mean x))\n    \
    \  (set! mean mean / numbers))\n    mean))\n", "  (let ((mean (mean numbers)))\n\
    \    (/ (apply + (map abs (- numbers mean))) \n       (length numbers))))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) length))\n", "  (let\
    \ ((mean 0))\n    (for ((x numbers))\n      (set! mean (+ mean x))\n      (set!\
    \ mean (/ (- mean mean) 2)))))\n", "  (let ((mean (mean numbers)))\n    (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
