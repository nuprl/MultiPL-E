name: HumanEval_107_even_odd_palindrome
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, return a tuple that has the\
  \ number of even and odd\n;; integer palindromes that fall within the range(1, n),\
  \ inclusive.\n;; Example 1:\n;; Explanation:\n;; Integer palindrome are 1, 2, 3.\
  \ one of them is even, and two of them are odd.\n;; Example 2:\n;; Explanation:\n\
  ;; Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
  \ and 6 of them are odd.\n;; Note:\n;; 1. 1 <= n <= 10^3\n;; 2. returned tuple has\
  \ the number of even and odd integer palindromes respectively.\n(define (even_odd_palindrome\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_palindrome))\n\
  \    (check-equal? (candidate 123) (list 8 13))\n    (check-equal? (candidate 12)\
  \ (list 4 6))\n    (check-equal? (candidate 3) (list 1 2))\n    (check-equal? (candidate\
  \ 63) (list 6 8))\n    (check-equal? (candidate 25) (list 5 6))\n    (check-equal?\
  \ (candidate 19) (list 4 6))\n    (check-equal? (candidate 9) (list 4 5))\n    (check-equal?\
  \ (candidate 1) (list 0 1))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 1) (list 1)]\n    [(even? (remainder n 2)) (cons\
    \ (- n 2) (even_odd_palindrome (- n 2)))]\n    [(odd? (remainder n 2)) (cons (-\
    \ n 2) (even_odd_palindrome (- n 2)))]\n    [else (even_odd_palindrome (- n 1))]))\n",
  "  (cond\n    [(= n 0) (list 0 0)]\n    [(even? (remainder n 2)) (list (+ 1 even?)\
    \ (+ 1 odd?))]\n    [(odd? (remainder n 2)) (list (+ 1 even?) (+ 1 odd?))]\n \
    \   [else (list 0 0)]))\n", "  (let loop ((n n) (count 0))\n    (cond ((= n 0)\
    \ (list count))\n          ((even? n) (loop (- n 1) (+ count 1)))\n          ((odd?\
    \ n) (loop (- n 1) (+ count 0)))\n          (else (loop (- n 1) count))))))\n",
  "  (cond\n    [(= n 1) (list 1)]\n    [(even? (modulo n 2)) (cons (+ 1 n) (even_odd_palindrome\
    \ (- n 1)))]\n    [(odd? (modulo n 2)) (cons (+ 1 n) (even_odd_palindrome (- n\
    \ 1)))]\n    [else (even_odd_palindrome (- n 1))]))\n", "  (cond\n    [(= n 1)\
    \ (list 1)]\n    [(even? (- n 1)) (cons (- n 1) (even_odd_palindrome (- n 1)))]\n\
    \    [(odd? (- n 1)) (cons (- n 1) (even_odd_palindrome (- n 1)))]\n    [else\
    \ (even_odd_palindrome (- n 1))]))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(even?\
    \ (modulo n 2)) (cons (+ n 1) (even_odd_palindrome (- n 1)))]\n    [(odd? (modulo\
    \ n 2)) (cons (- n 1) (even_odd_palindrome (+ n 1)))]\n    [else (even_odd_palindrome\
    \ (+ n 1))]))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(even? (- n 1)) (cons\
    \ (- n 1) (even_odd_palindrome (- n 1)))]\n    [(odd? (- n 1)) (cons (- n 1) (even_odd_palindrome\
    \ (- n 1)))]\n    [else (even_odd_palindrome (- n 1))]))\n", "  (let loop ((n\
    \ n) (count 0))\n    (cond ((= n 0) (list count))\n          ((even? n) (loop\
    \ (/ n 2) (+ count 1)))\n          ((odd? n) (loop (/ n 2) (+ count 0)))\n   \
    \       (else (loop (+ n 1) count)))))\n", "  (cond\n    [(= n 1) (list 1)]\n\
    \    [(even? (- n 1))\n     (cons (- n 1)\n           (even_odd_palindrome (-\
    \ n 1)))]\n    [(odd? (- n 1))\n     (cons (- n 1)\n           (even_odd_palindrome\
    \ (- n 1)))]\n    [else (even_odd_palindrome (- n 1))]))\n", "  (cond\n    [(=\
    \ n 1) (list 1)]\n    [(even? (remainder n 2)) (cons (+ 1 n) (even_odd_palindrome\
    \ (remainder n 2)))]\n    [(odd? (remainder n 2)) (cons (+ 1 n) (even_odd_palindrome\
    \ (remainder n 2)))]\n    [else (even_odd_palindrome (remainder n 2))]))\n", " \
    \ (cond\n    [(= n 1) (list 1)]\n    [(even? (remainder n 2)) (cons (+ 1 n) (even_odd_palindrome\
    \ (- n 1)))]\n    [(odd? (remainder n 2)) (cons (+ 1 n) (even_odd_palindrome (-\
    \ n 1)))]\n    [else (even_odd_palindrome (+ n 1))]))\n", "  (cond\n    [(= n\
    \ 1) (list 1)]\n    [(even? (modulo n 2)) (cons (- n 1) (even_odd_palindrome (-\
    \ n 1)))]\n    [(odd? (modulo n 2)) (cons (- n 1) (even_odd_palindrome (- n 1)))]\n\
    \    [else (even_odd_palindrome (- n 1))]))\n", "  (cond\n    [(= n 1) (list 1)]\n\
    \    [(odd? n) (list 1)]\n    [(even? n) (list 2)]\n    [else (even_odd_palindrome\
    \ (sub1 n))]))\n", "  (cond\n    [(< n 1) (list '() '())]\n    [(even? (- n 1))\
    \ (cons (- n 1) (even_odd_palindrome (- n 1)))]\n    [else (cons (- n 1) (even_odd_palindrome\
    \ (- n 1)))]))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(even? (remainder n\
    \ 2)) (cons (- n 2) (even_odd_palindrome (- n 1)))]\n    [(odd? (remainder n 2))\
    \ (cons (- n 1) (even_odd_palindrome (- n 1)))]\n    [else (even_odd_palindrome\
    \ (- n 1))]))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(even? (modulo n 2))\
    \ (cons (- n 1) (even_odd_palindrome (- n 1)))]\n    [(odd? (modulo n 2)) (cons\
    \ (- n 1) (even_odd_palindrome (- n 1)))]\n    [else (even_odd_palindrome (- n\
    \ 1))]))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(even? (- n 1))\n     (cons\
    \ (- n 1) (even_odd_palindrome (- n 1)))]\n    [(odd? (- n 1))\n     (cons (-\
    \ n 1) (even_odd_palindrome (- n 1)))]\n    [else (even_odd_palindrome (- n 1))]))\n",
  "  (cond\n    [(= n 1) (list 1)]\n    [(even? (modulo n 2)) (cons (- n 1) (even_odd_palindrome\
    \ (- n 1)))]\n    [(odd? (modulo n 2)) (cons (- n 1) (even_odd_palindrome (- n\
    \ 1)))]\n    [else (even_odd_palindrome (- n 1))]))\n", "  (cond\n    [(= n 1)\
    \ (list 1)]\n    [(even? (modulo n 2)) (cons (+ 1 n) (even_odd_palindrome (- n\
    \ 1)))]\n    [(odd? (modulo n 2)) (cons (+ 1 n) (even_odd_palindrome (- n 1)))]\n\
    \    [else (even_odd_palindrome (- n 1))]))\n", "  (let loop ((i 1))\n    (if\
    \ (> i n)\n        (list i 0)\n        (loop (+ i 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
