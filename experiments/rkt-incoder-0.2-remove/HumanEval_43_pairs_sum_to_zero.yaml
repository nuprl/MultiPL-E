name: HumanEval_43_pairs_sum_to_zero
language: rkt
prompt: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
  ;; it returns True if there are two distinct elements in the list that\n;; sum to\
  \ zero, and False otherwise.\n(define (pairs_sum_to_zero l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal?\
  \ (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n\
  \    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate\
  \ (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30))\
  \ #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? l) #t]\n        [(pair? (rest l)) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (and (equal? (first l) (first (rest l)))\n       \
    \            (equal? (second l) (second (rest l))))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [else (let ([a (first l)\n                  b (second l)])\n\
    \            (cond\n              [(= (+ a b) 0) true]\n              [else false]))]))\n",
  "  (cond\n    [(empty? l) false]\n    [else (and (pair? (car l)) (= (+ (car l) (first\
    \ l)) 0))\n           (pairs_sum_to_zero (cdr l))]\n   ))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(member (first l) l) false]\n    [else (and (pairs_sum_to_zero\
    \ (rest l))\n               (equal? (first l) (first (rest l))))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(= (first l) (first l)) #t]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first\
    \ (rest l))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(equal? (first l) 0) #f]\n        [else (and (equal? (first\
    \ l) (first (rest l)))\n                   (pairs_sum_to_zero (rest l)))]))\n",
  "  (cond\n    [(empty? l) true]\n    [else (let ([a (first l)\n                \
    \  b (second l)])\n            (cond\n              [(= a b) (pairs_sum_to_zero\
    \ (rest l))]\n              [(= (+ a b) 0) false]\n              [else (pairs_sum_to_zero\
    \ (rest l))]))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([head\
    \ (car l)]\n               [tail (cdr l)])\n            (cond\n              [(=\
    \ head tail) true]\n              [(= (+ head tail) 0) (pairs_sum_to_zero tail)]\n\
    \              [else false]))]))\n", "  (cond\n    [(empty? l) false]\n    [else\
    \ (let ([head (car l)])\n             (cond\n              [(= head 0) (= (cdr\
    \ l) '())]\n              [(= head (car l)) (pairs_sum_to_zero (cdr l))]\n   \
    \           [else (pairs_sum_to_zero (cdr l))]))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(member (first l) (rest l)) (pairs_sum_to_zero (rest l))]\n\
    \    [else (pairs_sum_to_zero (rest l))]\n  ))\n", "  (cond [(null? l) false]\n\
    \        [else (equal? (first l) (second l)) (pairs_sum_to_zero (rest l))]\n \
    \       [else (equal? (first l) (second (first l))) (pairs_sum_to_zero (rest l))]\n\
    \        [else (equal? (second l) (second (first l))) (pairs_sum_to_zero (rest\
    \ l))]\n        [else (equal? (second l) (second (second l))) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (equal? (second (first l)) (second (second l))) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (equal? (second (first l)) (second (second (first\
    \ l)))) (pairs_sum_to_zero (rest l))]\n        [else (equal? (second (second l))\
    \ (second (second (second l)))) (pairs_sum_to_zero (rest l))]\n        [else (equal?\
    \ (second (second l)) (second (second (second (first l))))) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (equal? (second (second (first l))) (second (second\
    \ (second (second l))))) (pairs_sum_to_zero (rest l))]\n        [else (equal?\
    \ (second (second (first l))) (second (second (second (second (first l))))))\n\
    \         (pairs_sum_to_zero (rest l))]\n        [else (equal? (second (second\
    \ (second l))) (second (second (second (second (second l))))))\n         (pairs_sum_to_zero\
    \ (rest l))]\n        [else (equal? (second (second (second (first l)))) (second\
    \ (second (second (second (second l))))))\n         (pairs_sum_to_zero (rest l))]\n\
    \        [else (equal? (second (second (second (first l)))) (second (second (second\
    \ (second (second (first l))))))\n         (pairs_sum_to_zero (rest l))]\n   \
    \     [else (equal? (second (second (second (second l)))) (second (second (second\
    \ (second (second (second l))))))\n         (pairs_sum_to_zero (rest l))]\n  \
    \      [else (equal? (second (second (second (second (first l))))) (second (second\
    \ (second (second (second (second l))))))\n         (pairs_sum_to_zero (rest l))]\n\
    \        [else (equal? (second (second (second (second (first l))))) (second (second\
    \ (second (second (second (second (first l))))))\n         (", "  (cond [(empty?\
    \ l) #t]\n        [(equal? (first l) (first (rest l))) #f]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([head (car\
    \ l)])\n             (cond\n              [(= head 0) true]\n              [(=\
    \ (- head (apply + l)) 0) true]\n              [else false]))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(member (first l) l) (pairs_sum_to_zero (rest l))]\n\
    \    [else (and (equal? (first l) (second l)) (pairs_sum_to_zero (rest l)))]))\n",
  "  (cond\n    [(empty? l) false]\n    [else (and (equal? (first l) (first l))\n\
    \               (pairs_sum_to_zero (rest l)))]))\n", "  (cond\n    [(empty? l)\
    \ false]\n    [(equal? (first l) 0) true]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first l)) #t]\n\
    \        [else (pairs_sum_to_zero (rest l))]))\n", "  (let loop ((l l) (sum 0))\n\
    \    (cond ((null? l) false)\n          ((= (first l) sum) true)\n          (else\
    \ (loop (rest l) (+ sum (first l)))\n                (loop (rest l) (+ sum (first\
    \ l)))))))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first l))\
    \ #t]\n        [else (and (equal? (first l) (first l))\n                   (pairs_sum_to_zero\
    \ (rest l)))]))\n", "  (cond [(empty? l) #t]\n        [(pair? (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n        [else (and (equal? (+ (car l) (cadr l)) 0)\n            \
    \       (pairs_sum_to_zero (cdr l)))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [else (and (pair? (car l))\n              (pairs_sum_to_zero (cdr l)))]))\n",
  "  (cond [(empty? l) empty]\n        [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n\
    \        [else (or (equal? (+ (car l) (first l)) 0)\n                  (equal?\
    \ (+ (first l) (car l)) 0))]))\n", "  (cond\n    [(empty? l) false]\n    [else\
    \ (and (equal? (first l) (first l)) (pairs_sum_to_zero (rest l)))]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(equal? (first l) (first (car l))) #f]\n        [else\
    \ (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [else\
    \ (let ([head (car l)]\n               [tail (cdr l)])\n            (cond\n  \
    \            [(= head 0) (= tail 0) true]\n              [(= head tail) (= tail\
    \ 0) false]\n              [else (pairs_sum_to_zero (cons head tail))]))]))\n",
  "  (cond\n    [(empty? l) true]\n    [else (let ([head (car l)]\n              \
    \ [tail (cdr l)])\n            (cond\n              [(= head 0) (pairs_sum_to_zero\
    \ tail)]\n              [(= tail 0) (pairs_sum_to_zero head)]\n              [else\
    \ (= (+ head tail) 0)]\n              )\n            )\n          )\n     ]\n\
    \   )\n  )\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) 0)\n     \
    \    (equal? (second l) 0)\n         (pairs_sum_to_zero (rest l))]\n        [else\
    \ #f]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first l)) #t]\n\
    \        [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n))\n",
  "  (cond\n    [(empty? l) false]\n    [else (let ([head (car l)]\n             \
    \  [tail (cdr l)])\n            (cond\n              [(= head 0) (= tail 0) (pairs_sum_to_zero\
    \ (cdr l))]\n              [(= head 0) (= tail 1) false]\n              [(= head\
    \ 1) (= tail 0) false]\n              [(= head 1) (= tail 1) (= (+ head tail)\
    \ 0)]\n              [else (pairs_sum_to_zero (cdr l))]))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(equal? (first l) (first (rest l))) #t]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first\
    \ (car l))) #f]\n        [else (pairs_sum_to_zero (cdr l))]))\n", "  (cond [(empty?\
    \ l) false]\n        [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n        [else\
    \ (= (+ (car l) (first l)) 0)]))\n", "  (cond\n    [(empty? l) false]\n    [else\
    \ (let ([head (car l)])\n             (cond\n              [(= head 0) true]\n\
    \              [(= head (car l)) (pairs_sum_to_zero (cdr l))]\n              [else\
    \ false]))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) 0) #f]\n\
    \        [else (and (equal? (first l) (first (rest l)))\n                   (pairs_sum_to_zero\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([a (first\
    \ l)\n                  b (second l)\n                  c (third l)\n        \
    \          d (fourth l)\n                  e (fifth l)\n                  f (sixth\
    \ l)\n                  g (seventh l)\n                  h (eighth l)\n      \
    \            i (ninth l)\n                  j (tenth l)\n                  k (eleventh\
    \ l)\n                  l (twelfth l)\n                  m (thirteenth l)\n  \
    \                n (fourteenth l)\n                  o (fifteenth l)\n       \
    \           p (sixteenth l)\n                  q (seventeenth l)\n           \
    \       r (eighteenth l)\n                  s (nineteenth l)\n               \
    \   t (twentieth)]\n               [sum (+ a b c d e f g h i j k l m n o p q r\
    \ s t)]\n               [zero (= (+ a b c d e f g h i j k l m n o p q r s t) 0)])\n\
    \        (and (not (= sum zero))\n             (not (= (first l) (first l)))\n\
    \             (not (= (second l) (second l)))\n             (not (= (third l)\
    \ (third l)))\n             (not (= (fourth l) (fourth l)))\n             (not\
    \ (= (fifth l) (fifth l)))\n             (not (= (sixth l) (sixth l)))\n     \
    \        (not (= (seventh l) (seventh l)))\n             (not (= (eighth l) (eighth\
    \ l)))\n             (not (= (ninth l) (ninth l)))\n             (not (= (tenth\
    \ l) (tenth l)))\n             (not (= (eleventh l) (eleventh l)))\n         \
    \    (not (= (twelfth l) (twelfth l)))\n             (not (= (thirteenth l) (thirteenth\
    \ l)))\n             (not (= (fourteenth l) (fourteenth l)))\n             (not\
    \ (= (fifteenth l) (fifteenth l)))\n             (not (= (sixteenth l) (sixteenth\
    \ l)))\n             (not (= (seventeenth l) (seventeenth l)))\n             (not\
    \ (= (eighteenth l) (eighteenth l)))\n             (not (= (nineteenth l) ", " \
    \ (cond\n    [(empty? l) false]\n    [else (let ([head (car l)])\n           \
    \  (cond\n              [(= head 0) true]\n              [(= (sum (cdr l)) 0)\
    \ (pairs_sum_to_zero (cdr l))]\n              [else false]))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [else (let ((x (car l)))\n            (cond\n   \
    \           [(= x 0) true]\n              [(= (- x 0) 0) (pairs_sum_to_zero (cdr\
    \ l))]\n              [else false]))]))\n", "  (cond [(empty? l) #t]\n       \
    \ [(equal? (first l) 0)\n         (equal? (second l) 0)\n         (false)]\n \
    \       [else\n         (equal? (first l) (second l))\n         (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([a (first\
    \ l)\n                  b (second l)])\n            (cond\n              [(= a\
    \ b) (pairs_sum_to_zero (rest l))]\n              [(= (+ a b) 0) (pairs_sum_to_zero\
    \ (rest l))]\n              [else (pairs_sum_to_zero (rest l))]))]))\n", "  (cond\
    \ [(empty? l) false]\n        [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n\
    \        [else (equal? (+ (car l) (first l)) 0)]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(member (car l) (cdr l)) (pairs_sum_to_zero (cdr l))]\n    [else\
    \ (pairs_sum_to_zero (cdr l))]\n  ))\n", "  (cond\n    [(empty? l) #t]\n    [(member\
    \ (first l) l) (pairs_sum_to_zero (rest l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(equal? (first l) (first l)) #t]\n        [else (pairs_sum_to_zero\
    \ (rest l))]\n        ))\n", "  (cond [(empty? l) false]\n        [(equal? (first\
    \ l) (first l)) (pairs_sum_to_zero (rest l))]\n        [else (or (equal? (first\
    \ l) (first l)) (equal? (first l) (rest l)))]))\n", "  (cond [(empty? l) #t]\n\
    \        [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n        [else (= (+ (car\
    \ l) (caar l)) 0)]))\n", "  (cond [(empty? l) #t]\n        [(pair? (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n        [else (and (equal? (+ (car l) (cdr l)) 0)\n             \
    \      (pairs_sum_to_zero (cdr l)))]))\n", "  (cond [(empty? l) false]\n     \
    \   [(equal? (first l) 0) true]\n        [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(equal? (first l) 0) true]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) 0)\n \
    \        (equal? (second l) 0)\n         (pairs_sum_to_zero (rest l))]\n     \
    \   [else #f]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([head (car\
    \ l)])\n             (cond\n              [(= head 0) true]\n              [(=\
    \ (pair? head) (pair? (cdr l))) false]\n              [else (pairs_sum_to_zero\
    \ (cdr l))]))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([a (first\
    \ l)\n                  b (second l)])\n            (cond\n              [(= a\
    \ b) false]\n              [(= (+ a b) 0) true]\n              [else (pairs_sum_to_zero\
    \ (rest l))]))]))\n", "  (cond\n    [(empty? l) false]\n    [(member (first l)\
    \ l) (pairs_sum_to_zero (rest l))]\n    [else (pairs_sum_to_zero (rest l))]\n\
    \  ))\n", "  (cond\n    [(empty? l) true]\n    [(equal? (first l) 0) false]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty? l) #t]\n    \
    \    [(equal? (first l) (first l)) #t]\n        [else (equal? (first l) (first\
    \ l) (pairs_sum_to_zero (rest l)))]))\n", "  (cond\n    [(empty? l) false]\n \
    \   [(member (first l) l) (pairs_sum_to_zero (rest l))]\n    [else (and (equal?\
    \ (first l) (first l)) (pairs_sum_to_zero (rest l)))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(equal? (first l) (first l)) #t]\n        [else (equal? (first\
    \ l) (first l)) (pairs_sum_to_zero (rest l))]\n))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [else (let ([head (car l)])\n             (cond\n              [(=\
    \ head 0) #t]\n              [(= (pair? head) (pair? (cdr l))) #f]\n         \
    \     [else (pairs_sum_to_zero (cdr l))]))]))\n", "  (let loop ((l l) (acc '()))\n\
    \    (cond ((null? l) acc)\n          ((null? (cdr l)) (or (null? acc) (equal?\
    \ (car l) (car acc))))\n          (else (loop (cdr l) (cons (car l) acc)))))\n",
  "  (cond [(empty? l) #t]\n        [(equal? (first l) (first l)) #t]\n        [else\
    \ (and (equal? (first l) (first l))\n                   (pairs_sum_to_zero (rest\
    \ l)))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) 0)\n      \
    \   (equal? (second l) 0)\n         (pairs_sum_to_zero (rest l))]\n        [else\n\
    \         (equal? (first l) (second l))\n         (pairs_sum_to_zero (rest l))]\n\
    \        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l)\
    \ (first l)) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty?\
    \ l) false]\n        [(pair? (rest l)) (pairs_sum_to_zero (rest l))]\n       \
    \ [else (equal? (+ (first l) (first l)) 0)]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(equal? (first l) (first l)) true]\n    [else (pairs_sum_to_zero (rest l))]\n\
    \  ))\n", "  (let loop ((l l) (sum 0))\n    (cond ((null? l) false)\n        \
    \  ((= (first l) sum) true)\n          ((= (first l) (+ sum first)) (loop (rest\
    \ l) (+ sum first)))\n          (else (loop (rest l) sum))))))\n", "  (cond\n\
    \    [(empty? l) false]\n    [else (let ([head (car l)]\n               [tail\
    \ (cdr l)])\n            (cond\n              [(= head 0) (= tail 0) true]\n \
    \             [(= head tail) (= tail (- head tail)) false]\n              [else\
    \ (pairs_sum_to_zero (cons head tail))]))]))\n", "  (let loop ((l l) (acc #t)\
    \ (i 0))\n    (cond ((null? l) acc)\n          ((= i 2) (= (first l) (second l)\
    \ acc))\n          ((= i (+ i 1)) (recur (rest l) (not acc) (+ i 1)))\n      \
    \    (else (loop (rest l) (not acc) (+ i 1))))))\n", "  (cond\n    [(empty? l)\
    \ false]\n    [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n    [else (= (+ (car\
    \ l) (cadr l)) 0)]))\n", "  (cond\n    [(empty? l) false]\n    [(pair? (car l))\
    \ (pairs_sum_to_zero (cdr l))]\n    [else (= (+ (car l) (cadr l)) 0)]))\n", " \
    \ (let loop ((l l) (acc '()))\n    (cond ((null? l) acc)\n          ((null? (cdr\
    \ l)) (or (null? acc) (equal? (car l) (car acc))))\n          (else (loop (cdr\
    \ l) (cons (car l) acc))))))\n", "  (cond [(empty? l) #t]\n        [(equal? (first\
    \ l) (first (rest l))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [else (let ((x (car l)))\n             (cond\n\
    \              [(= x 0) true]\n              [(= (+ x x) (first l)) (pairs_sum_to_zero\
    \ (rest l))]\n              [else false]))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [else (let ([head (car l)])\n            (cond\n              [(= head 0)\
    \ true]\n              [(= (pair? head) (pair? (cdr l))) false]\n            \
    \  [else (pairs_sum_to_zero (cdr l))]))]))\n", "  (cond [(empty? l) #t]\n    \
    \    [(equal? (first l) 0) #f]\n        [else (and (equal? (first l) (first (rest\
    \ l))) (pairs_sum_to_zero (rest l)))]))\n", "  (cond [(empty? l) #t]\n       \
    \ [(equal? (first l) (first (rest l))) #f]\n        [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first (rest\
    \ l))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(equal? (first l) (first l)) #t]\n        [else (and (equal?\
    \ (first l) (first l))\n                   (pairs_sum_to_zero (rest l)))]))\n",
  "  (cond [(empty? l) false]\n        [(equal? (first l) (first l)) true]\n     \
    \   [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(member (first l) l) (pairs_sum_to_zero (rest l))]\n    [else #f]))\n",
  "  (cond [(empty? l) false]\n        [(equal? (first l) (first l)) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first (rest\
    \ l))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(equal? (first l) (first (rest l))) #f]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([head (car\
    \ l)])\n             (cond\n              [(= head 0) (pairs_sum_to_zero (cdr\
    \ l))]\n              [(= head (car l)) (pairs_sum_to_zero (cdr l))]\n       \
    \       [else (pairs_sum_to_zero (cdr l))]))]))\n", "  (cond [(empty? l) false]\n\
    \        [(equal? (first l) (first l)) true]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #t]\n    [(member (first l) l) (pairs_sum_to_zero\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) false]\n    [else\
    \ (let ([head (car l)])\n             (cond\n              [(= head 0) (= (cdr\
    \ l) l)]\n              [(= head (car l)) (pairs_sum_to_zero (cdr l))]\n     \
    \         [else (pairs_sum_to_zero (cdr l))]))]))\n", "  (cond\n    [(empty? l)\
    \ false]\n    [(member (first l) l) false]\n    [else (and (pairs_sum_to_zero\
    \ (rest l))\n               (pairs_sum_to_zero (rest l)))]))\n", "  (cond [(empty?\
    \ l) false]\n        [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n        [else\
    \ (= (+ (car l) (cadr l)) 0)]))\n", "  (cond [(empty? l) #t]\n        [(equal?\
    \ (first l) (first (rest l))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(equal? (first l) 0) true]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #t]\n        [(= (first l) 0) #f]\n  \
    \      [else (and (pairs_sum_to_zero (rest l))\n                   (= (first l)\
    \ (+ (first l) (second l))))]))\n", "  (cond [(empty? l) #t]\n        [(equal?\
    \ (first l) (first l)) #t]\n        [else (and (equal? (first l) (first l)) (pairs_sum_to_zero\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([head (car\
    \ l)]\n               [tail (cdr l)])\n           (cond\n            [(= head\
    \ tail) true]\n            [else (and (pairs_sum_to_zero (cons head tail))\n \
    \                     (pairs_sum_to_zero (cons tail head)))]))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(equal? (first l) 0) true]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first\
    \ (rest l))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) true]\n    [else (let ([head (car l)])\n             (cond\n\
    \              [(= head 0) false]\n              [(= (pair? head) (pair? (cadr\
    \ l))) (pairs_sum_to_zero (cdr l))]\n              [else (pairs_sum_to_zero (cdr\
    \ l))]))]))\n", "  (cond [(null? l) false]\n        [(= (first l) (second l))\
    \ false]\n        [else (or (pairs_sum_to_zero (rest l))\n                   (pairs_sum_to_zero\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([head (car\
    \ l)])\n             (cond\n              [(= head 0) (pairs_sum_to_zero (cdr\
    \ l))]\n              [(= head (car l)) (pairs_sum_to_zero (cdr l))]\n       \
    \       [else (pairs_sum_to_zero (cdr l))]))]))\n", "  (cond\n    [(empty? l)\
    \ false]\n    [(equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n  \
    \  [else (or (equal? (first l) (first l)) (equal? (first l) (rest l)))]))\n",
  "  (cond [(null? l) false]\n        [(= (first l) (first l)) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (= (first l) (first l)) (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n\
    \    [else (= (+ (car l) (first l)) 0)]))\n", "  (cond [(empty? l) #t]\n     \
    \   [(equal? (first l) (first (rest l))) #t]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first\
    \ l)) #t]\n        [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest\
    \ l))]\n))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n\
    \          ((eq? (car l) (cadr l)) (loop (cdr l) (not acc) (i + 1))\n        \
    \   (loop (cdr l) (and acc (eq? (car l) (cadr l))) (i + 1))))\n    (loop (cdr\
    \ l) acc i)))\n", "  (cond\n    [(empty? l) false]\n    [(equal? (first l) (first\
    \ l)) (pairs_sum_to_zero (rest l))]\n    [else (equal? (first l) (first l)) (pairs_sum_to_zero\
    \ (rest l))]\n    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest\
    \ l))]\n    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n\
    \    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else\
    \ (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else (equal?\
    \ (first l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else (equal? (first\
    \ l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else (equal? (first l) (first\
    \ l)) (pairs_sum_to_zero (rest l))]\n    [else (equal? (first l) (first l)) (pairs_sum_to_zero\
    \ (rest l))]\n    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest\
    \ l))]\n    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n\
    \    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else\
    \ (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else (equal?\
    \ (first l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else (equal? (first\
    \ l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else (equal? (first l) (first\
    \ l)) (pairs_sum_to_zero (rest l))]\n    [else (equal? (first l) (first l)) (pairs_sum_to_zero\
    \ (rest l))]\n    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest\
    \ l))]\n    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n\
    \    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else\
    \ (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else (equal?\
    \ (first l) (first l)) (pairs_sum_to_zero (rest l))]\n    [else (equal? (first\
    \ l) (first l)) (pairs_sum_to_zero (rest ", "  (cond [(empty? l) #t]\n       \
    \ [(equal? (first l) 0) #f]\n        [else (and (equal? (first l) (first (rest\
    \ l))) (pairs_sum_to_zero (rest l)))]))\n", "  (cond [(empty? l) #t]\n       \
    \ [(equal? (first l) (first l)) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n",
  "  (let ((pairs (pairs l)))\n    (cond ((null? pairs) #f)\n          ((null? (cdr\
    \ pairs)) #f)\n          ((equal? (car pairs) (cadr pairs)) #t)\n          (else\
    \ (pairs_sum_to_zero (cdr pairs))))))\n", "  (cond [(empty? l) false]\n      \
    \  [(equal? (first l) (first l)) false]\n        [else (equal? (first l) (first\
    \ l))]))\n", "  (cond\n    [(empty? l) false]\n    [(member (first l) l) false]\n\
    \    [else (and (pairs_sum_to_zero (rest l))\n               (equal? (first l)\
    \ (first (rest l))))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first\
    \ l) 0) #f]\n        [else (and (equal? (first l) (first (rest l)))\n        \
    \           (pairs_sum_to_zero (rest l)))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [else (let ([a (first l)\n                  b (second l)\n              \
    \    c (pair? l)])\n            (cond\n              [(= (+ a b) 0) (pairs_sum_to_zero\
    \ l)]\n              [(= (+ a c) 0) (pairs_sum_to_zero l)]\n              [(=\
    \ (+ b c) 0) (pairs_sum_to_zero l)]\n              [else (= (+ a b) (+ a c) (+\
    \ b c))]))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) 0) #f]\n\
    \        [else (and (equal? (first l) (second l))\n                   (pairs_sum_to_zero\
    \ (rest l)))]))\n", "  (let ((sum (apply + l)))\n    (and (= (mod sum 2) 0)\n\
    \         (= (length l) 2)\n         (= (first l) 0)\n         (= (second l) 0))))\n",
  "  (cond\n    [(empty? l) false]\n    [else (and (pair? (car l))\n             \
    \ (equal? (sum (car l)) 0))\n           (pairs_sum_to_zero (cdr l))]\n   ))\n",
  "  (cond [(empty? l) false]\n        [(equal? (first l) (first l)) false]\n    \
    \    [else (equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n      \
    \  ))\n", "  (cond [(empty? l) #t]\n        [(pair? (rest l)) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (and (= (+ (car l) (cadr l)) 0)\n                \
    \   (pairs_sum_to_zero (cdr l)))]))\n", "  (cond [(empty? l) false]\n        [(equal?\
    \ (first l) (first l)) true]\n        [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond [(empty? l) #t]\n        [(equal? (first l) (first (rest l))) #t]\n   \
    \     [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [else (let ((x (car l)))\n            (cond\n              [(= x 0) true]\n\
    \              [(= (- x 1) 0) (pairs_sum_to_zero (cdr l))]\n              [else\
    \ false]))]))\n", "  (cond [(empty? l) false]\n        [(pair? (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n        [else (= (+ (car l) (first l)) 0)]))\n", "  (let loop ((l\
    \ l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n          ((= i 2) (= (first\
    \ l) (second l)))\n          (else (loop (rest l) (not (= (first l) (second l)))\
    \ (add1 i))))))\n", "  (cond [(empty? l) false]\n        [(equal? (first l) (first\
    \ l)) true]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n    [else (and (equal?\
    \ (+ (car l) (cadr l)) 0)\n               (pairs_sum_to_zero (cdr l)))]))\n",
  "  (cond\n    [(empty? l) false]\n    [else (let ([head (car l)]\n             \
    \  [tail (cdr l)])\n            (cond\n              [(= head 0) (= tail 0) true]\n\
    \              [(= head 0) (= tail 1) false]\n              [(= head 1) (= tail\
    \ 0) false]\n              [(= head 1) (= tail 1) (pairs_sum_to_zero (cons head\
    \ tail))]\n              [else false]))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [else (let ((x (car l))\n                (y (first l)))\n            (cond\n\
    \              [(= x y) true]\n              [(= (- x y) 0) (pairs_sum_to_zero\
    \ (rest l))]\n              [else false]))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n    [else (= (+ (car l) (cadr\
    \ l)) 0)]))\n", "  (cond\n    [(empty? l) false]\n    [(pair? (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n    [else (= (+ (car l) (cadr l)) 0)]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n    [else (= (+\
    \ (car l) (first l)) 0)]))\n", "  (let loop ((l l) (sum 0))\n    (cond\n     \
    \ [(empty? l) false]\n      [(equal? (first l) sum) true]\n      [else (loop (rest\
    \ l) (+ sum first))])))\n", "  (cond\n    [(empty? l) false]\n    [(equal? (first\
    \ l) (first l)) false]\n    [else (pairs_sum_to_zero (rest l))]\n  ))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(equal? (first l) (first l)) #t]\n    [else (and (equal?\
    \ (first l) (first l))\n               (pairs_sum_to_zero (rest l)))]))\n", " \
    \ (cond\n    [(empty? l) #t]\n    [else (let ([head (car l)])\n             (cond\n\
    \              [(= head 0) #t]\n              [(= head (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n              [else (let ([tail (cdr l)])\n                     \
    \  (cond\n                         [(= tail 0) #t]\n                         [(=\
    \ tail (car l)) (pairs_sum_to_zero (cons head (cdr l)))]\n                   \
    \      [else (pairs_sum_to_zero (cons head (cdr l)))])))])))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(member (first l) l) (pairs_sum_to_zero (rest l))]\n\
    \    [else (and (pair? (first l)) (pairs_sum_to_zero (rest l)))]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(equal? (first l) 0)\n         (equal? (second l)\
    \ 0)\n         (pairs_sum_to_zero (rest l))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? l) true]\n    [else (let ((x (car l))\n               (y (first\
    \ l)))\n             (cond\n              [(= x y) true]\n              [(= x\
    \ 0) false]\n              [(= y 0) false]\n              [(= (+ x y) 0) (pairs_sum_to_zero\
    \ (rest l))]\n              [else false]))]))\n", "  (cond [(empty? l) #t]\n \
    \       [(equal? (first l) 0) #f]\n        [else (and (equal? (first l) (first\
    \ (rest l)))\n                   (pairs_sum_to_zero (rest l)))]))\n", "  (let\
    \ loop ((l l) (acc '()))\n    (cond ((null? l) acc)\n          ((null? (cdr l))\
    \ (and (pair? acc) (equal? (car acc) (car l))))\n          (else (loop (cdr l)\
    \ (cons (car l) acc))))))\n", "  (cond [(empty? l) false]\n        [(= (first\
    \ l) 0) true]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n  \
    \  [(empty? l) false]\n    [else (let ([head (car l)])\n             (cond\n \
    \             [(= head 0) true]\n              [(= (pairs-sum-to-zero tail head)\
    \ 0) (pairs_sum_to_zero tail)]\n              [else false]))]))\n", "  (let loop\
    \ ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n          ((eqv? (car l)\
    \ (cadr l)) (loop (cdr l) (not acc) (i + 1))\n            (loop (cdr l) (and acc\
    \ (eqv? (car l) (cadr l))) (i + 1))))\n          (else (loop (cdr l) (and acc\
    \ (eqv? (car l) (cadr l))) (i + 1)))))\n  (not acc))\n", "  (cond ((null? l) false)\n\
    \        ((null? (cdr l)) (= (first l) 0))\n        (else (and (pair? (car l))\n\
    \                  (pairs_sum_to_zero (cdr l)))))\n  )\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(equal? (first l) (first l)) (pairs_sum_to_zero (rest l))]\n\
    \    [else (and (equal? (first l) (first l)) (pairs_sum_to_zero (rest l)))]))\n",
  "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n          ((pair?\
    \ (car l)) (loop (cdr l) (not (= 0 (+ (car l) (first l))) (incf i))))\n      \
    \    (else (loop (cdr l) (and (= i (- 2 (car l))) (= acc (+ (car l) (first l))))))))\n",
  "  (cond [(empty? l) false]\n        [(equal? (first l) (first l)) true]\n     \
    \   [else (pairs_sum_to_zero (rest l))]))\n", "  (let ((pairs (remove-duplicates\
    \ l)))\n    (cond\n      [(empty? pairs) #f]\n      [(equal? (first pairs) (first\
    \ l)) #t]\n      [else (pairs_sum_to_zero (rest pairs))])))\n", "  (cond [(null?\
    \ l) false]\n        [(= (first l) (first l)) (pairs_sum_to_zero (rest l))]\n\
    \        [else (= (first l) (first l)) (pairs_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) false]\n    [else (let ([a (first l)\n              \
    \    b (second l)\n                  c (first l)\n                  d (second\
    \ l)])\n            (cond\n              [(= a b) (= a c) (= b d)]\n         \
    \     [(= a b) (= b c) (= c d)]\n              [(= a b) (= c d) (= d 0)]\n   \
    \           [(= a b) (= c d) (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n\
    \              [(= a b) (= c d) (= d 0)]\n              [(= a b) (= c d) (= d\
    \ 0)]\n              [(= a b) (= c d) (= d 0)]\n              [(= a b) (= c d)\
    \ (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n              [(= a b) (=\
    \ c d) (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n              [(= a\
    \ b) (= c d) (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n             \
    \ [(= a b) (= c d) (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n       \
    \       [(= a b) (= c d) (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n \
    \             [(= a b) (= c d) (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n\
    \              [(= a b) (= c d) (= d 0)]\n              [(= a b) (= c d) (= d\
    \ 0)]\n              [(= a b) (= c d) (= d 0)]\n              [(= a b) (= c d)\
    \ (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n              [(= a b) (=\
    \ c d) (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n              [(= a\
    \ b) (= c d) (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n             \
    \ [(= a b) (= c d) (= d 0)]\n              [(= a b) (= c d) (= d 0)]\n       \
    \       [(= a b", "  (cond\n    [(empty? l) false]\n    [(equal? (first l) 0)\
    \ true]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty? l) #t]\n\
    \        [(equal? (first l) (first (car l))) #f]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first\
    \ l)) #t]\n        [else (equal? (first l) (first l) (pairs_sum_to_zero (rest\
    \ l)))]))\n", "  (cond [(empty? l) false]\n        [(equal? (first l) 0) true]\n\
    \        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [else (let ([pair (first l)]\n               [sum (+ (first pair) (second\
    \ pair))]\n               [rest (rest l)])\n           (cond\n             [(=\
    \ sum 0) (pairs_sum_to_zero rest)]\n             [else (pairs_sum_to_zero rest)]))]))\n",
  "  (let ((pairs (pairs l)))\n    (cond ((null? pairs) #f)\n          ((equal? (car\
    \ pairs) (cadr pairs)) #t)\n          (else (pairs_sum_to_zero (cdr pairs))))))\n",
  "  (cond\n    [(empty? l) false]\n    [(equal? (first l) 0) true]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [(equal? (first l) 0)\
    \ true]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty? l) #t]\n\
    \        [(equal? (first l) 0)\n         (equal? (second l) 0)\n         (false)\n\
    \         ]\n        [else\n         (equal? (first l) (second l))\n         (false)\n\
    \         ]\n        ))\n", "  (cond [(empty? l) #t]\n        [(equal? (first\
    \ l) (first l)) #t]\n        [else (and (equal? (first l) (first l)) (pairs_sum_to_zero\
    \ (rest l)))]))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l)\
    \ acc)\n          ((= i 2) (= (first l) (second l)))\n          (else (loop (rest\
    \ l) (or (acc) (= (first l) (second l))) (add1 i))))))\n", "  (let loop ((l l)\
    \ (acc #t) (i 0))\n    (cond ((null? l) acc)\n          ((= i 2) (or (= (first\
    \ l) (second l)) acc))\n          (else (loop (rest l) (or (= (first l) (second\
    \ l)) acc) (add1 i))))))\n", "  (cond\n    [(empty? l) false]\n    [(equal? (first\
    \ l) (first l)) false]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(equal? (first l) (first l)) #t]\n        [else (equal?\
    \ (first l) (first l) (pairs_sum_to_zero (rest l)))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [else (and (pair? (car l))\n              (equal? (sum (car l))\
    \ 0))\n           (pairs_sum_to_zero (cdr l))]\n   ))\n", "  (cond [(empty? l)\
    \ false]\n        [(pair? (rest l)) (pairs_sum_to_zero (rest l))]\n        [else\
    \ (= (+ (car l) (cadr l)) 0)]))\n", "  (cond [(empty? l) false]\n        [(= (first\
    \ l) (first l)) true]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (let\
    \ loop ((l l) (sum 0))\n    (cond ((null? l) false)\n          ((= (first l) sum)\
    \ true)\n          ((= (first l) (+ sum first)) true)\n          (else (loop (rest\
    \ l) (+ sum first)))))\n  (loop (reverse l) 0))\n", "  (cond\n    [(empty? l)\
    \ false]\n    [else (let ([head (car l)])\n             (cond\n              [(=\
    \ head 0) (= (cdr l) '())]\n              [(= head (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n              [else (pairs_sum_to_zero (cdr l))]))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [else (let ([a (first l)\n                  b (second\
    \ l)\n                  c (first l)\n                  d (second l)])\n      \
    \      (cond\n              [(= a b) (= b c) (= a d)]\n              [(= a c)\
    \ (= c d) (= a b)]\n              [(= b c) (= c d) (= b d)]\n              [(=\
    \ a b) (= b c) (= a d)]\n              [(= a c) (= c d) (= a b)]\n           \
    \   [(= b c) (= c d) (= b d)]\n              [(= a b) (= b c) (= a d)]\n     \
    \         [(= a c) (= c d) (= a b)]\n              [(= b c) (= c d) (= b d)]\n\
    \              [(= a b) (= b c) (= a d)]\n              [(= a c) (= c d) (= a\
    \ b)]\n              [(= b c) (= c d) (= b d)]\n              [(= a b) (= b c)\
    \ (= a d)]\n              [(= a c) (= c d) (= a b)]\n              [(= b c) (=\
    \ c d) (= b d)]\n              [(= a b) (= b c) (= a d)]\n              [(= a\
    \ c) (= c d) (= a b)]\n              [(= b c) (= c d) (= b d)]\n             \
    \ [(= a b) (= b c) (= a d)]\n              [(= a c) (= c d) (= a b)]\n       \
    \       [(= b c) (= c d) (= b d)]\n              [(= a b) (= b c) (= a d)]\n \
    \             [(= a c) (= c d) (= a b)]\n              [(= b c) (= c d) (= b d)]\n\
    \              [(= a b) (= b c) (= a d)]\n              [(= a c) (= c d) (= a\
    \ b)]\n              [(= b c) (= c d) (= b d)]\n              [(= a b) (= b c)\
    \ (= a d)]\n              [(= a c) (= c d) (= a b)]\n              [(= b c) (=\
    \ c d) (= b d)]\n              [(= a b) (= b c) (= a d)]\n              [(= a\
    \ c", "  (cond\n    [(empty? l) false]\n    [(member (car l) (cdr l)) (pairs_sum_to_zero\
    \ (cdr l))]\n    [else (and (pairs_sum_to_zero (cdr l)) (pairs_sum_to_zero (cdr\
    \ l)))]))\n", "  (cond\n    [(empty? l) false]\n    [(pair? (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n    [else (= 0 (+ (car l) (sum (cdr l))))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [else (and (pair? (car l))\n               (not (pairs_sum_to_zero\
    \ (cdr l))))]))\n", "  (cond\n    [(empty? l) false]\n    [(member (car l) (cdr\
    \ l)) (pairs_sum_to_zero (cdr l))]\n    [else (pairs_sum_to_zero (cdr l))]\n \
    \ ))\n", "  (cond\n    [(empty? l) false]\n    [(member (first l) l) (pairs_sum_to_zero\
    \ (rest l))]\n    [else (and (equal? (first l) (second l)) (pairs_sum_to_zero\
    \ (rest l)))]))\n", "  (cond [(empty? l) false]\n        [(equal? (first l) (first\
    \ l)) true]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n    [else (= (+\
    \ (car l) (first l)) 0)]))\n", "  (cond\n    [(empty? l) false]\n    [else (let\
    \ ((x (car l)))\n             (cond\n               [(= x 0) true]\n         \
    \      [(= (- x 1) 0) (pairs_sum_to_zero (cdr l))]\n               [else false]))]))\n",
  "  (cond [(empty? l) #t]\n        [(equal? (first l) 0) #f]\n        [else (equal?\
    \ (first l) (first (rest l)))\n               (pairs_sum_to_zero (rest l))]\n\
    \        ))\n", "  (let loop ((l l) (acc #f))\n    (cond ((null? l) acc)\n   \
    \       ((not (pair? l)) (not acc))\n          ((equal? (first l) (first acc))\
    \ (loop (rest l) (not acc)))\n          ((equal? (first l) (first acc)) (loop\
    \ (rest l) (equal? (rest l) acc)))\n          (else (loop (rest l) (equal? (rest\
    \ l) acc))))))\n", "  (cond [(empty? l) false]\n        [(pair? (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n        [else (= (+ (car l) (cadr l)) 0)]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(member (first l) l) (pairs_sum_to_zero (rest l))]\n    [else\
    \ (pairs_sum_to_zero (rest l))]\n  ))\n", "  (cond\n    [(empty? l) false]\n \
    \   [else (let ((x (car l))\n               (y (first l)))\n             (cond\n\
    \              [(= x y) true]\n              [(= (+ x y) 0) (pairs_sum_to_zero\
    \ (rest l))]\n              [else false]))]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n    [else (and (equal? (+\
    \ (car l) (cadr l)) 0)\n              (pairs_sum_to_zero (cdr l)))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [else (let ([head (car l)])\n             (cond\n\
    \              [(= head 0) true]\n              [(= (- head (car l)) 0) (pairs_sum_to_zero\
    \ (cdr l))]\n              [else false]))]))\n", "  (cond [(empty? l) false]\n\
    \        [(equal? (first l) 0) true]\n        [else (pairs_sum_to_zero (rest l))]))\n",
  "  (let loop ((l l) (acc '()))\n    (cond ((null? l) acc)\n          ((pair? (car\
    \ l)) (loop (cdr l) (cons (car l) acc)))\n          (else (loop (cdr l) (cons\
    \ (car l) acc))))))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first\
    \ (rest l))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [else (let ([head (car l)])\n             (cond\n\
    \              [(= head 0) (pairs_sum_to_zero (cdr l))]\n              [(= head\
    \ (car l)) (pairs_sum_to_zero (cdr l))]\n              [else (pairs_sum_to_zero\
    \ (cdr l))]))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first\
    \ (rest l))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(null?\
    \ l) false]\n        [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n        [else\
    \ (= 0 (+ (car l) (sum (cdr l))))]))\n", "  (cond [(empty? l) #t]\n        [(equal?\
    \ (first l) (first (rest l))) #f]\n        [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond [(empty? l) #t]\n        [(equal? (first l) 0) #f]\n        [else (and\
    \ (equal? (first l) (first (rest l)))\n                   (pairs_sum_to_zero (rest\
    \ l)))]))\n", "  (cond\n    [(empty? l) false]\n    [(pair? (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n    [else (= (+ (car l) (cadr l)) 0)]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(member (first l) l) (pairs_sum_to_zero (rest l))]\n    [else\
    \ (and (equal? (first l) (second l)) (pairs_sum_to_zero (rest l)))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [else (let ([head (car l)])\n             (cond\n\
    \              [(= head 0) true]\n              [(= (sum (cdr l)) 0) (pairs_sum_to_zero\
    \ (cdr l))]\n              [else false]))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [else (let ([head (car l)]\n                [tail (cdr l)])\n           \
    \ (cond\n              [(= head tail) true]\n              [(= (+ head tail) 0)\
    \ (pairs_sum_to_zero tail)]\n              [else false]))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(pair? (car l)) (pairs_sum_to_zero (cdr l))]\n        [else\
    \ (and (equal? (+ (car l) (cadr l)) 0)\n                  (pairs_sum_to_zero (cdr\
    \ l)))]))\n", "  (cond\n    [(empty? l) false]\n    [(pair? (car l)) (pairs_sum_to_zero\
    \ (cdr l))]\n    [else (= (+ (car l) (first l)) 0)]))\n", "  (let ((sum (apply\
    \ + l)))\n    (and (= (mod sum 2) 0)\n         (= (mod sum 3) 0)\n         (=\
    \ (mod sum 5) 0)\n         (= (mod sum 7) 0)\n         (= (mod sum 9) 0)\n   \
    \      (= (mod sum 11) 0)\n         (= (mod sum 13) 0)\n         (= (mod sum 15)\
    \ 0)\n         (= (mod sum 17) 0)\n         (= (mod sum 19) 0)\n         (= (mod\
    \ sum 21) 0)\n         (= (mod sum 23) 0)\n         (= (mod sum 25) 0)\n     \
    \    (= (mod sum 27) 0)\n         (= (mod sum 29) 0)\n         (= (mod sum 31)\
    \ 0)\n         (= (mod sum 33) 0)\n         (= (mod sum 35) 0)\n         (= (mod\
    \ sum 37) 0)\n         (= (mod sum 39) 0)\n         (= (mod sum 41) 0)\n     \
    \    (= (mod sum 43) 0)\n         (= (mod sum 45) 0)\n         (= (mod sum 47)\
    \ 0)\n         (= (mod sum 49) 0)\n         (= (mod sum 51) 0)\n         (= (mod\
    \ sum 53) 0)\n         (= (mod sum 55) 0)\n         (= (mod sum 57) 0)\n     \
    \    (= (mod sum 59) 0)\n         (= (mod sum 61) 0)\n         (= (mod sum 63)\
    \ 0)\n         (= (mod sum 65) 0)\n         (= (mod sum 67) 0)\n         (= (mod\
    \ sum 69) 0)\n         (= (mod sum 71) 0)\n         (= (mod sum 73) 0)\n     \
    \    (= (mod sum 75) 0)\n         (= (mod sum 77) 0)\n         (= (mod sum 79)\
    \ 0)\n         (= (mod sum 81) 0)\n         (= (mod sum 83) 0)\n         (= (mod\
    \ sum 85) 0)\n         (= (mod sum 87) 0)\n         (= (mod sum 89) 0)\n     \
    \    (= (mod sum 91) 0)\n         (= (mod sum 93) 0)\n         (= (mod sum 95)\
    \ 0)\n         (= (mod sum 97) 0)\n         (= (mod sum 99) 0)\n         (= (mod\
    \ sum 101) 0)\n         (= (mod sum 103) 0)\n         (= (mod sum 105) 0)\n  \
    \       (= (mod sum 107) 0)\n         (= (mod sum 109) 0)\n         (= (mod sum\
    \ 111) 0)\n         (", "  (let loop ((l l) (acc #t) (i 0))\n    (if (null? l)\n\
    \        acc\n        (loop (cdr l) (if (= 0 (+ (car l) acc)) #t #f)\n       \
    \        (+ i 1)))))\n", "  (cond\n    [(empty? l) false]\n    [else (let ((x\
    \ (car l)))\n             (cond\n              [(= x 0) true]\n              [(=\
    \ (- x 1) 0) (pairs_sum_to_zero (cdr l))]\n              [else false]))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
