name: HumanEval_43_pairs_sum_to_zero
language: rkt
prompt: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
  ;; it returns True if there are two distinct elements in the list that\n;; sum to\
  \ zero, and False otherwise.\n(define (pairs_sum_to_zero l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal?\
  \ (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n\
  \    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate\
  \ (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30))\
  \ #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? l) #t]\n        [(pair? (rest l)) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (and (equal? (first l) (first (rest l)))\n       \
    \            (equal? (second l) (second (rest l))))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [else (let ([a (first l)\n                  b (second l)])\n\
    \            (cond\n              [(= (+ a b) 0) true]\n              [else false]))]))\n",
  "  (cond\n    [(empty? l) false]\n    [else (and (pair? (car l)) (= (+ (car l) (first\
    \ l)) 0))\n           (pairs_sum_to_zero (cdr l))]\n   ))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(member (first l) l) false]\n    [else (and (pairs_sum_to_zero\
    \ (rest l))\n               (equal? (first l) (first (rest l))))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(= (first l) (first l)) #t]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first\
    \ (rest l))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(equal? (first l) 0) #f]\n        [else (and (equal? (first\
    \ l) (first (rest l)))\n                   (pairs_sum_to_zero (rest l)))]))\n",
  "  (cond\n    [(empty? l) true]\n    [else (let ([a (first l)\n                \
    \  b (second l)])\n            (cond\n              [(= a b) (pairs_sum_to_zero\
    \ (rest l))]\n              [(= (+ a b) 0) false]\n              [else (pairs_sum_to_zero\
    \ (rest l))]))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([head\
    \ (car l)]\n               [tail (cdr l)])\n            (cond\n              [(=\
    \ head tail) true]\n              [(= (+ head tail) 0) (pairs_sum_to_zero tail)]\n\
    \              [else false]))]))\n", "  (cond\n    [(empty? l) false]\n    [else\
    \ (let ([head (car l)])\n             (cond\n              [(= head 0) (= (cdr\
    \ l) '())]\n              [(= head (car l)) (pairs_sum_to_zero (cdr l))]\n   \
    \           [else (pairs_sum_to_zero (cdr l))]))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(member (first l) (rest l)) (pairs_sum_to_zero (rest l))]\n\
    \    [else (pairs_sum_to_zero (rest l))]\n  ))\n", "  (cond [(null? l) false]\n\
    \        [else (equal? (first l) (second l)) (pairs_sum_to_zero (rest l))]\n \
    \       [else (equal? (first l) (second (first l))) (pairs_sum_to_zero (rest l))]\n\
    \        [else (equal? (second l) (second (first l))) (pairs_sum_to_zero (rest\
    \ l))]\n        [else (equal? (second l) (second (second l))) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (equal? (second (first l)) (second (second l))) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (equal? (second (first l)) (second (second (first\
    \ l)))) (pairs_sum_to_zero (rest l))]\n        [else (equal? (second (second l))\
    \ (second (second (second l)))) (pairs_sum_to_zero (rest l))]\n        [else (equal?\
    \ (second (second l)) (second (second (second (first l))))) (pairs_sum_to_zero\
    \ (rest l))]\n        [else (equal? (second (second (first l))) (second (second\
    \ (second (second l))))) (pairs_sum_to_zero (rest l))]\n        [else (equal?\
    \ (second (second (first l))) (second (second (second (second (first l))))))\n\
    \         (pairs_sum_to_zero (rest l))]\n        [else (equal? (second (second\
    \ (second l))) (second (second (second (second (second l))))))\n         (pairs_sum_to_zero\
    \ (rest l))]\n        [else (equal? (second (second (second (first l)))) (second\
    \ (second (second (second (second l))))))\n         (pairs_sum_to_zero (rest l))]\n\
    \        [else (equal? (second (second (second (first l)))) (second (second (second\
    \ (second (second (first l))))))\n         (pairs_sum_to_zero (rest l))]\n   \
    \     [else (equal? (second (second (second (second l)))) (second (second (second\
    \ (second (second (second l))))))\n         (pairs_sum_to_zero (rest l))]\n  \
    \      [else (equal? (second (second (second (second (first l))))) (second (second\
    \ (second (second (second (second l))))))\n         (pairs_sum_to_zero (rest l))]\n\
    \        [else (equal? (second (second (second (second (first l))))) (second (second\
    \ (second (second (second (second (first l))))))\n         (", "  (cond [(empty?\
    \ l) #t]\n        [(equal? (first l) (first (rest l))) #f]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [else (let ([head (car\
    \ l)])\n             (cond\n              [(= head 0) true]\n              [(=\
    \ (- head (apply + l)) 0) true]\n              [else false]))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(member (first l) l) (pairs_sum_to_zero (rest l))]\n\
    \    [else (and (equal? (first l) (second l)) (pairs_sum_to_zero (rest l)))]))\n",
  "  (cond\n    [(empty? l) false]\n    [else (and (equal? (first l) (first l))\n\
    \               (pairs_sum_to_zero (rest l)))]))\n", "  (cond\n    [(empty? l)\
    \ false]\n    [(equal? (first l) 0) true]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first l)) #t]\n\
    \        [else (pairs_sum_to_zero (rest l))]))\n", "  (let loop ((l l) (sum 0))\n\
    \    (cond ((null? l) false)\n          ((= (first l) sum) true)\n          (else\
    \ (loop (rest l) (+ sum (first l)))\n                (loop (rest l) (+ sum (first\
    \ l)))))))\n", "  (cond [(empty? l) #t]\n        [(equal? (first l) (first l))\
    \ #t]\n        [else (and (equal? (first l) (first l))\n                   (pairs_sum_to_zero\
    \ (rest l)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
