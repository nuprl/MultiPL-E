name: HumanEval_125_split_words
language: rkt
prompt: "#lang racket\n\n;; Given a string of words, return a list of words split\
  \ on whitespace, if no whitespaces exists in the text you\n;; should split on commas\
  \ ',' if no commas exists you should return the number of lower-case letters with\
  \ odd order in the\n;; alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
  ;; Examples\n;; >>> split_words(\"abcdef\") \n;; 3\n(define (split_words txt)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n\
  \    (check-equal? (candidate \"Hello world!\") (list \"Hello\" \"world!\"))\n \
  \   (check-equal? (candidate \"Hello,world!\") (list \"Hello\" \"world!\"))\n  \
  \  (check-equal? (candidate \"Hello world,!\") (list \"Hello\" \"world,!\"))\n \
  \   (check-equal? (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\"\
  \ \"!\"))\n    (check-equal? (candidate \"abcdef\") 3)\n    (check-equal? (candidate\
  \ \"aaabb\") 2)\n    (check-equal? (candidate \"aaaBb\") 1)\n    (check-equal? (candidate\
  \ \"\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower (first\
    \ txt))))\n             (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) whitespace) 0]\n    [(equal? (first txt) comma)\
    \ 0]\n    [else (+ 1 (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ 0]\n    [(equal? (first txt) ',) (+ 1 (split_words (rest txt)))]\n    [else\
    \ (+ 1 (count (map char->int (map char->lower (first txt))))\n             (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map\
    \ char->lower (first txt))))\n            (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (if (empty?\
    \ txt)\n      '()\n      (if (char-whitespace? txt)\n          (split_words txt)\n\
    \          (if (char-comma? txt)\n              (split_words txt)\n          \
    \    (if (char-lower-case? txt)\n                  (+ 1 (length txt))\n      \
    \            (length txt))))))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',) (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->lower (first txt))))\n             (split_words (rest txt)))]))\n",
  "  (if (empty? txt)\n      0\n      (let ((chars (string->list (string->string txt))))\n\
    \        (if (or (empty? chars) (null? chars))\n            0\n            (if\
    \ (or (empty? (first chars)) (null? (first chars)))\n                0\n     \
    \           (if (or (empty? (second chars)) (null? (second chars)))\n        \
    \            0\n                    (if (or (empty? (third chars)) (null? (third\
    \ chars)))\n                        0\n                        (if (or (empty?\
    \ (fourth chars)) (null? (fourth chars)))\n                            0\n   \
    \                         (if (or (empty? (fifth chars)) (null? (fifth chars)))\n\
    \                                0\n                                (if (or (empty?\
    \ (sixth chars)) (null? (sixth chars)))\n                                    0\n\
    \                                    (if (or (empty? (seventh chars)) (null? (seventh\
    \ chars)))\n                                        0\n                      \
    \                  (if (or (empty? (eighth chars)) (null? (eighth chars)))\n \
    \                                           0\n                              \
    \              (if (or (empty? (ninth chars)) (null? (ninth chars)))\n       \
    \                                         0\n                                \
    \                (if (or (empty? (tenth chars)) (null? (tenth chars)))\n     \
    \                                               0\n                          \
    \                          (if (or (empty? (eleventh chars)) (null? (eleventh\
    \ chars)))\n                                                        0\n      \
    \                                                  (if (or (empty? (twelfth chars))\
    \ (null? (twelfth chars)))\n                                                 \
    \           0\n                                                            (if\
    \ (or (empty? (thirteenth chars)) (null? (thirteenth chars)))\n              \
    \                                                  0\n                       \
    \                                         (if (or (empty? (fourteenth chars))\
    \ (null? (fourteenth chars)))\n                                              \
    \                      0\n                                                   \
    \                 (if (or (empty? (fifteenth chars)) (null? (fifteenth chars)))\n\
    \                                                                        0\n \
    \                                                                       (if (or\
    \ (empty? (sixteenth chars)) (null? (sixteenth chars)))\n                    \
    \                                                        0\n                 \
    \                                                           (if (or (empty? (seventeenth\
    \ chars)) (null? (seventeenth chars)))\n                                     \
    \                                           0\n                              \
    \                                                  (if (or (empty? (eighteenth\
    \ chars)) (null? (eighteenth chars)))\n                                      \
    \                                              0\n                           \
    \                                                         (if (or (empty? (nineteenth\
    \ chars)) (null? (nineteenth chars)))\n                                      \
    \                                                  0\n                       \
    \                                                                 (if (or (empty?\
    \ (twentieth chars)) (null? (twentieth chars)))\n                            \
    \                                                                0\n         \
    \                                                                            \
    \       (if (or (empty? (thirtieth chars)) (null? (thirtie", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n   \
    \ [else (+ 1 (count (map char->int (map char->lower (first txt))))\n         \
    \   (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->lower (first txt))))\n             (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int ", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first\
    \ txt) ',) (split_words (rest txt))]\n    [else (+ 1 (/ (count (map char->int\
    \ (map char->string txt)) #(0 1 2 3 4 5 6 7 8 9)) 26))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n   \
    \ [else (+ 1 (count (map char->int (map char->lower (first txt))))\n         \
    \   (split_words (rest txt)))]))\n", "  (if (empty? txt)\n      '()\n      (let\
    \ ((chars (string->list txt)))\n        (if (empty? chars)\n            (length\
    \ chars)\n            (if (or (char->string? chars) (string-contains? \",\" chars))\n\
    \                (length chars)\n                (if (or (char->string? chars)\
    \ (string-contains? \",\" chars))\n                    (length chars)\n      \
    \              (if (or (char->string? chars) (string-contains? \",\" chars))\n\
    \                        (length chars)\n                        (length chars))))))))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map #(char->int (car txt)) (split-string\
    \ txt #\\Space)))) ]\n  )\n)\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->string txt))))]))\n", "  (if (empty? txt)\n      '()\n\
    \      (if (or (char-whitespace? txt) (char-comma? txt))\n          (cons (car\
    \ txt) (split_words (cdr txt)))\n          (if (char-lowercase? (car txt))\n \
    \             (cons (car txt) (split_words (cdr txt)))\n              (if (char-uppercase?\
    \ (car txt))\n                  (cons (car txt) (split_words (cdr txt)))\n   \
    \               (if (char-digit? (car txt))\n                      (cons (car\
    \ txt) (split_words (cdr txt)))\n                      (if (char-symbol? (car\
    \ txt))\n                          (cons (car txt) (split_words (cdr txt)))\n\
    \                          (if (char-whitespace? (car txt))\n                \
    \              (cons (car txt) (split_words (cdr txt)))\n                    \
    \          (if (char-comma? (car txt))\n                                  (cons\
    \ (car txt) (split_words (cdr txt)))\n                                  (if (char-newline?\
    \ (car txt))\n                                      (cons (car txt) (split_words\
    \ (cdr txt)))\n                                      (if (char-tab? (car txt))\n\
    \                                          (cons (car txt) (split_words (cdr txt)))\n\
    \                                          (if (char-newline? (car txt))\n   \
    \                                           (cons (car txt) (split_words (cdr\
    \ txt)))\n                                              (if (char-tab? (car txt))\n\
    \                                                  (cons (car txt) (split_words\
    \ (cdr txt)))\n                                                  (if (char-newline?\
    \ (car txt))\n                                                      (cons (car\
    \ txt) (split_words (cdr txt)))\n                                            \
    \          (if (char-tab? (car txt))\n                                       \
    \                   (cons (car txt) (split_words (cdr txt)))\n               \
    \                                           (if (char-newline? (car txt))\n  \
    \                                                            (cons (car txt) (split_words\
    \ (cdr txt)))\n                                                              (if\
    \ (char-tab? (car txt))\n                                                    \
    \              (cons (car txt) (split_words (cdr txt)))\n                    \
    \                                              (if (char-newline? (car txt))\n\
    \                                                                      (cons (car\
    \ txt) (split_words (cdr txt)))\n                                            \
    \                          (if (char-tab? (car txt))\n                       \
    \                                                   (cons (car txt) (split_words\
    \ (cdr txt)))\n                                                              \
    \            (if (char-newline? (car txt))\n                                 \
    \                                             (cons (car txt", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words (rest txt)))]\n \
    \   [(equal? (first txt) \",\") (+ 1 (split_words (rest txt)))]\n    [else (+\
    \ 1 (count (map char->int (map char->string (map char->int (map char->string (split\
    \ txt #\\Space)))))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first\
    \ txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int\
    \ (map char->lower (first txt))))\n             (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (count (filter #(<= (first txt) (car %)) (map #(list\
    \ 'char->int %) (rest txt))))))))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ?whitespace) 0]\n    [else (+ 1 (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ?whitespace) 0]\n    [else\
    \ (+ 1 (split_words (rest txt)))]))\n", "  (if (empty? txt)\n      '()\n     \
    \ (let ([word (first txt)])\n        (if (empty? (rest txt))\n            (cons\
    \ word '())\n            (if (char-whitespace? word)\n                (cons word\
    \ '())\n                (if (char-comma? word)\n                    (cons (first\
    \ word) (split_words (rest txt)))\n                    (cons (first word) (list\
    \ (char-lower-case? (first word))))))))))\n", "  (cond\n    [(empty? txt) 0]\n\
    \    [(equal? (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [(equal?\
    \ (first txt) \",\") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->lower (rest txt)))))))\n", "  (cond\n    [(empty? txt)\
    \ 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [else\
    \ (+ 1 (count_letters (first txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n  \
    \  [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (count_letters\
    \ (first txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (+ 1 (count_letters (first txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 ((count (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char", "  (if (string-empty? txt)\n      '()\n      (let ([chars\
    \ (string->list (string->string txt))])\n        (if (string-empty? chars)\n \
    \           (length chars)\n            (let ([char (first chars)])\n        \
    \      (if (string-empty? chars)\n                  (length chars)\n         \
    \         (let ([chars (string->list (string->string chars))])\n             \
    \       (if (string-empty? chars)\n                        (length chars)\n  \
    \                      (let ([char (first chars)])\n                         \
    \ (if (string-empty? chars)\n                              (length chars)\n  \
    \                            (let ([chars (string->list (string->string chars))])\n\
    \                                (if (string-empty? chars)\n                 \
    \                   (length chars)\n                                    (let ([char\
    \ (first chars)])\n                                      (if (string-empty? chars)\n\
    \                                          (length chars)\n                  \
    \                        (let ([chars (string->list (string->string chars))])\n\
    \                                            (if (string-empty? chars)\n     \
    \                                           (length chars)\n                 \
    \                               (length chars))))))))))))))))\n", "  (cond\n \
    \   [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (+ 1 (length (filter (lambda (x) (char-lower? (first x))) txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (/ (count (filter #(< ord (car txt)) (map ord '(a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z))))\n               (count (filter\
    \ #(< ord (car txt)) (map ord '(a b c d e f g h i j k l m n o p q r s t u v w\
    \ x y z))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',')\
    \ (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->string\
    \ txt))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',')\
    \ (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower\
    \ (first txt))))\n            (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+\
    \ 1 (count (map #(char->int (first txt)) (map char->string txt))))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n      \
    \       (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->string (map char->int (map char->string (first txt)))))\n\
    \                   (count (map char->int (map char->string (map char->int (map\
    \ char->string (second txt)))))\n                   (count (map char->int (map\
    \ char->string (map char->int (map char->string (third txt)))))\n            \
    \       (count (map char->int (map char->string (map char->int (map char->string\
    \ (fourth txt)))))\n                   (count (map char->int (map char->string\
    \ (map char->int (map char->string (fifth txt)))))\n                   (count\
    \ (map char->int (map char->string (map char->int (map char->string (sixth txt)))))\n\
    \                   (count (map char->int (map char->string (map char->int (map\
    \ char->string (seventh txt)))))\n                   (count (map char->int (map\
    \ char->string (map char->int (map char->string (EAST txt)))))\n             \
    \      (count (map char->int (map char->string (map char->int (map char->string\
    \ (WEST txt)))))\n                   (count (map char->int (map char->string (map\
    \ char->int (map char->string (SOUTH txt)))))\n                   (count (map\
    \ char->int (map char->string (map char->int (map char->string (NORTH txt)))))\n\
    \                   (count (map char->int (map char->string (map char->int (map\
    \ char->string (SOUTH txt)))))\n                   (count (map char->int (map\
    \ char->string (map char->int (map char->string (EAST txt)))))\n             \
    \      (count (map char->int (map char->string (map char->int (map char->string\
    \ (WEST txt)))))\n                   (count (map char->int (map char->string (map\
    \ char->int (map char->string (SOUTH txt)))))\n                   (count (map\
    \ char->int (map char->string (map char->int (map char->string (EAST txt)))))\n\
    \                   (count (map char->int (map char->string (map char->int (map\
    \ char->string (", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (+ 1 (count (lambda (x) (equal? (first\
    \ txt) x)) 'abcdefghijklmnopqrstuvwxyz'))]))\n", "  (cond\n    [(empty? txt) 0]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (length\
    \ (filter (lambda (x) (char-lower? (first x))) (rest txt))))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map #(if (char-whitespace? %) (cons % '()) (cons % ','))\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (+\
    \ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (first txt))))))))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (lambda (c) (equal? (first c) \" \") (equal?\
    \ (first txt) \",\")))\n               (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (+ 1 (count (map #(char->int (first txt)) (map #(char->int (first txt))\
    \ (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first\
    \ txt) ',) (split_words (rest txt))]\n    [else (+ 1 (length (filter (lambda (x)\
    \ (char-alphabetic? x)) (split-string txt #\\space)))) ]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) whitespace) 0]\n    [(equal? (first txt) comma)\
    \ 0]\n    [else (+ 1 (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else\
    \ (+ 1 (count (map char->int (map char->string (map char->list (map char->string\
    \ txt))))))]))\n", "  (if (empty? txt)\n      '()\n      (if (char-whitespace?\
    \ txt)\n          (split_words txt)\n          (if (char-comma? txt)\n       \
    \       (split_words txt)\n              (if (char-lowercase? txt)\n         \
    \         (+ 1 (length (filter (lambda (c) (= (char c 0) (char txt 0))) '(a b\
    \ c d e f g h i j k l m n o p q r s t u v w x y z)))\n                  (length\
    \ (filter (lambda (c) (= (char c 0) (char txt 0))) '(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z))))))))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->string (map char->int (map char->string (first txt)))))))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+\
    \ 1 (count (filter #(equal? (first txt) %) txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(whitespace? txt) 0]\n    [else (+ 1 (count_letters (txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+\
    \ 1 (length (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c)\
    \ (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter\
    \ (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n      \
    \       (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->lower (first txt))))\n             (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(whitespace? txt) 0]\n    [else (+ 1 (length\
    \ (filter (lambda (x) (char-alphabetic? x)) (split-string txt #\\space)))\n  \
    \          (length (filter (lambda (x) (char-alphabetic? x)) (split-string txt\
    \ #\\comma)))\n            (length (filter (lambda (x) (char-alphabetic? x)) (split-string\
    \ txt #\\lower-case)))]))", "  (if (empty? txt)\n      '()\n      (let ((chars\
    \ (string->list txt)))\n        (if (or (empty? chars) (null? chars))\n      \
    \      '()\n            (let ((char (first chars)))\n              (if (or (empty?\
    \ char) (null? char))\n                  '()\n                  (cons (string->list\
    \ (string->string char)) (split_words (rest chars)))))))\n        (if (or (empty?\
    \ chars) (null? chars))\n            0\n            (let ((char (first chars)))\n\
    \              (if (or (empty? char) (null? char))\n                  0\n    \
    \              (+ 1 (count_letters (string->string char))))))))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->string (map char->list (string->list\
    \ txt)))))]\n  )\n)\n", "  (cond\n    [(empty? txt) 0]\n    [(whitespace? txt)\
    \ 0]\n    [else (+ 1 (/ (length txt) (length ',')) (length lower-case-letters))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 ((count (map #(if (char=? (first txt) %) 1) (map #(if\
    \ (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=?\
    \ (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first\
    \ txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt)\
    \ %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1)\
    \ (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map\
    \ #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if\
    \ (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=?\
    \ (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first\
    \ txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt)\
    \ %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1)\
    \ (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map\
    \ #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if\
    \ (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=?\
    \ (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first\
    \ txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt)\
    \ %) 1) (map ", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',')\
    \ (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int ", "  (cond\n    [(empty? txt) 0]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (count\
    \ (map char->int (map char->lower (first txt))))\n             (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(whitespace? txt) 0]\n  \
    \  [(comma? txt) 0]\n    [else (+ 1 (count_letters (string->list txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) whitespace) 1]\n    [else\
    \ (+ 1 ((count (split_words (rest txt)))))]))\n", "  (if (empty? txt)\n      '()\n\
    \      (let ([chars (string->list txt)])\n        (if (or (empty? chars)\n   \
    \             (char=? (first chars) #\\space))\n            (length (string->list\
    \ txt))\n            (if (char=? (first chars) #\\comma)\n                (length\
    \ (string->list txt))\n                (if (char=? (first chars) #\\lower-case)\n\
    \                    (length (string->list txt))\n                    (if (char=?\
    \ (first chars) #\\upper-case)\n                        (length (string->list\
    \ txt))\n                        (length (string->list txt))))))))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words (rest\
    \ txt)))]\n    [else (+ 1 (count (lambda (c) (equal? (first txt) c)) (first txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words (rest txt)))]\n \
    \   [else (+ 1 (count (first txt) \",\"))]))\n", "  (cond\n    [(empty? txt) 0]\n\
    \    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1\
    \ (count (map char->int (map char->lower (first txt))))\n            (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ ',) (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map\
    \ char->lower (first txt))))) ]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (length (filter (lambda\
    \ (x) (char-alphabetic? (first x))) txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else\
    \ (+ 1 (count (lambda (x) (equal? (first txt) x)) 'abcdefghijklmnopqrstuvwxyz'))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->string (map char->lower\
    \ (string->list txt))))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (lambda\
    \ (c) (equal? (first txt) c)) (first txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else\
    \ (+ 1 (count (map char->int (map char->lower (first txt))))\n             (split_words\
    \ (rest txt)))]))\n", "  (if (empty? txt)\n      '()\n      (let ([char (first\
    \ txt)])\n        (if (char-whitespace? char)\n            (split_words (rest\
    \ txt))\n            (if (char-comma? char)\n                (cons (first txt)\
    \ (split_words (rest txt)))\n                (+ 1 (odd? char)))))\n      )\n \
    \   )\n  )\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \"\
    ) (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (split-string\
    \ txt #\\Space))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first\
    \ txt) ',) (split_words (rest txt))]\n    [else (+ 1 (count (filter (lambda (x)\
    \ (equal? (first txt) x)) '(a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \")\
    \ (+ 1 (split_words (rest txt)))]\n    [(equal? (first txt) \",\") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n      \
    \       (split_words (rest txt)))]))\n", "  (if (empty? txt)\n      '()\n    \
    \  (let ([chars (string->list (string->string txt))])\n        (if (or (empty?\
    \ chars) (equal? (first chars) #\\space))\n            (length chars)\n      \
    \      (if (or (empty? chars) (equal? (first chars) #\\comma))\n             \
    \   (length chars)\n                (if (or (empty? chars) (equal? (first chars)\
    \ #\\lower-case))\n                    (length chars)\n                    (if\
    \ (or (empty? chars) (equal? (first chars) #\\upper-case))\n                 \
    \       (length chars)\n                        (length chars))))))))\n", "  (if\
    \ (empty? txt)\n      0\n      (let ((chars (string->list txt)))\n        (if\
    \ (or (empty? chars) (null? chars))\n            0\n            (let ((char (first\
    \ chars)))\n              (if (or (char-whitespace? char) (char-comma? char))\n\
    \                  0\n                  (+ 1 (count_chars (rest chars)))))))))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower (first\
    \ txt))))\n            (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n   \
    \ [else (+ 1 (count (map char->int (map char->lower (first txt))))\n         \
    \    (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [(equal? (first txt)\
    \ \",\") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count_letters (first\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',')\
    \ (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int ", "  (cond\n    [(empty? txt) 0]\n\
    \    [(equal? (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [else (+\
    \ 1 (count (lambda (x) (equal? (first x) \" \") (equal? (first x) \",\")))\n \
    \              (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (/ (count\
    \ (map char->int (map char->char (map char->string txt))) '()) 26))]))\n", " \
    \ (cond\n    [(empty? txt) 0]\n    [(whitespace? txt) 0]\n    [(comma? txt) 0]\n\
    \    [else (+ 1 (count_letters (lower-case-letters txt)))]))\n", "  (cond\n  \
    \  [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n      \
    \       (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(whitespace?\
    \ txt) 0]\n    [(comma? txt) 0]\n    [else (+ 1 (count_letters (lower-case txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (length (filter (lambda (x) (char-lower? (first x)))\
    \ (rest txt))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ whitespace) 0]\n    [(equal? (first txt) comma) 0]\n    [else (+ 1 (count_letters\
    \ (first txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ \" \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count_letters (first\
    \ txt)))]))\n", "  (if (empty? txt)\n      '()\n      (if (char-whitespace? txt)\n\
    \          (cons (substring txt 0 (string-length txt)) (split_words (substring\
    \ txt (string-length txt))))\n          (cons (substring txt 0 (string-length\
    \ txt)) (split_words (substring txt (string-length txt)))))))\n", "  (cond\n \
    \   [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (+ 1 (length (filter (lambda (x) (char=? (first x) 'a') (filter (lambda\
    \ (x) (char=? (first x) 'b') (filter (lambda (x) (char=? (first x) 'c') (filter\
    \ (lambda (x) (char=? (first x) 'd') (filter (lambda (x) (char=? (first x) 'e')\
    \ (filter (lambda (x) (char=? (first x) 'f') (filter (lambda (x) (char=? (first\
    \ x) 'g') (filter (lambda (x) (char=? (first x) 'h') (filter (lambda (x) (char=?\
    \ (first x) 'i') (filter (lambda (x) (char=? (first x) 'j') (filter (lambda (x)\
    \ (char=? (first x) 'k') (filter (lambda (x) (char=? (first x) 'l') (filter (lambda\
    \ (x) (char=? (first x) 'm') (filter (lambda (x) (char=? (first x) 'n') (filter\
    \ (lambda (x) (char=? (first x) 'o') (filter (lambda (x) (char=? (first x) 'p')\
    \ (filter (lambda (x) (char=? (first x) 'q') (filter (lambda (x) (char=? (first\
    \ x) 'r') (filter (lambda (x) (char=? (first x) 's') (filter (lambda (x) (char=?\
    \ (first x) 't') (filter (lambda (x) (char=? (first x) 'u') (filter (lambda (x)\
    \ (char=? (first x) 'v') (filter (lambda (x) (char=? (first x) 'w') (filter (lambda\
    \ (x) (char=? (first x) 'x') (filter (lambda (x) (char=? (first x) 'y') (filter\
    \ (lambda (x) (char=? (first x) 'z'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map #(char->int (car txt)) (split-string\
    \ txt #\\Space)))\n            (count (map #(char->int (car txt)) (split-string\
    \ txt #\\Comma)))\n            (count (map #(char->int (car txt)) (split-string\
    \ txt #\\Lower)))\n            (count (map #(char->int (car txt)) (split-string\
    \ txt #\\Upper)))\n            (count (map #(char->int (car txt)) (split-string\
    \ txt #\\Digit)))\n            (count (map #(char->int (car txt)) (split-string\
    \ txt #\\Other)))]))\n)\n", "  (if (string-empty? txt)\n      '()\n      (let\
    \ ((chars (string->list txt)))\n        (if (string-empty? chars)\n          \
    \  '()\n            (let ((char (first chars)))\n              (if (string-empty?\
    \ char)\n                  '()\n                  (let ((chars (string->list char)))\n\
    \                    (if (string-empty? chars)\n                        '()\n\
    \                        (let ((char (first chars)))\n                       \
    \   (if (string-empty? char)\n                              '()\n            \
    \                  (let ((chars (string->list char)))\n                      \
    \          (if (string-empty? chars)\n                                    '()\n\
    \                                    (let ((char (first chars)))\n           \
    \                           (if (string-empty? char)\n                       \
    \                   0\n                                          (let ((chars\
    \ (string->list char)))\n                                            (if (string-empty?\
    \ chars)\n                                                0\n                \
    \                                (let ((char (first chars)))\n               \
    \                                   (if (string-empty? char)\n               \
    \                                       0\n                                  \
    \                    (let ((chars (string->list char)))\n                    \
    \                                    (if (string-empty? chars)\n             \
    \                                               0\n                          \
    \                                  (let ((char (first chars)))\n             \
    \                                                 (if (string-empty? char)\n \
    \                                                                 0\n        \
    \                                                          (let ((chars (string->list\
    \ char)))\n                                                                  \
    \  (if (string-empty? chars)\n                                               \
    \                         0\n                                                \
    \                        (let ((char (first chars)))\n                       \
    \                                                   (if (string-empty? char)\n\
    \                                                                            \
    \  0\n                                                                       \
    \       (let ((chars (string->list char)))\n                                 \
    \                                               (if (string-empty? chars)\n  \
    \                                                                            \
    \      0\n                                                                   \
    \                 (let ((char (first chars)))\n                              \
    \                                                        (if (string-empty? char)\n\
    \                                                                            \
    \              0\n                                                           \
    \                               (let ((chars (string->list char)))\n         \
    \                                                                            \
    \       (if (string-empty? chars)\n                                          \
    \                                                      0\n                   \
    \                                                                            \
    \ (let ((char (first chars)))\n                                              \
    \                                                    (if (string-empty? char)\n\
    \                                                                            \
    \                          0\n                                               \
    \                                                       (let ((chars (string->list\
    \ char)))\n                                                                  \
    \                                      (if (string-empty? chars)\n           \
    \                                                                            \
    \                     0\n                                                    \
    \                                                        (let ((char (first chars)))\n\
    \                                                                            \
    \                                  (if (string-empty? char)\n                \
    \                                                                            \
    \                      0\n                                                   \
    \                                                               (let ((chars (string->list\
    \ char)))\n                                                                  \
    \                                                  (if (string-empty? chars)\n\
    \                                                                            \
    \                                            0\n                             \
    \                                                                            \
    \               (let ((char (first chars)))\n                                \
    \                                                                            \
    \              (if (string-empty? char)\n                                    \
    \                                                                            \
    \              0\n                                                           \
    \                                                                   (let ((chars\
    \ (string->list char)))\n                                                    \
    \                                                                            (if\
    \ (string-empty? chars)\n                                                    \
    \                                                                            \
    \  0\n                                                                       \
    \                                                           ", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+\
    \ 1 ((count (map #(char->int (car txt)) '(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first\
    \ txt) ',) (split_words (rest txt))]\n    [else (+ 1 ((length (filter (lambda\
    \ (x) (char-lower? (first x))) txt))))]))\n", "  (cond\n    [(empty? txt) 0]\n\
    \    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1\
    \ (count (map char->int (map char->string (map char->list (string->list txt))))))]))\n",
  "  (if (empty? txt)\n      '()\n      (let ((chars (string->list txt)))\n      \
    \  (if (or (empty? chars) (null? (cdr chars)))\n            (length chars)\n \
    \           (let ((char (car chars)))\n              (if (or (char-whitespace?\
    \ char) (char-comma? char))\n                  (cons char chars)\n           \
    \       (cons char \n                        (split_words (string->list (substring\
    \ txt 0 (+ 0 (length chars))))))))))))\n", "  (cond\n    [(empty? txt) 0]\n  \
    \  [(equal? (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1\
    \ (count_letters (first txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (length (filter (lambda\
    \ (x) (char=? (first x) 'a') (char=? (first x) 'b') (char=? (first x) 'c') (char=?\
    \ (first x) 'd') (char=? (first x) 'e') (char=? (first x) 'f') (char=? (first\
    \ x) 'g') (char=? (first x) 'h') (char=? (first x) 'i') (char=? (first x) 'j')\
    \ (char=? (first x) 'k') (char=? (first x) 'l') (char=? (first x) 'm') (char=?\
    \ (first x) 'n') (char=? (first x) 'o') (char=? (first x) 'p') (char=? (first\
    \ x) 'q') (char=? (first x) 'r') (char=? (first x) 's') (char=? (first x) 't')\
    \ (char=? (first x) 'u') (char=? (first x) 'v') (char=? (first x) 'w') (char=?\
    \ (first x) 'x') (char=? (first x) 'y') (char=? (first x) 'z'))))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n      \
    \       (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->string (map char->int (map char->string (first txt)))))))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+\
    \ 1 (/ (string-length (first txt)) 26))]))\n", "  (cond\n    [(empty? txt) 0]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (length\
    \ (filter (lambda (x) (char-type x)) (split-string (first txt) \" \"))))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (length (filter (lambda (x) (char-alphabetic? (first\
    \ x))) txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (+ 1 (count (filter #(< ord %) txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower (first\
    \ txt))))\n             (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+\
    \ 1 (count (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n   \
    \ [else (+ 1 (count (map char->int (map char->lower (first txt))))\n         \
    \    (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char->list (map char->string\
    \ (map char->list (map char->string (map char->list (map char->string (map char->list\
    \ (map char->string (map char->list (map char->string (map char", "  (cond\n \
    \   [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words (rest\
    \ txt)))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+\
    \ 1 (count (filter #(< ord #) txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n \
    \   [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1\
    \ (count (map char->int (map char->lower (first txt))))\n             (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map\
    \ char->lower (first txt))))\n             (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map #(if (char-lower? (first %)) (first\
    \ %) %) txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map\
    \ char->lower (first txt))))\n             (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map #(char->integer %) (split-string (first\
    \ txt) #\\Space #\\Comma))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->lower (first txt))))\n             (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower (first\
    \ txt))))]\n  )\n)\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ \" \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 ((length txt) (split_words\
    \ (rest txt))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ ',) (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map\
    \ char->lower (first txt))))\n             (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (count (filter #(equal? (first %) ',) (split_words (rest\
    \ txt))))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (+ 1 (count_letters (first txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (length (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->string (map char->list\
    \ (string->list txt))))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (count (filter #(<\
    \ ord #) txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ \" \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int\
    \ (map char->lower (first txt))))\n             (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n      \
    \      (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ?whitespace) 0]\n    [else (+ 1 (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ?whitespace) 0]\n    [else\
    \ (+ 1 (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->string (map char->int (map char->string (map char->int\
    \ txt)))))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',')\
    \ (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower\
    \ (first txt))))]\n  )\n)\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first\
    \ txt) ',) (split_words (rest txt))]\n    [else (+ 1 (length (filter (lambda (c)\
    \ (equal? (first txt) c)) (map char->int (map char->string (map char->int (map\
    \ char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int (map char->string\
    \ (map char->int (map char->string (map char->int (map char->string (map char->int\
    \ (map ", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1\
    \ (split_words (rest txt)))]\n    [else (+ 1 (count (lambda (x) (equal? (first\
    \ x) \" \") (equal? (first x) (first txt))))\n             (split_words (rest\
    \ txt)))]))\n", "  (if (empty? txt)\n      0\n      (let ((chars (string->list\
    \ txt)))\n        (if (empty? chars)\n            0\n            (if (or (empty?\
    \ (cdr chars)) (empty? (car chars)))\n                (length chars)\n       \
    \         (if (or (empty? (cdr chars)) (empty? (car chars)))\n               \
    \     (length chars)\n                    (if (or (empty? (cdr chars)) (empty?\
    \ (car chars)))\n                        (length chars)\n                    \
    \    (if (or (empty? (cdr chars)) (empty? (car chars)))\n                    \
    \        (length chars)\n                            (if (or (empty? (cdr chars))\
    \ (empty? (car chars)))\n                                (length chars)\n    \
    \                            (if (or (empty? (cdr chars)) (empty? (car chars)))\n\
    \                                    (length chars)\n                        \
    \            (if (or (empty? (cdr chars)) (empty? (car chars)))\n            \
    \                            (length chars)\n                                \
    \        (if (or (empty? (cdr chars)) (empty? (car chars)))\n                \
    \                            (length chars)\n                                \
    \            (if (or (empty? (cdr chars)) (empty? (car chars)))\n            \
    \                                    (length chars)\n                        \
    \                        (if (or (empty? (cdr chars)) (empty? (car chars)))\n\
    \                                                    (length chars)\n        \
    \                                            (if (or (empty? (cdr chars)) (empty?\
    \ (car chars)))\n                                                        (length\
    \ chars)\n                                                        (if (or (empty?\
    \ (cdr chars)) (empty? (car chars)))\n                                       \
    \                     (length chars)\n                                       \
    \                     (if (or (empty? (cdr chars)) (empty? (car chars)))\n   \
    \                                                             (length chars)\n\
    \                                                                (if (or (empty?\
    \ (cdr chars)) (empty? (car chars)))\n                                       \
    \                             (length chars)\n                               \
    \                                     (if (or (empty? (cdr chars)) (empty? (car\
    \ chars)))\n                                                                 \
    \       (length chars)\n                                                     \
    \                   (if (or (empty? (cdr chars)) (empty? (car chars)))\n     \
    \                                                                       (length\
    \ chars)\n                                                                   \
    \         (if (or (empty? (cdr chars)) (empty? (car chars)))\n               \
    \                                                                 (length chars)\n\
    \                                                                            \
    \    (if (or (empty? (cdr chars)) (empty? (car chars)))\n                    \
    \                                                                (length chars)\n\
    \                                                                            \
    \        (if (or (empty? (cdr chars)) (empty? (car chars)))\n                \
    \                                                                        (length\
    \ chars)\n                                                                   \
    \                     (if (or (empty? (cdr chars)) (empty? (car chars)))\n   \
    \                                                                            \
    \             (length chars)\n                                               \
    \                                             (", "  (if (string-empty? txt)\n\
    \      '()\n      (let ([chars (string->list txt)])\n        (if (string-empty?\
    \ chars)\n            '()\n            (let ([char (first chars)])\n         \
    \     (if (string-empty? char)\n                  '()\n                  (let\
    \ ([char (first chars)])\n                    (if (string-empty? char)\n     \
    \                   '()\n                        (let ([char (first chars)])\n\
    \                          (if (string-empty? char)\n                        \
    \      '()\n                              (let ([char (first chars)])\n      \
    \                          (if (string-empty? char)\n                        \
    \            '()\n                                    (let ([char (first chars)])\n\
    \                                      (if (string-empty? char)\n            \
    \                            '()\n                                        (let\
    \ ([char (first chars)])\n                                          (if (string-empty?\
    \ char)\n                                              '()\n                 \
    \                             (let ([char (first chars)])\n                  \
    \                              (if (string-empty? char)\n                    \
    \                                '()\n                                       \
    \             (let ([char (first chars)])\n                                  \
    \                    (if (string-empty? char)\n                              \
    \                            '()\n                                           \
    \               (let ([char (first chars)])\n                                \
    \                            (if (string-empty? char)\n                      \
    \                                          '()\n                             \
    \                                   (let ([char (first chars)])\n            \
    \                                                      (if (string-empty? char)\n\
    \                                                                    '()\n   \
    \                                                                 (let ([char\
    \ (first chars)])\n                                                          \
    \            (if (string-empty? char)\n                                      \
    \                                  '()\n                                     \
    \                                   (let ([char (first chars)])\n            \
    \                                                              (if (string-empty?\
    \ char)\n                                                                    \
    \          '()\n                                                             \
    \                 (let ([char (first chars)])\n                              \
    \                                                  (if (string-empty? char)\n\
    \                                                                            \
    \      '()\n                                                                 \
    \                 (let ([char (first chars)])\n                              \
    \                                                      (if (string-empty? char)\n\
    \                                                                            \
    \          '()\n                                                             \
    \                         (let ([char (first chars)])\n                      \
    \                                                                  (if (string-empty?\
    \ char)\n                                                                    \
    \                      '()\n                                                 \
    \                                         (let ([char (first chars)])\n      \
    \                                                                            \
    \          (if (string-empty? char)\n                                        \
    \                                                        '()\n               \
    \                                                                            \
    \     (let ([char (first chars)])\n                                          \
    \                                                        (if (string-empty? char)\n\
    \                                                                            \
    \                          '()\n                                             \
    \                                                         '(()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n      \
    \       (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (length (filter (lambda\
    \ (x) (equal? (first x) 'space)) (split-string txt #\\Space)))) ]\n  )\n)\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower (first\
    \ txt))))\n             (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words (rest txt)))]\n \
    \   [(equal? (first txt) \",\") (+ 1 (split_words (rest txt)))]\n    [else (+\
    \ 1 (count_letters (first txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(whitespace?\
    \ txt) 0]\n    [(comma? txt) 0]\n    [else (+ 1 (count_letters (txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->string (map char->int\
    \ (map char->string (map char->int (map char->string (map char->int txt))))))))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (lambda (x) (equal? (first x) \" \") (equal?\
    \ (first txt) \" \"))\n                       (map char->int (split txt #\\Space))))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (lambda (x) (equal? (first x) \" \") (equal?\
    \ (first x) \",\")))\n               (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n      \
    \       (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (split-string (first txt) #\\Space)))\n             (count (map char->int\
    \ (split-string (first txt) #\\Comma)))\n             (count (map char->int (split-string\
    \ (first txt) #\\Lower)))\n             (count (map char->int (split-string (first\
    \ txt) #\\Upper)))\n             (count (map char->int (split-string (first txt)\
    \ #\\Digit)))\n             (count (map char->int (split-string (first txt) #\\\
    Other)))]))))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (+ 1 ((count (map #(char->integer %) (map\
    \ char->string txt))))))))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first\
    \ txt) ?whitespace) 0]\n    [else (+ 1 (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(whitespace? txt) (length (split_words txt))]\n  \
    \  [else (+ 1 (count_letters (string->list (string->string txt))))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n      \
    \       (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (count (map char->int\
    \ (map char->lower (first txt))))\n             (split_words (rest txt)))]))\n",
  "  (if (empty? txt)\n      0\n      (if (char-whitespace? txt)\n          (+ 1 (split_words\
    \ (substring txt 0 (string-length txt))))\n          (if (char-comma? txt)\n \
    \             (+ 1 (split_words (substring txt 0 (string-length txt))))\n    \
    \          (if (char-lowercase? txt)\n                  (+ 1 (split_words (substring\
    \ txt 0 (string-length txt))))\n                  (if (char-uppercase? txt)\n\
    \                      (+ 1 (split_words (substring txt 0 (string-length txt))))\n\
    \                      (+ 1 (split_words (substring txt 0 (string-length txt))))))))))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (lambda (x) (equal? (first x) \" \") (equal?\
    \ (first x) \",\")))\n               (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map char->int (map char->string (map char->lower (string->list\
    \ txt))))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',')\
    \ (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int ", "  (cond\n    [(empty? txt) 0]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 ((length\
    \ (filter #(< ord (car txt)) (map ord 'abcdez')))))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n   \
    \ [else (+ 1 (count (map char->int (map char->string txt))))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map #(char->int (first txt)) (split-string (first txt)\
    \ \" \"))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \"\
    \ \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (lambda (x) (equal?\
    \ (first x) \" \") (equal? (first x) \",\")))\n               (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',')\
    \ (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower\
    \ (first txt))))\n             (split_words (rest txt)))]))\n", "  (cond\n   \
    \ [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (lambda (x) (equal? (first x) \" \") (equal? (first x)\
    \ (first txt))))\n             (split_words (rest txt)))]))\n", "  (if (empty?\
    \ txt)\n      '()\n      (let ((char (first txt)))\n        (if (char-whitespace?\
    \ char)\n            (cons (first txt) (split_words (rest txt)))\n           \
    \ (if (char-comma? char)\n                (cons (first txt) (split_words (rest\
    \ txt)))\n                (cons (first txt) (list (char-lower-case? char))))))))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower (first\
    \ txt))))\n             (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n   \
    \ [else (+ 1 (count (map char->int (map char->lower (first txt))))\n         \
    \    (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (lambda\
    \ (x) (equal? (first x) \" \") (equal? (first x) (first txt))))\n            \
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ #(char->int (first txt)) (map #(char->int (car txt)) (map #(char->int (cdr txt))\
    \ (map #(char->int (last txt)) (map #(char->int (last txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->", "  (cond\n    [(empty? txt)\
    \ 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (length\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (", "  (cond\n    [(empty? txt) 0]\n \
    \   [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (/ (count\
    \ (filter #(< ord #) txt)) 26))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',) (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ char->int (map char->lower (first txt))))\n            (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (+ 1 (split_words (rest\
    \ txt)))]\n    [else (+ 1 (count (map char->int (map char->lower (first txt))))\n\
    \             (split_words (rest txt)))]))\n", "  (if (empty? txt)\n      '()\n\
    \      (let ((word (first txt)))\n        (if (empty? (rest txt))\n          \
    \  (cons word '())\n            (if (char-whitespace? word)\n                (cons\
    \ word '())\n                (if (char-comma? word)\n                    (cons\
    \ (first word) (split_words (rest txt)))\n                    (if (char-lowercase?\
    \ (first word))\n                        (cons (first word) (split_words (rest\
    \ txt)))\n                        (if (char-uppercase? (first word))\n       \
    \                     (cons (first word) (split_words (rest txt)))\n         \
    \                   (if (char-digit? (first word))\n                         \
    \       (cons (first word) (split_words (rest txt)))\n                       \
    \         (if (char-symbol? (first word))\n                                  \
    \  (cons (first word) (split_words (rest txt)))\n                            \
    \        (if (char-whitespace? (first word))\n                               \
    \         (cons (first word) (split_words (rest txt)))\n                     \
    \                   (if (char-newline? (first word))\n                       \
    \                     (cons (first word) (split_words (rest txt)))\n         \
    \                                   (if (char-tab? (first word))\n           \
    \                                     (cons (first word) (split_words (rest txt)))\n\
    \                                                (if (char-newline? (first word))\n\
    \                                                    (cons (first word) (split_words\
    \ (rest txt)))\n                                                    (if (char-tab?\
    \ (first word))\n                                                        (cons\
    \ (first word) (split_words (rest txt)))\n                                   \
    \                     (if (char-newline? (first word))\n                     \
    \                                       (cons (first word) (split_words (rest\
    \ txt)))\n                                                            (if (char-tab?\
    \ (first word))\n                                                            \
    \    (cons (first word) (split_words (rest txt)))\n                          \
    \                                      (if (char-newline? (first word))\n    \
    \                                                                (cons (first\
    \ word) (split_words (rest txt)))\n                                          \
    \                          (if (char-tab? (first word))\n                    \
    \                                                    (cons (first word) (split_words\
    \ (rest txt)))\n                                                             \
    \           (if (char-newline? (first word))\n                               \
    \                                             (cons (first word) (split_words\
    \ (rest txt)))\n                                                             \
    \               (if (char-tab? (first word))\n                               \
    \                                                 (cons (first word) (split_words\
    \ (rest txt)))\n                                                             \
    \                   (if (char-newline? (first word))\n                       \
    \                                                             (cons (first word)\
    \ (split_words (rest txt)))\n                                                \
    \                                    (if (char-tab? (first word))\n          \
    \                                                                            \
    \  (cons (first word) (split_words (rest txt)))\n                            \
    \                                                            (if (char-newline?\
    \ (first word))\n                                                            \
    \                                (cons (", "  (if (empty? txt)\n      '()\n  \
    \    (let ((chars (string->list txt)))\n        (if (or (empty? chars)\n     \
    \           (char=? (first chars) #\\space))\n            (length chars)\n   \
    \         (if (or (empty? chars)\n                    (char=? (first chars) #\\\
    ,))\n                (length chars)\n                (if (or (empty? chars)\n\
    \                        (char=? (first chars) #\\a))\n                    (length\
    \ chars)\n                    (if (or (empty? chars)\n                       \
    \     (char=? (first chars) #\\b))\n                        (length chars)\n \
    \                       (if (or (empty? chars)\n                             \
    \   (char=? (first chars) #\\z))\n                            (length chars)\n\
    \                            (length chars)))))))))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) whitespace) 0]\n    [(equal? (first txt) comma)\
    \ 1]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n   \
    \ [else (+ 1 (count (map char->int (map char->lower (first txt))))\n         \
    \    (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 (count (filter #(<\
    \ ord (first txt)) (map ord (rest txt))))))))\n", "  (cond\n    [(empty? txt)\
    \ 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (+ 1 ((count\
    \ (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first\
    \ txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int\
    \ (first txt)) (map #(char->int (first txt)) (map #(char->int (first txt)) (map\
    \ #(char->int (first txt)) (map #(char->int (first txt)) (map #(char->int (first ",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (map char->lower (first\
    \ txt))))\n             (split_words (rest txt)))]))\n", "  (if (empty? txt)\n\
    \      '()\n      (let ([word (first txt)])\n        (if (empty? word)\n     \
    \       (cons word '())\n            (let ([next-word (split_words (rest txt))])\n\
    \              (cons (first word) (cons next-word '())))))))\n", "  (cond\n  \
    \  [(empty? txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n\
    \    [else (+ 1 (count (map #(if (char-lower? (first %)) (first %) 'a) txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (+ 1 (count_letters (first txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) 0]\n    [(equal? (first txt) ',') (+ 1 (split_words (rest txt)))]\n   \
    \ [else (+ 1 (count (map char->int (map char->lower (first txt))))\n         \
    \   (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) whitespace) 0]\n    [else (+ 1 (split_words (rest txt)))]))\n",
  "  (if (empty? txt)\n      '()\n      (let ([char (first txt)])\n        (if (char-whitespace?\
    \ char)\n            (split_words (rest txt))\n            (if (char-comma? char)\n\
    \                (cons (first txt) (split_words (rest txt)))\n               \
    \ (if (char-lower-case? char)\n                    (+ 1 (odd? char))\n       \
    \             (odd? char)))))))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map\
    \ #(char->integer c) (split-string (first txt) #\\Space)))) ]\n  )\n)\n", "  (if\
    \ (empty? txt)\n      '()\n      (let ([chars (string->list txt)])\n        (if\
    \ (empty? chars)\n            (length chars)\n            (let ([char (first chars)])\n\
    \              (if (char-whitespace? char)\n                  (split_words chars)\n\
    \                  (if (char-comma? char)\n                      (cons char split_words\
    \ chars)\n                      (if (char-lowercase? char)\n                 \
    \         (cons char split_words chars)\n                          (if (char-uppercase?\
    \ char)\n                              (cons char split_words chars)\n       \
    \                       (if (char-digit? char)\n                             \
    \     (cons char split_words chars)\n                                  (if (char-other?\
    \ char)\n                                      (cons char split_words chars)\n\
    \                                      (if (char-whitespace? char)\n         \
    \                                 (cons char split_words chars)\n            \
    \                              (if (char-other? char)\n                      \
    \                        (cons char split_words chars)\n                     \
    \                         (if (char-whitespace? char)\n                      \
    \                            (cons char split_words chars)\n                 \
    \                                 (if (char-other? char)\n                   \
    \                                   (cons char split_words chars)\n          \
    \                                            (if (char-whitespace? char)\n   \
    \                                                       (cons char split_words\
    \ chars)\n                                                          (if (char-other?\
    \ char)\n                                                              (cons char\
    \ split_words chars)\n                                                       \
    \       (if (char-whitespace? char)\n                                        \
    \                          (cons char split_words chars)\n                   \
    \                                               (if (char-other? char)\n     \
    \                                                                 (cons char split_words\
    \ chars)\n                                                                   \
    \   (if (char-whitespace? char)\n                                            \
    \                              (cons char split_words chars)\n               \
    \                                                           (if (char-other? char)\n\
    \                                                                            \
    \  (cons char split_words chars)\n                                           \
    \                                   (if (char-whitespace? char)\n            \
    \                                                                      (cons char\
    \ split_words chars)\n                                                       \
    \                           (if (char-other? char)\n                         \
    \                                                             (cons char split_words\
    \ chars)\n                                                                   \
    \                   (if (char-whitespace? char)\n                            \
    \                                                              (cons char split_words\
    \ chars)\n                                                                   \
    \                       (if (char-other? char)\n                             \
    \                                                                 (cons char split_words\
    \ chars)\n                                                                   \
    \                           (if (char-whitespace? char)\n                    \
    \                                                                            \
    \  (cons char split_words chars)\n                                           \
    \                                                       (if (char-other? char)\n\
    \                                                                            \
    \                          (cons char split_words chars)\n                   \
    \                                                                            \
    \       (if (char-whitespace? char)\n                                        \
    \                                                                  (cons char\
    \ split_words chars)\n                                                       \
    \                                                   (if (char-other? char)\n \
    \                                                                            \
    \                                 (cons char split_words char", "  (cond\n   \
    \ [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n \
    \   [else (+ 1 (length (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (+ 1 (count (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal?\
    \ (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda\
    \ (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code c) 65)\
    \ (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal? (char-code\
    \ c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda (c) (equal?\
    \ (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97) (filter (lambda\
    \ (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code c) 97)\
    \ (filter (lambda (c) (equal? (char-code c) 65) (filter (lambda (c) (equal? (char-code\
    \ c) 97) (filter (lambda (c) (equal? (char-code c) 65) (filter (", "  (cond\n\
    \    [(empty? txt) 0]\n    [(whitespace? txt) 0]\n    [else (+ 1 (count_letters\
    \ (string->list txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first\
    \ txt) ',') (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (map char->int\
    \ (map char->lower (first txt))))\n             (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt) \" \") (+ 1 (split_words\
    \ (rest txt)))]\n    [else (+ 1 (count (map char->int (split-string (first txt)\
    \ #\\Space))))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ whitespace) 0]\n    [(equal? (first txt) comma) 1]\n    [else (+ 1 ((count (split_words\
    \ txt)) (split_words txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal?\
    \ (first txt) \" \") (+ 1 (split_words (rest txt)))]\n    [else (+ 1 (count (lambda\
    \ (c) (equal? (first c) \" \") (equal? (first txt) \",\")))\n               (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) 0]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (+ 1 ((count (map #(char->int (car\
    \ txt)) '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))]))\n", "  (cond\n\
    \    [(empty? txt) 0]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (+ 1 (count (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first\
    \ txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt)\
    \ %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1)\
    \ (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map\
    \ #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if\
    \ (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=?\
    \ (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first\
    \ txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt)\
    \ %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1)\
    \ (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map\
    \ #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if\
    \ (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=?\
    \ (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first\
    \ txt) %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt)\
    \ %) 1) (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1)\
    \ (map #(if (char=? (first txt) %) 1) (map #(if (char=? (first txt) %) 1) (map\
    \ #"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
