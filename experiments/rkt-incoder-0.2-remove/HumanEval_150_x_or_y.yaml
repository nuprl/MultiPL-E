name: HumanEval_150_x_or_y
language: rkt
prompt: "#lang racket\n\n;; A simple program which should return the value of x if\
  \ n is \n;; a prime number and should return the value of y otherwise.\n;; Examples:\n\
  (define (x_or_y n x y)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate x_or_y))\n\
  \    (check-equal? (candidate 7 34 12) 34)\n    (check-equal? (candidate 15 8 5)\
  \ 5)\n    (check-equal? (candidate 3 33 5212) 33)\n    (check-equal? (candidate\
  \ 1259 3 52) 3)\n    (check-equal? (candidate 7919 -1 12) -1)\n    (check-equal?\
  \ (candidate 3609 1245 583) 583)\n    (check-equal? (candidate 91 56 129) 129)\n\
  \    (check-equal? (candidate 6 34 1234) 1234)\n    (check-equal? (candidate 1 2\
  \ 0) 0)\n    (check-equal? (candidate 2 2 0) 2)\n))\n\n(test-humaneval)"
completions: ["  (cond [(= n 2) x]\n        [(= n 3) y]\n        [else (* x y)]))\n",
  "  (cond\n    [(= n 1) x]\n    [(= (mod n 2) 0) y]\n    [else x_or_y (- n 1) x y]\n\
    \  ))\n", "  (cond\n    [(= n 1) x]\n    [(= (mod n 2) 0) y]\n    [else x_or_y\
    \ (- n 1) x y]\n  ))\n", "  (cond\n    [(= n 2) x]\n    [(= n 3) y]\n    [else\
    \ (* n (x_or_y n (+ x 1) y))]))\n", "  (cond [(= n 1) x]\n        [(= (mod n 2)\
    \ 0) y]\n        [else x_or_y (- n 1) x y]\n        ))\n", "  (cond\n    [(= n\
    \ 2) x]\n    [(= n 3) y]\n    [else (* n (x_or_y n (+ x 1) y))]))\n", "  (cond\
    \ [(= n 2) x]\n        [(= n 3) y]\n        [else (* x y)]))\n", "  (cond\n  \
    \  [(= n 2) x]\n    [(= n 3) y]\n    [else (* n (x_or_y n (+ x 1) y))]))\n", " \
    \ (cond [(= n 2) x]\n        [(= n 3) y]\n        [else (* n (x_or_y (n-1) (x\
    \ y) (y x)))]))\n", "  (cond\n    [(= n 1) x]\n    [(= (mod n 2) 0) y]\n    [else\
    \ x_or_y (- n 1) x y]\n  ))\n", "  (cond\n    ((= n 1) x)\n    ((= n 2) y)\n \
    \   ((= (mod n 2) 0) (* x y))\n    (else (* x (x_or_y (n-1) (* x y) y))))\n",
  "  (cond\n    ((= n 2) x)\n    ((= n 3) y)\n    ((= (modulo n 2) 0) (* x y))\n \
    \   (else (* x (x_or_y n (+ x 1) y)))))\n", "  (cond [(= n 2) x]\n        [(=\
    \ n 3) y]\n        [else (* x y)]))\n", "  (cond\n    [(= n 2) x]\n    [(= n 3)\
    \ y]\n    [else (* n (x_or_y n (+ x 1) y))]))\n", "  (cond\n    [(= n 2) x]\n\
    \    [(= n 3) y]\n    [else (* n x_or_y x_or_y)]))\n", "  (cond [(= n 1) x]\n\
    \        [(= (mod n 2) 0) y]\n        [else x_or_y (n-1) (* x x) (* y y)]))\n",
  "  (cond\n    [(= n 1) x]\n    [(= (mod n 2) 0) y]\n    [else x_or_y (- n 1) x y]\n\
    \  ))\n", "  (cond\n    [(= n 1) x]\n    [(= n 2) y]\n    [else (* n (x_or_y (n-1)\
    \ (x y) (y x)))]))\n", "  (cond\n    [(= n 1) x]\n    [(= (mod n 2) 0) y]\n  \
    \  [else x_or_y (- n 1) x y]\n  )\n)\n", "  (cond\n    [(= n 2) x]\n    [(= n\
    \ 3) y]\n    [else (* n (x_or_y n (+ x 1) y))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
