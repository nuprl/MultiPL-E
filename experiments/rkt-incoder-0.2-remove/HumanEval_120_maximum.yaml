name: HumanEval_120_maximum
language: rkt
prompt: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
  \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
  ;; Example 1:\n;; Example 2:\n;; Example 3:\n;; Note:\n;; 1. The length of the array\
  \ will be in the range of [1, 1000].\n;; 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n(define (maximum arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
  \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
  \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3\
  \ 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0\
  \ 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2\
  \ -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0)\
  \ 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10)\
  \ 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n  \
  \  (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate\
  \ (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23\
  \ 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else\
    \ (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) (list 0)]\n    [(=\
    \ k 0) (list arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (list (first\
    \ arr)))]))\n", "  (if (= k 0)\n      (list 0)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (list (max arr (sub1 k))))))\n", "  (if (= k 0)\n      '()\n     \
    \ (cons (max (rest arr) (- k 1))\n            (maximum (rest arr) (- k 1)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1))) (maximum (take\
    \ arr k) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest\
    \ arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1)) \n                (maximum (rest\
    \ arr) (- k 1))))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      '()\n      (cons (max (rest arr) k) (maximum (rest arr) (sub1\
    \ k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1)) \n                (maximum (rest arr)\
    \ (- k 1))))]\n  )\n)\n", "  (if (= k 0)\n      '()\n      (cons (max arr (- k\
    \ 1))\n            (maximum (rest arr) (- k 1)))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n \
    \     '()\n      (append (sort (take arr (- k 1))) (maximum (take arr (- k 1))\n\
    \                                               (- k 1)))))\n", "  (if (= k 0)\n\
    \      '()\n      (append (sort (take arr (- k 1))\n                    (lambda\
    \ (x y) (if (> x y) x y)))\n              (maximum (drop arr (- k 1))\n      \
    \                  (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(=\
    \ k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
