name: HumanEval_120_maximum
language: rkt
prompt: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
  \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
  ;; Example 1:\n;; Example 2:\n;; Example 3:\n;; Note:\n;; 1. The length of the array\
  \ will be in the range of [1, 1000].\n;; 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n(define (maximum arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
  \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
  \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3\
  \ 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0\
  \ 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2\
  \ -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0)\
  \ 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10)\
  \ 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n  \
  \  (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate\
  \ (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23\
  \ 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else\
    \ (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) (list 0)]\n    [(=\
    \ k 0) (list arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (list (first\
    \ arr)))]))\n", "  (if (= k 0)\n      (list 0)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (list (max arr (sub1 k))))))\n", "  (if (= k 0)\n      '()\n     \
    \ (cons (max (rest arr) (- k 1))\n            (maximum (rest arr) (- k 1)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1))) (maximum (take\
    \ arr k) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest\
    \ arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1)) \n                (maximum (rest\
    \ arr) (- k 1))))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      '()\n      (cons (max (rest arr) k) (maximum (rest arr) (sub1\
    \ k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1)) \n                (maximum (rest arr)\
    \ (- k 1))))]\n  )\n)\n", "  (if (= k 0)\n      '()\n      (cons (max arr (- k\
    \ 1))\n            (maximum (rest arr) (- k 1)))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n \
    \     '()\n      (append (sort (take arr (- k 1))) (maximum (take arr (- k 1))\n\
    \                                               (- k 1)))))\n", "  (if (= k 0)\n\
    \      '()\n      (append (sort (take arr (- k 1))\n                    (lambda\
    \ (x y) (if (> x y) x y)))\n              (maximum (drop arr (- k 1))\n      \
    \                  (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(=\
    \ k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1)) \n                (maximum (rest arr) (- k 1))))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      '()\n      (cons (max (rest arr) (- k 1))\n            (maximum\
    \ (rest arr) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum\
    \ (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1)) \n                (maximum\
    \ (rest arr) (- k 1))))]\n  )\n)\n", "  (cond\n    [(empty? arr) empty]\n    [(=\
    \ k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (cons max (maximum (cdr arr) (sub1 k)))\n           \
    \ (maximum (cdr arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n  \
    \  [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n\
    \    [(empty? arr) (list 0)]\n    [(= k 0) (list arr)]\n    [else (append (maximum\
    \ (rest arr) (sub1 k)) (list (first arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n\
    \                (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n      '()\n\
    \      (cons (max (rest arr) (- k 1))\n            (maximum (rest arr) (- k 1)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest\
    \ arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n      '()\n\
    \      (append (sort (take arr (- k 1))) \n              (maximum (drop arr (-\
    \ k 1)) k))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n      '()\n      (cons\
    \ (max (rest arr) (- k 1))\n            (maximum (rest arr) (- k 1)))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) '()]\n    [(= k 0) '()]\n    [else (append (maximum\
    \ (rest arr) (sub1 k)) (list (first arr)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a tags=racket,scheme |>\n<code>", "  (if (= k 0)\n      '()\n      (let\
    \ ([max-so-far max-so-far-so-far (max 0 (car arr))])\n        (if (null? (cdr\
    \ arr))\n            (cons max-so-far max-so-far-so-far)\n            (let ([next\
    \ (maximum (cdr arr) (- k 1))])\n              (cond [(> next max-so-far-so-far)\
    \ (cons next max-so-far-so-far)]\n                    [else (cons next max-so-far-so-far)])))\n\
    \        (let ([next (maximum (cdr arr) (- k 1))])\n          (cond [(> next max-so-far-so-far)\
    \ (cons next max-so-far-so-far)]\n                [else (cons next max-so-far-so-far)])))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest\
    \ arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) (list 0)]\n    [(= k 0) (list\
    \ arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (list (first arr)))]))\n",
  "  (if (= k 0)\n      '()\n      (append (sort (append (take arr (- k 1))\n    \
    \                      (take arr (- k 2)))\n                   (lambda (x y)\n\
    \                     (if (> x y)\n                         x\n              \
    \           y)))\n              (maximum (take arr (- k 1))\n                \
    \      (- k 2)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) (list 0)]\n    [(= k 0) (list\
    \ arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (list (first arr)))]))\n",
  "  (if (= k 0)\n      (list 0)\n      (append (maximum (rest arr) (sub1 k)) (list\
    \ (max arr (sub1 k)))))) \n", "  (if (= k 0)\n      '()\n      (append (sort (take\
    \ arr (- k 1))\n                    (lambda (x y) (if (> x y) x y)))\n       \
    \       (maximum (drop arr (- k 1))\n                        (- k 1)))))\n", " \
    \ (if (= k 0)\n      '()\n      (cons (max arr (- k 1))\n            (maximum\
    \ (rest arr) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty?\
    \ arr) (list 0)]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest arr)\
    \ (sub1 k)) (list (first arr)))]))\n", "  (if (= k 0)\n      (list 0)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (list (max arr (sub1 k))))))\n", "  (cond\n  \
    \  [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr)\
    \ (- k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest arr)\
    \ (- k 1)))]))\n", "  (if (= k 0)\n      (list)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (list (max arr (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ 0)\n      (append (maximum (rest arr) (sub1 k)) (list (max arr (sub1 k))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) \n                (maximum (rest arr) (- k 1))))]\n  )\n\
    )\n", "  (if (= k 0)\n      '()\n      (cons (max arr (- k 1))\n            (maximum\
    \ (rest arr) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) (maximum (rest arr) (- k 1))))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      '()\n      (cons (max (rest arr) (- k 1))\n            (maximum\
    \ (rest arr) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty?\
    \ arr) (list 0)]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest arr)\
    \ (sub1 k)) (list (first arr)))]))\n", "  (cond\n    [(empty? arr) empty]\n  \
    \  [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (=\
    \ k 0)\n      (list 0)\n      (append (maximum (rest arr) (sub1 k)) (list (max\
    \ arr (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n      '()\n\
    \      (cons (max (rest arr) (- k 1))\n            (maximum (rest arr) (- k 1)))))\n",
  "  (if (= k 0)\n      (list 0)\n      (append (maximum (rest arr) (sub1 k)) (list\
    \ (max arr (sub1 k))))))\n", "  (if (= k 0)\n      '()\n      (append (list (max\
    \ arr (- k 1))) (maximum (rest arr) (- k 1)))))\n", "  (cond\n    [(empty? arr)\
    \ (list 0)]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest arr) (sub1\
    \ k)) (maximum (first arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1)) (maximum (rest arr) (- k 1))))]))\n", "  (if (= k 0)\n      '()\n\
    \      (append (sort (take arr (- k 1))\n                   (lambda (x y) (if\
    \ (> x y) x y))\n                   (reverse (take arr k))\n                 \
    \  (lambda (x y) (if (> x y) x y)))\n              (maximum (drop arr k) (- k\
    \ 1)))))\n", "  (if (= k 0)\n      '()\n      (append (list (max (rest arr) (-\
    \ k 1))) (maximum (rest arr) (- k 1)))))\n", "  (if (= k 0)\n      (list arr)\n\
    \      (let ([max (car arr)])\n        (if (> (car arr) max)\n            (cons\
    \ max \n                   (maximum (cdr arr) (sub1 k)))\n            (maximum\
    \ (cdr arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (list (car arr))\n              (maximum (cdr arr) (sub1 k))))))\n", "  (if\
    \ (= k 0)\n      '()\n      (let ([max (car arr)])\n        (if (> (car arr) max)\n\
    \            (cons max '())\n            (maximum (cdr arr) (sub1 k))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) '()]\n    [(= k 0) (cons (car arr) '())]\n    [else\
    \ (append (maximum (cdr arr) (- k 1))\n                  (cons (car arr) (maximum\
    \ (cdr arr) (- k 1))))]))\n", "  (if (= k 0)\n      '()\n      (append (sort (take\
    \ arr (- k 1))) (maximum (take arr (- k 1))\n                                \
    \               (- k 1)))))\n", "  (cond\n    [(empty? arr) (list 0)]\n    [(=\
    \ k 0) (list arr)]\n    [else (cons (max (rest arr) (- k 1))\n               \
    \ (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) (list 0)]\n\
    \    [(= k 0) (list arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (list\
    \ (first arr)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n      '()\n\
    \      (cons (max (rest arr) (- k 1))\n            (maximum (rest arr) (- k 1)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) (maximum (rest arr) (- k 1))) ]))\n", "  (if (= k 0)\n \
    \     '()\n      (append (sort (take arr (- k 1))) (maximum (take arr (- k 1))\n\
    \                                              (- k 1)))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (let ([max (car arr)])\n              (if (> (car arr)\
    \ max)\n                  (let ([max (car arr)])\n                    (if (> (car\
    \ arr) max)\n                        (let ([max (car arr)])\n                \
    \          (if (> (car arr) max)\n                              (let ([max (car\
    \ arr)])\n                                (if (> (car arr) max)\n            \
    \                        (let ([max (car arr)])\n                            \
    \          (if (> (car arr) max)\n                                          (let\
    \ ([max (car arr)])\n                                            (if (> (car arr)\
    \ max)\n                                                (let ([max (car arr)])\n\
    \                                                  (if (> (car arr) max)\n   \
    \                                                   (let ([max (car arr)])\n \
    \                                                       (if (> (car arr) max)\n\
    \                                                            (let ([max (car arr)])\n\
    \                                                              (if (> (car arr)\
    \ max)\n                                                                  (let\
    \ ([max (car arr)])\n                                                        \
    \            (if (> (car arr) max)\n                                         \
    \                               (let ([max (car arr)])\n                     \
    \                                                     (if (> (car arr) max)\n\
    \                                                                            \
    \  (let ([max (car arr)])\n                                                  \
    \                              (if (> (car arr) max)\n                       \
    \                                                             (let ([max (car\
    \ arr)])\n                                                                   \
    \                   (if (> (car arr) max)\n                                  \
    \                                                        (let ([max (car arr)])\n\
    \                                                                            \
    \                (if (> (car arr) max)\n                                     \
    \                                                           (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                (let ([max (car arr)])\n                    \
    \                                                                            \
    \                                    (if (> (car arr) max)\n                 \
    \                                                                            \
    \                                           (let ([max (car arr)])\n         \
    \                                                                            \
    \                                                     (if (> (car arr) ", "  (if\
    \ (= k 0)\n      (list 0)\n      (append (maximum (rest arr) (sub1 k)) (list (car\
    \ arr)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest arr)\
    \ (- k 1)))]))\n", "  (if (= k 0)\n      '()\n      (append (sort (take arr (-\
    \ k 1))) (maximum (take arr (- k 1))\n                                       \
    \        (- k 1)))))\n", "  (if (= k 0)\n      '()\n      (append (list (max arr\
    \ (- k 1))) (maximum (rest arr) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr)\
    \ (- k 1))]))\n", "  (cond\n    [(empty? arr) (list 0)]\n    [(= k 0) (list arr)]\n\
    \    [else (append (maximum (rest arr) (sub1 k)) (list (first arr)))]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) (list 0)]\n    [(= k 0) (list arr)]\n    [else (append\
    \ (maximum (rest arr) (sub1 k)) (list (first arr)))]))\n", "  (if (= k 0)\n  \
    \    '()\n      (append (sort (subseq arr 0 k)) (maximum (subseq arr (+ k 1))))))\n",
  "  (if (= k 0)\n      '()\n      (append (sort (subseq arr (- k 1))\n          \
    \         (lambda (x y) (if (> x y) x y)))\n              (maximum (subseq arr\
    \ (- k 1))\n                       (- k 1)))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\
    \ (maximum (rest arr) (- k 1))) ]))\n", "  (cond\n    [(empty? arr) empty]\n \
    \   [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n\
    \    [(empty? arr) (list 0)]\n    [(= k 0) (list arr)]\n    [else (append (maximum\
    \ (rest arr) (sub1 k)) (list (max arr (sub1 k))))]))\n", "  (if (= k 0)\n    \
    \  '()\n      (append (sort (take arr (- k 1))\n                    (lambda (x\
    \ y)\n                      (< (first x) y)\n                      (> (first x)\
    \ y))\n                    (lambda (x y)\n                      (< (second x)\
    \ y)\n                      (> (second x) y)))\n              (maximum (drop arr\
    \ (- k 1))\n                      (- k 1)))))\n", "  (cond\n    [(empty? arr)\
    \ (list 0)]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest arr) (sub1\
    \ k)) (list (first arr)))]))\n", "  (if (= k 0)\n      (list 0)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (list (max arr (sub1 k))))))\n", "  (if (= k 0)\n\
    \      '()\n      (append (sort (take arr (- k 1))\n                    (lambda\
    \ (x y)\n                      (if (> x y)\n                          (- x y)\n\
    \                          (- y x))\n                      (- x y))\n        \
    \            (lambda (x y)\n                      (if (> x y)\n              \
    \            (- x y)\n                          (- y x))))\n              (maximum\
    \ (drop arr (- k 1))\n                      (- k 1)))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n \
    \     '()\n      (append (sort (take arr (- k 1))\n                    (lambda\
    \ (x y) (if (> x y) x y)))\n              (maximum (drop arr (- k 1))\n      \
    \                 (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(=\
    \ k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) \n                (maximum (rest arr) (- k 1))))]))\n",
  "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n        (if (< (car\
    \ arr) max)\n            (cons max (maximum (cdr arr) (sub1 k)))\n           \
    \ (maximum (cdr arr) (sub1 k)))))) ; else recurse on cdr\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n \
    \     (list 0)\n      (let ([max (car arr)])\n        (if (< (car arr) max)\n\
    \            (cons (car arr) (maximum (cdr arr) (sub1 k)))\n            (maximum\
    \ (cdr arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) (list 0)]\n    [(= k 0) (list arr)]\n    [else (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k)))]))\n", "  (if\
    \ (= k 0)\n      '()\n      (append (list (max (rest arr) k))\n              \
    \  (maximum (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n       \
    \         (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n      '()\n   \
    \   (append (sort (max arr (- k 1))) (maximum (rest arr) (- k 1)))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr)\
    \ (- k 1))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(= k 0) (cons (car arr)\
    \ (maximum (cdr arr) (k - 1)))]\n    [else (cons (max (car arr) (car arr)) (maximum\
    \ (cdr arr) (- k 1))) ]\n  ))\n", "  (if (= k 0)\n      (list 0)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (list (car arr)))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1))) (maximum (take\
    \ arr k) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr)\
    \ (list 0)]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest arr) (sub1\
    \ k)) (list (max arr (sub1 k))))]))\n", "  (cond\n    [(empty? arr) empty]\n \
    \   [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n        \
    \        (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n      '()\n    \
    \  (cons (max (rest arr) k) (maximum (rest arr) (sub1 k))))))\n", "  (cond\n \
    \   [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr)\
    \ (- k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest arr)\
    \ (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n      (list 0)\n  \
    \    (let ([max (car arr)])\n        (if (< (car arr) max)\n            (cons\
    \ (car arr) (maximum (cdr arr) (sub1 k)))\n            (maximum (cdr arr) (sub1\
    \ k))))))\n", "  (cond\n    [(empty? arr) '()]\n    [(= k 0) (cons (car arr) (maximum\
    \ (cdr arr) (k - 1)))]\n    [else (cons (car arr) (maximum (cdr arr) (sub1 k)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(= k 0) (cons (car arr) '())]\n    [else (cons (max (cdr arr)\
    \ (- k 1))\n                (maximum (cdr arr) (- k 1)))]))\n", "  (if (= k 0)\n\
    \      '()\n      (cons (max (rest arr) (- k 1))\n            (maximum (rest arr)\
    \ (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest arr)\
    \ (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n      '()\n      (append\
    \ (sort (take arr (- k 1))) (maximum (take arr (- k 1))\n                    \
    \                           (- k 1)))))\n", "  (if (= k 0)\n      '()\n      (append\
    \ (list (max (rest arr) k))\n                (maximum (rest arr) (sub1 k))))))\n",
  "  (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1))\n            \
    \       (lambda (x y) (if (> x y) x y)))\n              (maximum (take arr (-\
    \ k 1))\n                       (- k 1)))))\n", "  (if (= k 0)\n      (list 0)\n\
    \      (append (maximum (rest arr) (sub1 k)) (list (max 0 (first arr))))))\n",
  "  (if (= k 0)\n      (list 0)\n      (append (maximum (rest arr) (sub1 k)) (list\
    \ (car arr)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest arr)\
    \ (- k 1)))]))\n", "  (if (= k 0)\n      '()\n      (append (list (car arr))\n\
    \              (maximum (cdr arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ 0)\n      (let ([max (car arr)])\n        (if (null? (cdr arr))\n          \
    \  (list max)\n            (let ([next (maximum (cdr arr) (sub1 k))]\n       \
    \           [max (if (> max next)\n                          (cons max next)\n\
    \                          (cons next max))])\n              (if (= k 1)\n   \
    \               (list max)\n                  (cons max max)))))\n        (if\
    \ (= k 1)\n            (list max)\n            (cons max max)))))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (let ([max (car arr)])\n        (if (> (car arr)\
    \ max)\n            (cons max \n                   (maximum (cdr arr) (sub1 k)))\n\
    \            (maximum (cdr arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr)\
    \ (list 0)]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest arr) (-\
    \ k 1))\n                  (list (max arr (- k 1))))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1))) \n          \
    \    (maximum (take arr (- k 1))\n                        (- k 1)))))\n", "  (if\
    \ (= k 0)\n      '()\n      (append (sort (take arr (- k 1))\n               \
    \     (lambda (x y)\n                      (if (> x y)\n                     \
    \     (- x y)\n                          (- y x))\n                      (- x\
    \ y)))\n              (maximum (take arr (- k 1))\n                       (- k\
    \ 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n \
    \   [else (cons (max (rest arr) (k - 1))\n                (maximum (rest arr)\
    \ (sub1 k)))]))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n\
    \        (if (> (car arr) max)\n            (cons max (maximum (cdr arr) (sub1\
    \ k)))\n            (maximum (cdr arr) (sub1 k)))))) ; else car = max, cdr = rest\
    \ of arr\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThis solution does not\
    \ work if the array is empty. Try it out with an empty array and k=0.\n<|/ c |>\n\
    <| c |>\nI fixed the problem you mentioned. I also added a note at the bottom\
    \ of the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (if (= k 0)\n      '()\n\
    \      (cons (max (rest arr) k) (maximum (rest arr) (sub1 k))))))\n", "  (if (=\
    \ k 0)\n      '()\n      (cons (max (rest arr) k) (maximum (rest arr) (sub1 k))))))\n",
  "  (if (= k 0)\n      '()\n      (append (list (max (rest arr) k))\n           \
    \     (maximum (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (=\
    \ k 0)\n      '()\n      (append (sort (subseq arr (- k 1))\n                \
    \    (lambda (x y) (if (> x y) x y)))\n              (maximum (subseq arr (- k\
    \ 1))\n                       (- k 1)))))\n", "  (if (= k 0)\n      '()\n    \
    \  (append (sort (take arr (- k 1))) (maximum (take arr (- k 1))\n           \
    \                                    (- k 1)))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n\
    \                (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n      '()\n\
    \      (cons (max (rest arr) (- k 1))\n            (maximum (rest arr) (- k 1)))))\n",
  "  (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1))) (maximum (take\
    \ arr k) (- k 1)))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max (car\
    \ arr)])\n        (if (> (car arr) max)\n            (cons max (maximum (cdr arr)\
    \ (sub1 k)))\n            (maximum (cdr arr) (sub1 k))))))\n", "  (if (= k 0)\n\
    \      (list 0)\n      (append (maximum (rest arr) (sub1 k)) (list (car arr)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (cons max \n                  (maximum (cdr arr) (sub1\
    \ k)))\n            (maximum (cdr arr) (sub1 k))))))\n", "  (if (= k 0)\n    \
    \  (list 0)\n      (let ([max (car arr)])\n        (if (> (car arr) max)\n   \
    \         (let ([max (car arr)])\n              (if (> (car arr) max)\n      \
    \            (let ([max (car arr)])\n                    (if (> (car arr) max)\n\
    \                        (let ([max (car arr)])\n                          (if\
    \ (> (car arr) max)\n                              (let ([max (car arr)])\n  \
    \                              (if (> (car arr) max)\n                       \
    \             (let ([max (car arr)])\n                                      (if\
    \ (> (car arr) max)\n                                          (let ([max (car\
    \ arr)])\n                                            (if (> (car arr) max)\n\
    \                                                (let ([max (car arr)])\n    \
    \                                              (if (> (car arr) max)\n       \
    \                                               (let ([max (car arr)])\n     \
    \                                                   (if (> (car arr) max)\n  \
    \                                                          (let ([max (car arr)])\n\
    \                                                              (if (> (car arr)\
    \ max)\n                                                                  (let\
    \ ([max (car arr)])\n                                                        \
    \            (if (> (car arr) max)\n                                         \
    \                               (let ([max (car arr)])\n                     \
    \                                                     (if (> (car arr) max)\n\
    \                                                                            \
    \  (let ([max (car arr)])\n                                                  \
    \                              (if (> (car arr) max)\n                       \
    \                                                             (let ([max (car\
    \ arr)])\n                                                                   \
    \                   (if (> (car arr) max)\n                                  \
    \                                                        (let ([max (car arr)])\n\
    \                                                                            \
    \                (if (> (car arr) max)\n                                     \
    \                                                           (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                (let ([max (car arr)])\n                    \
    \                                                                            \
    \                                    (if (> (car arr) max)\n                 \
    \                                                                            \
    \                                           (let ([max (car arr)])\n         \
    \                                                                            \
    \                                                     (if (> (car arr) ", "  (if\
    \ (= k 0)\n      '()\n      (append (list (max arr (- k 1))) (maximum (rest arr)\
    \ (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) (list 0)]\n\
    \    [(= k 0) (list arr)]\n    [else (append (maximum (rest arr) (- k 1))\n  \
    \                (list (max arr (- k 1))))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) (list 0)]\n    [(= k 0) (list arr)]\n    [else (cons\
    \ (max (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) (maximum (rest arr) (- k 1))) ]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1))) \n          \
    \    (maximum (drop arr (- k 1)) k))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr)\
    \ (- k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1)) (maximum (rest arr) (- k 1)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) \n                (maximum (rest arr) (- k 1))))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) (maximum (rest arr) (- k 1))) ]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
