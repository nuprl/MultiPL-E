name: HumanEval_0_has_close_elements
language: rkt
prompt: "#lang racket\n\n;; Check if in given list of numbers, are any two numbers\
  \ closer to each other than\n;; given threshold.\n(define (has_close_elements numbers\
  \ threshold)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate has_close_elements))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t)\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t)\n    (check-equal? (candidate (list 1.0 2.0\
  \ 5.9 4.0 5.0) 0.8) #f)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0\
  \ 2.0) 0.1) #t)\n    (check-equal? (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t)\n\
  \    (check-equal? (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f)\n))\n\n(test-humaneval)"
completions: ["  (let ((diff (- threshold (min numbers))))\n    (and (< (abs (- numbers\
    \ (min numbers))) diff)\n         (< (abs (- diff (max numbers))) diff))))\n",
  "  (let loop ((numbers (sort numbers))\n             (threshold threshold))\n  \
    \  (if (null? numbers)\n        #t\n        (let ((smallest (car numbers))\n \
    \             (largest (car numbers)))\n          (if (< (abs (- smallest largest))\
    \ threshold)\n              (loop (cdr numbers) threshold)\n              (loop\
    \ (cdr numbers) (- threshold threshold))))))))\n", "  (let loop ((numbers numbers)\n\
    \             (threshold threshold))\n    (cond ((null? numbers) #t)\n       \
    \   ((null? (cdr numbers)) #f)\n          ((< (car numbers) threshold) #f)\n \
    \         (else (loop (cdr numbers) threshold)))))\n", "  (let loop ((numbers\
    \ numbers)\n             (threshold threshold))\n    (cond ((null? numbers) #f)\n\
    \          ((null? (cdr numbers)) #t)\n          ((< (car numbers) threshold)\
    \ #f)\n          (else (loop (cdr numbers) threshold))))))\n", "  (let loop ((numbers\
    \ (sort numbers))\n             (threshold threshold))\n    (if (null? numbers)\n\
    \        #t\n        (let ((smallest (car numbers))\n              (largest (car\
    \ numbers)))\n          (if (< (abs (- smallest largest)) threshold)\n       \
    \       (loop (cdr numbers) threshold)\n              (loop (cdr numbers) (- threshold\
    \ threshold))))))))\n", "  (let loop ((numbers numbers)\n             (threshold\
    \ threshold))\n    (cond ((null? numbers) #t)\n          ((< (car numbers) threshold)\
    \ #f)\n          (else (loop (cdr numbers) threshold))))))\n", "  (let loop ((numbers\
    \ (sort numbers))\n             (found (empty-set))\n             (threshold threshold))\n\
    \    (if (empty? numbers)\n        found\n        (let ((n1 (car numbers))\n \
    \             (n2 (car numbers)))\n          (if (< (abs (- n1 n2)) threshold)\n\
    \              (loop (cdr numbers) (conj found n1) threshold)\n              (loop\
    \ (cdr numbers) found threshold))))))\n", "  (let loop ((numbers (list numbers))\n\
    \             (found #f))\n    (cond ((null? numbers) found)\n          ((< threshold\
    \ (car numbers))\n           (loop (cdr numbers) #f))\n          ((< threshold\
    \ (car (cdr numbers)))\n           (loop (cdr (cdr numbers)) #t)))\n    (not found)))\n",
  "  (let loop ((numbers numbers)\n             (threshold threshold))\n    (cond\
    \ ((null? numbers) #f)\n          ((< (car numbers) threshold) #t)\n         \
    \ (else (loop (cdr numbers) threshold))))))\n", "  (let ((closest-numbers (make-hash)))\n\
    \    (for ([i (in-range (length numbers))])\n      (let ((closest-number (min-key\n\
    \                             (hash-ref closest-numbers numbers)\n           \
    \                  i)))\n        (hash-set! closest-numbers numbers (- i closest-number)\
    \ i)\n        (hash-set! closest-numbers threshold closest-number))))\n  (hash-ref\
    \ closest-numbers numbers))\n", "  (let loop ((numbers numbers)\n            \
    \ (threshold threshold))\n    (cond ((null? numbers) #t)\n          ((null? (cdr\
    \ numbers)) #f)\n          ((< (car numbers) threshold) #t)\n          (else (loop\
    \ (cdr numbers) threshold))))))\n", "  (let loop ((numbers (sort numbers))\n \
    \            (found #f))\n    (if (null? numbers)\n        found\n        (let\
    \ ((smallest (car numbers))\n              (largest (caddr numbers)))\n      \
    \    (if (< threshold (abs (- smallest largest)))\n              (loop (cdr numbers)\
    \ #t)\n              (loop (cdr numbers) #f))))))\n", "  (let loop ((numbers (sort\
    \ numbers))\n             (found (empty-set))\n             (threshold threshold))\n\
    \    (cond ((null? numbers) #t)\n          ((< (car numbers) threshold) found)\n\
    \          ((< (cdr numbers) threshold) (loop (cdr numbers) (cons (car numbers)\
    \ found) threshold))\n          (else (loop (cdr numbers) (cons (car numbers)\
    \ found) threshold))))\n", "  (let loop ((numbers numbers)\n             (threshold\
    \ threshold))\n    (if (null? numbers)\n        #f\n        (let ((smallest (car\
    \ numbers))\n              (largest (car numbers)))\n          (if (< (abs (-\
    \ smallest largest)) threshold)\n              #t\n              (loop (cdr numbers)\n\
    \                    (- threshold (abs (- smallest largest))))))))\n", "  (let\
    \ loop ((numbers (sort numbers))\n             (found (empty-set))\n         \
    \    (found (empty-set))\n             (threshold (- threshold 1)))\n    (if (empty?\
    \ numbers)\n        found\n        (let ((number (first numbers))\n          \
    \    (next (first numbers)))\n          (if (< (abs (- number next)) threshold)\n\
    \              (loop (rest numbers) (conj found number) found)\n             \
    \ (loop (rest numbers) found (conj found next)))))))\n", "  (let loop ((numbers\
    \ (sort numbers))\n             (found (empty-set))\n             (threshold threshold))\n\
    \    (cond ((null? numbers) #t)\n          ((< (car numbers) threshold) #f)\n\
    \          ((> (car numbers) threshold) #t)\n          (else\n           (loop\
    \ (cdr numbers)\n                 (cons (car numbers) found)\n               \
    \  (- threshold (car numbers))))))\n", "  (let loop ((numbers (sort numbers))\n\
    \             (threshold threshold))\n    (if (null? numbers)\n        #f\n  \
    \      (let ((closest-numbers (car numbers))\n              (closest-threshold\
    \ (car threshold)))\n          (if (< (car numbers) (car threshold))\n       \
    \       (loop (cdr numbers) threshold)\n              (loop (cdr numbers) (cons\
    \ (car threshold) threshold)))))\n    #t)))\n", "  (let loop ((numbers (sort numbers))\n\
    \             (threshold threshold))\n    (if (null? numbers)\n        #f\n  \
    \      (let ((smallest (car numbers))\n              (largest (car numbers)))\n\
    \          (if (< (abs (- smallest largest)) threshold)\n              (loop (cdr\
    \ numbers) threshold)\n              (loop (cdr numbers) (- threshold threshold))))))))\n",
  "  (let loop ((numbers numbers)\n             (threshold threshold))\n    (cond\
    \ ((null? numbers) #f)\n          ((< (car numbers) threshold) #t)\n         \
    \ (else (loop (cdr numbers)\n                      (- threshold (car numbers))))))))\n",
  "  (let loop ((numbers numbers)\n             (threshold threshold))\n    (cond\
    \ ((null? numbers) #f)\n          ((< threshold (car numbers)) false)\n      \
    \    ((< threshold (cadr numbers)) true)\n          (else (loop (cdr numbers)\
    \ threshold))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
