name: HumanEval_46_fib4
language: rkt
prompt: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
  \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) ->\
  \ 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
  \ + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element\
  \ of the fib4 number sequence.  Do not use recursion.\n(define (fib4 n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n\
  \    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal?\
  \ (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4\
    \ (- n 3)) (fib4 (- n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n\
    \ 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3)\
    \ 0]\n        [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n\
    \ 4))))]))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4\
    \ (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (if (=\
    \ n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4\
    \ (- n 3))\n         (fib4 (- n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4\
    \ (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (-\
    \ n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4\
    \ (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (if (=\
    \ n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4\
    \ (- n 3))\n         (fib4 (- n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4\
    \ (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (cond [(= n\
    \ 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n     \
    \   [else (+ (fib4 (- n 4)) (fib4 (- n 3))\n                   (fib4 (- n 2))\n\
    \                   (fib4 (- n 1)))))])\n", "  (cond [(= n 0) 0]\n        [(=\
    \ n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n        [else (+ (fib4 (-\
    \ n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (if (= n 0)\n \
    \     0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n",
  "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4\
    \ (- n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4\
    \ (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (if (=\
    \ n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (-\
    \ n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4\
    \ (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (if (=\
    \ n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4\
    \ (- n 3))\n         (fib4 (- n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4\
    \ (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (cond [(= n\
    \ 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n     \
    \   [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3)\
    \ 0]\n        [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n\
    \ 4)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
