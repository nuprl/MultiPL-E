name: HumanEval_35_max_element
language: rkt
prompt: "#lang racket\n\n;; Return maximum element in the list.\n(define (max_element\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n\
  \    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list\
  \ 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) empty]\n    [(> (first l) (first l)) (max_element\
    \ (rest l))]\n    [else (max_element (rest l))]\n  )\n)\n", "  (if (null? l)\n\
    \      null\n      (if (> (car l) (cadr l))\n          (cadr l)\n          (max_element\
    \ (cdr l)))))\n", "  (cond\n    [(empty? l) 0]\n    [else (max 0 (car l))]))\n",
  "  (cond\n    [(empty? l) '()]\n    [(< (first l) (first l)) (max_element (rest\
    \ l))]\n    [else (max_element (rest l))]\n  ))\n", "  (cond\n    ((null? l) '())\n\
    \    ((< (car l) (cadr l)) (max_element (cdr l)))\n    (else (cons (car l) (max_element\
    \ (cdr l))))))\n", "  (cond\n    [(empty? l) empty]\n    [else (cons (car l) (max_element\
    \ (cdr l)))]))\n", "  (if (null? l)\n      '()\n      (if (> (car l) (cadr l))\n\
    \          (cadr l)\n          (max_element (cdr l)))))\n", "  (cond\n    ((null?\
    \ l) '())\n    ((< (car l) (cadr l)) (max_element (cdr l)))\n    (else (cons (car\
    \ l) (max_element (cdr l))))))\n", "  (cond\n    [(empty? l) empty]\n    [(> (first\
    \ l) (second l)) (max_element (rest l))]\n    [else (max_element (rest l))]))\n",
  "  (cond\n    [(empty? l) 0]\n    [else (max (first l) (max_element (rest l)))]))\n",
  "  (cond\n    ((null? l) '())\n    ((< (car l) (cadr l)) (max_element (cdr l)))\n\
    \    (else (max_element (cdr l)))))\n", "  (if (null? l)\n      '()\n      (let\
    \ ([m (first l)]\n            [rest (rest l)])\n        (if (> m (rest m))\n \
    \           m\n            (max_element rest)))))\n", "  (cond\n    [(empty? l)\
    \ 0]\n    [(< (first l) (max_element (rest l)))\n     (first l)]\n    [else (max_element\
    \ (rest l))]))\n", "  (cond\n    ((null? l) '())\n    ((< (car l) (cadr l)) (max_element\
    \ (cdr l)))\n    (else (cons (car l) (max_element (cdr l))))))\n", "  (cond\n\
    \    [(empty? l) 0]\n    [else (max (car l) (max_element (cdr l)))]))\n", "  (cond\n\
    \    [(empty? l) '()]\n    [(< (first l) (first l)) (max_element (rest l))]\n\
    \    [else (max_element (rest l))]\n  ))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(< (first l) (first l)) (max_element (rest l))]\n    [else (max_element\
    \ (rest l))]\n  )\n)\n", "  (if (null? l)\n      '()\n      (if (> (car l) (cadr\
    \ l))\n          (car l)\n          (max_element (cdr l)))))\n", "  (cond\n  \
    \  [(empty? l) empty]\n    [(< (first l) (first l)) (max_element (rest l))]\n\
    \    [else (max_element (rest l))]\n  ))\n", "  (cond\n    [(empty? l) '()]\n\
    \    [(< (first l) (second l)) (max_element (rest l))]\n    [else (max_element\
    \ (rest l))]\n  ))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
