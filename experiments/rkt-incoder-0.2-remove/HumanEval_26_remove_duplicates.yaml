name: HumanEval_26_remove_duplicates
language: rkt
prompt: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
  \ more than once.\n;; Keep order of elements left the same as in the input.\n(define\
  \ (remove_duplicates numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 1 2 3 2 4 3 5))\
  \ (list 1 4 5))\n))\n\n(test-humaneval)"
completions: ["  (if (null? numbers)\n      '()\n      (let ((count (length numbers)))\n\
    \        (if (= count 1)\n            (first numbers)\n            (append (remove_duplicates\
    \ (rest numbers)) (list (first numbers)))))))\n", "  (if (null? numbers)\n   \
    \   '()\n      (let ((count 0))\n        (cond ((null? (cdr numbers)) (cons (car\
    \ numbers) '()))\n              ((= (length numbers) count) (cons (car numbers)\
    \ '()))\n              ((= count (length numbers)) (cons (car numbers) '()))\n\
    \              (else (cons (car numbers) (remove_duplicates (cdr numbers)))))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (car numbers)\n            (remove_duplicates\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (cons (car numbers)\n\
    \            (remove_duplicates (cdr numbers)))))\n", "  (cond [(empty? numbers)\
    \ numbers]\n        [(member (first numbers) (remove_duplicates (rest numbers)))\
    \ \n         (cons (first numbers) (remove_duplicates (rest numbers)))]\n    \
    \    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n", " \
    \ (let loop ((numbers numbers)\n             (result '()))\n    (if (null? numbers)\n\
    \        result\n        (loop (cdr numbers)\n              (cons (car numbers)\n\
    \                    (loop (cdr numbers)\n                          result))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((head (car numbers))\n          \
    \  (tail (cdr numbers)))\n        (if (null? tail)\n            (cons head (remove_duplicates\
    \ '()))\n            (if (= head tail)\n                (cons head (remove_duplicates\
    \ '()))\n                (cons head (remove_duplicates tail)))))\n      )\n  )\n",
  "  (if (null? numbers)\n      '()\n      (cons (car numbers)\n            (remove_duplicates\
    \ (cdr numbers)))))\n", "  (let loop ((numbers numbers)\n             (result\
    \ '()))\n    (if (null? numbers)\n        result\n        (loop (rest numbers)\n\
    \              (cons (first numbers)\n                    (loop (rest numbers)\n\
    \                          result))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (cons (car numbers)\n            (remove_duplicates (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (car numbers)\n            (remove_duplicates\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((head (car\
    \ numbers))\n            (tail (cdr numbers)))\n        (if (null? tail)\n   \
    \         (cons head (remove_duplicates '()))\n            (if (= head tail)\n\
    \                (cons head (remove_duplicates '()))\n                (cons (cons\
    \ head (remove_duplicates tail)) (remove_duplicates '()))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (car numbers)\n            (remove_duplicates\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((count\
    \ 0))\n        (cond ((null? (rest numbers)) (cons (first numbers) numbers))\n\
    \              ((equal? (first numbers) (first count))\n               (remove_duplicates\
    \ (rest numbers)))\n              (else (cons (first numbers) (remove_duplicates\
    \ (rest numbers)))))))\n", "  (if (null? numbers)\n      '()\n      (cons (car\
    \ numbers)\n            (remove_duplicates (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (car numbers)\n            (remove_duplicates\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((count\
    \ 0))\n        (cond ((null? (rest numbers)) (cons (first numbers) numbers))\n\
    \              ((= (first numbers) (first count))\n               (remove_duplicates\
    \ numbers))\n              (else (cons (first numbers) (remove_duplicates numbers))))))\n",
  "  (let loop ((numbers numbers)\n             (result '()))\n    (if (null? numbers)\n\
    \        result\n        (loop (cdr numbers)\n              (cons (car numbers)\n\
    \                    (loop (cdr numbers)\n                          result))))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (car numbers)\n            (remove_duplicates\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((head (car\
    \ numbers))\n            (tail (cdr numbers)))\n        (if (null? tail)\n   \
    \         (cons head (remove_duplicates '()))\n            (if (= head tail)\n\
    \                (cons head (remove_duplicates '()))\n                (cons head\
    \ (remove_duplicates tail)))))\n      )\n      )\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
