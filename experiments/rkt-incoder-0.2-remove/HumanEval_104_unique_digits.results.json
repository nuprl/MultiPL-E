{
  "language": "rkt",
  "name": "HumanEval_104_unique_digits",
  "results": [
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cond [(even? (car x))\n             (cons (car x) \n                   (unique_digits (cdr x)))]\n            [else (cons (car x) \n                      (unique_digits (cdr x)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx__rljr3.rkt:21:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx__rljr3.rkt:22:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx__rljr3.rkt:23:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx__rljr3.rkt:24:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond ((null? x) '())\n        ((even? (car x))\n         (cons (car x) \n              (unique_digits (cdr x))))\n        (else (unique_digits (cdr x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond ((null? x) '())\n        ((even? (car x))\n         (cons (car x) \n              (unique_digits (cdr x))))\n        (else (unique_digits (cdr x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(zero? (first x)) x]\n    [else (cons (first x)\n                (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:19:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:20:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:21:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:22:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x) (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:17:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:18:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:19:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:20:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (car x)) (cons (car x) \n                              (unique_digits (cdr x)))]\n        [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeu21o3w.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeu21o3w.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeu21o3w.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeu21o3w.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(zero? (first x)) x]\n    [else (cons (first x)\n               (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp68qbynf0.rkt:19:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp68qbynf0.rkt:20:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp68qbynf0.rkt:21:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp68qbynf0.rkt:22:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(zero? (first x)) x]\n    [else (cons (first x) (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvbp74wd.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvbp74wd.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvbp74wd.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvbp74wd.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x) (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:17:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:18:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:19:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:20:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                        (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                         (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (let loop ((x x) (acc '()))\n        (if (null? x)\n            acc\n            (loop (cdr x) \n                  (cons (car x) acc)))))) \n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdaj2wxqr.rkt:21:4\nactual:     '(1 1422 33 15)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdaj2wxqr.rkt:22:4\nactual:     '(10 1422 323 152)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdaj2wxqr.rkt:23:4\nactual:     '(151 111 2033 12345)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdaj2wxqr.rkt:24:4\nactual:     '(31 103 135)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cond ((= (length x) 1)\n             (cons (car x) x))\n            (else (cons (car x)\n                      (unique_digits (cdr x)))))\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplvhyqwqd.rkt:22:4\nactual:     '(15 33 1422 1 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplvhyqwqd.rkt:23:4\nactual:     '(152 323 1422 10 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplvhyqwqd.rkt:24:4\nactual:     '(12345 2033 111 151 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplvhyqwqd.rkt:25:4\nactual:     '(135 103 31 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(zero? (first x)) x]\n    [else (cons (first x)\n                (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:19:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:20:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:21:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:22:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cond [(even? (car x))\n             (cons (car x) \n                   (unique_digits (cdr x)))]\n            [else (cons (car x) \n                       (unique_digits (cdr x)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjrb8ojlf.rkt:21:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjrb8ojlf.rkt:22:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjrb8ojlf.rkt:23:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjrb8ojlf.rkt:24:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (let ((y (unique_digits (cdr x))) \n            (z (unique_digits (cdr y))))\n        (if (null? y)\n            (cons (car x) z)\n            (if (< (car y) (car z))\n                (cons (car x) z)\n                (cons (car x) y)))))) \n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpk_otc241.rkt:11:35: y: unbound identifier\n  in: y\n  location...:\n   /tmp/tmpk_otc241.rkt:11:35\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(zero? (first x)) x]\n    [else (cons (first x)\n               (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp68qbynf0.rkt:19:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp68qbynf0.rkt:20:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp68qbynf0.rkt:21:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp68qbynf0.rkt:22:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond ((null? x) '())\n        ((even? (car x)) (cons (car x) \n                              (unique_digits (cdr x))))\n        (else (unique_digits (cdr x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_st4waxp.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_st4waxp.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_st4waxp.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_st4waxp.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xcocahf.rkt:17:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xcocahf.rkt:18:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xcocahf.rkt:19:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xcocahf.rkt:20:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                                (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9r0zl7qm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9r0zl7qm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9r0zl7qm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9r0zl7qm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                         (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xcocahf.rkt:17:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xcocahf.rkt:18:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xcocahf.rkt:19:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xcocahf.rkt:20:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x) (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:17:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:18:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:19:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:20:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond ((null? x) '())\n        ((even? (car x))\n         (cons (car x) \n              (unique_digits (cdr x))))\n        (else (unique_digits (cdr x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(zero? (first x)) x]\n    [else (cons (first x)\n                (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:19:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:20:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:21:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl61iq2p.rkt:22:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                        (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(zero? (first x)) x]\n    [else (cons (first x) (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvbp74wd.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvbp74wd.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvbp74wd.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvbp74wd.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                                (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9r0zl7qm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9r0zl7qm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9r0zl7qm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9r0zl7qm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wfh4asm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond ((null? x) '())\n        ((even? (car x))\n         (cons (car x) \n              (unique_digits (cdr x))))\n        (else (unique_digits (cdr x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpw5xjd.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (first x)) (cons (first x) \n                              (unique_digits (rest x)))]\n        [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_fpbwqi.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                         (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpga7nwy93.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (append (unique_digits (rest x))\n              (if (= (modulo x 10) 0)\n                  (cons (car x) '())\n                  (cons (car x) \n                        (unique_digits (cdr x)))))\n      )\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpidzij73f.rkt:23:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpidzij73f.rkt:24:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpidzij73f.rkt:25:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(151)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpidzij73f.rkt:26:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(31)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (append (unique_digits (cdr x))\n              (if (= (modulo x (expt 10 0)) 0)\n                  (cons (car x) '())\n                  (cons (car x) \n                        (unique_digits (cdr x)))))\n      )\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5drdh3w.rkt:23:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5drdh3w.rkt:24:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5drdh3w.rkt:25:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(151)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5drdh3w.rkt:26:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(31)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                        (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(zero? (first x)) x]\n    [else (cons (first x) \n              (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_qfassf.rkt:19:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_qfassf.rkt:20:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_qfassf.rkt:21:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_qfassf.rkt:22:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x)\n            (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:18:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:19:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:20:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp92w3vg.rkt:21:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                        (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnlrsx1nb.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond [(empty? x) '()]\n        [(even? (car x)) (cons (car x) \n                              (unique_digits (cdr x)))]\n        [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeu21o3w.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeu21o3w.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeu21o3w.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeu21o3w.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(zero? (first x)) x]\n    [else (cons (first x) \n              (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_qfassf.rkt:19:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_qfassf.rkt:20:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_qfassf.rkt:21:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_qfassf.rkt:22:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (cons (first x) (unique_digits (rest x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:17:4\nactual:     '(15 33 1422 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:18:4\nactual:     '(152 323 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:19:4\nactual:     '(12345 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1x9jk7.rkt:20:4\nactual:     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (if (null? x)\n      '()\n      (let ((y (unique_digits (cdr x))\n             (z (unique_digits x)))\n            (result (append (cons (car y) z) result)))\n        (if (null? y)\n            result\n            (append result (cons (car y) result))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp8wnex0w3.rkt:10:12: let: bad syntax (not an identifier and expression for a binding)\n  at: (y (unique_digits (cdr x)) (z (unique_digits x)))\n  in: (let ((y (unique_digits (cdr x)) (z (unique_digits x))) (result (append (cons (car y) z) result))) (if (null? y) result (append result (cons (car y) result))))\n  location...:\n   /tmp/tmp8wnex0w3.rkt:10:12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/racket/private/qq-and-or.rkt:101:61: loop\n   /work/arjunguha-research-group/software/racket/collects/racket/private/qq-and-or.rkt:50:20: go\n",
      "stdout": "",
      "timestamp": 1660028337
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:18:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:19:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:20:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p8wqnfm.rkt:21:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (car x)) (cons (car x) \n                          (unique_digits (cdr x)))]\n    [else (unique_digits (cdr x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4btgt3hj.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n                          (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:19:4\nactual:     '(1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:20:4\nactual:     '(152 1422 10)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:21:4\nactual:     '()\nexpected:   '(111 151)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknrwsdt5.rkt:22:4\nactual:     '()\nexpected:   '(31 135)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028336
    }
  ]
}