name: HumanEval_56_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"<\" and \">\".\n;; return True\
  \ if every opening bracket has a corresponding closing bracket.\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"<>\") #t)\n    (check-equal? (candidate \"<<><>>\"\
  ) #t)\n    (check-equal? (candidate \"<><><<><>><>\") #t)\n    (check-equal? (candidate\
  \ \"<><><<<><><>><>><<><><<>>>\") #t)\n    (check-equal? (candidate \"<<<><>>>>\"\
  ) #f)\n    (check-equal? (candidate \"><<>\") #f)\n    (check-equal? (candidate\
  \ \"<\") #f)\n    (check-equal? (candidate \"<<<<\") #f)\n    (check-equal? (candidate\
  \ \">\") #f)\n    (check-equal? (candidate \"<<>\") #f)\n    (check-equal? (candidate\
  \ \"<><><<><>><>><<>\") #f)\n    (check-equal? (candidate \"<><><<><>><>>><>\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (let ((brackets-stack '())\n        (brackets-stack-length '()))\n\
    \    (cond\n      [(empty? brackets)\n       (equal? (length brackets-stack) brackets-stack-length)]\n\
    \      [(equal? (first brackets) (first brackets-stack))\n       (equal? (second\
    \ brackets) (second brackets-stack))\n       (equal? (third (first brackets))\
    \ (third (first brackets-stack)))\n       (equal? (fourth (first brackets)) (fourth\
    \ (first brackets-stack)))]\n      [else\n       (push (first brackets) brackets-stack)\n\
    \       (push (first brackets) brackets-stack-length)\n       (push (first brackets)\
    \ brackets-stack)\n       (push (first brackets) brackets-stack-length)\n    \
    \   (push (first brackets) brackets-stack)\n       (push (first brackets) brackets-stack-length)\n\
    \       (push (first brackets) brackets-stack)\n       (push (first brackets)\
    \ brackets-stack-length)\n       (push (first brackets) brackets-stack)\n    \
    \   (push (first brackets) brackets-stack-length)\n       (push (first brackets)\
    \ brackets-stack)\n       (push (first brackets) brackets-stack-length)\n    \
    \   (push (first brackets) brackets-stack)\n       (push (first brackets) brackets-stack-length)\n\
    \       (push (first brackets) brackets-stack)\n       (push (first brackets)\
    \ brackets-stack-length)\n       (push (first brackets) brackets-stack)\n    \
    \   (push (first brackets) brackets-stack-length)\n       (push (first brackets)\
    \ brackets-stack)\n       (push (first brackets) brackets-stack-length)\n    \
    \   (push (first brackets) brackets-stack)\n       (push (first brackets) brackets-stack-length)\n\
    \       (push (first brackets) brackets-stack)\n       (push (first brackets)\
    \ brackets-stack-length)\n       (push (first brackets) brackets-stack)\n    \
    \   (push (first brackets) brackets-stack-length)\n       (push (first brackets)\
    \ brackets-stack)\n       (push (first brackets) brackets-stack-length)\n    \
    \   (push (first brackets) brackets-stack)\n       (push (first brackets) brackets-stack-length)\n\
    \       (push (first brackets) brackets-stack)\n       (push (first brackets)\
    \ brackets-stack-length)\n       (push (first brackets) brackets-stack)\n    \
    \   (push (first brackets) brackets-stack-length)\n       (push (first brackets)\
    \ brackets-stack", "  (let ((bracket-stack '())\n        (bracket-stack-len '()))\n\
    \    (cond\n      [(empty? brackets) #t]\n      [(equal? (first brackets) '<)\n\
    \       (set! bracket-stack (cons (first brackets) bracket-stack))\n       (set!\
    \ bracket-stack-len (add1 (length bracket-stack)))]\n      [(equal? (first brackets)\
    \ '>)\n       (cond\n         [(equal? (first bracket-stack) '<)\n          (set!\
    \ bracket-stack (cdr bracket-stack))\n          (set! bracket-stack-len (add1\
    \ (length bracket-stack)))]\n         [(equal? (first bracket-stack) '>)\n   \
    \       (cond\n            [(equal? (first bracket-stack) '<)\n             (set!\
    \ bracket-stack (cdr bracket-stack))\n             (set! bracket-stack-len (add1\
    \ (length bracket-stack)))]\n            [(equal? (first bracket-stack) '>)\n\
    \             (cond\n               [(equal? (first bracket-stack) '<)\n     \
    \           (set! bracket-stack (cdr bracket-stack))\n                (set! bracket-stack-len\
    \ (add1 (length bracket-stack)))]\n               [(equal? (first bracket-stack)\
    \ '>)\n                (cond\n                  [(equal? (first bracket-stack)\
    \ '<)\n                   (set! bracket-stack (cdr bracket-stack))\n         \
    \          (set! bracket-stack-len (add1 (length bracket-stack)))]\n         \
    \         [(equal? (first bracket-stack) '>)\n                   (cond\n     \
    \                [(equal? (first bracket-stack) '<)\n                      (set!\
    \ bracket-stack (cdr bracket-stack))\n                      (set! bracket-stack-len\
    \ (add1 (length bracket-stack)))]\n                     [(equal? (first bracket-stack)\
    \ '>)\n                      (cond\n                         [(equal? (first bracket-stack)\
    \ '<)\n                          (set! bracket-stack (cdr bracket-stack))\n  \
    \                        (set! bracket-stack-len (add1 (length bracket-stack)))]\n\
    \                         [(equal? (first bracket-stack) '>)\n               \
    \           (cond\n                            [(equal? (first bracket-stack)\
    \ '<)\n                             (set! bracket-stack (cdr bracket-stack))\n\
    \                             (set! bracket-stack-len (add1 (length bracket-stack)))]\n\
    \                            ", "  (let ((bracket-stack '())\n        (bracket-count\
    \ 0))\n    (cond\n      [(empty? brackets)\n       (equal? bracket-count 0)]\n\
    \      [(equal? (car brackets) \"<\")\n       (cond\n         [(empty? bracket-stack)\n\
    \          (equal? bracket-count 0)]\n         [(equal? (car bracket-stack) \"\
    >\")\n          (set! bracket-count (+ 1 bracket-count))\n          (set! bracket-stack\
    \ (cdr bracket-stack))\n          (cond\n            [(empty? bracket-stack)\n\
    \             (equal? bracket-count 0)]\n            [else\n             (cond\n\
    \               [(equal? (car bracket-stack) \">\")\n                (set! bracket-count\
    \ (+ 1 bracket-count))\n                (set! bracket-stack (cdr bracket-stack))]\n\
    \               [(equal? (car bracket-stack) \"<\")\n                (set! bracket-count\
    \ (+ 1 bracket-count))\n                (set! bracket-stack (cdr bracket-stack))\n\
    \                (cond\n                  [(empty? bracket-stack)\n          \
    \         (equal? bracket-count 0)]\n                  [else\n               \
    \    (cond\n                     [(equal? (car bracket-stack) \">\")\n       \
    \               (set! bracket-count (+ 1 bracket-count))\n                   \
    \   (set! bracket-stack (cdr bracket-stack))]\n                     [(equal? (car\
    \ bracket-stack) \"<\")\n                      (set! bracket-count (+ 1 bracket-count))\n\
    \                      (set! bracket-stack (cdr bracket-stack))\n            \
    \          (cond\n                        [(empty? bracket-stack)\n          \
    \               (equal? bracket-count 0)]\n                        [else\n   \
    \                      (cond\n                           [(equal? (car bracket-stack)\
    \ \">\")\n                            (set! bracket-count (+ 1 bracket-count))\n\
    \                            (set! bracket-stack (cdr bracket-stack))]\n     \
    \                      [(equal? (car bracket-stack) \"<\")\n                 \
    \           (set! bracket-count (+ 1 bracket-count))\n                       \
    \     (set! bracket-stack (cdr bracket-stack))\n                            (cond\n\
    \                              [(empty? bracket-stack)\n                     \
    \          (equal? bracket-count 0)]\n                              [else\n  \
    \                             (cond\n                                 [(equal?\
    \ (car bracket-stack) \">\")\n                                  (set! bracket-count\
    \ (+ 1 bracket-count))\n                                  (set! bracket-stack",
  "  (let ((brackets-count 0))\n    (cond\n      [(empty? brackets) #t]\n      [(equal?\
    \ (car brackets) \"<\") (set! brackets-count (+ brackets-count 1))]\n      [(equal?\
    \ (car brackets) \">\") (set! brackets-count (+ brackets-count 1))]\n      [else\
    \ (set! brackets-count (+ brackets-count 1))]\n      [else (set! brackets-count\
    \ (+ brackets-count 1))]\n      [else (set! brackets-count (+ brackets-count 1))]\n\
    \      [else (set! brackets-count (+ brackets-count 1))]\n      [else (set! brackets-count\
    \ (+ brackets-count 1))]\n      [else (set! brackets-count (+ brackets-count 1))]\n\
    \      [else (set! brackets-count (+ brackets-count 1))]\n      [else (set! brackets-count\
    \ (+ brackets-count 1))]\n      [else (set! brackets-count (+ brackets-count 1))]\n\
    \      [else (set! brackets-count (+ brackets-count 1))]\n      [else (set! brackets-count\
    \ (+ brackets-count 1))]\n      [else (set! brackets-count (+ brackets-count 1))]\n\
    \      [else (set! brackets-count (+ brackets-count 1))]\n      [else (set! brackets-count\
    \ (+ brackets-count 1))]\n      [else (set! brackets-count (+ brackets-count 1))]\n\
    \      [else (set! brackets-count (+ brackets-count 1))]\n      [else (set! brackets-count\
    \ (+ brackets-count 1))]\n      [else (set! brackets-count (+ brackets-count 1))]\n\
    \      [else (set! brackets-count (+ brackets-count 1))]\n      [else (set! brackets-count\
    \ (+ brackets-count 1))]\n      [else (set! brackets-count (+ brackets-count 1))]\n\
    \      [else (set! brackets-count (+ brackets-count 1))]\n      [else (set! brackets-count\
    \ (+ brackets-count 1))]\n      [else (set! brackets-count (+ brackets-count 1))]\n\
    \      [else (set! brackets-count (+ brackets-count 1))]\n      [else (set! brackets-count\
    \ (+ brackets-count 1))]\n      [else (set! brackets-count (+ brackets-count 1))]\n\
    \      [else (set! brackets-count (+ bracket", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) \"<\") (correct_bracketing (substring brackets\
    \ 1 -1))]\n    [else (correct_bracketing (substring brackets 1 -1))]))\n", " \
    \ (cond\n    [(empty? brackets) true]\n    [(equal? (first brackets) \"<\") (correct_bracketing\
    \ (substring brackets 1 -1))]\n    [else false]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) \"<\") (correct_bracketing (substring brackets\
    \ 1 -1))]\n    [(equal? (first brackets) \">\") (correct_bracketing (substring\
    \ brackets 1 -1))]\n    [else (correct_bracketing (substring brackets 1 -1))]))\n",
  "  (cond\n    [(empty? brackets) true]\n    [(equal? (first brackets) '<) false]\n\
    \    [else (correct_bracketing (rest brackets))]))\n", "  (let ((bracket-count\
    \ 0))\n    (cond\n      [(empty? brackets) false]\n      [(equal? (first brackets)\
    \ \"<\") (cond\n                                        [(equal? (rest brackets)\
    \ \">\") true]\n                                        [(equal? (rest brackets)\
    \ \"</\") false])]\n      [(equal? (first brackets) \">\") (cond\n           \
    \                             [(equal? (rest brackets) \"</\") true]\n       \
    \                                 [(equal? (rest brackets) \"<\") false])]\n \
    \     [(equal? (first brackets) \"</\") (cond\n                              \
    \          [(equal? (rest brackets) \"<\") false]\n                          \
    \              [(equal? (rest brackets) \">\") false])]\n      [else (cond\n \
    \              [(equal? (first brackets) \"<\") (cond\n                      \
    \                        [(equal? (rest brackets) \">\") true]\n             \
    \                                 [(equal? (rest brackets) \"</\") false])]\n\
    \               [(equal? (first brackets) \">\") (cond\n                     \
    \                         [(equal? (rest brackets) \"</\") true]\n           \
    \                                   [(equal? (rest brackets) \"<\") false])]\n\
    \               [(equal? (first brackets) \"</\") (cond\n                    \
    \                          [(equal? (rest brackets) \"<\") false]\n          \
    \                                    [(equal? (rest brackets) \">\") false])]\n\
    \               [else (cond\n                      [(equal? (first brackets) \"\
    <\") (cond\n                                                    [(equal? (rest\
    \ brackets) \">\") true]\n                                                   \
    \ [(equal? (rest brackets) \"</\") false])]\n                      [(equal? (first\
    \ brackets) \">\") (cond\n                                                   \
    \ [(equal? (rest brackets) \"</\") true]\n                                   \
    \                 [(equal? (rest brackets) \"<\") false])]\n                 \
    \     [(equal? (first brackets) \"</\") (cond\n                              \
    \                      [(equal? (rest brackets) \"<\") false]\n              \
    \                                      [(equal? (rest brackets) \">\") false])]\n\
    \                      [else (cond\n                               [(equal? (first\
    \ brackets) \"<\") (cond\n                                                   \
    \         [(equal? (rest brackets) \">\") true]\n                            \
    \                                [(equal? (rest brackets) \"</\") false])]\n \
    \                              [(equal? (first brackets) \">\") (cond\n      \
    \                                                      [(equal? (rest brackets)\
    \ \"</\") true]\n                                                            [(equal?\
    \ (rest brackets) \"<\") false])]\n                               [(equal? (first\
    \ brackets) \"</\") (cond\n                                                  \
    \          [(equal? (rest brackets) \"<\") false]\n                          \
    \                                  [(equal? (rest brackets) \">\") false])]\n\
    \                               [else (cond\n                                \
    \      [(equal? (first brackets) \"<\") (cond\n                              \
    \  ", "  (let ((bracket-count (length brackets)))\n    (cond\n      [(empty? brackets)\
    \ false]\n      [(equal? (first brackets) (first brackets)) true]\n      [else\
    \ (or (equal? (first brackets) (substring brackets 0 1)) (equal? (first brackets)\
    \ (substring brackets 1 2)))]\n    )\n  )\n)\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) \"<\") (correct_bracketing (substring brackets\
    \ 1 -1))]\n    [else (correct_bracketing (substring brackets 1 -1))]))\n", " \
    \ (cond\n    [(empty? brackets) true]\n    [(equal? (first brackets) \"<\") (correct_bracketing\
    \ (substring brackets 1 -1))]\n    [(equal? (first brackets) \">\") (correct_bracketing\
    \ (substring brackets 1 +1))]\n    [else false]))\n", "  (cond\n    [(empty? brackets)\
    \ false]\n    [(equal? (first brackets) '<) true]\n    [else (correct_bracketing\
    \ (substring brackets 1 -1))]))\n", "  (let ((brackets-stack '())\n        (brackets-stack-len\
    \ 0\n                   (lambda (bracket)\n                     (set! brackets-stack\
    \ (cons bracket brackets-stack))\n                     (set! brackets-stack-len\
    \ (+ brackets-stack-len 1)))\n        (brackets-stack-len 0))\n    (let loop ((i\
    \ 0))\n      (if (< i brackets-stack-len)\n          (set! i (+ i 1))\n      \
    \    (return (= i brackets-stack-len))))))\n", "  (let ((opening-brackets '())\n\
    \        (closing-brackets '()))\n    (cond\n      [(empty? brackets) true]\n\
    \      [(equal? (first brackets) '<)\n       (cond\n         [(empty? opening-brackets)\
    \ false]\n         [(equal? (first opening-brackets) '>)\n          (cond\n  \
    \          [(empty? closing-brackets) false]\n            [(equal? (first closing-brackets)\
    \ '>)\n             (cond\n               [(empty? opening-brackets) true]\n \
    \              [(equal? (first opening-brackets) '<)\n                (cond\n\
    \                  [(empty? closing-brackets) true]\n                  [(equal?\
    \ (first closing-brackets) '<)\n                   (cond\n                   \
    \  [(empty? opening-brackets) false]\n                     [(equal? (first opening-brackets)\
    \ '>)\n                      (cond\n                        [(empty? closing-brackets)\
    \ false]\n                        [(equal? (first closing-brackets) '>)\n    \
    \                     (cond\n                           [(empty? opening-brackets)\
    \ false]\n                           [(equal? (first opening-brackets) '<)\n \
    \                           (cond\n                              [(empty? closing-brackets)\
    \ false]\n                              [(equal? (first closing-brackets) '<)\n\
    \                               (cond\n                                 [(empty?\
    \ opening-brackets) false]\n                                 [(equal? (first opening-brackets)\
    \ '>)\n                                  (cond\n                             \
    \       [(empty? closing-brackets) false]\n                                  \
    \  [(equal? (first closing-brackets) '>)\n                                   \
    \  (cond\n                                       [(empty? opening-brackets) true]\n\
    \                                       [(equal? (first opening-brackets) '<)\n\
    \                                        (cond\n                             \
    \             [(empty? closing-brackets) true]\n                             \
    \             [(equal? (first closing-brackets) '<)\n                        \
    \                   (cond\n                                             [(empty?\
    \ opening-brackets) false]\n                                             [(equal?\
    \ (first opening-brackets) '>)\n                                             \
    \ (cond\n                                                [(empty? closing-brackets)\
    \ false]\n                                                [(equal? (first closing-brackets)\
    \ '>)\n                                                 (cond\n              \
    \                                     [(empty? opening-brackets) true]\n     \
    \                                              [(equal? (first opening-brackets)\
    \ '<)\n                                                    (cond\n           \
    \                                           [(empty? closing-brackets) true]",
  "  (cond\n    [(empty? brackets) true]\n    [(equal? (first brackets) '<) false]\n\
    \    [else (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \"<\") (correct_bracketing (substring\
    \ brackets 1 -1))]\n    [else (correct_bracketing (substring brackets 1 -1))]))\n",
  "  (cond\n    [(empty? brackets) true]\n    [(equal? (first brackets) '<) (correct_bracketing\
    \ (substring brackets 1 -1))]\n    [else false]))\n", "  (cond\n    [(empty? brackets)\
    \ true]\n    [(equal? (first brackets) \"<\") (correct_bracketing (substring brackets\
    \ 1 -1))]\n    [(equal? (first brackets) \">\") (correct_bracketing (substring\
    \ brackets 1 +1))]\n    [else false]))\n", "  (let ((opening-brackets '())\n \
    \       (closing-brackets '()))\n    (cond\n      [(empty? brackets) (empty? closing-brackets)]\n\
    \      [(equal? (first brackets) '<) (push (first brackets) opening-brackets)\n\
    \        (push (first brackets) closing-brackets)]\n      [else (push (first brackets)\
    \ opening-brackets)\n        (push (first brackets) closing-brackets)\n      \
    \  (correct_bracketing (substring (next brackets) 1))]\n      [else (correct_bracketing\
    \ (substring (next brackets) 1))]\n      [else (correct_bracketing (substring\
    \ (next brackets) 1))]\n      [else (correct_bracketing (substring (next brackets)\
    \ 1))]\n      [else (correct_bracketing (substring (next brackets) 1))]\n    \
    \  [else (correct_bracketing (substring (next brackets) 1))]\n      [else (correct_bracketing\
    \ (substring (next brackets) 1))]\n      [else (correct_bracketing (substring\
    \ (next brackets) 1))]\n      [else (correct_bracketing (substring (next brackets)\
    \ 1))]\n      [else (correct_bracketing (substring (next brackets) 1))]\n    \
    \  [else (correct_bracketing (substring (next brackets) 1))]\n      [else (correct_bracketing\
    \ (substring (next brackets) 1))]\n      [else (correct_bracketing (substring\
    \ (next brackets) 1))]\n      [else (correct_bracketing (substring (next brackets)\
    \ 1))]\n      [else (correct_bracketing (substring (next brackets) 1))]\n    \
    \  [else (correct_bracketing (substring (next brackets) 1))]\n      [else (correct_bracketing\
    \ (substring (next brackets) 1))]\n      [else (correct_bracketing (substring\
    \ (next brackets) 1))]\n      [else (correct_bracketing (substring (next brackets)\
    \ 1))]\n      [else (correct_bracketing (substring (next brackets) 1))]\n    \
    \  [else (correct_bracketing (substring (next brackets) 1))]\n      [else (correct_bracketing\
    \ (substring (next brackets) 1))]\n      [else (correct_bracketing (substring\
    \ (next brackets) 1))]\n      [else (correct_bracketing (substring (next brackets)\
    \ 1))]\n      [else (correct_bracketing (substring (next brackets) 1))]\n    \
    \  [else (correct_bracketing (substring (next brackets) 1))]\n      [else (correct_bracketing\
    \ (substring (next brackets) 1))]\n      [else (correct_bracketing (substring\
    \ (next brackets) 1))]\n      [else (correct_bracketing (substring (next brackets)\
    \ 1))]\n      [else (correct_bracketing (substring (next bracket"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
