name: HumanEval_78_hex_key
language: rkt
prompt: "#lang racket\n\n;; You have been tasked to write a function that receives\
  \ \n;; a hexadecimal number as a string and counts the number of hexadecimal \n\
  ;; digits that are primes (prime number, or a prime, is a natural number \n;; greater\
  \ than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal\
  \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume\
  \ the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are\
  \ always uppercase.\n;; Examples:\n(define (hex_key num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n\
  \    (check-equal? (candidate \"AB\") 1)\n    (check-equal? (candidate \"1077E\"\
  ) 2)\n    (check-equal? (candidate \"ABED1A33\") 4)\n    (check-equal? (candidate\
  \ \"2020\") 2)\n    (check-equal? (candidate \"123456789ABCDEF0\") 6)\n    (check-equal?\
  \ (candidate \"112233445566778899AABBCCDDEEFF00\") 12)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons\
    \ 'B hex_key (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C hex_key\
    \ (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D hex_key (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E hex_key (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'E) (cons 'F hex_key (hex_key (sub1 num)))]\n\
    \    [else (cons (first num) hex_key (hex_key (sub1 num)))]))\n", "  (cond\n \
    \   [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (subseq\
    \ num 1 2)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (subseq num 1 3)))]\n\
    \    [(equal? (first num) 'C) (cons 'D (hex_key (subseq num 1 4)))]\n    [(equal?\
    \ (first num) 'D) (cons 'E (hex_key (subseq num 1 5)))]\n    [(equal? (first num)\
    \ 'E) (cons 'F (hex_key (subseq num 1 6)))]\n    [else (cons (first num) (hex_key\
    \ (subseq num 1 6)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code\
    \ (car num)) 'A) (cons 'B (hex_key (cdr num)))]\n    [(equal? (char-code (car\
    \ num)) 'B) (cons 'C (hex_key (cdr num)))]\n    [(equal? (char-code (car num))\
    \ 'C) (cons 'D (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) 'D) (cons\
    \ 'E (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) 'E) (cons 'F (hex_key\
    \ (cdr num)))]\n    [else (cons (char-code (car num)) (hex_key (cdr num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code (car num)) #\\A) '(#\\\
    A)]\n    [(equal? (char-code (car num)) #\\B) '(#\\B)]\n    [(equal? (char-code\
    \ (car num)) #\\C) '(#\\C)]\n    [(equal? (char-code (car num)) #\\D) '(#\\D)]\n\
    \    [(equal? (char-code (car num)) #\\E) '(#\\E)]\n    [(equal? (char-code (car\
    \ num)) #\\F) '(#\\F)]\n    [else (cons (char-code (car num)) (hex_key (rest num)))]))\n",
  "  (cond [(number? num) num]\n        [else (error \"Hexadecimal number expected\"\
    )]))\n", "  (cond [(string=? (string-ref num 0) \"A\") 2]\n        [(string=?\
    \ (string-ref num 0) \"B\") 3]\n        [(string=? (string-ref num 0) \"C\") 4]\n\
    \        [(string=? (string-ref num 0) \"D\") 5]\n        [(string=? (string-ref\
    \ num 0) \"E\") 6]\n        [(string=? (string-ref num 0) \"F\") 7]\n        [(string=?\
    \ (string-ref num 0) \"0\") 8]\n        [(string=? (string-ref num 0) \"1\") 9]\n\
    \        [(string=? (string-ref num 0) \"2\") 10]\n        [(string=? (string-ref\
    \ num 0) \"3\") 11]\n        [(string=? (string-ref num 0) \"4\") 12]\n      \
    \  [(string=? (string-ref num 0) \"5\") 13]\n        [(string=? (string-ref num\
    \ 0) \"6\") 14]\n        [(string=? (string-ref num 0) \"7\") 15]\n        [(string=?\
    \ (string-ref num 0) \"8\") 16]\n        [(string=? (string-ref num 0) \"9\")\
    \ 17]\n        [(string=? (string-ref num 0) \"a\") 18]\n        [(string=? (string-ref\
    \ num 0) \"b\") 19]\n        [(string=? (string-ref num 0) \"c\") 20]\n      \
    \  [(string=? (string-ref num 0) \"d\") 21]\n        [(string=? (string-ref num\
    \ 0) \"e\") 22]\n        [(string=? (string-ref num 0) \"f\") 23]\n        [(string=?\
    \ (string-ref num 0) \"A\") 24]\n        [(string=? (string-ref num 0) \"B\")\
    \ 25]\n        [(string=? (string-ref num 0) \"C\") 26]\n        [(string=? (string-ref\
    \ num 0) \"D\") 27]\n        [(string=? (string-ref num 0) \"E\") 28]\n      \
    \  [(string=? (string-ref num 0) \"F\") 29]\n        [(string=? (string-ref num\
    \ 0) \"0\") 30]\n        [(string=? (string-ref num 0) \"1\") 31]\n        [(string=?\
    \ (string-ref num 0) \"2\") 32]\n        [(string=? (string-ref num 0) \"3\")\
    \ 33]\n        [(string=? (string-ref num 0) \"4\") 34]\n        [(string=? (string-ref\
    \ num 0) \"5\") 35]\n        [(string=? (string-ref num 0) \"6\") 36]\n      \
    \  [(string=? (string-ref num 0) \"7\") 37]\n        [(string=? (string-ref num\
    \ 0) \"8\") 38]\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons 'B (hex_key (rest num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (cons 'E (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (cons 'F (hex_key (rest num)))]\n    [else (cons (first num) (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (car num)) #\\A) (+ 1 (hex_key(cdr num)))]\n    [else (+ 1 (hex_key(cdr num)))]))\n",
  "  (cond [(number? num) num]\n        [else (error \"Invalid input: ~a\" num)]))\n",
  "  (cond [(number? num) num]\n        [(empty? num) '()]\n        [(equal? (char-code\
    \ (first num)) 'A) (cons (first num) (hex_key (rest num)))]\n        [(equal?\
    \ (char-code (first num)) 'B) (cons (first num) (hex_key (rest num)))]\n     \
    \   [(equal? (char-code (first num)) 'C) (cons (first num) (hex_key (rest num)))]\n\
    \        [(equal? (char-code (first num)) 'D) (cons (first num) (hex_key (rest\
    \ num)))]\n        [(equal? (char-code (first num)) 'E) (cons (first num) (hex_key\
    \ (rest num)))]\n        [(equal? (char-code (first num)) 'F) (cons (first num)\
    \ (hex_key (rest num)))]\n        [else (cons (first num) (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key(cdr\
    \ num)))]\n    [else (+ 1 (hex_key(cdr num)))]))\n", "  (cond\n    [(empty? num)\
    \ '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first num) 'C)\
    \ (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (sub1 num)))]\n\
    \    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons\
    \ 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (sub1\
    \ num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'B) (hex_key (subseq num 1 3))]\n    [(equal? (first\
    \ num) 'C) (hex_key (subseq num 1 4))]\n    [(equal? (first num) 'D) (hex_key\
    \ (subseq num 1 5))]\n    [(equal? (first num) 'E) (hex_key (subseq num 1 6))]\n\
    \    [(equal? (first num) 'F) (hex_key (subseq num 1 7))]))\n", "  (cond\n   \
    \ [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'A \n               \
    \               (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'B\
    \ \n                              (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (cons 'C \n                              (hex_key (sub1 num)))]\n \
    \   [(equal? (first num) 'D) (cons 'D \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'E \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (cons 'F \n  \
    \                            (hex_key (sub1 num)))]\n    [else (cons (first num)\
    \ (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons 'B (hex_key (rest num)))]\n    [(equal? (first num) 'B)\
    \ (cons 'C (hex_key (rest num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (cons 'F (hex_key (rest num)))]\n    [else (cons\
    \ (first num) (hex_key (rest num)))]))\n", "  (cond [(number? num) num]\n    \
    \    [else (error \"hex_key expects a string\")]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons\
    \ 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (sub1\
    \ num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond [(number?\
    \ num) #t]\n        [else (error \"Not a number\")]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (hex_key (substring num 1 2))]\n   \
    \ [(equal? (first num) 'B) (hex_key (substring num 1 2))]\n    [(equal? (first\
    \ num) 'C) (hex_key (substring num 1 2))]\n    [(equal? (first num) 'D) (hex_key\
    \ (substring num 1 2))]\n    [(equal? (first num) 'E) (hex_key (substring num\
    \ 1 2))]\n    [(equal? (first num) 'F) (hex_key (substring num 1 2))]\n    [(equal?\
    \ (first num) '0) (hex_key (substring num 1 2))]\n    [(equal? (first num) '1)\
    \ (hex_key (substring num 1 2))]\n    [(equal? (first num) '2) (hex_key (substring\
    \ num 1 2))]\n    [(equal? (first num) '3) (hex_key (substring num 1 2))]\n  \
    \  [(equal? (first num) '4) (hex_key (substring num 1 2))]\n    [(equal? (first\
    \ num) '5) (hex_key (substring num 1 2))]\n    [(equal? (first num) '6) (hex_key\
    \ (substring num 1 2))]\n    [(equal? (first num) '7) (hex_key (substring num\
    \ 1 2))]\n    [(equal? (first num) '8) (hex_key (substring num 1 2))]\n    [(equal?\
    \ (first num) '9) (hex_key (substring num 1 2))]\n    [else (hex_key (substring\
    \ num 1 2))]\n  )\n)\n", "  (cond\n    [(empty? num) 'A']\n    [(equal? (first\
    \ num) 'A) 'B']\n    [(equal? (first num) 'B) 'C']\n    [(equal? (first num) 'C)\
    \ 'D']\n    [(equal? (first num) 'D) 'E']\n    [(equal? (first num) 'E) 'F']\n\
    \    [else (hex_key (rest num))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (char-code (car num)) #\\A) (hex_key (cdr num))]\n    [else (cons (char-code\
    \ (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n  \
    \  [(equal? (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons\
    \ 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else\
    \ (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 'A']\n\
    \    [(equal? (char-code (num)) (hex-digit (car num)))\n     (hex_key (cdr num))]\n\
    \    [else (hex_key (cdr num))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal?\
    \ (first num) 'A) (hex_key (rest num))]\n    [else (hex_key (rest num))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'B) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'C) (hex_key (sub1 num))]\n    [(equal? (first num) 'D) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'E) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'F) (hex_key (sub1 num))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'A \n     \
    \                         (hex_key (sub1 num)))]\n    [(equal? (first num) 'B)\
    \ (cons 'B \n                              (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'C \n                              (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'D) (cons 'D \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'E \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (cons 'F \n  \
    \                            (hex_key (sub1 num)))]\n    [else (cons (first num)\
    \ (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons 'B (hex_key (rest num)))]\n    [(equal? (first num) 'B)\
    \ (cons 'C (hex_key (rest num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (cons 'F (hex_key (rest num)))]\n    [else (cons\
    \ (first num) (hex_key (rest num)))]))\n", "  (cond [(number? num) num]\n    \
    \    [else (error \"hex_key expects a number\")]))\n", "  (cond [(number? num)\
    \ num]\n        [(empty? num) '()]\n        [(= (length num) 2) (cons '2 num)]\n\
    \        [(= (length num) 3) (cons '3 num)]\n        [(= (length num) 4) (cons\
    \ '5 num)]\n        [(= (length num) 5) (cons '7 num)]\n        [(= (length num)\
    \ 6) (cons 'B num)]\n        [(= (length num) 7) (cons 'D num)]\n        [(= (length\
    \ num) 8) (cons 'E num)]\n        [(= (length num) 9) (cons 'F num)]\n       \
    \ [(= (length num) 10) (cons 'A num)]\n        [(= (length num) 11) (cons 'B num)]\n\
    \        [(= (length num) 12) (cons 'C num)]\n        [(= (length num) 13) (cons\
    \ 'D num)]\n        [(= (length num) 14) (cons 'E num)]\n        [(= (length num)\
    \ 15) (cons 'F num)]\n        [(= (length num) 16) (cons 'A num)]\n        [(=\
    \ (length num) 17) (cons 'B num)]\n        [(= (length num) 18) (cons 'C num)]\n\
    \        [(= (length num) 19) (cons 'D num)]\n        [(= (length num) 20) (cons\
    \ 'E num)]\n        [(= (length num) 21) (cons 'F num)]\n        [(= (length num)\
    \ 22) (cons 'A num)]\n        [(= (length num) 23) (cons 'B num)]\n        [(=\
    \ (length num) 24) (cons 'C num)]\n        [(= (length num) 25) (cons 'D num)]\n\
    \        [(= (length num) 26) (cons 'E num)]\n        [(= (length num) 27) (cons\
    \ 'F num)]\n        [(= (length num) 28) (cons 'A num)]\n        [(= (length num)\
    \ 29) (cons 'B num)]\n        [(= (length num) 30) (cons 'C num)]\n        [(=\
    \ (length num) 31) (cons 'D num)]\n        [(= (length num) 32) (cons 'E num)]\n\
    \        [(= (length num) 33) (cons 'F num)]\n        [(= (length num) 34) (cons\
    \ 'A ", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B\
    \ (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E)\
    \ (cons 'F (hex_key (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1\
    \ num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A)\
    \ (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else (cons (first num) (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons 'B (hex_key (rest num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (cons 'E (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (cons 'F (hex_key (rest num)))]\n    [else (cons (first num) (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code\
    \ (car num)) #\\A) (hex_key (cdr num))]\n    [else (cons (char-code (car num))\
    \ (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first\
    \ num) 'A) (cons 'B hex_key (hex_key (rest num)))]\n    [(equal? (first num) 'B)\
    \ (cons 'C hex_key (hex_key (rest num)))]\n    [(equal? (first num) 'C) (cons\
    \ 'D hex_key (hex_key (rest num)))]\n    [(equal? (first num) 'D) (cons 'E hex_key\
    \ (hex_key (rest num)))]\n    [(equal? (first num) 'E) (cons 'F hex_key (hex_key\
    \ (rest num)))]\n    [else (cons (first num) hex_key (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(= (length num) 2) (cons '2 num)]\n    [(=\
    \ (length num) 3) (cons '3 num)]\n    [(= (length num) 4) (cons '5 num)]\n   \
    \ [(= (length num) 5) (cons '7 num)]\n    [(= (length num) 6) (cons 'B num)]\n\
    \    [(= (length num) 7) (cons 'D num)]\n    [else (hex_key (substring num 0 1))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) 'A']\n    [(number? (car num)) (hex_key\
    \ (cdr num))]\n    [else (hex_key (cdr num))]))\n", "  (cond\n    [(empty? num)\
    \ 'A']\n    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n    [(equal?\
    \ (first num) 'B) (hex_key (subseq num 1 3))]\n    [(equal? (first num) 'C) (hex_key\
    \ (subseq num 1 4))]\n    [(equal? (first num) 'D) (hex_key (subseq num 1 5))]\n\
    \    [(equal? (first num) 'E) (hex_key (subseq num 1 6))]\n    [(equal? (first\
    \ num) 'F) (hex_key (subseq num 1 7))]))\n", "  (cond\n    [(empty? num) 'A']\n\
    \    [(equal? (first num) 'A) (hex_key (subseq num 1))]\n    [(equal? (first num)\
    \ 'B) (hex_key (subseq num 1))]\n    [(equal? (first num) 'C) (hex_key (subseq\
    \ num 1))]\n    [(equal? (first num) 'D) (hex_key (subseq num 1))]\n    [(equal?\
    \ (first num) 'E) (hex_key (subseq num 1))]\n    [(equal? (first num) 'F) (hex_key\
    \ (subseq num 1))]\n    [else (hex_key (subseq num 1))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (char-code (car num)) #\\A) (cons (car num)\
    \ (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) #\\B) (cons (car num)\
    \ (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) #\\C) (cons (car num)\
    \ (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) #\\D) (cons (car num)\
    \ (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) #\\E) (cons (car num)\
    \ (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) #\\F) (cons (car num)\
    \ (hex_key (cdr num)))]\n    [else (cons (car num) (hex_key (cdr num)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'B) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'C) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'D) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'E) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'F) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '0) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '1) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '2) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '3) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '4) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '5) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '6) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '7) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '8) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '9) (hex_key (subseq num 1 2))]\n    [else (cons (first num) (hex_key (subseq\
    \ num 1 2)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons 'A \n                              (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (cons 'B \n                              (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'C) (cons 'C \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'D \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'E \n  \
    \                            (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'F) (cons 'F \n                              (hex_key (sub1 num)))]\n    [else\
    \ (cons (first num) \n               (hex_key (sub1 num)))]))\n", "  (cond\n \
    \   [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'A \n             \
    \                 (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'B\
    \ \n                              (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (cons 'C \n                              (hex_key (sub1 num)))]\n \
    \   [(equal? (first num) 'D) (cons 'D \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'E \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (cons 'F \n  \
    \                            (hex_key (sub1 num)))]\n    [else (cons (first num)\
    \ (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal?\
    \ (char-code (first num)) (hex-digit 'A)) (hex_key (rest num))]\n    [else (hex_key\
    \ (rest num))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons 'B hex_key (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons\
    \ 'C hex_key (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D hex_key\
    \ (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E hex_key (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F hex_key (hex_key (sub1\
    \ num)))]\n    [else (cons (first num) hex_key (hex_key (sub1 num)))]))\n", " \
    \ (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (cons 'D (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (cons 'E (hex_key (rest num)))]\n    [(equal? (first num) 'E) (cons\
    \ 'F (hex_key (rest num)))]\n    [else (cons (first num) (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 'A']\n    [(equal? (char-code (first num)) (hex-digit\
    \ 'A)) 'A']\n    [(equal? (char-code (first num)) (hex-digit 'B)) 'B']\n    [(equal?\
    \ (char-code (first num)) (hex-digit 'C)) 'C']\n    [(equal? (char-code (first\
    \ num)) (hex-digit 'D)) 'D']\n    [(equal? (char-code (first num)) (hex-digit\
    \ 'E)) 'E']\n    [(equal? (char-code (first num)) (hex-digit 'F)) 'F']\n    [else\
    \ (hex_key (rest num))]\n  )\n)\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons '(2) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'B) (cons '(3) (hex_key (rest num)))]\n    [(equal? (first num) 'C) (cons '(5)\
    \ (hex_key (rest num)))]\n    [(equal? (first num) 'D) (cons '(7) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'E) (cons '(11) (hex_key (rest num)))]\n \
    \   [(equal? (first num) 'F) (cons '(13) (hex_key (rest num)))]\n    [else (cons\
    \ (first num) (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (char-code (car num)) #\\A) (hex_key (cdr num))]\n    [else (cons\
    \ (char-code (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num)\
    \ '()]\n    [(equal? (char-code (car num)) #\\A) (hex_key (cdr num))]\n    [(equal?\
    \ (char-code (car num)) #\\B) (hex_key (cdr num))]\n    [(equal? (char-code (car\
    \ num)) #\\C) (hex_key (cdr num))]\n    [(equal? (char-code (car num)) #\\D) (hex_key\
    \ (cdr num))]\n    [(equal? (char-code (car num)) #\\E) (hex_key (cdr num))]\n\
    \    [(equal? (char-code (car num)) #\\F) (hex_key (cdr num))]\n    [else (cons\
    \ (char-code (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code (first num)) (digit-char\
    \ 'A)) (cons 2 (hex_key (rest num)))]\n    [(equal? (char-code (first num)) (digit-char\
    \ 'B)) (cons 3 (hex_key (rest num)))]\n    [(equal? (char-code (first num)) (digit-char\
    \ 'C)) (cons 5 (hex_key (rest num)))]\n    [(equal? (char-code (first num)) (digit-char\
    \ 'D)) (cons 7 (hex_key (rest num)))]\n    [(equal? (char-code (first num)) (digit-char\
    \ 'E)) (cons 11 (hex_key (rest num)))]\n    [(equal? (char-code (first num)) (digit-char\
    \ 'F)) (cons 13 (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n",
  "  (cond\n    [(empty? num) 'A']\n    [(equal? (first num) 'A) 'B']\n    [(equal?\
    \ (first num) 'B) 'C']\n    [(equal? (first num) 'C) 'D']\n    [(equal? (first\
    \ num) 'D) 'E']\n    [(equal? (first num) 'E) 'F']\n    [else (hex_key (rest num))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (subseq\
    \ num 1 2))]\n    [(equal? (first num) 'B) (hex_key (subseq num 1 2))]\n    [(equal?\
    \ (first num) 'C) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'D) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'E) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'F) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '0) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '1) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '2) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '3) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '4) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '5) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '6) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '7) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '8) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '9) (hex_key\
    \ (subseq num 1 2))]\n    [else (cons (first num) (hex_key (subseq num 1 2)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons '(2) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'B) (cons '(3) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (cons '(5) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (cons '(7) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (cons '(11) (hex_key (rest num)))]\n    [(equal? (first num) 'F) (cons '(13)\
    \ (hex_key (rest num)))]\n    [else (cons (first num) (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'D) (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons\
    \ 'F (hex_key (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'A \n     \
    \                           (hex_key (subseq num 1 2)))]\n    [(equal? (first\
    \ num) 'B) (cons 'B \n                                (hex_key (subseq num 1 2)))]\n\
    \    [(equal? (first num) 'C) (cons 'C \n                                (hex_key\
    \ (subseq num 1 2)))]\n    [(equal? (first num) 'D) (cons 'D \n              \
    \                  (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'E)\
    \ (cons 'E \n                                (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'F) (cons 'F \n                                (hex_key\
    \ (subseq num 1 2)))]\n    [else (cons (first num)\n                (hex_key (subseq\
    \ num 1 2)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons 'A \n                              (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (cons 'B \n                              (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'C) (cons 'C \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'D \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'E \n  \
    \                            (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'F) (cons 'F \n                              (hex_key (sub1 num)))]\n    [else\
    \ (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 'A']\n\
    \    [(equal? (char-code (first num)) (hex-digit 'A)) (hex_key (rest num))]\n\
    \    [else (hex_key (rest num))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal?\
    \ (first num) 'A) (hex_key (sub1 num))]\n    [(equal? (first num) 'B) (hex_key\
    \ (sub1 num))]\n    [(equal? (first num) 'C) (hex_key (sub1 num))]\n    [(equal?\
    \ (first num) 'D) (hex_key (sub1 num))]\n    [(equal? (first num) 'E) (hex_key\
    \ (sub1 num))]\n    [(equal? (first num) 'F) (hex_key (sub1 num))]\n    [else\
    \ (hex_key (sub1 num))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code\
    \ (car num)) 'A) (cons 'B (hex_key (cdr num)))]\n    [(equal? (char-code (car\
    \ num)) 'B) (cons 'C (hex_key (cdr num)))]\n    [(equal? (char-code (car num))\
    \ 'C) (cons 'D (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) 'D) (cons\
    \ 'E (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) 'E) (cons 'F (hex_key\
    \ (cdr num)))]\n    [else (cons (char-code (car num)) (hex_key (cdr num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'A \n     \
    \                         (hex_key (subseq num 1 2)))]\n    [(equal? (first num)\
    \ 'B) (cons 'B \n                              (hex_key (subseq num 1 3)))]\n\
    \    [(equal? (first num) 'C) (cons 'C \n                              (hex_key\
    \ (subseq num 1 4)))]\n    [(equal? (first num) 'D) (cons 'D \n              \
    \                (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (cons\
    \ 'E \n                              (hex_key (subseq num 1 6)))]\n    [(equal?\
    \ (first num) 'F) (cons 'F \n                              (hex_key (subseq num\
    \ 1 7)))]\n    [else (cons (first num) (hex_key (subseq num 1 8)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'B) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'C) (hex_key (sub1 num))]\n    [(equal? (first num) 'D) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'E) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'F) (hex_key (sub1 num))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 'A']\n    [(equal? (char-code (car num)) 'A) (hex_key\n\
    \                                 (substring num 1 1))]\n    [(equal? (char-code\
    \ (car num)) 'B) (hex_key\n                                 (substring num 1 1))]\n\
    \    [(equal? (char-code (car num)) 'C) (hex_key\n                           \
    \      (substring num 1 1))]\n    [(equal? (char-code (car num)) 'D) (hex_key\n\
    \                                 (substring num 1 1))]\n    [(equal? (char-code\
    \ (car num)) 'E) (hex_key\n                                 (substring num 1 1))]\n\
    \    [(equal? (char-code (car num)) 'F) (hex_key\n                           \
    \      (substring num 1 1))]\n    [else (hex_key\n            (substring num 1\
    \ (+ 2 (length (substring num 0 1)))))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 2)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (subseq num 3)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key (subseq num 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq\
    \ num 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 6)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 7)))]\n    [else (+ 1 (hex_key\
    \ (subseq num 8)))]\n  )\n)\n", "  (cond [(string=? num '()) '()]\n        [(string=?\
    \ (string-ref num 0) 'A) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0)\
    \ 'B) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0) 'C) '(2 3 5 7 B D)]\n\
    \        [(string=? (string-ref num 0) 'D) '(2 3 5 7 B D)]\n        [(string=?\
    \ (string-ref num 0) 'E) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0)\
    \ 'F) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0) '0) '(2 3 5 7 B D)]\n\
    \        [(string=? (string-ref num 0) '1) '(2 3 5 7 B D)]\n        [(string=?\
    \ (string-ref num 0) '2) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0)\
    \ '3) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0) '4) '(2 3 5 7 B D)]\n\
    \        [(string=? (string-ref num 0) '5) '(2 3 5 7 B D)]\n        [(string=?\
    \ (string-ref num 0) '6) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0)\
    \ '7) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0) '8) '(2 3 5 7 B D)]\n\
    \        [(string=? (string-ref num 0) '9) '(2 3 5 7 B D)]\n        [(string=?\
    \ (string-ref num 0) 'A) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0)\
    \ 'B) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0) 'C) '(2 3 5 7 B D)]\n\
    \        [(string=? (string-ref num 0) 'D) '(2 3 5 7 B D)]\n        [(string=?\
    \ (string-ref num 0) 'E) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0)\
    \ 'F) '(2 3 5 7 B D)]\n        [(string=? (string-ref num 0) '0) '(2 3 5 7 B D)]\n\
    \        [(string=? (string-ref num 0) '1) '(2 3 5 7 B D)]\n        [(string=?\
    \ (string-ref num ", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons 'A \n                              (hex_key (subseq num 1 2)))]\n\
    \    [(equal? (first num) 'B) (cons 'B \n                              (hex_key\
    \ (subseq num 1 3)))]\n    [(equal? (first num) 'C) (cons 'C \n              \
    \                (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (cons\
    \ 'D \n                              (hex_key (subseq num 1 5)))]\n    [(equal?\
    \ (first num) 'E) (cons 'E \n                              (hex_key (subseq num\
    \ 1 6)))]\n    [(equal? (first num) 'F) (cons 'F \n                          \
    \    (hex_key (subseq num 1 7)))]\n    [else (cons (first num) (hex_key (subseq\
    \ num 1 8)))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal? (char-code\
    \ (car num)) 'A) (hex_key\n                                 (substring num 1 1))]\n\
    \    [(equal? (char-code (car num)) 'B) (hex_key\n                           \
    \      (substring num 1 2))]\n    [(equal? (char-code (car num)) 'C) (hex_key\n\
    \                                 (substring num 1 3))]\n    [(equal? (char-code\
    \ (car num)) 'D) (hex_key\n                                 (substring num 1 4))]\n\
    \    [(equal? (char-code (car num)) 'E) (hex_key\n                           \
    \      (substring num 1 5))]\n    [(equal? (char-code (car num)) 'F) (hex_key\n\
    \                                 (substring num 1 6))]\n    [else (hex_key\n\
    \             (substring num 1 (+ 2 (char-code (car num))))))))\n", "  (cond\n\
    \    [(empty? num) 'A']\n    [(equal? (first num) 'A) (hex_key (rest num))]\n\
    \    [else (cons (first num) (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'B) (cons 'C (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D (hex_key (subseq num 1)))]\n    [(equal? (first num)\
    \ 'D) (cons 'E (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (cons\
    \ 'F (hex_key (subseq num 1)))]\n    [else (cons (first num) (hex_key (subseq\
    \ num 1)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(= (length num) 2) (cons\
    \ '(2 3) (hex_key (rest num)))]\n    [(= (length num) 3) (cons '(2 3 5) (hex_key\
    \ (rest num)))]\n    [(= (length num) 4) (cons '(2 3 5 7) (hex_key (rest num)))]\n\
    \    [(= (length num) 5) (cons '(2 3 5 7 11) (hex_key (rest num)))]\n    [(= (length\
    \ num) 6) (cons '(2 3 5 7 11 13) (hex_key (rest num)))]\n    [(= (length num)\
    \ 7) (cons '(2 3 5 7 11 13 17) (hex_key (rest num)))]\n    [(= (length num) 8)\
    \ (cons '(2 3 5 7 11 13 17 19) (hex_key (rest num)))]\n    [(= (length num) 9)\
    \ (cons '(2 3 5 7 11 13 17 19 23) (hex_key (rest num)))]\n    [(= (length num)\
    \ 10) (cons '(2 3 5 7 11 13 17 19 23 29) (hex_key (rest num)))]\n    [(= (length\
    \ num) 11) (cons '(2 3 5 7 11 13 17 19 23 29 31) (hex_key (rest num)))]\n    [(=\
    \ (length num) 12) (cons '(2 3 5 7 11 13 17 19 23 29 31 37) (hex_key (rest num)))]\n\
    \    [(= (length num) 13) (cons '(2 3 5 7 11 13 17 19 23 29 31 37 43) (hex_key\
    \ (rest num)))]\n    [(= (length num) 14) (cons '(2 3 5 7 11 13 17 19 23 29 31\
    \ 37 43 49) (hex_key (rest num)))]\n    [(= (length num) 15) (cons '(2 3 5 7 11\
    \ 13 17 19 23 29 31 37 43 49 53) (hex_key (rest num)))]\n    [(= (length num)\
    \ 16) (cons '(2 3 5 7 11 13 17 19 23 29 31 37 43 49 53 59) (hex_key (rest num)))]\n\
    \    [(= (length num) 17) (cons '(2 3 5 7 11 13 17 19 23 29 31 37 43 49 53 59\
    \ 61) (hex_key (rest num)))]\n    [(= ", "  (cond\n    [(empty? num) '()]\n  \
    \  [(equal? (char-code (first num)) #\\A) (hex_key (rest num))]\n    [else (cons\
    \ (first num) (hex_key (rest num)))]))\n", "  (cond [(number? num) num]\n    \
    \    [else (error \"Not a number\")]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (char-code (car num)) (char #\\A)) (hex_key (cdr num))]\n    [else\
    \ (cons (char-code (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'B) (cons 'C (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (cons 'D (hex_key (rest num)))]\n    [(equal? (first num) 'D) (cons\
    \ 'E (hex_key (rest num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (rest\
    \ num)))]\n    [else (cons (first num) (hex_key (rest num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D)\
    \ (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key\
    \ (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (substring num\
    \ 1 2))]\n    [(equal? (first num) 'B) (hex_key (substring num 1 2))]\n    [(equal?\
    \ (first num) 'C) (hex_key (substring num 1 2))]\n    [(equal? (first num) 'D)\
    \ (hex_key (substring num 1 2))]\n    [(equal? (first num) 'E) (hex_key (substring\
    \ num 1 2))]\n    [(equal? (first num) 'F) (hex_key (substring num 1 2))]\n  \
    \  [else (cons (first num) (hex_key (substring num 2)))]))\n", "  (cond\n    [(empty?\
    \ num) 'A']\n    [(equal? (first num) 'A) (hex_key (sub1 num))]\n    [(equal?\
    \ (first num) 'B) (hex_key (sub1 num))]\n    [(equal? (first num) 'C) (hex_key\
    \ (sub1 num))]\n    [(equal? (first num) 'D) (hex_key (sub1 num))]\n    [(equal?\
    \ (first num) 'E) (hex_key (sub1 num))]\n    [(equal? (first num) 'F) (hex_key\
    \ (sub1 num))]\n    [else (hex_key (sub1 num))]))\n", "  (cond\n    [(empty? num)\
    \ '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first num) 'C)\
    \ (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (sub1 num)))]\n\
    \    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond [(string=?\
    \ (string-ref num 0) \"A\") 2]\n        [(string=? (string-ref num 0) \"B\") 3]\n\
    \        [(string=? (string-ref num 0) \"C\") 4]\n        [(string=? (string-ref\
    \ num 0) \"D\") 5]\n        [(string=? (string-ref num 0) \"E\") 6]\n        [(string=?\
    \ (string-ref num 0) \"F\") 7]\n        [(string=? (string-ref num 0) \"0\") 8]\n\
    \        [(string=? (string-ref num 0) \"1\") 9]\n        [(string=? (string-ref\
    \ num 0) \"2\") 10]\n        [(string=? (string-ref num 0) \"3\") 11]\n      \
    \  [(string=? (string-ref num 0) \"4\") 12]\n        [(string=? (string-ref num\
    \ 0) \"5\") 13]\n        [(string=? (string-ref num 0) \"6\") 14]\n        [(string=?\
    \ (string-ref num 0) \"7\") 15]\n        [(string=? (string-ref num 0) \"8\")\
    \ 16]\n        [(string=? (string-ref num 0) \"9\") 17]\n        [(string=? (string-ref\
    \ num 0) \"a\") 18]\n        [(string=? (string-ref num 0) \"b\") 19]\n      \
    \  [(string=? (string-ref num 0) \"c\") 20]\n        [(string=? (string-ref num\
    \ 0) \"d\") 21]\n        [(string=? (string-ref num 0) \"e\") 22]\n        [(string=?\
    \ (string-ref num 0) \"f\") 23]\n        [(string=? (string-ref num 0) \"0\")\
    \ 24]\n        [(string=? (string-ref num 0) \"1\") 25]\n        [(string=? (string-ref\
    \ num 0) \"2\") 26]\n        [(string=? (string-ref num 0) \"3\") 27]\n      \
    \  [(string=? (string-ref num 0) \"4\") 28]\n        [(string=? (string-ref num\
    \ 0) \"5\") 29]\n        [(string=? (string-ref num 0) \"6\") 30]\n        [(string=?\
    \ (string-ref num 0) \"7\") 31]\n        [(string=? (string-ref num 0) \"8\")\
    \ 32]\n        [(string=? (string-ref num 0) \"9\") 33]\n        [(string=? (string-ref\
    \ num 0) \"A\") 34]\n        [(string=? (string-ref num 0) \"B\") 35]\n      \
    \  [(string=? (string-ref num 0) \"C\") 36]\n        [(string=? (string-ref num\
    \ 0) \"D\") 37]\n        [(string=? (string-ref num 0) \"E\") 38]\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key(cdr\
    \ num)))]\n    [else (+ 1 (hex_key(cdr num)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key(cdr num)))]\n   \
    \ [(equal? (char-code (car num)) #\\B) (+ 1 (hex_key(cdr num)))]\n    [(equal?\
    \ (char-code (car num)) #\\C) (+ 1 (hex_key(cdr num)))]\n    [(equal? (char-code\
    \ (car num)) #\\D) (+ 1 (hex_key(cdr num)))]\n    [(equal? (char-code (car num))\
    \ #\\E) (+ 1 (hex_key(cdr num)))]\n    [(equal? (char-code (car num)) #\\F) (+\
    \ 1 (hex_key(cdr num)))]\n    [else (+ 1 (hex_key(cdr num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D)\
    \ (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key\
    \ (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(= (length num) 1) (cons 'A (hex_key (substring\
    \ num 0 1)))]\n    [(= (length num) 2) (cons 'B (hex_key (substring num 0 1)))]\n\
    \    [(= (length num) 3) (cons 'C (hex_key (substring num 0 1)))]\n    [(= (length\
    \ num) 4) (cons 'D (hex_key (substring num 0 1)))]\n    [(= (length num) 5) (cons\
    \ 'E (hex_key (substring num 0 1)))]\n    [(= (length num) 6) (cons 'F (hex_key\
    \ (substring num 0 1)))]\n    [(= (length num) 7) (cons 'G (hex_key (substring\
    \ num 0 1)))]\n    [(= (length num) 8) (cons 'H (hex_key (substring num 0 1)))]\n\
    \    [(= (length num) 9) (cons 'I (hex_key (substring num 0 1)))]\n    [(= (length\
    \ num) 10) (cons 'J (hex_key (substring num 0 1)))]\n    [(= (length num) 11)\
    \ (cons 'K (hex_key (substring num 0 1)))]\n    [(= (length num) 12) (cons 'L\
    \ (hex_key (substring num 0 1)))]\n    [(= (length num) 13) (cons 'M (hex_key\
    \ (substring num 0 1)))]\n    [(= (length num) 14) (cons 'N (hex_key (substring\
    \ num 0 1)))]\n    [(= (length num) 15) (cons 'O (hex_key (substring num 0 1)))]\n\
    \    [(= (length num) 16) (cons 'P (hex_key (substring num 0 1)))]\n    [(= (length\
    \ num) 17) (cons 'Q (hex_key (substring num 0 1)))]\n    [(= (length num) 18)\
    \ (cons 'R (hex_key (substring num 0 1)))]\n    [(= (length num) 19) (cons 'S\
    \ (hex_key (substring num 0 1)))]\n    [(= (length num) 20) (cons 'T (hex_key\
    \ (substring num 0 1)))]\n    [(= (length num) 21) (cons 'U (hex_key (substring\
    \ num 0 1)))]\n    [(= (length num) 22) (cons 'V (hex_key (", "  (cond\n    [(empty?\
    \ num) '()]\n    [(= (length num) 1) '(cons (char->integer (car num)) '())]\n\
    \    [(= (length num) 2) '(cons (char->integer (car num)) (hex_key (cdr num)))]\n\
    \    [(= (length num) 3) '(cons (char->integer (car num)) (hex_key (cdr num))\
    \ (hex_key (cdr num)))]\n    [(= (length num) 4) '(cons (char->integer (car num))\
    \ (hex_key (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)))]\n    [(= (length\
    \ num) 5) '(cons (char->integer (car num)) (hex_key (cdr num)) (hex_key (cdr num))\
    \ (hex_key (cdr num)) (hex_key (cdr num)))]\n    [(= (length num) 6) '(cons (char->integer\
    \ (car num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key\
    \ (cdr num)) (hex_key (cdr num)))]\n    [(= (length num) 7) '(cons (char->integer\
    \ (car num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key\
    \ (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)))]\n    [(= (length num) 8)\
    \ '(cons (char->integer (car num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key\
    \ (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key\
    \ (cdr num)))]\n    [(= (length num) 9) '(cons (char->integer (car num)) (hex_key\
    \ (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key\
    \ (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)) (hex_key (cdr num)))]\n \
    \   [(= (length num) 10) '(con", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'B) (hex_key\
    \ (subseq num 1 3))]\n    [(equal? (first num) 'C) (hex_key (subseq num 1 4))]\n\
    \    [(equal? (first num) 'D) (hex_key (subseq num 1 5))]\n    [(equal? (first\
    \ num) 'E) (hex_key (subseq num 1 6))]\n    [(equal? (first num) 'F) (hex_key\
    \ (subseq num 1 7))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code\
    \ (first num)) 'A) (cons 'B hex_key (hex_key (rest num)))]\n    [(equal? (char-code\
    \ (first num)) 'B) (cons 'C hex_key (hex_key (rest num)))]\n    [(equal? (char-code\
    \ (first num)) 'C) (cons 'D hex_key (hex_key (rest num)))]\n    [(equal? (char-code\
    \ (first num)) 'D) (cons 'E hex_key (hex_key (rest num)))]\n    [(equal? (char-code\
    \ (first num)) 'E) (cons 'F hex_key (hex_key (rest num)))]\n    [else (cons (char-code\
    \ (first num)) hex_key (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num)\
    \ '()]\n    [(= (length num) 1) (cons (string->list (char->hex (first num))) '())]\n\
    \    [else (cons (string->list (char->hex (first num))) (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'A \n     \
    \                          (hex_key (sub1 num)))]\n    [(equal? (first num) 'B)\
    \ (cons 'B \n                               (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'C \n                               (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'D) (cons 'D \n                               (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'E \n                    \
    \           (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (cons 'F \n \
    \                              (hex_key (sub1 num)))]\n    [else (cons (first\
    \ num) \n                (hex_key (sub1 num)))]))\n", "  (cond [(empty? num) 0]\n\
    \        [(equal? (char-code (car num)) (digit-char 'A)) (+ 1 (hex_key\n     \
    \                                                    (substring num 0 (- (length\
    \ num) 1)))]\n        [(equal? (char-code (car num)) (digit-char 'B)) (+ 1 (hex_key\n\
    \                                                         (substring num 0 (-\
    \ (length num) 1)))]\n        [(equal? (char-code (car num)) (digit-char 'C))\
    \ (+ 1 (hex_key\n                                                         (substring\
    \ num 0 (- (length num) 1)))]\n        [(equal? (char-code (car num)) (digit-char\
    \ 'D)) (+ 1 (hex_key\n                                                       \
    \  (substring num 0 (- (length num) 1)))]\n        [(equal? (char-code (car num))\
    \ (digit-char 'E)) (+ 1 (hex_key\n                                           \
    \              (substring num 0 (- (length num) 1)))]\n        [(equal? (char-code\
    \ (car num)) (digit-char 'F)) (+ 1 (hex_key\n                                \
    \                         (substring num 0 (- (length num) 1)))]\n        [else\
    \ (+ 1 (hex_key (substring num 0 (- (length num) 1))))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (hex_key (substring num 1 2))]\n   \
    \ [(equal? (first num) 'B) (hex_key (substring num 1 2))]\n    [(equal? (first\
    \ num) 'C) (hex_key (substring num 1 2))]\n    [(equal? (first num) 'D) (hex_key\
    \ (substring num 1 2))]\n    [(equal? (first num) 'E) (hex_key (substring num\
    \ 1 2))]\n    [(equal? (first num) 'F) (hex_key (substring num 1 2))]\n    [else\
    \ (hex_key (substring num 1 2))]))\n", "  (cond [(number? num) num]\n        [else\
    \ (error \"Not a number\")]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first num) 'B)\
    \ (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else (cons\
    \ (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 'A']\n\
    \    [(equal? (first num) 'A) (hex_key (substring num 1 1))]\n    [(equal? (first\
    \ num) 'B) (hex_key (substring num 1 2))]\n    [(equal? (first num) 'C) (hex_key\
    \ (substring num 1 3))]\n    [(equal? (first num) 'D) (hex_key (substring num\
    \ 1 4))]\n    [(equal? (first num) 'E) (hex_key (substring num 1 5))]\n    [(equal?\
    \ (first num) 'F) (hex_key (substring num 1 6))]\n    [else (hex_key (substring\
    \ num 1 6))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons 'B (hex_key (rest num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (cons 'E (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (cons 'F (hex_key (rest num)))]\n    [else (cons (first num) (hex_key\
    \ (rest num)))]))\n", "  (cond [(string=? (string-ref num 0) \"A\") 0]\n     \
    \   [(string=? (string-ref num 0) \"B\") 1]\n        [(string=? (string-ref num\
    \ 0) \"C\") 2]\n        [(string=? (string-ref num 0) \"D\") 3]\n        [(string=?\
    \ (string-ref num 0) \"E\") 4]\n        [(string=? (string-ref num 0) \"F\") 5]\n\
    \        [(string=? (string-ref num 0) \"0\") 6]\n        [(string=? (string-ref\
    \ num 0) \"1\") 7]\n        [(string=? (string-ref num 0) \"2\") 8]\n        [(string=?\
    \ (string-ref num 0) \"3\") 9]\n        [(string=? (string-ref num 0) \"4\") 10]\n\
    \        [(string=? (string-ref num 0) \"5\") 11]\n        [(string=? (string-ref\
    \ num 0) \"6\") 12]\n        [(string=? (string-ref num 0) \"7\") 13]\n      \
    \  [(string=? (string-ref num 0) \"8\") 14]\n        [(string=? (string-ref num\
    \ 0) \"9\") 15]\n        [(string=? (string-ref num 0) \"a\") 16]\n        [(string=?\
    \ (string-ref num 0) \"b\") 17]\n        [(string=? (string-ref num 0) \"c\")\
    \ 18]\n        [(string=? (string-ref num 0) \"d\") 19]\n        [(string=? (string-ref\
    \ num 0) \"e\") 20]\n        [(string=? (string-ref num 0) \"f\") 21]\n      \
    \  [(string=? (string-ref num 0) \"0\") 22]\n        [(string=? (string-ref num\
    \ 0) \"1\") 23]\n        [(string=? (string-ref num 0) \"2\") 24]\n        [(string=?\
    \ (string-ref num 0) \"3\") 25]\n        [(string=? (string-ref num 0) \"4\")\
    \ 26]\n        [(string=? (string-ref num 0) \"5\") 27]\n        [(string=? (string-ref\
    \ num 0) \"6\") 28]\n        [(string=? (string-ref num 0) \"7\") 29]\n      \
    \  [(string=? (string-ref num 0) \"8\") 30]\n        [(string=? (string-ref num\
    \ 0) \"9\") 31]\n        [(string=? (string-ref num 0) \"A\") 32]\n        [(string=?\
    \ (string-ref num 0) \"B\") 33]\n        [(string=? (string-ref num 0) \"C\")\
    \ 34]\n        [(string=? (string-ref num 0) \"D\") 35]\n        [(string=? (string-ref\
    \ num 0) \"E\") 36]\n        [(string", "  (cond\n    [(empty? num) '()]\n   \
    \ [(equal? (char-code (car num)) #\\A) (hex_key (cdr num))]\n    [else (cons (char-code\
    \ (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n  \
    \  [(equal? (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons\
    \ 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else\
    \ (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'B) (hex_key (subseq num 1 3))]\n    [(equal? (first num) 'C) (hex_key\
    \ (subseq num 1 4))]\n    [(equal? (first num) 'D) (hex_key (subseq num 1 5))]\n\
    \    [(equal? (first num) 'E) (hex_key (subseq num 1 6))]\n    [(equal? (first\
    \ num) 'F) (hex_key (subseq num 1 7))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (first num) 'A) (cons 'A \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'B \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'C \n  \
    \                            (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'D) (cons 'D \n                              (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'E) (cons 'E \n                              (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'F) (cons 'F \n                              (hex_key\
    \ (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D)\
    \ (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key\
    \ (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D (hex_key (rest num)))]\n    [(equal? (first num) 'D)\
    \ (cons 'E (hex_key (rest num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key\
    \ (rest num)))]\n    [else (cons (first num) (hex_key (rest num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (char-code (car num)) 'A) (cons 'B \n  \
    \                                  (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (char-code (car num)) 'B) (cons 'C \n                                    (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (char-code (car num)) 'C) (cons 'D \n \
    \                                   (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (char-code (car num)) 'D) (cons 'E \n                                    (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (char-code (car num)) 'E) (cons 'F \n \
    \                                   (hex_key (substring num 1 1)))]\n    [else\
    \ (cons (char-code (car num)) \n                (hex_key (substring num 1 1)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'A \n     \
    \                           (hex_key (sub1 num)))]\n    [(equal? (first num) 'B)\
    \ (cons 'B \n                                (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'C \n                                (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'D) (cons 'D \n                                (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'E \n                    \
    \            (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (cons 'F \n\
    \                                (hex_key (sub1 num)))]\n    [else (cons (first\
    \ num) (hex_key (sub1 num)))]))\n", "  (cond [(number? num) num]\n        [else\
    \ (error \"hex_key expects a string\")]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (first num) 'A) (cons 'B (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (cons 'C (hex_key (rest num)))]\n    [(equal? (first num) 'C) (cons\
    \ 'D (hex_key (rest num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (rest num)))]\n    [else\
    \ (cons (first num) (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (char-code (first num)) (first '(A B C D E F))) \n     (cons (first\
    \ num) (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'B) (hex_key (subseq num 1 3))]\n    [(equal? (first\
    \ num) 'C) (hex_key (subseq num 1 4))]\n    [(equal? (first num) 'D) (hex_key\
    \ (subseq num 1 5))]\n    [(equal? (first num) 'E) (hex_key (subseq num 1 6))]\n\
    \    [(equal? (first num) 'F) (hex_key (subseq num 1 7))]))\n", "  (cond [(empty?\
    \ num) '()]\n        [(= (length num) 1) (cons 'A (hex_key (substring num 0 1)))]\n\
    \        [(= (length num) 2) (cons 'B (hex_key (substring num 0 1)))]\n      \
    \  [(= (length num) 3) (cons 'C (hex_key (substring num 0 1)))]\n        [(= (length\
    \ num) 4) (cons 'D (hex_key (substring num 0 1)))]\n        [(= (length num) 5)\
    \ (cons 'E (hex_key (substring num 0 1)))]\n        [(= (length num) 6) (cons\
    \ 'F (hex_key (substring num 0 1)))]\n        [else (cons (char->integer (substring\
    \ num 0 1)) \n                  (hex_key (substring num 1 (length num))))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B hex_key\
    \ (hex_key (rest num)))]\n    [(equal? (first num) 'B) (cons 'C hex_key (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (cons 'D hex_key (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'D) (cons 'E hex_key (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (cons 'F hex_key (hex_key (rest num)))]\n    [else\
    \ (cons (first num) (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'B) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'C) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'D) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'E) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'F) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '0') (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '1') (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '2') (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '3') (hex_key (subseq num 1 2))]\n    [(equal? (first num) '4') (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '5') (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '6') (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '7') (hex_key (subseq num 1 2))]\n    [(equal? (first num) '8') (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '9') (hex_key (subseq num 1 2))]\n\
    \    [else (hex_key (subseq num 1 2))]\n  )\n)\n", "  (cond\n    [(empty? num)\
    \ '()]\n    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n    [(equal?\
    \ (first num) 'B) (hex_key (subseq num 1 3))]\n    [(equal? (first num) 'C) (hex_key\
    \ (subseq num 1 4))]\n    [(equal? (first num) 'D) (hex_key (subseq num 1 5))]\n\
    \    [(equal? (first num) 'E) (hex_key (subseq num 1 6))]\n    [(equal? (first\
    \ num) 'F) (hex_key (subseq num 1 7))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'B) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'C) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'D) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'E) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'F) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '0) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '1) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '2) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '3) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '4) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '5) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '6) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '7) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '8) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '9) (hex_key (subseq num 1 2))]\n\
    \    [else (hex_key (subseq num 1 2))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (first num) 'A) (cons '(2 3 5 7) '())]\n    [(equal? (first num)\
    \ 'B) (cons '(2 3 5 7) '())]\n    [(equal? (first num) 'C) (cons '(2 3 5 7) '())]\n\
    \    [(equal? (first num) 'D) (cons '(2 3 5 7) '())]\n    [(equal? (first num)\
    \ 'E) (cons '(2 3 5 7) '())]\n    [(equal? (first num) 'F) (cons '(2 3 5 7) '())]\n\
    \    [else (cons (first num) (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (cons 'A \n                        \
    \      (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'B \n      \
    \                        (hex_key (sub1 num)))]\n    [(equal? (first num) 'C)\
    \ (cons 'C \n                              (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'D) (cons 'D \n                              (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (cons 'E \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'F) (cons 'F \n                    \
    \          (hex_key (sub1 num)))]\n    [else (cons (first num)\n             \
    \  (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (char-code (car num)) #\\A) (hex_key (cdr num))]\n    [else (cons (char-code\
    \ (car num)) (hex_key (cdr num)))]))\n", "  (cond [(empty? num) 0]\n        [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'B)\
    \ (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (sub1 num)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n\
    \        [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n        [(equal?\
    \ (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n        [else (+ 1 (hex_key (sub1\
    \ num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A)\
    \ (cons 'B hex_key (hex_key (rest num)))]\n    [(equal? (first num) 'B) (cons\
    \ 'C hex_key (hex_key (rest num)))]\n    [(equal? (first num) 'C) (cons 'D hex_key\
    \ (hex_key (rest num)))]\n    [(equal? (first num) 'D) (cons 'E hex_key (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (cons 'F hex_key (hex_key (rest\
    \ num)))]\n    [else (cons (first num) hex_key (hex_key (rest num)))]))\n", " \
    \ (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key(cdr\
    \ num)))]\n    [(equal? (char-code (car num)) #\\B) (+ 1 (hex_key(cdr num)))]\n\
    \    [(equal? (char-code (car num)) #\\C) (+ 1 (hex_key(cdr num)))]\n    [(equal?\
    \ (char-code (car num)) #\\D) (+ 1 (hex_key(cdr num)))]\n    [(equal? (char-code\
    \ (car num)) #\\E) (+ 1 (hex_key(cdr num)))]\n    [(equal? (char-code (car num))\
    \ #\\F) (+ 1 (hex_key(cdr num)))]\n    [else (+ 1 (hex_key(cdr num)))]))\n", " \
    \ (cond\n    [(empty? num) '()]\n    [(equal? (char-code (car num)) 'A) (cons\
    \ 'B (hex_key (cdr num)))]\n    [(equal? (char-code (car num)) 'B) (cons 'C (hex_key\
    \ (cdr num)))]\n    [(equal? (char-code (car num)) 'C) (cons 'D (hex_key (cdr\
    \ num)))]\n    [(equal? (char-code (car num)) 'D) (cons 'E (hex_key (cdr num)))]\n\
    \    [(equal? (char-code (car num)) 'E) (cons 'F (hex_key (cdr num)))]\n    [else\
    \ (cons (char-code (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(= (length num) 2) (cons '2 (hex_key (substring num 0 1)))]\n\
    \    [(= (length num) 3) (cons '3 (hex_key (substring num 0 1)))]\n    [(= (length\
    \ num) 4) (cons '5 (hex_key (substring num 0 1)))]\n    [(= (length num) 5) (cons\
    \ '7 (hex_key (substring num 0 1)))]\n    [(= (length num) 6) (cons 'B (hex_key\
    \ (substring num 0 1)))]\n    [(= (length num) 7) (cons 'D (hex_key (substring\
    \ num 0 1)))]\n    [else (hex_key (substring num 0 1))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (cons 'B hex_key (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (cons 'C hex_key (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D hex_key (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (cons 'E hex_key (hex_key (rest num)))]\n    [(equal? (first num) 'E)\
    \ (cons 'F hex_key (hex_key (rest num)))]\n    [else (cons (first num) hex_key\
    \ (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (char-code (car num)) #\\A) (hex_key (cdr num))]\n    [else (cons (char-code\
    \ (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n  \
    \  [(equal? (first num) 'A) (cons 'A \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'B \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'C \n  \
    \                            (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'D) (cons 'D \n                              (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'E) (cons 'E \n                              (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'F) (cons 'F \n                              (hex_key\
    \ (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) 'A']\n    [(equal? (first num) 'A) (hex_key (substring num\
    \ 1 1))]\n    [(equal? (first num) 'B) (hex_key (substring num 1 1))]\n    [(equal?\
    \ (first num) 'C) (hex_key (substring num 1 1))]\n    [(equal? (first num) 'D)\
    \ (hex_key (substring num 1 1))]\n    [(equal? (first num) 'E) (hex_key (substring\
    \ num 1 1))]\n    [(equal? (first num) 'F) (hex_key (substring num 1 1))]\n  \
    \  [else (hex_key (substring num 1 1))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (char-code (car num)) #\\A) (hex_key (cdr num))]\n    [else (cons\
    \ (char-code (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num)\
    \ '()]\n    [(equal? (first num) 'A) (cons 'A \n                             \
    \ (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'B \n           \
    \                   (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons\
    \ 'C \n                              (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'D) (cons 'D \n                              (hex_key (sub1 num)))]\n \
    \   [(equal? (first num) 'E) (cons 'E \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'F) (cons 'F \n                    \
    \          (hex_key (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1\
    \ num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code (car\
    \ num)) 'A) (cons 'B hex_key (hex_key (cdr num)))]\n    [(equal? (char-code (car\
    \ num)) 'B) (cons 'C hex_key (hex_key (cdr num)))]\n    [(equal? (char-code (car\
    \ num)) 'C) (cons 'D hex_key (hex_key (cdr num)))]\n    [(equal? (char-code (car\
    \ num)) 'D) (cons 'E hex_key (hex_key (cdr num)))]\n    [(equal? (char-code (car\
    \ num)) 'E) (cons 'F hex_key (hex_key (cdr num)))]\n    [else (cons '2 (hex_key\
    \ (cdr num))) ]\n  )\n)\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code\
    \ (car num)) #\\A) (hex_key (cdr num))]\n    [(equal? (char-code (car num)) #\\\
    B) (hex_key (cdr num))]\n    [(equal? (char-code (car num)) #\\C) (hex_key (cdr\
    \ num))]\n    [(equal? (char-code (car num)) #\\D) (hex_key (cdr num))]\n    [(equal?\
    \ (char-code (car num)) #\\E) (hex_key (cdr num))]\n    [(equal? (char-code (car\
    \ num)) #\\F) (hex_key (cdr num))]\n    [else (cons (char-code (car num)) (hex_key\
    \ (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'B) (hex_key (subseq\
    \ num 1 2))]\n    [(equal? (first num) 'C) (hex_key (subseq num 1 2))]\n    [(equal?\
    \ (first num) 'D) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'E) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'F) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '0) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '1) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '2) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '3) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '4) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '5) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '6) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '7) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '8) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '9) (hex_key (subseq num 1 2))]\n    [else (hex_key (subseq num 1 2))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons\
    \ 'B (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E)\
    \ (cons 'F (hex_key (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1\
    \ num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code (car\
    \ num)) #\\A) (hex_key (cdr num))]\n    [else (cons (char-code (car num)) (hex_key\
    \ (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else (cons (first num) (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else (cons (first num) (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(= (length num) 1)\
    \ (cons 'A (hex_key (substring num 0 1)))]\n    [(= (length num) 2) (cons 'B (hex_key\
    \ (substring num 0 1)))]\n    [(= (length num) 3) (cons 'C (hex_key (substring\
    \ num 0 1)))]\n    [(= (length num) 4) (cons 'D (hex_key (substring num 0 1)))]\n\
    \    [(= (length num) 5) (cons 'E (hex_key (substring num 0 1)))]\n    [(= (length\
    \ num) 6) (cons 'F (hex_key (substring num 0 1)))]\n    [else (cons 'A (hex_key\
    \ (substring num 0 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons 'A \n                              (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'B) (cons 'B \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'C \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'D \n  \
    \                            (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'E) (cons 'E \n                              (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'F) (cons 'F \n                              (hex_key (sub1 num)))]\n\
    \    [else (cons (first num) \n               (hex_key (sub1 num)))]))\n", " \
    \ (cond\n    [(empty? num) '()]\n    [(= (length num) 1) '(cons (char->integer\
    \ (first num)) '())]\n    [(= (length num) 2) '(cons (char->integer (first num))\
    \ \n                              (hex_key (rest num)))]\n    [(= (length num)\
    \ 3) '(cons (char->integer (first num)) \n                              (hex_key\
    \ (rest num)) \n                              (hex_key (rest (rest num))))]\n\
    \    [(= (length num) 4) '(cons (char->integer (first num)) \n               \
    \               (hex_key (rest num)) \n                              (hex_key\
    \ (rest (rest num)) \n                              (hex_key (rest (rest num))))]\n\
    \    [(= (length num) 5) '(cons (char->integer (first num)) \n               \
    \               (hex_key (rest num)) \n                              (hex_key\
    \ (rest (rest num)) \n                              (hex_key (rest (rest num))\
    \ \n                              (hex_key (rest (rest num))))]\n    [(= (length\
    \ num) 6) '(cons (char->integer (first num)) \n                              (hex_key\
    \ (rest num)) \n                              (hex_key (rest (rest num)) \n  \
    \                            (hex_key (rest (rest num)) \n                   \
    \           (hex_key (rest (rest num)) \n                              (hex_key\
    \ (rest (rest num))))]\n    [(= (length num) 7) '(cons (char->integer (first num))\
    \ \n                              (hex_key (rest num)) \n                    \
    \          (hex_key (rest (rest num)) \n                              (hex_key\
    \ (rest (rest num)) \n                              (hex_key (rest (rest num))\
    \ \n                              (hex_key (rest (rest num)) \n              \
    \                (hex_key (rest (rest num))))]\n    [(= (length num) 8) '(cons\
    \ (char->integer (first num)) \n                              (hex_key (rest num))\
    \ \n                              (hex_key (rest (rest num)) \n              \
    \                (hex_key (rest (rest num)) \n                              (hex_key\
    \ (rest (rest num)) \n                              (hex_key (rest (rest num))\
    \ \n                              (hex_key (rest (rest num)) \n              \
    \                (hex_key (rest (rest num))))]\n    [(= (length num) 9) '(cons\
    \ (char->integer (first num)) \n                              (hex_key (rest num))\
    \ \n                              (hex_key (rest", "  (cond\n    [(empty? num)\
    \ '()]\n    [(equal? (first num) 'A) (cons 'B hex_key (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'B) (cons 'C hex_key (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D hex_key (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'D) (cons 'E hex_key (hex_key (sub1 num)))]\n    [(equal? (first num) 'E)\
    \ (cons 'F hex_key (hex_key (sub1 num)))]\n    [else (cons (first num) hex_key\
    \ (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first num) 'B)\
    \ (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else (cons\
    \ (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (first num) 'A) (cons 'B \n                            (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C \n                    \
    \        (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D \n    \
    \                        (hex_key (sub1 num)))]\n    [(equal? (first num) 'D)\
    \ (cons 'E \n                            (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'E) (cons 'F \n                            (hex_key (sub1 num)))]\n\
    \    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (cons 'A \n                        \
    \      (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'B) (cons 'B\
    \ \n                              (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (cons 'C \n                              (hex_key (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'D) (cons 'D \n                      \
    \        (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'E) (cons 'E\
    \ \n                              (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'F) (cons 'F \n                              (hex_key (substring\
    \ num 1 1)))]\n    [else (cons (first num) (hex_key (substring num 1 1)))]))\n",
  "  (cond [(number? num) num]\n        [(empty? num) '()]\n        [(equal? (char-code\
    \ (first num)) (first 'A')) (hex_key (substring num 1 1))]\n        [(equal? (char-code\
    \ (first num)) (first 'B')) (hex_key (substring num 1 2))]\n        [(equal? (char-code\
    \ (first num)) (first 'C')) (hex_key (substring num 1 3))]\n        [(equal? (char-code\
    \ (first num)) (first 'D')) (hex_key (substring num 1 4))]\n        [(equal? (char-code\
    \ (first num)) (first 'E')) (hex_key (substring num 1 5))]\n        [(equal? (char-code\
    \ (first num)) (first 'F')) (hex_key (substring num 1 6))]\n        [else (hex_key\
    \ (substring num 1 6))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code\
    \ (car num)) #\\A) (hex_key (cdr num))]\n    [else (cons (char-code (car num))\
    \ (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code\
    \ (car num)) #\\A) (hex_key (cdr num))]\n    [(equal? (char-code (car num)) #\\\
    B) (hex_key (cdr num))]\n    [(equal? (char-code (car num)) #\\C) (hex_key (cdr\
    \ num))]\n    [(equal? (char-code (car num)) #\\D) (hex_key (cdr num))]\n    [(equal?\
    \ (char-code (car num)) #\\E) (hex_key (cdr num))]\n    [(equal? (char-code (car\
    \ num)) #\\F) (hex_key (cdr num))]\n    [else (cons (char-code (car num)) (hex_key\
    \ (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (hex_key (substring num 1 1))]\n    [(equal? (first num) 'B) (hex_key (substring\
    \ num 1 1))]\n    [(equal? (first num) 'C) (hex_key (substring num 1 1))]\n  \
    \  [(equal? (first num) 'D) (hex_key (substring num 1 1))]\n    [(equal? (first\
    \ num) 'E) (hex_key (substring num 1 1))]\n    [(equal? (first num) 'F) (hex_key\
    \ (substring num 1 1))]\n    [else (cons (first num) (hex_key (substring num 1\
    \ (+ 1 ))))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal? (first num)\
    \ 'A) (hex_key (subseq num 1))]\n    [(equal? (first num) 'B) (hex_key (subseq\
    \ num 1))]\n    [(equal? (first num) 'C) (hex_key (subseq num 1))]\n    [(equal?\
    \ (first num) 'D) (hex_key (subseq num 1))]\n    [(equal? (first num) 'E) (hex_key\
    \ (subseq num 1))]\n    [(equal? (first num) 'F) (hex_key (subseq num 1))]\n \
    \   [else (hex_key (subseq num 1))]))\n", "  (cond\n    [(empty? num) '()]\n \
    \   [(equal? (first num) 'A) (cons 'A \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'B \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'C \n  \
    \                            (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'D) (cons 'D \n                              (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'E) (cons 'E \n                              (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'F) (cons 'F \n                              (hex_key\
    \ (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n          \
    \                   (substring num 1 1)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key\n                             (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                             (substring num 1\
    \ 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \     (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n   \
    \                          (substring num 1 1)))]\n    [(equal? (first num) 'F)\
    \ (+ 1 (hex_key\n                             (substring num 1 1)))]\n    [else\
    \ (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond [(number? num) num]\n  \
    \      [else (error \"Not a number\")]))\n", "  (cond\n    [(empty? num) 'A']\n\
    \    [(equal? (first num) 'A) (hex_key (rest num))]\n    [(equal? (first num)\
    \ 'B) (hex_key (rest num))]\n    [(equal? (first num) 'C) (hex_key (rest num))]\n\
    \    [(equal? (first num) 'D) (hex_key (rest num))]\n    [(equal? (first num)\
    \ 'E) (hex_key (rest num))]\n    [(equal? (first num) 'F) (hex_key (rest num))]\n\
    \    [else (hex_key (rest num))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons 'B hex_key (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (cons 'C hex_key (hex_key (rest num)))]\n    [(equal? (first num) 'C)\
    \ (cons 'D hex_key (hex_key (rest num)))]\n    [(equal? (first num) 'D) (cons\
    \ 'E hex_key (hex_key (rest num)))]\n    [(equal? (first num) 'E) (cons 'F hex_key\
    \ (hex_key (rest num)))]\n    [else (cons (first num) hex_key (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'B) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'C) (hex_key (sub1 num))]\n    [(equal? (first num) 'D) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'E) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'F) (hex_key (sub1 num))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 'A']\n    [(equal? (first num) 'A) (hex_key (rest num))]\n\
    \    [else (hex_key (rest num))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal?\
    \ (first num) 'A) (hex_key (substring num 1 1))]\n    [else (hex_key (substring\
    \ num 1 1))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (cons '(2) (hex_key (rest num)))]\n    [(equal? (first num) 'B) (cons '(3)\
    \ (hex_key (rest num)))]\n    [(equal? (first num) 'C) (cons '(5) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'D) (cons '(7) (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (cons '(11) (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (cons '(13) (hex_key (rest num)))]\n    [else (cons (first num) (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code\
    \ (car num)) #\\A) (hex_key (cdr num))]\n    [else (cons (char-code (car num))\
    \ (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first\
    \ num) 'A) (cons 'B (hex_key (rest num)))]\n    [(equal? (first num) 'B) (cons\
    \ 'C (hex_key (rest num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'E) (cons 'F (hex_key (rest num)))]\n    [else (cons (first num)\
    \ (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first num) 'B)\
    \ (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else (cons\
    \ (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (first num) 'A) (cons 'B \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D \n  \
    \                            (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'D) (cons 'E \n                              (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'E) (cons 'F \n                              (hex_key (sub1 num)))]\n\
    \    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons\
    \ 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (sub1\
    \ num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'B) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'C) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'D) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'E) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'F) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '0') (hex_key (subseq num 1 2))]\n    [(equal? (first num) '1') (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '2') (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '3') (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '4') (hex_key (subseq num 1 2))]\n    [(equal? (first num) '5') (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '6') (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '7') (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '8') (hex_key (subseq num 1 2))]\n    [(equal? (first num) '9') (hex_key\
    \ (subseq num 1 2))]\n    [else (cons (first num) (hex_key (subseq num 1 2)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (subseq\
    \ num 1 2))]\n    [(equal? (first num) 'B) (hex_key (subseq num 1 3))]\n    [(equal?\
    \ (first num) 'C) (hex_key (subseq num 1 4))]\n    [(equal? (first num) 'D) (hex_key\
    \ (subseq num 1 5))]\n    [(equal? (first num) 'E) (hex_key (subseq num 1 6))]\n\
    \    [(equal? (first num) 'F) (hex_key (subseq num 1 7))]))\n", "  (cond\n   \
    \ [(empty? num) '()]\n    [(equal? (char-code (car num)) #\\A) (hex_key (cdr num))]\n\
    \    [(equal? (char-code (car num)) #\\B) (hex_key (cdr num))]\n    [(equal? (char-code\
    \ (car num)) #\\C) (hex_key (cdr num))]\n    [(equal? (char-code (car num)) #\\\
    D) (hex_key (cdr num))]\n    [(equal? (char-code (car num)) #\\E) (hex_key (cdr\
    \ num))]\n    [(equal? (char-code (car num)) #\\F) (hex_key (cdr num))]\n    [else\
    \ (cons (char-code (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty?\
    \ num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons\
    \ 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key (sub1\
    \ num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (char-code (car num)) #\\A) (hex_key (cdr\
    \ num))]\n    [else (cons (char-code (car num)) (hex_key (cdr num)))]))\n", " \
    \ (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'A \n    \
    \                          (hex_key (subseq num 1 2)))]\n    [(equal? (first num)\
    \ 'B) (cons 'B \n                              (hex_key (subseq num 1 3)))]\n\
    \    [(equal? (first num) 'C) (cons 'C \n                              (hex_key\
    \ (subseq num 1 4)))]\n    [(equal? (first num) 'D) (cons 'D \n              \
    \                (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (cons\
    \ 'E \n                              (hex_key (subseq num 1 6)))]\n    [(equal?\
    \ (first num) 'F) (cons 'F \n                              (hex_key (subseq num\
    \ 1 7)))]\n    [else (cons (first num)\n               (hex_key (subseq num 1\
    \ 8)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons\
    \ 'B \n                              (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'B) (cons 'C \n                              (hex_key (sub1 num)))]\n \
    \   [(equal? (first num) 'C) (cons 'D \n                              (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (cons 'E \n                    \
    \          (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F \n  \
    \                            (hex_key (sub1 num)))]\n    [else (cons (first num)\
    \ (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal?\
    \ (first num) 'A) (hex_key (substring num 1 1))]\n    [(equal? (first num) 'B)\
    \ (hex_key (substring num 1 2))]\n    [(equal? (first num) 'C) (hex_key (substring\
    \ num 1 3))]\n    [(equal? (first num) 'D) (hex_key (substring num 1 4))]\n  \
    \  [(equal? (first num) 'E) (hex_key (substring num 1 5))]\n    [(equal? (first\
    \ num) 'F) (hex_key (substring num 1 6))]\n    [else (hex_key (substring num 1\
    \ 6))]))\n", "  (cond [(number? num) num]\n        [(empty? num) '()]\n      \
    \  [(equal? (char-code (car num)) #\\A) (hex_key (cdr num))]\n        [else (cons\
    \ (hex_key (car num)) (hex_key (cdr num)))]))\n", "  (cond\n    [(empty? num)\
    \ '()]\n    [(equal? (first num) 'A) (cons 'B hex_key (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'B) (cons 'C hex_key (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D hex_key (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'D) (cons 'E hex_key (hex_key (sub1 num)))]\n    [(equal? (first num) 'E)\
    \ (cons 'F hex_key (hex_key (sub1 num)))]\n    [else (cons (first num) hex_key\
    \ (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons '(2 3 5 7) '())]\n    [(equal? (first num) 'B) (cons '(2\
    \ 3 5 7) '())]\n    [(equal? (first num) 'C) (cons '(2 3 5 7) '())]\n    [(equal?\
    \ (first num) 'D) (cons '(2 3 5 7) '())]\n    [(equal? (first num) 'E) (cons '(2\
    \ 3 5 7) '())]\n    [(equal? (first num) 'F) (cons '(2 3 5 7) '())]\n    [else\
    \ (cons (first num) (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) '()]\n\
    \    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'B) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'C) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'D) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'E) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'F) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '0') (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '1') (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '2') (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '3') (hex_key (subseq num 1 2))]\n    [(equal? (first num) '4') (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '5') (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '6') (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '7') (hex_key (subseq num 1 2))]\n    [(equal? (first num) '8') (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '9') (hex_key (subseq num 1 2))]\n\
    \    [else (hex_key (subseq num 1 2))]\n  )\n)\n", "  (cond\n    [(empty? num)\
    \ '()]\n    [(equal? (first num) 'A) (cons 'B hex_key (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'B) (cons 'C hex_key (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D hex_key (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'D) (cons 'E hex_key (hex_key (sub1 num)))]\n    [(equal? (first num) 'E)\
    \ (cons 'F hex_key (hex_key (sub1 num)))]\n    [else (cons (first num) hex_key\
    \ (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal?\
    \ (first num) 'A) (cons 'B hex_key (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'B) (cons 'C hex_key (hex_key (sub1 num)))]\n    [(equal? (first num) 'C)\
    \ (cons 'D hex_key (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons\
    \ 'E hex_key (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F hex_key\
    \ (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (cons 'A hex_key (hex_key\
    \ (sub1 num)))]\n    [else (cons (first num) hex_key (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'D) (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons\
    \ 'F (hex_key (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (char-code (car num)) #\\A) 0]\n   \
    \     [(equal? (char-code (car num)) #\\B) 1]\n        [(equal? (char-code (car\
    \ num)) #\\C) 2]\n        [(equal? (char-code (car num)) #\\D) 3]\n        [(equal?\
    \ (char-code (car num)) #\\E) 4]\n        [(equal? (char-code (car num)) #\\F)\
    \ 5]\n        [else (+ 1 (hex_key\n                       (substring num 0 (-\
    \ (length num) 1))))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal? (first\
    \ num) 'A) (hex_key (substring num 1 1))]\n    [(equal? (first num) 'B) (hex_key\
    \ (substring num 1 1))]\n    [(equal? (first num) 'C) (hex_key (substring num\
    \ 1 1))]\n    [(equal? (first num) 'D) (hex_key (substring num 1 1))]\n    [(equal?\
    \ (first num) 'E) (hex_key (substring num 1 1))]\n    [(equal? (first num) 'F)\
    \ (hex_key (substring num 1 1))]\n    [else (hex_key (substring num 1 1))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (first num)) #\\A) (+ 1\
    \ (hex_key(sub1 (rest num))))]\n    [(equal? (char-code (first num)) #\\B) (+\
    \ 1 (hex_key(sub2 (rest num))))]\n    [(equal? (char-code (first num)) #\\C) (+\
    \ 1 (hex_key(sub3 (rest num))))]\n    [(equal? (char-code (first num)) #\\D) (+\
    \ 1 (hex_key(sub4 (rest num))))]\n    [(equal? (char-code (first num)) #\\E) (+\
    \ 1 (hex_key(sub5 (rest num))))]\n    [(equal? (char-code (first num)) #\\F) (+\
    \ 1 (hex_key(sub6 (rest num))))]\n    [else (+ 1 (hex_key(sub1 (rest num))))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'B) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'C) (hex_key (sub1 num))]\n    [(equal? (first num) 'D) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'E) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'F) (hex_key (sub1 num))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'B) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'C) (hex_key (sub1 num))]\n    [(equal? (first num) 'D) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'E) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'F) (hex_key (sub1 num))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code (first num)) (char #\\\
    A)) (hex_key (rest num))]\n    [else (cons (hex_key (rest num)) (hex_key (first\
    \ num)))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal? (first num) 'A)\
    \ 'B']\n    [(equal? (first num) 'B) 'C']\n    [(equal? (first num) 'C) 'D']\n\
    \    [(equal? (first num) 'D) 'E']\n    [(equal? (first num) 'E) 'F']\n    [else\
    \ (hex_key (rest num))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first\
    \ num) 'A) (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons\
    \ 'C (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else (cons (first num)\
    \ (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 'A']\n    [(equal?\
    \ (first num) 'A) (hex_key (substring num 1 1))]\n    [(equal? (first num) 'B)\
    \ (hex_key (substring num 1 1))]\n    [(equal? (first num) 'C) (hex_key (substring\
    \ num 1 1))]\n    [(equal? (first num) 'D) (hex_key (substring num 1 1))]\n  \
    \  [(equal? (first num) 'E) (hex_key (substring num 1 1))]\n    [(equal? (first\
    \ num) 'F) (hex_key (substring num 1 1))]\n    [else (hex_key (substring num 1\
    \ 1))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons\
    \ 'B (hex_key (rest num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (cons 'E (hex_key (rest num)))]\n    [(equal? (first num) 'E)\
    \ (cons 'F (hex_key (rest num)))]\n    [else (cons (first num) (hex_key (rest\
    \ num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A)\
    \ (cons 'B (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'D) (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'E) (cons 'F (hex_key (sub1 num)))]\n    [else (cons (first num) (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code\
    \ (car num)) #\\A) (hex_key (cdr num))]\n    [(equal? (char-code (car num)) #\\\
    B) (hex_key (cdr num))]\n    [(equal? (char-code (car num)) #\\C) (hex_key (cdr\
    \ num))]\n    [(equal? (char-code (car num)) #\\D) (hex_key (cdr num))]\n    [(equal?\
    \ (char-code (car num)) #\\E) (hex_key (cdr num))]\n    [(equal? (char-code (car\
    \ num)) #\\F) (hex_key (cdr num))]\n    [else (cons (char-code (car num)) (hex_key\
    \ (cdr num)))]))\n", "  (cond\n    [(empty? num) '()]\n    [(equal? (first num)\
    \ 'A) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'B) (hex_key (subseq\
    \ num 1 2))]\n    [(equal? (first num) 'C) (hex_key (subseq num 1 2))]\n    [(equal?\
    \ (first num) 'D) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'E) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'F) (hex_key (subseq num 1 2))]\n\
    \    [else (cons (first num) (hex_key (subseq num 2)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n        \
    \                       (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                               (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key\n                               (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key\n                               (rest num)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                               (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(number? num) num]\n  \
    \      [else (error \"Hexadecimal number must be a string.\")]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (cons 'B (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'B) (cons 'C (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (cons 'D (hex_key (sub1 num)))]\n    [(equal? (first num) 'D)\
    \ (cons 'E (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (cons 'F (hex_key\
    \ (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\
    \ [(number? num) num]\n        [else (error \"Hexadecimal number expected\")]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'B) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'C) (hex_key (sub1 num))]\n    [(equal? (first num) 'D) (hex_key (sub1 num))]\n\
    \    [(equal? (first num) 'E) (hex_key (sub1 num))]\n    [(equal? (first num)\
    \ 'F) (hex_key (sub1 num))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(= (length num) 1) (cons 'A (hex_key (substring\
    \ num 0 1)))]\n    [(= (length num) 2) (cons 'B (hex_key (substring num 0 1)))]\n\
    \    [(= (length num) 3) (cons 'C (hex_key (substring num 0 1)))]\n    [(= (length\
    \ num) 4) (cons 'D (hex_key (substring num 0 1)))]\n    [(= (length num) 5) (cons\
    \ 'E (hex_key (substring num 0 1)))]\n    [(= (length num) 6) (cons 'F (hex_key\
    \ (substring num 0 1)))]\n    [else (cons 'A (hex_key (substring num 0 1)))]\n\
    \    [(= (length num) 7) (cons 'B (hex_key (substring num 0 1)))]\n    [(= (length\
    \ num) 8) (cons 'C (hex_key (substring num 0 1)))]\n    [(= (length num) 9) (cons\
    \ 'D (hex_key (substring num 0 1)))]\n    [(= (length num) 10) (cons 'E (hex_key\
    \ (substring num 0 1)))]\n    [(= (length num) 11) (cons 'F (hex_key (substring\
    \ num 0 1)))]\n    [(= (length num) 12) (cons 'A (hex_key (substring num 0 1)))]\n\
    \    [(= (length num) 13) (cons 'B (hex_key (substring num 0 1)))]\n    [(= (length\
    \ num) 14) (cons 'C (hex_key (substring num 0 1)))]\n    [(= (length num) 15)\
    \ (cons 'D (hex_key (substring num 0 1)))]\n    [(= (length num) 16) (cons 'E\
    \ (hex_key (substring num 0 1)))]\n    [(= (length num) 17) (cons 'F (hex_key\
    \ (substring num 0 1)))]\n    [(= (length num) 18) (cons 'A (hex_key (substring\
    \ num 0 1)))]\n    [(= (length num) 19) (cons 'B (hex_key (substring num 0 1)))]\n\
    \    [(= (length num) 20) (cons 'C (hex_key (substring num 0 1)))]\n    [(= (length\
    \ num) 21) (cons 'D (hex_key (substring num 0 1)))]", "  (cond\n    [(empty? num)\
    \ '()]\n    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n    [(equal?\
    \ (first num) 'B) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'C) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'D) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'E) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'F) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '0) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '1) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '2) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '3) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '4) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '5) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) '6) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) '7) (hex_key (subseq num 1 2))]\n    [(equal? (first num) '8) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) '9) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'B) (hex_key (subseq num 1 2))]\n    [(equal? (first num) 'C) (hex_key\
    \ (subseq num 1 2))]\n    [(equal? (first num) 'D) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'E) (hex_key (subseq num 1 2))]\n    [(equal? (first\
    \ num) 'F) (hex_key (subseq num 1 2))]\n    [else (hex_key (subseq num 1 2))]))\n",
  "  (cond\n    [(empty? num) '()]\n    [(equal? (char-code (car num)) #\\A) '()]\n\
    \    [else (cons (char-code (car num)) (hex_key (rest num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (subseq num 1 2))]\n\
    \    [(equal? (first num) 'B) (hex_key (subseq num 1 3))]\n    [(equal? (first\
    \ num) 'C) (hex_key (subseq num 1 4))]\n    [(equal? (first num) 'D) (hex_key\
    \ (subseq num 1 5))]\n    [(equal? (first num) 'E) (hex_key (subseq num 1 6))]\n\
    \    [(equal? (first num) 'F) (hex_key (subseq num 1 7))]))\n", "  (cond\n   \
    \ [(empty? num) '()]\n    [(= (length num) 2) '(2 3)]\n    [(= (length num) 3)\
    \ '(2 3 5)]\n    [(= (length num) 4) '(2 3 5 7)]\n    [(= (length num) 5) '(2\
    \ 3 5 7 B)]\n    [(= (length num) 6) '(2 3 5 7 B D)]\n    [(= (length num) 7)\
    \ '(2 3 5 7 B D E)]\n    [(= (length num) 8) '(2 3 5 7 B D E F)]\n    [(= (length\
    \ num) 9) '(2 3 5 7 B D E F A)]\n    [(= (length num) 10) '(2 3 5 7 B D E F A\
    \ B)]\n    [(= (length num) 11) '(2 3 5 7 B D E F A B C)]\n    [(= (length num)\
    \ 12) '(2 3 5 7 B D E F A B C D)]\n    [(= (length num) 13) '(2 3 5 7 B D E F\
    \ A B C D E)]\n    [(= (length num) 14) '(2 3 5 7 B D E F A B C D E F)]\n    [(=\
    \ (length num) 15) '(2 3 5 7 B D E F A B C D E F G)]\n    [(= (length num) 16)\
    \ '(2 3 5 7 B D E F A B C D E F G H)]\n    [(= (length num) 17) '(2 3 5 7 B D\
    \ E F A B C D E F G H I)]\n    [(= (length num) 18) '(2 3 5 7 B D E F A B C D\
    \ E F G H I J)]\n    [(= (length num) 19) '(2 3 5 7 B D E F A B C D E F G H I\
    \ J K)]\n    [(= (length num) 20) '(2 3 5 7 B D E F A B C D E F G H I J K L)]\n\
    \    [(= (length num) 21) '(2 3 5 7 B D E F A B C D E F G H I J K L M)]\n    [(=\
    \ (length num) 22) '(2 3 5 7 B D E F ", "  (cond\n    [(empty? num) '()]\n   \
    \ [(equal? (first num) 'A) (cons 'A \n                              (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'B) (cons 'B \n                          \
    \    (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (cons 'C \n        \
    \                      (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (cons\
    \ 'D \n                              (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'E) (cons 'E \n                              (hex_key (sub1 num)))]\n \
    \   [(equal? (first num) 'F) (cons 'F \n                              (hex_key\
    \ (sub1 num)))]\n    [else (cons (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) '()]\n    [(equal? (first num) 'A) (hex_key (substring num\
    \ 1 2))]\n    [(equal? (first num) 'B) (hex_key (substring num 1 2))]\n    [(equal?\
    \ (first num) 'C) (hex_key (substring num 1 2))]\n    [(equal? (first num) 'D)\
    \ (hex_key (substring num 1 2))]\n    [(equal? (first num) 'E) (hex_key (substring\
    \ num 1 2))]\n    [(equal? (first num) 'F) (hex_key (substring num 1 2))]\n  \
    \  [(equal? (first num) '0') (hex_key (substring num 1 2))]\n    [(equal? (first\
    \ num) '1') (hex_key (substring num 1 2))]\n    [(equal? (first num) '2') (hex_key\
    \ (substring num 1 2))]\n    [(equal? (first num) '3') (hex_key (substring num\
    \ 1 2))]\n    [(equal? (first num) '4') (hex_key (substring num 1 2))]\n    [(equal?\
    \ (first num) '5') (hex_key (substring num 1 2))]\n    [(equal? (first num) '6')\
    \ (hex_key (substring num 1 2))]\n    [(equal? (first num) '7') (hex_key (substring\
    \ num 1 2))]\n    [(equal? (first num) '8') (hex_key (substring num 1 2))]\n \
    \   [(equal? (first num) '9') (hex_key (substring num 1 2))]\n    [else (cons\
    \ (first num) (hex_key (substring num 1 2)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
