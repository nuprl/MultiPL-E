name: HumanEval_8_sum_product
language: rkt
prompt: "#lang racket\n\n;; For a given list of integers, return a tuple consisting\
  \ of a sum and a product of all the integers in a list.\n;; Empty sum should be\
  \ equal to 0 and empty product should be equal to 1.\n(define (sum_product numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_product))\n\
  \    (check-equal? (candidate (list )) (list 0 1))\n    (check-equal? (candidate\
  \ (list 1 1 1)) (list 3 1))\n    (check-equal? (candidate (list 100 0)) (list 100\
  \ 0))\n    (check-equal? (candidate (list 3 5 7)) (list 15 105))\n    (check-equal?\
  \ (candidate (list 10)) (list 10 10))\n))\n\n(test-humaneval)"
completions: ["  (let ((sum (car numbers))\n        (product (car numbers)))\n   \
    \ (if (null? numbers)\n        (list sum product)\n        (let ((sum (+ sum numbers))\n\
    \              (product (* product (car numbers))))\n          (list sum product)\n\
    \          (sum_product (cdr numbers))))))\n", "  (cond\n    [(empty? numbers)\
    \ (list 0 1)]\n    [else (+ (first numbers) (sum_product (rest numbers)))]))\n",
  "  (let loop ((sum 0) (product 1))\n    (if (empty? numbers)\n        (list sum\
    \ product)\n        (loop (+ sum (first numbers)) (* product (first numbers))\n\
    \               (rest numbers)))))\n", "  (let ([sum (+ 0 (length numbers))]\n\
    \        [product 1]\n        [i 0])\n    (if (null? numbers)\n        (list sum\
    \ product)\n        (let ([n (car numbers)])\n          (if (= i 0)\n        \
    \      (sum_product (rest numbers))\n              (let ([s (+ sum (length numbers))]\n\
    \                    [p (* product n)]\n                    [new (+ i 1)]\n  \
    \                  [newsum (+ s n)]\n                    [newproduct (* product\
    \ n)]\n                    [newi (+ new 1)]\n                    [newsumnew (+\
    \ newsum n)]\n                    [newproductnew (* newproduct n)]\n         \
    \           [newinew (+ newi 1)])\n                (if (= i 0)\n             \
    \       (list newsum newproduct)\n                    (let ([new (if (= i 0) newsum\
    \ newsumnew) (if (= i 1) newproduct newproductnew)])\n                      (if\
    \ (= i 0)\n                          (list newsum newproduct)\n              \
    \            (let ([new (if (= i 0) newsum newsumnew) (if (= i 1) newproduct newproductnew)])\n\
    \                            (if (= i 0)\n                                (list\
    \ newsum newproduct)\n                                (let ([new (if (= i 0) newsum\
    \ newsumnew) (if (= i 1) newproduct newproductnew)])\n                       \
    \           (if (= i 0)\n                                      (list newsum newproduct)\n\
    \                                      (let ([new (if (= i 0) newsum newsumnew)\
    \ (if (= i 1) newproduct newproductnew)])\n                                  \
    \      (if (= i 0)\n                                            (list newsum newproduct)\n\
    \                                            (let ([new (if (= i 0) newsum newsumnew)\
    \ (if (= i 1) newproduct newproductnew)])\n                                  \
    \            (if (= i 0)\n                                                  (list\
    \ newsum newproduct)\n                                                  (let ([new\
    \ (if (= i 0) newsum newsumnew) (if (= i 1) newproduct newproductnew)])\n    \
    \                                                (if (= i 0)\n               \
    \                                         (list newsum newproduct)\n         \
    \                                               (let ([new (if (= i 0) newsum\
    \ newsumnew) (if (= i 1) newproduct newproductnew)])\n                       \
    \                                   (if (= i 0)\n                            \
    \                                  (list newsum newproduct)\n                \
    \                                              (let ([new (if (= i 0) newsum newsumnew)\
    \ (if (= i 1) newproduct newproductnew)])\n                                  \
    \                              (if (= i 0)\n                                 \
    \                                   (list newsum newproduct)\n               \
    \                                                     (let ([new (if (= ", " \
    \ (let ((sum (car numbers))\n        (product (car numbers)))\n    (if (null?\
    \ numbers)\n        (list sum product)\n        (let ((sum (+ sum numbers))\n\
    \              (product (* product numbers)))\n          (list sum product))))))\n",
  "  (let ([sum (+ 0 (first numbers))]\n        [product (* 1 (first numbers))])\n\
    \    (if (null? numbers)\n        (list sum product)\n        (let ([next (first\
    \ numbers)])\n          (sum_product (rest numbers)\n                      (+\
    \ sum (* next product))\n                      (* product next))))))\n", "  (let\
    \ ((sum (first numbers))\n        (product (second numbers)))\n    (if (null?\
    \ numbers)\n        (list sum product)\n        (let ((n (car numbers))\n    \
    \          (s (+ sum n)))\n          (let ((p (* product n)))\n            (cons\
    \ (cons n s) (sum_product (cdr numbers)))))))\n", "  (let ((sum (car numbers))\n\
    \        (product (cdr numbers)))\n    (cond\n      [(empty? numbers) (list 0\
    \ 1)]\n      [(= sum 0) (list 0 1)]\n      [(= product 1) (list 1 1)]\n      [else\
    \ (list sum (* product sum))]))))\n", "  (let ((sum (first numbers))\n       \
    \ (product (second numbers)))\n    (cond\n      [(empty? numbers) (list 0 1)]\n\
    \      [(= sum 0) (list 0 1)]\n      [(= product 1) (list 1 1)]\n      [else (list\
    \ sum (* product (first numbers)))])))\n", "  (let ([sum (+ 0 (first numbers))]\n\
    \        [product (* 1 (first numbers))])\n    (if (null? numbers)\n        (list\
    \ sum product)\n        (let ([next (first numbers)])\n          (sum_product\
    \ (rest numbers)\n                       (+ sum (* next product))\n          \
    \             (* product next))))))\n", "  (let loop ((sum (car numbers)) (product\
    \ (car numbers)))\n    (if (null? numbers)\n        (list sum product)\n     \
    \   (loop (+ sum car numbers) (* product (car numbers)))))))\n", "  (let loop\
    \ ((sum 0) (product 1))\n    (cond [(null? numbers) (list sum product)]\n    \
    \      [(number? (car numbers)) (loop (+ sum (car numbers)) (* product (car numbers)))]\n\
    \          [else (loop (+ sum (car numbers)) (* product (car numbers)))])))\n",
  "  (let ((sum (car numbers))\n        (product (car numbers)))\n    (if (null? (cdr\
    \ numbers))\n        (list sum product)\n        (let ((sum (+ sum numbers))\n\
    \              (product (* product numbers)))\n          (list sum product)))))\n",
  "  (let loop ((sum 0) (product 1))\n    (if (null? numbers)\n        (list sum product)\n\
    \        (loop (+ sum (car numbers)) (* product (car numbers))\n             \
    \  (cdr numbers)))))\n", "  (let ((sum (car numbers))\n        (product (car numbers)))\n\
    \    (if (null? (cdr numbers))\n        (list sum product)\n        (let ((sum\
    \ (+ sum numbers))\n              (product (* product numbers)))\n          (list\
    \ sum product)))))\n", "  (let ((sum (car numbers))\n        (product (car numbers)))\n\
    \    (if (null? numbers)\n        (list sum product)\n        (let ((sum (+ sum\
    \ numbers))\n              (product (* product numbers)))\n          (list sum\
    \ product)))))\n", "  (let ((sum (first numbers))\n        (product (second numbers)))\n\
    \    (cond\n      [(empty? numbers) (list 0 1)]\n      [(= sum 0) (list 0 1)]\n\
    \      [(= product 1) (list 1 1)]\n      [else (list sum (* product (first numbers)))])))\n",
  "  (let loop ((sum 0) (product 1))\n    (if (null? numbers)\n        (list sum product)\n\
    \        (loop (+ sum (car numbers)) (* product (car numbers))\n             \
    \  (cdr numbers)))))\n", "  (let ((sum (car numbers))\n        (product (car numbers)))\n\
    \    (if (null? (cdr numbers))\n        (list sum product)\n        (let ((sum\
    \ (+ sum numbers))\n              (product (* product (car numbers))))\n     \
    \     (list sum product))))))\n", "  (let ((sum (car numbers))\n        (product\
    \ (car numbers)))\n    (if (null? numbers)\n        (list sum product)\n     \
    \   (let ((sum (+ sum numbers))\n              (product (* product numbers)))\n\
    \          (list sum product))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
