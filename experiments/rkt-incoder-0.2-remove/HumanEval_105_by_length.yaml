name: HumanEval_105_by_length
language: rkt
prompt: "#lang racket\n\n;; Given an array of integers, sort the integers that are\
  \ between 1 and 9 inclusive,\n;; reverse the resulting array, and then replace each\
  \ digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"Four\"\
  , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n;; >>> by_length([2,\
  \ 1, 1, 4, 5, 8, 2, 3])   \n;; [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n;; If the array is empty, return an empty array:\n\
  ;; If the array has any strange number ignore it:\n;; >>> by_length([1, -1 , 55])\
  \ \n;; ['One']\n(define (by_length arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
  \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"\
  Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
  \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
  ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
  ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
  ))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n  \
    \      (if (< head 9)\n            (cons (reverse (map #(cons \"One\" . %) (rest\
    \ arr)))\n                  (by_length (rest arr)))\n            (cons (reverse\
    \ (map #(cons \"Two\" . %) (rest arr)))\n                  (by_length (rest arr)))\n\
    \            (cons (reverse (map #(cons \"Three\" . %) (rest arr)))\n        \
    \          (by_length (rest arr)))\n            (cons (reverse (map #(cons \"\
    Four\" . %) (rest arr)))\n                  (by_length (rest arr)))\n        \
    \    (cons (reverse (map #(cons \"Five\" . %) (rest arr)))\n                 \
    \ (by_length (rest arr)))\n            (cons (reverse (map #(cons \"Six\" . %)\
    \ (rest arr)))\n                  (by_length (rest arr)))\n            (cons (reverse\
    \ (map #(cons \"Seven\" . %) (rest arr)))\n                  (by_length (rest\
    \ arr)))\n            (cons (reverse (map #(cons \"Eight\" . %) (rest arr)))\n\
    \                  (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ \"Nine\" . %) (rest arr)))\n                  (by_length (rest arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([arr (sort arr (lambda (x) (and (<=\
    \ x 9) (>= x 1))))])\n        (map (lambda (x) (cond [(= x 0) \"Zero\"]\n    \
    \                            [(= x 1) \"One\"]\n                             \
    \   [(= x 2) \"Two\"]\n                                [(= x 3) \"Three\"]\n \
    \                               [(= x 4) \"Four\"]\n                         \
    \       [(= x 5) \"Five\"]\n                                [(= x 6) \"Six\"]\n\
    \                                [(= x 7) \"Seven\"]\n                       \
    \         [(= x 8) \"Eight\"]\n                                [(= x 9) \"Nine\"\
    ]\n                                [else (cond [(< x 10) \"Ten\"]\n          \
    \                                [(< x 20) \"Twenty\"]\n                     \
    \                     [(< x 30) \"Thirty\"]\n                                \
    \          [(< x 40) \"Forty\"]\n                                          [(<\
    \ x 50) \"Fifty\"]\n                                          [(< x 60) \"Sixty\"\
    ]\n                                          [(< x 70) \"Seventy\"]\n        \
    \                                  [(< x 80) \"Eighty\"]\n                   \
    \                       [(< x 90) \"Ninety\"]\n                              \
    \            [else (cond [(< x 100) \"One Hundred\"]\n                       \
    \                             [(< x 200) \"Two Hundred\"]\n                  \
    \                                  [(< x 300) \"Three Hundred\"]\n           \
    \                                         [(< x 400) \"Four Hundred\"]\n     \
    \                                               [(< x 500) \"Five Hundred\"]\n\
    \                                                    [(< x 600) \"Six Hundred\"\
    ]\n                                                    [(< x 700) \"Seven Hundred\"\
    ]\n                                                    [(< x 800) \"Eight Hundred\"\
    ]\n                                                    [(< x 900) \"Nine Hundred\"\
    ]\n                                                    [else (cond [(< x 1000)\
    \ \"One Thousand\"]\n                                                        \
    \      [(< x 2000) \"Two Thousand\"]\n                                       \
    \                       [(< x 3000) \"Three Thousand\"]\n                    \
    \                                          [(< x 4000) \"Four Thousand\"]\n  \
    \                                                            [(< x 5000) \"Five\
    \ Thousand\"]\n                                                              [(<\
    \ x 6000) \"Six Thousand\"]\n                                                \
    \              [(< x 7000) \"Seven Thousand\"]\n                             \
    \                                 [(< x 8000) \"Eight Thousand\"]\n          \
    \                                                    [(< x 9000) \"Nine Thousand\"\
    ]\n                                                              [else (cond [(<\
    \ x 10000) \"One Million\"]\n                                                \
    \                        [(< x 20000) \"Two Million\"]\n                     \
    \                                                   [(< x 30000", "  (if (null?\
    \ arr)\n      '()\n      (let ([len (length arr)])\n        (if (= len 0)\n  \
    \          '()\n            (let ([head (car arr)])\n              (if (< head\
    \ 9)\n                  (cons (string->symbol (string->string head)) (by_length\
    \ (cdr arr)))\n                  (cons (string->symbol (string->string head))\
    \ (by_length (cdr arr))))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons\
    \ (string->symbol (string->string %)) (list head %))\n                       \
    \          (by_length (cdr arr)))\n                   (by_length (cdr arr)))\n\
    \            (cons (string->symbol (string->string head))\n                  (by_length\
    \ (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([arr (sort arr\
    \ (lambda (x) (<= (length x) 9)))])\n        (map (lambda (x) (if (<= (length\
    \ x) 9) (cond [(equal? (length x) 9) \"Nine\"]\n                             \
    \             [(equal? (length x) 8) \"Eight\"]\n                            \
    \              [(equal? (length x) 7) \"Seven\"]\n                           \
    \               [(equal? (length x) 6) \"Six\"]\n                            \
    \              [(equal? (length x) 5) \"Five\"]\n                            \
    \              [(equal? (length x) 4) \"Four\"]\n                            \
    \              [(equal? (length x) 3) \"Three\"]\n                           \
    \               [(equal? (length x) 2) \"Two\"]\n                            \
    \              [(equal? (length x) 1) \"One\"]\n                             \
    \             [(equal? (length x) 0) \"Zero\"]\n                             \
    \             [(equal? (length x) -1) \"MinusOne\"]\n                        \
    \                  [(equal? (length x) 55) \"Hundred\"]\n                    \
    \                      [(equal? (length x) 54) \"Twelve\"]\n                 \
    \                         [(equal? (length x) 53) \"Thirty\"]\n              \
    \                            [(equal? (length x) 52) \"Twenty\"]\n           \
    \                               [(equal? (length x) 51) \"Forty\"]\n         \
    \                                 [(equal? (length x) 50) \"Fifty\"]\n       \
    \                                   [(equal? (length x) 49) \"Ninety\"]\n    \
    \                                      [(equal? (length x) 48) \"Eighty\"]\n \
    \                                         [(equal? (length x) 47) \"Seventy\"\
    ]\n                                          [(equal? (length x) 46) \"Sixty\"\
    ]\n                                          [(equal? (length x) 45) \"Fifty\"\
    ]\n                                          [(equal? (length x) 44) \"Fourty\"\
    ]\n                                          [(equal? (length x) 43) \"Thirty\"\
    ]\n                                          [(equal? (length x) 42) \"Twenty\"\
    ]\n                                          [(equal? (length x) 41) \"Forty\"\
    ]\n                                          [(equal? (length x) 40) \"Fifty\"\
    ]\n                                          [(equal? (length x) 39) \"Ninety\"\
    ]\n                                          [(equal? (length x) 38) \"Eighty\"\
    ]\n                                          [(equal? (length x) 37) \"Seventy\"\
    ]\n                                          [(equal? (length x) 36) \"Sixty\"\
    ]\n                                          [(equal? (length x) 35) \"Fifty\"\
    ]\n                                          [(equal? (length x) 34) \"Fourty\"\
    ]\n                                          [(equal? (length x) 33) \"Thirty\"\
    ]\n                                          [(equal? (length x) 32) \"Twenty\"\
    ]\n                                          [(equal? (length x) 31) \"Forty\"\
    ]\n                                          [(equal? (length x) 30) \"Fifty\"\
    ]\n                                          [(equal? (length x) 29) \"Nine",
  "  (if (null? arr)\n      '()\n      (let ([arr (sort arr)])\n        (if (= (length\
    \ arr) 1)\n            (cons (car arr) '())\n            (let ([head (car arr)])\n\
    \              (cons (if (< head 1) \"One\" (if (< head 2) \"Two\" (if (< head\
    \ 3) \"Three\" (if (< head 4) \"Four\" (if (< head 5) \"Five\" (if (< head 6)\
    \ \"Six\" (if (< head 7) \"Seven\" (if (< head 8) \"Eight\" (if (< head 9) \"\
    Nine\")))))))\n              (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string->symbol (+ head 1)) (by_length (cdr arr)))\n            (cons\
    \ (string->symbol (+ head 9)) (by_length (cdr arr)))))))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([len (length arr)])\n        (if (= len 0)\n         \
    \   '()\n            (let ([head (car arr)])\n              (if (< head 9)\n \
    \                 (cons (cons head (cons \"One\" (cdr arr)))\n               \
    \         (by_length (cdr arr)))\n                  (cons (cons head (cons \"\
    Ten\" (cdr arr)))\n                        (by_length (cdr arr))))))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (reverse (map #(cons head (cons \"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")) (rest arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Ten\" \"Eleven\" \"Twelve\"\
    \ \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\"\
    \ \"Nineteen\")) (rest arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"Twenty\" \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\" \"Seventy\" \"Eighty\" \"\
    Ninety\")) (rest arr)))\n            (cons (reverse (map #(cons head (cons \"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )) (rest arr)))\n            (cons (reverse (map #(cons head (cons \"Ten\" \"\
    Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\"\
    \ \"Eighteen\" \"Nineteen\")) (rest arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Twenty\" \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\" \"Seventy\" \"\
    Eighty\" \"Ninety\")) (rest arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")) (rest arr)))\n            (cons (reverse (map #(cons head (cons \"\
    Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\"\
    \ \"Seventeen\" \"Eighteen\" \"Nineteen\")) (rest arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Twenty\" \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\" \"\
    Seventy\" \"Eighty\" \"Ninety\")) (rest arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\"\
    \ \"Eight\" \"Nine\")) (rest arr)))\n            (", "  (if (empty? arr)\n   \
    \   '()\n      (let ([head (first arr)])\n        (if (< head 9)\n           \
    \ (cons (reverse (map #(cons head (cons \"One\" (reverse (list %)))))\n      \
    \                 (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Ten\" (reverse (list %)))))\n                       (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\" (reverse\
    \ (list %)))))\n                       (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Thirty\" (reverse (list %)))))\n         \
    \              (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Fourty\" (reverse (list %)))))\n                       (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons head (cons \"Fifty\" (reverse\
    \ (list %)))))\n                       (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Sixty\" (reverse (list %)))))\n          \
    \             (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Seventy\" (reverse (list %)))))\n                       (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons head (cons \"Eighty\" (reverse\
    \ (list %)))))\n                       (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Ninety\" (reverse (list %)))))\n         \
    \              (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"One\" (reverse (list %)))))\n                       (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons head (cons \"Ten\" (reverse\
    \ (list %)))))\n                       (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Twenty\" (reverse (list %)))))\n         \
    \              (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Thirty\" (reverse (list %)))))\n                       (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(con", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (reverse (map #(cons head (cons \"One\" (cdr %))) (reverse (map #(cons\
    \ head (cons \"Two\" (cdr %))) (reverse (map #(cons head (cons \"Three\" (cdr\
    \ %))) (reverse (map #(cons head (cons \"Four\" (cdr %))) (reverse (map #(cons\
    \ head (cons \"Five\" (cdr %))) (reverse (map #(cons head (cons \"Six\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"Seven\" (cdr %))) (reverse (map #(cons head\
    \ (cons \"Eight\" (cdr %))) (reverse (map #(cons head (cons \"Nine\" (cdr %)))\
    \ (car arr))))))))))))\n            (cons (reverse (map #(cons head (cons \"One\"\
    \ (cdr %))) (car arr)))))\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cons head (cons \"Two\" (cdr %))) (car arr)))))\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons head (cons \"Three\" (cdr %))) (car\
    \ arr)))))\n        (if (< head 9)\n            (cons (reverse (map #(cons head\
    \ (cons \"Four\" (cdr %))) (car arr)))))\n        (if (< head 9)\n           \
    \ (cons (reverse (map #(cons head (cons \"Five\" (cdr %))) (car arr)))))\n   \
    \     (if (< head 9)\n            (cons (reverse (map #(cons head (cons \"Six\"\
    \ (cdr %))) (car arr)))))\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cons head (cons \"Seven\" (cdr %))) (car arr)))))\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons head (cons \"Eight\" (cdr %))) (car\
    \ arr)))))\n        (if (< head 9)\n            (cons (reverse (map #(cons head\
    \ (cons \"Nine\" (c", "  (if (null? arr)\n      '()\n      (let ([arr (sort arr\
    \ (lambda (x y) (< (length x) 9) (< (length y) 9)))])\n        (let ([result (map\
    \ #(cond [(< x 9) (cons \"One\" (reverse (list x)))]\n                       \
    \            [(< x 9) (cons \"Two\" (reverse (list x)))]\n                   \
    \                [(< x 9) (cons \"Three\" (reverse (list x)))]\n             \
    \                      [(< x 9) (cons \"Four\" (reverse (list x)))]\n        \
    \                           [(< x 9) (cons \"Five\" (reverse (list x)))]\n   \
    \                                [(< x 9) (cons \"Six\" (reverse (list x)))]\n\
    \                                   [(< x 9) (cons \"Seven\" (reverse (list x)))]\n\
    \                                   [(< x 9) (cons \"Eight\" (reverse (list x)))]\n\
    \                                   [(< x 9) (cons \"Nine\" (reverse (list x)))]\n\
    \                                   [else (cons \"Zero\" (reverse (list x)))])])\n\
    \               (reverse result)))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n    [else\
    \ (cons (first arr) (by_length (rest arr)))]))\n", "  (if (empty? arr)\n     \
    \ '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (reverse (map #(cons head (cons \"One\" (cdr %)))\n                        \
    \       (filter #(< head (- 10 %)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Ten\" (cdr %)))\n                               (filter #(< head\
    \ (- 100 %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Hundred\"\
    \ (cdr %)))\n                               (filter #(< head (- 1000 %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Thousand\" (cdr %)))\n  \
    \                             (filter #(< head (- 10000 %)) arr)))\n         \
    \   (cons (reverse (map #(cons head (cons \"Million\" (cdr %)))\n            \
    \                   (filter #(< head (- 1000000 %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Billion\" (cdr %)))\n                    \
    \           (filter #(< head (- 1000000000 %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Trillion\" (cdr %)))\n                            \
    \   (filter #(< head (- 1000000000000 %)) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Quadrillion\" (cdr %)))\n                              \
    \ (filter #(< head (- 1000000000000000 %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Quintillion\" (cdr %)))\n                         \
    \      (filter #(< head (- 1000000000000000000 %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Sextillion\" (cdr %)))\n                          \
    \     (filter #(< head (- 1000000000000000000000 %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Septillion\" (cdr %)))\n                 \
    \              (filter #(< head (- 1000000000000000000000000 %)) arr)))\n    \
    \        (cons (reverse (map #(cons head (cons \"Octillion\" (cdr %)))\n     \
    \                          (filter #(< head (- 100000000000000000000000000 %))\
    \ arr)))", "  (cond\n    [(empty? arr) empty]\n    [(number? (first arr)) (cons\
    \ (first arr) (by_length (rest arr)))]\n    [else (cons (first arr) (by_length\
    \ (rest arr)))]))\n", "  (if (null? arr)\n      '()\n      (let ([arr (sort arr\
    \ (lambda (x y) (< (length x) 9) (< (length y) 9)))])\n        (map (lambda (x)\
    \ (cond ((< x 9) (cons \"Nine\" x))\n                                 ((< x 1)\
    \ (cons \"One\" x))\n                                 ((< x 2) (cons \"Two\" x))\n\
    \                                 ((< x 3) (cons \"Three\" x))\n             \
    \                    ((< x 4) (cons \"Four\" x))\n                           \
    \      ((< x 5) (cons \"Five\" x))\n                                 ((< x 6)\
    \ (cons \"Six\" x))\n                                 ((< x 7) (cons \"Seven\"\
    \ x))\n                                 ((< x 8) (cons \"Eight\" x))\n       \
    \                          ((< x 9) (cons \"Nine\" x))\n                     \
    \            #t (cons \"Zero\" x))) arr))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(number? (first arr)) (cons (first arr) (map #(cons (second %) 'One) (filter\
    \ #(< 1 (second %)) arr)))]\n    [else (cons (first arr) (map #(cons (second %)\
    \ 'One) (filter #(< 1 (second %)) arr)))]))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cons (substring \"One\" 0 1) (substring \"Nine\" 0 1))\n            \
    \                  (cons head (substring \"Nine\" 0 1))))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons (substring \"One\" 0 1)\
    \ (substring \"Nine\" 0 1))\n                              (cons head (substring\
    \ \"Nine\" 0 1))))\n                  (by_length (rest arr))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([nums (map number->string arr)\n             nums-sorted\
    \ (sort nums compare-numbers)])\n        (map (\u03BB (x) (if (>= (length nums)\
    \ 1)\n                          (cons (string->number x) 'One)\n             \
    \             (cons (string->number x) 'Nine)))\n             (reverse nums-sorted)))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (append (by_length (filter (lambda (x) (> x 1)) arr))\n    \
    \                (list (by_length (filter (lambda (x) (= x head)) arr)))))\n \
    \       (append (by_length (filter (lambda (x) (< x 9)) arr))\n              \
    \  (list (by_length (filter (lambda (x) (= x head)) arr)))))\n  )\n)\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons (nth arr (- head 1)) #(cons nth \"\
    One\")))\n                        (map #(cons (nth arr (- head 2)) #(cons nth\
    \ \"Two\")))\n                        (map #(cons (nth arr (- head 3)) #(cons\
    \ nth \"Three\")))\n                        (map #(cons (nth arr (- head 4)) #(cons\
    \ nth \"Four\")))\n                        (map #(cons (nth arr (- head 5)) #(cons\
    \ nth \"Five\")))\n                        (map #(cons (nth arr (- head 6)) #(cons\
    \ nth \"Six\")))\n                        (map #(cons (nth arr (- head 7)) #(cons\
    \ nth \"Seven\")))\n                        (map #(cons (nth arr (- head 8)) #(cons\
    \ nth \"Eight\")))\n                        (map #(cons (nth arr (- head 9)) #(cons\
    \ nth \"Nine\"))))\n            (cons (reverse (map #(cons (nth arr (- head 1))\
    \ #(cons nth \"One\")))\n                    (map #(cons (nth arr (- head 2))\
    \ #(cons nth \"Two\")))\n                    (map #(cons (nth arr (- head 3))\
    \ #(cons nth \"Three\")))\n                    (map #(cons (nth arr (- head 4))\
    \ #(cons nth \"Four\")))\n                    (map #(cons (nth arr (- head 5))\
    \ #(cons nth \"Five\")))\n                    (map #(cons (nth arr (- head 6))\
    \ #(cons nth \"Six\")))\n                    (map #(cons (nth arr (- head 7))\
    \ #(cons nth \"Seven\")))\n                    (map #(cons (nth arr (- head 8))\
    \ #(cons nth \"Eight\")))\n                    (map #(cons (nth arr (- head 9))\
    \ #(cons nth \"Nine\"))))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons\
    \ head (cons \"One\" (cdr %)))\n                               (filter #(< head\
    \ (- 9 %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Ten\" (cdr\
    \ %)))\n                               (filter #(< head (- 10 %)) arr)))\n   \
    \         (cons (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n       \
    \                        (filter #(< head (- 20 %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Thirty\" (cdr %)))\n                     \
    \          (filter #(< head (- 30 %)) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Fourty\" (cdr %)))\n                               (filter\
    \ #(< head (- 40 %)) arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"Fifty\" (cdr %)))\n                               (filter #(< head (- 50 %))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Sixty\" (cdr %)))\n\
    \                               (filter #(< head (- 60 %)) arr)))\n          \
    \  (cons (reverse (map #(cons head (cons \"Seventy\" (cdr %)))\n             \
    \                  (filter #(< head (- 70 %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Eighty\" (cdr %)))\n                              \
    \ (filter #(< head (- 80 %)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Ninety\" (cdr %)))\n                               (filter #(< head\
    \ (- 90 %)) arr)))\n            (cons (reverse (map #(cons head (cons \"One\"\
    \ (cdr %)))\n                               (filter #(< head (- 100 %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n       \
    \                        (filter #(< head (- 1000 %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n                     \
    \          (filter #(", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons head\
    \ (cons \"One\" (cdr %)))\n                               (filter #(< head (-\
    \ 10 %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Ten\" (cdr\
    \ %)))\n                               (filter #(< head (- 100 %)) arr)))\n  \
    \          (cons (reverse (map #(cons head (cons \"Hundred\" (cdr %)))\n     \
    \                          (filter #(< head (- 1000 %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Thousand\" (cdr %)))\n                   \
    \            (filter #(< head (- 10000 %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"One\" (cdr %)))\n                               (filter\
    \ #(< head (- 1000000 %)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Ten\" (cdr %)))\n                               (filter #(< head (-\
    \ 1000000000 %)) arr)))\n            (cons (reverse (map #(cons head (cons \"\
    Hundred\" (cdr %)))\n                               (filter #(< head (- 1000000000000\
    \ %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Thousand\" (cdr\
    \ %)))\n                               (filter #(< head (- 1000000000000000 %))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"One\" (cdr %)))\n\
    \                               (filter #(< head (- 1000000000000000000 %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n       \
    \                        (filter #(< head (- 1000000000000000000000 %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Hundred\" (cdr %)))\n   \
    \                            (filter #(< head (- 1000000000000000000000000 %))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Thousand\" (cdr\
    \ %)))\n                               (filter #(< head (- 1000000000000000000000000000\
    \ %)) arr)))\n            (cons (reverse (map #(cons head (con", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (reverse (cons (cons \"One\" head) (cdr arr)))\n             \
    \     (by_length (cdr arr)))\n            (cons (reverse (cons (cons \"Nine\"\
    \ head) (cdr arr)))\n                  (by_length (cdr arr)))))\n  )\n)\n", " \
    \ (if (null? arr)\n      '()\n      (let ([arr (sort arr (lambda (x) (<= (length\
    \ x) 9) (length x)))])\n        (map (lambda (x) (cond [(<= (length x) 9) (cons\
    \ (substring x 0 1) (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\"\
    \ \"Seven\" \"Eight\" \"Nine\"))]\n                              [(<= (length\
    \ x) 8) (cons (substring x 0 1) (cons \"Ten\" \"Twenty\" \"Thirty\" \"Fourty\"\
    \ \"Fifty\" \"Sixty\" \"Seventy\" \"Eighty\" \"Ninety\"))]\n                 \
    \             [(<= (length x) 7) '()]\n                              [(<= (length\
    \ x) 6) '()]\n                              [(<= (length x) 5) '()]\n        \
    \                      [(<= (length x) 4) '()]\n                             \
    \ [(<= (length x) 3) '()]\n                              [(<= (length x) 2) '()]\n\
    \                              [(<= (length x) 1) '()]\n                     \
    \         [else '()]))\n              arr))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cond [(< head %) %]\n                                        [(= head\
    \ %) %]\n                                        [(= head 1) \"One\"]\n      \
    \                                  [(= head 2) \"Two\"]\n                    \
    \                    [(= head 3) \"Three\"]\n                                \
    \        [(= head 4) \"Four\"]\n                                        [(= head\
    \ 5) \"Five\"]\n                                        [(= head 6) \"Six\"]\n\
    \                                        [(= head 7) \"Seven\"]\n            \
    \                            [(= head 8) \"Eight\"]\n                        \
    \                [(= head 9) \"Nine\"]\n                                     \
    \   [else (cons (string->symbol (string->string head)) '())])) \n            \
    \      (by_length (cdr arr)))\n            (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))))\n))\n", "  (if (empty? arr)\n      '()\n   \
    \   (let ([len (length arr)])\n        (if (= len 0)\n            '()\n      \
    \      (let ([head (first arr)])\n              (if (< head 9)\n             \
    \     (cons (string->symbol (+ head 1)) (by_length (rest arr)))\n            \
    \      (cons (string->symbol (+ head 1)) (by_length (rest arr)))))\n         \
    \   (cons (string->symbol (+ head 1)) (by_length (rest arr)))))\n        ))\n",
  "  (if (null? arr)\n      '()\n      (let ([arr (sort arr (lambda (x) (<= (length\
    \ x) 9) (length x))))\n            (result (map by_length_helper arr))])\n   \
    \     (reverse result)))\n", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cond\
    \ [(< head %) %]\n                                      [(= head %) One]\n   \
    \                                   [(= head %) Two]\n                       \
    \               [(= head %) Three]\n                                      [(=\
    \ head %) Four]\n                                      [(= head %) Five]\n   \
    \                                   [(= head %) Six]\n                       \
    \               [(= head %) Seven]\n                                      [(=\
    \ head %) Eight]\n                                      [(= head %) Nine]\n  \
    \                                    [else (cons head (cons head '()))])) \n \
    \                 (by_length (cdr arr)))\n            (cons head (by_length (cdr\
    \ arr)))))\n))\n", "  (if (null? arr)\n      '()\n      (let ([arr (sort arr)])\n\
    \        (if (= (length arr) 9)\n            (let ([arr (reverse arr)])\n    \
    \          (map #(cond [(< % 10) \"One\"]\n                            [(< % 10)\
    \ \"Two\"]\n                            [(< % 10) \"Three\"]\n               \
    \             [(< % 10) \"Four\"]\n                            [(< % 10) \"Five\"\
    ]\n                            [(< % 10) \"Six\"]\n                          \
    \  [(< % 10) \"Seven\"]\n                            [(< % 10) \"Eight\"]\n  \
    \                          [(< % 10) \"Nine\"]\n                            [(<\
    \ % 10) \"Ten\"]\n                            [(< % 10) \"Eleven\"]\n        \
    \                    [(< % 10) \"Twelve\"]\n                            [(< %\
    \ 10) \"Thirteen\"]\n                            [(< % 10) \"Fourteen\"]\n   \
    \                         [(< % 10) \"Fifteen\"]\n                           \
    \ [(< % 10) \"Sixteen\"]\n                            [(< % 10) \"Seventeen\"\
    ]\n                            [(< % 10) \"Eighteen\"]\n                     \
    \       [(< % 10) \"Nineteen\"]\n                            [(< % 10) \"Twenty\"\
    ]\n                            [(< % 10) \"Twenty-one\"]\n                   \
    \         [(< % 10) \"Twenty-two\"]\n                            [(< % 10) \"\
    Twenty-three\"]\n                            [(< % 10) \"Twenty-four\"]\n    \
    \                        [(< % 10) \"Twenty-five\"]\n                        \
    \    [(< % 10) \"Twenty-six\"]\n                            [(< % 10) \"Twenty-seven\"\
    ]\n                            [(< % 10) \"Twenty-eight\"]\n                 \
    \           [(< % 10) \"Twenty-nine\"]\n                            [(< % 10)\
    \ \"Thirty\"]\n                            [(< % 10) \"Thirty-one\"]\n       \
    \                     [(< % 10) \"Thirty-two\"]\n                            [(<\
    \ % 10) \"Thirty-three\"]\n                            [(< % 10) \"Thirty-four\"\
    ]\n                            [(< % 10) \"Thirty-five\"]\n                  \
    \          [(< % 10) \"Thirty-six\"]\n                            [(< % 10) \"\
    Thirty-seven\"]\n                            [(< % 10) \"Thirty-eight\"]\n   \
    \                         [(< % 10) \"Thirty-nine\"]\n                       \
    \     [(< % 10) \"Fourty\"]\n                            [(< % 10) \"Fourty-one\"\
    ]\n                            [(< % 10) \"Fourty-two\"]\n                   \
    \         [(", "  (if (null? arr)\n      '()\n      (let ([len (length arr)])\n\
    \        (if (= len 0)\n            '()\n            (let ([head (first arr)])\n\
    \              (if (< head 9)\n                  (cons (cons head (cons \"One\"\
    \ (by_length (rest arr)))) (by_length (rest arr)))\n                  (cons (cons\
    \ head (cons \"Two\" (by_length (rest arr)))) (by_length (rest arr)))\n      \
    \            (cons (cons head (cons \"Three\" (by_length (rest arr)))) (by_length\
    \ (rest arr)))\n                  (cons (cons head (cons \"Four\" (by_length (rest\
    \ arr)))) (by_length (rest arr)))\n                  (cons (cons head (cons \"\
    Five\" (by_length (rest arr)))) (by_length (rest arr)))\n                  (cons\
    \ (cons head (cons \"Six\" (by_length (rest arr)))) (by_length (rest arr)))\n\
    \                  (cons (cons head (cons \"Seven\" (by_length (rest arr)))) (by_length\
    \ (rest arr)))\n                  (cons (cons head (cons \"Eight\" (by_length\
    \ (rest arr)))) (by_length (rest arr)))\n                  (cons (cons head (cons\
    \ \"Nine\" (by_length (rest arr)))) (by_length (rest arr)))\n                \
    \  (cons (cons head (cons \"Ten\" (by_length (rest arr)))) (by_length (rest arr)))\n\
    \                  (cons (cons head (cons \"Eleven\" (by_length (rest arr))))\
    \ (by_length (rest arr)))\n                  (cons (cons head (cons \"Twelve\"\
    \ (by_length (rest arr)))) (by_length (rest arr)))\n                  (cons (cons\
    \ head (cons \"Thirteen\" (by_length (rest arr)))) (by_length (rest arr)))\n \
    \                 (cons (cons head (cons \"Fourteen\" (by_length (rest arr))))\
    \ (by_length (rest arr)))\n                  (cons (cons head (cons \"Fifteen\"\
    \ (by_length (rest arr)))) (by_length (rest arr)))\n                  (cons (cons\
    \ head (cons \"Sixteen\" (by_length (rest arr)))) (by_length (rest arr)))\n  \
    \                (cons (cons head ", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse (map\
    \ #(cons (car %) (cdr %)) (filter (lambda (x) (<= head x)) arr)))\n          \
    \        (by_length (filter (lambda (x) (not (<= head x)) arr)))))))\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([arr (sort arr (lambda (x y) (< (length\
    \ x) 9) (< (length y) 9)))])\n        (map (lambda (x) (if (< x 9) (cons \"Nine\"\
    \ x) x))\n             (reverse arr)))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (append (by_length\
    \ (cdr arr))\n                    (list (by_length (reverse (cdr arr))))\n   \
    \                 (list (by_length (reverse (cdr arr)))))\n            (append\
    \ (by_length (cdr arr))\n                    (list (by_length (reverse (cdr arr))))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\"\
    \ \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n\
    \            (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n \
    \           (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n \
    \           (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n \
    \           (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n \
    \           (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n \
    \           (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n \
    \           (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n \
    \           (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n \
    \           (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n \
    \           (cons (reverse (map #(cons (nth arr (- head 1)) #(cons \"One\" \"\
    Two\" \"Three\" \"Four", "  (if (empty? arr)\n      '()\n      (let ([arr (reverse\
    \ arr)])\n        (map (lambda (x) (cond [(< x 9) (cons x (cons \"Nine\" '()))]\n\
    \                                 [(< x 1) (cons x (cons \"One\" '()))]\n    \
    \                             [(< x 2) (cons x (cons \"Two\" '()))]\n        \
    \                         [(< x 3) (cons x (cons \"Three\" '()))]\n          \
    \                       [(< x 4) (cons x (cons \"Four\" '()))]\n             \
    \                    [(< x 5) (cons x (cons \"Five\" '()))]\n                \
    \                 [(< x 6) (cons x (cons \"Six\" '()))]\n                    \
    \             [(< x 7) (cons x (cons \"Seven\" '()))]\n                      \
    \           [(< x 8) (cons x (cons \"Eight\" '()))]\n                        \
    \         [(< x 9) (cons x (cons \"Nine\" '()))]))\n              arr))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons (string->symbol (string->string %))\
    \ (cons head (sub1 head))) (rest arr)))\n                  (by_length (rest arr)))\n\
    \            (cons (string->symbol (string->string head)) (by_length (rest arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([len (length arr)])\n        (if (=\
    \ len 0)\n            '()\n            (let ([head (first arr)])\n           \
    \   (if (< head 9)\n                  (cons (cons head (lookup head '(One Two\
    \ Three Four Five Six Seven Eight Nine))) (by_length (rest arr)))\n          \
    \        (cons (cons head (lookup head '(One Two Three Four Five Six Seven)))\
    \ (by_length (rest arr)))\n                  (cons (cons head (lookup head '(One\
    \ Two Three Four Five Six))) (by_length (rest arr)))\n                  (cons\
    \ (cons head (lookup head '(One Two Three Four Five Seven))) (by_length (rest\
    \ arr)))\n                  (cons (cons head (lookup head '(One Two Three Four\
    \ Five Eight))) (by_length (rest arr)))\n                  (cons (cons head (lookup\
    \ head '(One Two Three Four Five Nine))) (by_length (rest arr)))\n           \
    \       (cons (cons head (lookup head '(One Two Three Four Five))) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head '(One Two Three\
    \ Four))) (by_length (rest arr)))\n                  (cons (cons head (lookup\
    \ head '(One Two Three))) (by_length (rest arr)))\n                  (cons (cons\
    \ head (lookup head '(One Two))) (by_length (rest arr)))\n                  (cons\
    \ (cons head (lookup head '(One))) (by_length (rest arr)))\n                 \
    \ (cons (cons head (lookup head '(Zero))) (by_length (rest arr)))\n          \
    \        (cons (cons head (lookup head '(One))) (by_length (rest arr)))\n    \
    \              (cons (cons head (lookup head '(Two))) (by_length (rest arr)))\n\
    \                  (cons (cons head (lookup head '(Three))) (by_length (rest arr)))\n\
    \                  (cons (cons head (lookup head '(Four))) (by_length (rest arr)))\n\
    \                  (cons (cons head (lookup head '(Five))) (by_length (rest arr)))\n\
    \                  ", "  (if (empty? arr)\n      '()\n      (let ([arr (sort arr)])\n\
    \        (let ([len (length arr)])\n          (if (= len 0)\n              (list\
    \ 'One)\n              (let ([head (first arr)])\n                (if (< head\
    \ 10)\n                    (cond [(< head 1) (list 'One)]\n                  \
    \        [(< head 2) (list 'Two)]\n                          [(< head 3) (list\
    \ 'Three)]\n                          [(< head 4) (list 'Four)]\n            \
    \              [(< head 5) (list 'Five)]\n                          [(< head 6)\
    \ (list 'Six)]\n                          [(< head 7) (list 'Seven)]\n       \
    \                   [(< head 8) (list 'Eight)]\n                          [(<\
    \ head 9) (list 'Nine)]\n                          [(> head 1) (list 'One)]\n\
    \                          [(> head 2) (list 'Two)]\n                        \
    \  [(> head 3) (list 'Three)]\n                          [(> head 4) (list 'Four)]\n\
    \                          [(> head 5) (list 'Five)]\n                       \
    \   [(> head 6) (list 'Six)]\n                          [(> head 7) (list 'Seven)]\n\
    \                          [(> head 8) (list 'Eight)]\n                      \
    \    [(> head 9) (list 'Nine)]\n                          [else (list 'One)])))\n\
    \                (if (< len 1)\n                    (cond [(< head 1) (list 'One)]\n\
    \                          [(< head 2) (list 'Two)]\n                        \
    \  [(< head 3) (list 'Three)]\n                          [(< head 4) (list 'Four)]\n\
    \                          [(< head 5) (list 'Five)]\n                       \
    \   [(< head 6) (list 'Six)]\n                          [(< head 7) (list 'Seven)]\n\
    \                          [(< head 8) (list 'Eight)]\n                      \
    \    [(< head 9) (list 'Nine)]\n                          [else (list 'One)])))\n\
    \                (if (< len 2)\n                    (cond [(< head 1) (list 'One)]\n\
    \                          [(< head 2) (list 'Two)]\n                        \
    \  [(< head 3) (list 'Three)]\n                          [(< head 4) (list 'Four)]\n\
    \                          [(< head 5) (list 'Five)]\n                       \
    \   [(< head 6) (list 'Six)]\n                          [(< head 7) (list 'Seven)]\n\
    \                          [(< head 8) (list 'Eight)]\n                      \
    \    [(< head 9) (list 'Nine)]\n                          ", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n\
    \    [else (cons (first arr) (by_length (rest arr)))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (reverse (cons (cons \"One\" head) (cdr arr)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (reverse (cons (cons \"Ten\" head) (cdr arr)))\n\
    \                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([arr (reverse arr)])\n        (map (lambda (x) (cond [(< x 9) (cons\
    \ \"Nine\" (reverse (list \"Nine\")))]\n                             [(< x 8)\
    \ (cons \"Eight\" (reverse (list \"Eight\")))]\n                             [(<\
    \ x 7) (cons \"Seven\" (reverse (list \"Seven\")))]\n                        \
    \     [(< x 6) (cons \"Six\" (reverse (list \"Six\")))]\n                    \
    \         [(< x 5) (cons \"Five\" (reverse (list \"Five\")))]\n              \
    \               [(< x 4) (cons \"Four\" (reverse (list \"Four\")))]\n        \
    \                     [(< x 3) (cons \"Three\" (reverse (list \"Three\")))]\n\
    \                             [(< x 2) (cons \"Two\" (reverse (list \"Two\")))]\n\
    \                             [(< x 1) (cons \"One\" (reverse (list \"One\")))]\n\
    \                             [else (cons x (reverse (list \"One\")))]))\n   \
    \           arr))))\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (first\
    \ arr)) (cons (first arr) (by_length (rest arr)))]\n    [else (cons (first arr)\
    \ (by_length (rest arr)))]))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 9)\n            (cons (string->symbol (symbol->string\
    \ head)) (by_length (rest arr)))\n            (cons (string->symbol (symbol->string\
    \ head)) (by_length (rest arr)))))\n      )\n    )\n  )\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr)) (by_length\
    \ (cdr arr)))]\n    [else (cons (by_length (cdr arr)) (by_length (cdr arr)))]\n\
    \  )\n)\n", "  (if (null? arr)\n      '()\n      (let ([nums (sort (map number->string\
    \ arr))])\n        (if (= (length nums) 0)\n            '()\n            (let\
    \ ([nums (reverse nums)])\n              (map (lambda (x)\n                  \
    \   (let ([name (if (= (number->string x) \"One\")\n                         \
    \          \"One\"\n                                   (if (= (number->string\
    \ x) \"Two\")\n                                       \"Two\"\n              \
    \                         (if (= (number->string x) \"Three\")\n             \
    \                              \"Three\"\n                                   \
    \        (if (= (number->string x) \"Four\")\n                               \
    \                \"Four\"\n                                               (if\
    \ (= (number->string x) \"Five\")\n                                          \
    \         \"Five\"\n                                                   (if (=\
    \ (number->string x) \"Six\")\n                                              \
    \         \"Six\"\n                                                       (if\
    \ (= (number->string x) \"Seven\")\n                                         \
    \                  \"Seven\"\n                                               \
    \          (if (= (number->string x) \"Eight\")\n                            \
    \                                 \"Eight\"\n                                \
    \                             (if (= (number->string x) \"Nine\")\n          \
    \                                                       \"Nine\"\n           \
    \                                                      (if (= (number->string\
    \ x) \"Ten\")\n                                                              \
    \       \"Ten\"\n                                                            \
    \         (if (= (number->string x) \"Eleven\")\n                            \
    \                                            \"Eleven\"\n                    \
    \                                                    (if (= (number->string x)\
    \ \"Twelve\")\n                                                              \
    \              \"Twelve\"\n                                                  \
    \                          (if (= (number->string x) \"Thirteen\")\n         \
    \                                                                       \"Thirteen\"\
    \n                                                                           \
    \     (if (= (number->string x) \"Fourteen\")\n                              \
    \                                                      \"Fourteen\"\n        \
    \                                                                            (if\
    \ (= (number->string x) \"Fifteen\")\n                                       \
    \                                                 \"Fifteen\"\n              \
    \                                                                          (if\
    \ (= (number->string x) \"Sixteen\")\n                                       \
    \                                                     \"Sixteen\"\n          \
    \                                                                            \
    \      (if (= (number->string x) \"Seventeen\")\n                            \
    \                                                                    \"Seventeen\"\
    \n                                                                           \
    \                     (if (= (number->string x) \"Eighteen\")\n              \
    \                                                                            \
    \          \"Eighteen\"\n                                                    \
    \                                                (if (= (number->string x) \"\
    Nineteen\")\n                                                                \
    \                                        \"Nineteen\"\n                      \
    \                                                                            \
    \      (if (= (number->string x) \"Twenty\")\n                               \
    \                                                                            \
    \ \"Twenty\"\n                                                               \
    \                                             (if (= (number->string x) \"Thirty\"\
    )\n                                                                          \
    \                                      \"Thirty\"\n                          \
    \                                                                            \
    \          (if (= (number->string x) \"Forty\")\n                            \
    \                                                                            \
    \            \"Forty\"\n                                                     \
    \                                                               (if (", "  (if\
    \ (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons head (cons \"One\" (cdr %)))\n  \
    \                             (filter (lambda (x) (<= x head)) arr)))\n      \
    \      (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n             \
    \                  (filter (lambda (x) (<= x head)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n                     \
    \          (filter (lambda (x) (<= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Thirty\" (cdr %)))\n                              \
    \ (filter (lambda (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Forty\" (cdr %)))\n                               (filter (lambda\
    \ (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"\
    Fifty\" (cdr %)))\n                               (filter (lambda (x) (<= x head))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Sixty\" (cdr %)))\n\
    \                               (filter (lambda (x) (<= x head)) arr)))\n    \
    \        (cons (reverse (map #(cons head (cons \"Seventy\" (cdr %)))\n       \
    \                        (filter (lambda (x) (<= x head)) arr)))\n           \
    \ (cons (reverse (map #(cons head (cons \"Eighty\" (cdr %)))\n               \
    \                (filter (lambda (x) (<= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Ninety\" (cdr %)))\n                              \
    \ (filter (lambda (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"One\" (cdr %)))\n                               (filter (lambda\
    \ (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"\
    Ten\" (cdr %)))\n                               (filter (lambda (x) (<= x head))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n\
    \                               (filter (lambda (x) (<= x head)) arr)))\n    \
    \        (cons (reverse ", "  (cond\n    [(empty? arr) empty]\n    [(number? (car\
    \ arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) empty))]\n   \
    \ [else (cons (by_length (cdr arr)) (by_length (cdr arr)))]))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (reverse (map #(cons (string->number (string->symbol %)) (cons\
    \ head (sub1 head))) (rest arr)))\n                   (by_length (rest arr)))\n\
    \            (cons (string->symbol (string->number head))\n                  (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons \"One\"\
    \ . %) (filter #(< % head) arr)))\n                  (by_length (filter #(>= head\
    \ 9) arr)))\n            (cons (reverse (map #(cons \"Two\" . %) (filter #(< head\
    \ 9) arr)))\n                  (by_length (filter #(>= head 9) arr)))\n      \
    \      (cons (reverse (map #(cons \"Three\" . %) (filter #(< head 9) arr)))\n\
    \                  (by_length (filter #(>= head 9) arr)))\n            (cons (reverse\
    \ (map #(cons \"Four\" . %) (filter #(< head 9) arr)))\n                  (by_length\
    \ (filter #(>= head 9) arr)))\n            (cons (reverse (map #(cons \"Five\"\
    \ . %) (filter #(< head 9) arr)))\n                  (by_length (filter #(>= head\
    \ 9) arr)))\n            (cons (reverse (map #(cons \"Six\" . %) (filter #(< head\
    \ 9) arr)))\n                  (by_length (filter #(>= head 9) arr)))\n      \
    \      (cons (reverse (map #(cons \"Seven\" . %) (filter #(< head 9) arr)))\n\
    \                  (by_length (filter #(>= head 9) arr)))\n            (cons (reverse\
    \ (map #(cons \"Eight\" . %) (filter #(< head 9) arr)))\n                  (by_length\
    \ (filter #(>= head 9) arr)))\n            (cons (reverse (map #(cons \"Nine\"\
    \ . %) (filter #(< head 9) arr)))\n                  (by_length (filter #(>= head\
    \ 9) arr))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (number? head)\n            (cons (cons head (if (< head 9 \"One\"\
    )\n                              \"Two\"\n                              \"Three\"\
    ))\n                  (by_length (rest arr)))\n            (cons (cons head (if\
    \ (< head 9 \"One\")\n                              \"Two\"\n                \
    \              \"Three\"))\n                  (by_length (rest arr))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (reverse (map #(cons head (cons \"One\" (cdr %)))\n\
    \                             (filter #(< head %)\n                          \
    \           (map #(mod % 10)\n                                         (range\
    \ 1 9))))\n                  (by_length (rest arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Ten\" (cdr %)))\n                             (filter\
    \ #(< head %)\n                                     (map #(mod % 10)\n       \
    \                                  (range 10 19))))\n                  (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cond [(< head\
    \ %) %]\n                                      [(= head %) %]\n              \
    \                        [(= head 1) \"One\"]\n                              \
    \        [(= head 2) \"Two\"]\n                                      [(= head\
    \ 3) \"Three\"]\n                                      [(= head 4) \"Four\"]\n\
    \                                      [(= head 5) \"Five\"]\n               \
    \                       [(= head 6) \"Six\"]\n                               \
    \       [(= head 7) \"Seven\"]\n                                      [(= head\
    \ 8) \"Eight\"]\n                                      [(= head 9) \"Nine\"]\n\
    \                                      [else (cons (mod head 10) \"Ten\")])\n\
    \                      (by_length (cdr arr)))\n            (cons (mod head 10)\
    \ (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons\
    \ head (cons \"One\" (cdr %))) (reverse (map #(cons head (cons \"Two\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"Three\" (cdr %))) (reverse (map #(cons head\
    \ (cons \"Four\" (cdr %))) (reverse (map #(cons head (cons \"Five\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"Six\" (cdr %))) (reverse (map #(cons head\
    \ (cons \"Seven\" (cdr %))) (reverse (map #(cons head (cons \"Eight\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"Nine\" (cdr %))) arr))))))))))))\n       \
    \     (cons (reverse (map #(cons head (cons \"One\" (cdr %))) (reverse (map #(cons\
    \ head (cons \"Two\" (cdr %))) (reverse (map #(cons head (cons \"Three\" (cdr\
    \ %))) (reverse (map #(cons head (cons \"Four\" (cdr %))) (reverse (map #(cons\
    \ head (cons \"Five\" (cdr %))) (reverse (map #(cons head (cons \"Six\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"Seven\" (cdr %))) (reverse (map #(cons head\
    \ (cons \"Eight\" (cdr %))) (reverse (map #(cons head (cons \"Nine\" (cdr %)))\
    \ arr))))))))))))))))\n            (cons (reverse (map #(cons head (cons \"One\"\
    \ (cdr %))) (reverse (map #(cons head (cons \"Two\" (cdr %))) (reverse (map #(cons\
    \ head (cons \"Three\" (cdr %))) (reverse (map #(cons head (cons \"Four\" (cdr\
    \ %))) (reverse (map #(cons head (cons \"Five\" (cdr %))) ", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n\
    \    [else (cons (first arr) (by_length (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n\
    \    [else (cons (first arr) (by_length (rest arr)))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([arr (sort arr)])\n        (reverse (map #(cond [(< %\
    \ 9) (string-append \"One\" (string->symbol (string->string %)))]\n          \
    \                   [(> % 9) (string-append \"Ten\" (string->symbol (string->string\
    \ %)))]\n                             [(= % 9) (string-append \"Nine\" (string->symbol\
    \ (string->string %)))]\n                             [else (string-append \"\
    Ten\" (string->symbol (string->string %)))]\n                             ) arr)))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([arr (reverse arr)])\n        (let ([result\
    \ '()])\n          (for ([i arr])\n            (if (< i 9)\n                (set!\
    \ result (append result (list (string->number (string->symbol i))))))\n      \
    \      (set! result (append result (list (string->string i))))))\n        (set!\
    \ result (map string->symbol result)))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([len (length arr)])\n        (if (= len 0)\n            '()\n   \
    \         (let ([head (first arr)])\n              (if (< head 9)\n          \
    \        (cons (cons head (lookup head \"One\")) (cons head (lookup head \"Two\"\
    )) (cons head (lookup head \"Three\")) (cons head (lookup head \"Four\")) (cons\
    \ head (lookup head \"Five\")) (cons head (lookup head \"Six\")) (cons head (lookup\
    \ head \"Seven\")) (cons head (lookup head \"Eight\")) (cons head (lookup head\
    \ \"Nine\")))\n                  (cons (cons head (lookup head \"Ten\")) (cons\
    \ head (lookup head \"Eleven\")) (cons head (lookup head \"Twelve\")) (cons head\
    \ (lookup head \"Thirteen\")) (cons head (lookup head \"Fourteen\")) (cons head\
    \ (lookup head \"Fifteen\")) (cons head (lookup head \"Sixteen\")) (cons head\
    \ (lookup head \"Seventeen\")) (cons head (lookup head \"Eighteen\")) (cons head\
    \ (lookup head \"Nineteen\")))))))))\n", "  (if (empty? arr)\n      '()\n    \
    \  (let ([arr (sort arr)])\n        (if (= (length arr) 9)\n            (let ([arr\
    \ (reverse arr)])\n              (map (lambda (x) (cond [(< x 1) \"One\"]\n  \
    \                                      [(< x 2) \"Two\"]\n                   \
    \                     [(< x 3) \"Three\"]\n                                  \
    \      [(< x 4) \"Four\"]\n                                        [(< x 5) \"\
    Five\"]\n                                        [(< x 6) \"Six\"]\n         \
    \                               [(< x 7) \"Seven\"]\n                        \
    \                [(< x 8) \"Eight\"]\n                                       \
    \ [(< x 9) \"Nine\"]\n                                        [else x])) arr))\n\
    \          (cond [(< arr 1) \"One\"]\n                [else (cond [(< arr 2) \"\
    Two\"]\n                          [else (cond [(< arr 3) \"Three\"]\n        \
    \                            [else (cond [(< arr 4) \"Four\"]\n              \
    \                                [else (cond [(< arr 5) \"Five\"]\n          \
    \                                              [else (cond [(< arr 6) \"Six\"\
    ]\n                                                                [else (cond\
    \ [(< arr 7) \"Seven\"]\n                                                    \
    \                    [else (cond [(< arr 8) \"Eight\"]\n                     \
    \                                                             [else (cond [(<\
    \ arr 9) \"Nine\"]\n                                                         \
    \                                   [else (cond [(< arr 10) \"Ten\"]\n       \
    \                                                                            \
    \               [else (cond [(< arr 11) \"Eleven\"]\n                        \
    \                                                                            \
    \      [else (cond [(< arr 12) \"Twelve\"]\n                                 \
    \                                                                            \
    \   [else (cond [(< arr 13) \"Thirteen\"]\n                                  \
    \                                                                            \
    \        [else (cond [(< arr 14) \"Fourteen\"]\n                             \
    \                                                                            \
    \                   [else (cond [(< arr 15) \"Fifteen\"]\n                   \
    \                                                                            \
    \                                   [else (cond [(< arr 16) \"Sixteen\"]\n   \
    \                                                                            \
    \                                                         [else (cond [(< arr\
    \ 17) \"Seventeen\"]\n                                                       \
    \                                                                            \
    \           [else (cond [(< arr 18) \"Eighteen\"]\n                          \
    \                                                                            \
    \                                              [else (cond [(< arr 19) \"Nineteen\"\
    ]\n                                                                          \
    \                                                                            \
    \    [else (cond [(< arr 20) \"Twenty\"]\n                                   \
    \                                                                            \
    \                                                 [else (cond [(< arr 21) \"Thirty\"\
    ]\n                                                                          \
    \                                                                            \
    \                [else (cond [(< arr 22) \"Forty\"]\n                        \
    \                                        ", "  (if (empty? arr)\n      '()\n \
    \     (let ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cons head (cons \"One\" (cdr %)))\n                               (filter\
    \ #(< head (- 9 %)) arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"Ten\" (cdr %)))\n                               (filter #(< head (- 10 %))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n\
    \                               (filter #(< head (- 20 %)) arr)))\n          \
    \  (cons (reverse (map #(cons head (cons \"Thirty\" (cdr %)))\n              \
    \                 (filter #(< head (- 30 %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Forty\" (cdr %)))\n                               (filter\
    \ #(< head (- 40 %)) arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"Fifty\" (cdr %)))\n                               (filter #(< head (- 50 %))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Sixty\" (cdr %)))\n\
    \                               (filter #(< head (- 60 %)) arr)))\n          \
    \  (cons (reverse (map #(cons head (cons \"Seventy\" (cdr %)))\n             \
    \                  (filter #(< head (- 70 %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Eighty\" (cdr %)))\n                              \
    \ (filter #(< head (- 80 %)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Ninety\" (cdr %)))\n                               (filter #(< head\
    \ (- 90 %)) arr)))\n            (cons (reverse (map #(cons head (cons \"One\"\
    \ (cdr %)))\n                               (filter #(< head (- 100 %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n       \
    \                        (filter #(< head (- 1000 %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n                     \
    \          (filter #(", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (string->symbol (string->string\
    \ head)) (by_length (rest arr)))\n            (cons (string->symbol (string->string\
    \ head)) (by_length (rest arr)))))\n      )\n    )\n  )\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n\
    \    [else (cons (first arr) (by_length (rest arr)))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (append (by_length (cdr arr))\n                    (list (by_length \n    \
    \                       (map (lambda (x) (if (< x 9) \n                      \
    \                         (list \"One\" x)\n                                 \
    \              (list \"Nine\" x))\n                                    head)))\n\
    \                    (list (by_length (cdr arr))))\n            (append (by_length\
    \ (cdr arr))\n                    (list (by_length \n                        \
    \   (map (lambda (x) (if (< x 9) \n                                          \
    \     (list \"One\" x)\n                                               (list \"\
    Nine\" x))\n                                    head)))\n                    (list\
    \ (by_length (cdr arr))))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (cons (cons\
    \ \"One\" head) (cdr arr)))\n                  (by_length (cdr arr)))\n      \
    \      (cons (reverse (cons (cons \"Two\" head) (cdr arr)))\n                \
    \  (by_length (cdr arr)))\n            (cons (reverse (cons (cons \"Three\" head)\
    \ (cdr arr)))\n                  (by_length (cdr arr)))\n            (cons (reverse\
    \ (cons (cons \"Four\" head) (cdr arr)))\n                  (by_length (cdr arr)))\n\
    \            (cons (reverse (cons (cons \"Five\" head) (cdr arr)))\n         \
    \         (by_length (cdr arr)))\n            (cons (reverse (cons (cons \"Six\"\
    \ head) (cdr arr)))\n                  (by_length (cdr arr)))\n            (cons\
    \ (reverse (cons (cons \"Seven\" head) (cdr arr)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (reverse (cons (cons \"Eight\" head) (cdr arr)))\n\
    \                  (by_length (cdr arr)))\n            (cons (reverse (cons (cons\
    \ \"Nine\" head) (cdr arr)))\n                  (by_length (cdr arr))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([len (length arr)])\n        (if (= len\
    \ 0)\n            '()\n            (let ([head (car arr)])\n              (if\
    \ (< head 9)\n                  (cons (cons head (cons \"One\" (by_length (cdr\
    \ arr))))\n                        (by_length (cdr arr)))\n                  (cons\
    \ (cons head (cons \"Ten\" (by_length (cdr arr))))\n                        (by_length\
    \ (cdr arr))))))))\n", "  (if (null? arr)\n      '()\n      (let ([arr (sort arr\
    \ (lambda (x) (and (<= x 9) (>= x 1))))])\n        (let ([arr (reverse arr)])\n\
    \          (let ([arr (map #(cond [(<= x 9) (cons \"One\" x)] [else (cons \"Two\"\
    \ x)])\n                          arr)])\n            (map #(cond [(<= x 9) (cons\
    \ \"One\" x)] [else (cons \"Two\" x)])\n                arr)))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(number? (first arr)) (cons (first arr) (by_length\
    \ (rest arr)))]\n    [else (cons (first arr) (by_length (rest arr)))]))\n", " \
    \ (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (append (by_length (cdr arr))\n                    (list (by_length\
    \ [head (quotient head 10)]))))\n        (append (by_length (cdr arr))\n     \
    \           (list (by_length [head (quotient head 10)]))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([len (length arr)])\n        (if (= len 0)\n  \
    \          '()\n            (let ([start (first arr)])\n              (if (< start\
    \ 9)\n                  (cons (cons start (lookup start \"One\")) (by_length (rest\
    \ arr)))\n                  (cons (cons start (lookup start \"Two\")) (by_length\
    \ (rest arr)))\n                  (cons (cons start (lookup start \"Three\"))\
    \ (by_length (rest arr)))\n                  (cons (cons start (lookup start \"\
    Four\")) (by_length (rest arr)))\n                  (cons (cons start (lookup\
    \ start \"Five\")) (by_length (rest arr)))\n                  (cons (cons start\
    \ (lookup start \"Six\")) (by_length (rest arr)))\n                  (cons (cons\
    \ start (lookup start \"Seven\")) (by_length (rest arr)))\n                  (cons\
    \ (cons start (lookup start \"Eight\")) (by_length (rest arr)))\n            \
    \      (cons (cons start (lookup start \"Nine\")) (by_length (rest arr)))\n  \
    \                (cons (cons start (lookup start \"Ten\")) (by_length (rest arr)))\n\
    \                  (cons (cons start (lookup start \"Eleven\")) (by_length (rest\
    \ arr)))\n                  (cons (cons start (lookup start \"Twelve\")) (by_length\
    \ (rest arr)))\n                  (cons (cons start (lookup start \"Thirteen\"\
    )) (by_length (rest arr)))\n                  (cons (cons start (lookup start\
    \ \"Fourteen\")) (by_length (rest arr)))\n                  (cons (cons start\
    \ (lookup start \"Fifteen\")) (by_length (rest arr)))\n                  (cons\
    \ (cons start (lookup start \"Sixteen\")) (by_length (rest arr)))\n          \
    \        (cons (cons start (lookup start \"Seventeen\")) (by_length (rest arr)))\n\
    \                  (cons (cons start (lookup start \"Eighteen\")) (by_length (rest\
    \ arr)))\n                  (cons (cons start (lookup start \"Nineteen\")) (by_length\
    \ (rest arr)))\n                  (cons (cons start (lookup start \"Twenty\"))\
    \ (by_length (rest arr)))\n                  (cons (cons start (", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n \
    \           (cons (cons head (cons \"One\" (by_length (rest arr)))) (cons \"Two\"\
    \ (by_length (rest arr))))\n            (cons (cons head (cons \"Ten\" (by_length\
    \ (rest arr)))) (cons \"Eleven\" (by_length (rest arr))))\n            (cons (cons\
    \ head (cons \"Twelve\" (by_length (rest arr)))) (cons \"Thirteen\" (by_length\
    \ (rest arr))))\n            (cons (cons head (cons \"Fourteen\" (by_length (rest\
    \ arr)))) (cons \"Fifteen\" (by_length (rest arr))))\n            (cons (cons\
    \ head (cons \"Sixteen\" (by_length (rest arr)))) (cons \"Seventeen\" (by_length\
    \ (rest arr))))\n            (cons (cons head (cons \"Eighteen\" (by_length (rest\
    \ arr)))) (cons \"Nineteen\" (by_length (rest arr))))\n            (cons (cons\
    \ head (cons \"Nineteen\" (by_length (rest arr)))) (cons \"Nine\" (by_length (rest\
    \ arr))))\n            (cons (cons head (cons \"Ten\" (by_length (rest arr))))\
    \ (cons \"One\" (by_length (rest arr))))\n            (cons (cons head (cons \"\
    One\" (by_length (rest arr)))) (cons \"One\" (by_length (rest arr))))\n      \
    \      (cons (cons head (cons \"One\" (by_length (rest arr)))) (cons \"One\" (by_length\
    \ (rest arr))))\n            (cons (cons head (cons \"One\" (by_length (rest arr))))\
    \ (cons \"One\" (by_length (rest arr))))\n            (cons (cons head (cons \"\
    One\" (by_length (rest arr)))) (cons \"One\" (by_length (rest arr))))\n      \
    \      (cons (cons head (cons \"One\" (by_length (rest arr)))) (cons \"One\" (by_length\
    \ (rest arr))))\n            (cons (cons head (cons \"One\" (by_length (rest arr))))\
    \ (cons \"One\" (by_length (rest arr))))\n            (cons (cons head (cons \"\
    One\" (by_length (rest arr)))) (cons \"One\" (by_length (rest arr))))\n      \
    \      (cons (cons ", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (map #(cons head (cons \"\
    One\" (cdr %)))\n                               (filter #(< head (car %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n       \
    \                        (filter #(< head (car %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Twenty\" (cdr %)))\n                              \
    \ (filter #(< head (car %)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Thirty\" (cdr %)))\n                               (filter #(< head\
    \ (car %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Forty\"\
    \ (cdr %)))\n                               (filter #(< head (car %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Fifty\" (cdr %)))\n     \
    \                          (filter #(< head (car %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Sixty\" (cdr %)))\n                      \
    \         (filter #(< head (car %)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Seventy\" (cdr %)))\n                               (filter #(<\
    \ head (car %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Eighty\"\
    \ (cdr %)))\n                               (filter #(< head (car %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Ninety\" (cdr %)))\n    \
    \                           (filter #(< head (car %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"One\" (cdr %)))\n                        \
    \       (filter #(< head (car %)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Ten\" (cdr %)))\n                               (filter #(< head\
    \ (car %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\"\
    \ (cdr %)))\n                               (filter #(< head (car %)) arr)))\n\
    \            (cons (reverse ", "  (if (empty? arr)\n      '()\n      (let ([nums\
    \ (map number->string (reverse (sort arr (lambda (x) (>= x 9) (< x 1)))))])\n\
    \        (map (lambda (x) (if (number? x) (string-append (number->string x) \"\
    -\" nums) x))\n             (reverse nums)))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n\
    \    [else (cons (first arr) (by_length (rest arr)))]))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([arr (sort arr (lambda (x) (<= (length x) 9) (length x)))])\n\
    \        (let ([arr (reverse arr)])\n          (map #(cond [(= (length x) 9) (cons\
    \ \"Nine\" (reverse (substring arr 0 9)))]\n                      [(= (length\
    \ x) 8) (reverse (substring arr 0 8))])\n                (substring arr 1 9)))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([arr (sort arr (lambda (x) (and (<=\
    \ x 9) (>= x 1))))]\n            [nums (map #(cond [(<= x 9) (cons \"Nine\" x)]\
    \ [(<= x 8) \"Eight\"]\n                                [(<= x 7) \"Seven\"]\n\
    \                                [(<= x 6) \"Six\"]\n                        \
    \        [(<= x 5) \"Five\"]\n                                [(<= x 4) \"Four\"\
    ]\n                                [(<= x 3) \"Three\"]\n                    \
    \            [(<= x 2) \"Two\"]\n                                [(<= x 1) \"\
    One\"]\n                                [else x])])\n          nums (reverse nums)])\n\
    \        (map #(cond [(<= (length %) 0) \"\"]\n                  [(<= (length\
    \ %) 1) (cons (nth (first %) nums) \"\")]\n                  [(<= (length %) 2)\
    \ (cons (nth (first %) nums) (cons (nth (second %) nums) \"\"))]\n           \
    \       [(<= (length %) 3) (cons (nth (first %) nums) (cons (nth (second %) nums)\
    \ (cons (nth (third %) nums) \"\")))]\n                  [(<= (length %) 4) (cons\
    \ (nth (first %) nums) (cons (nth (second %) nums) (cons (nth (third %) nums)\
    \ (cons (nth (fourth %) nums) \"\"))))]\n                  [(<= (length %) 5)\
    \ (cons (nth (first %) nums) (cons (nth (second %) nums) (cons (nth (third %)\
    \ nums) (cons (nth (fourth %) nums) (cons (nth (fifth %) nums) \"\"))))]\n   \
    \               [(<= (length %) 6) (cons (nth (first %) nums) (cons (nth (second\
    \ %) nums) (cons (nth (third %) nums) (cons (nth (fourth %) nums) (cons (nth (fifth\
    \ %) nums) (cons (nth (sixth %) nums) \"\"))))]\n                  [(<= (length\
    \ %) 7) (cons (nth (first %) nums) (cons (nth (second %) nums) (cons (nth (third\
    \ %) nums) (cons (nth (fourth %) nums) (cons (nth (fifth %) nums) (cons (nth (sixth\
    \ %) nums) ", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (map #(cond [(< head %) %]\n\
    \                                        [(= head %) %]\n                    \
    \                    [else (cons (string->symbol (string->string %)) '())])\n\
    \                           (range head head (+ head 1)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string->symbol (string->string head)) (by_length\
    \ (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string->symbol (+ head 1)) (by_length\
    \ (cdr arr)))\n            (cons (string->symbol (+ head 9)) (by_length (cdr arr)))))))\
    \ ;; #lang racket\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (cons (string-ref \"One\"\
    \ head) '()))\n                  (by_length (cdr arr)))\n            (cons (reverse\
    \ (cons (string-ref \"Nine\" head) '()))\n                  (by_length (cdr arr))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons (car %) (cdr %)) (filter (lambda\
    \ (x) (<= head x)) arr)))\n                  (by_length (filter (lambda (x) (not\
    \ (<= head x)) arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (append (by_length (cdr arr))\n\
    \                    (list (by_length \n                           (map (lambda\
    \ (x) (if (= x head) x '()))\n                                 (range 1 10))))\n\
    \            (append (by_length (cdr arr))\n                    (list (by_length\
    \ \n                           (map (lambda (x) (if (= x head) x '()))\n     \
    \                            (by_length \n                                   (map\
    \ (lambda (x) (if (= x head) x '())) \n                                      \
    \   (range 1 10)))))\n            (append (by_length (cdr arr))\n            \
    \        (list (by_length \n                           (map (lambda (x) (if (=\
    \ x head) x '()))\n                                 (by_length \n            \
    \                       (map (lambda (x) (if (= x head) x '())) \n           \
    \                              (by_length \n                                 \
    \          (map (lambda (x) (if (= x head) x '())) \n                        \
    \                       (range 1 10)))))\n            (append (by_length (cdr\
    \ arr))\n                    (list (by_length \n                           (map\
    \ (lambda (x) (if (= x head) x '()))\n                                 (by_length\
    \ \n                                   (map (lambda (x) (if (= x head) x '()))\
    \ \n                                         (by_length \n                   \
    \                        (map (lambda (x) (if (= x head) x '())) \n          \
    \                                     (by_length \n                          \
    \                      (map (lambda (x) (if (= x head) x '())) \n            \
    \                                        (range 1 10)))))\n            (append\
    \ (by_length (cdr arr))\n                    (list (by_length \n             \
    \              (map (lambda (x) (if (= x head) x '()))\n                     \
    \            (by_length \n                                   (map (lambda (x)\
    \ (if (= x head) x '())) \n                                         (by_length\
    \ \n                                           (map (lambda (x) (if (= x head)\
    \ x '())) \n                                               (by_length \n     \
    \                                           (map (lambda (x) (if (= x head) x\
    \ '())) \n                                                    (range 1 10)))))\n\
    \            (append (by_length (cdr arr))\n                    (list (by_length\
    \ \n                           (map (lambda (x) (if (= x head) x '()))\n     \
    \                            (by_length \n                                   (map\
    \ (lambda (x) (if (= x head) x '())) \n                                      \
    \   (by_length \n                                           (map (lambda (x) (if\
    \ (= x head) x '())) \n                                               (by_length\
    \ \n                                                (map (lambda (x) (if (= x\
    \ head) x '", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (map #(cons head (cons \"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    ))\n                             (filter (lambda (x) (= x head)) arr)))\n    \
    \        (cons (reverse (map #(cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"\
    Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"\
    Nineteen\"))\n                             (filter (lambda (x) (= x head)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Twenty\" \"Thirty\" \"Forty\"\
    \ \"Fifty\" \"Sixty\" \"Seventy\" \"Eighty\" \"Ninety\"))\n                  \
    \           (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"\
    Seven\" \"Eight\" \"Nine\"))\n                             (filter (lambda (x)\
    \ (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Ten\"\
    \ \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\"\
    \ \"Eighteen\" \"Nineteen\"))\n                             (filter (lambda (x)\
    \ (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\"\
    \ \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\" \"Seventy\" \"Eighty\" \"Ninety\"))\n\
    \                             (filter (lambda (x) (= x head)) arr)))\n       \
    \     (cons (reverse (map #(cons head (cons \"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                          \
    \   (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\"\
    \ \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"))\n                    \
    \         (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Twenty\" \"Thirty\" \"For", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string->symbol\
    \ (string->string head)) (by_length (cdr arr)))\n            (cons (string->symbol\
    \ (string->string head)) (by_length (cdr arr)))))\n      )\n    )\n  )\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons head (cons \"One\" (cdr %)))\n  \
    \                             (filter (lambda (x) (= x head)) arr)))\n       \
    \     (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n              \
    \                 (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Twenty\" (cdr %)))\n                              \
    \ (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Thirty\" (cdr %)))\n                               (filter (lambda\
    \ (x) (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"\
    Forty\" (cdr %)))\n                               (filter (lambda (x) (= x head))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Fifty\" (cdr %)))\n\
    \                               (filter (lambda (x) (= x head)) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Sixty\" (cdr %)))\n          \
    \                     (filter (lambda (x) (= x head)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Seventy\" (cdr %)))\n                    \
    \           (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Eighty\" (cdr %)))\n                              \
    \ (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Ninety\" (cdr %)))\n                               (filter (lambda\
    \ (x) (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"\
    One\" (cdr %)))\n                               (filter (lambda (x) (= x head))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n\
    \                               (filter (lambda (x) (= x head)) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n         \
    \                      (filter (lambda (x) (= x head)) arr)))\n            (cons\
    \ (reverse ", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (map #(cons (car %) (cdr %))\
    \ (filter #(< head (car %)) arr)))\n                  (by_length (cdr arr)))\n\
    \            (cons (reverse (map #(cons (car %) (cdr %)) (filter #(> head (car\
    \ %)) arr)))\n                  (by_length (cdr arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n        \
    \    (cons (reverse (map #(cons (substring \"One\" 0 1) (substring \"Nine\" 0\
    \ 1)) (reverse (map #(substring \"One\" 0 1) (substring \"Nine\" 0 1) (substring\
    \ head 0 1))))) (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ (substring \"One\" 0 1) (substring \"Nine\" 0 1)) (reverse (map #(substring\
    \ \"One\" 0 1) (substring \"Nine\" 0 1) (substring head 0 1))))) (by_length (rest\
    \ arr))))))\n", "  (if (null? arr)\n      '()\n      (let ([arr (sort arr)])\n\
    \        (reverse (map #(cond [(< % 9) 'One]\n                              [(<\
    \ % 9) 'Two]\n                              [(< % 9) 'Three]\n               \
    \               [(< % 9) 'Four]\n                              [(< % 9) 'Five]\n\
    \                              [(< % 9) 'Six]\n                              [(<\
    \ % 9) 'Seven]\n                              [(< % 9) 'Eight]\n             \
    \                 [(< % 9) 'Nine]\n                              [(> % 9) 'Ten]\n\
    \                              [(> % 9) 'Eleven]\n                           \
    \   [(> % 9) 'Twelve]\n                              [(> % 9) 'Thirteen]\n   \
    \                           [(> % 9) 'Fourteen]\n                            \
    \  [(> % 9) 'Fifteen]\n                              [(> % 9) 'Sixteen]\n    \
    \                          [(> % 9) 'Seventeen]\n                            \
    \  [(> % 9) 'Eighteen]\n                              [(> % 9) 'Nineteen]\n  \
    \                            [(= % 9) 'Twenty]\n                             \
    \ [(= % 9) 'Thirty]\n                              [(= % 9) 'Forty]\n        \
    \                      [(= % 9) 'Fifty]\n                              [(= % 9)\
    \ 'Sixty]\n                              [(= % 9) 'Seventy]\n                \
    \              [(= % 9) 'Eighty]\n                              [(= % 9) 'Ninety]\n\
    \                              [(= % 9) 'Hundred]\n                          \
    \    [(= % 9) 'Thousand]\n                              [(= % 9) 'Million]\n \
    \                             [(= % 9) 'Billion]\n                           \
    \   [(= % 9) 'Trillion]\n                              [(= % 9) 'Quadrillion]\n\
    \                              [(= % 9) 'Quintillion]\n                      \
    \        [(= % 9) 'Sextillion]\n                              [(= % 9) 'Septillion]\n\
    \                              [(= % 9) 'Octillion]\n                        \
    \      [(= % 9) 'Nonillion]\n                              [(= % 9) 'Decillion]\n\
    \                              [(= % 9) 'Undecillion]\n                      \
    \        [(= % 9) 'Duodecillion]\n                              [(= % 9) 'Tre",
  "  (if (empty? arr)\n      '()\n      (let ([arr (sort arr (lambda (x) (< (length\
    \ x) 9) (> (length x) 1)))])\n        (map (lambda (x) (if (< x 9) (cond [(< x\
    \ 1) \"One\"]\n                                          [(< x 2) \"Two\"]\n \
    \                                         [(< x 3) \"Three\"]\n              \
    \                            [(< x 4) \"Four\"]\n                            \
    \              [(< x 5) \"Five\"]\n                                          [(<\
    \ x 6) \"Six\"]\n                                          [(< x 7) \"Seven\"\
    ]\n                                          [(< x 8) \"Eight\"]\n           \
    \                               [(< x 9) \"Nine\"]\n                         \
    \                 [(> x 1) \"Ten\"]\n                                        \
    \  [(> x 2) \"Eleven\"]\n                                          [(> x 3) \"\
    Twelve\"]\n                                          [(> x 4) \"Thirteen\"]\n\
    \                                          [(> x 5) \"Fourteen\"]\n          \
    \                                [(> x 6) \"Fifteen\"]\n                     \
    \                     [(> x 7) \"Sixteen\"]\n                                \
    \          [(> x 8) \"Seventeen\"]\n                                         \
    \ [(> x 9) \"Eighteen\"]\n                                          [(> x 10)\
    \ \"Nineteen\"]\n                                          [(> x 11) \"Twenty\"\
    ]\n                                          [(> x 12) \"Twenty-one\"]\n     \
    \                                     [(> x 13) \"Twenty-two\"]\n            \
    \                              [(> x 14) \"Twenty-three\"]\n                 \
    \                         [(> x 15) \"Twenty-four\"]\n                       \
    \                   [(> x 16) \"Twenty-five\"]\n                             \
    \             [(> x 17) \"Twenty-six\"]\n                                    \
    \      [(> x 18) \"Twenty-seven\"]\n                                         \
    \ [(> x 19) \"Twenty-eight\"]\n                                          [(> x\
    \ 20) \"Twenty-nine\"]\n                                          [(> x 21) \"\
    Thirty\"]\n                                          [(> x 22) \"Thirty-one\"\
    ]\n                                          [(> x 23) \"Thirty-two\"]\n     \
    \                                     [(> x 24) \"Thirty-three\"]\n          \
    \                                [(> x 25) \"Thirty-four\"]\n                \
    \                          [(> x 26) \"Thirty-five\"]\n                      \
    \                    [(> x 27) \"Thirty-six\"]\n                             \
    \             [(> x 28) \"Thirty-seven\"]\n                                  \
    \        [(> x 29) \"Thirty-eight\"]\n                                       \
    \   [(> x 30) \"Thirty-nine\"]\n                                          [(>\
    \ x 31) \"Forty\"]\n                                          [(> x 32) \"Forty-one\"\
    ]\n                                          [(> x 33) \"Forty-two\"]\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([arr (sort arr)])\n        (let ([len (length\
    \ arr)])\n          (if (= len 0)\n              '()\n              (let ([head\
    \ (first arr)])\n                (if (< head 10)\n                    (cons (cons\
    \ head (lookup head \"One\")) (by_length (rest arr)))\n                    (cons\
    \ (cons head (lookup head \"Two\")) (by_length (rest arr)))\n                \
    \    (cons (cons head (lookup head \"Three\")) (by_length (rest arr)))\n     \
    \               (cons (cons head (lookup head \"Four\")) (by_length (rest arr)))\n\
    \                    (cons (cons head (lookup head \"Five\")) (by_length (rest\
    \ arr)))\n                    (cons (cons head (lookup head \"Six\")) (by_length\
    \ (rest arr)))\n                    (cons (cons head (lookup head \"Seven\"))\
    \ (by_length (rest arr)))\n                    (cons (cons head (lookup head \"\
    Eight\")) (by_length (rest arr)))\n                    (cons (cons head (lookup\
    \ head \"Nine\")) (by_length (rest arr)))\n                    (cons (cons head\
    \ (lookup head \"Ten\")) (by_length (rest arr)))\n                    (cons (cons\
    \ head (lookup head \"Eleven\")) (by_length (rest arr)))\n                   \
    \ (cons (cons head (lookup head \"Twelve\")) (by_length (rest arr)))\n       \
    \             (cons (cons head (lookup head \"Thirteen\")) (by_length (rest arr)))\n\
    \                    (cons (cons head (lookup head \"Fourteen\")) (by_length (rest\
    \ arr)))\n                    (cons (cons head (lookup head \"Fifteen\")) (by_length\
    \ (rest arr)))\n                    (cons (cons head (lookup head \"Sixteen\"\
    )) (by_length (rest arr)))\n                    (cons (cons head (lookup head\
    \ \"Seventeen\")) (by_length (rest arr)))\n                    (cons (cons head\
    \ (lookup head \"Eighteen\")) (by_length (rest arr)))\n                    (cons\
    \ (cons head (lookup head \"Nineteen\")) (by_length (rest arr)))\n           \
    \         (cons (cons head (lookup head \"Twenty\")) (by_length (rest arr)))\n\
    \                    (cons (cons head (lookup head \"Twenty-one\")) (by_", " \
    \ (cond\n    [(empty? arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr\
    \ arr)) (cons (by_length (cdr arr)) empty))]\n    [else (cons (by_length (cdr\
    \ arr)) (by_length (cdr arr)))]))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([len (length arr)])\n        (if (= len 0)\n            '()\n            (let\
    \ ([head (first arr)])\n              (if (< head 9)\n                  (cons\
    \ (string->symbol (string->string head)) (by_length (rest arr)))\n           \
    \       (cons (string->symbol (string->string head)) (by_length (rest arr)))))\n\
    \            (cons (string->symbol (string->string (first arr))) (by_length (rest\
    \ arr)))))\n        (cons (string->symbol (string->string (first arr))) (by_length\
    \ (rest arr)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for your\
    \ answer! I really appreciate it! I didn't know about string->symbol and string->string.\
    \ I'm still learning Racket. Thanks again!\n<|/ c |>\n<| c |>\nNo problem! I added\
    \ some comments to explain what each function is doing. I also added a version\
    \ that doesn't use any functions. I hope this helps!\n<|/ c |>\n<| c |>\nThanks\
    \ again! I really appreciate it! I didn't know about string->symbol and string->string.\
    \ I'm still learning Racket. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  (if (empty? arr)\n      '()\n      (let ([arr (sort arr)])\n        (let ([result\
    \ (sort (map #(if (>= (length arr) 0) (cons (sub1 %) \"One\") (cons (sub1 %) \"\
    Two\"))) arr)])\n          (if (empty? result)\n              result\n       \
    \       (cons (reverse result) result)))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([arr (sort arr (lambda (x y) (<= (length x) 9) (length y)))])\n \
    \       (map (lambda (x) (cond ((<= (length x) 9) (cons (substring x 0 1) (cons\
    \ \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )))\n                              ((<= (length x) 8) (cons (substring x 0 1)\
    \ (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\")))\n             \
    \                 ((<= (length x) 7) (cons (substring x 0 1) (cons \"One\" \"\
    Two\" \"Three\" \"Four\")))\n                              ((<= (length x) 6)\
    \ (cons (substring x 0 1) (cons \"One\" \"Two\" \"Three\")))\n               \
    \               ((<= (length x) 5) (cons (substring x 0 1) (cons \"One\" \"Two\"\
    )))\n                              ((<= (length x) 4) (cons (substring x 0 1)\
    \ (cons \"One\")))\n                              ((<= (length x) 3) (cons (substring\
    \ x 0 1) (cons \"One\"))))\n              arr))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n\
    \    [else (cons (first arr) (by_length (rest arr)))]))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([len (length arr)])\n\
    \        (if (= len 0)\n            '()\n            (let ([sorted (sort (map\
    \ number->name arr))])\n              (if (= len 1)\n                  (cons (first\
    \ sorted)\n                        (reverse sorted))\n                  (cons\
    \ (first sorted)\n                        (reverse sorted)\n                 \
    \       (map (lambda (x) (cons (number->name x) sorted))\n                   \
    \            (rest sorted))))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (cons (car arr)\
    \ (cdr arr)) (by_length (cdr arr)))\n            (cons (car arr) (by_length (cdr\
    \ arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([arr (sort arr)])\n\
    \        (if (= (length arr) 9)\n            (let ([arr (reverse arr)])\n    \
    \          (map #(cond [(< % 10) (cons \"One\" (reverse (substring arr (quotient\
    \ % 10 10))))]\n                            [(= % 10) (cons \"Two\" (reverse (substring\
    \ arr (quotient % 10 10))))]\n                            [(= % 10) (cons \"Three\"\
    \ (reverse (substring arr (quotient % 10 10))))]\n                           \
    \ [(= % 10) (cons \"Four\" (reverse (substring arr (quotient % 10 10))))]\n  \
    \                          [(= % 10) (cons \"Five\" (reverse (substring arr (quotient\
    \ % 10 10))))]\n                            [(= % 10) (cons \"Six\" (reverse (substring\
    \ arr (quotient % 10 10))))]\n                            [(= % 10) (cons \"Seven\"\
    \ (reverse (substring arr (quotient % 10 10))))]\n                           \
    \ [(= % 10) (cons \"Eight\" (reverse (substring arr (quotient % 10 10))))]\n \
    \                           [(= % 10) (cons \"Nine\" (reverse (substring arr (quotient\
    \ % 10 10))))]\n                            [else (cons \"Zero\" (reverse (substring\
    \ arr (quotient % 10 10))))])\n                      arr)))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (reverse (map #(cons head (cons \"One\" (cdr %)))\n          \
    \                     (filter #(< head %) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Ten\" (cdr %)))\n                               (filter\
    \ #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\"\
    \ (cdr %)))\n                               (filter #(< head %) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Thirty\" (cdr %)))\n         \
    \                      (filter #(< head %) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Fourty\" (cdr %)))\n                              \
    \ (filter #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"Fifty\" (cdr %)))\n                               (filter #(< head %) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Sixty\" (cdr %)))\n     \
    \                          (filter #(< head %) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Seventy\" (cdr %)))\n                             \
    \  (filter #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"Eighty\" (cdr %)))\n                               (filter #(< head %) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Ninety\" (cdr %)))\n    \
    \                           (filter #(< head %) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"One\" (cdr %)))\n                               (filter\
    \ #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons \"Ten\"\
    \ (cdr %)))\n                               (filter #(< head %) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n         \
    \                      (filter #(< head %) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Thirty\" (cdr %)))\n                              \
    \ (filter #(< head ", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (map #(cons head (cons \"\
    One\" (cdr %)))\n                             (filter #(< head %) arr)))\n   \
    \         (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n          \
    \                   (filter #(< head %) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Twenty\" (cdr %)))\n                             (filter\
    \ #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons \"Thirty\"\
    \ (cdr %)))\n                             (filter #(< head %) arr)))\n       \
    \     (cons (reverse (map #(cons head (cons \"Forty\" (cdr %)))\n            \
    \                 (filter #(< head %) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Fifty\" (cdr %)))\n                             (filter\
    \ #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons \"Sixty\"\
    \ (cdr %)))\n                             (filter #(< head %) arr)))\n       \
    \     (cons (reverse (map #(cons head (cons \"Seventy\" (cdr %)))\n          \
    \                   (filter #(< head %) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Eighty\" (cdr %)))\n                             (filter\
    \ #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons \"Ninety\"\
    \ (cdr %)))\n                             (filter #(< head %) arr)))\n       \
    \     (cons (reverse (map #(cons head (cons \"One\" (cdr %)))\n              \
    \               (filter #(< head %) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Ten\" (cdr %)))\n                             (filter #(< head\
    \ %) arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\" (cdr\
    \ %)))\n                             (filter #(< head %) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Thirty\" (cdr %)))\n                     \
    \        (filter #(< head ", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cond\
    \ [(< head %) %]\n                                        [(= head %) %]\n   \
    \                                     [(= head 1) \"One\"]\n                 \
    \                       [(= head 2) \"Two\"]\n                               \
    \         [(= head 3) \"Three\"]\n                                        [(=\
    \ head 4) \"Four\"]\n                                        [(= head 5) \"Five\"\
    ]\n                                        [(= head 6) \"Six\"]\n            \
    \                            [(= head 7) \"Seven\"]\n                        \
    \                [(= head 8) \"Eight\"]\n                                    \
    \    [(= head 9) \"Nine\"]\n                                        [else (cons\
    \ (string->symbol (string->string head)) '())])) \n                   (by_length\
    \ (cdr arr)))\n            (cons (string->symbol (string->string head)) (by_length\
    \ (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([len (length\
    \ arr)])\n        (if (= len 0)\n            '()\n            (let ([head (car\
    \ arr)])\n              (if (< head 10)\n                  (cons (string-append\
    \ \"Ten\" (rev (- head 10)))\n                        (by_length (cdr arr)))\n\
    \                  (cons (string-append (number->string head) (rev (- head 10)))\
    \ \n                        (by_length (cdr arr))))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n        \
    \    (cons (cons (cons (cons \"One\" head) (rest arr)) \"Two\") (by_length (rest\
    \ arr)))\n            (cons (cons (cons (cons \"Two\" head) (rest arr)) \"Three\"\
    ) (by_length (rest arr)))\n            (cons (cons (cons (cons \"Three\" head)\
    \ (rest arr)) \"Four\") (by_length (rest arr)))\n            (cons (cons (cons\
    \ (cons \"Four\" head) (rest arr)) \"Five\") (by_length (rest arr)))\n       \
    \     (cons (cons (cons (cons \"Five\" head) (rest arr)) \"Six\") (by_length (rest\
    \ arr)))\n            (cons (cons (cons (cons \"Six\" head) (rest arr)) \"Seven\"\
    ) (by_length (rest arr)))\n            (cons (cons (cons (cons \"Seven\" head)\
    \ (rest arr)) \"Eight\") (by_length (rest arr)))\n            (cons (cons (cons\
    \ (cons \"Eight\" head) (rest arr)) \"Nine\") (by_length (rest arr)))\n      \
    \      (cons (cons (cons \"Nine\" head) (rest arr)) \"One\")))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr))\
    \ (by_length (cdr arr)))]\n    [else (cons (by_length (cdr arr)) (by_length (cdr\
    \ arr)))]))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (map #(cons (car %) (cdr %))\
    \ (filter (lambda (x) (< x head)) arr)))\n                  (by_length (cdr arr)))\n\
    \            (cons (reverse (map #(cons (car %) (cdr %)) (filter (lambda (x) (<\
    \ x head)) arr)))\n                  (by_length (cdr arr))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([len (length arr)])\n        (if (= len 0)\n  \
    \          '()\n            (let ([head (first arr)])\n              (if (< head\
    \ 9)\n                  (cons (cons head (lookup head \"One\")) (by_length (rest\
    \ arr)))\n                  (cons (cons head (lookup head \"Two\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Three\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Four\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Five\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Six\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Seven\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Eight\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Nine\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Ten\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Eleven\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Twelve\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (lookup head \"Thirteen\"))\
    \ (by_length (rest arr)))\n                  (cons (cons head (lookup head \"\
    Fourteen\")) (by_length (rest arr)))\n                  (cons (cons head (lookup\
    \ head \"Fifteen\")) (by_length (rest arr)))\n                  (cons (cons head\
    \ (lookup head \"Sixteen\")) (by_length (rest arr)))\n                  (cons\
    \ (cons head (lookup head \"Seventeen\")) (by_length (rest arr)))\n          \
    \        (cons (cons head (lookup head \"Eighteen\")) (by_length (rest arr)))\n\
    \                  (cons (cons head (lookup head \"Nineteen\")) (by_length (rest\
    \ arr)))\n                  (cons (cons head (lookup head \"Twenty\")) (by_length\
    \ (rest arr)))\n                  (cons (cons head (", "  (if (empty? arr)\n \
    \     '()\n      (let ([head (car arr)])\n        (if (< head 9)\n           \
    \ (cons (reverse (map #(cons (car %) (cdr %))\n                              \
    \ (filter (lambda (x) (= x head))\n                                       (range\
    \ 1 10))\n                               (reverse (map #(cons (cdr %) (car %))\n\
    \                                           (filter (lambda (x) (= x head))\n\
    \                                                   (range 1 10))))\n        \
    \            (by_length (cdr arr)))\n            (cons (reverse (map #(cons (car\
    \ %) (cdr %))\n                               (filter (lambda (x) (= x head))\n\
    \                                       (range 1 10))\n                      \
    \         (reverse (map #(cons (cdr %) (car %))\n                            \
    \               (filter (lambda (x) (= x head))\n                            \
    \                       (range 1 10))))\n                    (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([nums (sort (map number->string arr))])\n\
    \        (if (= (length nums) 0)\n            '()\n            (let ([nums (reverse\
    \ nums)])\n              (map string->number nums))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (reverse (map #(cons (substring \"One\" 0 1) (substring \"Nine\" 0 1))\
    \ (substring head 0 9)))\n                  (by_length (cdr arr)))\n         \
    \   (cons (reverse (map #(cons (substring \"One\" 0 1) (substring \"Nine\" 0 1))\
    \ (substring head 0 9)))\n                  (by_length (cdr arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (append (by_length (rest arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (", "  (if\
    \ (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (cons head (cons \"One\" (cdr arr)))\n               \
    \   (by_length (cdr arr)))\n            (cons (cons head (cons \"Ten\" (cdr arr)))\n\
    \                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([arr (reverse arr)])\n        (map (lambda (x) (cond ((< x 9) (cons\
    \ (cons \"One\" x) \"One\"))\n                                 ((< x 8) (cons\
    \ (cons \"Two\" x) \"Two\"))\n                                 ((< x 7) (cons\
    \ (cons \"Three\" x) \"Three\"))\n                                 ((< x 6) (cons\
    \ (cons \"Four\" x) \"Four\"))\n                                 ((< x 5) (cons\
    \ (cons \"Five\" x) \"Five\"))\n                                 ((< x 4) (cons\
    \ (cons \"Six\" x) \"Six\"))\n                                 ((< x 3) (cons\
    \ (cons \"Seven\" x) \"Seven\"))\n                                 ((< x 2) (cons\
    \ (cons \"Eight\" x) \"Eight\"))\n                                 ((< x 1) (cons\
    \ (cons \"Nine\" x) \"Nine\"))\n                                 (else (cons x\
    \ \"?\"))))\n               arr))))\n", "  (if (empty? arr)\n      '()\n     \
    \ (let ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cons head (cons \"One\" (cdr %))) (reverse (map #(cons head (cons \"\
    Two\" (cdr %))) (reverse (map #(cons head (cons \"Three\" (cdr %))) (reverse (map\
    \ #(cons head (cons \"Four\" (cdr %))) (reverse (map #(cons head (cons \"Five\"\
    \ (cdr %))) (reverse (map #(cons head (cons \"Six\" (cdr %))) (reverse (map #(cons\
    \ head (cons \"Seven\" (cdr %))) (reverse (map #(cons head (cons \"Eight\" (cdr\
    \ %))) (reverse (map #(cons head (cons \"Nine\" (cdr %))) (reverse (map #(cons\
    \ head (cons \"Zero\" (cdr %))) (reverse (map #(cons head (cons \"One\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"Two\" (cdr %))) (reverse (map #(cons head\
    \ (cons \"Three\" (cdr %))) (reverse (map #(cons head (cons \"Four\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"Five\" (cdr %))) (reverse (map #(cons head\
    \ (cons \"Six\" (cdr %))) (reverse (map #(cons head (cons \"Seven\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"Eight\" (cdr %))) (reverse (map #(cons head\
    \ (cons \"Nine\" (cdr %))) (reverse (map #(cons head (cons \"Zero\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"One\" (cdr %))) (reverse (map #(cons head\
    \ (cons \"Two\" (cdr %))) (reverse (map #(cons head (cons \"Three\" (cdr %)))\
    \ (reverse (map #(cons head (cons \"Four\" (cdr", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cons (substring \"One\" 0 1) (substring \"Nine\" 0 1)) (substring head\
    \ 0 1)))\n                  (by_length (cdr arr)))\n            (cons (reverse\
    \ (map #(cons (substring \"One\" 0 1) (substring \"Nine\" 0 1)) (substring head\
    \ 0 1)))\n                  (by_length (cdr arr)))))))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([l (length arr)])\n        (if (= l 1)\n            (cons\
    \ (string->symbol (car arr)) '())\n            (let ([a (sort (map string->symbol\
    \ (range \"One\" \"Nine\"))\n                           (lambda (x y) (< (length\
    \ x) l) (< (length y) l))\n                           (lambda (x y) (> (length\
    \ x) l) (> (length y) l)))])\n              (cons (string->symbol (car a)) (by_length\
    \ (cdr a))))))))\n", "  (if (empty? arr)\n      '()\n      (let ([nums (map number->string\
    \ (reverse (filter (\u03BB (x) (and (<= x 9) (>= x 1)))\n                    \
    \                             (map number->string arr))))])\n        (map (\u03BB\
    \ (x) (if (number? x) x \"Unknown\")) nums))))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (append (reverse\
    \ (map #(cond [(< head %) %]\n                                        [(= head\
    \ %) One]\n                                        [(= head %) Two]\n        \
    \                                [(= head %) Three]\n                        \
    \                [(= head %) Four]\n                                        [(=\
    \ head %) Five]\n                                        [(= head %) Six]\n  \
    \                                      [(= head %) Seven]\n                  \
    \                      [(= head %) Eight]\n                                  \
    \      [(= head %) Nine]\n                                        [(= head %)\
    \ ?]\n                                        [(= head %) ?]\n               \
    \                         [(= head %) ?]\n                                   \
    \     [(= head %) ?]\n                                        [(= head %) ?]\n\
    \                                        [(= head %) ?]\n                    \
    \                    [(= head %) ?]\n                                        [(=\
    \ head %) ?]\n                                        [(= head %) ?]\n       \
    \                                 [(= head %) ?]\n                           \
    \             [(= head %) ?]\n                                        [(= head\
    \ %) ?]\n                                        [(= head %) ?]\n            \
    \                            [(= head %) ?]\n                                \
    \        [(= head %) ?]\n                                        [(= head %) ?]\n\
    \                                        [(= head %) ?]\n                    \
    \                    [(= head %) ?]\n                                        [(=\
    \ head %) ?]\n                                        [(= head %) ?]\n       \
    \                                 [(= head %) ?]\n                           \
    \             [(= head %) ?]\n                                        [(= head\
    \ %) ?]\n                                        [(= head %) ?]\n            \
    \                            [(= head %) ?]\n                                \
    \        [(= head %) ?]\n                                        [(= head %) ?]\n\
    \                                        [(= head %) ?]\n                    \
    \                    [(= head %) ?]\n                                        [(=\
    \ head %) ?]\n                                        [(= head %) ?]\n       \
    \                                 [(= head %) ?]\n                           \
    \             [(= head %) ?]\n                                        [(= head\
    \ %) ?]\n                                        [(= head %) ?]\n            \
    \                            [(= head %) ?]\n                                \
    \        [(= head %) ?]\n                                        [(= head %) ?]\n\
    \                                        [(= head %) ?]\n                    \
    \                    [(= head %) ?]\n                                        [(=\
    \ head %) ?]\n                                        [(= head %) ?]\n       \
    \                                 [(= head %) ", "  (cond\n    [(empty? arr) empty]\n\
    \    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n    [else\
    \ (cons (first arr) (by_length (rest arr)))]))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string->symbol\
    \ (string->string head)) (by_length (cdr arr)))\n            (cons (string->symbol\
    \ (string->string head)) (by_length (cdr arr)))))\n  )\n)\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (reverse (map #(cons (car %) (cdr %)) (filter (lambda (x) (>= x 1)) arr)))\n\
    \                  (by_length (filter (lambda (x) (not (< head 9)) arr)))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(number? (first arr)) (cons (first arr)\
    \ (by_length (rest arr)))]\n    [else (cons (first arr) (by_length (rest arr)))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (cons head (cons \"One\" (reverse (sub1 head))))\n   \
    \               (by_length (cdr arr)))\n            (cons (cons head (cons \"\
    Ten\" (reverse (sub1 head))))\n                  (by_length (cdr arr))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 1)\n            (cons (reverse (cons \"One\" (rest (rest arr))))\n    \
    \              (by_length (rest arr)))\n            (cons (reverse (cons \"Two\"\
    \ (rest (rest arr))))\n                  (by_length (rest arr)))\n           \
    \ (cons (reverse (cons \"Three\" (rest (rest arr))))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (cons \"Four\" (rest (rest arr))))\n\
    \                  (by_length (rest arr)))\n            (cons (reverse (cons \"\
    Five\" (rest (rest arr))))\n                  (by_length (rest arr)))\n      \
    \      (cons (reverse (cons \"Six\" (rest (rest arr))))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (cons \"Seven\" (rest (rest arr))))\n\
    \                  (by_length (rest arr)))\n            (cons (reverse (cons \"\
    Eight\" (rest (rest arr))))\n                  (by_length (rest arr)))\n     \
    \       (cons (reverse (cons \"Nine\" (rest (rest arr))))\n                  (by_length\
    \ (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([arr (sort arr)])\n\
    \        (if (= (length arr) 9)\n            (let ([arr (reverse arr)])\n    \
    \          (map #(cond [(< % 10) \"One\"]\n                            [(< % 10)\
    \ \"Two\"]\n                            [(< % 10) \"Three\"]\n               \
    \             [(< % 10) \"Four\"]\n                            [(< % 10) \"Five\"\
    ]\n                            [(< % 10) \"Six\"]\n                          \
    \  [(< % 10) \"Seven\"]\n                            [(< % 10) \"Eight\"]\n  \
    \                          [(< % 10) \"Nine\"]\n                            [(<\
    \ % 10) \"Ten\"]\n                            [(< % 10) \"Eleven\"]\n        \
    \                    [(< % 10) \"Twelve\"]\n                            [(< %\
    \ 10) \"Thirteen\"]\n                            [(< % 10) \"Fourteen\"]\n   \
    \                         [(< % 10) \"Fifteen\"]\n                           \
    \ [(< % 10) \"Sixteen\"]\n                            [(< % 10) \"Seventeen\"\
    ]\n                            [(< % 10) \"Eighteen\"]\n                     \
    \       [(< % 10) \"Nineteen\"]\n                            [(< % 10) \"Twenty\"\
    ]\n                            [(< % 10) \"Twenty One\"]\n                   \
    \         [(< % 10) \"Twenty Two\"]\n                            [(< % 10) \"\
    Twenty Three\"]\n                            [(< % 10) \"Twenty Four\"]\n    \
    \                        [(< % 10) \"Twenty Five\"]\n                        \
    \    [(< % 10) \"Twenty Six\"]\n                            [(< % 10) \"Twenty\
    \ Seven\"]\n                            [(< % 10) \"Twenty Eight\"]\n        \
    \                    [(< % 10) \"Twenty Nine\"]\n                            [(<\
    \ % 10) \"Thirty\"]\n                            [(< % 10) \"Thirty One\"]\n \
    \                           [(< % 10) \"Thirty Two\"]\n                      \
    \      [(< % 10) \"Thirty Three\"]\n                            [(< % 10) \"Thirty\
    \ Four\"]\n                            [(< % 10) \"Thirty Five\"]\n          \
    \                  [(< % 10) \"Thirty Six\"]\n                            [(<\
    \ % 10) \"Thirty Seven\"]\n                            [(< % 10) \"Thirty Eight\"\
    ]\n                            [(< % 10) \"Thirty Nine\"]\n                  \
    \          [(< % 10) \"Forty\"]\n                            [(< % 10) \"Forty\
    \ One\"]\n                            [(< % 10) \"Forty Two\"]\n             \
    \               [(< % 10) \"Forty Three", "  (if (empty? arr)\n      '()\n   \
    \   (let ([head (car arr)])\n        (if (< head 9)\n            (cons (cons head\
    \ (cons \"One\" (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (cons head (cons \"Two\" (by_length (cdr arr))))\n        \
    \          (by_length (cdr arr)))\n            (cons (cons head (cons \"Three\"\
    \ (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n        \
    \    (cons (cons head (cons \"Four\" (by_length (cdr arr))))\n               \
    \   (by_length (cdr arr)))\n            (cons (cons head (cons \"Five\" (by_length\
    \ (cdr arr))))\n                  (by_length (cdr arr)))\n            (cons (cons\
    \ head (cons \"Six\" (by_length (cdr arr))))\n                  (by_length (cdr\
    \ arr)))\n            (cons (cons head (cons \"Seven\" (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (cons head (cons\
    \ \"Eight\" (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (cons head (cons \"Nine\" (by_length (cdr arr))))\n       \
    \           (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n   \
    \   (let ([head (car arr)])\n        (if (< head 9)\n            (append (by_length\
    \ (cdr arr))\n                    (list (by_length_name head arr)))\n        \
    \    (append (by_length (cdr arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr))\n                    (list (by_length_name\
    \ head arr))\n                    (list (by_length_name head arr))\n         \
    \           (list (by_length_name head arr", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cons (string->number %) '(One Two Three Four Five Six Seven Eight Nine))\
    \ (range head head 9)))\n            (cons (string->number head) (by_length (rest\
    \ arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([arr (reverse arr)])\n\
    \        (map (lambda (x) (cond [(< x 9) (cons \"Nine\" (reverse (sub1 x)))]\n\
    \                                [(< x 8) (cons \"Eight\" (reverse (sub1 x)))]\n\
    \                                [(< x 7) (cons \"Seven\" (reverse (sub1 x)))]\n\
    \                                [(< x 6) (cons \"Six\" (reverse (sub1 x)))]\n\
    \                                [(< x 5) (cons \"Five\" (reverse (sub1 x)))]\n\
    \                                [(< x 4) (cons \"Four\" (reverse (sub1 x)))]\n\
    \                                [(< x 3) (cons \"Three\" (reverse (sub1 x)))]\n\
    \                                [(< x 2) (cons \"Two\" (reverse (sub1 x)))]\n\
    \                                [(< x 1) (cons \"One\" (reverse (sub1 x)))]\n\
    \                                [(> x 1) (cons \"One\" (reverse (sub1 x)))]\n\
    \                                [(> x 2) (cons \"Two\" (reverse (sub1 x)))]\n\
    \                                [(> x 3) (cons \"Three\" (reverse (sub1 x)))]\n\
    \                                [(> x 4) (cons \"Four\" (reverse (sub1 x)))]\n\
    \                                [(> x 5) (cons \"Five\" (reverse (sub1 x)))]\n\
    \                                [(> x 6) (cons \"Six\" (reverse (sub1 x)))]\n\
    \                                [(> x 7) (cons \"Seven\" (reverse (sub1 x)))]\n\
    \                                [(> x 8) (cons \"Eight\" (reverse (sub1 x)))]\n\
    \                                [(> x 9) (cons \"Nine\" (reverse (sub1 x)))]\n\
    \                                [else (cons \"?\" (reverse (sub1 x)))])) arr))))\n",
  "  (if (null? arr)\n      '()\n      (let ([arr (sort arr (lambda (x y) (< (length\
    \ x) 9) (< (length y) 9)))])\n        (let ([result (map #(cond [(< x 9) (cons\
    \ \"One\" x)] [else (cons \"Two\" x)])\n                           (reverse arr)])\n\
    \          (map #(cond [(< x 9) (cons \"One\" x)] [else (cons \"Two\" x)])\n \
    \             result))))\n</code>\n<|/ a dscore=1 |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (if (null? arr)\n      '()\n      (let ([arr (sort arr)])\n\
    \        (reverse (map #(cond [(< % 9) (cons \"One\" (replace % 9 \"One\" \"Eight\"\
    ))]\n                            [(< % 9) (cons \"Two\" (replace % 9 \"Two\" \"\
    Five\"))]\n                            [(< % 9) (cons \"Three\" (replace % 9 \"\
    Three\" \"Four\"))]\n                            [(< % 9) (cons \"Four\" (replace\
    \ % 9 \"Four\" \"Three\"))]\n                            [(< % 9) (cons \"Five\"\
    \ (replace % 9 \"Five\" \"Two\"))]\n                            [(< % 9) (cons\
    \ \"Six\" (replace % 9 \"Six\" \"One\"))]\n                            [(< % 9)\
    \ (cons \"Seven\" (replace % 9 \"Seven\" \"Zero\"))]\n                       \
    \     [(< % 9) (cons \"Eight\" (replace % 9 \"Eight\" \"One\"))]\n           \
    \                 [(< % 9) (cons \"Nine\" (replace % 9 \"Nine\" \"Zero\"))]\n\
    \                            [else (cons \"Zero\" (replace % 9 \"Zero\" \"One\"\
    ))])\n                    arr))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse (map\
    \ #(cons head (cons \"One\" (cdr %)))\n                               (filter\
    \ #(< head (- 9 %)) arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"Ten\" (cdr %)))\n                               (filter #(< head (- 10 %))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n\
    \                               (filter #(< head (- 20 %)) arr)))\n          \
    \  (cons (reverse (map #(cons head (cons \"Thirty\" (cdr %)))\n              \
    \                 (filter #(< head (- 30 %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Fourty\" (cdr %)))\n                              \
    \ (filter #(< head (- 40 %)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Fifty\" (cdr %)))\n                               (filter #(< head (-\
    \ 50 %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Sixty\" (cdr\
    \ %)))\n                               (filter #(< head (- 60 %)) arr)))\n   \
    \         (cons (reverse (map #(cons head (cons \"Seventy\" (cdr %)))\n      \
    \                         (filter #(< head (- 70 %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Eighty\" (cdr %)))\n                     \
    \          (filter #(< head (- 80 %)) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Ninety\" (cdr %)))\n                               (filter\
    \ #(< head (- 90 %)) arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"One\" (cdr %)))\n                               (filter #(< head (- 100 %))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n\
    \                               (filter #(< head (- 1000 %)) arr)))\n        \
    \    (cons (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n            \
    \                   (filter #(", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cond\
    \ [(< head %) %]\n                                      [(= head %) %]\n     \
    \                                 [(> head %) (cons \"Nine\" (reverse (map #(cond\
    \ [(< head %) %]\n                                                           \
    \            [(= head %) %]\n                                                \
    \                       [(> head %) (cons \"Nine\" (reverse (map #(cond [(< head\
    \ %) %]\n                                                                    \
    \                            [(= head %) %]\n                                \
    \                                                                [(> head %) (cons\
    \ \"Nine\" (reverse (map #(cond [(< head %) %]\n                             \
    \                                                                            \
    \                              [(= head %) %]\n                              \
    \                                                                            \
    \                             [(> head %) (cons \"Nine\" (reverse (map #(cond\
    \ [(< head %) %]\n                                                           \
    \                                                                            \
    \                         [(= head %) %]\n                                   \
    \                                                                            \
    \                                                 [(> head %) (cons \"Nine\" (reverse\
    \ (map #(cond [(< head %) %]\n                                               \
    \                                                                            \
    \                                                                            [(=\
    \ head %) %]\n                                                               \
    \                                                                            \
    \                                                            [(> head %) (cons\
    \ \"Nine\" (reverse (map #(cond [(< head %) %]\n                             \
    \                                                                            \
    \                                                                            \
    \                                           [(= head %) %]\n                 \
    \                                                                            \
    \                                                                            \
    \                                                       [(> head %) (cons \"Nine\"\
    \ (reverse (map #(cond [(< head %) %]\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                                         [(=\
    \ head %) %]\n                                                               \
    \                                                                            \
    \                                                                            \
    \                                                [(> head %) (cons \"Nine\" (reverse\
    \ (map #(cond [(< head %) %]\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             [(= head %) %]\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             [(> head %) (cons \"Nine\" (reverse (map #(cond [(< head %) %]\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       [(= head %) %]\n                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              [(> head %) (cons\
    \ \"Nine\" (reverse (map #(cond [(< head %) %]\n                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   [(= head %) %]\n                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       [(> head %) (cons \"Nine\" (reverse (map #(cond [(< head %) %]\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \      [(= head %) %]", "  (if (null? arr)\n      '()\n      (let ([i 0])\n  \
    \      (if (< i 9)\n            (cons (cons (substring \"One\" i i) i) (by_length\
    \ (cdr arr)))\n            (cons (substring \"Nine\" i i) (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons head (cons \"One\" (cdr %))) (reverse\
    \ (map #(cons head (cons \"Two\" (cdr %))) (reverse (map #(cons head (cons \"\
    Three\" (cdr %))) (reverse (map #(cons head (cons \"Four\" (cdr %))) (reverse\
    \ (map #(cons head (cons \"Five\" (cdr %))) (reverse (map #(cons head (cons \"\
    Six\" (cdr %))) (reverse (map #(cons head (cons \"Seven\" (cdr %))) (reverse (map\
    \ #(cons head (cons \"Eight\" (cdr %))) (reverse (map #(cons head (cons \"Nine\"\
    \ (cdr %))) (car arr))))))))))))\n            (cons (reverse (map #(cons head\
    \ (cons \"One\" (cdr %))) (car arr))))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cons head (cons \"One\" (cdr %)))\n                               (filter\
    \ #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons \"Two\"\
    \ (cdr %)))\n                               (filter #(< head %) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Three\" (cdr %)))\n          \
    \                     (filter #(< head %) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Four\" (cdr %)))\n                               (filter\
    \ #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons \"Five\"\
    \ (cdr %)))\n                               (filter #(< head %) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Six\" (cdr %)))\n            \
    \                   (filter #(< head %) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Seven\" (cdr %)))\n                               (filter\
    \ #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons \"Eight\"\
    \ (cdr %)))\n                               (filter #(< head %) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Nine\" (cdr %)))\n           \
    \                    (filter #(< head %) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Ten\" (cdr %)))\n                               (filter\
    \ #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons \"Eleven\"\
    \ (cdr %)))\n                               (filter #(< head %) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Twelve\" (cdr %)))\n         \
    \                      (filter #(< head %) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Thirteen\" (cdr %)))\n                            \
    \   (filter #(< head %) arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"Fourteen\" (cdr %)))\n                               (filter #(< head %) arr)))\n\
    \            (con", "  (if (empty? arr)\n      '()\n      (let ([arr (reverse\
    \ arr)])\n        (map (lambda (x) (cond [(< x 9) (cons \"Nine\" (reverse (sub1\
    \ x)))]\n                                [(< x 8) (cons \"Eight\" (reverse (sub1\
    \ x)))]\n                                [(< x 7) (cons \"Seven\" (reverse (sub1\
    \ x)))]\n                                [(< x 6) (cons \"Six\" (reverse (sub1\
    \ x)))]\n                                [(< x 5) (cons \"Five\" (reverse (sub1\
    \ x)))]\n                                [(< x 4) (cons \"Four\" (reverse (sub1\
    \ x)))]\n                                [(< x 3) (cons \"Three\" (reverse (sub1\
    \ x)))]\n                                [(< x 2) (cons \"Two\" (reverse (sub1\
    \ x)))]\n                                [(< x 1) (cons \"One\" (reverse (sub1\
    \ x)))]\n                                [(> x 1) (cons \"One\" (reverse (sub1\
    \ x)))]\n                                [(> x 2) (cons \"Two\" (reverse (sub1\
    \ x)))]\n                                [(> x 3) (cons \"Three\" (reverse (sub1\
    \ x)))]\n                                [(> x 4) (cons \"Four\" (reverse (sub1\
    \ x)))]\n                                [(> x 5) (cons \"Five\" (reverse (sub1\
    \ x)))]\n                                [(> x 6) (cons \"Six\" (reverse (sub1\
    \ x)))]\n                                [(> x 7) (cons \"Seven\" (reverse (sub1\
    \ x)))]\n                                [(> x 8) (cons \"Eight\" (reverse (sub1\
    \ x)))]\n                                [(> x 9) (cons \"Nine\" (reverse (sub1\
    \ x)))]\n                                [(> x 0) (cons \"Zero\" (reverse (sub1\
    \ x)))]\n                                [else (cons \"Zero\" (reverse (sub1 x)))]))\n\
    \              arr))))\n", "  (if (null? arr)\n      '()\n      (let ([nums (map\
    \ number->string arr)])\n        (if (> (length nums) 9)\n            (cons (reverse\
    \ nums) '())\n            (cons (reverse (map string->number nums)) '())))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([len (length arr)])\n        (if (=\
    \ len 0)\n            '()\n            (let ([start (first arr)])\n          \
    \    (if (< start 9)\n                  (cons (cons start (lookup start \"One\"\
    )) (by_length (rest arr)))\n                  (cons (cons start (lookup start\
    \ \"Two\")) (by_length (rest arr)))\n                  (cons (cons start (lookup\
    \ start \"Three\")) (by_length (rest arr)))\n                  (cons (cons start\
    \ (lookup start \"Four\")) (by_length (rest arr)))\n                  (cons (cons\
    \ start (lookup start \"Five\")) (by_length (rest arr)))\n                  (cons\
    \ (cons start (lookup start \"Six\")) (by_length (rest arr)))\n              \
    \    (cons (cons start (lookup start \"Seven\")) (by_length (rest arr)))\n   \
    \               (cons (cons start (lookup start \"Eight\")) (by_length (rest arr)))\n\
    \                  (cons (cons start (lookup start \"Nine\")) (by_length (rest\
    \ arr))))))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (first arr))\
    \ (cons (first arr) (sort (rest (rest arr))))]\n    [else (cons (first arr) (sort\
    \ (rest (rest arr))))]\n  ))\n", "  (if (null? arr)\n      '()\n      (let ([arr\
    \ (sort arr)])\n        (if (= (length arr) 9)\n            (let ([arr (reverse\
    \ arr)])\n              (map #(cond [(< % 10) \"One\"]\n                     \
    \       [(< % 10) \"Two\"]\n                            [(< % 10) \"Three\"]\n\
    \                            [(< % 10) \"Four\"]\n                           \
    \ [(< % 10) \"Five\"]\n                            [(< % 10) \"Six\"]\n      \
    \                      [(< % 10) \"Seven\"]\n                            [(< %\
    \ 10) \"Eight\"]\n                            [(< % 10) \"Nine\"]\n          \
    \                  [(< % 10) \"Ten\"]\n                            [(< % 10) \"\
    Eleven\"]\n                            [(< % 10) \"Twelve\"]\n               \
    \             [(< % 10) \"Thirteen\"]\n                            [(< % 10) \"\
    Fourteen\"]\n                            [(< % 10) \"Fifteen\"]\n            \
    \                [(< % 10) \"Sixteen\"]\n                            [(< % 10)\
    \ \"Seventeen\"]\n                            [(< % 10) \"Eighteen\"]\n      \
    \                      [(< % 10) \"Nineteen\"]\n                            [(<\
    \ % 10) \"Twenty\"]\n                            [(< % 10) \"Twenty-one\"]\n \
    \                           [(< % 10) \"Twenty-two\"]\n                      \
    \      [(< % 10) \"Twenty-three\"]\n                            [(< % 10) \"Twenty-four\"\
    ]\n                            [(< % 10) \"Twenty-five\"]\n                  \
    \          [(< % 10) \"Twenty-six\"]\n                            [(< % 10) \"\
    Twenty-seven\"]\n                            [(< % 10) \"Twenty-eight\"]\n   \
    \                         [(< % 10) \"Twenty-nine\"]\n                       \
    \     [(< % 10) \"Thirty\"]\n                            [(< % 10) \"Thirty-one\"\
    ]\n                            [(< % 10) \"Thirty-two\"]\n                   \
    \         [(< % 10) \"Thirty-three\"]\n                            [(< % 10) \"\
    Thirty-four\"]\n                            [(< % 10) \"Thirty-five\"]\n     \
    \                       [(< % 10) \"Thirty-six\"]\n                          \
    \  [(< % 10) \"Thirty-seven\"]\n                            [(< % 10) \"Thirty-eight\"\
    ]\n                            [(< % 10) \"Thirty-nine\"]\n                  \
    \          [(< % 10) \"Forty\"]\n                            [(< % 10) \"Forty-one\"\
    ]\n                            [(< % 10) \"Forty-two\"]\n                    \
    \        [(", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (map #(cons \"One\" 1) (filter\
    \ #(< head %) arr)))\n                  (by_length (filter #(< head %) arr)))\n\
    \            (cons (reverse (map #(cons \"Two\" 2) (filter #(< head %) arr)))\n\
    \                  (by_length (filter #(< head %) arr)))\n            (cons (reverse\
    \ (map #(cons \"Three\" 3) (filter #(< head %) arr)))\n                  (by_length\
    \ (filter #(< head %) arr)))\n            (cons (reverse (map #(cons \"Four\"\
    \ 4) (filter #(< head %) arr)))\n                  (by_length (filter #(< head\
    \ %) arr)))\n            (cons (reverse (map #(cons \"Five\" 5) (filter #(< head\
    \ %) arr)))\n                  (by_length (filter #(< head %) arr)))\n       \
    \     (cons (reverse (map #(cons \"Six\" 6) (filter #(< head %) arr)))\n     \
    \             (by_length (filter #(< head %) arr)))\n            (cons (reverse\
    \ (map #(cons \"Seven\" 7) (filter #(< head %) arr)))\n                  (by_length\
    \ (filter #(< head %) arr)))\n            (cons (reverse (map #(cons \"Eight\"\
    \ 8) (filter #(< head %) arr)))\n                  (by_length (filter #(< head\
    \ %) arr)))\n            (cons (reverse (map #(cons \"Nine\" 9) (filter #(< head\
    \ %) arr)))\n                  (by_length (filter #(< head %) arr))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons head (cons \"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                 \
    \           (filter #(< head %) (reverse (map #(mod head 10) (reverse (range 1\
    \ 9))))))\n                  (by_length (filter #(< head %) (reverse (map #(mod\
    \ head 10) (reverse (range 1 9))))))\n            (cons (reverse (map #(cons head\
    \ (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\"))\n                            (filter #(> head %) (reverse (map #(mod\
    \ head 10) (reverse (range 1 9))))))\n                  (by_length (filter #(>\
    \ head %) (reverse (map #(mod head 10) (reverse (range 1 9))))))))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(number? (first arr)) (cons (first arr) (map (lambda\
    \ (x) (cons (cons \"One\" x) (by_length (rest arr))))\n                      \
    \                     (by_length (rest arr))))]\n    [else (cons (first arr) (map\
    \ (lambda (x) (cons (cons \"One\" x) (by_length (rest arr))))\n              \
    \                    (by_length (rest arr))))]))\n", "  (if (null? arr)\n    \
    \  '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (cons head (cons \"One\" (cdr arr)))\n                  (by_length (cdr arr)))\n\
    \            (cons (cons head (cons \"Ten\" (cdr arr)))\n                  (by_length\
    \ (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([arr (sort arr\
    \ (lambda (x) (<= (length x) 9) (length x)))])\n        (map (lambda (x) (cond\
    \ [(<= (length x) 9) (cons (substring x 1) (cons \"One\" (reverse (substring x\
    \ 2))))]\n                              [(<= (length x) 8) (cons (substring x\
    \ 1) (cons \"Two\" (reverse (substring x 2))))]\n                            \
    \  [(<= (length x) 7) (cons (substring x 1) (cons \"Three\" (reverse (substring\
    \ x 2))))]\n                              [(<= (length x) 6) (cons (substring\
    \ x 1) (cons \"Four\" (reverse (substring x 2))))]\n                         \
    \     [(<= (length x) 5) (cons (substring x 1) (cons \"Five\" (reverse (substring\
    \ x 2))))]\n                              [(<= (length x) 4) (cons (substring\
    \ x 1) (cons \"Six\" (reverse (substring x 2))))]\n                          \
    \    [(<= (length x) 3) (cons (substring x 1) (cons \"Seven\" (reverse (substring\
    \ x 2))))]\n                              [(<= (length x) 2) (cons (substring\
    \ x 1) (cons \"Eight\" (reverse (substring x 2))))]\n                        \
    \      [(<= (length x) 1) (cons (substring x 1) (cons \"Nine\" (reverse (substring\
    \ x 2))))]\n                              [else (cons (substring x 1) (cons \"\
    Unknown\" (reverse (substring x 2))))])))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (map #(cons \"One\" . %) (rest arr)))\n                  (by_length (rest arr)))\n\
    \            (cons (reverse (map #(cons \"Two\" . %) (rest arr)))\n          \
    \        (by_length (rest arr)))\n            (cons (reverse (map #(cons \"Three\"\
    \ . %) (rest arr)))\n                  (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons \"Four\" . %) (rest arr)))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons \"Five\" . %) (rest arr)))\n\
    \                  (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ \"Six\" . %) (rest arr)))\n                  (by_length (rest arr)))\n     \
    \       (cons (reverse (map #(cons \"Seven\" . %) (rest arr)))\n             \
    \     (by_length (rest arr)))\n            (cons (reverse (map #(cons \"Eight\"\
    \ . %) (rest arr)))\n                  (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons \"Nine\" . %) (rest arr)))\n                  (by_length\
    \ (rest arr)))))))\n</code>\n<|/ a dscore=0 |>\n<| a tags=racket,scheme |>\n<code>",
  "  (cond\n    [(empty? arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr\
    \ arr)) (cons (by_length (cdr arr)) empty))]\n    [else (cons (by_length (cdr\
    \ arr)) (by_length (cdr arr)))]))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([arr (sort arr)])\n        (if (= (length arr) 9)\n            (let ([arr (reverse\
    \ arr)])\n              (map #(cond [(< % 10) \"One\"]\n                     \
    \       [(< % 10) \"Two\"]\n                            [(< % 10) \"Three\"]\n\
    \                            [(< % 10) \"Four\"]\n                           \
    \ [(< % 10) \"Five\"]\n                            [(< % 10) \"Six\"]\n      \
    \                      [(< % 10) \"Seven\"]\n                            [(< %\
    \ 10) \"Eight\"]\n                            [(< % 10) \"Nine\"]\n          \
    \                  [else (cond [(< % 10) \"Ten\"]\n                          \
    \             [(< % 10) \"Eleven\"]\n                                       [(<\
    \ % 10) \"Twelve\"]\n                                       [(< % 10) \"Thirteen\"\
    ]\n                                       [(< % 10) \"Fourteen\"]\n          \
    \                             [(< % 10) \"Fifteen\"]\n                       \
    \                [(< % 10) \"Sixteen\"]\n                                    \
    \   [(< % 10) \"Seventeen\"]\n                                       [(< % 10)\
    \ \"Eighteen\"]\n                                       [(< % 10) \"Nineteen\"\
    ]\n                                       [else (cond [(< % 10) \"Twenty\"]\n\
    \                                                 [(< % 10) \"Twenty\"]\n    \
    \                                             [(< % 10) \"Twenty\"]\n        \
    \                                         [(< % 10) \"Twenty\"]\n            \
    \                                     [(< % 10) \"Twenty\"]\n                \
    \                                 [(< % 10) \"Twenty\"]\n                    \
    \                             [(< % 10) \"Twenty\"]\n                        \
    \                         [(< % 10) \"Twenty\"]\n                            \
    \                     [(< % 10) \"Twenty\"]\n                                \
    \                 [(< % 10) \"Twenty\"]\n                                    \
    \             [(< % 10) \"Twenty\"]\n                                        \
    \         [(< % 10) \"Twenty\"]\n                                            \
    \     [(< % 10) \"Twenty\"]\n                                                \
    \ [(< % 10) \"Twenty\"]\n                                                 [(<\
    \ % 10) \"Twenty\"]\n                                                 [(< % 10)\
    \ \"Twenty\"]\n                                                 [(< % 10) \"Twenty\"\
    ]\n                                                 [(< % 10) \"Twenty\"]\n  \
    \                                               [(< % 10) \"Twenty\"]\n      \
    \                                           [(< % 10) \"Twenty\"]\n          \
    \                                       [(< % 10) \"Twenty\"]\n              \
    \                                   [(< % 10) \"Twenty\"]\n                  \
    \                               [(< % 10) \"Twenty\"]\n                      \
    \                           [(< % 10) \"Twenty\"]\n                          \
    \                       [(< % 10) ", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (cons (cons head (cons\
    \ \"One\" (by_length (rest arr)))) (by_length (rest arr)))\n            (cons\
    \ (cons head (cons \"Two\" (by_length (rest arr)))) (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"Three\" (by_length (rest arr)))) (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Four\" (by_length (rest arr))))\
    \ (by_length (rest arr)))\n            (cons (cons head (cons \"Five\" (by_length\
    \ (rest arr)))) (by_length (rest arr)))\n            (cons (cons head (cons \"\
    Six\" (by_length (rest arr)))) (by_length (rest arr)))\n            (cons (cons\
    \ head (cons \"Seven\" (by_length (rest arr)))) (by_length (rest arr)))\n    \
    \        (cons (cons head (cons \"Eight\" (by_length (rest arr)))) (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Nine\" (by_length (rest arr))))\
    \ (by_length (rest arr)))\n            (cons (cons head (cons \"Ten\" (by_length\
    \ (rest arr)))) (by_length (rest arr)))\n            (cons (cons head (cons \"\
    Eleven\" (by_length (rest arr)))) (by_length (rest arr)))\n            (cons (cons\
    \ head (cons \"Twelve\" (by_length (rest arr)))) (by_length (rest arr)))\n   \
    \         (cons (cons head (cons \"Thirteen\" (by_length (rest arr)))) (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Fourteen\" (by_length (rest\
    \ arr)))) (by_length (rest arr)))\n            (cons (cons head (cons \"Fifteen\"\
    \ (by_length (rest arr)))) (by_length (rest arr)))\n            (cons (cons head\
    \ (cons \"Sixteen\" (by_length (rest arr)))) (by_length (rest arr)))\n       \
    \     (cons (cons head (cons \"Seventeen\" (by_length (rest arr)))) (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Eighteen\" ", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (reverse (map #(cond [(< head %) %]\n                        \
    \                [(= head %) %]\n                                        [else\
    \ (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")]))\n                  (by_length (cdr arr)))\n            (cons (reverse\
    \ (map #(cond [(< head %) %]\n                                        [(= head\
    \ %) %]\n                                        [else (cons \"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")]))\n         \
    \         (by_length (cdr arr)))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n    [else\
    \ (cons (first arr) (by_length (rest arr)))]))\n", "  (if (empty? arr)\n     \
    \ '()\n      (let ([x (first arr)])\n        (if (number? x)\n            (if\
    \ (< x 9)\n                (cons (string->symbol (string->string x)) (by_length\
    \ (rest arr)))\n                (cons (string->symbol (string->string x)) (by_length\
    \ (rest arr))))\n            (cons (string->symbol (string->string x)) (by_length\
    \ (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([len (length\
    \ arr)])\n        (if (= len 0)\n            '()\n            (let ([arr (reverse\
    \ arr)])\n              (let ([digits (map #(cons (string->number (string->symbol\
    \ %)) %) arr)])\n                (if (= (length digits) 9)\n                 \
    \   (map #(cons (string->number (string->symbol %)) %) arr)\n                \
    \    (map #(cons (string->number (string->symbol %)) %) digits))))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons (substring \"One\" 0 1) (substring\
    \ \"Nine\" 0 1)) (reverse (map #(substring \"One\" 0 1) (substring \"Nine\" 0\
    \ 1) (substring head 0 1))))) (by_length (cdr arr)))\n            (cons (reverse\
    \ (map #(cons (substring \"One\" 0 1) (substring \"Nine\" 0 1)) (reverse (map\
    \ #(substring \"One\" 0 1) (substring \"Nine\" 0 1) (substring head 0 1))))) (by_length\
    \ (cdr arr)))))\n</code>\n<|/ a dscore=0 |>\n<| a tags=racket,scheme |>\n<code>",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons \"One\" . %) (filter #(< head %)\
    \ arr)))\n                  (by_length (filter (lambda (x) (< head x)) arr)))\n\
    \            (cons (reverse (map #(cons \"Two\" . %) (filter #(< head %) arr)))\n\
    \                  (by_length (filter (lambda (x) (< head x)) arr)))\n       \
    \     (cons (reverse (map #(cons \"Three\" . %) (filter #(< head %) arr)))\n \
    \                 (by_length (filter (lambda (x) (< head x)) arr)))\n        \
    \    (cons (reverse (map #(cons \"Four\" . %) (filter #(< head %) arr)))\n   \
    \               (by_length (filter (lambda (x) (< head x)) arr)))\n          \
    \  (cons (reverse (map #(cons \"Five\" . %) (filter #(< head %) arr)))\n     \
    \             (by_length (filter (lambda (x) (< head x)) arr)))\n            (cons\
    \ (reverse (map #(cons \"Six\" . %) (filter #(< head %) arr)))\n             \
    \     (by_length (filter (lambda (x) (< head x)) arr)))\n            (cons (reverse\
    \ (map #(cons \"Seven\" . %) (filter #(< head %) arr)))\n                  (by_length\
    \ (filter (lambda (x) (< head x)) arr)))\n            (cons (reverse (map #(cons\
    \ \"Eight\" . %) (filter #(< head %) arr)))\n                  (by_length (filter\
    \ (lambda (x) (< head x)) arr)))\n            (cons (reverse (map #(cons \"Nine\"\
    \ . %) (filter #(< head %) arr)))\n                  (by_length (filter (lambda\
    \ (x) (< head x)) arr))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons\
    \ \"One\" . %) (reverse (map #(cons \"Two\" . %) (reverse (map #(cons \"Three\"\
    \ . %) (reverse (map #(cons \"Four\" . %) (reverse (map #(cons \"Five\" . %) (reverse\
    \ (map #(cons \"Six\" . %) (reverse (map #(cons \"Seven\" . %) (reverse (map #(cons\
    \ \"Eight\" . %) (reverse (map #(cons \"Nine\" . %) (reverse (map #(cons \"Ten\"\
    \ . %) (reverse (map #(cons \"Eleven\" . %) (reverse (map #(cons \"Twelve\" .\
    \ %) (reverse (map #(cons \"Thirteen\" . %) (reverse (map #(cons \"Fourteen\"\
    \ . %) (reverse (map #(cons \"Fifteen\" . %) (reverse (map #(cons \"Sixteen\"\
    \ . %) (reverse (map #(cons \"Seventeen\" . %) (reverse (map #(cons \"Eighteen\"\
    \ . %) (reverse (map #(cons \"Nineteen\" . %) (reverse (map #(cons \"Twenty\"\
    \ . %) (reverse (map #(cons \"Twenty-one\" . %) (reverse (map #(cons \"Twenty-two\"\
    \ . %) (reverse (map #(cons \"Twenty-three\" . %) (reverse (map #(cons \"Twenty-four\"\
    \ . %) (reverse (map #(cons \"Twenty-five\" . %) (reverse (map #(cons \"Twenty-six\"\
    \ . %) (reverse (map #(cons \"Twenty-seven\" . %) (reverse (map #(cons \"Twenty-eight\"\
    \ . %) (reverse (map #(cons \"Twenty-nine\" . %) (reverse (map #(cons \"Thirty\"\
    \ . %) (reverse (map #(cons \"Thirty-one\" . %) (reverse (map #(cons \"Thirty-two\"\
    \ . %) (reverse (map #(cons \"Thirty", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse (map\
    \ #(cons head (cons \"One\" (cdr %)))\n                               (filter\
    \ (lambda (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Two\" (cdr %)))\n                               (filter (lambda (x)\
    \ (<= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Three\"\
    \ (cdr %)))\n                               (filter (lambda (x) (<= x head)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Four\" (cdr %)))\n      \
    \                         (filter (lambda (x) (<= x head)) arr)))\n          \
    \  (cons (reverse (map #(cons head (cons \"Five\" (cdr %)))\n                \
    \               (filter (lambda (x) (<= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Six\" (cdr %)))\n                               (filter\
    \ (lambda (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Seven\" (cdr %)))\n                               (filter (lambda (x)\
    \ (<= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Eight\"\
    \ (cdr %)))\n                               (filter (lambda (x) (<= x head)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Nine\" (cdr %)))\n      \
    \                         (filter (lambda (x) (<= x head)) arr)))\n          \
    \  (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n                 \
    \              (filter (lambda (x) (<= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Eleven\" (cdr %)))\n                              \
    \ (filter (lambda (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Twelve\" (cdr %)))\n                               (filter (lambda\
    \ (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"\
    Thirteen\" (cdr %)))\n                               (filter (lambda (x) (<= x\
    \ head)) arr)))\n            (cons (reverse (map #(cons head ", "  (if (null?\
    \ arr)\n      '()\n      (let ([x (first arr)])\n        (if (< x 9)\n       \
    \     (cons (string->symbol (string->string x))\n                  (by_length\
    \ (rest arr)))\n            (cons (string->symbol (string->string x))\n      \
    \            (by_length (rest arr))))))\n", "  (if (null? arr)\n      '()\n  \
    \    (let ([arr (sort arr (lambda (x y) (< (length x) 9) (< (length y) 9)))])\n\
    \        (let ([result (map #(cond [(< x 9) (cons \"One\" (cons x (reverse (cons\
    \ \"Two\" (cons x (reverse (cons \"Three\" (cons x (reverse (cons \"Four\" (cons\
    \ x (reverse (cons \"Five\" (cons x (reverse (cons \"Six\" (cons x (reverse (cons\
    \ \"Seven\" (cons x (reverse (cons \"Eight\" (cons x (reverse (cons \"Nine\" (cons\
    \ x (reverse (cons \"Zero\" (cons x (reverse (cons \"One\" (cons x (reverse (cons\
    \ \"Two\" (cons x (reverse (cons \"Three\" (cons x (reverse (cons \"Four\" (cons\
    \ x (reverse (cons \"Five\" (cons x (reverse (cons \"Six\" (cons x (reverse (cons\
    \ \"Seven\" (cons x (reverse (cons \"Eight\" (cons x (reverse (cons \"Nine\" (cons\
    \ x (reverse (cons \"Zero\" (cons x (reverse (cons \"One\" (cons x (reverse (cons\
    \ \"Two\" (cons x (reverse (cons \"Three\" (cons x (reverse (cons \"Four\" (cons\
    \ x (reverse (cons \"Five\" (cons x (reverse (cons \"Six\" (cons x (reverse (cons\
    \ \"Seven\" (cons x (reverse (cons \"Eight\" (cons x (reverse (cons \"Nine\" (cons\
    \ x (reverse (cons \"Zero\" (cons x (reverse (cons \"One\" (cons x (reverse (cons\
    \ \"Two\" (cons x (reverse (cons \"Three\" (cons x (reverse (cons \"Four\" (cons\
    \ x (reverse (cons \"Five\" (cons x (reverse (cons \"Six\" (cons x (reverse (cons\
    \ \"Seven\" (cons x (reverse (cons \"Eight\" (cons x (reverse (cons \"Nine\" (cons\
    \ x (reverse (cons \"Zero\" (cons x (reverse (cons \"One\" (cons x (reverse (cons\
    \ \"Two\" (cons x (reverse (cons \"Three\" (cons x (reverse (cons \"Four\" (cons\
    \ x (reverse (cons \"Fi", "  (if (empty? arr)\n      '()\n      (let ([arr (sort\
    \ arr)])\n        (if (< 1 (length arr))\n            (map (lambda (x) (cond [(=\
    \ x 1) \"One\"]\n                                    [(= x 2) \"Two\"]\n     \
    \                               [(= x 3) \"Three\"]\n                        \
    \            [(= x 4) \"Four\"]\n                                    [(= x 5)\
    \ \"Five\"]\n                                    [(= x 6) \"Six\"]\n         \
    \                           [(= x 7) \"Seven\"]\n                            \
    \        [(= x 8) \"Eight\"]\n                                    [(= x 9) \"\
    Nine\"]\n                                    [else x])\n                  arr)\n\
    \            (map (lambda (x) (cond [(= x 1) \"One\"]\n                      \
    \              [(= x 2) \"Two\"]\n                                    [(= x 3)\
    \ \"Three\"]\n                                    [(= x 4) \"Four\"]\n       \
    \                             [(= x 5) \"Five\"]\n                           \
    \         [(= x 6) \"Six\"]\n                                    [(= x 7) \"Seven\"\
    ]\n                                    [(= x 8) \"Eight\"]\n                 \
    \                   [(= x 9) \"Nine\"]\n                                    [else\
    \ x])\n                  arr))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([arr (sort arr)])\n        (if (= (length arr) 9)\n            (let ([arr (reverse\
    \ arr)])\n              (map #(cond [(< % 10) \"One\"]\n                     \
    \       [(< % 10) \"Two\"]\n                            [(< % 10) \"Three\"]\n\
    \                            [(< % 10) \"Four\"]\n                           \
    \ [(< % 10) \"Five\"]\n                            [(< % 10) \"Six\"]\n      \
    \                      [(< % 10) \"Seven\"]\n                            [(< %\
    \ 10) \"Eight\"]\n                            [(< % 10) \"Nine\"]\n          \
    \                  [(> % 10) \"Ten\"]\n                            [(> % 10) \"\
    Eleven\"]\n                            [(> % 10) \"Twelve\"]\n               \
    \             [(> % 10) \"Thirteen\"]\n                            [(> % 10) \"\
    Fourteen\"]\n                            [(> % 10) \"Fifteen\"]\n            \
    \                [(> % 10) \"Sixteen\"]\n                            [(> % 10)\
    \ \"Seventeen\"]\n                            [(> % 10) \"Eighteen\"]\n      \
    \                      [(> % 10) \"Nineteen\"]\n                            [(=\
    \ % 10) \"Twenty\"]\n                            [(= % 10) \"Twenty-one\"]\n \
    \                           [(= % 10) \"Twenty-two\"]\n                      \
    \      [(= % 10) \"Twenty-three\"]\n                            [(= % 10) \"Twenty-four\"\
    ]\n                            [(= % 10) \"Twenty-five\"]\n                  \
    \          [(= % 10) \"Twenty-six\"]\n                            [(= % 10) \"\
    Twenty-seven\"]\n                            [(= % 10) \"Twenty-eight\"]\n   \
    \                         [(= % 10) \"Twenty-nine\"]\n                       \
    \     [(= % 10) \"Thirty\"]\n                            [(= % 10) \"Thirty-one\"\
    ]\n                            [(= % 10) \"Thirty-two\"]\n                   \
    \         [(= % 10) \"Thirty-three\"]\n                            [(= % 10) \"\
    Thirty-four\"]\n                            [(= % 10) \"Thirty-five\"]\n     \
    \                       [(= % 10) \"Thirty-six\"]\n                          \
    \  [(= % 10) \"Thirty-seven\"]\n                            [(= % 10) \"Thirty-eight\"\
    ]\n                            [(= % 10) \"Thirty-nine\"]\n                  \
    \          [(= % 10) \"Forty\"]\n                            [(= % 10) \"Forty-one\"\
    ]\n                            [(= % 10) \"Forty-two\"]\n                    \
    \        [(", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (map #(cons head (cons \"\
    One\" (cdr %)))\n                               (filter #(< head (- 9 %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n       \
    \                        (filter #(< head (- 10 %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n                     \
    \          (filter #(< head (- 20 %)) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Thirty\" (cdr %)))\n                               (filter\
    \ #(< head (- 30 %)) arr)))\n            (cons (reverse (map #(cons head (cons\
    \ \"Fourty\" (cdr %)))\n                               (filter #(< head (- 40\
    \ %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Fifty\" (cdr\
    \ %)))\n                               (filter #(< head (- 50 %)) arr)))\n   \
    \         (cons (reverse (map #(cons head (cons \"Sixty\" (cdr %)))\n        \
    \                       (filter #(< head (- 60 %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Seventy\" (cdr %)))\n                             \
    \  (filter #(< head (- 70 %)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Eighty\" (cdr %)))\n                               (filter #(< head\
    \ (- 80 %)) arr)))\n            (cons (reverse (map #(cons head (cons \"Ninety\"\
    \ (cdr %)))\n                               (filter #(< head (- 90 %)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"One\" (cdr %)))\n       \
    \                        (filter #(< head (- 100 %)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Ten\" (cdr %)))\n                        \
    \       (filter #(< head (- 1000 %)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Twenty\" (cdr %)))\n                               (filter #(",
  "  (if (empty? arr)\n      '()\n      (let ([arr (reverse arr)])\n        (map (lambda\
    \ (x) (cond [(< x 9) (cons \"Nine\" (reverse (sub1 x)))]\n                   \
    \             [(< x 8) (cons \"Eight\" (reverse (sub1 x)))]\n                \
    \                [(< x 7) (cons \"Seven\" (reverse (sub1 x)))]\n             \
    \                   [(< x 6) (cons \"Six\" (reverse (sub1 x)))]\n            \
    \                    [(< x 5) (cons \"Five\" (reverse (sub1 x)))]\n          \
    \                      [(< x 4) (cons \"Four\" (reverse (sub1 x)))]\n        \
    \                        [(< x 3) (cons \"Three\" (reverse (sub1 x)))]\n     \
    \                           [(< x 2) (cons \"Two\" (reverse (sub1 x)))]\n    \
    \                            [(< x 1) (cons \"One\" (reverse (sub1 x)))]\n   \
    \                             [else (cons \"Zero\" (reverse (sub1 x)))])) arr))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([x (first arr)])\n        (if (< x 9)\n\
    \            (cons (reverse (map #(cons (substring \"One\" 0 1) (substring \"\
    Nine\" 0 1)) x))\n                  (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons (substring \"Two\" 0 1) (substring \"Nine\" 0 1)) x))\n\
    \                  (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ (substring \"Three\" 0 1) (substring \"Nine\" 0 1)) x))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons (substring \"Four\" 0 1)\
    \ (substring \"Nine\" 0 1)) x))\n                  (by_length (rest arr)))\n \
    \           (cons (reverse (map #(cons (substring \"Five\" 0 1) (substring \"\
    Nine\" 0 1)) x))\n                  (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons (substring \"Six\" 0 1) (substring \"Nine\" 0 1)) x))\n\
    \                  (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ (substring \"Seven\" 0 1) (substring \"Nine\" 0 1)) x))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons (substring \"Eight\" 0\
    \ 1) (substring \"Nine\" 0 1)) x))\n                  (by_length (rest arr)))\n\
    \            (cons (reverse (map #(cons (substring \"Nine\" 0 1) (substring \"\
    Nine\" 0 1)) x))\n                  (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons (substring \"One\" 0 1) (substring \"One\" 0 1)) x))\n\
    \                  (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ (substring \"Two\" 0 1) (substring \"Two\" 0 1)) x))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons (substring \"Three\" 0\
    \ 1) (substring \"Three\" 0 1)) x))\n                  (by_length (rest arr)))\n\
    \            (cons (reverse (map #(cons (substring \"Four\" 0 1) (substring \"\
    Four\" 0 1)) x))\n                  (by_length (rest arr)))\n            (cons\
    \ (reverse (map ", "  (if (empty? arr)\n      '()\n      (let ([nums (filter odd?\
    \ (map number? (filter between? arr 1 9)))])\n        (reverse (map #(cond [(<\
    \ % 10) \"One\"]\n                                [(< % 10) \"Two\"]\n       \
    \                         [(< % 10) \"Three\"]\n                             \
    \   [(< % 10) \"Four\"]\n                                [(< % 10) \"Five\"]\n\
    \                                [(< % 10) \"Six\"]\n                        \
    \        [(< % 10) \"Seven\"]\n                                [(< % 10) \"Eight\"\
    ]\n                                [(< % 10) \"Nine\"]\n                     \
    \           [(< % 10) \"Ten\"]\n                                [(< % 10) \"Eleven\"\
    ]\n                                [(< % 10) \"Twelve\"]\n                   \
    \             [(< % 10) \"Thirteen\"]\n                                [(< % 10)\
    \ \"Fourteen\"]\n                                [(< % 10) \"Fifteen\"]\n    \
    \                            [(< % 10) \"Sixteen\"]\n                        \
    \        [(< % 10) \"Seventeen\"]\n                                [(< % 10) \"\
    Eighteen\"]\n                                [(< % 10) \"Nineteen\"]\n       \
    \                         [(< % 10) \"Twenty\"]\n                            \
    \    [(< % 10) \"Twenty one\"]\n                                [(< % 10) \"Twenty\
    \ two\"]\n                                [(< % 10) \"Twenty three\"]\n      \
    \                          [(< % 10) \"Twenty four\"]\n                      \
    \          [(< % 10) \"Twenty five\"]\n                                [(< % 10)\
    \ \"Twenty six\"]\n                                [(< % 10) \"Twenty seven\"\
    ]\n                                [(< % 10) \"Twenty eight\"]\n             \
    \                   [(< % 10) \"Twenty nine\"]\n                             \
    \   [(< % 10) \"Thirty\"]\n                                [(< % 10) \"Thirty\
    \ one\"]\n                                [(< % 10) \"Thirty two\"]\n        \
    \                        [(< % 10) \"Thirty three\"]\n                       \
    \         [(< % 10) \"Thirty four\"]\n                                [(< % 10)\
    \ \"Thirty five\"]\n                                [(< % 10) \"Thirty six\"]\n\
    \                                [(< % 10) \"Thirty seven\"]\n               \
    \                 [(< % 10) \"Thirty eight\"]\n                              \
    \  [(< % 10) \"Thirty nine\"]\n                                [(< % 10) \"Forty\"\
    ]\n                                [(< % 10) \"Forty one\"]\n                \
    \                [(< % 10) \"Forty two\"]\n                                [(<\
    \ % 10) \"Forty three\"]\n                                [(< % 10) ", "  (if\
    \ (null? arr)\n      '()\n      (let ([len (length arr)])\n        (if (= len\
    \ 0)\n            '()\n            (let ([head (car arr)])\n              (if\
    \ (< head 9)\n                  (cons (string->symbol (+ head 1)) (by_length (cdr\
    \ arr)))\n                  (cons (string->symbol (+ head 1)) (by_length (cdr\
    \ arr)))))\n            (cons (string->symbol (+ head 1)) (by_length (cdr arr)))))\n\
    \        ))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (append (reverse (map #(cond [(< head %)\
    \ %]\n                                        [(= head %) One]\n             \
    \                           [(= head %) Two]\n                               \
    \         [(= head %) Three]\n                                        [(= head\
    \ %) Four]\n                                        [(= head %) Five]\n      \
    \                                  [(= head %) Six]\n                        \
    \                [(= head %) Seven]\n                                        [(=\
    \ head %) Eight]\n                                        [(= head %) Nine]\n\
    \                                        [else (cond [(= head %) %]\n        \
    \                                          [else (cond [(= head %) %]\n      \
    \                                                    [else (cond [(= head %) %]\n\
    \                                                                [else (cond [(=\
    \ head %) %]\n                                                               \
    \        [else (cond [(= head %) %]\n                                        \
    \                                       [else (cond [(= head %) %]\n         \
    \                                                                            \
    \  [else (cond [(= head %) %]\n                                              \
    \                                                 [else (cond [(= head %) %]\n\
    \                                                                            \
    \                           [else (cond [(= head %) %]\n                     \
    \                                                                            \
    \              [else (cond [(= head %) %]\n                                  \
    \                                                                            \
    \         [else (cond [(= head %) %]\n                                       \
    \                                                                            \
    \            [else (cond [(= head %) %]\n                                    \
    \                                                                            \
    \       [else (cond [(= head %) %]\n                                         \
    \                                                                            \
    \          [else (cond [(= head %) %]\n                                      \
    \                                                                            \
    \     [else (cond [(= head %) %]\n                                           \
    \                                                                            \
    \        [else (cond [(= head %) %]\n                                        \
    \                                                                            \
    \   [else (cond [(= head %) %]\n                                             \
    \                                                                            \
    \      [else (cond [(= head %) %]\n                                          \
    \                                                                            \
    \ [else (cond [(= head %) %]\n                                               \
    \                                                                            \
    \    [else (cond [(= head %) %]\n                                            \
    \                                                                           [else\
    \ (cond [(= head %) %]\n                                                     \
    \                                                                          [else\
    \ (cond [(= head %) %]\n                                                     \
    \                                                                  [else (cond\
    \ [(= head %) %]\n                                                           \
    \                                                                    [else (cond\
    \ [(= head %) %]\n                                                           \
    \                                                            [else (cond [(= head\
    \ %) %]\n                                                                    \
    \                                                           [else (cond [(= head\
    \ %) %", "  (cond\n    [(empty? arr) empty]\n    [(number? (car arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) empty))]\n    [else (cons (by_length\
    \ (cdr arr)) (by_length (cdr arr)))]))\n", "  (if (null? arr)\n      '()\n   \
    \   (let ([arr (sort arr)])\n        (if (= (length arr) 9)\n            (let\
    \ ([arr (reverse arr)])\n              (map #(cond [(< % 10) (cons \"One\" (reverse\
    \ (substring arr (quotient % 10 10))))]\n                          [(= % 10) (cons\
    \ \"Two\" (reverse (substring arr (quotient % 10 10))))]\n                   \
    \       [(= % 10) (cons \"Three\" (reverse (substring arr (quotient % 10 10))))]\n\
    \                          [(= % 10) (cons \"Four\" (reverse (substring arr (quotient\
    \ % 10 10))))]\n                          [(= % 10) (cons \"Five\" (reverse (substring\
    \ arr (quotient % 10 10))))]\n                          [(= % 10) (cons \"Six\"\
    \ (reverse (substring arr (quotient % 10 10))))]\n                          [(=\
    \ % 10) (cons \"Seven\" (reverse (substring arr (quotient % 10 10))))]\n     \
    \                     [(= % 10) (cons \"Eight\" (reverse (substring arr (quotient\
    \ % 10 10))))]\n                          [(= % 10) (cons \"Nine\" (reverse (substring\
    \ arr (quotient % 10 10))))]\n                          [(> % 10) (cons \"Ten\"\
    \ (reverse (substring arr (quotient % 10 10))))]\n                          [(>\
    \ % 10) (cons \"Eleven\" (reverse (substring arr (quotient % 10 10))))]\n    \
    \                      [(> % 10) (cons \"Twelve\" (reverse (substring arr (quotient\
    \ % 10 10))))]\n                          [(> % 10) (cons \"Thirteen\" (reverse\
    \ (substring arr (quotient % 10 10))))]\n                          [(> % 10) (cons\
    \ \"Fourteen\" (reverse (substring arr (quotient % 10 10))))]\n              \
    \            [(> % 10) (cons \"Fifteen\" (reverse (substring arr (quotient % 10\
    \ 10))))]\n                          [(> % 10) (cons \"Sixteen\" (reverse (substring\
    \ arr (quotient % 10 10))))]\n                          [(> % 10) (cons \"Seventeen\"\
    \ (reverse (substring arr (quotient % 10 10))))]\n                          [(>\
    \ % 10) (cons \"Eighteen\" (reverse (substring arr (quotient % 10 10))))]\n  \
    \                        [(", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons\
    \ head (cons \"One\" (cdr %)))\n                               (filter (lambda\
    \ (x) (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"\
    Ten\" (cdr %)))\n                               (filter (lambda (x) (= x head))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n\
    \                               (filter (lambda (x) (= x head)) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Thirty\" (cdr %)))\n         \
    \                      (filter (lambda (x) (= x head)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Forty\" (cdr %)))\n                      \
    \         (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Fifty\" (cdr %)))\n                               (filter\
    \ (lambda (x) (= x head)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Sixty\" (cdr %)))\n                               (filter (lambda (x)\
    \ (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Seventy\"\
    \ (cdr %)))\n                               (filter (lambda (x) (= x head)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Eighty\" (cdr %)))\n    \
    \                           (filter (lambda (x) (= x head)) arr)))\n         \
    \   (cons (reverse (map #(cons head (cons \"Ninety\" (cdr %)))\n             \
    \                  (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"One\" (cdr %)))\n                               (filter\
    \ (lambda (x) (= x head)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Ten\" (cdr %)))\n                               (filter (lambda (x)\
    \ (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\"\
    \ (cdr %)))\n                               (filter (lambda (x) (= x head)) arr)))\n\
    \            (cons (reverse ", "  (if (null? arr)\n      '()\n      (let ([len\
    \ (length arr)])\n        (if (= len 0)\n            '()\n            (let ([head\
    \ (first arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< ", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons\
    \ (string->symbol (string->string %)) (cons \"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                          \
    \   (filter #(< % head) arr)))\n            (cons (reverse (map #(cons (string->symbol\
    \ (string->string %)) (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\"\
    \ \"Seven\" \"Eight\" \"Nine\"))\n                             (filter #(>= %\
    \ head) arr)))\n            (cons (reverse (map #(cons (string->symbol (string->string\
    \ %)) (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\"))\n                             (filter #(> % head) arr)))\n      \
    \      (cons (reverse (map #(cons (string->symbol (string->string %)) (cons \"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    ))\n                             (filter #(<= % head) arr)))\n            (cons\
    \ (reverse (map #(cons (string->symbol (string->string %)) (cons \"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n       \
    \                      (filter #(>= % head) arr)))\n            (cons (reverse\
    \ (map #(cons (string->symbol (string->string %)) (cons \"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                 \
    \            (filter #(< % head) arr)))\n            (cons (reverse (map #(cons\
    \ (string->symbol (string->string %)) (cons \"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                          \
    \   (filter #(<= % head) arr)))\n            (cons (reverse (map #(cons (string->symbol\
    \ (string->string %)) (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\"\
    \ \"Seven\" \"Eight\" \"Nine\"))\n                             (filter #(> % head)\
    \ arr)))\n            (cons (reverse (map #(cons (string->symbol (string->string\
    \ %)) (cons \"One\" \"", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (cons head (cons \"One\" (by_length\
    \ (cdr arr))))\n                  (by_length (cdr arr)))\n            (cons (cons\
    \ head (cons \"Two\" (by_length (cdr arr))))\n                  (by_length (cdr\
    \ arr)))\n            (cons (cons head (cons \"Three\" (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (cons head (cons\
    \ \"Four\" (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (cons head (cons \"Five\" (by_length (cdr arr))))\n       \
    \           (by_length (cdr arr)))\n            (cons (cons head (cons \"Six\"\
    \ (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n        \
    \    (cons (cons head (cons \"Seven\" (by_length (cdr arr))))\n              \
    \    (by_length (cdr arr)))\n            (cons (cons head (cons \"Eight\" (by_length\
    \ (cdr arr))))\n                  (by_length (cdr arr)))\n            (cons (cons\
    \ head (cons \"Nine\" (by_length (cdr arr))))\n                  (by_length (cdr\
    \ arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (reverse (cons (car arr) \"One\"))\
    \ (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Two\"))\
    \ (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Three\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Four\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Five\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Six\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Seven\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Eight\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Nine\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Ten\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Eleven\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Twelve\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Thirteen\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Fourteen\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Fifteen\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Sixteen\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Seventeen\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Eighteen\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Nineteen\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (car arr) \"Twenty\"\
    )) (by_length (cdr arr)))\n            (cons (reverse (cons (", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (reverse (cons (name head) '()))\n                  (by_length\
    \ (cdr arr)))\n            (cons (name head) (by_length (cdr arr)))))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(number? (first arr)) (cons (first arr)\
    \ (map by_length (rest arr)))]\n    [else (cons (first arr) (map by_length (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (car arr)) (cons\
    \ (by_length (cdr arr)) (cons (by_length (cdr (cdr arr)))\n                  \
    \                                 (by_length (cdr (cdr (cdr arr))))))]\n    [else\
    \ (cons (by_length (cdr arr)) (by_length (cdr (cdr arr))))]))\n", "  (if (null?\
    \ arr)\n      '()\n      (let ([arr (sort arr (lambda (x y) (< (length x) 9) (<\
    \ (length y) 9))))]\n        (if (null? arr)\n            '()\n            (let\
    \ ([arr (reverse arr)]\n                   (map #(cond [(< x 9) (cons \"One\"\
    \ (reverse (substring x 0 1)))]\n                             [(< x 9) (cons \"\
    Two\" (reverse (substring x 0 2)))]\n                             [(< x 9) (cons\
    \ \"Three\" (reverse (substring x 0 3)))]\n                             [(< x\
    \ 9) (cons \"Four\" (reverse (substring x 0 4)))]\n                          \
    \   [(< x 9) (cons \"Five\" (reverse (substring x 0 5)))]\n                  \
    \           [(< x 9) (cons \"Six\" (reverse (substring x 0 6)))]\n           \
    \                  [(< x 9) (cons \"Seven\" (reverse (substring x 0 7)))]\n  \
    \                           [(< x 9) (cons \"Eight\" (reverse (substring x 0 8)))]\n\
    \                             [(< x 9) (cons \"Nine\" (reverse (substring x 0\
    \ 9)))]\n                             [else (cons x (reverse (substring x 0 9)))])\n\
    \                   (map #(cond [(< y 9) (cons \"One\" (reverse (substring y 0\
    \ 1)))]\n                             [(< y 9) (cons \"Two\" (reverse (substring\
    \ y 0 2)))]\n                             [(< y 9) (cons \"Three\" (reverse (substring\
    \ y 0 3)))]\n                             [(< y 9) (cons \"Four\" (reverse (substring\
    \ y 0 4)))]\n                             [(< y 9) (cons \"Five\" (reverse (substring\
    \ y 0 5)))]\n                             [(< y 9) (cons \"Six\" (reverse (substring\
    \ y 0 6)))]\n                             [(< y 9) (cons \"Seven\" (reverse (substring\
    \ y 0 7)))]\n                             [(< y 9) (cons \"Eight\" (reverse (substring\
    \ y 0 8)))]\n                             [(< y 9) (cons \"Nine\" (reverse (substring\
    \ y 0 9)))]\n                             [else (cons y (reverse (substring y\
    \ 0 9)))])\n                   (map #(cond [(< x 9) (cons \"One\" (reverse (substring\
    \ x 0 1)))]\n                             [(< x ", "  (if (null? arr)\n      '()\n\
    \      (let ([arr (sort arr)])\n        (if (= (length arr) 9)\n            (let\
    \ ([arr (reverse arr)])\n              (map #(cond [(< % 10) \"One\"]\n      \
    \                      [(< % 10) \"Two\"]\n                            [(< % 10)\
    \ \"Three\"]\n                            [(< % 10) \"Four\"]\n              \
    \              [(< % 10) \"Five\"]\n                            [(< % 10) \"Six\"\
    ]\n                            [(< % 10) \"Seven\"]\n                        \
    \    [(< % 10) \"Eight\"]\n                            [(< % 10) \"Nine\"]\n \
    \                           [(> % 10) \"Ten\"]\n                            [(>\
    \ % 10) \"Eleven\"]\n                            [(> % 10) \"Twelve\"]\n     \
    \                       [(> % 10) \"Thirteen\"]\n                            [(>\
    \ % 10) \"Fourteen\"]\n                            [(> % 10) \"Fifteen\"]\n  \
    \                          [(> % 10) \"Sixteen\"]\n                          \
    \  [(> % 10) \"Seventeen\"]\n                            [(> % 10) \"Eighteen\"\
    ]\n                            [(> % 10) \"Nineteen\"]\n                     \
    \       [(= % 10) \"Twenty\"]\n                            [(= % 10) \"Thirty\"\
    ]\n                            [(= % 10) \"Forty\"]\n                        \
    \    [(= % 10) \"Fifty\"]\n                            [(= % 10) \"Sixty\"]\n\
    \                            [(= % 10) \"Seventy\"]\n                        \
    \    [(= % 10) \"Eighty\"]\n                            [(= % 10) \"Ninety\"]\n\
    \                            [(= % 10) \"Hundred\"]\n                        \
    \    [(= % 10) \"Thousand\"]\n                            [(= % 10) \"Million\"\
    ]\n                            [(= % 10) \"Billion\"]\n                      \
    \      [(= % 10) \"Trillion\"]\n                            [(= % 10) \"Quadrillion\"\
    ]\n                            [(= % 10) \"Quintillion\"]\n                  \
    \          [(= % 10) \"Sextillion\"]\n                            [(= % 10) \"\
    Septillion\"]\n                            [(= % 10) \"Octillion\"]\n        \
    \                    [(= % 10) \"Nonillion\"]\n                            [(=\
    \ % 10) \"Decillion\"]\n                            [(= % 10) \"Undecillion\"\
    ]\n                            [(= % 10) \"Duodecillion\"]\n                 \
    \           [(= % 10) \"Tredecillion\"]\n                            [(= % 10)\
    \ \"Quattuordecillion\"]\n                            [(= ", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr (cdr arr)))\n                                                   (cons (by_length\
    \ (cdr (cdr (cdr arr))))\n                                                   \
    \     (cons (by_length (cdr (cdr (cdr (cdr arr))))\n                         \
    \                                       (cons (by_length (cdr (cdr (cdr (cdr (cdr\
    \ arr))))\n                                                                  \
    \      (cons (by_length (cdr (cdr (cdr (cdr (cdr arr))))\n                   \
    \                                                           (cons (by_length (cdr\
    \ (cdr (cdr (cdr (cdr (cdr arr))))\n                                         \
    \                                            (cons (by_length (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr arr))))\n                                                   \
    \                                          (cons (by_length (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr arr))))\n                                              \
    \                                                      (cons (by_length (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr arr))))\n                                    \
    \                                                                      (cons (by_length\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr arr))))\n                     \
    \                                                                            \
    \                (cons (by_length (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ arr))))\n                                                                  \
    \                                                    (cons (by_length (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr arr))))\n                                    \
    \                                                                            \
    \             (cons (by_length (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr arr))))\n\
    \                                                                            \
    \                                         (cons (by_length (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr arr))))\n                                         \
    \                                                                            \
    \        (cons (by_length (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr arr))))\n  \
    \                                                                            \
    \                                       (cons (by_length (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr arr))))\n                                                        \
    \                                                                     (cons (by_length\
    \ (cdr", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n      \
    \  (if (< head 9)\n            (cons (string->symbol (string->string head)) (by_length\
    \ (cdr arr)))\n            (cons (string->symbol (string->string head)) (by_length\
    \ (cdr arr)))))\n  )\n)\n", "  (cond\n    [(empty? arr) empty]\n    [(number?\
    \ (car arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) empty))]\n\
    \    [else (cons (by_length (cdr arr)) (by_length (cdr arr)))]))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (reverse (cons (car arr) (cons \"One\" (cdr arr)))) (by_length\
    \ (cdr arr)))\n            (cons (reverse (cons (car arr) (cons \"Ten\" (cdr arr))))\
    \ (by_length (cdr arr))))))\n", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons\
    \ head (cons \"One\" (cdr %)))\n                               (filter (lambda\
    \ (x) (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"\
    Ten\" (cdr %)))\n                               (filter (lambda (x) (= x head))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\" (cdr %)))\n\
    \                               (filter (lambda (x) (= x head)) arr)))\n     \
    \       (cons (reverse (map #(cons head (cons \"Thirty\" (cdr %)))\n         \
    \                      (filter (lambda (x) (= x head)) arr)))\n            (cons\
    \ (reverse (map #(cons head (cons \"Forty\" (cdr %)))\n                      \
    \         (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Fifty\" (cdr %)))\n                               (filter\
    \ (lambda (x) (= x head)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Sixty\" (cdr %)))\n                               (filter (lambda (x)\
    \ (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Seventy\"\
    \ (cdr %)))\n                               (filter (lambda (x) (= x head)) arr)))\n\
    \            (cons (reverse (map #(cons head (cons \"Eighty\" (cdr %)))\n    \
    \                           (filter (lambda (x) (= x head)) arr)))\n         \
    \   (cons (reverse (map #(cons head (cons \"Ninety\" (cdr %)))\n             \
    \                  (filter (lambda (x) (= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"One\" (cdr %)))\n                               (filter\
    \ (lambda (x) (= x head)) arr)))\n            (cons (reverse (map #(cons head\
    \ (cons \"Ten\" (cdr %)))\n                               (filter (lambda (x)\
    \ (= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\"\
    \ (cdr %)))\n                               (filter (lambda (x) (= x head)) arr)))\n\
    \            (cons (reverse ", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons\
    \ \"One\" . %) (rest arr)))\n                  (by_length (rest arr)))\n     \
    \       (cons (reverse (map #(cons \"Two\" . %) (rest arr)))\n               \
    \   (by_length (rest arr)))\n            (cons (reverse (map #(cons \"Three\"\
    \ . %) (rest arr)))\n                  (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons \"Four\" . %) (rest arr)))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons \"Five\" . %) (rest arr)))\n\
    \                  (by_length (rest arr)))\n            (cons (reverse (map #(cons\
    \ \"Six\" . %) (rest arr)))\n                  (by_length (rest arr)))\n     \
    \       (cons (reverse (map #(cons \"Seven\" . %) (rest arr)))\n             \
    \     (by_length (rest arr)))\n            (cons (reverse (map #(cons \"Eight\"\
    \ . %) (rest arr)))\n                  (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons \"Nine\" . %) (rest arr)))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons \"Ten\" . %) (rest arr)))\n\
    \                  (by_length (rest arr)))))))\n", "  (if (empty? arr)\n     \
    \ '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (reverse (map #(cons (car %) (cdr %)) (filter (lambda (x) (>= x 1)) arr)))\n\
    \                  (by_length (filter (lambda (x) (not (< head 9)) arr)))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr\
    \ arr)) (cons (by_length (cdr (cdr arr))) empty))]\n    [else (cons (by_length\
    \ (cdr (cdr arr))) (cons (by_length (cdr arr)) empty))]\n  ))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (reverse (map #(cons head (cons \"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                          \
    \     (filter #(< head (car %)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\"\
    \ \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"))\n                    \
    \           (filter #(< head (car %)) arr)))\n            (cons (reverse (map\
    \ #(cons head (cons \"Twenty\" \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\" \"Seventy\"\
    \ \"Eighty\" \"Ninety\"))\n                               (filter #(< head (car\
    \ %)) arr)))\n            (cons (reverse (map #(cons head (cons \"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n       \
    \                        (filter #(< head (car %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\"\
    \ \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"))\n        \
    \                       (filter #(< head (car %)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Twenty\" \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\" \"\
    Seventy\" \"Eighty\" \"Ninety\"))\n                               (filter #(<\
    \ head (car %)) arr)))\n            (cons (reverse (map #(cons head (cons \"One\"\
    \ \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n\
    \                               (filter #(< head (car %)) arr)))\n           \
    \ (cons (reverse (map #(cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\"\
    \ \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"\
    ))\n                               (filter #(< head (car %)) arr)))\n        \
    \    (cons (reverse (map #(cons head (cons \"Twenty\" \"Thirty\" \"For", "  (if\
    \ (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (map #(cons head (cons \"One\" (cdr %))) (rest\
    \ arr)))\n                  (by_length (rest arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Ten\" (cdr %))) (rest arr)))\n                  (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons (nth\
    \ arr (- head 1)) #(cons nth \"One\")))\n                        (map #(cons (nth\
    \ arr (- head 2)) #(cons nth \"Two\")))\n                        (map #(cons (nth\
    \ arr (- head 3)) #(cons nth \"Three\")))\n                        (map #(cons\
    \ (nth arr (- head 4)) #(cons nth \"Four\")))\n                        (map #(cons\
    \ (nth arr (- head 5)) #(cons nth \"Five\")))\n                        (map #(cons\
    \ (nth arr (- head 6)) #(cons nth \"Six\")))\n                        (map #(cons\
    \ (nth arr (- head 7)) #(cons nth \"Seven\")))\n                        (map #(cons\
    \ (nth arr (- head 8)) #(cons nth \"Eight\")))\n                        (map #(cons\
    \ (nth arr (- head 9)) #(cons nth \"Nine\"))))\n            (cons (reverse (map\
    \ #(cons (nth arr (- head 1)) #(cons nth \"One\")))\n                    (map\
    \ #(cons (nth arr (- head 2)) #(cons nth \"Two\")))\n                    (map\
    \ #(cons (nth arr (- head 3)) #(cons nth \"Three\")))\n                    (map\
    \ #(cons (nth arr (- head 4)) #(cons nth \"Four\")))\n                    (map\
    \ #(cons (nth arr (- head 5)) #(cons nth \"Five\")))\n                    (map\
    \ #(cons (nth arr (- head 6)) #(cons nth \"Six\")))\n                    (map\
    \ #(cons (nth arr (- head 7)) #(cons nth \"Seven\")))\n                    (map\
    \ #(cons (nth arr (- head 8)) #(cons nth \"Eight\")))\n                    (map\
    \ #(cons (nth arr (- head 9)) #(cons nth \"Nine\"))))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([len (length arr)])\n        (if (= len 0)\n         \
    \   '()\n            (let ([head (first arr)])\n              (if (= head 1)\n\
    \                  (cons (cons head \"One\") (by_length (rest arr)))\n       \
    \           (cons (cons head \"Two\") (by_length (rest arr)))\n              \
    \    (cons (cons head \"Three\") (by_length (rest arr)))\n                  (cons\
    \ (cons head \"Four\") (by_length (rest arr)))\n                  (cons (cons\
    \ head \"Five\") (by_length (rest arr)))\n                  (cons (cons head \"\
    Six\") (by_length (rest arr)))\n                  (cons (cons head \"Seven\")\
    \ (by_length (rest arr)))\n                  (cons (cons head \"Eight\") (by_length\
    \ (rest arr)))\n                  (cons (cons head \"Nine\") (by_length (rest\
    \ arr)))\n                  (cons (cons head \"Ten\") (by_length (rest arr)))\n\
    \                  (cons (cons head \"Eleven\") (by_length (rest arr)))\n    \
    \              (cons (cons head \"Twelve\") (by_length (rest arr)))\n        \
    \          (cons (cons head \"Thirteen\") (by_length (rest arr)))\n          \
    \        (cons (cons head \"Fourteen\") (by_length (rest arr)))\n            \
    \      (cons (cons head \"Fifteen\") (by_length (rest arr)))\n               \
    \   (cons (cons head \"Sixteen\") (by_length (rest arr)))\n                  (cons\
    \ (cons head \"Seventeen\") (by_length (rest arr)))\n                  (cons (cons\
    \ head \"Eighteen\") (by_length (rest arr)))\n                  (cons (cons head\
    \ \"Nineteen\") (by_length (rest arr)))\n                  (cons (cons head \"\
    Twenty\") (by_length (rest arr)))\n                  (cons (cons head \"Twenty-one\"\
    ) (by_length (rest arr)))\n                  (cons (cons head \"Twenty-two\")\
    \ (by_length (rest arr)))\n                  (cons (cons head \"Twenty-three\"\
    ) (by_length (rest arr)))\n                  (cons (cons head \"Twenty-four\"\
    ) (by_length (rest arr)))\n                  (con", "  (if (empty? arr)\n    \
    \  '()\n      (let ([head (first arr)])\n        (if (< head 9)\n            (append\
    \ (by_length (rest arr))\n                    (list (by_length arr))\n       \
    \             (list (by_length arr))\n                    (list (by_length arr))\n\
    \                    (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (by_length arr))\n                    (list\
    \ (by_length arr))\n                    (list (by_length arr))\n             \
    \       (list (by_length arr))\n                    (list (by_length arr))\n \
    \                   (list (by_length arr))\n                    (list (by_length\
    \ arr))\n                    (list (", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (cons (reverse (map\
    \ #(cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\"\
    \ \"Eight\" \"Nine\"))\n                             (filter (lambda (x) (<= x\
    \ head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Ten\" \"\
    Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\"\
    \ \"Eighteen\" \"Nineteen\"))\n                             (filter (lambda (x)\
    \ (<= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\"\
    \ \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\" \"Seventy\" \"Eighty\" \"Ninety\"))\n\
    \                             (filter (lambda (x) (<= x head)) arr)))\n      \
    \      (cons (reverse (map #(cons head (cons \"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                          \
    \   (filter (lambda (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons\
    \ head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\"\
    \ \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"))\n                    \
    \         (filter (lambda (x) (<= x head)) arr)))\n            (cons (reverse\
    \ (map #(cons head (cons \"Twenty\" \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\" \"\
    Seventy\" \"Eighty\" \"Ninety\"))\n                             (filter (lambda\
    \ (x) (<= x head)) arr)))\n            (cons (reverse (map #(cons head (cons \"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    ))\n                             (filter (lambda (x) (<= x head)) arr)))\n   \
    \         (cons (reverse (map #(cons head (cons \"Ten\" \"Eleven\" \"Twelve\"\
    \ \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\"\
    \ \"Nineteen\"))\n                             (filter (lambda (x) (<= x head))\
    \ arr)))\n            (cons (reverse (map #(cons head (cons \"Twenty\" \"Thirty\"\
    \ \"For", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n    \
    \    (if (< head 9)\n            (cons (reverse (map #(cons (substring \"0123456789\"\
    \ head 1) %)) (reverse arr))\n                  (by_length (cdr arr)))\n     \
    \       (cons (substring \"0123456789\" head 1) (by_length (cdr arr)))))\n  )\n\
    )\n", "  (if (empty? arr)\n      '()\n      (let ([arr (reverse arr)])\n     \
    \   (map (lambda (x) (cond ((< x 9) (cons (cons \"One\" x) \"One\"))\n       \
    \                         ((< x 8) (cons (cons \"Two\" x) \"Two\"))\n        \
    \                        ((< x 7) (cons (cons \"Three\" x) \"Three\"))\n     \
    \                           ((< x 6) (cons (cons \"Four\" x) \"Four\"))\n    \
    \                            ((< x 5) (cons (cons \"Five\" x) \"Five\"))\n   \
    \                             ((< x 4) (cons (cons \"Six\" x) \"Six\"))\n    \
    \                            ((< x 3) (cons (cons \"Seven\" x) \"Seven\"))\n \
    \                               ((< x 2) (cons (cons \"Eight\" x) \"Eight\"))\n\
    \                                ((< x 1) (cons (cons \"Nine\" x) \"Nine\"))\n\
    \                                (else (cons (cons \"Zero\" x) \"Zero\"))))\n\
    \              arr))))\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (first\
    \ arr)) (cons (first arr) (by_length (rest arr)))]\n    [else (cons (first arr)\
    \ (by_length (rest arr)))]))\n", "  (if (empty? arr)\n      '()\n      (let ([nums\
    \ (sort (map number->string arr))])\n        (if (empty? nums)\n            '()\n\
    \            (append (reverse (map string->number nums)) \n                  \
    \  (map string->name nums)))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (append (reverse-sort\
    \ (map #(cond [(< head (- head 9)) (cons \"One\" (cons head (cons \"Two\" (cons\
    \ head (cons \"Three\" (cons head (cons \"Four\" (cons head (cons \"Five\" (cons\
    \ head (cons \"Six\" (cons head (cons \"Seven\" (cons head (cons \"Eight\" (cons\
    \ head (cons \"Nine\" (cons head (cons \"Ten\" (cons head (cons \"Eleven\" (cons\
    \ head (cons \"Twelve\" (cons head (cons \"Thirteen\" (cons head (cons \"Fourteen\"\
    \ (cons head (cons \"Fifteen\" (cons head (cons \"Sixteen\" (cons head (cons \"\
    Seventeen\" (cons head (cons \"Eighteen\" (cons head (cons \"Nineteen\" (cons\
    \ head (cons \"Twenty\" (cons head (cons \"Twenty-one\" (cons head (cons \"Twenty-two\"\
    \ (cons head (cons \"Twenty-three\" (cons head (cons \"Twenty-four\" (cons head\
    \ (cons \"Twenty-five\" (cons head (cons \"Twenty-six\" (cons head (cons \"Twenty-seven\"\
    \ (cons head (cons \"Twenty-eight\" (cons head (cons \"Twenty-nine\" (cons head\
    \ (cons \"Thirty\" (cons head (cons \"Thirty-one\" (cons head (cons \"Thirty-two\"\
    \ (cons head (cons \"Thirty-three\" (cons head (cons \"Thirty-four\" (cons head\
    \ (cons \"Thirty-five\" (cons head (cons \"Thirty-six\" (cons head (cons \"Thirty-seven\"\
    \ (cons head (cons \"Thirty-eight\" (cons head (cons \"Thirty-nine\" (cons head\
    \ (cons \"Forty\" (cons head (cons \"Forty-one\" (cons head (cons \"Forty-two\"\
    \ (cons head (cons \"Forty-three\" (cons head (cons \"Forty-four\" (cons head\
    \ (cons \"Forty-five\" (cons head (cons \"Forty-six\" (", "  (if (null? arr)\n\
    \      '()\n      (let ([arr (sort arr)])\n        (if (= (length arr) 9)\n  \
    \          (let ([arr (reverse arr)])\n              (map #(cond [(< % 10) \"\
    One\"]\n                            [(< % 10) \"Two\"]\n                     \
    \       [(< % 10) \"Three\"]\n                            [(< % 10) \"Four\"]\n\
    \                            [(< % 10) \"Five\"]\n                           \
    \ [(< % 10) \"Six\"]\n                            [(< % 10) \"Seven\"]\n     \
    \                       [(< % 10) \"Eight\"]\n                            [(<\
    \ % 10) \"Nine\"]\n                            [(> % 10) \"Ten\"]\n          \
    \                  [(> % 10) \"Eleven\"]\n                            [(> % 10)\
    \ \"Twelve\"]\n                            [(> % 10) \"Thirteen\"]\n         \
    \                   [(> % 10) \"Fourteen\"]\n                            [(> %\
    \ 10) \"Fifteen\"]\n                            [(> % 10) \"Sixteen\"]\n     \
    \                       [(> % 10) \"Seventeen\"]\n                           \
    \ [(> % 10) \"Eighteen\"]\n                            [(> % 10) \"Nineteen\"\
    ]\n                            [else \"Other\"]) arr))\n            (map #(cond\
    \ [(< % 10) \"One\"]\n                        [(< % 10) \"Two\"]\n           \
    \             [(< % 10) \"Three\"]\n                        [(< % 10) \"Four\"\
    ]\n                        [(< % 10) \"Five\"]\n                        [(< %\
    \ 10) \"Six\"]\n                        [(< % 10) \"Seven\"]\n               \
    \         [(< % 10) \"Eight\"]\n                        [(< % 10) \"Nine\"]\n\
    \                        [(> % 10) \"Ten\"]\n                        [(> % 10)\
    \ \"Eleven\"]\n                        [(> % 10) \"Twelve\"]\n               \
    \         [(> % 10) \"Thirteen\"]\n                        [(> % 10) \"Fourteen\"\
    ]\n                        [(> % 10) \"Fifteen\"]\n                        [(>\
    \ % 10) \"Sixteen\"]\n                        [(> % 10) \"Seventeen\"]\n     \
    \                   [(> % 10) \"Eighteen\"]\n                        [(> % 10)\
    \ \"Nineteen\"]\n                        [else \"Other\"]) arr))))))\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([len (length arr)])\n        (if (= len\
    \ 0)\n            '()\n            (let ([head (car arr)])\n              (if\
    \ (< head 9)\n                  (cons (cons head (cons \"One\" (by_length (cdr\
    \ arr)))))\n                  (cons (cons head (cons \"Ten\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Twenty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Thirty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Forty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Fifty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Sixty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Seventy\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Eighty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Ninety\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"One\" (by_length (cdr arr)))))\n \
    \                 (cons (cons head (cons \"Ten\" (by_length (cdr arr)))))\n  \
    \                (cons (cons head (cons \"Twenty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Thirty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Forty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Fifty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Sixty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Seventy\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Eighty\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"Ninety\" (by_length (cdr arr)))))\n\
    \                  (cons (cons head (cons \"One\" (by_length (cdr arr)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
