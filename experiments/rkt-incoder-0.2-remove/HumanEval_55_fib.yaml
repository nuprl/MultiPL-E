name: HumanEval_55_fib
language: rkt
prompt: "#lang racket\n\n;; Return n-th Fibonacci number.\n(define (fib n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
  \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal?\
  \ (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate\
  \ 12) 144)\n))\n\n(test-humaneval)"
completions: ["  (cond [(= n 0) 1]\n        [(= n 1) 1]\n        [else (+ (fib (-\
    \ n 1)) (fib (- n 2)))]))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n    \
    \    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n", "  (cond [(= n 0) 1]\n     \
    \   [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n", "  (cond\
    \ [(= n 0) 1]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (-\
    \ n 2)))]))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n        [else (+ (fib\
    \ (- n 1)) (fib (- n 2)))]))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n \
    \       [else (+ (fib (- n 1)) (fib (- n 2)))]))\n", "  (cond [(= n 0) 1]\n  \
    \      [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n", "  (cond [(= n\
    \ 0) 1]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (-\
    \ n 2)))]))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n        [else (+ (fib\
    \ (- n 1)) (fib (- n 2)))]))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n \
    \       [else (+ (fib (- n 1)) (fib (- n 2)))]))\n", "  (cond [(= n 0) 1]\n  \
    \      [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n", "  (cond [(= n\
    \ 0) 1]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n",
  "  (if (= n 0)\n      0\n      (+ (fib (- n 1))\n         (fib (- n 2)))))\n", " \
    \ (cond [(= n 0) 1]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib\
    \ (- n 2)))]))\n", "  (if (= n 0)\n      0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n",
  "  (if (= n 0)\n      0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
