name: HumanEval_121_solution
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty list of integers, return the sum of\
  \ all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5,\
  \ 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
  \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
  \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n \
  \   (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
  \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
  \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (car lst)\n        \
    \ (solution (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (car lst)\n\
    \         (solution (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n", "  (if (null? lst)\n      0\n   \
    \   (+ (car lst)\n         (solution (cdr lst)))))\n", "  (if (null? lst)\n  \
    \    0\n      (+ (car lst)\n         (solution (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (car lst)\n         (solution (cdr lst)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
