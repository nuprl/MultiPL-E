language: rkt
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n divisor)\n    (cond ((= n 0) divisor)\n          ((even? n) (helper (- n 1)\
    \ divisor))\n          (else (helper (- n 1) (+ divisor n)))))\n  (helper n 1))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:16:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:17:4

    actual:     17

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:18:4

    actual:     26

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:19:4

    actual:     2501

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:20:4

    actual:     626

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (/ n 2)\n         (if (= (largest_divisor (- n 1))\
    \ 0)\n             (/ n 2)\n             (largest_divisor (- n 1)))]\n       \
    \ [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_iukgg90.rkt:19:4

    actual:     1

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? (remainder n 2)) (quotient n 2)]\n        [else (largest_divisor\
    \ (quotient n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx_mt36yh.rkt:18:4

    actual:     12

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor(sub1 n))]\n        [else (* largest_divisor(sub1\
    \ n) (* n largest_divisor(sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper (quotient\
    \ n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:18:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:19:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:20:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? (remainder n 2)) (+ n 1)]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:14:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:15:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:16:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:17:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:18:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 0) divisor)\n          ((even? n) (loop (/\
    \ n 2) (+ divisor 1)))\n          (else (loop (/ n 2) divisor)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (/ n 2) (max\
    \ n)))\n          (else (loop (/ n 2) max)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4k5wqxax.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4k5wqxax.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4k5wqxax.rkt:17:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4k5wqxax.rkt:18:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4k5wqxax.rkt:19:4\n\neven?: contract violation\n  expected:\
    \ integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (if (= n 0)\n        max\n        (loop (quotient n 2)\n  \
    \            (if (even? n)\n                  (loop (quotient n 2)\n         \
    \               (max (max max n)))\n                  (loop (quotient n 2)\n \
    \                       (max n)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8d0fqgtu.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8d0fqgtu.rkt:21:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8d0fqgtu.rkt:22:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8d0fqgtu.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8d0fqgtu.rkt:24:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= count 0) n)\n          ((even? n) (helper (quotient\
    \ n 2) (add1 count)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:16:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:17:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:18:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:19:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:20:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (/ n 2))]\n        [else (* n\
    \ (largest_divisor (/ n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpktqj6q2o.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpktqj6q2o.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpktqj6q2o.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpktqj6q2o.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpktqj6q2o.rkt:18:4\n\neven?:\
    \ contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n divisor)\n    (cond ((= n 0) divisor)\n          ((even? n) (helper (sub1\
    \ n) (+ divisor 1)))\n          (else (helper (sub1 n) divisor))))\n  (helper\
    \ n 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9m_ztit2.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9m_ztit2.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9m_ztit2.rkt:18:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9m_ztit2.rkt:19:4

    actual:     51

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9m_ztit2.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (if (= n 0)\n        max\n        (loop (quotient n 2)\n  \
    \            (if (even? n)\n                  (if (> max n)\n                \
    \      max\n                      (loop (quotient n 2)\n                     \
    \       max))\n                  (loop (quotient n 2)\n                      \
    \  max))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:22:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:23:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:24:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:25:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:26:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n div)\n    (cond ((= n 0) div)\n          ((even? n) (helper (- n 1) div))\n\
    \          (else (helper (- n 1) (+ div n)))))\n  (helper n 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:16:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:17:4

    actual:     16

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:18:4

    actual:     25

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:19:4

    actual:     2500

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:20:4

    actual:     625

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper (quotient\
    \ n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:18:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:19:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:20:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= count 0) n)\n          ((even? n) (helper (quotient\
    \ n 2) (add1 count)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:16:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:17:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:18:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:19:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:20:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (cond [(= (modulo n 2) 0) (+ n 1)]\n             \
    \             [else (largest_divisor (- n 1))])]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprl19bpg0.rkt:15:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprl19bpg0.rkt:16:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprl19bpg0.rkt:17:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprl19bpg0.rkt:18:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprl19bpg0.rkt:19:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ 1 (largest_divisor\
    \ (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_dblbj9c.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_dblbj9c.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_dblbj9c.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (if (= n 0)\n        max\n        (loop (quotient n 2)\n  \
    \            (if (even? n)\n                  (if (> max n)\n                \
    \      max\n                      (loop (quotient n 2)\n                     \
    \       max))\n                  (loop (quotient n 2)\n                      \
    \  max))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:22:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:23:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:24:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:25:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:26:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (quotient\
    \ n 2) (+ divisor 1)))\n          (else (loop (quotient n 2) divisor)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:17:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:18:4

    actual:     5

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:19:4

    actual:     4

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor(sub1 n))]\n        [else (* largest_divisor(sub1\
    \ n) (* n largest_divisor(sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n acc)\n    (cond ((= n 0) acc)\n          ((even? n) (helper (- n 1) (cons\
    \ n acc)))\n          (else (helper (- n 1) acc))\n          ))\n  (helper n '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpavddwq4f.rkt:17:4\n\
    actual:     '(2)\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpavddwq4f.rkt:18:4\nactual:\
    \     '(2 4 6)\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpavddwq4f.rkt:19:4\nactual:     '(2\
    \ 4 6 8 10)\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpavddwq4f.rkt:20:4\nactual:\n  '(2\n\
    \    4\n    6\n    8\n    10\n    12\n    14\n    16\n    18\n    20\n    22\n\
    \    24\n    26\n    28\n    30\n    32\n    34\n    36\n    38\n    40\n    42\n\
    \    44\n    46\n    48\n    50\n    52\n    54\n    56\n    58\n    60\n    62\n\
    \    64\n    66\n    68\n    70\n    72\n    74\n    76\n    78\n    80\n    82\n\
    \    84\n    86\n    88\n    90\n    92\n    94\n    96\n    98\n    100)\nexpected:\
    \   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpavddwq4f.rkt:21:4\nactual:\n  '(2 4 6 8 10 12 14 16 18 20\
    \ 22 24 26 28 30 32 34 36 38 40 42 44 46 48)\nexpected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond [(= n 1) count]\n          [(even? n) (helper (quotient\
    \ n 2) (+ count 1))]\n          [else (helper (quotient n 2) count)]\n       \
    \   ))\n  (helper n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp13imrffo.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp13imrffo.rkt:18:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp13imrffo.rkt:19:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp13imrffo.rkt:20:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp13imrffo.rkt:21:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor(sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdbhwpkbb.rkt:13:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdbhwpkbb.rkt:14:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpdbhwpkbb.rkt:15:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdbhwpkbb.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdbhwpkbb.rkt:17:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028288
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n div)\n    (cond ((= n 0) div)\n          ((even? n) (helper (- n 1) div))\n\
    \          (else (helper (- n 1) (+ div n)))))\n  (helper n 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:16:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:17:4

    actual:     16

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:18:4

    actual:     25

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:19:4

    actual:     2500

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:20:4

    actual:     625

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ (largest_divisor\
    \ (- n 1)) (largest_divisor (- n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:15:4

    actual:     8

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:16:4

    actual:     16

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660028292
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper (quotient\
    \ n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:18:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:19:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:20:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor(sub1 n))]\n        [else (* largest_divisor(sub1\
    \ n) (* n largest_divisor(sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper (quotient\
    \ n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:18:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:19:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:20:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) 1)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u_w33eq.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u_w33eq.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u_w33eq.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n result)\n    (cond ((= n 0) result)\n          ((even? n) (helper (sub1 n)\
    \ (cons n result)))\n          (else (helper (sub1 n) (cons (quotient n 2) result))))\n\
    \  (helper n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp4rf8s01u.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 11\n  context...:\n  \
    \ /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028288
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor(sub1 n))]\n        [else (* largest_divisor(sub1\
    \ n) (* n largest_divisor(sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ol2i9vk.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_ol2i9vk.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ol2i9vk.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ol2i9vk.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_ol2i9vk.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper (quotient\
    \ n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:18:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:19:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:20:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) n)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuhtre82b.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuhtre82b.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuhtre82b.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) 1)\n        ((even? n) (largest_divisor (/ n 2)))\n        (else (+ 1 (largest_divisor\
    \ (/ n 2))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp21j4rsz5.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp21j4rsz5.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp21j4rsz5.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp21j4rsz5.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp21j4rsz5.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ (largest_divisor\
    \ (- n 1)) (largest_divisor (- n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:15:4

    actual:     8

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:16:4

    actual:     16

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660028292
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor(sub1 n))]\n        [else (* largest_divisor(sub1\
    \ n) (* n largest_divisor(sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond\n      [(= n 1) count]\n      [(even? n) (helper (/ n 2)\
    \ (+ count 1))]\n      [else (helper (/ n 2) count)]))\n  (helper n 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuensi68q.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuensi68q.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuensi68q.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuensi68q.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuensi68q.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor(sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdbhwpkbb.rkt:13:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdbhwpkbb.rkt:14:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpdbhwpkbb.rkt:15:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdbhwpkbb.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdbhwpkbb.rkt:17:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028288
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 0) divisor)\n          ((even? n) (loop (quotient\
    \ n 2) (+ divisor 1)))\n          (else (loop (quotient n 2) divisor)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbqhu5gk7.rkt:17:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbqhu5gk7.rkt:18:4

    actual:     5

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbqhu5gk7.rkt:19:4

    actual:     4

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor(sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp676tv2t2.rkt:13:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp676tv2t2.rkt:14:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp676tv2t2.rkt:15:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp676tv2t2.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp676tv2t2.rkt:17:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpws2ldxjq.rkt:7:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028288
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (/ n 2)\n         (if (> n 0)\n             (largest_divisor\
    \ (- n 1))\n             (largest_divisor (- n 2)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7bl72rv7.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7bl72rv7.rkt:18:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7bl72rv7.rkt:19:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7bl72rv7.rkt:20:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7bl72rv7.rkt:21:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (/ n 2) max))\n\
    \          (else (loop (/ n 2) (max n))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:15:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:16:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcgd6ib5j.rkt:17:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:18:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:19:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) 1)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u_w33eq.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u_w33eq.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u_w33eq.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n acc)\n    (cond ((= n 0) acc)\n          ((even? n) (helper (- n 1) (cons\
    \ n acc)))\n          (else (helper (- n 1) acc))))\n  (helper n '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1a9542z.rkt:16:4\n\
    actual:     '(2)\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1a9542z.rkt:17:4\nactual:\
    \     '(2 4 6)\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc1a9542z.rkt:18:4\nactual:     '(2\
    \ 4 6 8 10)\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc1a9542z.rkt:19:4\nactual:\n  '(2\n\
    \    4\n    6\n    8\n    10\n    12\n    14\n    16\n    18\n    20\n    22\n\
    \    24\n    26\n    28\n    30\n    32\n    34\n    36\n    38\n    40\n    42\n\
    \    44\n    46\n    48\n    50\n    52\n    54\n    56\n    58\n    60\n    62\n\
    \    64\n    66\n    68\n    70\n    72\n    74\n    76\n    78\n    80\n    82\n\
    \    84\n    86\n    88\n    90\n    92\n    94\n    96\n    98\n    100)\nexpected:\
    \   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpc1a9542z.rkt:20:4\nactual:\n  '(2 4 6 8 10 12 14 16 18 20\
    \ 22 24 26 28 30 32 34 36 38 40 42 44 46 48)\nexpected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ (largest_divisor\
    \ (- n 1)) (largest_divisor (- n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:15:4

    actual:     8

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:16:4

    actual:     16

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660028292
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n divisor)\n    (cond ((= n 0) divisor)\n          ((even? n) (helper (- n 1)\
    \ divisor))\n          (else (helper (- n 1) (+ divisor n)))))\n  (helper n 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:16:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:17:4

    actual:     16

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:18:4

    actual:     25

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:19:4

    actual:     2500

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:20:4

    actual:     625

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (/\
    \ n 2) (+ divisor 1)))\n          (else (loop (/ n 2) divisor)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4m6umwjr.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4m6umwjr.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4m6umwjr.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4m6umwjr.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4m6umwjr.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ n (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp5ablo9y_.rkt:7:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028288
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? (remainder n 2)) (+ n 1)]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:14:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:15:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:16:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:17:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:18:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwjmybjd.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkwjmybjd.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwjmybjd.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwjmybjd.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkwjmybjd.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n div)\n    (if (= div 0)\n        n\n        (helper (quotient n div) (quotient\
    \ div 2)))\n    (helper (quotient n 2) (quotient 2 2))))\n  (helper n 2))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpeelxtd1b.rkt:10:14: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028288
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ 1 (largest_divisor\
    \ (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_dblbj9c.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_dblbj9c.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_dblbj9c.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= count 0) n)\n          ((even? n) (helper (quotient\
    \ n 2) (add1 count)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:16:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:17:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:18:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:19:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjdugoy2.rkt:20:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n result)\n    (cond ((= n 0) result)\n          ((even? n) (helper (- n 1)\
    \ result))\n          (else (helper (- n 1) (max result n))))))\n  (helper n 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmps2mgj7ik.rkt:9:14: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028288
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) n)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (largest_divisor\
    \ (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpktuho8e6.rkt:16:4

    actual:     1

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpktuho8e6.rkt:17:4

    actual:     1

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpktuho8e6.rkt:18:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? (remainder n 2)) (+ n 1)]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:14:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:15:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:16:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:17:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:18:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ (largest_divisor\
    \ (- n 1)) (largest_divisor (- n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:15:4

    actual:     8

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:16:4

    actual:     16

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660028292
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (/ n 2) max))\n\
    \          (else (loop (/ n 2) (max n))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:15:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:16:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcgd6ib5j.rkt:17:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:18:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:19:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) n)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ (largest_divisor\
    \ (- n 2)) (/ n 2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjfdiif0r.rkt:14:4

    actual:     5/2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjfdiif0r.rkt:15:4

    actual:     17/2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjfdiif0r.rkt:16:4

    actual:     13

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjfdiif0r.rkt:17:4

    actual:     2501/2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjfdiif0r.rkt:18:4

    actual:     313

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) n)\n        ((even? n) (largest_divisor (/ n 2)))\n        (else (largest_divisor\
    \ (/ n 2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n divisor)\n    (cond ((= n 0) (if (= divisor 0) n divisor))\n          ((even?\
    \ n) (helper (- n 1) (+ divisor 1)))\n          (else (helper (- n 1) divisor)))))\n\
    \  (helper n 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp0z4c4lxe.rkt:9:14: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028288
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 2))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028293
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (if (= count 0)\n        n\n        (helper (quotient n count)\
    \ (sub1 count))))\n  (helper n n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:18:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:19:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:20:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n div)\n    (cond ((= n 0) div)\n          ((even? n) (helper (sub1 n) (+ div\
    \ 2)))\n          (else (helper (sub1 n) div))))\n  (helper n 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppb8xypyf.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppb8xypyf.rkt:17:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppb8xypyf.rkt:18:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppb8xypyf.rkt:19:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppb8xypyf.rkt:20:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa1rjbr6l.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpa1rjbr6l.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa1rjbr6l.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa1rjbr6l.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpa1rjbr6l.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028290
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor(sub1 n))])\n        (else (largest_divisor(sub1\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppdepvlsg.rkt:7:8: else: not allowed as an expression\n  in: (else\
    \ (largest_divisor (sub1 n)))\n  location...:\n   /tmp/tmppdepvlsg.rkt:7:8\n"
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper (quotient\
    \ n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:18:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:19:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:20:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (quotient\
    \ n 2) (+ divisor 1)))\n          (else (loop (quotient n 2) divisor)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:17:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:18:4

    actual:     5

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:19:4

    actual:     4

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor(sub1 n))])\n        (else (+\
    \ 1 (largest_divisor (sub1 n))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpzc8gzuts.rkt:7:48: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) n)\n        ((even? n) (largest_divisor (/ n 2)))\n        (else (largest_divisor\
    \ (/ n 2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper (quotient\
    \ n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:18:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:19:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:20:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (/ n 2) max))\n\
    \          (else (loop (/ n 2) (max n))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:15:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:16:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcgd6ib5j.rkt:17:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:18:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:19:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n divisor)\n    (if (= n 0)\n        divisor\n        (helper (- n 1) (quotient\
    \ n divisor))))\n  (helper n 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk4sf5bob.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk4sf5bob.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpk4sf5bob.rkt:18:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpk4sf5bob.rkt:19:4


    quotient: division by zero

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk4sf5bob.rkt:20:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (cond [(even?\
    \ (remainder n 2)) acc]\n                             [(even? n) (helper n acc)]\n\
    \                             [else (helper n acc)]))))\n  (helper n '()))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028294
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp3mrany_3.rkt:7:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (/ n 2))\n        (else (+ 1 (largest_divisor (- n\
    \ 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgqhlcpog.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgqhlcpog.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgqhlcpog.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (/ n 2) max))\n\
    \          (else (loop (/ n 2) (max n))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:15:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:16:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcgd6ib5j.rkt:17:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:18:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:19:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond\n      [(= n 1) count]\n      [(even? n) (helper (quotient\
    \ n 2) (+ count 1))]\n      [else (helper (quotient n 2) count)]\n    ))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgvs4mbq0.rkt:18:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgvs4mbq0.rkt:19:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgvs4mbq0.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgvs4mbq0.rkt:21:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgvs4mbq0.rkt:22:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ 1 (largest_divisor\
    \ (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_dblbj9c.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_dblbj9c.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_dblbj9c.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ (largest_divisor\
    \ (- n 1)) (largest_divisor (- n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:15:4

    actual:     8

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:16:4

    actual:     16

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660028292
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 0) divisor)\n          ((even? n) (loop (/\
    \ n 2) (+ divisor 1)))\n          (else (loop (/ n 2) divisor)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (quotient n\
    \ 2) max))\n          (else (loop (quotient n 2) (max n))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hj5dd4y.rkt:15:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3hj5dd4y.rkt:16:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3hj5dd4y.rkt:17:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hj5dd4y.rkt:18:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3hj5dd4y.rkt:19:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwjmybjd.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkwjmybjd.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwjmybjd.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwjmybjd.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkwjmybjd.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? (remainder n 2)) (+ n 1)]\n        [else (largest_divisor\
    \ (+ n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:14:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:15:4

    actual:     9

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:16:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:17:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:18:4

    actual:     51

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (/ n 2) max))\n\
    \          (else (loop (/ n 2) (max n))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:15:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:16:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcgd6ib5j.rkt:17:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:18:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcgd6ib5j.rkt:19:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor(sub1 n))])\n        (else (largest_divisor\
    \ (sub1 n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvy8n7n23.rkt:7:8: else: not allowed as an expression\n  in: (else\
    \ (largest_divisor (sub1 n)))\n  location...:\n   /tmp/tmpvy8n7n23.rkt:7:8\n"
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (if (= count 0)\n        n\n        (helper (quotient n count)\
    \ (sub1 count))))\n  (helper n n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:18:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:19:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:20:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (quotient n\
    \ 2) max))\n          (else (loop (quotient n 2) (max n))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hj5dd4y.rkt:15:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3hj5dd4y.rkt:16:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3hj5dd4y.rkt:17:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hj5dd4y.rkt:18:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3hj5dd4y.rkt:19:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (quotient\
    \ n 2) (+ divisor 1)))\n          (else (loop (quotient n 2) divisor)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:17:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:18:4

    actual:     5

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:19:4

    actual:     4

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kkbido8.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n div)\n    (cond ((= n 0) div)\n          ((even? n) (helper (- n 1) div))\n\
    \          (else (helper (- n 1) (+ div n)))))\n  (helper n 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:16:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:17:4

    actual:     16

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:18:4

    actual:     25

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:19:4

    actual:     2500

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:20:4

    actual:     625

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n result)\n    (cond ((= n 0) result)\n          ((even? n) (helper (- n 1)\
    \ result))\n          (else (helper (- n 1) (max result n))))\n  (helper n 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpram7fxp5.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 11\n  context...:\n  \
    \ /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ddgrp1r.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ddgrp1r.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwjmybjd.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkwjmybjd.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwjmybjd.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwjmybjd.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkwjmybjd.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (quotient\
    \ n 2) (+ divisor 1)))\n          (else (loop (quotient n 2) divisor)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:17:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:18:4

    actual:     5

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:19:4

    actual:     4

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (if (= count 0)\n        n\n        (helper (quotient n count)\
    \ (- count 1))))\n  (helper n n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:18:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:19:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:20:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 2))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028293
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 0))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (/\
    \ n 2) (+ divisor 1)))\n          (else (loop (/ n 2) divisor)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4itqa69u.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4itqa69u.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4itqa69u.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4itqa69u.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4itqa69u.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n divisor)\n    (cond ((= n 0) (if (= divisor 0) n divisor))\n          ((even?\
    \ n) (helper (sub1 n) (+ divisor 1)))\n          (else (helper (sub1 n) divisor))))\n\
    \  (helper n 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiohegwp4.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiohegwp4.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiohegwp4.rkt:18:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiohegwp4.rkt:19:4

    actual:     51

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiohegwp4.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (quotient\
    \ n 2) (+ divisor 1)))\n          (else (loop (quotient n 2) divisor)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:17:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:18:4

    actual:     5

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:19:4

    actual:     4

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) 1)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u_w33eq.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u_w33eq.rkt:15:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u_w33eq.rkt:18:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n div)\n    (cond ((= n 0) div)\n          ((even? n) (helper (- n 1) div))\n\
    \          (else (helper (- n 1) (+ div n)))))\n  (helper n 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:16:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:17:4

    actual:     16

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:18:4

    actual:     25

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:19:4

    actual:     2500

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquc63kj_.rkt:20:4

    actual:     625

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? (remainder n 2)) (+ n 1)]\n        [else (largest_divisor\
    \ (+ n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:14:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:15:4

    actual:     9

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:16:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:17:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmp58fs_8.rkt:18:4

    actual:     51

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 2))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028293
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n divisor)\n    (cond ((= n 0) divisor)\n          ((even? n) (helper (- n 1)\
    \ divisor))\n          (else (helper (- n 1) (+ divisor n)))))\n  (helper n 1))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:16:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:17:4

    actual:     17

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:18:4

    actual:     26

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:19:4

    actual:     2501

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppok8_pjg.rkt:20:4

    actual:     626

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper (quotient\
    \ n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:18:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:19:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:20:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n divisor)\n    (cond ((= n 0) divisor)\n          ((even? n) (helper (- n 1)\
    \ divisor))\n          (else (helper (- n 1) (+ divisor n)))))\n  (helper n 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:16:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:17:4

    actual:     16

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:18:4

    actual:     25

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:19:4

    actual:     2500

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55dbsr3h.rkt:20:4

    actual:     625

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper (quotient\
    \ n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:18:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:19:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps0bdyl3j.rkt:20:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond ((= n\
    \ 1) n)\n        ((even? n) (largest_divisor (/ n 2)))\n        (else (largest_divisor\
    \ (/ n 2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_agho3br.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (cond ((= count 0) n)\n          ((even? n) (helper (quotient\
    \ n count) (add1 count)))\n          (else (helper (quotient n count) (add1 count)))))\n\
    \  (helper n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg8uoefky.rkt:16:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg8uoefky.rkt:17:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg8uoefky.rkt:18:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg8uoefky.rkt:19:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg8uoefky.rkt:20:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n result)\n    (cond ((= n 0) result)\n          ((even? n) (helper (sub1 n)\
    \ (cons n result)))\n          (else (helper (sub1 n) (cons (quotient n 2) result))))\n\
    \  (helper n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp4rf8s01u.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 11\n  context...:\n  \
    \ /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028288
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 0) 0]\n        [(even? n) (* n largest_divisor)]\n        [else (+ 1 (largest_divisor\
    \ (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqfdrilqe.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqfdrilqe.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqfdrilqe.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqfdrilqe.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqfdrilqe.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ (largest_divisor\
    \ (- n 1)) (largest_divisor (- n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:15:4

    actual:     8

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:16:4

    actual:     16

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660028292
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? (remainder n 2)) n]\n        [else (largest_divisor (quotient\
    \ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl0kkjsqb.rkt:16:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl0kkjsqb.rkt:17:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl0kkjsqb.rkt:18:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? (remainder n 2)) (+ n 1)]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:14:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:15:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:16:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:17:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf2xdyw9n.rkt:18:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor(sub1 n))]\n        [else (* largest_divisor(sub1\
    \ n) (* n largest_divisor(sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtbt1yq2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprtbt1yq2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 0) divisor)\n          ((even? n) (loop (/\
    \ n 2) (+ divisor 1)))\n          (else (loop (/ n 2) divisor)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8s8dzmq.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else (+ (largest_divisor\
    \ (- n 1)) (largest_divisor (- n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:14:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:15:4

    actual:     8

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe00yfo0q.rkt:16:4

    actual:     16

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660028292
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (max 0))\n    (if (= n 0)\n        max\n        (loop (quotient n 2)\n  \
    \            (if (even? n)\n                  (if (> max n)\n                \
    \      max\n                      (loop (quotient n 2)\n                     \
    \       max))\n                  (loop (quotient n 2)\n                      \
    \  max))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:22:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:23:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:24:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:25:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4rfzgqr.rkt:26:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 1))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (quotient\
    \ n 2) (+ divisor 1)))\n          (else (loop (quotient n 2) divisor)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:17:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:18:4

    actual:     5

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp37fxlp0.rkt:19:4

    actual:     4

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (if (= count 0)\n        n\n        (helper (quotient n count)\
    \ (- count 1))))\n  (helper n n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:18:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:19:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcizs99hr.rkt:20:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n\
    \ (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:14:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:15:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:16:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwzg9jv2.rkt:17:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwzg9jv2.rkt:18:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (largest_divisor (/ n 2))]\n        [else (largest_divisor\
    \ (/ n 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:14:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh1uqj_e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n result)\n    (cond ((= n 1) result)\n          ((even? n) (helper (quotient\
    \ n 2) result))\n          (else (helper (quotient n 2) (max result n))))))\n\
    \  (helper n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp5cwexs1m.rkt:9:14: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:14:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:15:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:16:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk1aj8hxi.rkt:17:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk1aj8hxi.rkt:18:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (if (= count 0)\n        n\n        (helper (quotient n count)\
    \ (sub1 count))))\n  (helper n n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:18:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:19:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbpubar5v.rkt:20:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (helper\
    \ n count)\n    (if (= count 0)\n        n\n        (helper (quotient n count)\
    \ (sub1 count))))\n  (helper n 20))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv51vjk8q.rkt:16:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv51vjk8q.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv51vjk8q.rkt:18:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv51vjk8q.rkt:19:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv51vjk8q.rkt:20:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ((n\
    \ n) (divisor 0))\n    (cond ((= n 0) divisor)\n          ((even? n) (loop (/\
    \ n 2) (+ divisor 1)))\n          (else (loop (/ n 2) divisor)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwvyrfa5.rkt:15:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwvyrfa5.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwvyrfa5.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwvyrfa5.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwvyrfa5.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660028290
