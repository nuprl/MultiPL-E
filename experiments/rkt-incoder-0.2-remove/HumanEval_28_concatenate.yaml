name: HumanEval_28_concatenate
language: rkt
prompt: "#lang racket\n\n;; Concatenate list of strings into a single string\n(define\
  \ (concatenate strings)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
  \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
  \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\" \"\
  z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
completions: ["  (if (null? strings)\n      '()\n      (append (first strings) (concatenate\
    \ (rest strings)))))\n", "  (if (null? strings)\n      '()\n      (append (string-append\
    \ (first strings) (concatenate (rest strings))))))\n", "  (if (null? strings)\
    \ \"\"\n      (append (string-join (map string strings) \"\")\n              \"\
    \")))\n", "  (if (null? strings)\n      '()\n      (append (first strings)\n \
    \             (concatenate (rest strings)))))\n", "  (if (null? strings)\n   \
    \   '()\n      (append (string-join (first strings) #\\Space)\n              (concatenate\
    \ (rest strings)))))\n", "  (if (null? strings)\n      '()\n      (append (first\
    \ strings)\n              (concatenate (rest strings)))))\n", "  (if (null? strings)\n\
    \      '()\n      (append (string-append (string-ref (string-ref strings 0)) (string-ref\
    \ strings 1)))))\n", "  (if (null? strings)\n      '()\n      (append (first strings)\n\
    \              (concatenate (rest strings)))))\n", "  (if (null? strings)\n  \
    \    '()\n      (cons (car strings)\n            (concatenate (cdr strings)))))\n",
  "  (if (null? strings)\n      '()\n      (append (string-join (first strings) #\\\
    Space)\n              (concatenate (rest strings)))))\n", "  (if (null? strings)\n\
    \      '()\n      (append (first strings) (concatenate (rest strings)))))\n",
  "  (if (null? strings)\n      '()\n      (append (string-append (first strings))\
    \ \n              (concatenate (rest strings)))))\n", "  (if (null? strings) \"\
    \"\n      (cons (car strings)\n            (concatenate (cdr strings)))))\n",
  "  (if (null? strings)\n      '()\n      (append (first strings)\n             \
    \ (concatenate (rest strings)))))\n", "  (if (null? strings)\n      '()\n    \
    \  (append (string-join (first strings) #\\Space)\n              (concatenate\
    \ (rest strings)))))\n", "  (if (null? strings)\n      '()\n      (append (first\
    \ strings)\n              (concatenate (rest strings)))))\n", "  (if (null? strings)\n\
    \      '()\n      (append (first strings) (concatenate (rest strings)))))\n",
  "  (if (null? strings)\n      '()\n      (append (first strings) (concatenate (rest\
    \ strings)))))\n", "  (if (null? strings)\n      '()\n      (append (first strings)\
    \ (concatenate (rest strings)))))\n", "  (if (null? strings)\n      '()\n    \
    \  (append (string-append (car strings) (concatenate (cdr strings))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
