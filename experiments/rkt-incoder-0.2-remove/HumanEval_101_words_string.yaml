name: HumanEval_101_words_string
language: rkt
prompt: "#lang racket\n\n;; You will be given a string of words separated by commas\
  \ or spaces. Your task is\n;; to split the string into words and return an array\
  \ of the words.\n;; For example:\n(define (words_string s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_string))\n\
  \    (check-equal? (candidate \"Hi, my name is John\") (list \"Hi\" \"my\" \"name\"\
  \ \"is\" \"John\"))\n    (check-equal? (candidate \"One, two, three, four, five,\
  \ six\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\"))\n    (check-equal?\
  \ (candidate \"Hi, my name\") (list \"Hi\" \"my\" \"name\"))\n    (check-equal?\
  \ (candidate \"One,, two, three, four, five, six,\") (list \"One\" \"two\" \"three\"\
  \ \"four\" \"five\" \"six\"))\n    (check-equal? (candidate \"\") (list ))\n   \
  \ (check-equal? (candidate \"ahmed     , gamal\") (list \"ahmed\" \"gamal\"))\n\
  ))\n\n(test-humaneval)"
completions: ["  (let loop ((s s)\n             (result '()))\n    (if (string-empty?\
    \ s)\n        result\n        (loop (substring s 0 (string-length s))\n      \
    \        (cons (substring s 0 (string-length s)) result)))))\n", "  (let loop\
    \ ((s s)\n             (acc '()))\n    (if (string-empty? s)\n        (reverse\
    \ acc)\n        (loop (substring s 0 (string-length s))\n               (cons\
    \ (substring s 0 (string-length s)) acc)))))\n", "  (let loop ((s s)\n       \
    \      (acc '()))\n    (if (string-empty? s)\n        (reverse acc)\n        (loop\
    \ (substring s 0 (string-length s))\n               (cons (substring s 0 1)\n\
    \                     (loop (substring s (+ 1 \n                             \
    \              (string-length s))\n                             (cons (substring\
    \ s (+ 1 \n                                                   (string-length s))\n\
    \                                        acc))))))))\n", "  (let ([chars (string->list\
    \ (string-split s #\\space))])\n    (map string->list chars)))\n", "  (let loop\
    \ ((s s)\n             (acc '()))\n    (cond\n      [(empty? s) (reverse acc)]\n\
    \      [(char=? (first s) #\\space) (loop (rest s) (cons (first s) acc))]\n  \
    \    [else (loop (rest s) (cons (first s) acc))])))\n", "  (let loop ((s s)\n\
    \             (result '()))\n    (if (empty? s)\n        result\n        (loop\
    \ (rest s)\n              (cons (first s)\n                    (loop (rest s)\n\
    \                          result))))))\n", "  (let ([words (string-split s #\"\
    ,\")])\n    (map string->list words)))\n", "  (let loop ((s s)\n             (acc\
    \ '()))\n    (if (string-empty? s)\n        acc\n        (loop (substring s 0\
    \ (string-length s))\n              (cons (substring s 0 (string-length s)) acc)))))\n",
  "  (let ([words (string-split s #\\space)])\n    (map string->symbol (map string->string\
    \ words))))\n", "  (let loop ((s s)\n             (acc '()))\n    (if (empty?\
    \ s)\n        acc\n        (loop (rest s)\n              (cons (first s) acc)))))\n",
  "  (let ([words (string-split s #\",\" #\" \")])\n    (map string words)))\n", " \
    \ (let ([chars (string->list s)])\n    (if (null? chars)\n        '()\n      \
    \  (append (map (lambda (c) (if (char=? c #\\Space) '() c)) chars)\n         \
    \       (words_string (substring s 0 (string-length s)))\n                )\n\
    \        )\n    )\n)\n", "  (let ([words (string-split s #\",\" #\" \")])\n  \
    \  (map string words)))\n", "  (let ([words (string-split s #\",\" #\" \")])\n\
    \    (map string words)))\n", "  (let ([words (string-split s #\",\")])\n    (map\
    \ string->list words)))\n", "  (let loop ((s s)\n             (words ()))\n  \
    \  (cond ((null? s)\n           (reverse words))\n          ((char=? (car s) #\\\
    space)\n           (loop (cdr s)\n                 (cons (car s) words))\n   \
    \        (loop (cdr s)\n                 (cons (car s) words))))\n    (loop (cdr\
    \ s)\n          (cons (car s) words))))\n", "  (let loop ((s s)\n            \
    \ (acc '()))\n    (cond ((null? s) (list acc))\n          ((char=? (car s) ',')\
    \ (loop (cdr s) (cons (car s) acc)))\n          ((char=? (car s) ' ') (loop (cdr\
    \ s) (cons (car s) acc)))\n          (else (loop (cdr s) (cons (car s) acc))))))\n",
  "  (let ([chars (string->list (string-split s #\\space))])\n    (map string->list\
    \ chars)))\n", "  (let ([chars (string->list (string-split s #\\space))])\n  \
    \  (map (lambda (c) (substring chars 0 c)) (length chars))))\n", "  (let ([words\
    \ (string-split s #\",\")])\n    (map string->symbol (map string->symbol (map\
    \ string->symbol words)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
