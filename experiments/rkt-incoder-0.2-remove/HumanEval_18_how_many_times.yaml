name: HumanEval_18_how_many_times
language: rkt
prompt: "#lang racket\n\n;; Find how many times a given substring can be found in\
  \ the original string. Count overlaping cases.\n(define (how_many_times string substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
  \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\"\
  \ \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal?\
  \ (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
completions: ["  (define (helper string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(equal? (first string) substring) (helper (rest string) substring\
    \ (+ count 1))]\n          [else (helper (rest string) substring (+ count 1))]))\n\
    \  (helper string substring 0))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (first string) substring) 1]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (define (count-overlapping-cases substring string)\n    (cond\n      [(empty?\
    \ string) 0]\n      [(equal? (first string) substring) (+ 1 (count-overlapping-cases\
    \ (rest string) string))]\n      [else (+ 1 (count-overlapping-cases (rest string)\
    \ string))]))\n  (count-overlapping-cases substring string))\n", "  (define (helper\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(equal?\
    \ (first string) substring) (helper (rest string) substring (+ count 1))]\n  \
    \        [else (helper (rest string) substring (+ count 1))]))\n  (helper string\
    \ substring 0))\n", "  (cond [(empty? string) 0]\n        [(equal? (first string)\
    \ substring) 1]\n        [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let ((count 0))\n    (for-each (lambda (c)\n                (when (string=?\
    \ c substring)\n                  (set! count (add1 count))))\n              string))\n\
    \  count)\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n\
    \          for j from 0 to (string-length substring)\n          when (string=\
    \ (string-ref string i) (string-ref substring j))\n          do (set! count (+\
    \ count 1))\n          finally (return count))\n    (if (< count 0) 0 count)))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (car string) substring) (loop (+ i 1) (+ count 1))]\n\
    \      [else (loop (+ i 1) (+ count (+ 1 (how_many_times (cdr string) substring))))])))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times string substring))]))\n", "  (cond [(empty? string) 0]\n   \
    \     [(equal? (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (define\
    \ (how_many_times-helper string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (car string) substring) (how_many_times-helper (cdr string)\
    \ substring (+ count 1))]\n      [else (how_many_times-helper (cdr string) substring\
    \ (+ count 1))]))\n  (how_many_times-helper string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(equal? (first string) substring) (helper (rest string) substring (+ count\
    \ 1))]\n      [else (helper (rest string) substring (+ count 1))]))\n  (helper\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\
    \ [(empty? string) count]\n          [(equal? substring (car string)) (helper\
    \ (cdr string) substring (+ count 1))]\n          [else (helper (cdr string) substring\
    \ (+ count 1))]))\n  (helper string substring 0))\n", "  (let ((count 0))\n  \
    \  (for-each (lambda (c)\n                (if (string-match substring c)\n   \
    \                 (set! count (+ count 1))\n                    count))\n    \
    \          string))\n  count)\n", "  (define (helper string substring count)\n\
    \    (cond [(empty? string) count]\n          [(equal? (car string) substring)\
    \ (helper (cdr string) substring (+ count 1))]\n          [else (helper (cdr string)\
    \ substring (+ count 1))]))\n  (helper string substring 0))\n", "  (let ((count\
    \ 0))\n    (for-each (lambda (c)\n                (if (string-match substring\
    \ c)\n                    (set! count (add1 count))\n                    count))\n\
    \              string))\n  count)\n", "  (define (helper string substring count)\n\
    \    (cond [(empty? string) count]\n          [(equal? (first string) substring)\
    \ (helper (rest string) substring (+ count 1))]\n          [else (helper (rest\
    \ string) substring (+ count 1))]))\n  (helper string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (cond [(empty? string) count]\n       \
    \   [(equal? (first string) substring) (helper (rest string) substring (+ count\
    \ 1))]\n          [else (helper (rest string) substring (+ count 1))]))\n  (helper\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(equal? (car string) substring) (helper\
    \ (cdr string) substring (+ count 1))]\n      [else (helper (cdr string) substring\
    \ (+ count 1))]))\n  (helper string substring 0))\n", "  (define (helper string\
    \ substring count)\n    (if (string-empty? string)\n        count\n        (helper\
    \ (substring string) (substring string) (+ count 1))))\n  (helper string substring\
    \ 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
