name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n(define (rolling_max\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n\
    \    (cond\n      [(empty? numbers) max-so-far]\n      [(>= (first numbers) max-so-far-so-far)\
    \ (rolling_max-helper (rest numbers) max-so-far max-so-far-so-far)]\n      [else\
    \ (rolling_max-helper (rest numbers) (first numbers) max-so-far-so-far)]))\n \
    \ (rolling_max-helper numbers #f #f))\n", "  (if (null? numbers)\n      '()\n\
    \      (let loop ((numbers numbers)\n                 (max '()))\n        (if\
    \ (null? (cdr numbers))\n            max\n            (loop (cdr numbers)\n  \
    \                (cons (max (car numbers)) max)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let loop ((numbers numbers)\n                 (max '()))\n\
    \        (if (null? (rest numbers))\n            max\n            (loop (rest\
    \ numbers)\n                  (cons (max max) max))))))\n", "  (define (rolling_max-helper\
    \ numbers max-so-far max-so-far-so-far)\n    (cond ((null? numbers) max-so-far)\n\
    \          ((> (car numbers) max-so-far-so-far) (rolling_max-helper numbers (car\
    \ numbers) max-so-far))\n          (else (rolling_max-helper (cdr numbers) max-so-far\
    \ (car numbers)))))\n  (rolling_max-helper numbers 0 0))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            max\n            (if (> max roll)\n   \
    \             max\n                (rolling_max (cdr roll)))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let loop ((numbers numbers)\n                 (max\
    \ '()))\n        (if (null? numbers)\n            max\n            (loop (rest\
    \ numbers)\n                  (cons (max numbers) max)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n\
    \            (list max)\n            (let ((next-max (car numbers)))\n       \
    \       (if (> max next-max)\n                  (list max)\n                 \
    \ (list next-max (rolling_max (cdr numbers)))))))\n        (rolling_max (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max-so-far #f)\n                 (max-so-far-so-far (car numbers))\n\
    \                 (max-so-far-so-far-so-far max-so-far))\n        (if (null? numbers)\n\
    \            (cons max-so-far max-so-far-so-far)\n            (loop (cdr numbers)\n\
    \                  (if (> max-so-far max-so-far-so-far)\n                    \
    \  max-so-far\n                      max-so-far-so-far)\n                  max-so-far-so-far))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            max\n         \
    \   (if (> (car roll) max)\n                (cons max roll)\n                (rolling_max\
    \ (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n      (let loop ((numbers\
    \ numbers)\n                 (max-so-far #f)\n                 (max-so-far-so-far\
    \ (car numbers))\n                 (max-so-far-so-far-so-far max-so-far))\n  \
    \      (if (null? numbers)\n            (cons max-so-far-so-far-so-far max-so-far-so-far)\n\
    \            (loop (cdr numbers)\n                  (if (> max-so-far max-so-far-so-far)\n\
    \                      max-so-far\n                      max-so-far-so-far)\n\
    \                  max-so-far-so-far-so-far))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)", "  (let loop ((numbers numbers)\n\
    \             (max 0))\n    (if (null? numbers)\n        max\n        (let ((number\
    \ (car numbers))\n              (max-list (cdr numbers)))\n          (if (null?\
    \ max-list)\n              max\n              (loop (cdr max-list)\n         \
    \           (max number)))))\n    max))\n", "  (define (rolling_max-helper numbers\
    \ max-so-far max-so-far-so-far)\n    (cond\n      [(empty? numbers) max-so-far]\n\
    \      [(< (first numbers) max-so-far-so-far) (rolling_max-helper (rest numbers)\
    \ max-so-far (first numbers))]\n      [else (rolling_max-helper (rest numbers)\
    \ max-so-far-so-far (first numbers))]))\n  (rolling_max-helper numbers 0 0))\n",
  "  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond\
    \ ((null? numbers) max-so-far)\n          ((< max-so-far max-so-far-so-far) (rolling_max-helper\
    \ numbers (car numbers) max-so-far))\n          (else (rolling_max-helper (cdr\
    \ numbers) max-so-far (max max-so-far max-so-far-so-far))))\n  (rolling_max-helper\
    \ numbers 0 0))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            max\n\
    \            (if (> max roll)\n                max\n                (rolling_max\
    \ (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         max\n            (let ((max (max max (car roll))))\n              (if\
    \ (null? roll)\n                  max\n                  (rolling_max (cdr roll)))))))\n",
  "  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond\
    \ [(empty? numbers) max-so-far]\n          [(> (first numbers) max-so-far) (rolling_max-helper\
    \ numbers (first numbers) max-so-far)]\n          [else (rolling_max-helper (rest\
    \ numbers) max-so-far max-so-far-so-far)]))\n  (rolling_max-helper numbers #f\
    \ #f))\n", "  (if (null? numbers)\n      '()\n      (let loop ((numbers (rest\
    \ numbers)) (max '()) (i 0))\n        (if (= i 0)\n            (cons max max)\n\
    \            (loop (rest numbers) (cons (max max) max) (add1 i))))))\n", "  (define\
    \ (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond [(empty?\
    \ numbers) max-so-far]\n          [(< (first numbers) max-so-far-so-far) (rolling_max-helper\
    \ numbers (first numbers) max-so-far)]\n          [else (rolling_max-helper (rest\
    \ numbers) max-so-far max-so-far-so-far)]))\n  (rolling_max-helper numbers #f\
    \ #f))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            (cons\
    \ max roll)\n            (if (> max roll)\n                (cons max roll)\n \
    \               (rolling_max (cdr roll)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
