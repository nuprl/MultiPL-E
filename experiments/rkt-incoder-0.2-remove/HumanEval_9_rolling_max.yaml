name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n(define (rolling_max\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n\
    \    (cond\n      [(empty? numbers) max-so-far]\n      [(>= (first numbers) max-so-far-so-far)\
    \ (rolling_max-helper (rest numbers) max-so-far max-so-far-so-far)]\n      [else\
    \ (rolling_max-helper (rest numbers) (first numbers) max-so-far-so-far)]))\n \
    \ (rolling_max-helper numbers #f #f))\n", "  (if (null? numbers)\n      '()\n\
    \      (let loop ((numbers numbers)\n                 (max '()))\n        (if\
    \ (null? (cdr numbers))\n            max\n            (loop (cdr numbers)\n  \
    \                (cons (max (car numbers)) max)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let loop ((numbers numbers)\n                 (max '()))\n\
    \        (if (null? (rest numbers))\n            max\n            (loop (rest\
    \ numbers)\n                  (cons (max max) max))))))\n", "  (define (rolling_max-helper\
    \ numbers max-so-far max-so-far-so-far)\n    (cond ((null? numbers) max-so-far)\n\
    \          ((> (car numbers) max-so-far-so-far) (rolling_max-helper numbers (car\
    \ numbers) max-so-far))\n          (else (rolling_max-helper (cdr numbers) max-so-far\
    \ (car numbers)))))\n  (rolling_max-helper numbers 0 0))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            max\n            (if (> max roll)\n   \
    \             max\n                (rolling_max (cdr roll)))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let loop ((numbers numbers)\n                 (max\
    \ '()))\n        (if (null? numbers)\n            max\n            (loop (rest\
    \ numbers)\n                  (cons (max numbers) max)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n\
    \            (list max)\n            (let ((next-max (car numbers)))\n       \
    \       (if (> max next-max)\n                  (list max)\n                 \
    \ (list next-max (rolling_max (cdr numbers)))))))\n        (rolling_max (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max-so-far #f)\n                 (max-so-far-so-far (car numbers))\n\
    \                 (max-so-far-so-far-so-far max-so-far))\n        (if (null? numbers)\n\
    \            (cons max-so-far max-so-far-so-far)\n            (loop (cdr numbers)\n\
    \                  (if (> max-so-far max-so-far-so-far)\n                    \
    \  max-so-far\n                      max-so-far-so-far)\n                  max-so-far-so-far))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            max\n         \
    \   (if (> (car roll) max)\n                (cons max roll)\n                (rolling_max\
    \ (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n      (let loop ((numbers\
    \ numbers)\n                 (max-so-far #f)\n                 (max-so-far-so-far\
    \ (car numbers))\n                 (max-so-far-so-far-so-far max-so-far))\n  \
    \      (if (null? numbers)\n            (cons max-so-far-so-far-so-far max-so-far-so-far)\n\
    \            (loop (cdr numbers)\n                  (if (> max-so-far max-so-far-so-far)\n\
    \                      max-so-far\n                      max-so-far-so-far)\n\
    \                  max-so-far-so-far-so-far))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)", "  (let loop ((numbers numbers)\n\
    \             (max 0))\n    (if (null? numbers)\n        max\n        (let ((number\
    \ (car numbers))\n              (max-list (cdr numbers)))\n          (if (null?\
    \ max-list)\n              max\n              (loop (cdr max-list)\n         \
    \           (max number)))))\n    max))\n", "  (define (rolling_max-helper numbers\
    \ max-so-far max-so-far-so-far)\n    (cond\n      [(empty? numbers) max-so-far]\n\
    \      [(< (first numbers) max-so-far-so-far) (rolling_max-helper (rest numbers)\
    \ max-so-far (first numbers))]\n      [else (rolling_max-helper (rest numbers)\
    \ max-so-far-so-far (first numbers))]))\n  (rolling_max-helper numbers 0 0))\n",
  "  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond\
    \ ((null? numbers) max-so-far)\n          ((< max-so-far max-so-far-so-far) (rolling_max-helper\
    \ numbers (car numbers) max-so-far))\n          (else (rolling_max-helper (cdr\
    \ numbers) max-so-far (max max-so-far max-so-far-so-far))))\n  (rolling_max-helper\
    \ numbers 0 0))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            max\n\
    \            (if (> max roll)\n                max\n                (rolling_max\
    \ (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         max\n            (let ((max (max max (car roll))))\n              (if\
    \ (null? roll)\n                  max\n                  (rolling_max (cdr roll)))))))\n",
  "  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond\
    \ [(empty? numbers) max-so-far]\n          [(> (first numbers) max-so-far) (rolling_max-helper\
    \ numbers (first numbers) max-so-far)]\n          [else (rolling_max-helper (rest\
    \ numbers) max-so-far max-so-far-so-far)]))\n  (rolling_max-helper numbers #f\
    \ #f))\n", "  (if (null? numbers)\n      '()\n      (let loop ((numbers (rest\
    \ numbers)) (max '()) (i 0))\n        (if (= i 0)\n            (cons max max)\n\
    \            (loop (rest numbers) (cons (max max) max) (add1 i))))))\n", "  (define\
    \ (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond [(empty?\
    \ numbers) max-so-far]\n          [(< (first numbers) max-so-far-so-far) (rolling_max-helper\
    \ numbers (first numbers) max-so-far)]\n          [else (rolling_max-helper (rest\
    \ numbers) max-so-far max-so-far-so-far)]))\n  (rolling_max-helper numbers #f\
    \ #f))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            (cons\
    \ max roll)\n            (if (> max roll)\n                (cons max roll)\n \
    \               (rolling_max (cdr roll)))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-list '()))\n    (if (null? numbers)\n        (reverse max-list)\n\
    \        (let ((max-element (first numbers))\n              (max-list (cons max-element\
    \ max-list)))\n          (loop (rest numbers)\n                (cons max-element\
    \ max-list))))))\n", "  (if (null? numbers)\n      '()\n      (let loop ((numbers\
    \ numbers)\n                 (max '()))\n        (if (null? (rest numbers))\n\
    \            max\n            (loop (rest numbers)\n                  (cons (max\
    \ max) max)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n\
    \        (if (null? (cdr numbers))\n            (list max)\n            (let ((next\
    \ (rolling_max (cdr numbers))))\n              (if (> (car next) max)\n      \
    \            (list max)\n                  (list max (car next))))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n         \
    \   (max-so-far-so-far (reverse max-so-far)))\n        (if (null? max-so-far)\n\
    \            (cons numbers (reverse max-so-far-so-far))\n            (let ((number\
    \ (car max-so-far))\n                  (max-so-far max-so-far-so-far))\n     \
    \         (if (> (car max-so-far) number)\n                  (cons number max-so-far)\n\
    \                  (let ((max-so-far max-so-far-so-far)\n                    \
    \    (max-so-far-so-far (cons (car max-so-far) max-so-far)))\n               \
    \     (if (> (car max-so-far) number)\n                        (cons number max-so-far-so-far)\n\
    \                        (let ((max-so-far max-so-far-so-far)\n              \
    \                (max-so-far-so-far (cons (car max-so-far) max-so-far)))\n   \
    \                       (if (> (car max-so-far) number)\n                    \
    \          (cons number max-so-far-so-far)\n                              (let\
    \ ((max-so-far max-so-far-so-far)\n                                    (max-so-far-so-far\
    \ (cons (car max-so-far) max-so-far)))\n                                (if (>\
    \ (car max-so-far) number)\n                                    (cons number max-so-far-so-far)\n\
    \                                    (let ((max-so-far max-so-far-so-far)\n  \
    \                                        (max-so-far-so-far (cons (car max-so-far)\
    \ max-so-far)))\n                                      (if (> (car max-so-far)\
    \ number)\n                                          (cons number max-so-far-so-far)\n\
    \                                          (let ((max-so-far max-so-far-so-far)\n\
    \                                                (max-so-far-so-far (cons (car\
    \ max-so-far) max-so-far)))\n                                            (if (>\
    \ (car max-so-far) number)\n                                                (cons\
    \ number max-so-far-so-far)\n                                                (let\
    \ ((max-so-far max-so-far-so-far)\n                                          \
    \            (max-so-far-so-far (cons (car max-so-far) max-so-", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            max\n            (let ((max\
    \ (max max (car roll))))\n              (if (null? roll)\n                  max\n\
    \                  (let ((max (max max (car roll))))\n                    (if\
    \ (null? roll)\n                        max\n                        (let ((max\
    \ (max max (car roll))))\n                          (if (null? roll)\n       \
    \                       max\n                              (let ((max (max max\
    \ (car roll))))\n                                (if (null? roll)\n          \
    \                          max\n                                    (let ((max\
    \ (max max (car roll))))\n                                      (if (null? roll)\n\
    \                                          max\n                             \
    \             (let ((max (max max (car roll))))\n                            \
    \                (if (null? roll)\n                                          \
    \      max\n                                                (let ((max (max max\
    \ (car roll))))\n                                                  (if (null?\
    \ roll)\n                                                      max\n         \
    \                                             (let ((max (max max (car roll))))\n\
    \                                                        (if (null? roll)\n  \
    \                                                          max\n             \
    \                                               (let ((max (max max (car roll))))\n\
    \                                                              (if (null? roll)\n\
    \                                                                  max\n     \
    \                                                             (let ((max (max\
    \ max (car roll))))\n                                                        \
    \            (if (null? roll)\n                                              \
    \                          max\n                                             \
    \                           (let ((max (max max (car roll))))\n              \
    \                                            (if (null? roll)\n              \
    \                                                max\n                       \
    \                                       (let ((max (max max (car roll))))\n  \
    \                                                              (if (null? roll)\n\
    \                                                                    max\n   \
    \                                                                 (let ((max (max\
    \ max (car roll))))\n                                                      (if\
    \ (null? roll)\n                                                          max\n\
    \                                                          (let ((max (max max\
    \ (car roll))))\n                                                            (if\
    \ (null? roll)\n                                                             \
    \   max\n                                                                (let\
    \ ((max (max max (car roll))))\n                                             \
    \                     (if (null? roll)\n                                     \
    \                               max\n                                        \
    \                            (let ((max (max max (car roll))))\n             \
    \                                         (if (null? roll)\n                 \
    \                                         max\n                              \
    \                            (let ((max (max max (car roll))))\n             \
    \                                               (if (null? roll)\n           \
    \                                                     max\n                  \
    \                                              (let ((max (max max (car roll))))\n\
    \                                                                  (if (null?\
    \ roll)\n                                                                    max\n\
    \                                                                    (let ((max\
    \ (max max (car roll))))\n                                                   \
    \   (if (null? ", "  (if (null? numbers)\n      '()\n      (let loop ((numbers\
    \ numbers)\n                 (max '()))\n        (if (null? numbers)\n       \
    \     max\n            (loop (rest numbers)\n                  (cond ((> max numbers)\
    \ max)\n                         ((= 0 (modulo max numbers)) (cons max max))\n\
    \                         (else (loop (rest numbers)\n                       \
    \              (max numbers))))))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (list max)\n            (let ((max (max max roll)))\n\
    \              (cons max rolling_max (cdr roll)))))))\n", "  (define (rolling_max-helper\
    \ numbers max-so-far max-so-far-so-far)\n    (cond [(empty? numbers) max-so-far]\n\
    \          [(< max-so-far max-so-far-so-far) (rolling_max-helper numbers (first\
    \ numbers) max-so-far)]\n          [else (rolling_max-helper (rest numbers) max-so-far\
    \ (max max-so-far max-so-far-so-far))]))\n  (rolling_max-helper numbers 0 0))\n",
  "  (let loop ((numbers numbers)\n             (max 0))\n    (if (null? numbers)\n\
    \        max\n        (let ((n (car numbers))\n              (max (if (> max n)\n\
    \                      max\n                      n)))\n          (loop (cdr numbers)\n\
    \                max))))\n", "  (if (null? numbers)\n      '()\n      (let loop\
    \ ((numbers numbers)\n                 (max '()))\n        (if (null? numbers)\n\
    \            max\n            (loop (rest numbers)\n                  (if (> max\
    \ first)\n                      max\n                      (loop (rest numbers)\n\
    \                            max))))))\n", "  (define (rolling_max-helper numbers\
    \ max-so-far max-so-far-so-far)\n    (cond ((null? numbers) max-so-far)\n    \
    \      ((> max-so-far max-so-far-so-far) max-so-far)\n          ((< max-so-far\
    \ max-so-far-so-far) (rolling_max-helper (cdr numbers) max-so-far max-so-far-so-far))\n\
    \          (else (rolling_max-helper (cdr numbers) (max max-so-far max-so-far-so-far)\
    \ (max max-so-far-so-far (car numbers))))))\n  (rolling_max-helper numbers 0 0))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            max\n         \
    \   (rolling_max (cons max roll))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (list max)\n            (append (list (max roll))\n\
    \                    (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling (list max)))\n\
    \        (if (null? (cdr numbers))\n            max\n            (let ((next (car\
    \ numbers))\n                  (rolling (cons next rolling)))\n              (if\
    \ (> (car rolling) max)\n                  (rolling_max rolling)\n           \
    \       (rolling_max rolling)))))\n        (rolling_max rolling)))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n           \
    \      (max '()))\n        (if (null? numbers)\n            max\n            (let\
    \ ((n (car numbers))\n                  (m (cadr numbers)))\n              (if\
    \ (> (car numbers) max)\n                  (loop (cdr numbers) max)\n        \
    \          (loop (cdr numbers) (max n (car numbers)))))))\n  max)\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (cons max roll)\n        \
    \    (let ((max (car roll))\n                  (roll (cdr roll)))\n          \
    \    (cons max roll)))))\n", "  (let loop ((max-so-far #f)\n             (max-so-far-so-far\
    \ (max max-so-far #f))\n             (numbers (reverse numbers)))\n    (if (null?\
    \ numbers)\n        (list max-so-far-so-far)\n        (let ((number (car numbers))\n\
    \              (max-so-far max-so-far-so-far))\n          (loop (max max-so-far\
    \ number)\n                (max max-so-far-so-far (car numbers))\n           \
    \     (cdr numbers))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n\
    \            max\n            (if (> max roll)\n                max\n        \
    \        (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max-so-far numbers)\n            (max-so-far (reverse max-so-far))\n\
    \            (max-so-far (reverse max-so-far))\n            (max-so-far (reverse\
    \ max-so-far)))\n        (if (null? (rest numbers))\n            (cons (car max-so-far)\n\
    \                  max-so-far)\n            (let ((n (car numbers))\n        \
    \          (m (cadr numbers))\n                  (max-so-far (cons (car max-so-far)\n\
    \                                    max-so-far)))\n              (if (< n m)\n\
    \                  (let ((new-max-so-far (cons (car max-so-far)\n            \
    \                                max-so-far))\n                        (new-max-so-far\
    \ (cons (car max-so-far)\n                                            max-so-far)))\n\
    \                    (if (null? new-max-so-far)\n                        (cons\
    \ (car max-so-far)\n                              max-so-far)\n              \
    \        (let ((new-max-so-far (cons (car max-so-far)\n                      \
    \                              new-max-so-far))\n                            (new-max-so-far\
    \ (cons (car max-so-far)\n                                                   \
    \ new-max-so-far)))\n                        (if (null? new-max-so-far)\n    \
    \                        (cons (car max-so-far)\n                            \
    \      max-so-far)\n                        (let ((new-max-so-far (cons (car max-so-far)\n\
    \                                                    new-max-so-far))\n      \
    \                        (new-max-so-far (cons (car max-so-far)\n            \
    \                                        new-max-so-far)))\n                 \
    \         (if (null? new-max-so-far)\n                              (cons (car\
    \ max-so-far)\n                                    max-so-far)\n             \
    \             (let ((new-max-so-far (cons (car max-so-far)\n                 \
    \                                   new-max-so-far))\n                       \
    \         (new-max-so-far (cons (car max-so-far)\n                           \
    \                         new-max-so-far)))\n                            (if (null?\
    \ new-max-so-far)\n                                (cons (car max-so-far)\n  \
    \                                    max-so-far)\n                           \
    \ (let ((new-max-so-far (cons (car max-so-far)\n                             \
    \                               new-max-so-far))\n                           \
    \       (new-max-so-far (cons (car max-so-far", "  (if (null? numbers)\n     \
    \ '()\n      (let loop ((numbers numbers)\n                 (max '()))\n     \
    \   (if (null? numbers)\n            max\n            (loop (rest numbers)\n \
    \                 (cons (max max) max)))))\n", "  (define (rolling_max-helper\
    \ numbers max-so-far current-max)\n    (cond\n      [(empty? numbers) (cons current-max\
    \ max-so-far)]\n      [(> current-max max-so-far) (cons current-max max-so-far)]\n\
    \      [(< current-max max-so-far) (rolling_max-helper (rest numbers) max-so-far\
    \ current-max)]\n      [else (rolling_max-helper (rest numbers) max-so-far current-max)]\n\
    \    ))\n  (rolling_max-helper numbers 0 0))\n", "  (if (null? numbers)\n    \
    \  '()\n      (let ((max-so-far #f)\n            (max-so-far-so-far (car numbers))\n\
    \            (max-so-far-so-far-so-far (cdr numbers)))\n        (if (> (car numbers)\
    \ max-so-far)\n            (cons max-so-far (rolling_max (cdr numbers))))\n  \
    \      (if (> (cdr numbers) max-so-far-so-far)\n            (cons max-so-far-so-far\
    \ (rolling_max (cdr numbers))))\n        (if (> (cdr numbers) max-so-far-so-far-so-far)\n\
    \            (cons max-so-far-so-far-so-far (rolling_max (cdr numbers))))\n  \
    \      (if (> (cdr numbers) max-so-far-so-far-so-far-so-far)\n            (cons\
    \ max-so-far-so-far-so-far-so-far (rolling_max (cdr numbers))))\n        (if (>\
    \ (cdr numbers) max-so-far-so-far-so-far-so-far-so-far)\n            (cons max-so-far-so-far-so-far-so-far-so-far\
    \ (rolling_max (cdr numbers))))\n        (if (> (cdr numbers) max-so-far-so-far-so-far-so-far-so-far-so-far)\n\
    \            (cons max-so-far-so-far-so-far-so-far-so-far-so-far (rolling_max\
    \ (cdr numbers))))\n        (if (> (cdr numbers) max-so-far-so-far-so-far-so-far-so-far-so-far-so-far)\n\
    \            (cons max-so-far-so-far-so-far-so-far-so-far-so-far-so-far (rolling_max\
    \ (cdr numbers))))\n        (if (> (cdr numbers) max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far)\n\
    \            (cons max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (roll (cdr numbers)))\n        (if (null? roll)\n            max\n        \
    \    (if (> max roll)\n                max\n                (rolling_max (cons\
    \ max roll)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers)))\n        (if (null? (cdr numbers))\n            (list max)\n    \
    \        (let ((next-max (car numbers)))\n              (if (> (car numbers) max)\n\
    \                  (list max)\n                  (list max next-max)))))\n   \
    \     (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n \
    \     (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n        \
    \    (list max)\n            (let ((next (rolling_max (cdr numbers))))\n     \
    \         (if (> (car next) max)\n                  (list max)\n             \
    \     (cons (car next) (list max))))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let loop ((numbers numbers)\n                 (max '()))\n        (if\
    \ (null? numbers)\n            max\n            (loop (rest numbers)\n       \
    \           (if (> (first numbers) max)\n                      max\n         \
    \             (first numbers))))))\n", "  (if (null? numbers)\n      '()\n   \
    \   (let loop ((numbers numbers)\n                 (max '()))\n        (if (null?\
    \ numbers)\n            max\n            (loop (rest numbers)\n              \
    \    (if (> (first numbers) max)\n                      max\n                \
    \      (first numbers)))))))\n", "  (let loop ((numbers numbers)\n           \
    \  (max 0))\n    (if (null? numbers)\n        max\n        (loop (rest numbers)\n\
    \              (if (> max first)\n                  max\n                  first))))))\n",
  "  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond\
    \ [(null? numbers) max-so-far]\n          [(< max-so-far max-so-far-so-far) (rolling_max-helper\
    \ numbers (car numbers) max-so-far)]\n          [else (rolling_max-helper (cdr\
    \ numbers) max-so-far (max max-so-far max-so-far-so-far))]))\n  (rolling_max-helper\
    \ numbers 0 0))\n", "  (if (null? numbers)\n      '()\n      (let loop ((numbers\
    \ numbers)\n                 (max '()))\n        (if (null? numbers)\n       \
    \     max\n            (loop (rest numbers)\n                  (cons (max max)\
    \ max)))))\n", "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n\
    \                 (max-so-far #f)\n                 (max-so-far #f)\n        \
    \         (max-so-far #f)\n                 (max-so-far #f)\n                \
    \ (max-so-far #f)\n                 (max-so-far #f)\n                 (max-so-far\
    \ #f)\n                 (max-so-far #f)\n                 (max-so-far #f)\n  \
    \               (max-so-far #f)\n                 (max-so-far #f)\n          \
    \       (max-so-far #f)\n                 (max-so-far #f)\n                 (max-so-far\
    \ #f)\n                 (max-so-far #f)\n                 (max-so-far #f)\n  \
    \               (max-so-far #f)\n                 (max-so-far #f)\n          \
    \       (max-so-far #f)\n                 (max-so-far #f)\n                 (max-so-far\
    \ #f)\n                 (max-so-far #f)\n                 (max-so-far #f)\n  \
    \               (max-so-far #f)\n                 (max-so-far #f)\n          \
    \       (max-so-far #f)\n                 (max-so-far #f)\n                 (max-so-far\
    \ #f)\n                 (max-so-far #f)\n                 (max-so-far #f)\n  \
    \               (max-so-far #f)\n                 (max-so-far #f)\n          \
    \       (max-so-far #f)\n                 (max-so-far #f)\n                 (max-so-far\
    \ #f)\n                 (max-so-far #f)\n                 (max-so-far #f)\n  \
    \               (max-so-far #f)\n                 (max-so-far #f)\n          \
    \       (max-so-far #f)\n                 (max-so-far #f)\n                 (max-so-far\
    \ #f)\n                 (max-so-far #f)\n                 (max-so-far #f)\n  \
    \               (max-so-far #f)\n                 (max-so-far #f)\n          \
    \       (max-so-far #f)\n                 (max-so-far #f)\n                 (max-so-far\
    \ #f)\n                 (max-so-far #f)\n                 (max-so-far #f)\n  \
    \               (max-so-far #f)\n                 (max-so-far #f)\n          \
    \       (max-so-far #f)\n                 (max-so-far #f)\n                 (max-so-far\
    \ #f)\n                 (max-so-far #f)\n                 (max-so-far #f)\n  \
    \               (max-so-far #f)\n                 (max-so-far #f)\n          \
    \       (max-so-far #f)\n                 (max-so-far ", "  (define (rolling_max-helper\
    \ numbers max-so-far max-so-far-so-far)\n    (cond\n      [(null? numbers) max-so-far]\n\
    \      [(< max-so-far max-so-far-so-far) (rolling_max-helper numbers (car numbers)\
    \ max-so-far)]\n      [else (rolling_max-helper (cdr numbers) max-so-far (max\
    \ max-so-far-so-far (car numbers)))]))\n  (rolling_max-helper numbers 0 0))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max-so-far #f)\n                 (max-so-far-so-far (car numbers))\n\
    \                 (max-so-far-so-far-so-far max-so-far))\n        (if (null? numbers)\n\
    \            (list max-so-far)\n            (loop (cdr numbers)\n            \
    \      (if (> max-so-far max-so-far-so-far)\n                      max-so-far\n\
    \                      max-so-far-so-far)\n                  max-so-far-so-far))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling (list max)))\n        (if (null? (cdr numbers))\n            max\n\
    \            (let ((next (car numbers))\n                  (rolling (cons next\
    \ rolling)))\n              (if (> (car rolling) max)\n                  (rolling_max\
    \ rolling)\n                  (rolling_max rolling)))))\n        (rolling_max\
    \ rolling)))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            max\n\
    \            (if (> (car roll) max)\n                (rolling_max (cdr roll))\n\
    \                (cons max roll)))))\n", "  (if (null? numbers)\n      '()\n \
    \     (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            max\n            (if (> max roll)\n              \
    \  max\n                (rolling_max roll))))))\n", "  (if (null? numbers)\n \
    \     '()\n      (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n\
    \            (cons max '())\n            (let ((next (rolling_max (cdr numbers))))\n\
    \              (cond ((> max next) (cons max next))\n                    (else\
    \ (cons next max)))))\n        (rolling_max (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr\
    \ numbers))\n            (list max)\n            (let ((next (rolling_max (cdr\
    \ numbers))))\n              (if (> (car next) max)\n                  (list max)\n\
    \                  (list max (car next))))))))\n", "  (if (null? numbers)\n  \
    \    '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far (reverse\
    \ max-so-far)))\n        (if (null? max-so-far)\n            (cons 0 (reverse\
    \ max-so-far-so-far))\n            (let ((current (first max-so-far))\n      \
    \            (max-so-far-so-far (rest max-so-far-so-far)))\n              (if\
    \ (> current (first max-so-far-so-far))\n                  (cons current max-so-far-so-far)\n\
    \                  (let ((next (first max-so-far-so-far))\n                  \
    \      (max-so-far-so-far (rest max-so-far-so-far)))\n                    (if\
    \ (> next (first max-so-far-so-far))\n                        (cons next max-so-far-so-far)\n\
    \                        (let ((next-so-far max-so-far-so-far))\n            \
    \              (max-so-far-so-far (rest max-so-far-so-far))\n                \
    \          (if (> next-so-far max-so-far)\n                              (cons\
    \ next-so-far max-so-far-so-far)\n                              (let ((next-so-far-so-far\
    \ max-so-far-so-far))\n                                (max-so-far-so-far (rest\
    \ max-so-far-so-far))\n                                (if (> next-so-far-so-far\
    \ max-so-far)\n                                    (cons next-so-far-so-far max-so-far-so-far)\n\
    \                                    (let ((next-so-far-so-far-so-far max-so-far-so-far))\n\
    \                                      (max-so-far-so-far (rest max-so-far-so-far))\n\
    \                                      (if (> next-so-far-so-far-so-far max-so-far)\n\
    \                                          (cons next-so-far-so-far-so-far max-so-far-so-far)\n\
    \                                          (let ((next-so-far-so-far-so-far-so-far\
    \ max-so-far-so-far))\n                                            (max-so-far-so-far\
    \ (rest max-so-far-so-far))\n                                            (if (",
  "  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond\
    \ [(null? numbers) max-so-far]\n          [(< max-so-far max-so-far-so-far) (rolling_max-helper\
    \ numbers (car numbers) max-so-far)]\n          [else (rolling_max-helper (cdr\
    \ numbers) max-so-far (max max-so-far max-so-far-so-far))]))\n  (rolling_max-helper\
    \ numbers 0 0))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            max\n\
    \            (let ((max (max max (car roll))))\n              (if (null? roll)\n\
    \                  max\n                  (let ((max (max max (car roll))))\n\
    \                    (if (null? roll)\n                        max\n         \
    \               (let ((max (max max (car roll))))\n                          (if\
    \ (null? roll)\n                              max\n                          \
    \    (let ((max (max max (car roll))))\n                                (if (null?\
    \ roll)\n                                    max\n                           \
    \         (let ((max (max max (car roll))))\n                                \
    \      (if (null? roll)\n                                          max\n     \
    \                                     (let ((max (max max (car roll))))\n    \
    \                                        (if (null? roll)\n                  \
    \                              max\n                                         \
    \       (let ((max (max max (car roll))))\n                                  \
    \                (if (null? roll)\n                                          \
    \            max\n                                                      (let ((max\
    \ (max max (car roll))))\n                                                   \
    \     (if (null? roll)\n                                                     \
    \       max\n                                                            (let\
    \ ((max (max max (car roll))))\n                                             \
    \                 (if (null? roll)\n                                         \
    \                         max\n                                              \
    \                    (let ((max (max max (car roll))))\n                     \
    \                                               (if (null? roll)\n           \
    \                                                             max\n          \
    \                                                              (let ((max (max\
    \ max (car roll))))\n                                                        \
    \  (if (null? roll)\n                                                        \
    \      max\n                                                              (let\
    \ ((max (max max (car roll))))\n                                             \
    \                   (if (null? roll)\n                                       \
    \                             max\n                                          \
    \                          (let ((max (max max (car roll))))\n               \
    \                                       (if (null? roll)\n                   \
    \                                       max\n                                \
    \                          (let ((max (max max (car roll))))\n               \
    \                                             (if (null? roll)\n             \
    \                                                   max\n                    \
    \                                            (let ((max (max max (car roll))))\n\
    \                                                                  (if (null?\
    \ roll)\n                                                                    max\n\
    \                                                                    (let ((max\
    \ (max max (car roll))))\n                                                   \
    \   (if (null? roll)\n                                                       \
    \   max\n                                                          (let ((max\
    \ (max max (car roll))))\n                                                   \
    \         (if (null? roll)\n                                                 \
    \               max\n                                                        \
    \        (let ((max (max max (car roll))))\n                                 \
    \                                 (if (null? roll)\n                         \
    \                                           max\n                            \
    \                                        (let ((max (max max (car roll))))\n \
    \                                                     (if (null? ", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far\
    \ (reverse max-so-far)))\n        (if (null? max-so-far)\n            (cons numbers\
    \ (reverse max-so-far-so-far))\n            (let ((next (first max-so-far))\n\
    \                  (max-so-far max-so-far-so-far)\n                  (max-so-far-so-far\
    \ (cons next max-so-far-so-far)))\n              (if (> (first max-so-far) next)\n\
    \                  (rolling_max (cons next max-so-far-so-far))\n             \
    \     (rolling_max (cons (first max-so-far) max-so-far-so-far)))))\n        (rolling_max\
    \ (cons next max-so-far-so-far)))))\n", "  (let loop ((numbers numbers)\n    \
    \         (max-list '()))\n    (cond ((null? numbers) max-list)\n          ((null?\
    \ (cdr numbers)) max-list)\n          (else (loop (cdr numbers)\n            \
    \           (cons (max (car numbers) (car max-list))\n                       \
    \      max-list))))))\n", "  (let loop ((numbers numbers)\n             (max-so-far\
    \ #f)\n             (max-so-far-so-far (max max-so-far max-so-far-so-far)))\n\
    \    (cond\n      [(empty? numbers) max-so-far]\n      [(< max-so-far max-so-far-so-far)\
    \ (loop (rest numbers) max-so-far max-so-far-so-far)]\n      [else (loop (rest\
    \ numbers) max-so-far max-so-far-so-far)])))\n", "  (if (null? numbers)\n    \
    \  '()\n      (let ((max-so-far #f)\n            (max-so-far-so-far (car numbers))\n\
    \            (max-so-far-so-far-so-far (cdr numbers)))\n        (if (> (car numbers)\
    \ max-so-far)\n            (cons max-so-far (rolling_max (cdr numbers)))\n   \
    \         (cons (car numbers) (rolling_max (cdr numbers)))))))\n", "  (let loop\
    \ ((numbers numbers)\n             (max 0))\n    (cond ((null? numbers) (list\
    \ max))\n          ((null? (cdr numbers)) (list max))\n          ((> (car numbers)\
    \ max) (loop (cdr numbers) max))\n          (else (loop (cdr numbers) (max max\
    \ (car numbers)))))))\n", "  (let loop ((numbers numbers)\n             (max 0))\n\
    \    (if (null? numbers)\n        max\n        (let ((n (car numbers))\n     \
    \         (m (max n)))\n          (loop (cdr numbers)\n                (if (>\
    \ n m)\n                    m\n                    (+ n m)))))\n    ))\n", " \
    \ (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n       \
    \          (max '()))\n        (if (null? numbers)\n            max\n        \
    \    (let ((number (car numbers))\n                  (max-list (loop (cdr numbers)\
    \ (cons max max))))\n              (cons number max-list))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let loop ((numbers numbers)\n                 (max-so-far\
    \ #f)\n                 (max-so-far-so-far (car numbers))\n                 (max-so-far-so-far-so-far\
    \ max-so-far))\n        (if (null? numbers)\n            (list max-so-far)\n \
    \           (let ((next (first numbers)))\n              (loop (rest numbers)\n\
    \                    (if (> max-so-far next)\n                        next\n \
    \                       (if (> max-so-far-so-far (car numbers))\n            \
    \                max-so-far\n                            (if (> max-so-far-so-far-so-far\
    \ max-so-far)\n                                max-so-far-so-far\n           \
    \                     (if (> max-so-far-so-far-so-far-so-far max-so-far)\n   \
    \                                 max-so-far-so-far-so-far\n                 \
    \                   (if (> max-so-far-so-far-so-far-so-far-so-far max-so-far)\n\
    \                                        max-so-far-so-far-so-far-so-far\n   \
    \                                     (if (> max-so-far-so-far-so-far-so-far-so-far-so-far\
    \ max-so-far)\n                                            max-so-far-so-far-so-far-so-far-so-far\n\
    \                                            max-so-far-so-far-so-far-so-far-so-far))))))))))\n",
  "  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (if (null?\
    \ numbers)\n        (cons max-so-far max-so-far-so-far)\n        (rolling_max-helper\n\
    \         (cdr numbers)\n         (cons (car numbers) max-so-far)\n         (max\
    \ max-so-far max-so-far-so-far))))\n  (rolling_max-helper numbers #f #f))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (reverse max-so-far)))\n        (if (null? max-so-far)\n\
    \            (cons 0 (reverse max-so-far-so-far))\n            (let ((number (car\
    \ max-so-far))\n                  (max-so-far-so-far (cdr max-so-far-so-far)))\n\
    \              (if (> (car max-so-far-so-far) number)\n                  (cons\
    \ number (reverse max-so-far-so-far))\n                  (let ((max-so-far max-so-far-so-far))\n\
    \                    (max-so-far-so-far (cdr max-so-far-so-far))\n           \
    \         (max-so-far (cons number (reverse max-so-far-so-far))))))))))\n", " \
    \ (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond\
    \ [(empty? numbers) max-so-far]\n          [(> (first numbers) max-so-far) (rolling_max-helper\
    \ numbers (first numbers) max-so-far)]\n          [else (rolling_max-helper (rest\
    \ numbers) (first numbers) (max max-so-far-so-far (first numbers)))]))\n  (rolling_max-helper\
    \ numbers 0 0))\n", "  (let loop ((numbers numbers)\n             (max-list '())\n\
    \             (max-so-far 0))\n    (if (null? numbers)\n        (reverse max-list)\n\
    \        (let ((n (car numbers)))\n          (if (> n max-so-far)\n          \
    \    (loop (cdr numbers)\n                    (cons n (reverse max-list))\n  \
    \                  n)\n              (loop (cdr numbers)\n                   \
    \ (cons n (reverse max-list))\n                    max-so-far)))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null?\
    \ (cdr numbers))\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next) max)\n                  (list\
    \ max)\n                  (cons next max)))))\n        (rolling_max (cdr numbers)))))\n",
  "  (let loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)",
  "  (let loop ((numbers numbers)\n             (max #f)\n             (max-list '()))\n\
    \    (cond ((null? numbers) max-list)\n          ((> max numbers) max-list)\n\
    \          (else (loop (cdr numbers)\n                      (max number)\n   \
    \                   (cons (max number) max-list)))))\n  (rolling_max numbers))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (if (> max roll)\n                (cons max roll)\n             \
    \   (rolling_max (cdr roll)))))))\n", "  (let loop ((numbers numbers)\n      \
    \       (max #f)\n             (i 0))\n    (if (null? numbers)\n        max\n\
    \        (loop (rest numbers)\n              (if (> max numbers)\n           \
    \       max\n                  (loop (rest numbers)\n                        (max\
    \ numbers (car numbers))\n                        (+ i 1))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far\
    \ (reverse max-so-far)))\n        (if (null? max-so-far)\n            (cons 0\
    \ (reverse max-so-far-so-far))\n            (let ((next-number (car max-so-far)))\n\
    \              (if (> (car max-so-far) next-number)\n                  (cons next-number\
    \ (reverse max-so-far-so-far))\n                  (let ((max-so-far max-so-far-so-far))\n\
    \                    (if (null? max-so-far)\n                        (cons next-number\
    \ (reverse max-so-far-so-far))\n                        (let ((max-so-far max-so-far-so-far))\n\
    \                          (if (null? max-so-far)\n                          \
    \    (cons next-number (reverse max-so-far-so-far))\n                        \
    \      (let ((max-so-far max-so-far-so-far))\n                               \
    \ (if (null? max-so-far)\n                                    (cons next-number\
    \ (reverse max-so-far-so-far))\n                                    (let ((max-so-far\
    \ max-so-far-so-far))\n                                      (if (null? max-so-far)\n\
    \                                          (cons next-number (reverse max-so-far-so-far))\n\
    \                                          (let ((max-so-far max-so-far-so-far))\n\
    \                                            (if (null? max-so-far)\n        \
    \                                        (cons next-number (reverse max-so-far-so-far))\n\
    \                                                (let ((max-so-far max-so-far-so-far))\n\
    \                                                  (if (null? max-so-far)\n  \
    \                                                    (cons next-number (reverse\
    \ max-so-far-so-far))\n                                                      (let\
    \ ((max-so-far max-so-far-so-far))\n                                         \
    \               (if (null? max-so-far)\n                                     \
    \                       (cons next-number (reverse max-so-far-so-far))\n     \
    \                                                       (let ((max-so-far max-so-far-so-far))\n\
    \                                                              (if (null? max-so-far)\n\
    \                                                                  (cons next-number\
    \ (reverse max-so-far-so-far))\n                                             \
    \                     (let ((max-so-far max-so-far-so-far))\n                \
    \                                                    (if (null? max-so-far)\n",
  "  (let loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far-so-far\
    \ (list #f)))\n    (if (null? numbers)\n        (reverse max-so-far-so-far)\n\
    \        (loop (rest numbers)\n              (cond ((> max-so-far numbers) max-so-far)\n\
    \                    ((< max-so-far numbers) (cons max-so-far max-so-far-so-far))\n\
    \                    (else (loop (rest numbers)\n                            \
    \  (cond ((> max-so-far numbers) max-so-far)\n                               \
    \     ((< max-so-far numbers) (cons max-so-far max-so-far-so-far))\n         \
    \                           (else (loop (rest numbers)\n                     \
    \                         (cond ((> max-so-far numbers) max-so-far)\n        \
    \                                            ((< max-so-far numbers) (cons max-so-far\
    \ max-so-far-so-far))\n                                                    (else\
    \ (loop (rest numbers)\n                                                     \
    \         (cond ((> max-so-far numbers) max-so-far)\n                        \
    \                                            ((< max-so-far numbers) (cons max-so-far\
    \ max-so-far-so-far))\n                                                      \
    \              (else (loop (rest numbers)\n                                  \
    \                                            (cond ((> max-so-far numbers) max-so-far)\n\
    \                                                                            \
    \        (else (loop (rest numbers)\n                                        \
    \                                                      (cons max-so-far max-so-far-so-far)))))))))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max '()))\n        (if (null? numbers)\n            max\n         \
    \   (loop (rest numbers)\n                  (cons (max max) max)))))\n", "  (define\
    \ (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond ((null?\
    \ numbers) max-so-far)\n          ((> max-so-far max-so-far-so-far) (rolling_max-helper\
    \ numbers (car numbers) max-so-far))\n          (else (rolling_max-helper (cdr\
    \ numbers) max-so-far max-so-far-so-far))))\n  (rolling_max-helper numbers 0 0))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers))\n        (if\
    \ (null? (rest numbers))\n            (cons max-so-far max-so-far)\n         \
    \   (let ((max-so-far max-so-far (rest numbers)))\n              (if (> (car max-so-far)\
    \ (car numbers))\n                  (cons max-so-far max-so-far)\n           \
    \       (rolling_max (cdr numbers)))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max #f)\n             (max #f)\n             (max #f))\n    (cond\n\
    \      [(empty? numbers) (list max)]\n      [(< max #f)\n       (loop (rest numbers)\n\
    \             (first numbers)\n             (first numbers)\n             (first\
    \ numbers))]\n      [(< max #f)\n       (loop (rest numbers)\n             (first\
    \ numbers)\n             (first numbers)\n             (first numbers))]\n   \
    \   [(< max #f)\n       (loop (rest numbers)\n             (first numbers)\n \
    \            (first numbers)\n             (first numbers))]\n      [(< max #f)\n\
    \       (loop (rest numbers)\n             (first numbers)\n             (first\
    \ numbers)\n             (first numbers))]\n      [(< max #f)\n       (loop (rest\
    \ numbers)\n             (first numbers)\n             (first numbers)\n     \
    \        (first numbers))]\n      [(< max #f)\n       (loop (rest numbers)\n \
    \            (first numbers)\n             (first numbers)\n             (first\
    \ numbers))]\n      [(< max #f)\n       (loop (rest numbers)\n             (first\
    \ numbers)\n             (first numbers)\n             (first numbers))]\n   \
    \   [(< max #f)\n       (loop (rest numbers)\n             (first numbers)\n \
    \            (first numbers)\n             (first numbers))]\n      [(< max #f)\n\
    \       (loop (rest numbers)\n             (first numbers)\n             (first\
    \ numbers)\n             (first numbers))]\n      [(< max #f)\n       (loop (rest\
    \ numbers)\n             (first numbers)\n             (first numbers)\n     \
    \        (first numbers))]\n      [(< max #f)\n       (loop (rest numbers)\n \
    \            (first numbers)\n             (first numbers)\n             (first\
    \ numbers))]\n      [(< max #f)\n       (loop (rest numbers)\n             (first\
    \ numbers)\n             (first numbers)\n             (first numbers))]\n   \
    \   [(< max #f)\n       (loop (rest numbers)\n             (first numbers)\n \
    \            (first numbers)\n             (first numbers))]\n      [(< max #f)\n\
    \       (loop (rest numbers)\n             (first numbers)\n             (first\
    \ numbers)\n             (first numbers))]\n      [(< max #f)\n       (loop (rest\
    \ numbers)\n             (first numbers)\n             (first numbers)\n     \
    \        (first numbers))]\n      [(< max #f)\n       (loop (rest numbers)\n \
    \            (first numbers)\n             (first numbers)", "  (let loop ((numbers\
    \ numbers)\n             (max 0))\n    (if (null? numbers)\n        max\n    \
    \    (loop (rest numbers)\n              (max max (first numbers))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (max-list (cdr numbers)))\n        (if (null? max-list)\n            max\n\
    \            (if (> (car max-list) max)\n                (cons max max-list)\n\
    \                (rolling_max (cdr max-list)))))))\n", "  (let loop ((numbers\
    \ numbers)\n             (max #f)\n             (i 0))\n    (if (null? numbers)\n\
    \        max\n        (loop (cdr numbers)\n              (if (> max car numbers)\n\
    \                  max\n                  (car numbers))\n              (+ i 1)))))\n",
  "  (let loop ((numbers numbers)\n             (max-list '()))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((max (car numbers))\n             \
    \ (next (loop (cdr numbers)\n                          (cons max max-list))))\n\
    \          (if (null? next)\n              (loop (cdr numbers)\n             \
    \       (cons max max-list))\n              (loop (cdr next)\n               \
    \     (cons max max-list)))))\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you\
    \ for your answer. I was wondering if there is a way to do it without using recursion.\n\
    <|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer. I was wondering if there is a way to do it without\
    \ using recursion.\n<|/ c |>\n<| c |>\nI added a solution without recursion.\n\
    <|/ c |>\n<| c |>\nThank you for your answer. I was wondering if there is a way\
    \ to do it without using recursion.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far (car numbers))\n    \
    \        (max-so-far-index (car numbers)))\n        (if (< (car numbers) max-so-far)\n\
    \            (cons max-so-far max-so-far-index)\n            (rolling_max (cdr\
    \ numbers))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            max\n\
    \            (if (> max roll)\n                max\n                (rolling_max\
    \ (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         (cons max roll)\n            (let ((max (car roll))\n              \
    \    (roll (cdr roll)))\n              (if (> max roll)\n                  (cons\
    \ max roll)\n                  (rolling_max roll)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far (reverse\
    \ max-so-far)))\n        (if (null? (rest numbers))\n            (cons max-so-far\
    \ max-so-far-so-far)\n            (let ((next (first numbers))\n             \
    \     (next-so-far next)\n                  (next-so-far-so-far (rolling_max (rest\
    \ numbers))))\n              (if (> (first next-so-far-so-far) max-so-far)\n \
    \                 (cons max-so-far max-so-far-so-far)\n                  (cons\
    \ next next-so-far-so-far)))))) \n", "  (if (null? numbers)\n      '()\n     \
    \ (let loop ((numbers numbers)\n                 (max '()))\n        (if (null?\
    \ numbers)\n            max\n            (loop (rest numbers)\n              \
    \    (if (> (first numbers) max)\n                      max\n                \
    \      (first numbers)))))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max-so-far (car numbers))\n            (max-so-far-index (car numbers)))\n\
    \        (if (> (car numbers) max-so-far)\n            (cons max-so-far max-so-far-index)\n\
    \            (rolling_max (cdr numbers))))))\n", "  (if (null? numbers)\n    \
    \  '()\n      (let loop ((numbers numbers)\n                 (max '()))\n    \
    \    (if (null? numbers)\n            max\n            (loop (rest numbers)\n\
    \                  (cons (max (car numbers)) max)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers)\n            (max-so-far-index 0))\n\
    \        (if (= max-so-far-index 0)\n            (cons max-so-far max-so-far)\n\
    \            (let ((next (sub1 max-so-far-index)))\n              (if (= next\
    \ 0)\n                  (cons max-so-far max-so-far)\n                  (let ((max-so-far\
    \ max-so-far))\n                    (set! max-so-far (cons (car max-so-far) max-so-far))\n\
    \                    (set! max-so-far-index (+ next 1)))\n                  (rolling_max\
    \ numbers))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n\
    \        (if (null? (cdr numbers))\n            (list max)\n            (let ((next\
    \ (rolling_max (cdr numbers))))\n              (if (> (car next) max)\n      \
    \            (list max)\n                  (cons next max)))))\n        (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         max\n            (if (> max roll)\n                max\n           \
    \     (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n         \
    \   (list max)\n            (let ((next (rolling_max (cdr numbers))))\n      \
    \        (if (> (car next) max)\n                  (list max)\n              \
    \    (cons (car next) next)))))\n        (rolling_max (cdr numbers)))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let loop ((numbers (rest numbers)) (max-so-far\
    \ #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far #f (first numbers))\
    \ (max-so-far #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far\
    \ #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far #f (first numbers))\
    \ (max-so-far #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far\
    \ #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far #f (first numbers))\
    \ (max-so-far #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far\
    \ #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far #f (first numbers))\
    \ (max-so-far #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far\
    \ #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far #f (first numbers))\
    \ (max-so-far #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far\
    \ #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far #f (first numbers))\
    \ (max-so-far #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far\
    \ #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far #f (first numbers))\
    \ (max-so-far #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far\
    \ #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far #f (first numbers))\
    \ (max-so-far #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far\
    \ #f (first numbers)) (max-so-far #f (first numbers)) (max-so-far #f (first numbers))\
    \ (max-so-far #f (first numbers)) (max-so-far #f (", "  (let loop ((max-so-far\
    \ #f)\n             (max-so-far-list '())\n             (numbers (reverse numbers)))\n\
    \    (if (null? numbers)\n        (reverse max-so-far-list)\n        (let ((number\
    \ (car numbers))\n              (max-so-far max-so-far)\n              (max-so-far-list\
    \ (cons max-so-far max-so-far-list)))\n          (if (> number max-so-far)\n \
    \             (loop (max number max-so-far)\n                    (cons max-so-far\
    \ max-so-far-list)\n                    (drop number numbers))\n             \
    \ (loop (max number max-so-far)\n                    max-so-far-list\n       \
    \             (drop number numbers))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (cons max roll)\n            (let ((max (max max roll)))\n\
    \              (cons max roll (rolling_max (cdr roll)))))))\n", "  (define (rolling_max-helper\
    \ numbers max-so-far max-so-far-so-far)\n    (cond\n      [(empty? numbers) max-so-far]\n\
    \      [(> (first numbers) max-so-far-so-far) (rolling_max-helper (rest numbers)\
    \ max-so-far max-so-far-so-far)]\n      [else (rolling_max-helper (rest numbers)\
    \ (first numbers) max-so-far-so-far)]))\n  (rolling_max-helper numbers #f #f))\n",
  "  (let loop ((numbers numbers)\n             (max-list '()))\n    (cond ((null?\
    \ numbers) max-list)\n          ((> (car numbers) (first max-list))\n        \
    \   (loop (cdr numbers)\n                 (cons (car numbers) max-list)))\n  \
    \        (else (loop (cdr numbers)\n                       (cons (car numbers)\
    \ max-list)))))\n  max-list)\n", "  (if (null? numbers)\n      '()\n      (let\
    \ loop ((numbers numbers)\n                 (max '()))\n        (if (null? (rest\
    \ numbers))\n            max\n            (loop (rest numbers)\n             \
    \     (cons (max max) max)))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (if (> max roll)\n         \
    \       (cons max roll)\n                (rolling_max (cdr roll)))))))\n", " \
    \ (define (rolling_max-helper numbers index max)\n    (cond [(null? numbers) (list\
    \ max)]\n          [(= index 0) (cons (car numbers) (list max))]\n          [else\
    \ (rolling_max-helper (cdr numbers) (- index 1) (max max (car numbers)))]))\n\
    \  (rolling_max-helper numbers 0 0))\n", "  (if (null? numbers)\n      '()\n \
    \     (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            max\n            (rolling_max (cons max roll)))))\n",
  "  (define (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond\n\
    \      [(null? numbers) max-so-far]\n      [(< max-so-far max-so-far-so-far) (rolling_max-helper\
    \ numbers (car numbers) max-so-far)]\n      [(> max-so-far max-so-far-so-far)\
    \ (rolling_max-helper (cdr numbers) max-so-far (car numbers))]\n      [else (rolling_max-helper\
    \ (cdr numbers) max-so-far (max max-so-far-so-far (car numbers)))]))\n  (rolling_max-helper\
    \ numbers 0 0))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            max\n\
    \            (if (> max roll)\n                max\n                (rolling_max\
    \ (cdr roll)))))))\n", "  (let loop ((numbers numbers)\n             (max-list\
    \ '()))\n    (if (null? numbers)\n        (reverse max-list)\n        (let ((max-element\
    \ (car numbers))\n              (max-index (length numbers)))\n          (if (>\
    \ max-element max-list)\n              (loop (cdr numbers)\n                 \
    \   (cons max-element max-list))\n              (loop (cdr numbers)\n        \
    \            (cons max-element max-list)))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max #f)\n             (max-list '()))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (loop (rest numbers)\n              (max\
    \ numbers (car numbers))\n              (cons (max numbers (car numbers)) max-list)))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max '()))\n        (if (null? numbers)\n            max\n         \
    \   (let ((n (car numbers))\n                  (m (max n)))\n              (loop\
    \ (cdr numbers)\n                    (cons m max)))))\n  )\n", "  (let loop ((numbers\
    \ numbers)\n             (max 0))\n    (if (null? numbers)\n        max\n    \
    \    (loop (rest numbers)\n              (if (> (first numbers) max)\n       \
    \           (first numbers)\n                  max))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let loop ((numbers numbers)\n                 (max '()))\n\
    \        (if (null? numbers)\n            max\n            (loop (rest numbers)\n\
    \                  (cons (max max) max)))))\n", "  (if (null? numbers)\n     \
    \ '()\n      (let loop ((numbers numbers)\n                 (max '()))\n     \
    \   (if (null? numbers)\n            max\n            (let ((number (car numbers))\n\
    \                  (max-i (car max)))\n              (loop (cdr numbers)\n   \
    \                 (cons (max max-i) max)))))\n  )\n", "  (let loop ((max-so-far\
    \ #f)\n             (max-so-far-list '())\n             (numbers (reverse numbers)))\n\
    \    (cond\n      [(empty? numbers) (cons max-so-far max-so-far-list)]\n     \
    \ [(> (first numbers) max-so-far) (loop (first numbers) (cons max-so-far max-so-far-list)\
    \ (rest numbers))]\n      [else (loop (first numbers) (cons max-so-far max-so-far-list)\
    \ (rest numbers))]\n      )))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (cons (max max) roll)))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers (rest numbers)) (result\
    \ '()))\n        (if (null? numbers)\n            result\n            (loop (rest\
    \ numbers)\n                  (cons (max (first numbers)) result)))))) ;; #lang\
    \ racket\n", "  (let loop ((numbers numbers)\n             (max-list '()))\n \
    \   (if (null? numbers)\n        (reverse max-list)\n        (let ((max (car numbers))\n\
    \              (tail (cdr numbers)))\n          (if (null? tail)\n           \
    \   (loop (cdr numbers) (cons max max-list))\n              (loop (cdr tail) (cons\
    \ max max-list)))))\n    (loop '() '())))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max-so-far #f)\n            (max-so-far-so-far (car numbers))\n\
    \            (max-so-far-so-far-so-far max-so-far))\n        (if (< max-so-far\
    \ max-so-far-so-far)\n            (cons max-so-far max-so-far-so-far)\n      \
    \      (rolling_max (cdr numbers))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            max\n            (if (> max roll)\n              \
    \  max\n                (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let loop ((numbers numbers)\n                 (max '()))\n\
    \        (if (null? numbers)\n            max\n            (loop (rest numbers)\n\
    \                  (if (> (first numbers) max)\n                      max\n  \
    \                    (first numbers)))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max-so-far numbers)\n            (max-so-far-so-far (reverse max-so-far)))\n\
    \        (if (null? max-so-far)\n            (cons 0 (rolling_max numbers))\n\
    \            (let ((max-so-far max-so-far-so-far)\n                  (max-so-far-so-far\
    \ (reverse max-so-far-so-far)))\n              (if (> (car max-so-far) (car max-so-far-so-far))\n\
    \                  (cons max-so-far (rolling_max (cdr max-so-far)))\n        \
    \          (cons max-so-far-so-far (rolling_max (cdr max-so-far-so-far))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max '()))\n        (if (null? (rest numbers))\n            max\n  \
    \          (loop (rest numbers)\n                  (cons (max max) max)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next) max)\n                  (list\
    \ max)\n                  (cons (car next) (cons max next))))))))\n", "  (let\
    \ loop ((numbers numbers)\n             (max 0))\n    (if (null? numbers)\n  \
    \      max\n        (loop (cdr numbers)\n              (if (> (car numbers) max)\n\
    \                  (max car numbers)\n                  max))))))\n", "  (let\
    \ loop ((numbers numbers)\n             (max #f)\n             (i 0))\n    (if\
    \ (null? numbers)\n        max\n        (loop (rest numbers)\n              (if\
    \ (> max numbers)\n                  max\n                  (loop (rest numbers)\n\
    \                        (max numbers (first numbers))\n                     \
    \   (+ i 1))))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (cond ((null? numbers) max)\n          ((null? (cdr numbers)) max)\n    \
    \      ((< (car numbers) max) (loop (cdr numbers) max))\n          (else (loop\
    \ (cdr numbers) (car numbers))))))\n", "  (let loop ((numbers numbers)\n     \
    \        (max-list '()))\n    (if (null? numbers)\n        (reverse max-list)\n\
    \        (loop (rest numbers)\n              (cons (max numbers)\n           \
    \         (loop (rest numbers)\n                          (cons (max numbers)\n\
    \                                max-list)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            max\n            (if (> max roll)\n   \
    \             max\n                (rolling_max (cdr roll)))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling (list\
    \ (car numbers))))\n        (if (null? rolling)\n            max\n           \
    \ (rolling_max (cdr rolling)))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (if (> max roll)\n         \
    \       (cons max roll)\n                (rolling_max (cdr roll)))))))\n", " \
    \ (let loop ((numbers numbers)\n             (max 0))\n    (if (null? numbers)\n\
    \        max\n        (let ((n (car numbers))\n              (m (cadr numbers)))\n\
    \          (if (> n m)\n              (loop (cdr numbers) max)\n             \
    \ (loop (cdr numbers) (max n (+ m 1))))))))\n", "  (if (null? numbers)\n     \
    \ '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n  \
    \      (if (null? roll)\n            max\n            (if (> max roll)\n     \
    \           max\n                (rolling_max (cdr roll)))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let loop ((numbers numbers)\n                 (max\
    \ '()))\n        (if (null? numbers)\n            max\n            (let ((n (car\
    \ numbers)))\n              (if (> (car numbers) max)\n                  (loop\
    \ (cdr numbers) max)\n                  (loop (cdr numbers) (car numbers))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max '()))\n        (if (null? numbers)\n            max\n         \
    \   (loop (rest numbers)\n                  (cons (max numbers)\n            \
    \            (loop (rest numbers)\n                              max))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            max\n         \
    \   (if (> max roll)\n                max\n                (rolling_max (cdr roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((max-so-far #f)\n          \
    \       (numbers (rest numbers))\n                 (max-so-far (max max-so-far\
    \ numbers))\n                 (max-so-far (max max-so-far max-so-far)))\n    \
    \    (if (null? numbers)\n            (cons max-so-far max-so-far)\n         \
    \   (loop (cons max-so-far max-so-far)\n                   (rest numbers)\n  \
    \                 (max max-so-far max-so-far))))))\n", "  (let loop ((numbers\
    \ numbers)\n             (max-so-far #f)\n             (max-so-far #f)\n     \
    \        (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)", "  (define\
    \ (rolling_max-helper numbers max-so-far max-so-far-so-far)\n    (cond\n     \
    \ [(null? numbers) max-so-far]\n      [(< (car numbers) max-so-far-so-far) (rolling_max-helper\
    \ numbers (car numbers) max-so-far)]\n      [else (rolling_max-helper (cdr numbers)\
    \ max-so-far (max max-so-far max-so-far-so-far))]))\n  (rolling_max-helper numbers\
    \ 0 0))\n", "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n\
    \                 (max '()))\n        (if (null? numbers)\n            max\n \
    \           (loop (rest numbers)\n                  (cond ((> max number) (max\
    \ number))\n                         ((= max number) (cons max max))\n       \
    \                  (else (loop (rest numbers)\n                              \
    \       (cons max max))))))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (let ((max (car roll))\n   \
    \               (roll (cdr roll)))\n              (if (> (car roll) max)\n   \
    \               (cons max roll)\n                  (rolling_max (cdr roll)))))\n\
    \        (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max-so-far numbers)\n            (max-so-far-so-far (list numbers)))\n\
    \        (if (null? (cdr max-so-far-so-far))\n            (cons (car max-so-far)\
    \ max-so-far-so-far)\n            (let ((next-max-so-far max-so-far-so-far)\n\
    \                  (next-max-so-far-so-far max-so-far-so-far))\n             \
    \ (if (> (car max-so-far) (car next-max-so-far))\n                  (set! max-so-far\
    \ next-max-so-far)\n                  (set! max-so-far-so-far (cons (car max-so-far)\
    \ max-so-far-so-far)))))\n        (rolling_max (cdr max-so-far-so-far)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            max\n         \
    \   (if (> max roll)\n                max\n                (rolling_max (cdr roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (list numbers)))\n        (if (null? (cdr max-so-far-so-far))\n\
    \            (cons (car max-so-far-so-far)\n                  max-so-far)\n  \
    \          (let ((next (rolling_max (cdr max-so-far-so-far))))\n             \
    \ (if (> (car max-so-far-so-far) (car next))\n                  (cons (car max-so-far-so-far)\n\
    \                        max-so-far)\n                  (cons (car next)\n   \
    \                     max-so-far-so-far)))))\n        (let ((next (rolling_max\
    \ (cdr max-so-far-so-far))))\n          (if (> (car max-so-far-so-far) (car next))\n\
    \              (cons (car max-so-far-so-far)\n                    max-so-far)\n\
    \              (cons (car next)\n                    max-so-far-so-far)))))\n",
  "  (let loop ((max-so-far #f)\n             (max-so-far-so-far (list #f))\n    \
    \         (max-so-far-so-far-so-far #f)\n             (max-so-far-so-far-so-far-so-far\
    \ #f)\n             (max-so-far-so-far-so-far-so-far-so-far #f)\n            \
    \ (max-so-far-so-far-so-far-so-far-so-far-so-far #f))\n    (if (null? numbers)\n\
    \        (list max-so-far)\n        (loop (car numbers)\n              (cons (car\
    \ max-so-far-so-far)\n                    (cons (car max-so-far-so-far-so-far)\n\
    \                          (cons (car max-so-far-so-far-so-far-so-far)\n     \
    \                           (cons (car max-so-far-so-far-so-far-so-far-so-far)\n\
    \                                      (cons (car max-so-far-so-far-so-far-so-far-so-far-so-far)\n\
    \                                            (cons (car max-so-far-so-far-so-far-so-far-so-far-so-far)\n\
    \                                                    (cons (car max-so-far-so-far-so-far-so-far-so-far-so-far)\n\
    \                                                            (cons (car max-so-far-so-far-so-far-so-far-so-far-so-far)\n\
    \                                                                    max-so-far-so-far-so-far-so-far-so-far))))))))))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like your solution, however it\
    \ only works with lists of numbers. I need a solution that works with lists of\
    \ any type.\n<|/ c |>\n<| c |>\n: I added a solution that works with lists of\
    \ any type.\n<|/ c |>\n<| c |>\n: I added a solution that works with lists of\
    \ any type.\n<|/ c |>\n<| c |>\n: I added a solution that works with lists of\
    \ any type.\n<|/ c |>\n<| a tags=racket,scheme |>\nHere's a solution using foldl:\n\
    <code>", "  (define (rolling_max-helper numbers acc)\n    (cond\n      [(empty?\
    \ numbers) acc]\n      [(>= (first numbers) (first acc)) (rolling_max-helper (rest\
    \ numbers) (cons (first numbers) acc))]\n      [else (rolling_max-helper (rest\
    \ numbers) acc)]))\n  (rolling_max-helper numbers nil))\n", "  (define (rolling_max-helper\
    \ numbers max-so-far max-so-far-so-far)\n    (cond\n      [(empty? numbers) max-so-far]\n\
    \      [(> (first numbers) max-so-far-so-far) (rolling_max-helper numbers (first\
    \ numbers) max-so-far)]\n      [else (rolling_max-helper (rest numbers) max-so-far\
    \ (first numbers))]))\n  (rolling_max-helper numbers 0 0))\n", "  (let loop ((numbers\
    \ numbers)\n             (max 0))\n    (if (null? numbers)\n        max\n    \
    \    (loop (rest numbers)\n              (if (> max first)\n                 \
    \ max\n                  first))))))\n", "  (if (null? numbers)\n      '()\n \
    \     (let ((max (car numbers))\n            (rolling (list (car numbers))))\n\
    \        (if (null? (cdr numbers))\n            (cons max rolling)\n         \
    \   (let ((next (car numbers))\n                  (rolling (list (car numbers))))\n\
    \              (if (> (car numbers) max)\n                  (cons max rolling)\n\
    \                  (rolling (list (car numbers)))))))\n        (rolling (list\
    \ (car numbers))))))\n", "  (let loop ((max-so-far #f)\n             (max-so-far-so-far\
    \ (reverse max-so-far))\n             (max-so-far-so-far-so-far (reverse max-so-far-so-far)))\n\
    \    (if (null? numbers)\n        (reverse max-so-far)\n        (loop (car numbers)\n\
    \              (cond ((> max-so-far max-so-far-so-far)\n                     (cons\
    \ max-so-far max-so-far-so-far))\n                    ((> max-so-far-so-far-so-far\
    \ max-so-far-so-far)\n                     (cons max-so-far-so-far (reverse max-so-far-so-far-so-far)))\n\
    \                    (else (loop (car numbers)\n                             \
    \ (cons max-so-far-so-far (reverse max-so-far-so-far-so-far))\n              \
    \                (cons max-so-far-so-far-so-far (reverse max-so-far-so-far-so-far))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max-so-far #f)\n                 (max-so-far-so-far (car numbers))\n\
    \                 (max-so-far-so-far-so-far max-so-far))\n        (if (null? (cdr\
    \ numbers))\n            (cons max-so-far max-so-far-so-far)\n            (loop\
    \ (cdr numbers)\n                  (if (> max-so-far max-so-far-so-far)\n    \
    \                  max-so-far\n                      max-so-far-so-far)\n    \
    \              max-so-far-so-far))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (cons max roll)\n            (let ((max (car roll))\n\
    \                  (roll (cdr roll)))\n              (cons max roll))))))\n",
  "  (let loop ((max-so-far #f)\n             (max-so-far-so-far (list #f))\n    \
    \         (max-so-far-so-far-so-far (list #f)))\n    (if (null? numbers)\n   \
    \     (list max-so-far)\n        (loop (car numbers)\n              (cons (car\
    \ max-so-far-so-far)\n                    (cons (car max-so-far-so-far-so-far)\n\
    \                          max-so-far-so-far-so-far))\n              (cons (car\
    \ max-so-far-so-far-so-far)\n                    (cons (car max-so-far-so-far)\n\
    \                          max-so-far-so-far-so-far))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let loop ((numbers numbers)\n                 (max '()))\n\
    \        (if (null? numbers)\n            max\n            (let ((n (car numbers))\n\
    \                  (m (max n)))\n              (loop (cdr numbers)\n         \
    \           (cons m max)))))) ; #lang racket\n", "  (let loop ((numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far-so-far (car numbers))\n\
    \             (max-so-far-so-far-so-far max-so-far))\n    (if (null? numbers)\n\
    \        (list max-so-far)\n        (loop (cdr numbers)\n              (if (>\
    \ max-so-far max-so-far-so-far)\n                  max-so-far\n              \
    \    max-so-far-so-far)\n              (if (> max-so-far-so-far-so-far max-so-far-so-far)\n\
    \                  max-so-far-so-far\n                  max-so-far-so-far-so-far)\n\
    \              (if (> max-so-far-so-far-so-far-so-far max-so-far-so-far)\n   \
    \               max-so-far-so-far-so-far\n                  max-so-far-so-far-so-far-so-far))))))\n",
  "  (let loop ((numbers numbers)\n             (max-list '())\n             (max-so-far\
    \ 0))\n    (if (null? numbers)\n        (reverse max-list)\n        (loop (rest\
    \ numbers)\n              (cons (max max-so-far first)\n                    (cons\
    \ first max-list))\n              (max max-so-far first))))))\n", "  (define (rolling_max-helper\
    \ numbers max-so-far max-so-far-so-far)\n    (cond ((null? numbers) max-so-far)\n\
    \          ((= (length numbers) 1) max-so-far)\n          ((= (length numbers)\
    \ 2) max-so-far-so-far)\n          ((= (length numbers) 3) (if (> (car numbers)\
    \ max-so-far-so-far)\n                                  (rolling_max-helper (cdr\
    \ numbers) max-so-far max-so-far-so-far)\n                                  max-so-far-so-far))\n\
    \          ((= (length numbers) 4) (if (> (car numbers) max-so-far-so-far)\n \
    \                                 (rolling_max-helper (cdr numbers) max-so-far\
    \ max-so-far-so-far)\n                                  (rolling_max-helper (cdr\
    \ numbers) max-so-far-so-far (car numbers))))\n          ((= (length numbers)\
    \ 5) (if (> (car numbers) max-so-far-so-far)\n                               \
    \   (rolling_max-helper (cdr numbers) max-so-far max-so-far-so-far)\n        \
    \                          (rolling_max-helper (cdr numbers) max-so-far-so-far\
    \ (car numbers))\n                                  (rolling_max-helper (cdr numbers)\
    \ max-so-far-so-far (car numbers))))\n          ((= (length numbers) 6) (if (>\
    \ (car numbers) max-so-far-so-far)\n                                  (rolling_max-helper\
    \ (cdr numbers) max-so-far max-so-far-so-far)\n                              \
    \    (rolling_max-helper (cdr numbers) max-so-far-so-far (car numbers))\n    \
    \                              (rolling_max-helper (cdr numbers) max-so-far-so-far\
    \ (car numbers))\n                                  (rolling_max-helper (cdr numbers)\
    \ max-so-far-so-far (car numbers))))\n          ((= (length numbers) 7) (if (>\
    \ (car numbers) max-so-far-so-far)\n                                  (rolling_max-helper\
    \ (cdr numbers) max-so-far max-so-far-so-far)\n                              \
    \    (rolling_max-helper (cdr numbers) max-so-far-so-far (car numbers))\n    \
    \                              (rolling_max-", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            max\n            (let ((max (max max (car roll))))\n\
    \              (if (null? roll)\n                  max\n                  (let\
    \ ((max (max max (car roll))))\n                    (if (null? roll)\n       \
    \                 max\n                        (let ((max (max max (car roll))))\n\
    \                          (if (null? roll)\n                              max\n\
    \                              (let ((max (max max (car roll))))\n           \
    \                     (if (null? roll)\n                                    max\n\
    \                                    (let ((max (max max (car roll))))\n     \
    \                                 (if (null? roll)\n                         \
    \                 max\n                                          (let ((max (max\
    \ max (car roll))))\n                                            (if (null? roll)\n\
    \                                                max\n                       \
    \                         (let ((max (max max (car roll))))\n                \
    \                                  (if (null? roll)\n                        \
    \                              max\n                                         \
    \             (let ((max (max max (car roll))))\n                            \
    \                            (if (null? roll)\n                              \
    \                              max\n                                         \
    \                   (let ((max (max max (car roll))))\n                      \
    \                                        (if (null? roll)\n                  \
    \                                                max\n                       \
    \                                           (let ((max (max max (car roll))))\n\
    \                                                                    (if (null?\
    \ roll)\n                                                                    \
    \    max\n                                                                   \
    \     (let ((max (max max (car roll))))\n                                    \
    \                      (if (null? roll)\n                                    \
    \                          max\n                                             \
    \                 (let ((max (max max (car roll))))\n                        \
    \                                        (if (null? roll)\n                  \
    \                                                  max\n                     \
    \                                               (let ((max (max max (car roll))))\n\
    \                                                      (if (null? roll)\n    \
    \                                                      max\n                 \
    \                                         (let ((max (max max (car roll))))\n\
    \                                                            (if (null? roll)\n\
    \                                                                max\n       \
    \                                                         (let ((max (max max\
    \ (car roll))))\n                                                            \
    \      (if (null? roll)\n                                                    \
    \                max\n                                                       \
    \             (let ((max (max max (car roll))))\n                            \
    \                          (if (null? roll)\n                                \
    \                          max\n                                             \
    \             (let ((max (max max (car roll))))\n                            \
    \                                (if (null? roll)\n                          \
    \                                      max\n                                 \
    \                               (let ((max (max max (car roll))))\n          \
    \                                                        (if (null? roll)\n  \
    \                                                                  max\n     \
    \                                                               (let ((max (max\
    \ max (car roll))))\n                                                      (if\
    \ (null? ", "  (let loop ((numbers numbers)\n             (max-list '())\n   \
    \          (max-so-far 0))\n    (if (null? numbers)\n        (reverse max-list)\n\
    \        (let ((n (car numbers)))\n          (if (> n max-so-far)\n          \
    \    (loop (cdr numbers)\n                    (cons (car numbers) max-list)\n\
    \                    n)\n              (loop (cdr numbers)\n                 \
    \   (cons (car numbers) max-list)\n                    max-so-far)))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n       \
    \          (max '()))\n        (if (null? numbers)\n            max\n        \
    \    (loop (rest numbers)\n                  (cons (max numbers) max)))))\n",
  "  (let loop ((numbers numbers)\n             (max #f)\n             (max-list '()))\n\
    \    (if (null? numbers)\n        (reverse max-list)\n        (let ((n (car numbers))\n\
    \              (max-list (cons n (cons (max max n) max-list))))\n          (loop\
    \ (cdr numbers)\n                max\n                (cons n max-list)))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max '()))\n        (if (null? (cdr numbers))\n            max\n   \
    \         (loop (cdr numbers)\n                  (cons (max (car numbers)) max)))))\n",
  "  (define (rolling_max-helper numbers current-max current-index)\n    (if (null?\
    \ numbers)\n        current-max\n        (let ((next-number (car numbers)))\n\
    \          (if (= current-index 0)\n              (rolling_max-helper (cdr numbers)\
    \ (cons next-max (car numbers)) (cdr numbers))\n              (rolling_max-helper\
    \ (cdr numbers) (cons next-max (car numbers)) (cdr numbers))))))\n  (rolling_max-helper\
    \ numbers #f 0))\n", "  (let loop ((numbers numbers)\n             (max #f)\n\
    \             (max-list '()))\n    (cond ((null? numbers) max-list)\n        \
    \  ((< max numbers) (loop (rest numbers) (max numbers) (cons max max-list)))\n\
    \          (else (loop (rest numbers) (max numbers) max-list)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let loop ((max-so-far #f)\n                 (max-so-far-prev\
    \ #f)\n                 (numbers (rest numbers)))\n        (if (null? numbers)\n\
    \            (list max-so-far)\n            (loop (max max-so-far max-so-far-prev)\n\
    \                  (first numbers)\n                  (rest numbers))))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max '()))\n        (if (null? numbers)\n            max\n         \
    \   (loop (rest numbers)\n                  (cons (max numbers) max)))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n         \
    \   (max-so-far-so-far (reverse max-so-far)))\n        (if (null? (rest numbers))\n\
    \            (cons (car max-so-far-so-far)\n                  max-so-far-so-far)\n\
    \            (let ((next-number (car numbers))\n                  (next-max-so-far\
    \ max-so-far-so-far)\n                  (next-max-so-far-so-far (cdr max-so-far-so-far)))\n\
    \              (if (> (car max-so-far-so-far) next-number)\n                 \
    \ (set! max-so-far next-max-so-far)\n                  (set! max-so-far-so-far\
    \ (cons next-number next-max-so-far-so-far))\n                  (set! max-so-far-so-far\
    \ (rolling_max (cdr numbers)))))))\n", "  (if (null? numbers)\n      '()\n   \
    \   (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            max\n            (if (> max roll)\n              \
    \  max\n                (rolling_max (cdr roll)))))))\n", "  (define (rolling_max-helper\
    \ numbers current-max current-index)\n    (cond [(null? numbers) (list current-max)]\n\
    \          [(< current-index length) (list current-max)]\n          [else (cons\
    \ (max numbers (- current-index length)) (rolling_max-helper numbers (max current-max\
    \ numbers) (+ current-index 1)))]))\n  (rolling_max-helper numbers #f 0))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling (cons (car numbers) '())))\n        (if (null? (cdr numbers))\n   \
    \         (cons max rolling)\n            (let ((next (rolling_max (cdr numbers))))\n\
    \              (if (> (car next) max)\n                  (cons max rolling)\n\
    \                  (cons (car next) rolling)))))\n      )\n    )\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far #f)\n            (max-so-far-so-far\
    \ (car numbers))\n            (max-so-far-so-far-so-far (cdr numbers)))\n    \
    \    (if (> max-so-far max-so-far-so-far)\n            (cons max-so-far max-so-far-so-far)\n\
    \            (cons max-so-far-so-far (rolling_max (cdr numbers)))))))\n", "  (let\
    \ loop ((numbers numbers)\n             (max 0))\n    (if (null? numbers)\n  \
    \      max\n        (loop (rest numbers)\n              (if (> max first)\n  \
    \                max\n                  first))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let loop ((numbers (rest numbers)) (max '()) (i 0))\n     \
    \   (if (< i numbers)\n            (loop (rest numbers) (cons (max max) max) (i\
    \ + 1))\n            (cons (max max) max))))))\n", "  (if (null? numbers)\n  \
    \    '()\n      (let ((max (car numbers))\n            (rolling (list (car numbers))))\n\
    \        (if (null? (cdr numbers))\n            (cons max rolling)\n         \
    \   (let ((new (car numbers))\n                  (rolling (list (car numbers))))\n\
    \              (if (> max new)\n                  (cons max rolling)\n       \
    \           (rolling (list (car numbers)))))))\n        (rolling (list (car numbers))))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (cond ((null? numbers)\
    \ max)\n          ((< max numbers) (loop (rest numbers) max))\n          (else\
    \ (loop (rest numbers) (max numbers))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max 0))\n    (if (null? numbers)\n        max\n        (loop (rest\
    \ numbers)\n              (if (> max first)\n                  max\n         \
    \         (max first))))))\n", "  (if (null? numbers)\n      '()\n      (let loop\
    \ ((numbers numbers)\n                 (max '()))\n        (if (null? numbers)\n\
    \            max\n            (loop (rest numbers)\n                  (if (> (first\
    \ numbers) max)\n                      max\n                      (first numbers)))))))\n",
  "  (let loop ((numbers numbers)\n             (max-list '()))\n    (cond ((null?\
    \ numbers) max-list)\n          ((null? (cdr numbers)) max-list)\n          (else\
    \ (loop (cdr numbers)\n                      (cons (max (car numbers) max-list)\n\
    \                            max-list)))))\n  max-list)\n", "  (let loop ((max-so-far\
    \ #f)\n             (max-so-far-list '())\n             (numbers (reverse numbers)))\n\
    \    (if (null? numbers)\n        (reverse max-so-far-list)\n        (let ((number\
    \ (car numbers))\n              (max-so-fa (max max-so-far number)))\n       \
    \   (if (< number max-so-far)\n              (loop (max max-so-far number)\n \
    \                   (cons max-so-far max-so-far-list)\n                    (cons\
    \ number numbers))\n              (loop (max max-so-far number)\n            \
    \        (cons max-so-far max-so-far-list)\n                    (cons number numbers))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            max\n         \
    \   (if (> max roll)\n                max\n                (rolling_max (cdr roll)))))))\n",
  "  (let loop ((numbers numbers)\n             (max 0))\n    (if (null? numbers)\n\
    \        max\n        (loop (cdr numbers)\n              (if (> (car numbers)\
    \ max)\n                  max\n                  (car numbers))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (roll\
    \ (cdr numbers)))\n        (if (null? roll)\n            max\n            (if\
    \ (> max roll)\n                max\n                (rolling_max (cdr roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling (rolling_max (cdr numbers))))\n        (cond ((> max rolling) max)\n\
    \              ((< max rolling) (cons max rolling))\n              (else (cons\
    \ max rolling)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         (cons max roll)\n            (cons (max max) roll)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (list max)\n            (let\
    \ ((max (max max roll)))\n              (cons max roll (rolling_max (cdr roll))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max-so-far #f)\n                 (max-so-far-so-far (car numbers))\n\
    \                 (max-so-far-so-far-so-far max-so-far))\n        (if (null? (cdr\
    \ numbers))\n            (cons max-so-far max-so-far-so-far)\n            (loop\
    \ (cdr numbers)\n                  (if (> max-so-far max-so-far-so-far)\n    \
    \                  max-so-far\n                      max-so-far-so-far)\n    \
    \              max-so-far-so-far))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            max\n            (let ((max (max max (car roll))))\n\
    \              (if (null? roll)\n                  max\n                  (rolling_max\
    \ (cdr roll)))))))\n", "  (let loop ((numbers numbers)\n             (max-so-far\
    \ #f)\n             (max-so-far-so-far (max max-so-far #f)))\n    (cond\n    \
    \  [(empty? numbers) max-so-far]\n      [(< max-so-far max-so-far-so-far) max-so-far]\n\
    \      [else (loop (rest numbers)\n                  (max max-so-far max-so-far-so-far)\n\
    \                  (max max-so-far max-so-far-so-far))]))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            max\n            (rolling_max\
    \ (cons max roll))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (max-list (cdr numbers)))\n        (if (null? max-list)\n\
    \            max\n            (rolling_max (cdr max-list))))))\n", "  (let loop\
    \ ((max-so-far #f)\n             (max-so-far-seen #f)\n             (numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far-seen #f)\n           \
    \  (max-so-far #f)\n             (max-so-far-seen #f)\n             (max-so-far\
    \ #f)\n             (max-so-far-seen #f)\n             (max-so-far #f)\n     \
    \        (max-so-far-seen #f)\n             (max-so-far #f)\n             (max-so-far-seen\
    \ #f)\n             (max-so-far #f)\n             (max-so-far-seen #f)\n     \
    \        (max-so-far #f)\n             (max-so-far-seen #f)\n             (max-so-far\
    \ #f)\n             (max-so-far-seen #f)\n             (max-so-far #f)\n     \
    \        (max-so-far-seen #f)\n             (max-so-far #f)\n             (max-so-far-seen\
    \ #f)\n             (max-so-far #f)\n             (max-so-far-seen #f)\n     \
    \        (max-so-far #f)\n             (max-so-far-seen #f)\n             (max-so-far\
    \ #f)\n             (max-so-far-seen #f)\n             (max-so-far #f)\n     \
    \        (max-so-far-seen #f)\n             (max-so-far #f)\n             (max-so-far-seen\
    \ #f)\n             (max-so-far #f)\n             (max-so-far-seen #f)\n     \
    \        (max-so-far #f)\n             (max-so-far-seen #f)\n             (max-so-far\
    \ #f)\n             (max-so-far-seen #f)\n             (max-so-far #f)\n     \
    \        (max-so-far-seen #f)\n             (max-so-far #f)\n             (max-so-far-seen\
    \ #f)\n             (max-so-far #f)\n             (max-so-far-seen #f)\n     \
    \        (max-so-far #f)\n             (max-so-far-seen #f)\n             (max-so-far\
    \ #f)\n             (max-so-far-seen #f)\n             (max-so-far #f)\n     \
    \        (max-so-far-seen #f)\n             (max-so-far #f)\n             (max-so-far-seen\
    \ #f)\n             (max-so-far #f)\n             (max-so-far-seen #f)\n     \
    \        (max-so-far #f)\n             (max-so-far-seen #f)", "  (define (rolling_max-helper\
    \ numbers index max)\n    (cond [(null? numbers) (list max)]\n          [(< index\
    \ (length numbers)) (rolling_max-helper (rest numbers) (+ index 1) max)]\n   \
    \       [else (rolling_max-helper (rest numbers) (+ index 1) (max numbers (car\
    \ numbers)))]))\n  (rolling_max-helper numbers 0 0))\n", "  (if (null? numbers)\n\
    \      '()\n      (let loop ((numbers numbers)\n                 (max '()))\n\
    \        (if (null? numbers)\n            max\n            (loop (rest numbers)\n\
    \                  (if (> (first numbers) max)\n                      max\n  \
    \                    (first numbers)))))))\n", "  (define (rolling_max-helper\
    \ numbers current-max current-index)\n    (cond [(empty? numbers) (list current-max)]\n\
    \          [(< (car numbers) current-max) (list current-max)]\n          [else\
    \ (rolling_max-helper\n                    (tail numbers)\n                  \
    \  (cons (car numbers) current-max)\n                    (+ current-index 1))]))\n\
    \  (rolling_max-helper numbers nil 0))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n       \
    \     (list max)\n            (let ((next (rolling_max (cdr numbers))))\n    \
    \          (if (> (car next) max)\n                  (list max)\n            \
    \      (cons (car next) next)))))\n      )\n    )\n  )\n", "  (define (rolling_max-helper\
    \ numbers current-max current-index)\n    (if (null? numbers)\n        current-max\n\
    \        (let ((next-number (car numbers)))\n          (if (= current-index 0)\n\
    \              (rolling_max-helper (cdr numbers) (if (> next-number current-max)\
    \ next-number current-max) (cdr numbers))\n              (rolling_max-helper (cdr\
    \ numbers) (if (> next-number current-max) next-number current-max) (cons next-number\
    \ (cdr numbers))))))\n  (rolling_max-helper numbers #f 0))\n", "  (define (rolling_max-helper\
    \ numbers rolling-max-index max-so-far max-so-far-so-far)\n    (cond [(null? numbers)\
    \ (list max-so-far)]\n          [(> (car numbers) max-so-far) (list max-so-far)]\n\
    \          [(= (modulo (car numbers) rolling-max-index) max-so-far-so-far)\n \
    \          (rolling_max-helper (cdr numbers) rolling-max-index (car numbers) max-so-far)]\n\
    \          [else (rolling_max-helper (cdr numbers) rolling-max-index (car numbers)\
    \ max-so-far)]))\n  (rolling_max-helper numbers 0 0 (car numbers)))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (roll\
    \ (cdr numbers)))\n        (if (null? roll)\n            max\n            (if\
    \ (> max roll)\n                max\n                (rolling_max (cdr roll)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
