name: HumanEval_100_make_a_pile
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, you have to make a pile of\
  \ n levels of stones.\n;; The first level has n stones.\n;; The number of stones\
  \ in the next level is:\n;; - the next odd number if n is odd.\n;; - the next even\
  \ number if n is even.\n;; Return the number of stones in each level in a list,\
  \ where element at index\n;; i represents the number of stones in the level (i+1).\n\
  ;; Examples:\n(define (make_a_pile n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n\
  \    (check-equal? (candidate 3) (list 3 5 7))\n    (check-equal? (candidate 4)\
  \ (list 4 6 8 10))\n    (check-equal? (candidate 5) (list 5 7 9 11 13))\n    (check-equal?\
  \ (candidate 6) (list 6 8 10 12 14 16))\n    (check-equal? (candidate 8) (list 8\
  \ 10 12 14 16 18 20 22))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (- n 2) (make_a_pile\
    \ (/ n 2)))]\n    [else (cons (- n 1) (make_a_pile (/ n 1)))]))\n", "  (if (=\
    \ n 0)\n      '()\n      (cons (make-pile-of n) (make_a_pile (- n 1)))))\n", " \
    \ (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n               (if\
    \ (even? n)\n                   (+ 1 (floor (/ n 2)))\n                   (+ 1\
    \ (floor (/ n 2))))\n               (make_a_pile (- n 1)))))\n", "  (cond\n  \
    \  [(= n 0) '()]\n    [(even? n) (cons (- n 1) (make_a_pile (/ n 2)))]\n    [(odd?\
    \ n) (cons (- n 1) (make_a_pile (* n 2)))]\n    [else (make_a_pile (/ n 2))]))\n",
  "  (if (= n 0)\n      '()\n      (cons (make-pile-element n) (make_a_pile (- n 1)))))\n",
  "  (let loop ((n n) (piles '()))\n    (if (= n 0)\n        (reverse piles)\n   \
    \     (loop (- n 1) (cons (- n 1) piles)))))\n", "  (if (= n 0)\n      '()\n \
    \     (cons (make-pile-element n) (make_a_pile (- n 1)))))\n", "  (cond\n    [(=\
    \ n 0) '()]\n    [(odd? n) (cons n (make_a_pile (- n 2)))]\n    [(even? n) (cons\
    \ n (make_a_pile (- n 1)))]))\n", "  (cond\n    [(zero? n) '()]\n    [(odd? n)\
    \ (cons (+ n (floor (/ n 2))) (make_a_pile (- n 2)))]\n    [else (cons (+ n (floor\
    \ (/ n 2))) (make_a_pile (- n 2)))]))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (make-pile-element n) (make_a_pile (- n 2)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (make-pile-of n) (make_a_pile (- n 1)))))\n", "  (let loop ((n n)\
    \ (piles '()))\n    (if (= n 0)\n        piles\n        (loop (- n 1)\n      \
    \        (cons (mod n 2) piles)))))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (- n (floor (/ n 2))\n              (if (even? n)\n                  (+ 1 (floor\
    \ (/ n 2)))\n                  (+ 1 (floor (/ n 2))))\n              (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (make-level-pile\n  \
    \             (if (even? n)\n                   (+ n 1)\n                   (-\
    \ n 1))\n               (if (odd? n)\n                   (+ n 1)\n           \
    \        (- n 1))\n               (make-level-pile\n                   (if (even?\
    \ n)\n                       (+ n 1)\n                       (- n 1))\n      \
    \             (if (odd? n)\n                       (+ n 1)\n                 \
    \      (- n 1))\n                   (make-level-pile\n                       (if\
    \ (even? n)\n                           (+ n 1)\n                           (-\
    \ n 1))\n                       (if (odd? n)\n                           (+ n\
    \ 1)\n                           (- n 1))\n                       (make-level-pile\n\
    \                           (if (even? n)\n                               (+ n\
    \ 1)\n                               (- n 1))\n                           (if\
    \ (odd? n)\n                               (+ n 1)\n                         \
    \      (- n 1))\n                           (make-level-pile\n               \
    \                (if (even? n)\n                                   (+ n 1)\n \
    \                                  (- n 1))\n                               (if\
    \ (odd? n)\n                                   (+ n 1)\n                     \
    \              (- n 1)))))))))\n", "  (let loop ((n n) (piles '()))\n    (if (=\
    \ n 0)\n        piles\n        (loop (- n 1)\n              (cons (mod n 2) piles)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n               (if\
    \ (odd? n)\n                   (floor (/ n 2))\n                   (floor (/ n\
    \ 2)))\n               (make_a_pile (- n 1)))))\n", "  (cond\n    [(= n 0) (list\
    \ 0)]\n    [(even? n) (cons (- n (floor (/ n 2))) (make_a_pile (/ n 2)))]\n  \
    \  [else (cons (- n (floor (/ n 2))) (make_a_pile (/ n 2)))]))\n", "  (if (= n\
    \ 0)\n      '()\n      (cons (make-pile\n               (if (even? n)\n      \
    \             (+ n 1)\n                   (- n 1))\n               n)\n      \
    \      (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (make-level-pile\n\
    \               (if (even? n)\n                   (- n 2)\n                  \
    \ (- n 1))\n               n)\n            (make_a_pile (- n 1)))))\n", "  (if\
    \ (= n 0)\n      '()\n      (cons (make-pile-of n) (make_a_pile (- n 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
