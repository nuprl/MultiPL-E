name: HumanEval_136_largest_smallest_integers
language: rkt
prompt: "#lang racket\n\n;; Create a function that returns a tuple (a, b), where 'a'\
  \ is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive\
  \ integers in a list.\n;; If there is no negative or positive integers, return them\
  \ as None.\n;; Examples:\n(define (largest_smallest_integers lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n\
  \    (check-equal? (candidate (list 2 4 1 3 5 7)) (list #f 1))\n    (check-equal?\
  \ (candidate (list 2 4 1 3 5 7 0)) (list #f 1))\n    (check-equal? (candidate (list\
  \ 1 3 2 4 5 6 -2)) (list -2 1))\n    (check-equal? (candidate (list 4 5 3 6 2 7\
  \ -7)) (list -7 2))\n    (check-equal? (candidate (list 7 3 8 4 9 2 5 -9)) (list\
  \ -9 2))\n    (check-equal? (candidate (list )) (list #f #f))\n    (check-equal?\
  \ (candidate (list 0)) (list #f #f))\n    (check-equal? (candidate (list -1 -3 -5\
  \ -6)) (list -1 #f))\n    (check-equal? (candidate (list -1 -3 -5 -6 0)) (list -1\
  \ #f))\n    (check-equal? (candidate (list -6 -4 -4 -3 1)) (list -3 1))\n    (check-equal?\
  \ (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (list (first\
    \ lst) (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(number? (car lst)) (list (car lst) (smallest-negative-integer\
    \ (cdr lst)))]\n    [else (list (car lst) (largest-positive-integer (cdr lst)))]))\n",
  "  (cond [(empty? lst) '()]\n        [(< (first lst) 0) (cons (first lst) '())]\n\
    \        [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(null?\
    \ lst) '()]\n        [(< (car lst) 0) (cons (car lst) '())]\n        [else (cons\
    \ (car lst) (largest_smallest_integers (cdr lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\
    \ '()]\n        [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst)\
    \ (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(negative? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [else (cons (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (car lst)) (cons\
    \ (car lst) (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond [(empty? lst) '()]\n        [(negative? (first lst)) (first\
    \ lst)]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(negative? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [(positive? (first lst)) (largest_smallest_integers (rest\
    \ lst))]\n        [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first\
    \ lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n \
    \   [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (cons (largest_smallest_integers (first lst)) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(positive? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [(negative?\
    \ (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \  [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst) '()]\n        [(number? (first lst)) (list (first lst) (first\
    \ lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (first lst))\
    \ (list (first lst) (first lst))]\n        [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond [(empty? lst) '()]\n        [(or (negative? (first lst))\n\
    \             (positive? (first lst)))\n         (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst)\
    \ (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(positive? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [(negative? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst)\
    \ (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(negative? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [(positive? (first lst)) (largest_smallest_integers (rest\
    \ lst))]\n        [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst) (list '() '())]\n        [(number? (first lst)) (list (first\
    \ lst) (second lst))]\n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(empty? lst) '()]\n        [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst) (list None None)]\n        [(number? (car lst)) (list (car\
    \ lst) (largest-smallest-integers (cdr lst)))]\n        [else (list (largest-smallest-integers\
    \ (car lst)) (largest-smallest-integers (cdr lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(negative? (first lst)) (largest_smallest_integers (rest lst))]\n\
    \    [(positive? (first lst)) (largest_smallest_integers (rest lst))]\n    [else\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(empty?\
    \ lst) '()]\n        [(< (first lst) 0) (largest_smallest_integers (rest lst))]\n\
    \        [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst) '()]\n        [(number? (car lst)) (list (car lst) (car lst))]\n\
    \        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n    [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst) '()]\n\
    \        [(negative? (first lst)) (largest_smallest_integers (rest lst))]\n  \
    \      [(positive? (first lst)) (largest_smallest_integers (rest lst))]\n    \
    \    [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n", " \
    \ (cond [(empty? lst) '()]\n        [(number? (first lst)) (list (first lst) (first\
    \ lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) (list 'none 'none)]\n        [(number? (first lst)) (list (first\
    \ lst) (first lst))]\n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first\
    \ lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty?\
    \ lst) '()]\n        [(number? (first lst)) (first lst)]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(> (first lst) 0)\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) '()]\n        [(negative? (first lst))\
    \ (largest_smallest_integers (rest lst))]\n        [(positive? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [else (cons (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond [(empty? lst) '()]\n        [(integer? (first lst)) (first\
    \ lst)]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(< (first lst) 0) (first lst)]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(< (first lst) 0)\
    \ (largest_smallest_integers (rest lst))]\n    [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(negative? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [(positive?\
    \ (first lst)) (largest_smallest_integers (rest lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (first lst)) (first\
    \ lst)]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(< (first lst) 0) (largest_smallest_integers (rest\
    \ lst))]\n    [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst) '()]\n        [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst) '()]\n        [(integer? (first lst)) (first lst)]\n   \
    \     [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\
    \ '()]\n        [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (car lst))\
    \ (cons (car lst) (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n        [else (cons\
    \ (largest_smallest_integers (first lst)) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(< (first lst) 0) (largest_smallest_integers (rest\
    \ lst))]\n    [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst) '()]\n        [(< (first lst) 0) (list (first lst) 'None)]\n\
    \        [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst) '()]\n        [(or (< 0 (car lst)) (> 0 (car lst)))\n   \
    \      (cons (car lst) (largest_smallest_integers (cdr lst)))]\n        [else\
    \ (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty? lst) '()]\n\
    \    [(number? (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond [(empty? lst) '()]\n        [(integer? (first lst)) (first\
    \ lst)]\n        [else (let ([a (largest_smallest_integers (rest lst))\n     \
    \                 b (smallest_largest_integers (rest lst))])\n              (cond\
    \ [(< a b) a]\n                    [else b]))]))\n", "  (cond [(empty? lst) '()]\n\
    \        [(number? (first lst)) (cons (first lst) (largest_smallest_integers (rest\
    \ lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) '()]\n        [(> (first lst) 0) (cons\
    \ (first lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) '()]\n        [(< (first lst) 0) (first\
    \ lst)]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (second\
    \ lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n \
    \   [(empty? lst) '()]\n    [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(integer? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [(negative? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (cons (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond [(empty? lst) '()]\n        [(negative? (first lst))\
    \ (largest_smallest_integers (rest lst))]\n        [else (smallest_largest (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(empty? lst) '()]\n\
    \        [(negative? (first lst)) (largest_smallest_integers (rest lst))]\n  \
    \      [else (smallest_largest (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst) (list 'none 'none)]\n        [(integer? (first lst)) (list\
    \ (first lst) (first lst))]\n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(integer? (first lst)) (first lst)]\n        [else\
    \ (let ([a (largest_smallest_integers (rest lst))\n                      b (largest_smallest_integers\
    \ (rest lst))]\n                  [a (if (< a 0) (- a) a)\n                  \
    \ b (if (> b 0) (- b) b)])\n              (cons a b))]))\n", "  (cond [(empty?\
    \ lst) '()]\n        [(number? (first lst)) (first lst)]\n        [else (let ([a\
    \ (largest_smallest_integers (rest lst))\n                      b (largest_smallest_integers\
    \ (rest lst))])\n              (if (< a b)\n                  (cons a b)\n   \
    \               (cons b a)))]))\n", "  (cond [(empty? lst) '()]\n        [(> (first\
    \ lst) 0) (cons (first lst) (largest_smallest_integers (rest lst)))]\n       \
    \ [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (car lst)) (car lst)]\n    [else (let ([a\
    \ (largest_smallest_integers (cdr lst))])\n            (cond\n              [(<\
    \ a (car lst)) (cons a (car lst))]\n              [(> a (car lst)) (cons (car\
    \ lst) a)]\n              [else (largest_smallest_integers (cdr lst))]))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) (list '() '())]\n    [(number? (car lst)) (list (car lst) (smallest\
    \ (cdr lst)))]\n    [else (list (car lst) (largest (cdr lst)))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(integer? (first lst)) (first lst)]\n        [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n\
    \    [(number? (car lst)) (list (car lst) (smallest (cdr lst)))]\n    [else (list\
    \ (car lst) (largest (cdr lst)))]))\n", "  (cond\n    [(empty? lst) '()]\n   \
    \ [(number? (car lst)) (cons (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond [(empty? lst)\
    \ '()]\n        [(integer? (first lst)) (first lst)]\n        [else (let ([a (largest_smallest_integers\
    \ (rest lst))])\n                (let ([b (smallest_largest_integers (rest lst))])\n\
    \                  (cons (cons a b) '()))]))))\n", "  (cond\n    [(empty? lst)\
    \ '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n    [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n\
    \    [(number? (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (car lst)) (car\
    \ lst)]\n        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(number? (first lst)) (list (first lst) (first\
    \ lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(< (first lst) (first '()))\n     (largest_smallest_integers\
    \ (rest lst))]\n    [(> (first lst) (first '()))\n     (largest_smallest_integers\
    \ (rest lst))]\n    [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst) '()]\n        [(number? (first lst)) (first lst)]\n     \
    \   [else (let ([a (largest_smallest_integers (rest lst))\n                  \
    \    b (largest_smallest_integers (rest lst))])\n              (if (< a b)\n \
    \                 (cons a b)\n                  (cons b a)))]))\n", "  (cond [(empty?\
    \ lst) '()]\n        [(number? (first lst)) (list (first lst) (first lst))]\n\
    \        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n    [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n\
    \    [(number? (car lst)) (list (car lst) (smallest (cdr lst)))]\n    [else (list\
    \ (car lst) (largest (cdr lst)))]))\n", "  (cond\n    [(empty? lst) '()]\n   \
    \ [(number? (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\
    \ '()]\n        [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst) '()]\n        [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst) '()]\n        [(number? (first lst)) (list (first lst) (first\
    \ lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\
    \ [(empty? lst) (list '() '())]\n        [(number? (first lst)) (list (first lst)\
    \ (first lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) '()]\n        [(integer? (first lst))\
    \ (first lst)]\n        [else (let ([a (largest_smallest_integers (rest lst))])\n\
    \                (let ([b (largest_smallest_integers (rest lst))])\n         \
    \         (cond [(< a b) a]\n                        [(> a b) b]\n           \
    \             [else (cons a b)]))]))\n", "  (cond\n    [(empty? lst) '()]\n  \
    \  [(number? (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n    [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n\
    \    [(number? (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (car lst))\
    \ (list (car lst) (smallest (cdr lst)))]\n        [else (list (car lst) (largest\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (car lst))\
    \ (list (car lst) (smallest-negative-integer (cdr lst)))]\n    [else (list (car\
    \ lst) (largest_smallest_integers (cdr lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ (list 'none 'none)]\n    [(number? (first lst)) (list 'none (first lst))]\n\
    \    [else (let ([a (largest_smallest_integers (rest lst))]\n               [b\
    \ smallest_integers (rest lst)])\n           (cond\n             [(< a b) (list\
    \ 'none 'none)]\n             [(< b a) (list a (first lst))]\n             [else\
    \ (list a (first lst) b)]))]))\n", "  (cond [(empty? lst) '()]\n        [(< (first\
    \ lst) 0) (first lst)]\n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(integer? (first lst)) (list (first lst) (second\
    \ lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n \
    \   [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(or (negative? (first lst))\n             (positive?\
    \ (first lst)))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst) '()]\n        [(or (< first lst) (> first lst)) (list first\
    \ lst)]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\
    \ '()]\n        [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (car lst)) (cons\
    \ (car lst) (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (car lst))\
    \ (cons (car lst) (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst) '()]\n        [(> (first lst) 0) (cons\
    \ (first lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list '() '())]\n    [(number?\
    \ (car lst)) (list (car lst) (smallest (cdr lst)))]\n    [else (list (car lst)\
    \ (largest (cdr lst)))]))\n", "  (cond [(null? lst) '()]\n        [(< (car lst)\
    \ 0) (cons (car lst) '())]\n        [else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (first lst))\
    \ (list (first lst) (first lst))]\n        [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (first lst)) (cons\
    \ (first lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (car lst))\
    \ (list (car lst) (smallest (cdr lst)))]\n    [else (list (car lst) (largest (cdr\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(integer? (car lst)) (list\
    \ (car lst) (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst) '()]\n        [(number? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(< (first lst) 0)\
    \ (largest_smallest_integers (rest lst))]\n    [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst) '()]\n        [(positive? (first\
    \ lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n        [(negative?\
    \ (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \      [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(positive? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [(negative? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (cons (largest_smallest_integers (rest lst)) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (cons\
    \ (first lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list '() '())]\n    [(number?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (car lst))\
    \ (list (car lst) (smallest (cdr lst)))]\n    [else (list (car lst) (largest (cdr\
    \ lst)))]))\n", "  (cond [(empty? lst) '()]\n        [(integer? (first lst)) (cons\
    \ (first lst) (largest_smallest_integers (rest lst)))]\n        [else (cons (max\
    \ (first lst) (first lst)) (largest_smallest_integers (rest lst)))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(integer? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (list\
    \ (first lst) (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first\
    \ lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n \
    \   [(empty? lst) '()]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(> (first lst) 0) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (cons (max (car lst) (largest_smallest_integers\
    \ (cdr lst))) (largest_smallest_integers (cdr lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) (list '() '())]\n    [(number? (car lst)) (list (car lst) (smallest (cdr\
    \ lst)))]\n    [else (list (car lst) (largest (cdr lst)))]))\n", "  (cond [(empty?\
    \ lst) (list '() '())]\n        [(number? (car lst)) (list (car lst) (smallest\
    \ (cdr lst)))]\n        [else (list (car lst) (largest (cdr lst)))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(null? lst) '()]\n        [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond [(empty? lst) '()]\n        [(negative? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [(positive? (first lst)) (largest_smallest_integers (rest\
    \ lst))]\n        [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(number? (car lst)) (list (car lst) (smallest\
    \ (cdr lst)))]\n    [else (list (car lst) (largest (cdr lst)))]))\n", "  (cond\
    \ [(empty? lst) '()]\n        [(number? (car lst)) (car lst)]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst) '()]\n        [(negative? (first lst))\
    \ (largest_smallest_integers (rest lst))]\n        [(positive? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [else (cons (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(number? (car lst)) (list\
    \ (car lst) (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst) '()]\n        [(or (< 0 (car lst))\
    \ (> 0 (car lst))) (cons (car lst) (largest_smallest_integers (cdr lst)))]\n \
    \       [else (largest_smallest_integers (cdr lst))]))\n", "  (cond [(empty? lst)\
    \ '()]\n        [(< (first lst) (first '(None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None ", "  (cond\n    [(empty? lst) '()]\n    [(number? (car\
    \ lst)) (cons (car lst) (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(< (first lst) 0) (list\
    \ (first lst) 'None)]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(integer? (first lst)) (list (first lst)\
    \ (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(number? (first lst)) (list (first lst) (first lst))]\n    [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst) '()]\n\
    \        [(< (first lst) 0) (first lst)]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
