name: HumanEval_22_filter_integers
language: rkt
prompt: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
  (define (filter_integers values)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
  \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
completions: ["  (filter (lambda (v) (number? v)) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (val) (number?\
    \ val))\n          values))\n", "  (filter (lambda (x) (number? x))\n        \
    \  values))\n", "  (filter (lambda (x) (number? x))\n          values))\n", " \
    \ (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (x) (number? x))\
    \ values))\n", "  (filter (lambda (val) (number? val))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (v) (and (number? v) (integer?\
    \ v)))\n         values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (filter (lambda\
    \ (x y)\n            (and (number? x) (number? y))\n            (= (- x y) 0))\n\
    \          values))\n", "  (filter (lambda (x) (number? x))\n         values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (val) (and (number? val) (integer? val))) values))\n", "  (filter (lambda (val)\
    \ (number? val))\n          values))\n", "  (filter (lambda (v) (number? v)) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (val) (number?\
    \ val))\n          values))\n", "  (filter (lambda (val) (and (number? val) (integer?\
    \ val))) values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (val) (and (number? val) (integer? val)))\n         values))\n",
  "  (filter number? values))\n", "  (filter (lambda (x) (number? x))\n         values))\n",
  "  (filter (lambda (v) (and (number? v) (integer? v)))\n         values))\n", " \
    \ (filter (lambda (val) (and (number? val) (integer? val)))\n         values))\n",
  "  (filter (lambda (v) (number? v)) values))\n", "  (filter (lambda (val) (number?\
    \ val))\n          values))\n", "  (filter (lambda (x) (number? x))\n        \
    \  values))\n", "  (filter (lambda (x) (number? x))\n          values))\n", " \
    \ (filter (lambda (val) (number? val))\n          values))\n", "  (filter (lambda\
    \ (v) (number? v)) values))\n", "  (filter (lambda (val) (number? val))\n    \
    \      values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (val) (number? val))\n          values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (val) (number? val))\n\
    \          values))\n", "  (filter (lambda (x) (number? x))\n         values))\n",
  "  (filter (lambda (x y)\n            (and (number? x)\n                 (number?\
    \ y))\n            (integer? x))\n          values))\n", "  (filter (lambda (val)\
    \ (and (number? val) (integer? val)))\n         values))\n", "  (filter (lambda\
    \ (v) (and (number? v) (integer? v)))\n         values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (val) (and (number? val) (integer? val))) values))\n", "  (filter\
    \ (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter number?\
    \ values))\n", "  (filter number? values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x y)\n            (and (number?\
    \ x)\n                 (number? y))\n            (= x y))\n          values))\n",
  "  (filter (lambda (x y)\n            (and (number? x)\n                 (number?\
    \ y))\n            (integer? x))\n          values))\n", "  (filter (lambda (x)\
    \ (number? x))\n          values))\n", "  (filter (lambda (x) (and (number? x)\
    \ (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (x y)\n            (and (number?\
    \ x)\n                 (number? y))\n            (= (- x y) 0))\n          values))\n",
  "  (filter (lambda (val) (number? val))\n          values))\n", "  (filter (lambda\
    \ (v) (number? v)) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter number? values))\n", " \
    \ (filter (lambda (v) (and (number? v) (integer? v)))\n         values))\n", " \
    \ (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter number? values))\n",
  "  (filter (lambda (x) (number? x)) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (item)\n            (and (number?\
    \ item)\n                 (not (negative? item)))) values))\n", "  (filter (lambda\
    \ (item)\n            (and (number? item)\n                 (not (integer? item))))\
    \ values))\n", "  (filter (lambda (x) (number? x))\n          values))\n", " \
    \ (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter\
    \ (lambda (x) (number? x))\n          values))\n", "  (cond [(empty? values) '()]\n\
    \        [(number? values) values]\n        [else (append (filter_integers (first\
    \ values))\n                    (filter_integers (rest values)))]))\n", "  (filter\
    \ (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (cond [(empty? values) '()]\n  \
    \      [(number? values) values]\n        [else (cons (first values) (filter_integers\
    \ (rest values)))]))\n", "  (filter (lambda (item)\n            (and (number?\
    \ item)\n                 (not (integer? item)))) values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (x) (number? x))\n\
    \          values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n         values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x)) values))\n", "  (filter (lambda (val) (and (number?\
    \ val) (integer? val)))\n         values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (v) (and (number? v) (integer?\
    \ v))) values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (number? x))\n          values))\n", "  (filter (lambda (x y)\n            (and\
    \ (number? x)\n                 (number? y))\n            (= x y))\n         \
    \ values))\n", "  (filter (lambda (val) (and (number? val) (integer? val)))\n\
    \         values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (number? x))\n         values))\n", "  (filter (lambda (x) (number? x))\n  \
    \        values))\n", "  (filter (lambda (x y)\n            (and (number? x)\n\
    \                 (number? y))\n            (integer? x) (integer? y))\n     \
    \     values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x y)\n\
    \            (and (number? x)\n                 (number? y))\n            (= (-\
    \ x y) 0))\n          values))\n", "  (filter (lambda (x) (number? x))\n     \
    \     values))\n", "  (filter (lambda (val) (number? val))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter number?\
    \ values))\n", "  (filter (lambda (v) (number? v)) values))\n", "  (filter (lambda\
    \ (x) (number? x)) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x))\n         values))\n", "  (filter (lambda (x)\
    \ (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (v) (number? v)) values))\n", "  (filter\
    \ (lambda (item)\n            (and (number? item)\n                 (not (negative?\
    \ item)))) values))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter number? values))\n", "  (filter (lambda (v) (number? v)) values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (val)\
    \ (and (number? val) (integer? val)))\n         values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (val) (number?\
    \ val))\n          values))\n", "  (filter (lambda (x) (number? x))\n        \
    \  values))\n", "  (filter (lambda (x) (number? x))\n          values))\n", " \
    \ (filter (lambda (val) (number? val))\n          values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n       \
    \   values))\n", "  (filter (lambda (v) (number? v)) values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (v) (number? v))\
    \ values))\n", "  (filter (lambda (x) (number? x))\n          values))\n", " \
    \ (filter (lambda (x) (number? x))\n         values))\n", "  (filter number? values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (cond [(empty? values) '()]\n\
    \        [(number? (car values)) (cons (car values) (filter_integers (cdr values)))]\n\
    \        [else (filter_integers (cdr values))]))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n\
    \          values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (item)\n            (and (number? item)\n                 (not\
    \ (integer? item)))) values))\n", "  (filter (lambda (x) (number? x))\n      \
    \    values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (append (filter_integers\
    \ (first values))\n                      (filter_integers (rest values)))]))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (v) (number?\
    \ v)) values))\n", "  (filter (lambda (item)\n            (and (number? item)\n\
    \                 (not (integer? item)))) values))\n", "  (cond [(empty? values)\
    \ '()]\n        [(number? (car values)) (cons (car values) (filter_integers (cdr\
    \ values)))]\n        [else (filter_integers (cdr values))]))\n", "  (filter (lambda\
    \ (val) (number? val))\n          values))\n", "  (filter (lambda (val) (number?\
    \ val))\n          values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
