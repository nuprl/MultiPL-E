name: HumanEval_147_get_max_triples
language: pl
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples(5)\n\
  # 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7,\
  \ 13).\nsub get_max_triples {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n\
  \        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(6),4)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    for (my $i = 1; $i < $n - 1; $i++) {\n    \
    \    for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k\
    \ <= $n; $k++) {\n                $count++ if (($i * $i - $i + 1 + $j * $j - $j\
    \ + 1 + $k * $k - $k + 1) % 3 == 0);\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n\
    \    for (my $i = 0; $i < $n - 2; $i++) {\n        for (my $j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n          \
    \      if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for my $i (1..$n-2) {\n        for my $j ($i+1..$n-1)\
    \ {\n            for my $k ($j+1..$n) {\n                $count++ if (($i*$i -\
    \ $i + 1 + $j*$j - $j + 1 + $k*$k - $k + 1) % 3 == 0);\n            }\n      \
    \  }\n    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 1;\
    \ $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n          \
    \  for (my $k = $j + 1; $k < $n; $k++) {\n                if (($i * $i - $i +\
    \ 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for my $i (1..$n-2) {\n        for my $j ($i+1..$n-1)\
    \ {\n            for my $k ($j+1..$n) {\n                my $sum = $i*$i - $i\
    \ + 1 + $j*$j - $j + 1 + $k*$k - $k + 1;\n                $count++ if $sum % 3\
    \ == 0;\n            }\n        }\n    }\n    return $count;\n}", "    my $a =\
    \ [];\n    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $a->[$i]\
    \ = $i * $i - $i + 1;\n    }\n    for (my $i = 1; $i <= $n; $i++) {\n        for\
    \ (my $j = $i + 1; $j <= $n; $j++) {\n            for (my $k = $j + 1; $k <= $n;\
    \ $k++) {\n                if (($a->[$i] + $a->[$j] + $a->[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 1; $i <\
    \ $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for\
    \ (my $k = $j + 1; $k < $n; $k++) {\n                if (($i * $i - $i + 1 + $j\
    \ * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for my $i (1..$n-2) {\n        for my $j ($i+1..$n-1)\
    \ {\n            for my $k ($j+1..$n) {\n                $count++ if (($i*$i -\
    \ $i + 1 + $j*$j - $j + 1 + $k*$k - $k + 1) % 3 == 0);\n            }\n      \
    \  }\n    }\n    return $count;\n}", "    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n\
    \    my $count = 0;\n    for my $i (0..$#a) {\n        for my $j ($i+1..$#a) {\n\
    \            for my $k ($j+1..$#a) {\n                $count++ if ($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0;\n            }\n        }\n    }\n    return $count;\n}",
  "    my $count = 0;\n    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    for (my\
    \ $i = 0; $i < $n - 2; $i++) {\n        for (my $j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    for my $i (0..$#a)\
    \ {\n        for my $j ($i+1..$#a) {\n            for my $k ($j+1..$#a) {\n  \
    \              $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i\
    \ = 1; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n     \
    \       for (my $k = $j + 1; $k < $n; $k++) {\n                if (($i * $i -\
    \ $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1..$n) {\n        for my $j\
    \ ($i+1..$n) {\n            for my $k ($j+1..$n) {\n                if (($i*$i\
    \ - $i + 1 + $j*$j - $j + 1 + $k*$k - $k + 1) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1..$n-2) {\n        for my $j ($i+1..$n-1)\
    \ {\n            for my $k ($j+1..$n) {\n                $count++ if ($i*$i -\
    \ $i + 1 + $j*$j - $j + 1 + $k*$k - $k + 1) % 3 == 0;\n            }\n       \
    \ }\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1..$n-2)\
    \ {\n        for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n) {\n  \
    \              $count++ if (($i*$i - $i + 1 + $j*$j - $j + 1 + $k*$k - $k + 1)\
    \ % 3 == 0);\n            }\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    my @a = (1);\n    for(my $i = 1; $i < $n; $i++) {\n       \
    \ push @a, $i * $i - $i + 1;\n    }\n    for(my $i = 0; $i < $n - 2; $i++) {\n\
    \        for(my $j = $i + 1; $j < $n - 1; $j++) {\n            for(my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if(($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}", "    my $count = 0;\n    my @a = map {\
    \ $_ * $_ - $_ + 1 } (1..$n);\n    for my $i (0..$#a) {\n        for my $j ($i+1..$#a)\
    \ {\n            for my $k ($j+1..$#a) {\n                $count++ if ($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0;\n            }\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    for\
    \ my $i (0..$#a) {\n        for my $j ($i+1..$#a) {\n            for my $k ($j+1..$#a)\
    \ {\n                $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n      \
    \      }\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for\
    \ my $i (1..$n-2) {\n        for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n)\
    \ {\n                $count++ if (($i*$i - $i + 1 + $j*$j - $j + 1 + $k*$k - $k\
    \ + 1) % 3 == 0);\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j =\
    \ $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n\
    \                if (($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1)\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
