name: HumanEval_65_circular_shift
language: pl
prompt: "# Circular shift the digits of the integer x, shift the digits right by shift\n\
  # and return the result as a string.\n# If shift > number of digits, return digits\
  \ reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n\
  # \"12\"\nsub circular_shift {\n    my($x, $shift) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n\
  \        if(eq_deeply($candidate->(100, 2),\"001\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97,\
  \ 8),\"79\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(12, 1),\"21\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @digits = split(//, $x);\n    my $num_digits = scalar(@digits);\n\
    \    if ($shift > $num_digits) {\n        return join('', reverse(@digits));\n\
    \    }\n    my @shifted = @digits[$shift .. $num_digits - 1];\n    push(@shifted,\
    \ @digits[0 .. $shift - 1]);\n    return join('', @shifted);\n}", "    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $right = substr($x, $digits - $shift, $shift);\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    my $first = substr($x,\
    \ 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n    return\
    \ $last . $first;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    return substr($x, $shift) .\
    \ substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if ($shift >\
    \ $digits) {\n        return scalar reverse $x;\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse $x;\n    }\n    my $left = substr($x, 0, $digits -\
    \ $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right .\
    \ $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n   \
    \     return scalar reverse $x;\n    }\n    my $first = substr($x, 0, $digits\
    \ - $shift);\n    my $last = substr($x, $digits - $shift);\n    return $last .\
    \ $first;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n  \
    \      return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return reverse($x);\n    } else {\n        return substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n    }\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits\
    \ - $shift);\n    return $last . $first;\n}", "    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return reverse($x);\n    }\n    my $right\
    \ = substr($x, $shift, $digits - $shift);\n    my $left = substr($x, 0, $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    $shift %=\
    \ $digits;\n    return scalar reverse $x if $shift == 0;\n    return substr($x,\
    \ $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    $shift %= $digits;\n    return reverse($x) if $shift == 0;\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return\
    \ reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $n = length($x);\n\
    \    return reverse($x) if $shift > $n;\n    return substr($x, $n - $shift) .\
    \ substr($x, 0, $n - $shift);\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $digits = length($x);\n    if ($shift >= $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $len = length($x);\n\
    \    if ($shift >= $len) {\n        return reverse $x;\n    }\n    return substr($x,\
    \ $shift, $len - $shift) . substr($x, 0, $shift);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
