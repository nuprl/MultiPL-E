name: HumanEval_127_intersection
language: pl
prompt: "# You are given two intervals,\n# where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n# The given intervals are closed\
  \ which means that the interval (start, end)\n# includes both start and end.\n#\
  \ For each given interval, it is assumed that its start is less or equal its end.\n\
  # Your task is to determine whether the length of intersection of these two \n#\
  \ intervals is a prime number.\n# Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If\
  \ the length of the intersection is a prime number, return \"YES\",\n# otherwise,\
  \ return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output]\
  \ samples:\n# >>> intersection([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection([-1,\
  \ 1], [0, 4])\n# \"NO\"\n# >>> intersection([-3, -1], [-5, 5])\n# \"YES\"\nsub intersection\
  \ {\n    my($interval1, $interval2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n\
  \        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
  \ 1], [0, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
  \ 2], [-4, 0]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2], [3, 5]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
  \ -2], [-3, -2]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n}\n\ntesthumaneval();"
completions: ["    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n   \
    \     $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if(is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my $intersection = [0, 0];\n    my $intersection_length\
    \ = 0;\n    my $is_prime = 0;\n    my $result = \"NO\";\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n  \
    \  my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $bb = 0;\n    my $cc\
    \ = 0;\n    my $dd = 0;\n    my $ee = 0;\n    my $ff = 0;\n    my $gg = 0;\n \
    \   my $hh = 0;\n    my $ii = 0;\n    my $jj = 0;\n    my $kk = 0;\n    my $ll\
    \ = 0;\n    my $mm = 0;\n    my $nn = 0;\n    my $oo = 0;\n    my $pp = 0;\n \
    \   my $qq = 0;\n    my $rr = 0;\n    my $ss = 0;\n    my $tt = 0;\n    my $uu\
    \ = 0;\n    my $vv = 0;\n    my $ww = 0;\n    my $xx = 0;\n    my $yy = 0;\n \
    \   my $zz = 0;\n    my $aaa = 0;\n    my $bbb = 0;\n    my $ccc = 0;\n    my\
    \ $ddd = 0;\n    my $eee = 0;\n    my $fff = 0;\n    my $ggg = 0;\n    my $hhh\
    \ = 0;\n    my $iii = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my $lll = 0;\n\
    \    my $mmm = 0;\n    my $nnn", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    my $is_prime = 1;\n    for my $i (2..$length\
    \ - 1) {\n        if ($length % $i == 0) {\n            $is_prime = 0;\n     \
    \       last;\n        }\n    }\n    if ($is_prime) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}", "    my $start = max($interval1->[0],\
    \ $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n  \
    \  if ($start > $end) {\n        return \"NO\";\n    }\n    my $length = $end\
    \ - $start + 1;\n    return is_prime($length) ? \"YES\" : \"NO\";\n}", "    my\
    \ $intersection = [0, 0];\n    if ($interval1->[0] > $interval2->[0]) {\n    \
    \    $intersection->[0] = $interval1->[0];\n    } else {\n        $intersection->[0]\
    \ = $interval2->[0];\n    }\n    if ($interval1->[1] < $interval2->[1]) {\n  \
    \      $intersection->[1] = $interval1->[1];\n    } else {\n        $intersection->[1]\
    \ = $interval2->[1];\n    }\n    if ($intersection->[0] > $intersection->[1])\
    \ {\n        return \"NO\";\n    }\n    my $length = $intersection->[1] - $intersection->[0]\
    \ + 1;\n    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n \
    \   my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $len = $end - $start + 1;\n    if(is_prime($len))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $intersection = [0, 0];\n    if ($interval1->[0] > $interval2->[0]) {\n\
    \        if ($interval1->[0] <= $interval2->[1]) {\n            $intersection->[0]\
    \ = $interval1->[0];\n            $intersection->[1] = $interval2->[1];\n    \
    \    }\n    } else {\n        if ($interval2->[0] <= $interval1->[1]) {\n    \
    \        $intersection->[0] = $interval2->[0];\n            $intersection->[1]\
    \ = $interval1->[1];\n        }\n    }\n    return $intersection;\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if($length ==\
    \ 1) {\n        return \"NO\";\n    }\n    for(my $i = 2; $i < $length; $i++)\
    \ {\n        if($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(isPrime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if($length == 1) {\n        return \"\
    NO\";\n    }\n    my $isPrime = 1;\n    for(my $i = 2; $i < $length; $i++) {\n\
    \        if($length % $i == 0) {\n            $isPrime = 0;\n            last;\n\
    \        }\n    }\n    if($isPrime) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n \
    \   my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start, $end);\n    if ($interval1->[0] >= $interval2->[0])\
    \ {\n        $start = $interval1->[0];\n    } else {\n        $start = $interval2->[0];\n\
    \    }\n    if ($interval1->[1] <= $interval2->[1]) {\n        $end = $interval1->[1];\n\
    \    } else {\n        $end = $interval2->[1];\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my $intersection = [max($start1, $start2), min($end1, $end2)];\n    my($start,\
    \ $end) = @$intersection;\n    return \"NO\" if $start >= $end;\n    return is_prime($end\
    \ - $start) ? \"YES\" : \"NO\";\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n\
    \    my $end = min($interval1->[1], $interval2->[1]);\n    return $start > $end\
    \ ? \"NO\" : is_prime($end - $start + 1) ? \"YES\" : \"NO\";\n}", "    my $intersection\
    \ = [max($interval1->[0], $interval2->[0]), min($interval1->[1], $interval2->[1])];\n\
    \    return $intersection->[0] > $intersection->[1] ? \"NO\" : is_prime($intersection->[1]\
    \ - $intersection->[0] + 1) ? \"YES\" : \"NO\";\n}", "    my $intersection = [max($interval1->[0],\
    \ $interval2->[0]), min($interval1->[1], $interval2->[1])];\n    return $intersection->[0]\
    \ <= $intersection->[1] ? is_prime($intersection->[1] - $intersection->[0]) ?\
    \ \"YES\" : \"NO\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n   \
    \ my($start2, $end2) = @$interval2;\n    my $intersection = [max($start1, $start2),\
    \ min($end1, $end2)];\n    my($start, $end) = @$intersection;\n    return $start\
    \ > $end ? \"NO\" : is_prime($end - $start + 1) ? \"YES\" : \"NO\";\n}", "   \
    \ my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n \
    \   my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    if ($length == 2)\
    \ {\n        return \"YES\";\n    }\n    if ($length % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    for (my $i = 3; $i <= sqrt($length); $i += 2) {\n      \
    \  if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my $intersection = [max($start1, $start2), min($end1, $end2)];\n    my($start,\
    \ $end) = @$intersection;\n    return \"NO\" if $start >= $end;\n    return \"\
    YES\" if is_prime($end - $start);\n    return \"NO\";\n}", "    my $intersection\
    \ = [max($interval1->[0], $interval2->[0]), min($interval1->[1], $interval2->[1])];\n\
    \    return $intersection->[0] <= $intersection->[1] ? is_prime($intersection->[1]\
    \ - $intersection->[0]) ? \"YES\" : \"NO\" : \"NO\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $len = $end - $start + 1;\n\
    \    if (is_prime($len)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my $intersection = [max($start1, $start2), min($end1, $end2)];\n    my($start,\
    \ $end) = @$intersection;\n    return \"NO\" if $start >= $end;\n    return is_prime($end\
    \ - $start) ? \"YES\" : \"NO\";\n}", "    my $intersection = [0, 0];\n    if ($interval1->[0]\
    \ > $interval2->[0]) {\n        $intersection->[0] = $interval1->[0];\n    } else\
    \ {\n        $intersection->[0] = $interval2->[0];\n    }\n    if ($interval1->[1]\
    \ < $interval2->[1]) {\n        $intersection->[1] = $interval1->[1];\n    } else\
    \ {\n        $intersection->[1] = $interval2->[1];\n    }\n    if ($intersection->[0]\
    \ > $intersection->[1]) {\n        return \"NO\";\n    }\n    my $length = $intersection->[1]\
    \ - $intersection->[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for (my $i\
    \ = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my $intersection =\
    \ [max($interval1->[0], $interval2->[0]), min($interval1->[1], $interval2->[1])];\n\
    \    return \"NO\" if $intersection->[0] > $intersection->[1];\n    return \"\
    YES\" if is_prime($intersection->[1] - $intersection->[0] + 1);\n    return \"\
    NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my $intersection = [max($start1, $start2), min($end1,\
    \ $end2)];\n    my($start, $end) = @$intersection;\n    return \"NO\" if $start\
    \ > $end;\n    return \"YES\" if is_prime($end - $start + 1);\n    return \"NO\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my $intersection = [0, 0];\n    if ($interval1->[0]\
    \ <= $interval2->[0]) {\n        $intersection->[0] = $interval2->[0];\n    }\
    \ else {\n        $intersection->[0] = $interval1->[0];\n    }\n    if ($interval1->[1]\
    \ <= $interval2->[1]) {\n        $intersection->[1] = $interval1->[1];\n    }\
    \ else {\n        $intersection->[1] = $interval2->[1];\n    }\n    if ($intersection->[0]\
    \ <= $intersection->[1]) {\n        return $intersection;\n    } else {\n    \
    \    return undef;\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for\
    \ (my $i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n      \
    \      return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $len = $end - $start + 1;\n    my $is_prime = 1;\n    for (my $i = 2; $i\
    \ < $len; $i++) {\n        if ($len % $i == 0) {\n            $is_prime = 0;\n\
    \            last;\n        }\n    }\n    if ($is_prime) {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for (my $i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $len =\
    \ $end - $start + 1;\n    if(is_prime($len)) {\n        return \"YES\";\n    }\
    \ else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my $intersection_start = max($start1, $start2);\n    my $intersection_end\
    \ = min($end1, $end2);\n    if ($intersection_start > $intersection_end) {\n \
    \       return \"NO\";\n    }\n    my $intersection_length = $intersection_end\
    \ - $intersection_start + 1;\n    return is_prime($intersection_length) ? \"YES\"\
    \ : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2)\
    \ = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n      \
    \  $start = $start1;\n    } else {\n        $start = $start2;\n    }\n    if ($end1\
    \ < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n   \
    \ }\n    if ($start > $end) {\n        return \"NO\";\n    }\n    my $length =\
    \ $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    if ($length == 2) {\n        return \"YES\";\n    }\n    for (my $i = 2;\
    \ $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $start = max($interval1->[0], $interval2->[0]);\n    my $end = min($interval1->[1],\
    \ $interval2->[1]);\n    if ($start <= $end) {\n        return is_prime($end -\
    \ $start + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 <= $start2) {\n        $start = $start2;\n    } else\
    \ {\n        $start = $start1;\n    }\n    if ($end1 <= $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my $intersection = [\n        max($interval1->[0],\
    \ $interval2->[0]),\n        min($interval1->[1], $interval2->[1])\n    ];\n \
    \   return 'NO' if $intersection->[0] > $intersection->[1];\n    return 'YES'\
    \ if is_prime($intersection->[1] - $intersection->[0] + 1);\n    return 'NO';\n\
    }", "    my $intersection = [max($interval1->[0], $interval2->[0]), min($interval1->[1],\
    \ $interval2->[1])];\n    return $intersection->[0] > $intersection->[1] ? \"\
    NO\" : is_prime($intersection->[1] - $intersection->[0] + 1) ? \"YES\" : \"NO\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    my $is_prime = 1;\n    for (my $i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            $is_prime = 0;\n            last;\n\
    \        }\n    }\n    if ($is_prime) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n \
    \   my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ <= $start2) {\n        $start = $start2;\n    } else {\n        $start = $start1;\n\
    \    }\n    if ($end1 <= $end2) {\n        $end = $end1;\n    } else {\n     \
    \   $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n \
    \   }\n    my $len = $end - $start + 1;\n    if (is_prime($len)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my\
    \ $intersection = [0, 0];\n    $intersection->[0] = $interval1->[0] > $interval2->[0]\
    \ ? $interval1->[0] : $interval2->[0];\n    $intersection->[1] = $interval1->[1]\
    \ < $interval2->[1] ? $interval1->[1] : $interval2->[1];\n    if ($intersection->[0]\
    \ > $intersection->[1]) {\n        return \"NO\";\n    }\n    my $length = $intersection->[1]\
    \ - $intersection->[0] + 1;\n    return is_prime($length) ? \"YES\" : \"NO\";\n\
    }", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 <= $start2) {\n        $start = $start2;\n\
    \    } else {\n        $start = $start1;\n    }\n    if ($end1 <= $end2) {\n \
    \       $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    return \"NO\" if $end1 < $start2 || $end2 < $start1;\n\
    \    my $intersection = [max($start1, $start2), min($end1, $end2)];\n    my $length\
    \ = $intersection->[1] - $intersection->[0] + 1;\n    return \"YES\" if $length\
    \ == 2;\n    return \"NO\" if $length < 2;\n    for my $i (2..sqrt($length)) {\n\
    \        return \"NO\" if $length % $i == 0;\n    }\n    return \"YES\";\n}",
  "    my @intervals = ($interval1, $interval2);\n    my @intersection = ();\n   \
    \ my $intersection_length = 0;\n    my $is_prime = 0;\n    my $is_intersect =\
    \ 0;\n    my $result = \"NO\";\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i1 = 0;\n    my $j1 =\
    \ 0;\n    my $k1 = 0;\n    my $l1 = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n   \
    \ my $o1 = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 = 0;\n    my $s1 =\
    \ 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n   \
    \ my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a1 = 0;\n    my $b1 =\
    \ 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n   \
    \ my $g1 = 0;\n    my $h1 = 0;\n    my $", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if(is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ ($length == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n \
    \       return \"YES\";\n    }\n    for (my $i = 2; $i < $length; $i++) {\n  \
    \      if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if(is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $intersection = [\n        max($interval1->[0], $interval2->[0]),\n    \
    \    min($interval1->[1], $interval2->[1])\n    ];\n    return $intersection->[0]\
    \ > $intersection->[1] ? \"NO\" : is_prime($intersection->[1] - $intersection->[0]\
    \ + 1) ? \"YES\" : \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my $intersection = [0,\
    \ 0];\n    if ($interval1->[0] <= $interval2->[0]) {\n        $intersection->[0]\
    \ = $interval2->[0];\n    } else {\n        $intersection->[0] = $interval1->[0];\n\
    \    }\n    if ($interval1->[1] <= $interval2->[1]) {\n        $intersection->[1]\
    \ = $interval1->[1];\n    } else {\n        $intersection->[1] = $interval2->[1];\n\
    \    }\n    if ($intersection->[0] > $intersection->[1]) {\n        return \"\
    NO\";\n    }\n    my $length = $intersection->[1] - $intersection->[0] + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    if ($length == 2)\
    \ {\n        return \"YES\";\n    }\n    for (my $i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my $start = max($interval1->[0],\
    \ $interval2->[0]);\n    my $end = min($interval1->[1], $interval2->[1]);\n  \
    \  return \"NO\" if $start > $end;\n    return \"YES\" if is_prime($end - $start\
    \ + 1);\n    return \"NO\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if ($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n      \
    \  $end = $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n  \
    \  }\n    my $length = $end - $start + 1;\n    if (is_prime($length)) {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 <= $start2) {\n        $start = $start2;\n    } else\
    \ {\n        $start = $start1;\n    }\n    if ($end1 <= $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start <= $end)\
    \ {\n        my $length = $end - $start + 1;\n        if (is_prime($length)) {\n\
    \            return \"YES\";\n        } else {\n            return \"NO\";\n \
    \       }\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1)\
    \ = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start, $end);\n\
    \    if ($start1 > $start2) {\n        $start = $start1;\n    } else {\n     \
    \   $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if (is_prime($length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 < $start2) {\n        $start = $start2;\n\
    \    } else {\n        $start = $start1;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end = $end2;\n\
    \    }\n    if($start > $end) {\n        return \"NO\";\n    }\n    my $length\
    \ = $end - $start + 1;\n    if(is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n\
    \    my($start2, $end2) = @$interval2;\n    my($start, $end);\n    if($start1\
    \ > $start2) {\n        $start = $start1;\n    } else {\n        $start = $start2;\n\
    \    }\n    if($end1 < $end2) {\n        $end = $end1;\n    } else {\n       \
    \ $end = $end2;\n    }\n    if($start > $end) {\n        return \"NO\";\n    }\n\
    \    my $length = $end - $start + 1;\n    if($length == 1) {\n        return \"\
    NO\";\n    }\n    for(my $i = 2; $i < $length; $i++) {\n        if($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n\
    \    if (is_prime($length)) {\n        return \"YES\";\n    } else {\n       \
    \ return \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 <= $start2) {\n\
    \        $start = $start2;\n    } else {\n        $start = $start1;\n    }\n \
    \   if ($end1 <= $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ if (is_prime($end - $start + 1)) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my $start = max($interval1->[0], $interval2->[0]);\n\
    \    my $end = min($interval1->[1], $interval2->[1]);\n    return $start > $end\
    \ ? \"NO\" : is_prime($end - $start + 1) ? \"YES\" : \"NO\";\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if\
    \ (is_prime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"\
    NO\";\n    }\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if($start1 > $start2) {\n        $start = $start1;\n\
    \    }\n    else {\n        $start = $start2;\n    }\n    if($end1 < $end2) {\n\
    \        $end = $end1;\n    }\n    else {\n        $end = $end2;\n    }\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    else {\n        my $length = $end\
    \ - $start + 1;\n        if(is_prime($length)) {\n            return \"YES\";\n\
    \        }\n        else {\n            return \"NO\";\n        }\n    }\n}",
  "    my($start1, $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n\
    \    my($start, $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n\
    \    } else {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n  \
    \      $end = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    } else {\n        my $length = $end -\
    \ $start + 1;\n        if (is_prime($length)) {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if($start1 > $start2) {\n        $start = $start1;\n    } else {\n\
    \        $start = $start2;\n    }\n    if($end1 < $end2) {\n        $end = $end1;\n\
    \    } else {\n        $end = $end2;\n    }\n    if($start > $end) {\n       \
    \ return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    if($length ==\
    \ 1) {\n        return \"NO\";\n    }\n    for(my $i = 2; $i < $length; $i++)\
    \ {\n        if($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    my($start1, $end1) = @$interval1;\n    my($start2,\
    \ $end2) = @$interval2;\n    my($start, $end);\n    if ($start1 > $start2) {\n\
    \        $start = $start1;\n    } else {\n        $start = $start2;\n    }\n \
    \   if ($end1 < $end2) {\n        $end = $end1;\n    } else {\n        $end =\
    \ $end2;\n    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n   \
    \ my $length = $end - $start + 1;\n    if (is_prime($length)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($start1,\
    \ $end1) = @$interval1;\n    my($start2, $end2) = @$interval2;\n    my($start,\
    \ $end);\n    if ($start1 > $start2) {\n        $start = $start1;\n    } else\
    \ {\n        $start = $start2;\n    }\n    if ($end1 < $end2) {\n        $end\
    \ = $end1;\n    } else {\n        $end = $end2;\n    }\n    if ($start > $end)\
    \ {\n        return \"NO\";\n    }\n    my $length = $end - $start + 1;\n    my\
    \ $is_prime = 1;\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            $is_prime = 0;\n            last;\n        }\n   \
    \ }\n    if ($is_prime) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
