name: HumanEval_12_longest
language: pl
prompt: "# Out of array of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return undef in case the input\
  \ array is empty.\n# >>> longest([])\n# undef\n# >>> longest([\"a\", \"b\", \"c\"\
  ])\n# \"a\"\n# >>> longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\nsub longest {\n\
  \    my($strings) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n\
  \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"\
  z\"]),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
  abc\"]),\"zzzz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my $longest = undef;\n    my $longest_length = 0;\n    foreach\
    \ my $string (@$strings) {\n        my $length = length($string);\n        if\
    \ ($length > $longest_length) {\n            $longest = $string;\n           \
    \ $longest_length = $length;\n        }\n    }\n    return $longest;\n}", "  \
    \  my $longest = undef;\n    my $longest_length = 0;\n    for my $string (@$strings)\
    \ {\n        if (length($string) > $longest_length) {\n            $longest =\
    \ $string;\n            $longest_length = length($string);\n        }\n    }\n\
    \    return $longest;\n}", "    my $longest = undef;\n    my $longest_length =\
    \ 0;\n    foreach my $string (@$strings) {\n        my $length = length($string);\n\
    \        if ($length > $longest_length) {\n            $longest = $string;\n \
    \           $longest_length = $length;\n        }\n    }\n    return $longest;\n\
    }", "    my $longest = undef;\n    my $longest_length = 0;\n    foreach my $string\
    \ (@$strings) {\n        if (length($string) > $longest_length) {\n          \
    \  $longest = $string;\n            $longest_length = length($string);\n     \
    \   }\n    }\n    return $longest;\n}", "    my $longest = undef;\n    foreach\
    \ my $string (@$strings) {\n        if (!defined($longest) || length($string)\
    \ > length($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}", "    my $longest = undef;\n    my $longest_length =\
    \ 0;\n    foreach my $string (@$strings) {\n        my $length = length($string);\n\
    \        if ($length > $longest_length) {\n            $longest = $string;\n \
    \           $longest_length = $length;\n        }\n    }\n    return $longest;\n\
    }", "    my $longest = undef;\n    my $longest_len = 0;\n    foreach my $string\
    \ (@$strings) {\n        my $len = length($string);\n        if ($len > $longest_len)\
    \ {\n            $longest = $string;\n            $longest_len = $len;\n     \
    \   }\n    }\n    return $longest;\n}", "    my $longest;\n    my $longest_length\
    \ = 0;\n    foreach my $str (@$strings) {\n        my $length = length($str);\n\
    \        if ($length > $longest_length) {\n            $longest = $str;\n    \
    \        $longest_length = $length;\n        }\n    }\n    return $longest;\n}",
  "    my $longest = undef;\n    my $longest_length = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longest_length)\
    \ {\n            $longest = $string;\n            $longest_length = $length;\n\
    \        }\n    }\n    return $longest;\n}", "    my $longest = undef;\n    my\
    \ $longest_length = 0;\n    foreach my $string (@$strings) {\n        my $length\
    \ = length($string);\n        if ($length > $longest_length) {\n            $longest\
    \ = $string;\n            $longest_length = $length;\n        }\n    }\n    return\
    \ $longest;\n}", "    my $longest = undef;\n    my $longest_length = 0;\n    foreach\
    \ my $string (@$strings) {\n        if (length($string) > $longest_length) {\n\
    \            $longest = $string;\n            $longest_length = length($string);\n\
    \        }\n    }\n    return $longest;\n}", "    my $longest = undef;\n    my\
    \ $longest_length = 0;\n    foreach my $string (@$strings) {\n        my $length\
    \ = length($string);\n        if ($length > $longest_length) {\n            $longest\
    \ = $string;\n            $longest_length = $length;\n        }\n    }\n    return\
    \ $longest;\n}", "    my $longest = undef;\n    for my $string (@$strings) {\n\
    \        if (!defined($longest) || length($string) > length($longest)) {\n   \
    \         $longest = $string;\n        }\n    }\n    return $longest;\n}", " \
    \   my $longest = undef;\n    my $longest_length = 0;\n    foreach my $string\
    \ (@$strings) {\n        if (length($string) > $longest_length) {\n          \
    \  $longest = $string;\n            $longest_length = length($string);\n     \
    \   }\n    }\n    return $longest;\n}", "    my $longest = undef;\n    my $longest_length\
    \ = 0;\n    foreach my $string (@$strings) {\n        my $length = length($string);\n\
    \        if ($length > $longest_length) {\n            $longest = $string;\n \
    \           $longest_length = $length;\n        }\n    }\n    return $longest;\n\
    }", "    my $longest = undef;\n    my $longest_len = 0;\n    foreach my $str (@$strings)\
    \ {\n        my $len = length($str);\n        if ($len > $longest_len) {\n   \
    \         $longest = $str;\n            $longest_len = $len;\n        }\n    }\n\
    \    return $longest;\n}", "    my $longest = undef;\n    foreach my $string (@$strings)\
    \ {\n        if (!defined($longest) || length($string) > length($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}",
  "    my $longest = undef;\n    my $longest_length = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longest_length)\
    \ {\n            $longest = $string;\n            $longest_length = $length;\n\
    \        }\n    }\n    return $longest;\n}", "    my $longest = undef;\n    my\
    \ $longest_length = 0;\n    foreach my $string (@$strings) {\n        my $length\
    \ = length($string);\n        if ($length > $longest_length) {\n            $longest\
    \ = $string;\n            $longest_length = $length;\n        }\n    }\n    return\
    \ $longest;\n}", "    my $longest = undef;\n    my $longest_length = 0;\n    foreach\
    \ my $string (@$strings) {\n        if (length($string) > $longest_length) {\n\
    \            $longest = $string;\n            $longest_length = length($string);\n\
    \        }\n    }\n    return $longest;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
