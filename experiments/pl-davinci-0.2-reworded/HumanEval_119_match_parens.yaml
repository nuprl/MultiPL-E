name: HumanEval_119_match_parens
language: pl
prompt: "# You are given an array of two strings, both strings consist of open\n#\
  \ parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is\
  \ possible to concatenate the two strings in\n# some order, that the resulting string\
  \ will be good.\n# A string S is considered to be good if and only if all parentheses\
  \ in S\n# are balanced. For example: the string '(())()' is good, while the string\n\
  # '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return\
  \ 'No' otherwise.\n# Examples:\n# >>> match_parens([\"()(\", \")\"])\n# \"Yes\"\n\
  # >>> match_parens([\")\", \")\"])\n# \"No\"\nsub match_parens {\n    my($lst) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n\
  \        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )\", \")\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )())\", \"(()()(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  ()\", \"())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  ((((\", \"((())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )(\", \")(\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )\", \"(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n}\n\ntesthumaneval();"
completions: ["    my($a, $b) = @$lst;\n    my($cnt) = 0;\n    for my $c (split //,\
    \ $a) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return\
    \ 'No' if $cnt < 0;\n    }\n    for my $c (split //, $b) {\n        $cnt++ if\
    \ $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    return 'Yes' if $cnt == 0;\n    return 'No';\n}", "    my($a, $b)\
    \ = @$lst;\n    my($i, $j, $k, $l);\n    my($cnt, $cnta, $cntb);\n    my($res);",
  "    my($s1, $s2) = @$lst;\n    my($cnt) = 0;\n    for my $c (split //, $s1) {\n\
    \        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No'\
    \ if $cnt < 0;\n    }\n    for my $c (split //, $s2) {\n        $cnt++ if $c eq\
    \ '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n\
    \    return 'Yes' if $cnt == 0;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n\
    \    my($c) = 0;\n    my($d) = 0;\n    for my $i (0 .. length($a) - 1) {\n   \
    \     if (substr($a, $i, 1) eq '(') {\n            $c++;\n        } else {\n \
    \           $c--;\n        }\n        if ($c < 0) {\n            return \"No\"\
    ;\n        }\n    }\n    for my $i (0 .. length($b) - 1) {\n        if (substr($b,\
    \ $i, 1) eq '(') {\n            $d++;\n        } else {\n            $d--;\n \
    \       }\n        if ($d < 0) {\n            return \"No\";\n        }\n    }\n\
    \    if ($c == $d) {\n        return \"Yes\";\n    } else {\n        return \"\
    No\";\n    }\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n   \
    \ for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c\
    \ eq ')';\n        return \"No\" if $c1 < 0;\n    }\n    for my $c (split //,\
    \ $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return\
    \ \"No\" if $c2 < 0;\n    }\n    return \"Yes\" if $c1 == $c2;\n    return \"\
    No\";\n}", "    my @lst = @$lst;\n    my $str = join('', @lst);\n    my $cnt =\
    \ 0;\n    for my $c (split(//, $str)) {\n        if ($c eq '(') {\n          \
    \  $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n        }\n  \
    \      return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my($a, $b)\
    \ = @$lst;\n    my($cnt) = 0;\n    for my $c (split //, $a) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    for my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes'\
    \ if $cnt == 0;\n    return 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2\
    \ = $lst->[1];\n    my $str = $str1 . $str2;\n    my $len = length($str);\n  \
    \  my $cnt = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        my $c = substr($str,\
    \ $i, 1);\n        if ($c eq '(') {\n            $cnt++;\n        } elsif ($c\
    \ eq ')') {\n            $cnt--;\n        }\n        if ($cnt < 0) {\n       \
    \     return \"No\";\n        }\n    }\n    if ($cnt == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}", "    my $str = join('',\
    \ @$lst);\n    my $count = 0;\n    for my $c (split //, $str) {\n        if ($c\
    \ eq '(') {\n            $count++;\n        } elsif ($c eq ')') {\n          \
    \  $count--;\n        }\n        if ($count < 0) {\n            return 'No';\n\
    \        }\n    }\n    return $count == 0 ? 'Yes' : 'No';\n}", "    my $s1 = $lst->[0];\n\
    \    my $s2 = $lst->[1];\n    my $s = $s1 . $s2;\n    my $cnt = 0;\n    for my\
    \ $c (split //, $s) {\n        if ($c eq '(') {\n            $cnt++;\n       \
    \ } else {\n            $cnt--;\n        }\n        if ($cnt < 0) {\n        \
    \    return \"No\";\n        }\n    }\n    return \"Yes\";\n}", "    my $str =\
    \ join('', @$lst);\n    my $count = 0;\n    for my $c (split //, $str) {\n   \
    \     if ($c eq '(') {\n            $count++;\n        } elsif ($c eq ')') {\n\
    \            $count--;\n        }\n        return 'No' if $count < 0;\n    }\n\
    \    return $count == 0 ? 'Yes' : 'No';\n}", "    my($str1, $str2) = @$lst;\n\
    \    my($cnt1, $cnt2) = (0, 0);\n    for my $c (split //, $str1) {\n        $cnt1++\
    \ if $c eq '(';\n        $cnt1-- if $c eq ')';\n        return 'No' if $cnt1 <\
    \ 0;\n    }\n    for my $c (split //, $str2) {\n        $cnt2++ if $c eq '(';\n\
    \        $cnt2-- if $c eq ')';\n        return 'No' if $cnt2 < 0;\n    }\n   \
    \ return 'Yes' if $cnt1 == 0 and $cnt2 == 0;\n    return 'No';\n}", "    my($left,\
    \ $right) = @$lst;\n    my($left_parens, $right_parens) = (0, 0);\n    for my\
    \ $c (split //, $left) {\n        if ($c eq '(') {\n            $left_parens++;\n\
    \        } else {\n            $left_parens--;\n        }\n    }\n    for my $c\
    \ (split //, $right) {\n        if ($c eq '(') {\n            $right_parens++;\n\
    \        } else {\n            $right_parens--;\n        }\n    }\n    if ($left_parens\
    \ == 0 && $right_parens == 0) {\n        return 'Yes';\n    }\n    if ($left_parens\
    \ == 0 && $right_parens > 0) {\n        return 'No';\n    }\n    if ($left_parens\
    \ < 0 && $right_parens == 0) {\n        return 'No';\n    }\n    if ($left_parens\
    \ < 0 && $right_parens > 0) {\n        return 'Yes';\n    }\n    if ($left_parens\
    \ > 0 && $right_parens == 0) {\n        return 'Yes';\n    }\n    if ($left_parens\
    \ > 0 && $right_parens < 0) {\n        return 'Yes';\n    }\n    return 'No';\n\
    }", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str3 = $str1\
    \ . $str2;\n    my $str4 = $str2 . $str1;\n    return \"Yes\" if is_balanced($str3);\n\
    \    return \"Yes\" if is_balanced($str4);\n    return \"No\";\n}", "    my($left,\
    \ $right) = @$lst;\n    my($left_count, $right_count) = (0, 0);\n    for my $c\
    \ (split //, $left) {\n        $left_count++ if $c eq '(';\n        $left_count--\
    \ if $c eq ')';\n    }\n    for my $c (split //, $right) {\n        $right_count++\
    \ if $c eq '(';\n        $right_count-- if $c eq ')';\n    }\n    return 'Yes'\
    \ if $left_count == 0 && $right_count == 0;\n    return 'Yes' if $left_count ==\
    \ 1 && $right_count == -1;\n    return 'Yes' if $left_count == -1 && $right_count\
    \ == 1;\n    return 'No';\n}", "    my $str = join(\"\", @$lst);\n    my $count\
    \ = 0;\n    for my $c (split(\"\", $str)) {\n        if ($c eq \"(\") {\n    \
    \        $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n \
    \       }\n        return \"No\" if $count < 0;\n    }\n    return \"Yes\" if\
    \ $count == 0;\n    return \"No\";\n}", "    my($a, $b) = @$lst;\n    my($c) =\
    \ $a . $b;\n    my($i, $n) = (0, length($c));\n    my($d) = 0;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $d += $c =~ /^\\($/ ? 1 : -1;\n        return \"\
    No\" if $d < 0;\n    }\n    return \"Yes\";\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($n1, $n2) = (0, 0);\n    my($c1, $c2) = (0, 0);\n    for my $c (split\
    \ //, $s1) {\n        $n1++ if $c eq '(';\n        $n1-- if $c eq ')';\n     \
    \   $c1++ if $n1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $n2++ if\
    \ $c eq '(';\n        $n2-- if $c eq ')';\n        $c2++ if $n2 < 0;\n    }\n\
    \    return 'Yes' if $n1 == 0 && $n2 == 0;\n    return 'Yes' if $n1 == $c2 &&\
    \ $n2 == $c1;\n    return 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2\
    \ = $lst->[1];\n    my $str = $str1 . $str2;\n    my $cnt = 0;\n    for my $c\
    \ (split //, $str) {\n        if ($c eq '(') {\n            $cnt++;\n        }\
    \ elsif ($c eq ')') {\n            $cnt--;\n        }\n        if ($cnt < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($cnt == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "    my($l, $r) =\
    \ @$lst;\n    my($l_cnt, $r_cnt) = (0, 0);\n    for my $c (split //, $l) {\n \
    \       $l_cnt++ if $c eq '(';\n        $l_cnt-- if $c eq ')';\n    }\n    for\
    \ my $c (split //, $r) {\n        $r_cnt++ if $c eq '(';\n        $r_cnt-- if\
    \ $c eq ')';\n    }\n    return 'Yes' if $l_cnt == 0 && $r_cnt == 0;\n    return\
    \ 'Yes' if $l_cnt > 0 && $r_cnt < 0 && $l_cnt + $r_cnt == 0;\n    return 'Yes'\
    \ if $l_cnt < 0 && $r_cnt > 0 && $l_cnt + $r_cnt == 0;\n    return 'No';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
