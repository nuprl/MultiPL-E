name: HumanEval_11_string_xor
language: pl
prompt: "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform\
  \ binary XOR on these inputs and return result also as a string.\n# >>> string_xor(\"\
  010\", \"110\")\n# \"100\"\nsub string_xor {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n\
  \        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1\", \"1\"),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = \"\";\n    my $i;\n    for ($i = 0; $i < length($a);\
    \ $i++) {\n        $result .= (substr($a, $i, 1) ^ substr($b, $i, 1)) ? \"1\"\
    \ : \"0\";\n    }\n    return $result;\n}", "    my $r = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $r;\n}", "    my $xor = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $xor .= substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n    }\n    return $xor;\n}", "    my $xor = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $xor .= substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n    }\n    return $xor;\n}", "    my $result = \"\";\n    for (my $i =\
    \ 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "    my $r = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $r;\n}", "    my $result = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "    my $c = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $c;\n}", "    my $xor = $a ^ $b;\n    return unpack(\"\
    B*\", $xor);\n}", "    my $c = '';\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n  \
    \      $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    for(my $i = 0; $i < length($a); $i++) {\n   \
    \     $result .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n    return $result;\n\
    }", "    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", " \
    \   my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $r .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $result\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= (substr($a,\
    \ $i, 1) ^ substr($b, $i, 1));\n    }\n    return $result;\n}", "    my $xor =\
    \ \"\";\n    for(my $i = 0; $i < length($a); $i++) {\n        $xor .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $xor;\n}", "    my $c = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $r = \"\";\n   \
    \ for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $result = '';\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= (substr($a, $i, 1)\
    \ ^ substr($b, $i, 1)) ? '1' : '0';\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        my $a_bit = substr($a,\
    \ $i, 1);\n        my $b_bit = substr($b, $i, 1);\n        if ($a_bit eq $b_bit)\
    \ {\n            $result .= \"0\";\n        } else {\n            $result .= \"\
    1\";\n        }\n    }\n    return $result;\n}", "    my $r = \"\";\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $r;\n}", "    my $r = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $r;\n}", "    my $c = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        my $x = substr($a, $i, 1);\n        my $y = substr($b, $i,\
    \ 1);\n        $c .= ($x ^ $y);\n    }\n    return $c;\n}", "    my $c = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $xor = \"\";\n \
    \   for (my $i = 0; $i < length($a); $i++) {\n        $xor .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $xor;\n}", "    my $c = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $c;\n}", "    my $result = \"\";\n    for(my $i =\
    \ 0; $i < length($a); $i++) {\n        my $bit_a = substr($a, $i, 1);\n      \
    \  my $bit_b = substr($b, $i, 1);\n        if($bit_a eq $bit_b) {\n          \
    \  $result .= \"0\";\n        } else {\n            $result .= \"1\";\n      \
    \  }\n    }\n    return $result;\n}", "    my $r = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $r;\n}", "    my $result = \"\";\n    for(my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "    my $c = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $c .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n   \
    \ return $c;\n}", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $c .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n    return $c;\n}", " \
    \   my $result = '';\n    my $len = length($a);\n    for (my $i = 0; $i < $len;\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        my $x = substr($a, $i, 1);\n        my $y = substr($b, $i,\
    \ 1);\n        $result .= ($x ^ $y);\n    }\n    return $result;\n}", "    my\
    \ $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        my $a_bit\
    \ = substr($a, $i, 1);\n        my $b_bit = substr($b, $i, 1);\n        $result\
    \ .= $a_bit ^ $b_bit;\n    }\n    return $result;\n}", "    my $r = \"\";\n  \
    \  for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $r;\n}", "    return '' if length($a)\
    \ != length($b);\n    my $res = '';\n    for my $i (0 .. length($a) - 1) {\n \
    \       $res .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $res;\n\
    }", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", " \
    \   my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $r .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $c\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $result = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $c = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $result = \"\";\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $result = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $c = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $c = '';\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = length($a);\n    my $m\
    \ = length($b);\n    my $n = $l > $m ? $l : $m;\n    my $o = $l > $m ? $a : $b;\n\
    \    my $p = $l > $m ? $b : $a;\n    while ($i < $n) {\n        $j = substr($o,\
    \ $i, 1);\n        $k = substr($p, $i, 1);\n        $c .= $j ^ $k;\n        $i++;\n\
    \    }\n    return $c;\n}", "    my $r = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $r;\n}", "    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $result .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n    return\
    \ $result;\n}", "    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n  \
    \      my $a_bit = substr($a, $i, 1);\n        my $b_bit = substr($b, $i, 1);\n\
    \        if ($a_bit eq $b_bit) {\n            $result .= \"0\";\n        } else\
    \ {\n            $result .= \"1\";\n        }\n    }\n    return $result;\n}",
  "    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", " \
    \   my $len = length($a);\n    my $result = \"\";\n    for(my $i = 0; $i < $len;\
    \ $i++) {\n        my $a_bit = substr($a, $i, 1);\n        my $b_bit = substr($b,\
    \ $i, 1);\n        if($a_bit eq $b_bit) {\n            $result .= \"0\";\n   \
    \     } else {\n            $result .= \"1\";\n        }\n    }\n    return $result;\n\
    }", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", " \
    \   my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", " \
    \   my $c = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $xor = $a ^\
    \ $b;\n    return unpack(\"B*\", $xor);\n}", "    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        if (substr($a, $i, 1) eq substr($b,\
    \ $i, 1)) {\n            $result .= \"0\";\n        } else {\n            $result\
    \ .= \"1\";\n        }\n    }\n    return $result;\n}", "    my $result = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= (substr($a,\
    \ $i, 1) ^ substr($b, $i, 1));\n    }\n    return $result;\n}", "    my $l = length($a);\n\
    \    my $c = \"\";\n    for (my $i = 0; $i < $l; $i++) {\n        $c .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $result = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        my $x = substr($a,\
    \ $i, 1);\n        my $y = substr($b, $i, 1);\n        $result .= $x ^ $y;\n \
    \   }\n    return $result;\n}", "    my $res = \"\";\n    for(my $i = 0; $i <\
    \ length($a); $i++) {\n        $res .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $res;\n}", "    my $result = \"\";\n    for (my $i = 0; $i\
    \ < length($a); $i++) {\n        my $a_bit = substr($a, $i, 1);\n        my $b_bit\
    \ = substr($b, $i, 1);\n        $result .= ($a_bit ^ $b_bit);\n    }\n    return\
    \ $result;\n}", "    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "    my $c = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $c;\n}", "    my $c = \"\";\n    my $i;\n    for ($i = 0; $i < length($a); $i++)\
    \ {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n  \
    \      $result .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n    return\
    \ $result;\n}", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "    my $res = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n     \
    \   $res .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $res;\n}",
  "    my $c = \"\";\n    for(my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $r = \"\";\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $result = \"\";\n \
    \   my $len = length($a);\n    for (my $i = 0; $i < $len; $i++) {\n        my\
    \ $x = substr($a, $i, 1);\n        my $y = substr($b, $i, 1);\n        $result\
    \ .= ($x ^ $y);\n    }\n    return $result;\n}", "    my $r = \"\";\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $r;\n}", "    my $r = '';\n    for my $i (0..length($a)-1)\
    \ {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", " \
    \   my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "    my $result\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $xor =\
    \ \"\";\n    my $i;\n    for ($i = 0; $i < length($a); $i++) {\n        $xor .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $xor;\n}", "    my\
    \ $n = length($a);\n    my $c = \"\";\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        my $x = substr($a, $i, 1);\n        my $y = substr($b, $i, 1);\n    \
    \    $c .= ($x ^ $y);\n    }\n    return $c;\n}", "    my $r = '';\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $r;\n}", "    my $r = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $r;\n}", "    my $result = \"\";\n    for (my $i = 0; $i <\
    \ length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $result;\n}", "    my $result = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $result .= (substr($a, $i, 1) ^ substr($b,\
    \ $i, 1));\n    }\n    return $result;\n}", "    my($i, $j, $k, $l, $m, $n, $o,\
    \ $p, $q, $r, $s, $t, $u, $v, $w, $x, $y, $z);\n    my($A, $B, $C, $D, $E, $F,\
    \ $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S, $T, $U, $V, $W, $X, $Y,\
    \ $Z);\n    my($result);", "    my $xor = $a ^ $b;\n    return unpack(\"B*\",\
    \ $xor);\n}", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n\
    \        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "    my $res = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n     \
    \   $res .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $res;\n}",
  "    my $r = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        my $x =\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n        $r .= $x;\n    }\n    return\
    \ $r;\n}", "    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n\
    \        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $result;\n}", "    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", " \
    \   my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $r .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $r\
    \ = \"\";\n    for(my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $xor = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $xor .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $xor;\n}", "    my $r = \"\";\n \
    \   for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "    my $result = \"\";\n \
    \   for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $result = \"\
    \";\n    for(my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "    my $xor =\
    \ \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $xor .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $xor;\n}", "    my $c = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        my $x = substr($a, $i,\
    \ 1);\n        my $y = substr($b, $i, 1);\n        $c .= $x ^ $y;\n    }\n   \
    \ return $c;\n}", "    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n    \
    \    $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "    my $r = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $r\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
