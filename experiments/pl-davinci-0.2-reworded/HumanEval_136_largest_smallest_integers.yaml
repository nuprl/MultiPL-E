name: HumanEval_136_largest_smallest_integers
language: pl
prompt: "# Create a function that returns an array (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n\
  # If there is no negative or positive integers, return them as undef.\n# Examples:\n\
  # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n\
  # [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers\
  \ {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n\
  \        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 1, 3, 5, 7, 0]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([0]),[undef, undef])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6,\
  \ -4, -4, -3, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min = undef;\n    my $max = undef;\n    foreach my $i (@$lst)\
    \ {\n        if ($i > 0) {\n            if (!defined($min) || $i < $min) {\n \
    \               $min = $i;\n            }\n        } elsif ($i < 0) {\n      \
    \      if (!defined($max) || $i > $max) {\n                $max = $i;\n      \
    \      }\n        }\n    }\n    return [$max, $min];\n}", "    my $max = undef;\n\
    \    my $min = undef;\n    foreach my $i (@$lst) {\n        if ($i > 0) {\n  \
    \          if (!defined($min) || $i < $min) {\n                $min = $i;\n  \
    \          }\n        } elsif ($i < 0) {\n            if (!defined($max) || $i\
    \ > $max) {\n                $max = $i;\n            }\n        }\n    }\n   \
    \ return [$max, $min];\n}", "    my $max = undef;\n    my $min = undef;\n    foreach\
    \ my $i (@$lst) {\n        if ($i < 0) {\n            if (not defined $max or\
    \ $i > $max) {\n                $max = $i;\n            }\n        } elsif ($i\
    \ > 0) {\n            if (not defined $min or $i < $min) {\n                $min\
    \ = $i;\n            }\n        }\n    }\n    return [$max, $min];\n}", "    my\
    \ $max = undef;\n    my $min = undef;\n    foreach my $elem (@$lst) {\n      \
    \  if ($elem < 0) {\n            if (not defined $max or $elem > $max) {\n   \
    \             $max = $elem;\n            }\n        } elsif ($elem > 0) {\n  \
    \          if (not defined $min or $elem < $min) {\n                $min = $elem;\n\
    \            }\n        }\n    }\n    return [$max, $min];\n}", "    my $max =\
    \ undef;\n    my $min = undef;\n    foreach my $x (@$lst) {\n        if ($x >\
    \ 0) {\n            if (not defined $min or $x < $min) {\n                $min\
    \ = $x;\n            }\n        } elsif ($x < 0) {\n            if (not defined\
    \ $max or $x > $max) {\n                $max = $x;\n            }\n        }\n\
    \    }\n    return [$max, $min];\n}", "    my $largest_negative = undef;\n   \
    \ my $smallest_positive = undef;\n    foreach my $elem (@$lst) {\n        if ($elem\
    \ < 0) {\n            if (!defined($largest_negative) || $elem > $largest_negative)\
    \ {\n                $largest_negative = $elem;\n            }\n        } elsif\
    \ ($elem > 0) {\n            if (!defined($smallest_positive) || $elem < $smallest_positive)\
    \ {\n                $smallest_positive = $elem;\n            }\n        }\n \
    \   }\n    return [$largest_negative, $smallest_positive];\n}", "    my($a, $b);\n\
    \    for my $x (@$lst) {\n        if ($x < 0) {\n            if (!defined($a)\
    \ || $x > $a) {\n                $a = $x;\n            }\n        } elsif ($x\
    \ > 0) {\n            if (!defined($b) || $x < $b) {\n                $b = $x;\n\
    \            }\n        }\n    }\n    return [$a, $b];\n}", "    my($a, $b);\n\
    \    foreach my $i (@$lst) {\n        if ($i < 0) {\n            if (!defined($a)\
    \ || $i > $a) {\n                $a = $i;\n            }\n        } else {\n \
    \           if (!defined($b) || $i < $b) {\n                $b = $i;\n       \
    \     }\n        }\n    }\n    return [$a, $b];\n}", "    my $largest_negative\
    \ = undef;\n    my $smallest_positive = undef;\n    foreach my $elem (@$lst) {\n\
    \        if ($elem < 0) {\n            if (!defined($largest_negative) || $elem\
    \ > $largest_negative) {\n                $largest_negative = $elem;\n       \
    \     }\n        } elsif ($elem > 0) {\n            if (!defined($smallest_positive)\
    \ || $elem < $smallest_positive) {\n                $smallest_positive = $elem;\n\
    \            }\n        }\n    }\n    return [$largest_negative, $smallest_positive];\n\
    }", "    my $max = undef;\n    my $min = undef;\n    foreach my $i (@$lst) {\n\
    \        if ($i < 0) {\n            if (!defined($max) || $i > $max) {\n     \
    \           $max = $i;\n            }\n        } elsif ($i > 0) {\n          \
    \  if (!defined($min) || $i < $min) {\n                $min = $i;\n          \
    \  }\n        }\n    }\n    return [$max, $min];\n}", "    my $largest_negative\
    \ = undef;\n    my $smallest_positive = undef;\n    foreach my $x (@$lst) {\n\
    \        if ($x < 0) {\n            if (!defined($largest_negative) || $x > $largest_negative)\
    \ {\n                $largest_negative = $x;\n            }\n        } elsif ($x\
    \ > 0) {\n            if (!defined($smallest_positive) || $x < $smallest_positive)\
    \ {\n                $smallest_positive = $x;\n            }\n        }\n    }\n\
    \    return [$largest_negative, $smallest_positive];\n}", "    my $largest_negative\
    \ = undef;\n    my $smallest_positive = undef;\n    for my $i (@$lst) {\n    \
    \    if ($i < 0) {\n            if (!defined($largest_negative) || $i > $largest_negative)\
    \ {\n                $largest_negative = $i;\n            }\n        } elsif ($i\
    \ > 0) {\n            if (!defined($smallest_positive) || $i < $smallest_positive)\
    \ {\n                $smallest_positive = $i;\n            }\n        }\n    }\n\
    \    return [$largest_negative, $smallest_positive];\n}", "    my $max = undef;\n\
    \    my $min = undef;\n    foreach my $i (@$lst) {\n        if ($i < 0) {\n  \
    \          if (!defined($max) || $i > $max) {\n                $max = $i;\n  \
    \          }\n        } else {\n            if (!defined($min) || $i < $min) {\n\
    \                $min = $i;\n            }\n        }\n    }\n    return [$max,\
    \ $min];\n}", "    my $max = undef;\n    my $min = undef;\n    foreach my $x (@$lst)\
    \ {\n        if ($x < 0) {\n            if (!defined($max) || $x > $max) {\n \
    \               $max = $x;\n            }\n        } elsif ($x > 0) {\n      \
    \      if (!defined($min) || $x < $min) {\n                $min = $x;\n      \
    \      }\n        }\n    }\n    return [$max, $min];\n}", "    my $max = undef;\n\
    \    my $min = undef;\n    for my $e (@$lst) {\n        if ($e > 0) {\n      \
    \      if (!defined($min) || $e < $min) {\n                $min = $e;\n      \
    \      }\n        } elsif ($e < 0) {\n            if (!defined($max) || $e > $max)\
    \ {\n                $max = $e;\n            }\n        }\n    }\n    return [$max,\
    \ $min];\n}", "    my $max = undef;\n    my $min = undef;\n    foreach my $x (@$lst)\
    \ {\n        if ($x < 0) {\n            if (!defined($max) || $x > $max) {\n \
    \               $max = $x;\n            }\n        } elsif ($x > 0) {\n      \
    \      if (!defined($min) || $x < $min) {\n                $min = $x;\n      \
    \      }\n        }\n    }\n    return [$max, $min];\n}", "    my $a = undef;\n\
    \    my $b = undef;\n    foreach my $i (@$lst) {\n        if ($i < 0) {\n    \
    \        if (!defined($a) || $i > $a) {\n                $a = $i;\n          \
    \  }\n        } elsif ($i > 0) {\n            if (!defined($b) || $i < $b) {\n\
    \                $b = $i;\n            }\n        }\n    }\n    return [$a, $b];\n\
    }", "    my $max = undef;\n    my $min = undef;\n    foreach my $i (@$lst) {\n\
    \        if ($i > 0) {\n            if (!defined($min) || $i < $min) {\n     \
    \           $min = $i;\n            }\n        } elsif ($i < 0) {\n          \
    \  if (!defined($max) || $i > $max) {\n                $max = $i;\n          \
    \  }\n        }\n    }\n    return [$max, $min];\n}", "    my $a = undef;\n  \
    \  my $b = undef;\n    for my $i (@$lst) {\n        if ($i < 0) {\n          \
    \  if (not defined $a or $i > $a) {\n                $a = $i;\n            }\n\
    \        }\n        elsif ($i > 0) {\n            if (not defined $b or $i < $b)\
    \ {\n                $b = $i;\n            }\n        }\n    }\n    return [$a,\
    \ $b];\n}", "    my $max = undef;\n    my $min = undef;\n    foreach my $elem\
    \ (@$lst) {\n        if ($elem < 0) {\n            if (!defined($max) || $elem\
    \ > $max) {\n                $max = $elem;\n            }\n        }\n       \
    \ elsif ($elem > 0) {\n            if (!defined($min) || $elem < $min) {\n   \
    \             $min = $elem;\n            }\n        }\n    }\n    return [$max,\
    \ $min];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
