name: HumanEval_40_triples_sum_to_zero
language: pl
prompt: "# triples_sum_to_zero takes an array of integers as an input.\n# it returns\
  \ 1 if there are three distinct elements in the array that\n# sum to zero, and \
  \ otherwise.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2,\
  \ 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5,\
  \ -1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 5, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $i;\n    my $j;\n    my $k;\n    my $len = scalar(@$l);\n  \
    \  for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++)\
    \ {\n            for ($k = $j + 1; $k < $len; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    my @list =\
    \ @$l;\n    my $n = scalar(@list);\n    my $i;\n    my $j;\n    my $k;\n    for($i\
    \ = 0; $i < $n; $i++) {\n        for($j = $i + 1; $j < $n; $j++) {\n         \
    \   for($k = $j + 1; $k < $n; $k++) {\n                if($list[$i] + $list[$j]\
    \ + $list[$k] == 0) {\n                    return 1;\n                }\n    \
    \        }\n        }\n    }\n    return \"\";\n}", "    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    my $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                \
    \    return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my $n = scalar(@$l);\n    if ($n < 3) {\n        return \"\"\
    ;\n    }\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k\
    \ = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my $n = scalar(@$l);\n    my $i;\n\
    \    my $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n \
    \               if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                 \
    \   return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < scalar(@$l);\
    \ $i++) {\n        for ($j = $i + 1; $j < scalar(@$l); $j++) {\n            for\
    \ ($k = $j + 1; $k < scalar(@$l); $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    my $i;\n    my $j;\n \
    \   my $k;\n    my $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i = $i + 1) {\n\
    \        for ($j = $i + 1; $j < $n; $j = $j + 1) {\n            for ($k = $j +\
    \ 1; $k < $n; $k = $k + 1) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my $n = scalar(@$l);\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n  \
    \          for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    my $i;\n  \
    \  my $j;\n    my $k;\n    my $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my($i, $j, $k);\n    for ($i = 0; $i < scalar(@$l)\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < scalar(@$l) - 1; $j++) {\n    \
    \        for ($k = $j + 1; $k < scalar(@$l); $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    my @list =\
    \ @$l;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    for ($i = 0; $i <\
    \ scalar(@list); $i++) {\n        for ($j = $i + 1; $j < scalar(@list); $j++)\
    \ {\n            for ($k = $j + 1; $k < scalar(@list); $k++) {\n             \
    \   if ($list[$i] + $list[$j] + $list[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my $r = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = scalar(@$l);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    $r = 1;\n               \
    \ }\n            }\n        }\n    }\n    return $r;\n}", "    my $n = scalar(@$l);\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my(@a) = @$l;\n    my($i, $j, $k);\n    for\
    \ ($i = 0; $i < @a; $i++) {\n        for ($j = $i + 1; $j < @a; $j++) {\n    \
    \        for ($k = $j + 1; $k < @a; $k++) {\n                if ($a[$i] + $a[$j]\
    \ + $a[$k] == 0) {\n                    return 1;\n                }\n       \
    \     }\n        }\n    }\n    return \"\";\n}", "    my $n = scalar(@$l);\n \
    \   my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++) {\n      \
    \  for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    my($i, $j, $k);\n    for ($i = 0; $i < @$l - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < @$l - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n                    return 1;\n                }\n            }\n    \
    \    }\n    }\n    return \"\";\n}", "    my @list = @$l;\n    my $i = 0;\n  \
    \  my $j = 0;\n    my $k = 0;\n    my $sum = 0;\n    for ($i = 0; $i < @list;\
    \ $i++) {\n        for ($j = $i + 1; $j < @list; $j++) {\n            for ($k\
    \ = $j + 1; $k < @list; $k++) {\n                $sum = $list[$i] + $list[$j]\
    \ + $list[$k];\n                if ($sum == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   my($i, $j, $k);\n    for ($i = 0; $i < @$l - 2; $i++) {\n        for ($j =\
    \ $i + 1; $j < @$l - 1; $j++) {\n            for ($k = $j + 1; $k < @$l; $k++)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my($i, $j, $k);\n    for ($i = 0; $i < $#$l; $i++) {\n     \
    \   for ($j = $i + 1; $j < $#$l; $j++) {\n            for ($k = $j + 1; $k < $#$l;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
