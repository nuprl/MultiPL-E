name: HumanEval_112_reverse_delete
language: pl
prompt: "# Task\n# We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n# then check if the result string is\
  \ palindrome.\n# A string is called palindrome if it reads the same backward as\
  \ forward.\n# You should return an array containing the result string and 1/ for\
  \ the check.\n# Example\n# >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\", \"\
  \"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"\
  abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    my($s, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n\
  \        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdef\", \"b\"),[\"acdef\", \"\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\"\
  , 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dwik\", \"w\"),[\"dik\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdedcba\", \"\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"\
  abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  mamma\", \"mia\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $s1 = $s;\n    $s1 =~ s/[$c]//g;\n    my $s2 = reverse $s1;\n\
    \    return [$s1, $s1 eq $s2 ? 1 : ''];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return [$r, $r eq reverse($r)];\n}", "    my $result = $s;\n    $result =~\
    \ s/[$c]//g;\n    my $check = $result eq reverse $result ? 1 : '';\n    return\
    \ [$result, $check];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $result = '';\n   \
    \ my $check = 0;\n    my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char\
    \ (split //, $s) {\n        if (!$c_hash{$char}) {\n            $result .= $char;\n\
    \        }\n    }\n    $check = 1 if $result eq reverse $result;\n    return [$result,\
    \ $check];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq\
    \ reverse($r)];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r\
    \ eq reverse($r)];\n}", "    my $result = '';\n    my $check = 0;\n    my %c_hash\
    \ = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n       \
    \ $result .= $char unless $c_hash{$char};\n    }\n    $check = 1 if $result eq\
    \ reverse $result;\n    return [$result, $check];\n}", "    my $r = reverse $s;\n\
    \    my $p = $s eq $r ? 1 : '';\n    $s =~ s/[$c]//g;\n    return [$s, $p];\n}",
  "    my $result = '';\n    my $check = 0;\n    my %c_hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        $result .= $char unless\
    \ $c_hash{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n    return\
    \ [$result, $check];\n}", "    my $res = $s;\n    $res =~ s/[$c]//g;\n    my $check\
    \ = $res eq reverse $res ? 1 : '';\n    return [$res, $check];\n}", "    my $result\
    \ = $s;\n    $result =~ s/[$c]//g;\n    my $check = $result eq reverse $result\
    \ ? 1 : '';\n    return [$result, $check];\n}", "    my $result = $s;\n    $result\
    \ =~ s/[$c]//g;\n    my $check = $result eq reverse $result ? 1 : '';\n    return\
    \ [$result, $check];\n}", "    my $s_copy = $s;\n    $s_copy =~ s/[$c]//g;\n \
    \   my $check = $s_copy eq reverse $s_copy ? 1 : '';\n    return [$s_copy, $check];\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    my $r = join '', grep { index($c, $_) == -1\
    \ } split //, $s;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", " \
    \   my $result = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split //,\
    \ $c;\n    for my $char (split //, $s) {\n        $result .= $char unless $c{$char};\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_\
    \ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i]\
    \ unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c =\
    \ map { $_ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r,\
    \ $s[$i] unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    my $p = $r eq\
    \ reverse $r;\n    return [$r, $p];\n}", "    my $r = reverse $s;\n    my $t =\
    \ $s;\n    $t =~ s/[$c]//g;\n    my $p = $t eq $r ? 1 : '';\n    return [$t, $p];\n\
    }", "    my $result = '';\n    my $check = 0;\n    my %c = map {$_ => 1} split\
    \ //, $c;\n    for my $char (split //, $s) {\n        $result .= $char unless\
    \ $c{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n    return\
    \ [$result, $check];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my %c = map { $_ => 1\
    \ } split //, $c;\n    $s = join '', grep { !$c{$_} } split //, $s;\n    return\
    \ [$s, $s eq reverse $s];\n}", "    my @s = split //, $s;\n    my @c = split //,\
    \ $c;\n    my @result;\n    for my $i (0..$#s) {\n        my $flag = 0;\n    \
    \    for my $j (0..$#c) {\n            if ($s[$i] eq $c[$j]) {\n             \
    \   $flag = 1;\n                last;\n            }\n        }\n        if ($flag\
    \ == 0) {\n            push @result, $s[$i];\n        }\n    }\n    my $result\
    \ = join \"\", @result;\n    my $check = 0;\n    if ($result eq reverse $result)\
    \ {\n        $check = 1;\n    }\n    return [$result, $check];\n}", "    my $result\
    \ = '';\n    my $check = 0;\n    my %hash = map { $_ => 1 } split //, $c;\n  \
    \  for my $char (split //, $s) {\n        if (!$hash{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my $result = \"\";\n    my $check = 0;\n\
    \    my %hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        $result .= $char unless $hash{$char};\n    }\n    $check = 1 if $result\
    \ eq reverse $result;\n    return [$result, $check];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n  \
    \  return [$r, $p];\n}", "    my $res = $s;\n    $res =~ s/[$c]//g;\n    my $check\
    \ = $res eq reverse $res ? 1 : '';\n    return [$res, $check];\n}", "    my $r\
    \ = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    return [$t, $t eq\
    \ $r];\n}", "    my $result = '';\n    my $check = 0;\n    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result .= $char\
    \ unless $c{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n  \
    \  return [$result, $check];\n}", "    my $r = join \"\", grep { index($c, $_)\
    \ == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my %c =\
    \ map { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //,\
    \ $s;\n    return [$r, $r eq reverse $r];\n}", "    my %c = map {$_ => 1} split\
    \ //, $c;\n    my $r = join '', grep {!$c{$_}} split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = join '', grep\
    \ { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1\
    \ } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless\
    \ $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n\
    \    return [$r, $p];\n}", "    my $s_new = $s;\n    for my $char (split //, $c)\
    \ {\n        $s_new =~ s/$char//g;\n    }\n    my $check = $s_new eq reverse $s_new\
    \ ? 1 : '';\n    return [$s_new, $check];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return [$r, $r eq reverse($r)];\n}", "    my %c = map { $_ => 1 } split //,\
    \ $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r\
    \ eq reverse $r];\n}", "    my $result = $s;\n    my $check = 0;\n    for my $i\
    \ (0..length($c)-1) {\n        my $char = substr($c, $i, 1);\n        $result\
    \ =~ s/$char//g;\n    }\n    if ($result eq reverse $result) {\n        $check\
    \ = 1;\n    }\n    return [$result, $check];\n}", "    my @s = split //, $s;\n\
    \    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for\
    \ my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my\
    \ $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}",
  "    my $res = '';\n    my $check = 0;\n    my %c = map {$_ => 1} split //, $c;\n\
    \    for my $ch (split //, $s) {\n        $res .= $ch unless $c{$ch};\n    }\n\
    \    $check = 1 if $res eq reverse $res;\n    return [$res, $check];\n}", "  \
    \  my %hash = map {$_ => 1} split //, $c;\n    my $res = join '', grep {!$hash{$_}}\
    \ split //, $s;\n    my $check = $res eq reverse $res ? 1 : '';\n    return [$res,\
    \ $check];\n}", "    my $result = '';\n    my $check = '';\n    my %c = map {\
    \ $_ => 1 } split //, $c;\n    for my $i (0 .. length($s) - 1) {\n        my $char\
    \ = substr($s, $i, 1);\n        if (!exists $c{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my $result = '';\n    my $check = 0;\n\
    \    my %hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        $result .= $char unless $hash{$char};\n    }\n    $check = 1 if $result\
    \ eq reverse $result;\n    return [$result, $check];\n}", "    my $r = '';\n \
    \   my $p = 1;\n    my %c = map { $_ => 1 } split //, $c;\n    for my $i (0 ..\
    \ length($s) - 1) {\n        my $ch = substr($s, $i, 1);\n        if (!$c{$ch})\
    \ {\n            $r .= $ch;\n        }\n    }\n    for my $i (0 .. length($r)\
    \ - 1) {\n        my $ch1 = substr($r, $i, 1);\n        my $ch2 = substr($r, -$i\
    \ - 1, 1);\n        if ($ch1 ne $ch2) {\n            $p = 0;\n            last;\n\
    \        }\n    }\n    return [$r, $p];\n}", "    my $r = reverse $s;\n    my\
    \ $result = '';\n    my $check = 0;\n    for my $i (0..length($s)-1) {\n     \
    \   if(index($c, substr($s, $i, 1)) == -1) {\n            $result .= substr($s,\
    \ $i, 1);\n        }\n    }\n    if($result eq $r) {\n        $check = 1;\n  \
    \  }\n    return [$result, $check];\n}", "    $s =~ s/[$c]//g;\n    return [$s,\
    \ $s eq reverse($s)];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ [$r, $r eq reverse($r)];\n}", "    my $res = '';\n    my $check = 0;\n    my\
    \ %c = map {$_ => 1} split //, $c;\n    for my $ch (split //, $s) {\n        $res\
    \ .= $ch unless $c{$ch};\n    }\n    $check = 1 if $res eq reverse $res;\n   \
    \ return [$res, $check];\n}", "    my $r = join '', grep { index($c, $_) == -1\
    \ } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}",
  "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $result = '';\n    my $check = 0;\n    my %c\
    \ = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n       \
    \ $result .= $char unless $c{$char};\n    }\n    $check = 1 if $result eq reverse\
    \ $result;\n    return [$result, $check];\n}", "    my $r = join '', grep { index($c,\
    \ $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $result\
    \ = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        if (!exists $c{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my $result = '';\n    my $check = 0;\n\
    \    my %c = map { $_ => 1 } split //, $c;\n    for my $ch (split //, $s) {\n\
    \        $result .= $ch unless $c{$ch};\n    }\n    $check = 1 if $result eq reverse\
    \ $result;\n    return [$result, $check];\n}", "    my $result = '';\n    my $check\
    \ = 0;\n    for my $i (0..length($s)-1) {\n        my $char = substr($s, $i, 1);\n\
    \        if (index($c, $char) == -1) {\n            $result .= $char;\n      \
    \  }\n    }\n    if ($result eq reverse($result)) {\n        $check = 1;\n   \
    \ }\n    return [$result, $check];\n}", "    my $res = $s;\n    $res =~ s/[$c]//g;\n\
    \    return [$res, $res eq reverse($res)];\n}", "    my @s = split //, $s;\n \
    \   my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for\
    \ my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my\
    \ $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}",
  "    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    my $p = $t\
    \ eq $r ? 1 : '';\n    return [$t, $p];\n}", "    my $r = join '', grep { index($c,\
    \ $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $result\
    \ = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $ch (split //, $s) {\n        $result .= $ch unless $c{$ch};\n    }\n   \
    \ $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n}",
  "    my $result = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!$hash{$char}) {\n \
    \           $result .= $char;\n        }\n    }\n    $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "    my %c = map {$_ =>\
    \ 1} split //, $c;\n    my @s = split //, $s;\n    my @r;\n    for my $i (0..$#s)\
    \ {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n\
    \    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = reverse\
    \ $s;\n    my $p = $s eq $r ? 1 : '';\n    $s =~ s/[$c]//g;\n    return [$s, $p];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    my $result = $s;\n    for my $char (split\
    \ //, $c) {\n        $result =~ s/$char//g;\n    }\n    return [$result, $result\
    \ eq reverse $result];\n}", "    my @c = split //, $c;\n    my @s = split //,\
    \ $s;\n    my @r;\n    for my $i (0..$#s) {\n        if (grep {$s[$i] eq $_} @c)\
    \ {\n            next;\n        }\n        push @r, $s[$i];\n    }\n    my $r\
    \ = join '', @r;\n    my $p = $r eq reverse $r ? 1 : '';\n    return [$r, $p];\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    my $p\
    \ = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = '';\n    my $p =\
    \ 1;\n    for my $i (0 .. length($s) - 1) {\n        my $ch = substr($s, $i, 1);\n\
    \        if (index($c, $ch) == -1) {\n            $r .= $ch;\n        }\n    }\n\
    \    for my $i (0 .. length($r) / 2 - 1) {\n        my $ch1 = substr($r, $i, 1);\n\
    \        my $ch2 = substr($r, length($r) - 1 - $i, 1);\n        if ($ch1 ne $ch2)\
    \ {\n            $p = 0;\n            last;\n        }\n    }\n    return [$r,\
    \ $p];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = '';\n    my $check\
    \ = 0;\n    my %hash = map { $_ => 1 } split //, $c;\n    for my $char (split\
    \ //, $s) {\n        $result .= $char unless $hash{$char};\n    }\n    $check\
    \ = 1 if $result eq reverse $result;\n    return [$result, $check];\n}", "   \
    \ my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r\
    \ = join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $r = reverse $s;\n    my $p = $s eq $r ? 1 : '';\n    $s =~ s/[$c]//g;\n\
    \    return [$s, $p];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n\
    \    my %c = map { $_ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n   \
    \     push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n  \
    \  my $p = 1;\n    for my $i (0 .. $#r/2) {\n        $p = 0 if $r[$i] ne $r[-$i-1];\n\
    \    }\n    return [$r, $p];\n}", "    my %hash = map { $_ => 1 } split //, $c;\n\
    \    my $result = join \"\", grep { !$hash{$_} } split //, $s;\n    return [$result,\
    \ $result eq reverse $result];\n}", "    my $result = '';\n    my $check = 0;\n\
    \    my %hash = map {$_ => 1} split //, $c;\n    for my $char (split //, $s) {\n\
    \        if (!exists $hash{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my $result = '';\n    my $check = '';\n    my %c = map {$_ => 1} split\
    \ //, $c;\n    for my $ch (split //, $s) {\n        $result .= $ch unless $c{$ch};\n\
    \    }\n    $check = $result eq reverse $result ? 1 : '';\n    return [$result,\
    \ $check];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my\
    \ %c = map { $_ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push\
    \ @r, $s[$i] unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    my $p =\
    \ $r eq reverse $r;\n    return [$r, $p];\n}", "    $s =~ s/[$c]//g;\n    return\
    \ [$s, $s eq reverse($s)];\n}", "    my $r = reverse $s;\n    my $p = $s eq $r\
    \ ? 1 : '';\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    return [$t, $p];\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n}",
  "    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    my $res = $t\
    \ eq $r ? 1 : '';\n    return [$t, $res];\n}", "    my %c = map { $_ => 1 } split\
    \ //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    my $p = $r\
    \ eq reverse $r;\n    return [$r, $p];\n}", "    my $r = reverse $s;\n    my $t\
    \ = $s;\n    $t =~ s/[$c]//g;\n    return [$t, $t eq $r];\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n}", "    my $result\
    \ = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n\
    \    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $check = $result\
    \ eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "    my $r\
    \ = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    return [$t, $t eq\
    \ $r];\n}", "    my $result = '';\n    my $is_palindrome = 1;\n    my %c_hash\
    \ = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n       \
    \ if (!$c_hash{$char}) {\n            $result .= $char;\n        }\n    }\n  \
    \  for my $i (0 .. length($result) / 2 - 1) {\n        if (substr($result, $i,\
    \ 1) ne substr($result, -$i - 1, 1)) {\n            $is_palindrome = 0;\n    \
    \        last;\n        }\n    }\n    return [$result, $is_palindrome];\n}", " \
    \   my $result = '';\n    my $check = 0;\n    my %c_hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        next if exists $c_hash{$char};\n\
    \        $result .= $char;\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my $res = '';\n    my $check = 0;\n \
    \   my %c = map { $_ => 1 } split //, $c;\n    for my $ch (split //, $s) {\n \
    \       $res .= $ch unless $c{$ch};\n    }\n    $check = 1 if $res eq reverse\
    \ $res;\n    return [$res, $check];\n}", "    my $result = $s;\n    $result =~\
    \ s/[$c]//g;\n    my $check = $result eq reverse $result ? 1 : '';\n    return\
    \ [$result, $check];\n}", "    my $result = '';\n    my $check = 0;\n    my %c\
    \ = map { $_ => 1 } split //, $c;\n    for my $ch (split //, $s) {\n        next\
    \ if $c{$ch};\n        $result .= $ch;\n    }\n    $check = 1 if $result eq reverse\
    \ $result;\n    return [$result, $check];\n}", "    my $result = '';\n    my $check\
    \ = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for my $char (split //,\
    \ $s) {\n        $result .= $char unless $c{$char};\n    }\n    $check = 1 if\
    \ $result eq reverse $result;\n    return [$result, $check];\n}", "    my $result\
    \ = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n\
    \    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    my $result = $s;\n    for my $char (split\
    \ //, $c) {\n        $result =~ s/$char//g;\n    }\n    my $check = $result eq\
    \ reverse $result ? 1 : '';\n    return [$result, $check];\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n}", "    my $result\
    \ = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n\
    \    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $check = $result\
    \ eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "    my %c\
    \ = map { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $result = '';\n   \
    \ my $check = 0;\n    my %hash = map {$_ => 1} split //, $c;\n    for my $char\
    \ (split //, $s) {\n        if (!$hash{$char}) {\n            $result .= $char;\n\
    \        }\n    }\n    $check = 1 if $result eq reverse $result;\n    return [$result,\
    \ $check];\n}", "    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n\
    \    return [$t, $t eq $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ [$r, $r eq reverse($r)];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n\
    \    return [$result, $result eq reverse($result)];\n}", "    my @result = split\
    \ //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    @result\
    \ = grep { !$c{$_} } @result;\n    my $result = join '', @result;\n    my $palindrome\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $palindrome];\n\
    }", "    my $result = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split\
    \ //, $c;\n    for my $i (0 .. length($s) - 1) {\n        my $char = substr($s,\
    \ $i, 1);\n        if (!$c{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    if ($result eq reverse $result) {\n        $check = 1;\n    }\n  \
    \  return [$result, $check];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n   \
    \ my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = join '', grep\
    \ { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "    my @s = split //,\
    \ $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n\
    \    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n\
    \    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n\
    }", "    my $result = \"\";\n    my $is_palindrome = 1;\n    my %c_hash = map\
    \ { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        if (!exists\
    \ $c_hash{$char}) {\n            $result .= $char;\n        }\n    }\n    my $result_reverse\
    \ = reverse $result;\n    if ($result ne $result_reverse) {\n        $is_palindrome\
    \ = 0;\n    }\n    return [$result, $is_palindrome];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $r = reverse $s;\n    my %h = map { $_ => 1 } split //, $c;\n    $s\
    \ =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return [$s, $s eq $r];\n}", "    my\
    \ $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r\
    \ eq reverse $r];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n\
    \    my %c = map { $_ => 1 } @c;\n    my @result = grep { not exists $c{$_} }\
    \ @s;\n    my $result = join '', @result;\n    my $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "    my $r = '';\n   \
    \ my $p = 0;\n    for my $i (0..length($s)-1) {\n        my $ch = substr($s, $i,\
    \ 1);\n        if (index($c, $ch) == -1) {\n            $r .= $ch;\n        }\n\
    \    }\n    for my $i (0..length($r)-1) {\n        my $ch1 = substr($r, $i, 1);\n\
    \        my $ch2 = substr($r, length($r)-$i-1, 1);\n        if ($ch1 ne $ch2)\
    \ {\n            $p = '';\n            last;\n        }\n    }\n    return [$r,\
    \ $p];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c =\
    \ map { $_ => 1 } @c;\n    my @result = grep { !$c{$_} } @s;\n    my $result =\
    \ join '', @result;\n    my $is_palindrome = $result eq reverse $result;\n   \
    \ return [$result, $is_palindrome];\n}", "    my $r = reverse $s;\n    my $d =\
    \ $s;\n    $d =~ s/[$c]//g;\n    return [$d, $d eq $r];\n}", "    $s =~ s/[$c]//g;\n\
    \    return [$s, $s eq reverse($s)];\n}", "    my $result = '';\n    my $check\
    \ = 0;\n    my %c = map { $_ => 1 } split //, $c;\n    for my $char (split //,\
    \ $s) {\n        $result .= $char unless $c{$char};\n    }\n    $check = 1 if\
    \ $result eq reverse $result;\n    return [$result, $check];\n}", "    my $r =\
    \ reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    my $res = $t eq $r ?\
    \ 1 : \"\";\n    return [$t, $res];\n}", "    my %c = map { $_ => 1 } split //,\
    \ $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r\
    \ eq reverse $r];\n}", "    my $result = '';\n    my $check = 0;\n    my %hash\
    \ = map {$_ => 1} split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $hash{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my %c = map { $_ => 1 } split //, $c;\n\
    \    my $result = join '', grep { !$c{$_} } split //, $s;\n    return [$result,\
    \ $result eq reverse $result];\n}", "    my $result = '';\n    my $check = 0;\n\
    \    my %c = map {$_ => 1} split //, $c;\n    for my $i (0..length($s)-1) {\n\
    \        my $char = substr($s, $i, 1);\n        if (!$c{$char}) {\n          \
    \  $result .= $char;\n        }\n    }\n    my $rev = reverse $result;\n    $check\
    \ = 1 if $result eq $rev;\n    return [$result, $check];\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n}", "    my $r = join\
    \ '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $check =\
    \ $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", " \
    \   my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ =>\
    \ 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless\
    \ $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my $result = $s;\n    my $check = 0;\n    my @chars = split(//,\
    \ $c);\n    foreach my $char (@chars) {\n        $result =~ s/$char//g;\n    }\n\
    \    if ($result eq reverse($result)) {\n        $check = 1;\n    }\n    return\
    \ [$result, $check];\n}", "    my $r = reverse $s;\n    my $t = join '', grep\
    \ { index($c, $_) < 0 } split //, $s;\n    return [$t, $t eq $r];\n}", "    my\
    \ $r = join '', reverse split //, $s;\n    my $p = 1;\n    for my $i (0 .. length($s)\
    \ - 1) {\n        if (index($c, substr($s, $i, 1)) >= 0) {\n            substr($s,\
    \ $i, 1) = '';\n            substr($r, $i, 1) = '';\n        }\n        if (substr($s,\
    \ $i, 1) ne substr($r, $i, 1)) {\n            $p = 0;\n        }\n    }\n    return\
    \ [$s, $p];\n}", "    my $result = '';\n    for my $char (split //, $s) {\n  \
    \      $result .= $char unless $c =~ /$char/;\n    }\n    my $check = $result\
    \ eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "    my $r\
    \ = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq\
    \ reverse $r];\n}", "    my $res = $s;\n    $res =~ s/[$c]//g;\n    return [$res,\
    \ $res eq reverse($res)];\n}", "    my $r = reverse $s;\n    my %c = map { $_\
    \ => 1 } split //, $c;\n    my @s = split //, $s;\n    my @r = split //, $r;\n\
    \    my @res;\n    for my $i (0 .. $#s) {\n        if (!$c{$s[$i]} && !$c{$r[$i]})\
    \ {\n            push @res, $s[$i];\n        }\n    }\n    my $res = join '',\
    \ @res;\n    my $check = $res eq reverse $res ? 1 : '';\n    return [$res, $check];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my $r = reverse $s;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n   \
    \ return [$s, $s eq $r];\n}", "    my $result = \"\";\n    my $check = 0;\n  \
    \  my %hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n\
    \        $result .= $char unless $hash{$char};\n    }\n    $check = 1 if $result\
    \ eq reverse $result;\n    return [$result, $check];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my %hash = map { $_ => 1 } split //, $c;\n    my $res = join '', grep\
    \ { !$hash{$_} } split //, $s;\n    my $check = $res eq reverse $res ? 1 : '';\n\
    \    return [$res, $check];\n}", "    my $r = join \"\", grep { index($c, $_)\
    \ == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $result\
    \ = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ (split //, $s) {\n        $result .= $_ unless $c{$_};\n    }\n    $check =\
    \ 1 if $result eq reverse $result;\n    return [$result, $check];\n}", "    my\
    \ $s_copy = $s;\n    $s_copy =~ s/[$c]//g;\n    my $check = $s_copy eq reverse\
    \ $s_copy ? 1 : '';\n    return [$s_copy, $check];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $r = join '', reverse split //, $s;\n    my $t = join '', reverse\
    \ split //, $c;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$t]//g;\n    return [$s, $s\
    \ eq $r];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", " \
    \   my $r = join '', grep { index($c, $_) == -1 } split '', $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $result = '';\n    my $check = 0;\n    my %c_hash\
    \ = map {$_ => 1} split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $c_hash{$char};\n    }\n    $check = 1 if $result eq reverse\
    \ $result;\n    return [$result, $check];\n}", "    my $res = $s;\n    $res =~\
    \ s/[$c]//g;\n    my $check = $res eq reverse $res ? 1 : '';\n    return [$res,\
    \ $check];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $check = $r eq\
    \ reverse $r ? 1 : '';\n    return [$r, $check];\n}", "    my $result = '';\n\
    \    my $check = 0;\n    my %c = map { $_ => 1 } split //, $c;\n    for my $char\
    \ (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n    $check\
    \ = 1 if $result eq reverse $result;\n    return [$result, $check];\n}", "   \
    \ my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $res = '';\n    my $check = 0;\n    my %hash\
    \ = map {$_ => 1} split //, $c;\n    for my $char (split //, $s) {\n        $res\
    \ .= $char unless $hash{$char};\n    }\n    $check = 1 if $res eq reverse $res;\n\
    \    return [$res, $check];\n}", "    my $r = join '', grep { index($c, $_) ==\
    \ -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my @s = split\
    \ //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my\
    \ @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n\
    \    }\n    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r,\
    \ $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my $r = reverse $s;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n   \
    \ return [$s, $s eq $r];\n}", "    my $r = join '', grep { index($c, $_) == -1\
    \ } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n}", "    my $result\
    \ = '';\n    my $check = '';\n    my %c_hash = map { $_ => 1 } split //, $c;\n\
    \    for my $char (split //, $s) {\n        if (!exists $c_hash{$char}) {\n  \
    \          $result .= $char;\n        }\n    }\n    my $reverse = reverse $result;\n\
    \    if ($result eq $reverse) {\n        $check = 1;\n    }\n    return [$result,\
    \ $check];\n}", "    my $result = '';\n    my $check = 0;\n    my %c_hash = map\
    \ {$_ => 1} split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $c_hash{$char};\n    }\n    $check = 1 if $result eq reverse\
    \ $result;\n    return [$result, $check];\n}", "    my @s = split //, $s;\n  \
    \  my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for\
    \ my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my\
    \ $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}",
  "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    my $p = $r\
    \ eq reverse $r;\n    return [$r, $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return [$r, $r eq reverse($r)];\n}", "    my $r = reverse $s;\n    my $result\
    \ = $s;\n    for my $i (0..length($c)-1) {\n        my $char = substr($c, $i,\
    \ 1);\n        $result =~ s/$char//g;\n    }\n    return [$result, $result eq\
    \ $r ? 1 : ''];\n}", "    my $result = '';\n    my $check = 0;\n    my %c = map\
    \ { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $c{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my $r = join '', grep { index($c, $_)\
    \ == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r =\
    \ join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my $r = reverse $s;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n\
    \    return [$s, $s eq $r];\n}", "    my $result = '';\n    my $check = 0;\n \
    \   my %c = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n\
    \        $result .= $char unless $c{$char};\n    }\n    $check = 1 if $result\
    \ eq reverse $result;\n    return [$result, $check];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $result = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        $result .= $char unless\
    \ $c{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n    return\
    \ [$result, $check];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my %c = map { $_ => 1\
    \ } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    my %c = map { $_ => 1 } split(//, $c);\n \
    \   my $r = join('', grep { not $c{$_} } split(//, $s));\n    return [$r, $r eq\
    \ reverse($r)];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    $s =~ s/[$c]//g;\n\
    \    return [$s, $s eq reverse $s];\n}", "    my $r = join \"\", grep { index($c,\
    \ $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r\
    \ = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq\
    \ reverse $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq\
    \ reverse $r;\n    return [$r, $p];\n}", "    my $r = reverse $s;\n    my $t =\
    \ $s;\n    $t =~ s/[$c]//g;\n    return [$t, $t eq $r];\n}", "    my $r = join\
    \ '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my $result = '';\n    my $check = 0;\n    my %c_hash = map {$_\
    \ => 1} split //, $c;\n    for my $char (split //, $s) {\n        $result .= $char\
    \ unless $c_hash{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my $r = join '', grep { index($c, $_)\
    \ == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r =\
    \ reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    my $p = $t eq $r ? 1\
    \ : '';\n    return [$t, $p];\n}", "    my $result = '';\n    my $check = 0;\n\
    \    my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        if (!exists $c_hash{$char}) {\n            $result .= $char;\n  \
    \      }\n    }\n    $check = 1 if $result eq reverse $result;\n    return [$result,\
    \ $check];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq\
    \ reverse($r)];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my\
    \ $check = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    $s =~ s/[$c]//g;\n    return [$s, $s eq reverse($s)];\n\
    }", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_}\
    \ } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my @s = split\
    \ //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my\
    \ @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n\
    \    }\n    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r,\
    \ $p];\n}", "    my $r = reverse $s;\n    my $r_c = reverse $c;\n    my $r_s =\
    \ $s;\n    $r_s =~ s/$c//g;\n    my $r_r_s = reverse $r_s;\n    my $result = [];\n\
    \    if ($r_r_s eq $r_s) {\n        push @$result, $r_s, 1;\n    } else {\n  \
    \      push @$result, $r_s, '';\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
