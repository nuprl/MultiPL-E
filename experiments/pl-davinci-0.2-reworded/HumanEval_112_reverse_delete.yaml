name: HumanEval_112_reverse_delete
language: pl
prompt: "# Task\n# We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n# then check if the result string is\
  \ palindrome.\n# A string is called palindrome if it reads the same backward as\
  \ forward.\n# You should return an array containing the result string and 1/ for\
  \ the check.\n# Example\n# >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\", \"\
  \"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"\
  abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    my($s, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n\
  \        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdef\", \"b\"),[\"acdef\", \"\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\"\
  , 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dwik\", \"w\"),[\"dik\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdedcba\", \"\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"\
  abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  mamma\", \"mia\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_\
    \ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i]\
    \ unless $c{$s[$i]};\n    }\n    return [join('', @r), join('', @r) eq join('',\
    \ reverse @r)];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = join '', grep\
    \ { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1\
    \ } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless\
    \ $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n\
    \    return [$r, $p];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my\
    \ $r = join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $r = reverse $s;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $len = length $s;\n    my $res = '';\n    while ($i\
    \ < $len) {\n        if (index($c, substr($s, $i, 1)) == -1) {\n            $res\
    \ .= substr($s, $i, 1);\n        }\n        $i++;\n    }\n    return [$res, $res\
    \ eq $r];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c\
    \ = map { $_ => 1 } @c;\n    my @result = grep { !$c{$_} } @s;\n    my $result\
    \ = join '', @result;\n    my $check = $result eq reverse $result ? 1 : '';\n\
    \    return [$result, $check];\n}", "    my $result = '';\n    my $check = '';\n\
    \    my %hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        if (!$hash{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my $result = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!$c{$char}) {\n    \
    \        $result .= $char;\n        }\n    }\n    $check = 1 if $result eq reverse\
    \ $result;\n    return [$result, $check];\n}", "    my $res = '';\n    my $check\
    \ = 1;\n    my %c = map { $_ => 1 } split //, $c;\n    for my $ch (split //, $s)\
    \ {\n        $res .= $ch unless $c{$ch};\n    }\n    $check = 0 if $res ne reverse\
    \ $res;\n    return [$res, $check];\n}", "    my $r = join '', grep { index($c,\
    \ $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r\
    \ = reverse $s;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return [$s, $s\
    \ eq $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = $s;\n    $result =~\
    \ s/[$c]//g;\n    my $check = $result eq reverse $result ? 1 : '';\n    return\
    \ [$result, $check];\n}", "    my $r = reverse $s;\n    my $r_c = reverse $c;\n\
    \    my %c = map { $_ => 1 } split //, $c;\n    my %r_c = map { $_ => 1 } split\
    \ //, $r_c;\n    my @s = split //, $s;\n    my @r = split //, $r;\n    my @r_c\
    \ = split //, $r_c;\n    my @res;\n    my $res;\n    for my $i (0..$#s) {\n  \
    \      if (!$c{$s[$i]} && !$r_c{$r[$i]}) {\n            push @res, $s[$i];\n \
    \       }\n    }\n    $res = join '', @res;\n    return [$res, $res eq reverse\
    \ $res];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", " \
    \   my $result = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split //,\
    \ $c;\n    for my $ch (split //, $s) {\n        $result .= $ch unless $c{$ch};\n\
    \    }\n    $check = $result eq reverse $result ? 1 : '';\n    return [$result,\
    \ $check];\n}", "    my $r = reverse $s;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n\
    \    return [$s, $s eq $r];\n}", "    my $result = '';\n    my $check = 0;\n \
    \   my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        if (!$c_hash{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_\
    \ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i]\
    \ unless $c{$s[$i]};\n    }\n    my $r = join \"\", @r;\n    my $p = $r eq reverse\
    \ $r;\n    return [$r, $p];\n}", "    my @s = split //, $s;\n    my @c = split\
    \ //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s)\
    \ {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n\
    \    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my @s = split //,\
    \ $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n\
    \    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n\
    \    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my $r = reverse $s;\n    my $r_c = reverse $c;\n    my $result = '';\n\
    \    my $check = 0;\n    my $i = 0;\n    my $j = 0;\n    while ($i < length $s\
    \ && $j < length $c) {\n        if (substr($s, $i, 1) eq substr($c, $j, 1)) {\n\
    \            $i++;\n            $j++;\n        } else {\n            $result .=\
    \ substr($s, $i, 1);\n            $i++;\n        }\n    }\n    $result .= substr($s,\
    \ $i);\n    if ($result eq $r) {\n        $check = 1;\n    }\n    return [$result,\
    \ $check];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = $s;\n    $result =~\
    \ s/[$c]//g;\n    return [$result, $result eq reverse($result)];\n}", "    my\
    \ @s = split //, $s;\n    my @c = split //, $c;\n    for my $c (@c) {\n      \
    \  @s = grep { $_ ne $c } @s;\n    }\n    my $result = join '', @s;\n    my $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", " \
    \   my $r = '';\n    my $check = 1;\n    my %c = map { $_ => 1 } split //, $c;\n\
    \    for my $ch (split //, $s) {\n        if (!$c{$ch}) {\n            $r .= $ch;\n\
    \        }\n    }\n    for my $i (0 .. int(length($r) / 2)) {\n        if (substr($r,\
    \ $i, 1) ne substr($r, -$i - 1, 1)) {\n            $check = 0;\n            last;\n\
    \        }\n    }\n    return [$r, $check];\n}", "    my $res = join '', grep\
    \ { index($c, $_) == -1 } split //, $s;\n    return [$res, $res eq reverse $res];\n\
    }", "    my $result = '';\n    my $check = 0;\n    my %hash = map { $_ => 1 }\
    \ split //, $c;\n    for my $char (split //, $s) {\n        $result .= $char unless\
    \ $hash{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n    return\
    \ [$result, $check];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n \
    \   return [$result, $result eq reverse($result)];\n}", "    my %c = map { $_\
    \ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n\
    \    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = $s;\n \
    \   $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n}", "    my $result\
    \ = $s;\n    $result =~ s/[$c]//g;\n    my $check = $result eq reverse $result\
    \ ? 1 : '';\n    return [$result, $check];\n}", "    my %c = map { $_ => 1 } split\
    \ //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    my $p = $r\
    \ eq reverse $r;\n    return [$r, $p];\n}", "    my $r = reverse $s;\n    my $p\
    \ = $s eq $r ? 1 : '';\n    $s =~ s/[$c]//g;\n    return [$s, $p];\n}", "    my\
    \ $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return [$r,\
    \ $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    my $rv\
    \ = $t eq $r ? 1 : '';\n    return [$t, $rv];\n}", "    my $result = \"\";\n \
    \   my $is_palindrome = 1;\n    my %c_hash = map {$_ => 1} split //, $c;\n   \
    \ for my $i (0..length($s)-1) {\n        my $char = substr($s, $i, 1);\n     \
    \   if (!$c_hash{$char}) {\n            $result .= $char;\n        }\n    }\n\
    \    for my $i (0..length($result)-1) {\n        my $char = substr($result, $i,\
    \ 1);\n        my $rev_char = substr($result, length($result)-1-$i, 1);\n    \
    \    if ($char ne $rev_char) {\n            $is_palindrome = 0;\n            last;\n\
    \        }\n    }\n    return [$result, $is_palindrome];\n}", "    my $result\
    \ = '';\n    my $check = 0;\n    my %c_hash = map { $_ => 1 } split //, $c;\n\
    \    for my $char (split //, $s) {\n        $result .= $char unless $c_hash{$char};\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my $r = reverse $s;\n    my $r_c = reverse $c;\n    my $res = $s;\n \
    \   my $res_c = $c;\n    my $res_r = $r;\n    my $res_r_c = $r_c;\n    my $res_r_c_r\
    \ = reverse $res_r_c;\n    my $res_r_c_r_c = reverse $res_r_c_r;\n    my $res_r_c_r_c_r\
    \ = reverse $res_r_c_r_c;\n    my $res_r_c_r_c_r_c = reverse $res_r_c_r_c_r;\n\
    \    my $res_r_c_r_c_r_c_r = reverse $res_r_c_r_c_r_c;\n    my $res_r_c_r_c_r_c_r_c\
    \ = reverse $res_r_c_r_c_r_c_r;\n    my $res_r_c_r_c_r_c_r_c_r = reverse $res_r_c_r_c_r_c_r_c;\n\
    \    my $res_r_c_r_c_r_c_r_c_r_c = reverse $res_r_c_r_c_r_c_r_c_r;\n    my $res_r_c_r_c_r_c_r_c_r_c_r\
    \ = reverse $res_r_c_r_c_r_c_r_c_r_c;\n    my $res_r_c_r_c_r_c_r_c_r_c_r_c = reverse\
    \ $res_r_c_r_c_r_c_r_c_r_c_r;\n    my $res_r_c_r_c_r_c_r_c_r_c_r_c_r = reverse\
    \ $res_r_c_r_c_r_c_r_c_r_c_r_c;\n    my $", "    my %c = map { $_ => 1 } split\
    \ //, $c;\n    my $p = join '', grep { !$c{$_} } split //, $s;\n    return [$p,\
    \ $p eq reverse $p];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n \
    \   my $check = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_\
    \ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i]\
    \ unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    my $p = $r eq reverse\
    \ $r;\n    return [$r, $p];\n}", "    my $result = '';\n    my $check = 0;\n \
    \   my %c_hash = map {$_ => 1} split //, $c;\n    for my $char (split //, $s)\
    \ {\n        if (!$c_hash{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my $r = reverse $s;\n    my $res = $s;\n    for my $i (0..length($s)-1)\
    \ {\n        for my $j (0..length($c)-1) {\n            if (substr($s, $i, 1)\
    \ eq substr($c, $j, 1)) {\n                $res = substr($res, 0, $i) . substr($res,\
    \ $i+1);\n                $r = substr($r, 0, $i) . substr($r, $i+1);\n       \
    \     }\n        }\n    }\n    return [$res, $res eq $r ? 1 : ''];\n}", "    my\
    \ $result = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split //,\
    \ $c;\n    for my $char (split //, $s) {\n        if (!exists $hash{$char}) {\n\
    \            $result .= $char;\n        }\n    }\n    if ($result eq reverse $result)\
    \ {\n        $check = 1;\n    }\n    return [$result, $check];\n}", "    my $r\
    \ = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    return [$t, $t eq\
    \ $r ? 1 : ''];\n}", "    my %c = map {$_ => 1} split //, $c;\n    my $r = join\
    \ '', grep {!$c{$_}} split //, $s;\n    my $p = $r eq reverse $r;\n    return\
    \ [$r, $p];\n}", "    my $result = '';\n    my $check = 0;\n    my %hash = map\
    \ {$_ => 1} split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $hash{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my %c = map { $_ => 1 } split //, $c;\n\
    \    my @s = split //, $s;\n    my @res;\n    for my $i (0 .. $#s) {\n       \
    \ push @res, $s[$i] unless $c{$s[$i]};\n    }\n    my $res = join '', @res;\n\
    \    my $check = $res eq reverse $res ? 1 : '';\n    return [$res, $check];\n}",
  "    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    return [$t,\
    \ $t eq $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //,\
    \ $s;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my %c = map\
    \ { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my @s = split //, $s;\n    my @c\
    \ = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    @s = grep { not $c{$_}\
    \ } @s;\n    my $r = join '', @s;\n    my $p = $r eq reverse $r;\n    return [$r,\
    \ $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my $result = '';\n    my $check = 0;\n    my %hash = map { $_ => 1 }\
    \ split //, $c;\n    for my $char (split //, $s) {\n        if (!$hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    $check = 1 if $result\
    \ eq reverse $result;\n    return [$result, $check];\n}", "    my $res = $s;\n\
    \    $res =~ s/[$c]//g;\n    $res =~ s/^\\s+|\\s+$//g;\n    my $check = $res eq\
    \ reverse $res ? 1 : '';\n    return [$res, $check];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split '', $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    my @s = split //, $s;\n    my @c = split //,\
    \ $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n\
    \        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n\
    \    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    my $rv\
    \ = $t eq $r ? 1 : '';\n    return [$t, $rv];\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n}", "    my $r = $s;\n    $r\
    \ =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    my $p = $r eq reverse $r;\n\
    \    return [$r, $p];\n}", "    my $r = '';\n    my $p = 1;\n    my %c = map {$_\
    \ => 1} split //, $c;\n    for (split //, $s) {\n        if (!exists $c{$_}) {\n\
    \            $r .= $_;\n        }\n    }\n    for (my $i = 0; $i < length($r)\
    \ / 2; $i++) {\n        if (substr($r, $i, 1) ne substr($r, -$i - 1, 1)) {\n \
    \           $p = 0;\n            last;\n        }\n    }\n    return [$r, $p];\n\
    }", "    my $result = '';\n    my $check = 0;\n    my %c_hash = map { $_ => 1\
    \ } split //, $c;\n    for my $char (split //, $s) {\n        $result .= $char\
    \ unless $c_hash{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my $s_copy = $s;\n    for my $char (split\
    \ //, $c) {\n        $s_copy =~ s/$char//g;\n    }\n    return [$s_copy, $s_copy\
    \ eq reverse $s_copy];\n}", "    my $r = reverse $s;\n    my $r1 = $r;\n    my\
    \ $s1 = $s;\n    $r1 =~ s/[$c]//g;\n    $s1 =~ s/[$c]//g;\n    return [$r1, $r1\
    \ eq $s1];\n}", "    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/$c//g;\n\
    \    return [$t, $t eq $r];\n}", "    my $result = '';\n    my $check = 0;\n \
    \   my %c = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n\
    \        if (!$c{$char}) {\n            $result .= $char;\n        }\n    }\n\
    \    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @s = split\
    \ //, $s;\n    my @r = grep { !$c{$_} } @s;\n    my $r = join '', @r;\n    my\
    \ $p = $r eq reverse $r ? 1 : '';\n    return [$r, $p];\n}", "    my $result =\
    \ '';\n    for my $i (0 .. length($s) - 1) {\n        my $char = substr($s, $i,\
    \ 1);\n        $result .= $char unless index($c, $char) != -1;\n    }\n    my\
    \ $check = $result eq reverse($result) ? 1 : '';\n    return [$result, $check];\n\
    }", "    my $r = reverse $s;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n   \
    \ return [$s, $s eq $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ [$r, $r eq reverse($r)];\n}", "    my $result = '';\n    my $check = 0;\n  \
    \  my %c = map { $_ => 1 } split //, $c;\n    my @s = split //, $s;\n    for my\
    \ $i (0 .. $#s) {\n        if (!exists $c{$s[$i]}) {\n            $result .= $s[$i];\n\
    \        }\n    }\n    if ($result eq reverse $result) {\n        $check = 1;\n\
    \    }\n    return [$result, $check];\n}", "    my $res = $s;\n    $res =~ s/[$c]//g;\n\
    \    return [$res, $res eq reverse($res)];\n}", "    my @s = split //, $s;\n \
    \   my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for\
    \ my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my\
    \ $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}",
  "    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/$c//g;\n    return [$t, $t\
    \ eq $r];\n}", "    my $result = '';\n    my $check = '';\n    my %hash = map\
    \ { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $hash{$char};\n    }\n    if ($result eq reverse $result) {\n\
    \        $check = 1;\n    }\n    return [$result, $check];\n}", "    my %c = map\
    \ {$_ => 1} split //, $c;\n    my $r = join '', grep {!$c{$_}} split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $r = join '', grep { index($c,\
    \ $_) == -1 } split //, $s;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_}\
    \ } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $result = join\
    \ '', grep { index($c, $_) == -1 } split //, $s;\n    return [$result, $result\
    \ eq reverse $result];\n}", "    my $r = reverse $s;\n    my $t = $s;\n    $t\
    \ =~ s/[$c]//g;\n    my $r2 = reverse $t;\n    return [$t, $r2 eq $t];\n}", " \
    \   my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = reverse $s;\n\
    \    my $p = $s eq $r ? 1 : '';\n    $s =~ s/[$c]//g;\n    [$s, $p];\n}", "  \
    \  my $r = reverse $s;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return\
    \ [$s, $s eq $r];\n}", "    my $r = reverse $s;\n    my $p = $s eq $r ? 1 : '';\n\
    \    $s =~ s/[$c]//g;\n    return [$s, $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    $r =~ s/^(.)(.*)\\1$/$2/;\n    return [$r, $r eq '' ? 1 : ''];\n}", "   \
    \ my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my %h = map {$_ => 1} split //, $c;\n    my $res\
    \ = join '', grep {!$h{$_}} split //, $s;\n    return [$res, $res eq reverse $res];\n\
    }", "    my $result = '';\n    my $check = 0;\n    my %hash = map {$_ => 1} split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!$hash{$char}) {\n \
    \           $result .= $char;\n        }\n    }\n    if ($result eq reverse $result)\
    \ {\n        $check = 1;\n    }\n    return [$result, $check];\n}", "    my $r\
    \ = join '', grep { index($c, $_) == -1 } split '', $s;\n    return [$r, $r eq\
    \ reverse $r];\n}", "    my $r = '';\n    my $p = 1;\n    my %h = map { $_ =>\
    \ 1 } split //, $c;\n    for my $i (0 .. length($s) - 1) {\n        my $ch = substr($s,\
    \ $i, 1);\n        if (!$h{$ch}) {\n            $r .= $ch;\n        }\n    }\n\
    \    for my $i (0 .. length($r) - 1) {\n        my $ch1 = substr($r, $i, 1);\n\
    \        my $ch2 = substr($r, length($r) - 1 - $i, 1);\n        if ($ch1 ne $ch2)\
    \ {\n            $p = 0;\n            last;\n        }\n    }\n    return [$r,\
    \ $p];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split '', $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my %c = map {$_ => 1} split //,\
    \ $c;\n    my $r = join '', grep {!$c{$_}} split //, $s;\n    my $p = $r eq reverse\
    \ $r;\n    return [$r, $p];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
