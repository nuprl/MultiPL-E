name: HumanEval_112_reverse_delete
language: pl
prompt: "# Task\n# We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n# then check if the result string is\
  \ palindrome.\n# A string is called palindrome if it reads the same backward as\
  \ forward.\n# You should return an array containing the result string and 1/ for\
  \ the check.\n# Example\n# >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\", \"\
  \"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"\
  abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    my($s, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n\
  \        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdef\", \"b\"),[\"acdef\", \"\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\"\
  , 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dwik\", \"w\"),[\"dik\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdedcba\", \"\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"\
  abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  mamma\", \"mia\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse($r)];\n\
    }", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_\
    \ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i]\
    \ unless $c{$s[$i]};\n    }\n    return [join('', @r), join('', @r) eq join('',\
    \ reverse @r)];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = join '', grep\
    \ { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1\
    \ } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless\
    \ $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n\
    \    return [$r, $p];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my\
    \ $r = join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $r = reverse $s;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $len = length $s;\n    my $res = '';\n    while ($i\
    \ < $len) {\n        if (index($c, substr($s, $i, 1)) == -1) {\n            $res\
    \ .= substr($s, $i, 1);\n        }\n        $i++;\n    }\n    return [$res, $res\
    \ eq $r];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c\
    \ = map { $_ => 1 } @c;\n    my @result = grep { !$c{$_} } @s;\n    my $result\
    \ = join '', @result;\n    my $check = $result eq reverse $result ? 1 : '';\n\
    \    return [$result, $check];\n}", "    my $result = '';\n    my $check = '';\n\
    \    my %hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        if (!$hash{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "    my $result = '';\n    my $check = 0;\n    my %c = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!$c{$char}) {\n    \
    \        $result .= $char;\n        }\n    }\n    $check = 1 if $result eq reverse\
    \ $result;\n    return [$result, $check];\n}", "    my $res = '';\n    my $check\
    \ = 1;\n    my %c = map { $_ => 1 } split //, $c;\n    for my $ch (split //, $s)\
    \ {\n        $res .= $ch unless $c{$ch};\n    }\n    $check = 0 if $res ne reverse\
    \ $res;\n    return [$res, $check];\n}", "    my $r = join '', grep { index($c,\
    \ $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r\
    \ = reverse $s;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return [$s, $s\
    \ eq $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = $s;\n    $result =~\
    \ s/[$c]//g;\n    my $check = $result eq reverse $result ? 1 : '';\n    return\
    \ [$result, $check];\n}", "    my $r = reverse $s;\n    my $r_c = reverse $c;\n\
    \    my %c = map { $_ => 1 } split //, $c;\n    my %r_c = map { $_ => 1 } split\
    \ //, $r_c;\n    my @s = split //, $s;\n    my @r = split //, $r;\n    my @r_c\
    \ = split //, $r_c;\n    my @res;\n    my $res;\n    for my $i (0..$#s) {\n  \
    \      if (!$c{$s[$i]} && !$r_c{$r[$i]}) {\n            push @res, $s[$i];\n \
    \       }\n    }\n    $res = join '', @res;\n    return [$res, $res eq reverse\
    \ $res];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", " \
    \   my $result = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split //,\
    \ $c;\n    for my $ch (split //, $s) {\n        $result .= $ch unless $c{$ch};\n\
    \    }\n    $check = $result eq reverse $result ? 1 : '';\n    return [$result,\
    \ $check];\n}", "    my $r = reverse $s;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n\
    \    return [$s, $s eq $r];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
