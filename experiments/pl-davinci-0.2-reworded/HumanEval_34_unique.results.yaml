language: pl
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @r;\n    foreach my $e (@$l) {\n        if (!$h{$e}) {\n \
    \           $h{$e} = 1;\n            push @r, $e;\n        }\n    }\n    return\
    \ \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    return sort { $a\
    \ <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
    \ { $a <=> $b } keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!exists $h{$e})\
    \ {\n            $h{$e} = 1;\n            push @u, $e;\n        }\n    }\n   \
    \ return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
    \ %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
    \ { $a <=> $b } keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort\
    \ { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort\
    \ { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort\
    \ { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!exists $h{$e})\
    \ {\n            $h{$e} = 1;\n            push @u, $e;\n        }\n    }\n   \
    \ return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    $h{$_} = 1 foreach @$l;\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    for(@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
    \ <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
    \ { $a <=> $b } keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
    \ keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) { $h{$_} = 1; }\n    @u = sort keys %h;\n\
    \    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort\
    \ { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    @u\
    \ = sort { $a <=> $b } keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %seen;\n    my @unique = grep { !$seen{$_}++ } @$l;\n    return \\@unique;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %seen;\n    my @uniq = grep { !$seen{$_}++ } @$l;\n    return \\@uniq;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
    \ <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %seen;\n    grep { !$seen{$_}++ } @$l;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        push(@u, $e) unless\
    \ $h{$e}++;\n    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_}++;\n    }\n    return [sort {$a\
    \ <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @r;\n    foreach my $e (@$l) {\n        if (!exists $h{$e})\
    \ {\n            $h{$e} = 1;\n            push @r, $e;\n        }\n    }\n   \
    \ return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    @u\
    \ = sort { $a <=> $b } keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
    \ { $a <=> $b } keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @r;\n    foreach my $e (@$l) {\n        if (!exists $h{$e})\
    \ {\n            $h{$e} = 1;\n            push @r, $e;\n        }\n    }\n   \
    \ return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!exists $h{$e})\
    \ {\n            $h{$e} = 1;\n            push @u, $e;\n        }\n    }\n   \
    \ return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return sort { $a <=> $b } @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    map { $h{$_} = 1 } @$l;\n    sort { $a <=> $b } keys %h;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n   \
    \     if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9,\
    \ 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
    \ { $a <=> $b } keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @r;\n    foreach my $e (@$l) {\n        if (!exists $h{$e})\
    \ {\n            $h{$e} = 1;\n            push @r, $e;\n        }\n    }\n   \
    \ return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
    \ { $a <=> $b } keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort\
    \ { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
    \ { $a <=> $b } keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
    \ %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %seen;\n    return grep { !$seen{$_}++ } @$l;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        push(@u, $e) unless\
    \ $h{$e}++;\n    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    for my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @u;\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    @u\
    \ = sort { $a <=> $b } keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
    \ { $a <=> $b } keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        $h{$_}++;\n    }\n    @u = sort\
    \ { $a <=> $b } keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    map { $h{$_} = 1 } @$l;\n    sort { $a <=> $b } keys %h;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n   \
    \     if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9,\
    \ 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    my @r;\n    foreach (@$l) {\n        push @r, $_ unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
    \ <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
    \ %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %seen;\n    return grep { !$seen{$_}++ } @$l;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [ sort { $a <=> $b } keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
    \ %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
    \ { $a <=> $b } keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return sort { $a <=> $b } @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    foreach\
    \ my $e (sort {$a <=> $b} keys %h) {\n        push(@r, $e);\n    }\n    return\
    \ @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ sort { $a <=> $b } keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
    \ [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
    \ {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821451
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821451
