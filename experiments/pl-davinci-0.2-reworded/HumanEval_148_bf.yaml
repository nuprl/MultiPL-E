name: HumanEval_148_bf
language: pl
prompt: "# There are eight planets in our solar system: the closerst to the Sun \n\
  # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus,\
  \ Neptune.\n# Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n# The function should return an array containing all planets whose\
  \ orbits are \n# located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n# the proximity to the sun. \n# The function should return an empty\
  \ array if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>>\
  \ bf(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf(\"Earth\",\
  \ \"Mercury\")\n# \"Venus\"\n# >>> bf(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"\
  Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nsub bf {\n    my($planet1, $planet2)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bf;\n   \
  \     if(eq_deeply($candidate->(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Earth\", \"Mercury\"),[\"Venus\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"Mercury\", \"Uranus\"),[\"\
  Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Neptune\"\
  , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Earth\", \"Earth\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->(\"Mars\", \"Earth\"),[])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Jupiter\", \"Makemake\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune);\n    my @result;\n    my $p1 = 0;\n    my $p2 = 0;\n    for (my $i\
    \ = 0; $i < @planets; $i++) {\n        if ($planet1 eq $planets[$i]) {\n     \
    \       $p1 = $i;\n        }\n        if ($planet2 eq $planets[$i]) {\n      \
    \      $p2 = $i;\n        }\n    }\n    if ($p1 == 0 || $p2 == 0) {\n        return\
    \ @result;\n    }\n    if ($p1 < $p2) {\n        for (my $i = $p1 + 1; $i < $p2;\
    \ $i++) {\n            push @result, $planets[$i];\n        }\n    } else {\n\
    \        for (my $i = $p2 + 1; $i < $p1; $i++) {\n            push @result, $planets[$i];\n\
    \        }\n    }\n    return @result;\n}", "    my @planets = qw(Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune);\n    my %planets = map { $planets[$_]\
    \ => $_ } 0..$#planets;\n    my @result;\n    if (exists $planets{$planet1} &&\
    \ exists $planets{$planet2}) {\n        my $min = $planets{$planet1} < $planets{$planet2}\
    \ ? $planets{$planet1} : $planets{$planet2};\n        my $max = $planets{$planet1}\
    \ > $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n        @result\
    \ = @planets[$min+1..$max-1];\n    }\n    return @result;\n}", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @result;\n\
    \    my $first = 0;\n    my $second = 0;\n    for (my $i = 0; $i < @planets; $i++)\
    \ {\n        if ($planets[$i] eq $planet1) {\n            $first = $i;\n     \
    \   }\n        if ($planets[$i] eq $planet2) {\n            $second = $i;\n  \
    \      }\n    }\n    if ($first == 0 || $second == 0) {\n        return @result;\n\
    \    }\n    if ($first < $second) {\n        for (my $i = $first + 1; $i < $second;\
    \ $i++) {\n            push @result, $planets[$i];\n        }\n    } else {\n\
    \        for (my $i = $second + 1; $i < $first; $i++) {\n            push @result,\
    \ $planets[$i];\n        }\n    }\n    return @result;\n}", "    my @planets =\
    \ qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @result;\n\
    \    my $index1 = -1;\n    my $index2 = -1;\n    for my $i (0..$#planets) {\n\
    \        if ($planets[$i] eq $planet1) {\n            $index1 = $i;\n        }\n\
    \        if ($planets[$i] eq $planet2) {\n            $index2 = $i;\n        }\n\
    \    }\n    if ($index1 == -1 || $index2 == -1) {\n        return @result;\n \
    \   }\n    if ($index1 < $index2) {\n        @result = @planets[$index1+1..$index2-1];\n\
    \    } else {\n        @result = @planets[$index2+1..$index1-1];\n    }\n    return\
    \ @result;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    my %planets = map { $planets[$_] => $_ } 0..$#planets;\n\
    \    my $p1 = $planets{$planet1};\n    my $p2 = $planets{$planet2};\n    return\
    \ [] unless defined $p1 and defined $p2;\n    my @result = @planets[sort { $a\
    \ <=> $b } ($p1, $p2)];\n    return [ @result[0, -1] ];\n}", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @result;\n\
    \    my $i1 = 0;\n    my $i2 = 0;\n    for my $i (0..$#planets) {\n        if\
    \ ($planets[$i] eq $planet1) {\n            $i1 = $i;\n        }\n        if ($planets[$i]\
    \ eq $planet2) {\n            $i2 = $i;\n        }\n    }\n    if ($i1 > $i2)\
    \ {\n        @result = @planets[$i2..$i1-1];\n    } else {\n        @result =\
    \ @planets[$i1+1..$i2];\n    }\n    return @result;\n}", "    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my %planets = map {$planets[$_]\
    \ => $_} 0..$#planets;\n    return () unless exists $planets{$planet1} && exists\
    \ $planets{$planet2};\n    my $start = $planets{$planet1};\n    my $end = $planets{$planet2};\n\
    \    my $step = $start < $end ? 1 : -1;\n    return @planets[$start+$step..$end-$step];\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my %planets = map { $planets[$_] => $_ } 0..$#planets;\n    my @result;\n\
    \    if (exists $planets{$planet1} && exists $planets{$planet2}) {\n        my\
    \ $start = $planets{$planet1};\n        my $end = $planets{$planet2};\n      \
    \  if ($start > $end) {\n            ($start, $end) = ($end, $start);\n      \
    \  }\n        @result = @planets[$start+1..$end-1];\n    }\n    return @result;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my %planets = map { $planets[$_] => $_ } 0..$#planets;\n    my @result;\n\
    \    if (exists $planets{$planet1} && exists $planets{$planet2}) {\n        my\
    \ $start = $planets{$planet1};\n        my $end = $planets{$planet2};\n      \
    \  if ($start > $end) {\n            ($start, $end) = ($end, $start);\n      \
    \  }\n        @result = @planets[$start+1..$end-1];\n    }\n    return @result;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my %planets = map { $planets[$_] => $_ } 0..$#planets;\n    my @result;\n\
    \    if (exists $planets{$planet1} && exists $planets{$planet2}) {\n        my\
    \ $min = $planets{$planet1} < $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n\
    \        my $max = $planets{$planet1} > $planets{$planet2} ? $planets{$planet1}\
    \ : $planets{$planet2};\n        @result = @planets[$min+1..$max-1];\n    }\n\
    \    return @result;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    my @result;\n    my $index1 = 0;\n    my $index2\
    \ = 0;\n    for (my $i = 0; $i < @planets; $i++) {\n        if ($planets[$i] eq\
    \ $planet1) {\n            $index1 = $i;\n        }\n        if ($planets[$i]\
    \ eq $planet2) {\n            $index2 = $i;\n        }\n    }\n    if ($index1\
    \ > $index2) {\n        @result = @planets[$index2 + 1 .. $index1 - 1];\n    }\
    \ else {\n        @result = @planets[$index1 + 1 .. $index2 - 1];\n    }\n   \
    \ return @result;\n}", "    my %planets = (\n        Mercury => 1,\n        Venus\
    \ => 2,\n        Earth => 3,\n        Mars => 4,\n        Jupiter => 5,\n    \
    \    Saturn => 6,\n        Uranus => 7,\n        Neptune => 8,\n    );\n    my\
    \ @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n   \
    \ my @result;\n    if (exists $planets{$planet1} && exists $planets{$planet2})\
    \ {\n        my $start = $planets{$planet1};\n        my $end = $planets{$planet2};\n\
    \        if ($start > $end) {\n            $start = $planets{$planet2};\n    \
    \        $end = $planets{$planet1};\n        }\n        for (my $i = $start; $i\
    \ < $end; $i++) {\n            push @result, $planets[$i];\n        }\n    }\n\
    \    return @result;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    my @result;\n    my $start = 0;\n    my $end =\
    \ 0;\n    for (my $i = 0; $i < @planets; $i++) {\n        if ($planets[$i] eq\
    \ $planet1) {\n            $start = $i;\n        }\n        if ($planets[$i] eq\
    \ $planet2) {\n            $end = $i;\n        }\n    }\n    if ($start > $end)\
    \ {\n        $start = $start + $end;\n        $end = $start - $end;\n        $start\
    \ = $start - $end;\n    }\n    for (my $i = $start + 1; $i < $end; $i++) {\n \
    \       push @result, $planets[$i];\n    }\n    return @result;\n}", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my %planets\
    \ = map { $planets[$_] => $_ } 0..$#planets;\n    my $i1 = $planets{$planet1};\n\
    \    my $i2 = $planets{$planet2};\n    return () unless defined $i1 && defined\
    \ $i2;\n    return @planets[$i1+1..$i2-1] if $i1 < $i2;\n    return @planets[$i2+1..$i1-1];\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    for my $planet (@planets)\
    \ {\n        if ($planet eq $planet1) {\n            $i = 1;\n        }\n    \
    \    if ($planet eq $planet2) {\n            $j = 1;\n        }\n        if ($i\
    \ == 1 && $j == 0) {\n            push @result, $planet;\n        }\n        if\
    \ ($planet eq $planet2) {\n            $j = 1;\n        }\n    }\n    return @result;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l =\
    \ 0;\n    for($i = 0; $i < scalar(@planets); $i++) {\n        if($planets[$i]\
    \ eq $planet1) {\n            $j = $i;\n        }\n        if($planets[$i] eq\
    \ $planet2) {\n            $k = $i;\n        }\n    }\n    if($j == 0 || $k ==\
    \ 0) {\n        return @result;\n    }\n    if($j < $k) {\n        for($l = $j\
    \ + 1; $l < $k; $l++) {\n            push(@result, $planets[$l]);\n        }\n\
    \    }\n    else {\n        for($l = $k + 1; $l < $j; $l++) {\n            push(@result,\
    \ $planets[$l]);\n        }\n    }\n    return @result;\n}", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @result;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $bb =\
    \ 0;\n    my $cc = 0;\n    my $dd = 0;\n    my $ee = 0;\n    my $ff = 0;\n   \
    \ my $gg = 0;\n    my $hh = 0;\n    my $ii = 0;\n    my $jj = 0;\n    my $kk =\
    \ 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn = 0;\n    my $oo = 0;\n   \
    \ my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n    my $ss = 0;\n    my $tt =\
    \ 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww = 0;\n    my $xx = 0;\n   \
    \ my $yy = 0;\n    my $zz = 0;\n    my $aaa = 0;\n    my $bbb = 0;\n    my $ccc\
    \ = 0;\n    my $ddd = 0;\n    my $eee = 0;\n    my $fff = 0;\n    my $ggg = 0;\n\
    \    my $hhh = 0;\n    my $iii = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my\
    \ $lll = 0;\n    my $mmm = 0;\n    my $nnn = 0;\n    my $ooo = 0;\n    my $",
  "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i1 = 0;\n    my $i2 = 0;\n    for my $i (0..$#planets)\
    \ {\n        if ($planets[$i] eq $planet1) {\n            $i1 = $i;\n        }\n\
    \        if ($planets[$i] eq $planet2) {\n            $i2 = $i;\n        }\n \
    \   }\n    if ($i1 == 0 || $i2 == 0) {\n        return @result;\n    }\n    if\
    \ ($i1 < $i2) {\n        @result = @planets[$i1+1..$i2-1];\n    } else {\n   \
    \     @result = @planets[$i2+1..$i1-1];\n    }\n    return @result;\n}", "   \
    \ my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my %planets = map { $planets[$_] => $_ } 0..$#planets;\n    my @result;\n\
    \    if (exists $planets{$planet1} && exists $planets{$planet2}) {\n        my\
    \ $start = $planets{$planet1};\n        my $end = $planets{$planet2};\n      \
    \  if ($start > $end) {\n            ($start, $end) = ($end, $start);\n      \
    \  }\n        @result = @planets[$start+1..$end-1];\n    }\n    return @result;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    for my $planet (@planets)\
    \ {\n        if ($planet eq $planet1) {\n            $i = 1;\n        }\n    \
    \    if ($planet eq $planet2) {\n            $j = 1;\n        }\n        if ($i\
    \ == 1 && $j == 0) {\n            push @result, $planet;\n        }\n        if\
    \ ($i == 1 && $j == 1) {\n            last;\n        }\n    }\n    return @result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
