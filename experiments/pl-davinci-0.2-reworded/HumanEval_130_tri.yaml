name: HumanEval_130_tri
language: pl
prompt: "# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n# the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n\
  # tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n\
  # tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative\
  \ integer number n, you have to a return an array of the \n# first n + 1 numbers\
  \ of the Tribonacci sequence.\n# Examples:\n# >>> tri(3)\n# [1, 3, 2, 8]\nsub tri\
  \ {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n  \
  \      if(eq_deeply($candidate->(3),[1, 3, 2, 8])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1,\
  \ 3, 2, 8, 3, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1,\
  \ 3, 2, 8, 3, 15, 4, 24])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5, 35])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24,\
  \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        }\
    \ else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "    my @arr = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n       \
    \ $arr[$i] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n    }\n    return @arr;\n\
    }", "    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n    \
    \    if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else\
    \ {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n    \
    \    if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else\
    \ {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "    my @seq = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n       \
    \ $seq[$i] = $seq[$i - 1] + $seq[$i - 2] + $seq[$i - 3];\n    }\n    return @seq;\n\
    }", "    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n    \
    \    if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else\
    \ {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n    \
    \    if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else\
    \ {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n    \
    \    if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else\
    \ {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n       \
    \ if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else {\n \
    \           push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n\
    \    }\n    return @tri;\n}", "    my @result = (1, 3, 2);\n    for (my $i = 3;\
    \ $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 +\
    \ $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "    my\
    \ @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2\
    \ == 0) {\n            push @tri, 1 + $i / 2;\n        } else {\n            push\
    \ @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return\
    \ @tri;\n}", "    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n     \
    \   } else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n    \
    \    if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else\
    \ {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
