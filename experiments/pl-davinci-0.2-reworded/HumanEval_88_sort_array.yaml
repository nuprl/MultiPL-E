name: HumanEval_88_sort_array
language: pl
prompt: "# Given an array of non-negative integers, return a copl of the given array\
  \ after sorting,\n# you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n# >>> sort_array([5])\n\
  # [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array([2,\
  \ 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\nsub sort_array {\n    my($array)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
  \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42,\
  \ 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
  \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my @sorted_array = sort { $a <=> $b } @$array;\n    if ( $array->[0]\
    \ + $array->[-1] % 2 == 0 ) {\n        return reverse @sorted_array;\n    }\n\
    \    else {\n        return @sorted_array;\n    }\n}", "    my $sum = $array->[0]\
    \ + $array->[-1];\n    return $array if $sum == 0;\n    my $order = $sum % 2 ==\
    \ 0 ? 'desc' : 'asc';\n    my @sorted = sort { $a <=> $b } @$array;\n    if ($order\
    \ eq 'desc') {\n        @sorted = reverse @sorted;\n    }\n    return \\@sorted;\n\
    }", "    my @sorted_array = ();\n    my $first_element = $array->[0];\n    my\
    \ $last_element = $array->[-1];\n    my $sum = $first_element + $last_element;\n\
    \    if ($sum % 2 == 0) {\n        @sorted_array = sort {$b <=> $a} @$array;\n\
    \    } else {\n        @sorted_array = sort {$a <=> $b} @$array;\n    }\n    return\
    \ \\@sorted_array;\n}", "    my @sorted_array = sort { $a <=> $b } @$array;\n\
    \    if ($sorted_array[0] + $sorted_array[-1] % 2 == 0) {\n        return reverse\
    \ @sorted_array;\n    }\n    return @sorted_array;\n}", "    my @sorted_array\
    \ = sort { $a <=> $b } @$array;\n    if (scalar(@sorted_array) > 1) {\n      \
    \  if (($sorted_array[0] + $sorted_array[-1]) % 2 == 0) {\n            @sorted_array\
    \ = reverse @sorted_array;\n        }\n    }\n    return \\@sorted_array;\n}",
  "    my @result = @$array;\n    if(@result % 2 == 0) {\n        @result = sort {$b\
    \ <=> $a} @result;\n    } else {\n        @result = sort {$a <=> $b} @result;\n\
    \    }\n    return @result;\n}", "    my $len = scalar @$array;\n    if ($len\
    \ == 0 || $len == 1) {\n        return $array;\n    }\n    my $first = $array->[0];\n\
    \    my $last = $array->[$len - 1];\n    my $sum = $first + $last;\n    if ($sum\
    \ % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else {\n    \
    \    return [sort {$a <=> $b} @$array];\n    }\n}", "    my @result = @$array;\n\
    \    my $sum = $result[0] + $result[-1];\n    if ($sum % 2 == 0) {\n        @result\
    \ = sort {$b <=> $a} @result;\n    } else {\n        @result = sort {$a <=> $b}\
    \ @result;\n    }\n    return \\@result;\n}", "    my @sorted_array = sort { $a\
    \ <=> $b } @$array;\n    if(($sorted_array[0] + $sorted_array[-1]) % 2 == 0) {\n\
    \        return reverse @sorted_array;\n    }\n    return @sorted_array;\n}",
  "    my @sorted = sort { $a <=> $b } @$array;\n    if (($array->[0] + $array->[-1])\
    \ % 2 == 0) {\n        return [reverse @sorted];\n    }\n    return \\@sorted;\n\
    }", "    my @sorted = sort {$a <=> $b} @$array;\n    if(($sorted[0] + $sorted[-1])\
    \ % 2 == 0) {\n        @sorted = reverse @sorted;\n    }\n    return \\@sorted;\n\
    }", "    my @result = @$array;\n    my $sum = $result[0] + $result[-1];\n    if\
    \ ($sum % 2 == 0) {\n        @result = sort {$b <=> $a} @result;\n    } else {\n\
    \        @result = sort {$a <=> $b} @result;\n    }\n    return \\@result;\n}",
  "    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ [sort {$b <=> $a} @$array];\n    } else {\n        return [sort {$a <=> $b}\
    \ @$array];\n    }\n}", "    my $len = scalar @$array;\n    if ($len == 0) {\n\
    \        return [];\n    }\n    if ($len == 1) {\n        return [$array->[0]];\n\
    \    }\n    my $first = $array->[0];\n    my $last = $array->[$len - 1];\n   \
    \ my $sum = $first + $last;\n    if ($sum % 2 == 0) {\n        return [sort {$b\
    \ <=> $a} @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n\
    \    }\n}", "    my @sorted = sort { $a <=> $b } @$array;\n    if ($array->[0]\
    \ + $array->[-1] % 2 == 0) {\n        return \\@sorted;\n    } else {\n      \
    \  return [reverse @sorted];\n    }\n}", "    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}", "    my $sum = $array->[0]\
    \ + $array->[-1];\n    my $order = $sum % 2 ? 1 : -1;\n    return [sort { $order\
    \ * ($a <=> $b) } @$array];\n}", "    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b }\
    \ @$array;\n    return \\@sorted;\n}", "    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 == 0 ? -1 : 1;\n    my @sorted = sort { $a <=> $b }\
    \ @$array;\n    return [@sorted[0..$#sorted]];\n}", "    my @sorted = sort { $a\
    \ <=> $b } @$array;\n    if(($sorted[0] + $sorted[-1]) % 2 == 0) {\n        return\
    \ reverse @sorted;\n    }\n    return @sorted;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
