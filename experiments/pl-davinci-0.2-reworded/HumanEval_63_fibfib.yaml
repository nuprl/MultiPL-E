name: HumanEval_63_fibfib
language: pl
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nsub fibfib {\n  \
  \  my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n\
  \        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(1),0)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if\
    \ $n == 2;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    my\
    \ @fibfib = (0, 0, 1);\n    for (3..$n) {\n        push @fibfib, $fibfib[-1] +\
    \ $fibfib[-2] + $fibfib[-3];\n    }\n    return $fibfib[$n];\n}", "    my($fibfib_n_minus_1,\
    \ $fibfib_n_minus_2, $fibfib_n_minus_3) = (0, 0, 1);\n    for (my $i = 3; $i <=\
    \ $n; $i++) {\n        ($fibfib_n_minus_1, $fibfib_n_minus_2, $fibfib_n_minus_3)\
    \ = ($fibfib_n_minus_2, $fibfib_n_minus_3, $fibfib_n_minus_1 + $fibfib_n_minus_2\
    \ + $fibfib_n_minus_3);\n    }\n    return $fibfib_n_minus_3;\n}", "    my($fibfib_n_minus_1,\
    \ $fibfib_n_minus_2, $fibfib_n_minus_3) = (0, 0, 1);\n    my($fibfib_n);\n   \
    \ for (my($i) = 3; $i <= $n; $i++) {\n        $fibfib_n = $fibfib_n_minus_1 +\
    \ $fibfib_n_minus_2 + $fibfib_n_minus_3;\n        $fibfib_n_minus_3 = $fibfib_n_minus_2;\n\
    \        $fibfib_n_minus_2 = $fibfib_n_minus_1;\n        $fibfib_n_minus_1 = $fibfib_n;\n\
    \    }\n    return $fibfib_n;\n}", "    my @fibfib = (0, 0, 1);\n    for (my $i\
    \ = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2]\
    \ + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    return 0 if $n ==\
    \ 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}", "    my @fibfib = (0, 0, 1);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2]\
    \ + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    return 0 if $n ==\
    \ 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}", "    return 0 if $n == 0;\n    return 0\
    \ if $n == 1;\n    return 1 if $n == 2;\n    return fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3);\n}", "    my($a, $b, $c, $i);\n    $a = 0;\n    $b = 0;\n  \
    \  $c = 1;\n    for($i = 2; $i <= $n; $i++) {\n        $a = $b;\n        $b =\
    \ $c;\n        $c = $a + $b + $c;\n    }\n    return $c;\n}", "    my @fibfib\
    \ = (0, 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1]\
    \ + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    my\
    \ $a = 0;\n    my $b = 0;\n    my $c = 1;\n    foreach my $i (1..$n) {\n     \
    \   my $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n\
    \    }\n    return $a;\n}", "    my @fibfib = (0, 0, 1);\n    for (my $i = 3;\
    \ $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];\n\
    \    }\n    return $fibfib[$n];\n}", "    my @fibfib = (0, 0, 1);\n    return\
    \ $fibfib[$n] if $n < 3;\n    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i]\
    \ = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n\
    }", "    return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n ==\
    \ 2;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    my @fib\
    \ = (0, 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n        $fib[$i] = $fib[$i-1]\
    \ + $fib[$i-2] + $fib[$i-3];\n    }\n    return $fib[$n];\n}", "    return 0 if\
    \ $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}", "    my @fibfib = (0, 0, 1);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2]\
    \ + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    return 0 if $n ==\
    \ 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}", "    my($a, $b, $c, $d);\n    $a = 0;\n\
    \    $b = 0;\n    $c = 1;\n    $d = 0;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c =\
    \ $d;\n    }\n    return $d;\n}", "    my @fibfib = (0, 0, 1);\n    return $fibfib[$n]\
    \ if $n < 3;\n    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1]\
    \ + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    my\
    \ @fibfib = (0, 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i]\
    \ = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n\
    }", "    my @fib = (0, 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n       \
    \ $fib[$i] = $fib[$i-1] + $fib[$i-2] + $fib[$i-3];\n    }\n    return $fib[$n];\n\
    }", "    my $fibfib = 0;\n    my $fibfib_1 = 0;\n    my $fibfib_2 = 0;\n    my\
    \ $fibfib_3 = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        $fibfib = $fibfib_1\
    \ + $fibfib_2 + $fibfib_3;\n        $fibfib_3 = $fibfib_2;\n        $fibfib_2\
    \ = $fibfib_1;\n        $fibfib_1 = $fibfib;\n    }\n    return $fibfib;\n}",
  "    my @fibfib = (0, 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i]\
    \ = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n\
    }", "    return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n ==\
    \ 2;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    my $a =\
    \ 0;\n    my $b = 0;\n    my $c = 1;\n    my $d = 0;\n    for (my $i = 2; $i <=\
    \ $n; $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n\
    \        $c = $d;\n    }\n    return $d;\n}", "    my($a, $b, $c, $d) = (0, 0,\
    \ 1, 0);\n    for (1..$n) {\n        $d = $a + $b + $c;\n        $a = $b;\n  \
    \      $b = $c;\n        $c = $d;\n    }\n    return $d;\n}", "    if ($n == 0)\
    \ {\n        return 0;\n    } elsif ($n == 1) {\n        return 0;\n    } elsif\
    \ ($n == 2) {\n        return 1;\n    } else {\n        return fibfib($n-1) +\
    \ fibfib($n-2) + fibfib($n-3);\n    }\n}", "    my $fibfib = 0;\n    my $fibfib_1\
    \ = 0;\n    my $fibfib_2 = 0;\n    my $fibfib_3 = 0;\n    for (my $i = 0; $i <\
    \ $n; $i++) {\n        $fibfib = $fibfib_1 + $fibfib_2 + $fibfib_3;\n        $fibfib_3\
    \ = $fibfib_2;\n        $fibfib_2 = $fibfib_1;\n        $fibfib_1 = $fibfib;\n\
    \    }\n    return $fibfib;\n}", "    my($a, $b, $c, $d) = (0, 0, 1, 1);\n   \
    \ for (my $i = 2; $i < $n; $i++) {\n        ($a, $b, $c, $d) = ($b, $c, $d, $a\
    \ + $b + $c);\n    }\n    return $d;\n}", "    my @fibfib = (0, 0, 1);\n    for\
    \ (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2]\
    \ + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    my @fibfib = (0,\
    \ 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1]\
    \ + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    return\
    \ 0 if $n < 2;\n    return 1 if $n == 2;\n    return fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3);\n}", "    my($a, $b, $c, $d);\n    $a = 0;\n    $b = 0;\n  \
    \  $c = 1;\n    $d = 0;\n    for(my $i = 2; $i <= $n; $i++) {\n        $d = $a\
    \ + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n  \
    \  return $d;\n}", "    my $a = 0;\n    my $b = 0;\n    my $c = 1;\n    my $d\
    \ = 0;\n    for (1..$n) {\n        $d = $a + $b + $c;\n        $a = $b;\n    \
    \    $b = $c;\n        $c = $d;\n    }\n    return $d;\n}", "    return 0 if $n\
    \ == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}", "    my($a, $b, $c, $i);\n    $a = 0;\n\
    \    $b = 0;\n    $c = 1;\n    for($i = 2; $i <= $n; $i++) {\n        $a = $b;\n\
    \        $b = $c;\n        $c = $a + $b + $c;\n    }\n    return $c;\n}", "  \
    \  my($a, $b, $c, $d) = (0, 0, 1, 0);\n    for(my $i = 0; $i < $n; $i++) {\n \
    \       $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n\
    \    }\n    return $d;\n}", "    return 0 if $n == 0;\n    return 0 if $n == 1;\n\
    \    return 1 if $n == 2;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }", "    return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n ==\
    \ 2;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    my @fibfib\
    \ = (0, 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1]\
    \ + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    my\
    \ $fibfib = 0;\n    my $fibfib_1 = 0;\n    my $fibfib_2 = 0;\n    my $fibfib_3\
    \ = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        $fibfib = $fibfib_1 + $fibfib_2\
    \ + $fibfib_3;\n        $fibfib_3 = $fibfib_2;\n        $fibfib_2 = $fibfib_1;\n\
    \        $fibfib_1 = $fibfib;\n    }\n    return $fibfib;\n}", "    my($a, $b,\
    \ $c, $d) = (0, 0, 1, 0);\n    for (1..$n) {\n        $d = $a + $b + $c;\n   \
    \     $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return $d;\n}",
  "    my @fibfib;\n    $fibfib[0] = 0;\n    $fibfib[1] = 0;\n    $fibfib[2] = 1;\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1] +\
    \ $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}", "    return\
    \ 0 if $n < 1;\n    return 1 if $n == 2;\n    my $a = 0;\n    my $b = 0;\n   \
    \ my $c = 1;\n    for (my $i = 3; $i <= $n; $i++) {\n        my $d = $a + $b +\
    \ $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return\
    \ $c;\n}", "    my($a, $b, $c, $d) = (0, 0, 1, 0);\n    for (1..$n) {\n      \
    \  $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n\
    \    }\n    return $d;\n}", "    my $fibfib = 0;\n    my @fibfib_array = (0, 0,\
    \ 1);\n    if ($n == 0) {\n        $fibfib = 0;\n    } elsif ($n == 1) {\n   \
    \     $fibfib = 0;\n    } elsif ($n == 2) {\n        $fibfib = 1;\n    } else\
    \ {\n        for (my $i = 3; $i <= $n; $i++) {\n            $fibfib = $fibfib_array[$i-1]\
    \ + $fibfib_array[$i-2] + $fibfib_array[$i-3];\n            push @fibfib_array,\
    \ $fibfib;\n        }\n    }\n    return $fibfib;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
