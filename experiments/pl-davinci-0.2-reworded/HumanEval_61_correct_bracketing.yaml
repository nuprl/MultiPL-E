name: HumanEval_61_correct_bracketing
language: pl
prompt: "# brackets is a string of \"(\" and \")\".\n# return 1 if every opening bracket\
  \ has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\")\n# \"\"\n\
  # >>> correct_bracketing(\"()\")\n# 1\n# >>> correct_bracketing(\"(()())\")\n# 1\n\
  # >>> correct_bracketing(\")(()\")\n# \"\"\nsub correct_bracketing {\n    my($brackets)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n\
  \        if(eq_deeply($candidate->(\"()\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ()()(()())()\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ((()())))\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\")(()\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ((((\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\")\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ()()(()())())(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    foreach my $c (split //, $brackets) {\n   \
    \     if ($c eq \"(\") {\n            $count++;\n        } elsif ($c eq \")\"\
    ) {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return \"\";\n        }\n    }\n    return $count == 0 ? 1 : \"\";\n}", "  \
    \  my $open = 0;\n    for my $c (split //, $brackets) {\n        if ($c eq '(')\
    \ {\n            $open++;\n        }\n        elsif ($c eq ')') {\n          \
    \  $open--;\n        }\n        if ($open < 0) {\n            return \"\";\n \
    \       }\n    }\n    return $open == 0 ? 1 : \"\";\n}", "    my $count = 0;\n\
    \    for my $c (split //, $brackets) {\n        if ($c eq \"(\") {\n         \
    \   $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n      \
    \  }\n        if ($count < 0) {\n            return \"\";\n        }\n    }\n\
    \    if ($count == 0) {\n        return 1;\n    } else {\n        return \"\"\
    ;\n    }\n}", "    my $count = 0;\n    for my $i (0..length($brackets)-1) {\n\
    \        my $char = substr($brackets, $i, 1);\n        if ($char eq \"(\") {\n\
    \            $count++;\n        } elsif ($char eq \")\") {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"\";\n        }\n \
    \   }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    foreach\
    \ my $char (split(//, $brackets)) {\n        if ($char eq \"(\") {\n         \
    \   $count++;\n        } elsif ($char eq \")\") {\n            $count--;\n   \
    \     }\n        if ($count < 0) {\n            return \"\";\n        }\n    }\n\
    \    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    foreach my $char\
    \ (split //, $brackets) {\n        if ($char eq \"(\") {\n            $count++;\n\
    \        } elsif ($char eq \")\") {\n            $count--;\n        }\n      \
    \  if ($count < 0) {\n            return \"\";\n        }\n    }\n    return $count\
    \ == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my $c (split //, $brackets)\
    \ {\n        if ($c eq \"(\") {\n            $count++;\n        } elsif ($c eq\
    \ \")\") {\n            $count--;\n        }\n        if ($count < 0) {\n    \
    \        return \"\";\n        }\n    }\n    return $count == 0 ? 1 : \"\";\n}",
  "    my $count = 0;\n    for my $c (split //, $brackets) {\n        if ($c eq \"\
    (\") {\n            $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"\";\n        }\n \
    \   }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my\
    \ $char (split //, $brackets) {\n        if ($char eq \"(\") {\n            $count++;\n\
    \        } elsif ($char eq \")\") {\n            $count--;\n        }\n      \
    \  if ($count < 0) {\n            return \"\";\n        }\n    }\n    return $count\
    \ == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my $i (0..length($brackets)-1)\
    \ {\n        my $c = substr($brackets, $i, 1);\n        if ($c eq \"(\") {\n \
    \           $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"\";\n        }\n \
    \   }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for (my\
    \ $i = 0; $i < length($brackets); $i++) {\n        if (substr($brackets, $i, 1)\
    \ eq \"(\") {\n            $count++;\n        } elsif (substr($brackets, $i, 1)\
    \ eq \")\") {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return \"\";\n        }\n    }\n    if ($count == 0) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    my $count = 0;\n   \
    \ for my $c (split //, $brackets) {\n        if ($c eq \"(\") {\n            $count++;\n\
    \        } elsif ($c eq \")\") {\n            $count--;\n        }\n        return\
    \ \"\" if $count < 0;\n    }\n    return \"\" if $count != 0;\n    return 1;\n\
    }", "    my $open_brackets = 0;\n    for my $c (split //, $brackets) {\n     \
    \   if ($c eq '(') {\n            $open_brackets++;\n        }\n        elsif\
    \ ($c eq ')') {\n            $open_brackets--;\n        }\n        else {\n  \
    \          return \"\";\n        }\n        if ($open_brackets < 0) {\n      \
    \      return \"\";\n        }\n    }\n    return $open_brackets == 0 ? 1 : \"\
    \";\n}", "    my $count = 0;\n    for my $c (split //, $brackets) {\n        if\
    \ ($c eq \"(\") {\n            $count++;\n        } elsif ($c eq \")\") {\n  \
    \          $count--;\n        }\n        return \"\" if $count < 0;\n    }\n \
    \   return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my $c (split\
    \ //, $brackets) {\n        if ($c eq \"(\") {\n            $count++;\n      \
    \  } elsif ($c eq \")\") {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return \"\";\n        }\n    }\n    return $count == 0 ?\
    \ 1 : \"\";\n}", "    my $bracket_count = 0;\n    foreach my $char (split(//,\
    \ $brackets)) {\n        if ($char eq \"(\") {\n            $bracket_count++;\n\
    \        } elsif ($char eq \")\") {\n            $bracket_count--;\n        }\n\
    \        if ($bracket_count < 0) {\n            return \"\";\n        }\n    }\n\
    \    return $bracket_count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for\
    \ my $c (split //, $brackets) {\n        if ($c eq \"(\") {\n            $count++;\n\
    \        } elsif ($c eq \")\") {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return \"\";\n        }\n    }\n    return $count\
    \ == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my $char (split //, $brackets)\
    \ {\n        if ($char eq \"(\") {\n            $count++;\n        } elsif ($char\
    \ eq \")\") {\n            $count--;\n        }\n        return \"\" if $count\
    \ < 0;\n    }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n \
    \   for my $b (split //, $brackets) {\n        if ($b eq \"(\") {\n          \
    \  $count++;\n        } elsif ($b eq \")\") {\n            $count--;\n       \
    \ }\n        if ($count < 0) {\n            return \"\";\n        }\n    }\n \
    \   return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my $c (split\
    \ //, $brackets) {\n        if ($c eq \"(\") {\n            $count++;\n      \
    \  } elsif ($c eq \")\") {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return \"\";\n        }\n    }\n    return $count == 0 ?\
    \ 1 : \"\";\n}", "    my $count = 0;\n    for my $c (split //, $brackets) {\n\
    \        if ($c eq \"(\") {\n            $count++;\n        } elsif ($c eq \"\
    )\") {\n            $count--;\n        }\n        if ($count < 0) {\n        \
    \    return \"\";\n        }\n    }\n    return $count == 0 ? 1 : \"\";\n}", " \
    \   my $count = 0;\n    for my $b (split //, $brackets) {\n        if ($b eq \"\
    (\") {\n            $count++;\n        } elsif ($b eq \")\") {\n            $count--;\n\
    \        }\n        return \"\" if $count < 0;\n    }\n    return $count == 0\
    \ ? 1 : \"\";\n}", "    my $count = 0;\n    for my $char (split //, $brackets)\
    \ {\n        $count++ if $char eq '(';\n        $count-- if $char eq ')';\n  \
    \      return \"\" if $count < 0;\n    }\n    return $count == 0 ? 1 : \"\";\n\
    }", "    my $count = 0;\n    for my $c (split //, $brackets) {\n        if ($c\
    \ eq \"(\") {\n            $count++;\n        } elsif ($c eq \")\") {\n      \
    \      $count--;\n        }\n        if ($count < 0) {\n            return \"\"\
    ;\n        }\n    }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count =\
    \ 0;\n    foreach my $char (split //, $brackets) {\n        if ($char eq \"(\"\
    ) {\n            $count++;\n        } elsif ($char eq \")\") {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"\";\n        }\n \
    \   }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my\
    \ $c (split(//, $brackets)) {\n        if ($c eq \"(\") {\n            $count++;\n\
    \        } elsif ($c eq \")\") {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return \"\";\n        }\n    }\n    return $count\
    \ == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my $c (split //, $brackets)\
    \ {\n        if ($c eq \"(\") {\n            $count++;\n        } elsif ($c eq\
    \ \")\") {\n            $count--;\n        }\n        if ($count < 0) {\n    \
    \        return \"\";\n        }\n    }\n    return $count == 0 ? 1 : \"\";\n}",
  "    my $count = 0;\n    for my $c (split //, $brackets) {\n        if ($c eq \"\
    (\") {\n            $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n\
    \        }\n        return \"\" if $count < 0;\n    }\n    return $count == 0\
    \ ? 1 : \"\";\n}", "    my $count = 0;\n    for my $c (split //, $brackets) {\n\
    \        if ($c eq \"(\") {\n            $count++;\n        } elsif ($c eq \"\
    )\") {\n            $count--;\n        }\n        return \"\" if $count < 0;\n\
    \    }\n    return \"\" if $count != 0;\n    return 1;\n}", "    my $count = 0;\n\
    \    for my $c (split //, $brackets) {\n        if ($c eq \"(\") {\n         \
    \   $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n      \
    \  }\n        if ($count < 0) {\n            return \"\";\n        }\n    }\n\
    \    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my $c (split\
    \ //, $brackets) {\n        if ($c eq \"(\") {\n            $count++;\n      \
    \  } elsif ($c eq \")\") {\n            $count--;\n        }\n        return \"\
    \" if $count < 0;\n    }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count\
    \ = 0;\n    for (split //, $brackets) {\n        $count++ if $_ eq '(';\n    \
    \    $count-- if $_ eq ')';\n        return '' if $count < 0;\n    }\n    return\
    \ '' if $count != 0;\n    return 1;\n}", "    my $count = 0;\n    for my $b (split\
    \ //, $brackets) {\n        if ($b eq \"(\") {\n            $count++;\n      \
    \  } elsif ($b eq \")\") {\n            $count--;\n        }\n        return \"\
    \" if $count < 0;\n    }\n    return $count == 0 ? 1 : \"\";\n}", "    my $bracket_count\
    \ = 0;\n    for my $i (0 .. length($brackets) - 1) {\n        my $char = substr($brackets,\
    \ $i, 1);\n        if ($char eq \"(\") {\n            $bracket_count++;\n    \
    \    } elsif ($char eq \")\") {\n            $bracket_count--;\n        }\n  \
    \      if ($bracket_count < 0) {\n            return \"\";\n        }\n    }\n\
    \    return $bracket_count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for\
    \ my $char (split //, $brackets) {\n        if ($char eq \"(\") {\n          \
    \  $count++;\n        } elsif ($char eq \")\") {\n            $count--;\n    \
    \    }\n        if ($count < 0) {\n            return \"\";\n        }\n    }\n\
    \    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my $char\
    \ (split //, $brackets) {\n        if ($char eq '(') {\n            $count++;\n\
    \        } elsif ($char eq ')') {\n            $count--;\n        }\n        return\
    \ '' if $count < 0;\n    }\n    return $count == 0 ? 1 : '';\n}", "    my $count\
    \ = 0;\n    for my $c (split //, $brackets) {\n        if ($c eq \"(\") {\n  \
    \          $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n\
    \        }\n        return \"\" if $count < 0;\n    }\n    return $count == 0\
    \ ? 1 : \"\";\n}", "    my $count = 0;\n    for my $i (0..length($brackets)-1)\
    \ {\n        my $c = substr($brackets, $i, 1);\n        if ($c eq \"(\") {\n \
    \           $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"\";\n        }\n \
    \   }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my\
    \ $c (split //, $brackets) {\n        if ($c eq \"(\") {\n            $count++;\n\
    \        } elsif ($c eq \")\") {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return \"\";\n        }\n    }\n    return $count\
    \ == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    my $result = \"\";\n    for my\
    \ $char (split //, $brackets) {\n        if ($char eq \"(\") {\n            $count++;\n\
    \        }\n        elsif ($char eq \")\") {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            return \"\";\n        }\n    }\n    if\
    \ ($count == 0) {\n        $result = 1;\n    }\n    return $result;\n}", "   \
    \ my $count = 0;\n    foreach my $char (split //, $brackets) {\n        if ($char\
    \ eq \"(\") {\n            $count++;\n        } elsif ($char eq \")\") {\n   \
    \         $count--;\n        }\n        if ($count < 0) {\n            return\
    \ \"\";\n        }\n    }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count\
    \ = 0;\n    for my $c (split //, $brackets) {\n        if ($c eq \"(\") {\n  \
    \          $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"\";\n        }\n \
    \   }\n    return $count == 0 ? 1 : \"\";\n}", "    my $count = 0;\n    for my\
    \ $i (0..length($brackets)-1) {\n        if (substr($brackets, $i, 1) eq \"(\"\
    ) {\n            $count++;\n        }\n        elsif (substr($brackets, $i, 1)\
    \ eq \")\") {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return \"\";\n        }\n    }\n    if ($count == 0) {\n        return\
    \ 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my $count = 0;\n\
    \    for my $char (split //, $brackets) {\n        if ($char eq \"(\") {\n   \
    \         $count++;\n        } elsif ($char eq \")\") {\n            $count--;\n\
    \        }\n        return \"\" if $count < 0;\n    }\n    return $count == 0\
    \ ? 1 : \"\";\n}", "    my $count = 0;\n    for my $c (split //, $brackets) {\n\
    \        if ($c eq \"(\") {\n            $count++;\n        } elsif ($c eq \"\
    )\") {\n            $count--;\n        }\n        if ($count < 0) {\n        \
    \    return \"\";\n        }\n    }\n    return $count == 0 ? 1 : \"\";\n}", " \
    \   my $count = 0;\n    for my $char (split //, $brackets) {\n        if ($char\
    \ eq '(') {\n            $count++;\n        }\n        elsif ($char eq ')') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ \"\";\n        }\n    }\n    return $count == 0 ? 1 : \"\";\n}", "    my $open\
    \ = 0;\n    my $close = 0;\n    my $result = \"\";\n    my $i = 0;\n    while\
    \ ($i < length($brackets)) {\n        if (substr($brackets, $i, 1) eq \"(\") {\n\
    \            $open++;\n        }\n        elsif (substr($brackets, $i, 1) eq \"\
    )\") {\n            $close++;\n        }\n        $i++;\n    }\n    if ($open\
    \ == $close) {\n        $result = 1;\n    }\n    return $result;\n}", "    my\
    \ $count = 0;\n    for my $c (split //, $brackets) {\n        if ($c eq \"(\"\
    ) {\n            $count++;\n        } elsif ($c eq \")\") {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"\";\n        }\n \
    \   }\n    return $count == 0 ? 1 : \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
