language: pl
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $min * $min + ($sum - $max - $min) * ($sum - $max - $min)) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplj3ff03r.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n        return\
    \ 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpz2_tneci.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $min * $min + ($sum - $max - $min) * ($sum - $max - $min)) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplj3ff03r.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmppgkaonmf.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp2443bf6o.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return ($max * $max == $sum - $max\
    \ * $max) ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpdkspx7fh.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $sum - $max - $min) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp_hoomcmv.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b*$b + $c*$c)\
    \ ||\n            $b == sqrt($a*$a + $c*$c) ||\n            $c == sqrt($a*$a +\
    \ $b*$b)) {\n            $r = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    my $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid\
    \ = $a + $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid)\
    \ {\n        $result = 1;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp3rnsefm4.pl line 13.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b**2 + $c**2)\
    \ || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)) {\n            $r\
    \ = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    if ($a**2 +\
    \ $b**2 == $c**2) {\n        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp1rqvj0c6.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : \"\";\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpp9n0aus1.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max == $sum - $max) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplufp4i79.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my @sides =\
    \ sort {$a <=> $b} ($a, $b, $c);\n    return $sides[2]**2 == $sides[0]**2 + $sides[1]**2;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $hypotenuse\
    \ = max($a, $b, $c);\n    my $cathetus1 = min($a, $b, $c);\n    my $cathetus2\
    \ = ($a + $b + $c) - $hypotenuse - $cathetus1;\n    return ($hypotenuse ** 2 ==\
    \ $cathetus1 ** 2 + $cathetus2 ** 2) ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpo9_x748r.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    if ($a > $b\
    \ && $a > $c) {\n        return $a * $a == $b * $b + $c * $c;\n    } elsif ($b\
    \ > $a && $b > $c) {\n        return $b * $b == $a * $a + $c * $c;\n    } else\
    \ {\n        return $c * $c == $a * $a + $b * $b;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b**2 + $c**2)\
    \ || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)) {\n            $result\
    \ = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $s = ($a\
    \ + $b + $c) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    my $p = $a + $b + $c;\n    my $max = max($a, $b, $c);\n    my $min = min($a,\
    \ $b, $c);\n    my $mid = $p - $max - $min;\n    if ($max * $max == $min * $min\
    \ + $mid * $mid) {\n        return 1;\n    } else {\n        return \"\";\n  \
    \  }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpeer_qo7s.pl line 15.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $sum - $max - $min) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp_hoomcmv.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : \"\";\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpp9n0aus1.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpgr6xvy1j.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : '';\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpxhk5sndp.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : \"\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmptigcafw2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    if ($a > $b\
    \ && $a > $c) {\n        return $a**2 == $b**2 + $c**2;\n    }\n    elsif ($b\
    \ > $a && $b > $c) {\n        return $b**2 == $a**2 + $c**2;\n    }\n    else\
    \ {\n        return $c**2 == $a**2 + $b**2;\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    my $hypotenuse = $max;\n    my $adjacent = $mid;\n    my $opposite\
    \ = $min;\n    my $hypotenuse_squared = $hypotenuse ** 2;\n    my $adjacent_squared\
    \ = $adjacent ** 2;\n    my $opposite_squared = $opposite ** 2;\n    if ($hypotenuse_squared\
    \ == $adjacent_squared + $opposite_squared) {\n        return 1;\n    }\n    else\
    \ {\n        return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpbt55j9fh.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp1rqvj0c6.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $s = ($a\
    \ + $b + $c) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    if ($area == 0) {\n        return \"\";\n    }\n    my $max = max($a, $b,\
    \ $c);\n    my $min = min($a, $b, $c);\n    my $mid = $s - $max - $min;\n    if\
    \ ($max * $max == $min * $min + $mid * $mid) {\n        return 1;\n    }\n   \
    \ return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp0xhh7yga.pl line 17.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $rest = $sum - $max;\n    return\
    \ $max * $max == $rest * $rest;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp4q0kzf4f.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : \"\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmperzo0sl2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return 1 if $max**2 == $min**2 + $mid**2;\n    return \"\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpymp6a8iu.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        my $max = max($a, $b, $c);\n\
    \        my $min = min($a, $b, $c);\n        my $mid = ($a + $b + $c) - $max -\
    \ $min;\n        if ($max * $max == $min * $min + $mid * $mid) {\n           \
    \ $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpp9507xr6.pl line 14.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    my\
    \ $mid = $sum - $max - $min;\n    if ($max * $max == $mid * $mid + $min * $min)\
    \ {\n        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpk4ausjnw.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : \"\";\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpp9n0aus1.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp2443bf6o.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = $a\
    \ > $b ? $a : $b;\n    $max = $max > $c ? $max : $c;\n    my $min = $a < $b ?\
    \ $a : $b;\n    $min = $min < $c ? $min : $c;\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a*$a + $b*$b == $c*$c)\
    \ {\n            $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b**2 + $c**2)\
    \ || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)) {\n            $result\
    \ = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmppgkaonmf.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 +\
    \ $c**2 == $a**2)) {\n        $result = 1;\n    }\n    return $result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : \"\";\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpx5z27v9r.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpyuwlb_6c.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : \"\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmperzo0sl2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    return 1 if\
    \ $a**2 + $b**2 == $c**2;\n    return 1 if $a**2 + $c**2 == $b**2;\n    return\
    \ 1 if $b**2 + $c**2 == $a**2;\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : '';\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpxhk5sndp.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    my\
    \ $mid = $sum - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp2jzmqzsq.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 == $c**2)\
    \ {\n            $result = 1;\n        }\n        elsif ($a**2 + $c**2 == $b**2)\
    \ {\n            $result = 1;\n        }\n        elsif ($b**2 + $c**2 == $a**2)\
    \ {\n            $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b**2 + $c**2)\
    \ || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)) {\n            $r\
    \ = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $s = ($a\
    \ + $b + $c) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    return ($area > 0) ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012550
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    return 1 if\
    \ $a**2 + $b**2 == $c**2;\n    return 1 if $a**2 + $c**2 == $b**2;\n    return\
    \ 1 if $b**2 + $c**2 == $a**2;\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    return ($a**2\
    \ + $b**2 == $c**2) ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max**2 == $min**2 + $mid**2);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp0uae0opl.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n        return\
    \ 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmptet6v_e2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        my @sides = sort {$a <=>\
    \ $b} ($a, $b, $c);\n        if ($sides[0]**2 + $sides[1]**2 == $sides[2]**2)\
    \ {\n            $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    if ($max ** 2 == $min ** 2 + $mid ** 2) {\n        return 1;\n\
    \    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpi48qgd23.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        my $max = max($a, $b, $c);\n\
    \        my $sum = $a + $b + $c;\n        if ($max == $a) {\n            $result\
    \ = 1 if ($b * $b + $c * $c == $a * $a);\n        } elsif ($max == $b) {\n   \
    \         $result = 1 if ($a * $a + $c * $c == $b * $b);\n        } elsif ($max\
    \ == $c) {\n            $result = 1 if ($a * $a + $b * $b == $c * $c);\n     \
    \   }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpi6cv9yun.pl line 14.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if (($a**2 + $b**2 == $c**2) ||\
    \ ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n            $r = 1;\n\
    \        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 == $c**2\
    \ || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n            $result\
    \ = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpt0ot2hub.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        my $max = max($a, $b, $c);\n \
    \       my $min = min($a, $b, $c);\n        my $mid = ($a + $b + $c) - $max -\
    \ $min;\n        if ($max * $max == $min * $min + $mid * $mid) {\n           \
    \ $r = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpkz71eso5.pl line 14.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my @sides =\
    \ sort {$a <=> $b} ($a, $b, $c);\n    return ($sides[0]**2 + $sides[1]**2 == $sides[2]**2);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n        return\
    \ 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmptet6v_e2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max**2 == $min**2 + $mid**2) ? 1 : \"\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcopj6k9f.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $sum - $max - $min) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp_hoomcmv.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $s = ($a\
    \ + $b + $c) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    my $p = $a + $b + $c;\n    my $r = $area / ($p / 2);\n    my $h = 2 * $r;\n\
    \    my $d = sqrt($a**2 + $b**2);\n    if ($d == $c) {\n        return 1;\n  \
    \  }\n    else {\n        return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $s = ($a\
    \ + $b + $c) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    my $r = $area / $s;\n    if ($r == $a || $r == $b || $r == $c) {\n      \
    \  return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $hypotenuse\
    \ = max($a, $b, $c);\n    my $cathetus1 = min($a, $b, $c);\n    my $cathetus2\
    \ = ($a + $b + $c) - $hypotenuse - $cathetus1;\n    return ($hypotenuse ** 2 ==\
    \ $cathetus1 ** 2 + $cathetus2 ** 2) ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpo9_x748r.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    my\
    \ $mid = $sum - $max - $min;\n    if ($max * $max == $mid * $mid + $min * $min)\
    \ {\n        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpk4ausjnw.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max**2 == $min**2 + $mid**2) ? 1 : \"\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcopj6k9f.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a ** 2 + $b ** 2 ==\
    \ $c ** 2) {\n            $result = 1;\n        }\n        elsif ($a ** 2 + $c\
    \ ** 2 == $b ** 2) {\n            $result = 1;\n        }\n        elsif ($b **\
    \ 2 + $c ** 2 == $a ** 2) {\n            $result = 1;\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : \"\";\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpx5z27v9r.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 == $c**2)\
    \ {\n            $result = 1;\n        }\n        elsif ($a**2 + $c**2 == $b**2)\
    \ {\n            $result = 1;\n        }\n        elsif ($b**2 + $c**2 == $a**2)\
    \ {\n            $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n        return\
    \ 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpq0_x3yzv.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    return 0 if\
    \ $a <= 0 || $b <= 0 || $c <= 0;\n    my $max = max($a, $b, $c);\n    my $min\
    \ = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max - $min;\n    return $max\
    \ * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp0vnc_zi2.pl line 13.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max ** 2 == $min ** 2 + ($sum - $max - $min) ** 2) {\n        return 1;\n\
    \    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpm3vehsj6.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n        return\
    \ 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpvdi6glsr.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpziken75l.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmppgkaonmf.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b**2 +\
    \ $c**2) || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)) {\n      \
    \      $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp1rqvj0c6.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $sum - $max - $min) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp_hoomcmv.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmppgkaonmf.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $sum_other = $sum - $max;\n  \
    \  return $max * $max == $sum_other * $sum_other;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp96p6a1c3.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $min * $min + ($sum - $max - $min) * ($sum - $max - $min)) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplj3ff03r.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $sum * $sum - 2 * $max * $min) {\n        return 1;\n    }\n\
    \    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp8j8o__qe.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : \"\";\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpp9n0aus1.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : \"\";\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpp9n0aus1.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $sum - $max - $min) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp_hoomcmv.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n        return\
    \ 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmptet6v_e2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid) ? 1 : \"\";\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpp9n0aus1.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmppgkaonmf.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max**2 == $min**2 + ($sum - $max - $min)**2) {\n        return 1;\n    }\n\
    \    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpg7j_3kzr.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpt0ot2hub.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n        return\
    \ 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmptet6v_e2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : \"\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmperzo0sl2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n        return\
    \ 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpz2_tneci.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    if ($max ** 2 == $min ** 2 + $mid ** 2) {\n        return 1;\n\
    \    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpp9d84d9x.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 == $c**2 ||\
    \ $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n            $r = 1;\n \
    \       }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    my\
    \ $mid = $sum - $max - $min;\n    return $max**2 == $mid**2 + $min**2;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp9jhiw4_0.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmppgkaonmf.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpbkts__d1.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    return (($a\
    \ ** 2) + ($b ** 2) == ($c ** 2)) ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $min * $min + ($sum - $max - $min) * ($sum - $max - $min)) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplj3ff03r.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my @sides =\
    \ sort {$a <=> $b} ($a, $b, $c);\n    return $sides[2]**2 == $sides[0]**2 + $sides[1]**2;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 == $c**2)\
    \ {\n            $result = 1;\n        }\n        elsif ($a**2 + $c**2 == $b**2)\
    \ {\n            $result = 1;\n        }\n        elsif ($b**2 + $c**2 == $a**2)\
    \ {\n            $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpv0ssuplo.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $middle = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $middle ** 2) ? 1 : '';\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplvcggjwc.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = $a;\n\
    \    $max = $b if $b > $max;\n    $max = $c if $c > $max;\n    my $sum = $a +\
    \ $b + $c;\n    return $sum - $max - $max == $max;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpyuwlb_6c.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r;\n   \
    \ if ($a > $b && $a > $c) {\n        $r = ($b**2 + $c**2 == $a**2);\n    }\n \
    \   elsif ($b > $a && $b > $c) {\n        $r = ($a**2 + $c**2 == $b**2);\n   \
    \ }\n    elsif ($c > $a && $c > $b) {\n        $r = ($a**2 + $b**2 == $c**2);\n\
    \    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ \"\";\n    if ($a**2 + $b**2 == $c**2) {\n        $result = 1;\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a*$a + $b*$b == $c*$c ||\
    \ $a*$a + $c*$c == $b*$b || $b*$b + $c*$c == $a*$a) {\n            $r = 1;\n \
    \       }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return ($max * $max == $sum - $max\
    \ * $max) ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplqyecxff.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    return ($a **\
    \ 2 + $b ** 2 == $c ** 2) ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 == $c**2\
    \ || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n            $result\
    \ = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmppgkaonmf.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    my $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid\
    \ = $a + $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid)\
    \ {\n        $result = 1;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp3rnsefm4.pl line 13.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 == $c**2)\
    \ {\n            $result = 1;\n        }\n        elsif ($a**2 + $c**2 == $b**2)\
    \ {\n            $result = 1;\n        }\n        elsif ($b**2 + $c**2 == $a**2)\
    \ {\n            $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $sum - $max - $min) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp_hoomcmv.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpv0ssuplo.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my @sides =\
    \ sort {$a <=> $b} ($a, $b, $c);\n    return 1 if $sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2;\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $min * $min + ($sum - $max - $min) * ($sum - $max - $min)) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplj3ff03r.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $sum - $max - $min) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp_hoomcmv.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    my @sides = sort {$a <=> $b} ($a, $b, $c);\n    if ($sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2) {\n        $result = 1;\n    }\n    return $result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012550
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    if (($a**2 +\
    \ $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81lou4km.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp2443bf6o.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max == $sum - $max) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplufp4i79.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : \"\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmptigcafw2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        my $max = max($a, $b, $c);\n \
    \       my $min = min($a, $b, $c);\n        my $mid = $a + $b + $c - $max - $min;\n\
    \        if ($max * $max == $min * $min + $mid * $mid) {\n            $r = 1;\n\
    \        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp8_dhw_fj.pl line 14.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $hypotenuse\
    \ = max($a, $b, $c);\n    my $cathetus1 = min($a, $b, $c);\n    my $cathetus2\
    \ = ($a + $b + $c) - $hypotenuse - $cathetus1;\n    if ($hypotenuse ** 2 == $cathetus1\
    \ ** 2 + $cathetus2 ** 2) {\n        return 1;\n    }\n    return \"\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpjw9sdxxb.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max == $sum - $max\
    \ * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcyohjf9g.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    return\
    \ $max * $max == $sum - $max - $min;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp7log29iq.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $x = ($a**2\
    \ + $b**2 == $c**2) ? 1 : \"\";\n    return $x;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b ** 2 + $c **\
    \ 2) ||\n            $b == sqrt($a ** 2 + $c ** 2) ||\n            $c == sqrt($a\
    \ ** 2 + $b ** 2)) {\n            $r = 1;\n        }\n    }\n    return $r;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc7d4q54m.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmppgkaonmf.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpyuwlb_6c.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : \"\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmperzo0sl2.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    my\
    \ $mid = $sum - $max - $min;\n    if ($max * $max == $mid * $mid + $min * $min)\
    \ {\n        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpk4ausjnw.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    return\
    \ $sum - $max - $min == $max ? 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc_rcp0jh.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    my @sides = sort {$a <=> $b} ($a, $b, $c);\n    if ($sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2) {\n        $result = 1;\n    }\n    return $result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $result =\
    \ 0;\n    if (($a**2 + $b**2 == $c**2) || ($b**2 + $c**2 == $a**2) || ($c**2 +\
    \ $a**2 == $b**2)) {\n        $result = 1;\n    }\n    return $result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n        return\
    \ 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpvdi6glsr.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    my $hypotenuse = $max;\n    my $adjacent = $mid;\n    my $opposite\
    \ = $min;\n    return ($hypotenuse ** 2 == $adjacent ** 2 + $opposite ** 2) ?\
    \ 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpc47wqtid.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 == $c**2) {\n\
    \            $r = 1;\n        }\n        elsif ($a**2 + $c**2 == $b**2) {\n  \
    \          $r = 1;\n        }\n        elsif ($b**2 + $c**2 == $a**2) {\n    \
    \        $r = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    if\
    \ ($max * $max == $sum - $max - $min) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp_hoomcmv.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $r = 0;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 == $c**2 ||\
    \ $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n            $r = 1;\n \
    \       }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return ($sum - $max)**2 == $max**2;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp3txne47w.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = $a;\n\
    \    my $min = $b;\n    if ($max < $b) {\n        $max = $b;\n        $min = $a;\n\
    \    }\n    if ($max < $c) {\n        $max = $c;\n    }\n    if ($min > $c) {\n\
    \        $min = $c;\n    }\n    if ($max * $max == $min * $min + ($a + $b + $c\
    \ - $max - $min) * ($a + $b + $c - $max - $min)) {\n        return 1;\n    }\n\
    \    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012550
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle,  otherwise.\n# A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n\
    # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
    # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return ($max * $max == $min * $min + $mid * $mid);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpziken75l.pl line 12.

    '
  stdout: ''
  timestamp: 1660012550
