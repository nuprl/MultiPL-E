name: HumanEval_10_make_palindrome
language: pl
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome\
  \ {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyz\"),\"xyzyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"xyx\"),\"xyx\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $length = length($string);\n    my $longest_palindrome_suffix\
    \ = '';\n    for (my $i = $length; $i > 0; $i--) {\n        my $suffix = substr($string,\
    \ $length - $i);\n        if (is_palindrome($suffix)) {\n            $longest_palindrome_suffix\
    \ = $suffix;\n            last;\n        }\n    }\n    my $prefix = substr($string,\
    \ 0, $length - length($longest_palindrome_suffix));\n    return $string . reverse($prefix);\n\
    }", "    my $length = length($string);\n    my $palindrome_length = 0;\n    my\
    \ $palindrome_start = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        my\
    \ $j = 0;\n        while ($i - $j >= 0 && $i + $j < $length && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $j++;\n        }\n\
    \        if ($j * 2 - 1 > $palindrome_length) {\n            $palindrome_length\
    \ = $j * 2 - 1;\n            $palindrome_start = $i - $j + 1;\n        }\n   \
    \     $j = 0;\n        while ($i - $j >= 0 && $i + $j + 1 < $length && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j + 1, 1)) {\n            $j++;\n     \
    \   }\n        if ($j * 2 > $palindrome_length) {\n            $palindrome_length\
    \ = $j * 2;\n            $palindrome_start = $i - $j + 1;\n        }\n    }\n\
    \    return $string . reverse(substr($string, 0, $palindrome_start));\n}", " \
    \   my $palindrome = $string;\n    my $prefix = substr($string, 0, length($string)\
    \ - 1);\n    while ($prefix ne \"\") {\n        if (is_palindrome($prefix)) {\n\
    \            $palindrome .= reverse($prefix);\n            last;\n        }\n\
    \        $prefix = substr($prefix, 0, length($prefix) - 1);\n    }\n    return\
    \ $palindrome;\n}", "    my $length = length($string);\n    my $i = 0;\n    my\
    \ $j = $length - 1;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n\
    \ = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my\
    \ $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n  \
    \  my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my", "    my $length = length($string);\n\
    \    my $palindrome_length = 0;\n    my $palindrome_start = 0;\n    for (my $i\
    \ = 0; $i < $length; $i++) {\n        my $j = $length - 1 - $i;\n        if ($string->[$i]\
    \ eq $string->[$j]) {\n            my $k = $i + 1;\n            my $l = $j - 1;\n\
    \            while ($k <= $l && $string->[$k] eq $string->[$l]) {\n          \
    \      $k++;\n                $l--;\n            }\n            if ($k > $l) {\n\
    \                $palindrome_length = $j - $i + 1;\n                $palindrome_start\
    \ = $i;\n            }\n        }\n    }\n    my $palindrome = substr($string,\
    \ $palindrome_start, $palindrome_length);\n    my $prefix = substr($string, 0,\
    \ $palindrome_start);\n    return $palindrome . reverse($prefix);\n}", "    my\
    \ $length = length($string);\n    my $palindrome = $string;\n    my $prefix =\
    \ \"\";\n    my $suffix = \"\";\n    my $i = 0;\n    while ($i < $length) {\n\
    \        $prefix = substr($string, 0, $i);\n        $suffix = substr($string,\
    \ $i);\n        if (is_palindrome($suffix)) {\n            $palindrome = $string\
    \ . reverse($prefix);\n            last;\n        }\n        $i++;\n    }\n  \
    \  return $palindrome;\n}", "    my $length = length($string);\n    my $suffix\
    \ = \"\";\n    my $prefix = \"\";\n    my $palindrome = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i1 =\
    \ 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l1 = 0;\n    my $m1 = 0;\n   \
    \ my $n1 = 0;\n    my $o = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 =\
    \ 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n   \
    \ my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a1 =\
    \ 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n   \
    \ my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i2 = 0;\n    my $j2 =\
    \ 0;\n    my $k2 = 0;\n    my $l2 = 0;\n    my $m2", "    my $palindrome = $string;\n\
    \    my $length = length($string);\n    for (my $i = $length; $i > 0; $i--) {\n\
    \        my $prefix = substr($string, 0, $i);\n        if (is_palindrome($prefix))\
    \ {\n            $palindrome .= reverse($prefix);\n            last;\n       \
    \ }\n    }\n    return $palindrome;\n}", "    my $reverse = reverse $string;\n\
    \    my $length = length $string;\n    my $suffix = '';\n    for (my $i = 0; $i\
    \ < $length; $i++) {\n        if (substr($string, $i) eq substr($reverse, 0, $length\
    \ - $i)) {\n            $suffix = substr($string, $i);\n            last;\n  \
    \      }\n    }\n    return $string . reverse substr($string, 0, $length - length\
    \ $suffix);\n}", "    my $len = length($string);\n    my $max_palindrome_len =\
    \ 0;\n    my $max_palindrome_pos = 0;\n    for (my $i = 0; $i < $len; $i++) {\n\
    \        my $palindrome_len = 0;\n        my $palindrome_pos = $i;\n        for\
    \ (my $j = 0; $j <= $i; $j++) {\n            if (substr($string, $j, 1) eq substr($string,\
    \ $i - $j, 1)) {\n                $palindrome_len++;\n                $palindrome_pos\
    \ = $j;\n            } else {\n                last;\n            }\n        }\n\
    \        if ($palindrome_len > $max_palindrome_len) {\n            $max_palindrome_len\
    \ = $palindrome_len;\n            $max_palindrome_pos = $palindrome_pos;\n   \
    \     }\n    }\n    return $string . reverse(substr($string, 0, $max_palindrome_pos));\n\
    }", "    my $len = length($string);\n    my $max_palindrome_len = 0;\n    my $max_palindrome_pos\
    \ = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        my $palindrome_len = 0;\n\
    \        my $palindrome_pos = $i;\n        while ($palindrome_pos >= 0 && substr($string,\
    \ $palindrome_pos, 1) eq substr($string, $len - $palindrome_len - 1, 1)) {\n \
    \           $palindrome_len++;\n            $palindrome_pos--;\n        }\n  \
    \      if ($palindrome_len > $max_palindrome_len) {\n            $max_palindrome_len\
    \ = $palindrome_len;\n            $max_palindrome_pos = $palindrome_pos;\n   \
    \     }\n    }\n    return $string . reverse(substr($string, 0, $max_palindrome_pos\
    \ + 1));\n}", "    my $palindrome = $string;\n    my $prefix = reverse $string;\n\
    \    my $suffix = \"\";\n    my $length = length $string;\n    for (my $i = 0;\
    \ $i < $length; $i++) {\n        $suffix = substr($string, $i);\n        $prefix\
    \ = substr($string, 0, $length - $i);\n        if ($suffix eq $prefix) {\n   \
    \         $palindrome .= reverse $prefix;\n            last;\n        }\n    }\n\
    \    return $palindrome;\n}", "    my $length = length($string);\n    my $palindrome_length\
    \ = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        if (substr($string,\
    \ $i, 1) eq substr($string, $length - $i - 1, 1)) {\n            $palindrome_length++;\n\
    \        } else {\n            last;\n        }\n    }\n    return $string . reverse(substr($string,\
    \ 0, $length - $palindrome_length));\n}", "    my $length = length($string);\n\
    \    my $palindrome_length = 0;\n    for (my $i = 0; $i < $length; $i++) {\n \
    \       my $j = 0;\n        while ($i - $j >= 0 && $i + $j < $length && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $j++;\n        }\n\
    \        $palindrome_length = $j * 2 - 1 if $j * 2 - 1 > $palindrome_length;\n\
    \    }\n    for (my $i = 0; $i < $length; $i++) {\n        my $j = 0;\n      \
    \  while ($i - $j >= 0 && $i + $j + 1 < $length && substr($string, $i - $j, 1)\
    \ eq substr($string, $i + $j + 1, 1)) {\n            $j++;\n        }\n      \
    \  $palindrome_length = $j * 2 if $j * 2 > $palindrome_length;\n    }\n    return\
    \ $string . reverse(substr($string, 0, $length - $palindrome_length));\n}", " \
    \   my $length = length($string);\n    my $palindrome_length = 0;\n    my $palindrome_index\
    \ = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        my $j = 0;\n      \
    \  while ($i - $j >= 0 && $i + $j < $length && substr($string, $i - $j, 1) eq\
    \ substr($string, $i + $j, 1)) {\n            $j++;\n        }\n        if ($j\
    \ > $palindrome_length) {\n            $palindrome_length = $j;\n            $palindrome_index\
    \ = $i;\n        }\n    }\n    my $prefix = substr($string, 0, $palindrome_index\
    \ - $palindrome_length + 1);\n    return $string . reverse($prefix);\n}", "  \
    \  my $len = length($string);\n    my $i = 0;\n    my $j = $len - 1;\n    my $palindrome_suffix\
    \ = \"\";\n    my $palindrome_prefix = \"\";\n    while ($i < $j) {\n        if\
    \ (substr($string, $i, 1) eq substr($string, $j, 1)) {\n            $palindrome_suffix\
    \ = substr($string, $i, $j - $i + 1);\n            $palindrome_prefix = substr($string,\
    \ 0, $i);\n            $i++;\n            $j--;\n        } else {\n          \
    \  $i = 0;\n            $j--;\n        }\n    }\n    return $string . reverse($palindrome_prefix);\n\
    }", "    my $palindrome = $string;\n    my $reverse = reverse $string;\n    my\
    \ $length = length $string;\n    my $i = 0;\n    while ($i < $length) {\n    \
    \    if (substr($palindrome, $i) eq substr($reverse, 0, $length - $i)) {\n   \
    \         return $palindrome . substr($reverse, $length - $i);\n        }\n  \
    \      $i++;\n    }\n    return $palindrome;\n}", "    my $palindrome = $string;\n\
    \    my $prefix = substr($string, 0, length($string) - 1);\n    while (!is_palindrome($palindrome))\
    \ {\n        $palindrome = $prefix . reverse($prefix);\n        $prefix = substr($prefix,\
    \ 0, length($prefix) - 1);\n    }\n    return $palindrome;\n}", "    my $len =\
    \ length($string);\n    if ($len == 0) {\n        return $string;\n    }\n   \
    \ my $i = 0;\n    my $j = $len - 1;\n    my $k = 0;\n    my $l = 0;\n    my $m\
    \ = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my\
    \ $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n  \
    \  my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l1\
    \ = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n    my $o = 0;\n    my $p1 = 0;\n  \
    \  my $q1 = 0;\n    my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1\
    \ = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n \
    \   my $z1 = 0;\n    my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1\
    \ = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n \
    \   my $i2 = 0;\n    my $j2 = 0;\n    my $k2 = 0;\n    my $l2 = 0;\n    my $m2\
    \ = 0;\n    my", "    my $length = length($string);\n    my $prefix = substr($string,\
    \ 0, $length - 1);\n    my $suffix = substr($string, $length - 1, 1);\n    my\
    \ $palindrome = $string;\n    while (length($prefix) > 0) {\n        if ($prefix\
    \ eq reverse($prefix)) {\n            $palindrome = $prefix . $suffix . reverse($prefix);\n\
    \            last;\n        }\n        $suffix = substr($prefix, $length - 2,\
    \ 1) . $suffix;\n        $prefix = substr($prefix, 0, $length - 2);\n    }\n \
    \   return $palindrome;\n}", "    my $len = length($string);\n    my $suffix =\
    \ \"\";\n    my $prefix = \"\";\n    my $palindrome = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my", "    my($longest_palindrome_suffix)\
    \ = longest_palindrome_suffix($string);\n    my($prefix) = substr($string, 0,\
    \ length($string) - length($longest_palindrome_suffix));\n    return $string .\
    \ reverse($prefix);\n}", "    my $length = length($string);\n    my $palindrome_length\
    \ = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        my $j = 0;\n      \
    \  while ($i - $j >= 0 && $i + $j < $length && substr($string, $i - $j, 1) eq\
    \ substr($string, $i + $j, 1)) {\n            $j++;\n        }\n        $palindrome_length\
    \ = $j if $j > $palindrome_length;\n    }\n    return $string . reverse(substr($string,\
    \ 0, $length - $palindrome_length));\n}", "    my $length = length($string);\n\
    \    my $half_length = int($length / 2);\n    my $palindrome_length = 0;\n   \
    \ for (my $i = 0; $i < $half_length; $i++) {\n        if (substr($string, $i,\
    \ 1) eq substr($string, $length - $i - 1, 1)) {\n            $palindrome_length++;\n\
    \        } else {\n            last;\n        }\n    }\n    return $string . reverse(substr($string,\
    \ 0, $length - $palindrome_length));\n}", "    my $length = length($string);\n\
    \    my $palindrome_length = 0;\n    for (my $i = 0; $i < $length; $i++) {\n \
    \       my $j = 0;\n        while ($i - $j >= 0 && $i + $j < $length && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $j++;\n        }\n\
    \        if ($j > $palindrome_length) {\n            $palindrome_length = $j;\n\
    \        }\n    }\n    return $string . reverse(substr($string, 0, $length - $palindrome_length));\n\
    }", "    my $len = length($string);\n    my $i = 0;\n    my $j = $len - 1;\n \
    \   while ($i < $j) {\n        if (substr($string, $i, 1) eq substr($string, $j,\
    \ 1)) {\n            $i++;\n            $j--;\n        } else {\n            last;\n\
    \        }\n    }\n    if ($i >= $j) {\n        return $string;\n    }\n    my\
    \ $prefix = substr($string, 0, $i);\n    my $suffix = substr($string, $i);\n \
    \   return $string . reverse($prefix);\n}", "    my $length = length($string);\n\
    \    my $longest_palindrome_length = 0;\n    my $longest_palindrome_start = 0;\n\
    \    for (my $i = 0; $i < $length; $i++) {\n        my $palindrome_length = 0;\n\
    \        for (my $j = 0; $j < $length; $j++) {\n            if ($i + $j >= $length)\
    \ {\n                last;\n            }\n            if (substr($string, $i\
    \ + $j, 1) eq substr($string, $i - $j, 1)) {\n                $palindrome_length\
    \ = $j + 1;\n            } else {\n                last;\n            }\n    \
    \    }\n        if ($palindrome_length > $longest_palindrome_length) {\n     \
    \       $longest_palindrome_length = $palindrome_length;\n            $longest_palindrome_start\
    \ = $i - $palindrome_length + 1;\n        }\n    }\n    my $prefix = substr($string,\
    \ 0, $longest_palindrome_start);\n    my $suffix = substr($string, $longest_palindrome_start,\
    \ $longest_palindrome_length);\n    return $string . reverse($prefix);\n}", " \
    \   my $palindrome = $string;\n    my $prefix = substr($string, 0, length($string)\
    \ - length(longest_palindrome_suffix($string)));\n    $palindrome .= reverse($prefix);\n\
    \    return $palindrome;\n}", "    my $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    my $palindrome_prefix = reverse(substr($string, 0, length($string) - length($palindrome_suffix)));\n\
    \    return $string . $palindrome_prefix;\n}", "    my $palindrome = $string;\n\
    \    my $prefix = \"\";\n    my $suffix = \"\";\n    my $suffix_length = 0;\n\
    \    my $prefix_length = 0;\n    my $string_length = length($string);\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n  \
    \  my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $bb =\
    \ 0;\n    my $cc = 0;\n    my $dd = 0;\n    my $ee = 0;\n    my $ff = 0;\n   \
    \ my $gg = 0;\n    my $hh = 0;\n    my $ii = 0;\n    my $jj = 0;\n    my $kk =\
    \ 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn = 0;\n    my $oo = 0;\n   \
    \ my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n    my $ss = 0;\n    my $tt =\
    \ 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww = 0;\n    my $xx = 0;\n   \
    \ my $yy = 0;\n    my $zz = 0;\n    my $aaa = 0;\n    my $bbb = 0;\n    my $ccc\
    \ = 0;\n    my $ddd = 0;\n    my $eee = 0;\n    my $fff = 0;\n    my $ggg = 0;\n\
    \    my $hhh = 0;\n    my $iii = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my\
    \ $", "    my $len = length($string);\n    my $suffix_len = longest_palindrome_suffix($string);\n\
    \    return $string . reverse(substr($string, 0, $len - $suffix_len));\n}", " \
    \   my $length = length($string);\n    my $palindrome_length = 0;\n    for (my\
    \ $i = 0; $i < $length; $i++) {\n        my $j = 0;\n        while ($i - $j >=\
    \ 0 && $i + $j < $length && substr($string, $i - $j, 1) eq substr($string, $i\
    \ + $j, 1)) {\n            $j++;\n        }\n        if ($j > $palindrome_length)\
    \ {\n            $palindrome_length = $j;\n        }\n    }\n    return $string\
    \ . reverse(substr($string, 0, $length - $palindrome_length));\n}", "    my $length\
    \ = length($string);\n    my $longest_palindrome_length = 0;\n    my $longest_palindrome_position\
    \ = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        my $palindrome_length\
    \ = 0;\n        my $j = 0;\n        while ($i - $j >= 0 && $i + $j < $length &&\
    \ substr($string, $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $palindrome_length\
    \ += 2;\n            $j++;\n        }\n        if ($palindrome_length > $longest_palindrome_length)\
    \ {\n            $longest_palindrome_length = $palindrome_length;\n          \
    \  $longest_palindrome_position = $i;\n        }\n    }\n    my $prefix = substr($string,\
    \ 0, $longest_palindrome_position - $longest_palindrome_length / 2);\n    return\
    \ $string . reverse($prefix);\n}", "    my $palindrome = $string;\n    my $prefix\
    \ = substr($string, 0, length($string) - 1);\n    while ($prefix ne \"\") {\n\
    \        if (is_palindrome($prefix)) {\n            $palindrome .= reverse($prefix);\n\
    \            last;\n        }\n        $prefix = substr($prefix, 0, length($prefix)\
    \ - 1);\n    }\n    return $palindrome;\n}", "    my $length = length($string);\n\
    \    my $palindrome_length = 0;\n    my $palindrome_start = 0;\n    for (my $i\
    \ = 0; $i < $length; $i++) {\n        my $j = $length - 1 - $i;\n        if ($string->[$i]\
    \ eq $string->[$j]) {\n            my $k = 0;\n            while ($i + $k < $j\
    \ - $k) {\n                last if $string->[$i + $k] ne $string->[$j - $k];\n\
    \                $k++;\n            }\n            if ($i + $k >= $j - $k) {\n\
    \                $palindrome_length = $j - $i + 1;\n                $palindrome_start\
    \ = $i;\n            }\n        }\n    }\n    my $prefix = substr($string, 0,\
    \ $palindrome_start);\n    my $suffix = substr($string, $palindrome_start + $palindrome_length);\n\
    \    return $string . reverse($prefix) . $suffix;\n}", "    my $palindrome_suffix\
    \ = find_longest_palindrome_suffix($string);\n    my $prefix = substr($string,\
    \ 0, length($string) - length($palindrome_suffix));\n    return $string . reverse($prefix);\n\
    }", "    my $length = length($string);\n    my $palindrome_length = 0;\n    my\
    \ $palindrome_index = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        my\
    \ $j = 0;\n        while ($i - $j >= 0 && $i + $j < $length && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $j++;\n        }\n\
    \        if ($j > $palindrome_length) {\n            $palindrome_length = $j;\n\
    \            $palindrome_index = $i;\n        }\n    }\n    my $prefix = substr($string,\
    \ 0, $palindrome_index - $palindrome_length + 1);\n    return $string . reverse($prefix);\n\
    }", "    my $palindrome = $string;\n    my $prefix = substr($string, 0, length($string)\
    \ - 1);\n    while ($prefix ne \"\") {\n        if (is_palindrome($prefix)) {\n\
    \            $palindrome .= reverse($prefix);\n            last;\n        }\n\
    \        $prefix = substr($prefix, 0, length($prefix) - 1);\n    }\n    return\
    \ $palindrome;\n}", "    my $len = length($string);\n    my $max_len = 0;\n  \
    \  my $max_i = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        my $len1 =\
    \ is_palindrome($string, $i, $i);\n        my $len2 = is_palindrome($string, $i,\
    \ $i + 1);\n        my $len = $len1 > $len2 ? $len1 : $len2;\n        if ($len\
    \ > $max_len) {\n            $max_len = $len;\n            $max_i = $i;\n    \
    \    }\n    }\n    my $prefix = substr($string, 0, $max_i - $max_len + 1);\n \
    \   return $string . reverse($prefix);\n}", "    my $longest_palindrome = longest_palindrome($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($longest_palindrome));\n\
    \    return $string . reverse($prefix);\n}", "    my $palindrome = $string;\n\
    \    my $prefix = '';\n    while ($palindrome ne $string . reverse $prefix) {\n\
    \        $prefix = substr $string, 0, 1, '';\n        $palindrome = $string .\
    \ reverse $prefix;\n    }\n    return $palindrome;\n}", "    my $length = length($string);\n\
    \    my $max_palindrome_length = 0;\n    my $max_palindrome_start = 0;\n    for\
    \ (my $i = 0; $i < $length; $i++) {\n        my $palindrome_length = 0;\n    \
    \    my $palindrome_start = $i;\n        while ($palindrome_start >= 0 && substr($string,\
    \ $palindrome_start, 1) eq substr($string, $length - $palindrome_length - 1, 1))\
    \ {\n            $palindrome_length++;\n            $palindrome_start--;\n   \
    \     }\n        if ($palindrome_length > $max_palindrome_length) {\n        \
    \    $max_palindrome_length = $palindrome_length;\n            $max_palindrome_start\
    \ = $palindrome_start;\n        }\n    }\n    return $string . reverse(substr($string,\
    \ 0, $max_palindrome_start + 1));\n}", "    my $length = length($string);\n  \
    \  my $palindrome_length = 0;\n    my $palindrome_start = 0;\n    for (my $i =\
    \ 0; $i < $length; $i++) {\n        my $j = 0;\n        while ($i - $j >= 0 &&\
    \ $i + $j < $length && substr($string, $i - $j, 1) eq substr($string, $i + $j,\
    \ 1)) {\n            $j++;\n        }\n        if ($j > $palindrome_length) {\n\
    \            $palindrome_length = $j;\n            $palindrome_start = $i - $j\
    \ + 1;\n        }\n    }\n    return $string . reverse(substr($string, 0, $palindrome_start));\n\
    }", "    my $length = length($string);\n    my $suffix = \"\";\n    my $prefix\
    \ = \"\";\n    for (my $i = $length; $i > 0; $i--) {\n        $suffix = substr($string,\
    \ $length - $i, $i);\n        $prefix = substr($string, 0, $length - $i);\n  \
    \      if (is_palindrome($suffix)) {\n            return $string . reverse($prefix);\n\
    \        }\n    }\n    return $string;\n}", "    my $length = length($string);\n\
    \    my $palindrome_length = 0;\n    my $palindrome_start = 0;\n    for (my $i\
    \ = 0; $i < $length; $i++) {\n        my $j = 0;\n        while ($i - $j >= 0\
    \ && $i + $j < $length && substr($string, $i - $j, 1) eq substr($string, $i +\
    \ $j, 1)) {\n            $j++;\n        }\n        if ($j * 2 - 1 > $palindrome_length)\
    \ {\n            $palindrome_length = $j * 2 - 1;\n            $palindrome_start\
    \ = $i - $j + 1;\n        }\n        $j = 0;\n        while ($i - $j >= 0 && $i\
    \ + $j + 1 < $length && substr($string, $i - $j, 1) eq substr($string, $i + $j\
    \ + 1, 1)) {\n            $j++;\n        }\n        if ($j * 2 > $palindrome_length)\
    \ {\n            $palindrome_length = $j * 2;\n            $palindrome_start =\
    \ $i - $j + 1;\n        }\n    }\n    my $prefix = substr($string, 0, $palindrome_start);\n\
    \    return $string . reverse($prefix);\n}", "    my $len = length($string);\n\
    \    my $suffix = \"\";\n    my $prefix = \"\";\n    my $palindrome = \"\";\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n\
    \    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n\
    \    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my", "  \
    \  my $length = length($string);\n    my $palindrome_length = 0;\n    for (my\
    \ $i = 0; $i < $length; $i++) {\n        my $j = 0;\n        while ($i - $j >=\
    \ 0 && $i + $j < $length && substr($string, $i - $j, 1) eq substr($string, $i\
    \ + $j, 1)) {\n            $j++;\n        }\n        if ($j > $palindrome_length)\
    \ {\n            $palindrome_length = $j;\n        }\n    }\n    return $string\
    \ . reverse(substr($string, 0, $length - $palindrome_length));\n}", "    my $length\
    \ = length($string);\n    my $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    my $palindrome_prefix = substr($string, 0, $length - length($palindrome_suffix));\n\
    \    return $string . reverse($palindrome_prefix);\n}", "    my $length = length($string);\n\
    \    my $max_palindrome_length = 0;\n    my $max_palindrome_start = 0;\n    for\
    \ (my $i = 0; $i < $length; $i++) {\n        my $palindrome_length = 0;\n    \
    \    my $palindrome_start = 0;\n        if ($i < $length - 1) {\n            #\
    \ Check for palindrome of even length.\n            if (substr($string, $i, 1)\
    \ eq substr($string, $i + 1, 1)) {\n                $palindrome_length = 2;\n\
    \                $palindrome_start = $i;\n                while ($palindrome_start\
    \ > 0 && $palindrome_start + $palindrome_length < $length) {\n               \
    \     if (substr($string, $palindrome_start - 1, 1) eq substr($string, $palindrome_start\
    \ + $palindrome_length, 1)) {\n                        $palindrome_length += 2;\n\
    \                        $palindrome_start--;\n                    } else {\n\
    \                        last;\n                    }\n                }\n   \
    \         }\n        }\n        if (substr($string, $i, 1) eq substr($string,\
    \ $i - 1, 1)) {\n            # Check for palindrome of odd length.\n         \
    \   my $palindrome_length_odd = 3;\n            my $palindrome_start_odd = $i\
    \ - 1;\n            while ($palindrome_start_odd > 0 && $palindrome_start_odd\
    \ + $palindrome_length_odd < $length) {\n                if (substr($string, $palindrome_start_odd\
    \ - 1, 1) eq substr($string, $palindrome_start_odd + $palindrome_length_odd, 1))\
    \ {\n                    $palindrome_length_odd += 2;\n                    $palindrome_start_odd--;\n\
    \                } else {\n                    last;\n                }\n    \
    \        }\n            if ($palindrome_length_odd > $palindrome_length) {\n \
    \               $palindrome_length = $palindrome_length_odd;\n               \
    \ $palindrome_start = $", "    my $len = length($string);\n    my $i = $len;\n\
    \    while ($i > 0) {\n        my $substr = substr($string, $len - $i);\n    \
    \    if (is_palindrome($substr)) {\n            return $string . reverse(substr($string,\
    \ 0, $len - $i));\n        }\n        $i--;\n    }\n    return $string;\n}", " \
    \   my $len = length($string);\n    my $palindrome_len = 0;\n    for (my $i =\
    \ 0; $i < $len; $i++) {\n        if (substr($string, 0, $len - $i) eq reverse(substr($string,\
    \ $i))) {\n            $palindrome_len = $len - $i;\n            last;\n     \
    \   }\n    }\n    return $string . reverse(substr($string, 0, $len - $palindrome_len));\n\
    }", "    my $length = length($string);\n    my $palindrome_length = 0;\n    for\
    \ (my $i = 0; $i < $length; $i++) {\n        my $j = 0;\n        while ($i - $j\
    \ >= 0 && $i + $j < $length && substr($string, $i - $j, 1) eq substr($string,\
    \ $i + $j, 1)) {\n            $j++;\n        }\n        $palindrome_length = $j\
    \ * 2 - 1 if $j * 2 - 1 > $palindrome_length;\n    }\n    for (my $i = 0; $i <\
    \ $length; $i++) {\n        my $j = 0;\n        while ($i - $j >= 0 && $i + $j\
    \ + 1 < $length && substr($string, $i - $j, 1) eq substr($string, $i + $j + 1,\
    \ 1)) {\n            $j++;\n        }\n        $palindrome_length = $j * 2 if\
    \ $j * 2 > $palindrome_length;\n    }\n    return $string . reverse(substr($string,\
    \ 0, $length - $palindrome_length));\n}", "    my $palindrome = $string;\n   \
    \ my $prefix = $string;\n    while ($prefix) {\n        if (is_palindrome($prefix))\
    \ {\n            $palindrome .= reverse_string($string);\n            last;\n\
    \        }\n        $prefix = substr($prefix, 0, -1);\n    }\n    return $palindrome;\n\
    }", "    my $palindrome = $string;\n    my $suffix = longest_palindrome_suffix($string);\n\
    \    $palindrome .= reverse(substr($string, 0, length($string) - length($suffix)));\n\
    \    return $palindrome;\n}", "    my $length = length($string);\n    my $i =\
    \ 0;\n    my $j = $length - 1;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l1 = 0;\n    my $m1\
    \ = 0;\n    my $n1 = 0;\n    my $o = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n  \
    \  my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1\
    \ = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n \
    \   my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1\
    \ = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i2 = 0;\n \
    \   my $j2 = 0;\n    my $k2 = 0;\n    my $l2 = 0;\n    my $m2 = 0;\n    my $n2\
    \ = 0;\n    my $o1 = 0;\n    my", "    my $longest_palindrome = longest_palindrome($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($longest_palindrome));\n\
    \    return $string . reverse($prefix);\n}", "    my $len = length($string);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    my $k = 0;\n    my $palindrome = $string;\n\
    \    while ($i < $j) {\n        if (substr($string, $i, 1) eq substr($string,\
    \ $j, 1)) {\n            $k = $i;\n            $i++;\n            $j--;\n    \
    \    } else {\n            $i = 0;\n            $j = $len - 2 - $k;\n        \
    \    $k = 0;\n        }\n    }\n    $palindrome .= reverse(substr($string, 0,\
    \ $len - $k - 1));\n    return $palindrome;\n}", "    my $len = length($string);\n\
    \    my $palindrome_len = 0;\n    for (my $i = 0; $i < $len; $i++) {\n       \
    \ my $j = 0;\n        while ($i - $j >= 0 && $i + $j < $len && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $j++;\n        }\n\
    \        $palindrome_len = $j * 2 - 1 if $j * 2 - 1 > $palindrome_len;\n    }\n\
    \    for (my $i = 0; $i < $len; $i++) {\n        my $j = 0;\n        while ($i\
    \ - $j >= 0 && $i + $j + 1 < $len && substr($string, $i - $j, 1) eq substr($string,\
    \ $i + $j + 1, 1)) {\n            $j++;\n        }\n        $palindrome_len =\
    \ $j * 2 if $j * 2 > $palindrome_len;\n    }\n    my $prefix = substr($string,\
    \ 0, $len - $palindrome_len);\n    return $string . reverse($prefix);\n}", " \
    \   my $palindrome = $string;\n    my $prefix = substr($string, 0, length($string)\
    \ - 1);\n    while ($prefix ne \"\") {\n        if (is_palindrome($prefix)) {\n\
    \            $palindrome .= reverse($prefix);\n            last;\n        }\n\
    \        $prefix = substr($prefix, 0, length($prefix) - 1);\n    }\n    return\
    \ $palindrome;\n}", "    my $reverse = reverse $string;\n    my $length = length\
    \ $string;\n    my $i = 0;\n    my $j = $length - 1;\n    while ($i < $j) {\n\
    \        if (substr($string, $i, 1) eq substr($reverse, $j, 1)) {\n          \
    \  $i++;\n            $j--;\n        } else {\n            last;\n        }\n\
    \    }\n    return $string . substr($reverse, $i);\n}", "    my $length = length($string);\n\
    \    my $palindrome_length = 0;\n    my $palindrome_start = 0;\n    for (my $i\
    \ = 0; $i < $length; $i++) {\n        my $j = 0;\n        while ($i - $j >= 0\
    \ && $i + $j < $length && substr($string, $i - $j, 1) eq substr($string, $i +\
    \ $j, 1)) {\n            $j++;\n        }\n        if ($j > $palindrome_length)\
    \ {\n            $palindrome_length = $j;\n            $palindrome_start = $i\
    \ - $j + 1;\n        }\n    }\n    my $prefix = substr($string, 0, $palindrome_start);\n\
    \    return $string . reverse($prefix);\n}", "    my $len = length($string);\n\
    \    my $max_palindrome_len = 0;\n    for (my $i = 0; $i < $len; $i++) {\n   \
    \     my $j = 0;\n        while ($i - $j >= 0 && $i + $j < $len && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $j++;\n        }\n\
    \        if ($j > $max_palindrome_len) {\n            $max_palindrome_len = $j;\n\
    \        }\n    }\n    return $string . reverse(substr($string, 0, $len - $max_palindrome_len));\n\
    }", "    my $palindrome = $string;\n    my $prefix = substr($string, 0, length($string)\
    \ - length(longest_palindrome_suffix($string)));\n    $palindrome .= reverse($prefix);\n\
    \    return $palindrome;\n}", "    my $length = length($string);\n    my $palindrome_length\
    \ = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        if (substr($string,\
    \ $i, 1) eq substr($string, $length - 1 - $i, 1)) {\n            $palindrome_length++;\n\
    \        } else {\n            last;\n        }\n    }\n    return $string . reverse(substr($string,\
    \ 0, $length - $palindrome_length));\n}", "    my $length = length($string);\n\
    \    my $palindrome_length = 0;\n    my $palindrome_start = 0;\n    for (my $i\
    \ = 0; $i < $length; $i++) {\n        my $j = 0;\n        while ($i - $j >= 0\
    \ && $i + $j < $length && substr($string, $i - $j, 1) eq substr($string, $i +\
    \ $j, 1)) {\n            $j++;\n        }\n        if ($j > $palindrome_length)\
    \ {\n            $palindrome_length = $j;\n            $palindrome_start = $i\
    \ - $j + 1;\n        }\n    }\n    return $string . reverse(substr($string, 0,\
    \ $palindrome_start));\n}", "    return $string if is_palindrome($string);\n \
    \   my $longest_palindrome = longest_palindrome($string);\n    return $string\
    \ . reverse(substr($string, 0, length($string) - length($longest_palindrome)));\n\
    }", "    my $palindrome = $string;\n    my $length = length($string);\n    my\
    \ $i = 0;\n    while ($i < $length) {\n        my $j = $length - $i - 1;\n   \
    \     if (substr($string, $i, 1) eq substr($string, $j, 1)) {\n            $palindrome\
    \ = substr($string, 0, $i) . reverse(substr($string, $i));\n            last;\n\
    \        }\n        $i++;\n    }\n    return $palindrome;\n}", "    return $string\
    \ if $string eq \"\";\n    my $longest_palindrome = longest_palindrome($string);\n\
    \    return $string . reverse(substr($string, 0, length($string) - length($longest_palindrome)));\n\
    }", "    my $palindrome = $string;\n    my $palindrome_length = length($palindrome);\n\
    \    my $string_length = length($string);\n    my $max_palindrome_length = 0;\n\
    \    my $max_palindrome_index = 0;\n    for (my $i = 0; $i < $string_length; $i++)\
    \ {\n        my $j = 0;\n        while ($i - $j >= 0 && $i + $j < $string_length\
    \ && substr($string, $i - $j, 1) eq substr($string, $i + $j, 1)) {\n         \
    \   $j++;\n        }\n        if ($j > $max_palindrome_length) {\n           \
    \ $max_palindrome_length = $j;\n            $max_palindrome_index = $i;\n    \
    \    }\n    }\n    my $prefix = substr($string, 0, $max_palindrome_index - $max_palindrome_length\
    \ + 1);\n    $palindrome .= reverse($prefix);\n    return $palindrome;\n}", " \
    \   my $len = length($string);\n    my $i = $len;\n    while ($i > 0) {\n    \
    \    if (is_palindrome(substr($string, $len - $i))) {\n            return $string\
    \ . reverse(substr($string, 0, $len - $i));\n        }\n        $i--;\n    }\n\
    \    return $string . reverse($string);\n}", "    my $palindrome_suffix = longest_palindrome_suffix($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($palindrome_suffix));\n\
    \    return $string . reverse($prefix);\n}", "    my $palindrome = $string;\n\
    \    my $prefix = substr($string, 0, length($string) - longest_palindrome_suffix($string));\n\
    \    $palindrome .= reverse($prefix);\n    return $palindrome;\n}", "    my $len\
    \ = length($string);\n    my $longest_palindrome_suffix = '';\n    for (my $i\
    \ = 0; $i < $len; $i++) {\n        my $suffix = substr($string, $i);\n       \
    \ if (is_palindrome($suffix)) {\n            $longest_palindrome_suffix = $suffix;\n\
    \            last;\n        }\n    }\n    my $prefix = substr($string, 0, $len\
    \ - length($longest_palindrome_suffix));\n    return $string . reverse($prefix);\n\
    }", "    my $length = length($string);\n    my $palindrome_length = 0;\n    my\
    \ $palindrome_index = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n   \
    \ my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p =", "    my $length = length($string);\n    my $i =\
    \ 0;\n    my $j = $length - 1;\n    while ($i < $j) {\n        if (substr($string,\
    \ $i, 1) eq substr($string, $j, 1)) {\n            $i++;\n            $j--;\n\
    \        } else {\n            last;\n        }\n    }\n    if ($i >= $j) {\n\
    \        return $string;\n    }\n    my $prefix = substr($string, 0, $i);\n  \
    \  my $suffix = substr($string, $i);\n    return $string . reverse($prefix);\n\
    }", "    return $string if $string eq \"\";\n    my $longest_palindrome = longest_palindrome($string);\n\
    \    return $string . reverse(substr($string, 0, length($string) - length($longest_palindrome)));\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
