name: HumanEval_10_make_palindrome
language: pl
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome\
  \ {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyz\"),\"xyzyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"xyx\"),\"xyx\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $length = length($string);\n    my $longest_palindrome_suffix\
    \ = '';\n    for (my $i = $length; $i > 0; $i--) {\n        my $suffix = substr($string,\
    \ $length - $i);\n        if (is_palindrome($suffix)) {\n            $longest_palindrome_suffix\
    \ = $suffix;\n            last;\n        }\n    }\n    my $prefix = substr($string,\
    \ 0, $length - length($longest_palindrome_suffix));\n    return $string . reverse($prefix);\n\
    }", "    my $length = length($string);\n    my $palindrome_length = 0;\n    my\
    \ $palindrome_start = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        my\
    \ $j = 0;\n        while ($i - $j >= 0 && $i + $j < $length && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $j++;\n        }\n\
    \        if ($j * 2 - 1 > $palindrome_length) {\n            $palindrome_length\
    \ = $j * 2 - 1;\n            $palindrome_start = $i - $j + 1;\n        }\n   \
    \     $j = 0;\n        while ($i - $j >= 0 && $i + $j + 1 < $length && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j + 1, 1)) {\n            $j++;\n     \
    \   }\n        if ($j * 2 > $palindrome_length) {\n            $palindrome_length\
    \ = $j * 2;\n            $palindrome_start = $i - $j + 1;\n        }\n    }\n\
    \    return $string . reverse(substr($string, 0, $palindrome_start));\n}", " \
    \   my $palindrome = $string;\n    my $prefix = substr($string, 0, length($string)\
    \ - 1);\n    while ($prefix ne \"\") {\n        if (is_palindrome($prefix)) {\n\
    \            $palindrome .= reverse($prefix);\n            last;\n        }\n\
    \        $prefix = substr($prefix, 0, length($prefix) - 1);\n    }\n    return\
    \ $palindrome;\n}", "    my $length = length($string);\n    my $i = 0;\n    my\
    \ $j = $length - 1;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n\
    \ = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my\
    \ $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n  \
    \  my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my", "    my $length = length($string);\n\
    \    my $palindrome_length = 0;\n    my $palindrome_start = 0;\n    for (my $i\
    \ = 0; $i < $length; $i++) {\n        my $j = $length - 1 - $i;\n        if ($string->[$i]\
    \ eq $string->[$j]) {\n            my $k = $i + 1;\n            my $l = $j - 1;\n\
    \            while ($k <= $l && $string->[$k] eq $string->[$l]) {\n          \
    \      $k++;\n                $l--;\n            }\n            if ($k > $l) {\n\
    \                $palindrome_length = $j - $i + 1;\n                $palindrome_start\
    \ = $i;\n            }\n        }\n    }\n    my $palindrome = substr($string,\
    \ $palindrome_start, $palindrome_length);\n    my $prefix = substr($string, 0,\
    \ $palindrome_start);\n    return $palindrome . reverse($prefix);\n}", "    my\
    \ $length = length($string);\n    my $palindrome = $string;\n    my $prefix =\
    \ \"\";\n    my $suffix = \"\";\n    my $i = 0;\n    while ($i < $length) {\n\
    \        $prefix = substr($string, 0, $i);\n        $suffix = substr($string,\
    \ $i);\n        if (is_palindrome($suffix)) {\n            $palindrome = $string\
    \ . reverse($prefix);\n            last;\n        }\n        $i++;\n    }\n  \
    \  return $palindrome;\n}", "    my $length = length($string);\n    my $suffix\
    \ = \"\";\n    my $prefix = \"\";\n    my $palindrome = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i1 =\
    \ 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l1 = 0;\n    my $m1 = 0;\n   \
    \ my $n1 = 0;\n    my $o = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 =\
    \ 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n   \
    \ my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a1 =\
    \ 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n   \
    \ my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i2 = 0;\n    my $j2 =\
    \ 0;\n    my $k2 = 0;\n    my $l2 = 0;\n    my $m2", "    my $palindrome = $string;\n\
    \    my $length = length($string);\n    for (my $i = $length; $i > 0; $i--) {\n\
    \        my $prefix = substr($string, 0, $i);\n        if (is_palindrome($prefix))\
    \ {\n            $palindrome .= reverse($prefix);\n            last;\n       \
    \ }\n    }\n    return $palindrome;\n}", "    my $reverse = reverse $string;\n\
    \    my $length = length $string;\n    my $suffix = '';\n    for (my $i = 0; $i\
    \ < $length; $i++) {\n        if (substr($string, $i) eq substr($reverse, 0, $length\
    \ - $i)) {\n            $suffix = substr($string, $i);\n            last;\n  \
    \      }\n    }\n    return $string . reverse substr($string, 0, $length - length\
    \ $suffix);\n}", "    my $len = length($string);\n    my $max_palindrome_len =\
    \ 0;\n    my $max_palindrome_pos = 0;\n    for (my $i = 0; $i < $len; $i++) {\n\
    \        my $palindrome_len = 0;\n        my $palindrome_pos = $i;\n        for\
    \ (my $j = 0; $j <= $i; $j++) {\n            if (substr($string, $j, 1) eq substr($string,\
    \ $i - $j, 1)) {\n                $palindrome_len++;\n                $palindrome_pos\
    \ = $j;\n            } else {\n                last;\n            }\n        }\n\
    \        if ($palindrome_len > $max_palindrome_len) {\n            $max_palindrome_len\
    \ = $palindrome_len;\n            $max_palindrome_pos = $palindrome_pos;\n   \
    \     }\n    }\n    return $string . reverse(substr($string, 0, $max_palindrome_pos));\n\
    }", "    my $len = length($string);\n    my $max_palindrome_len = 0;\n    my $max_palindrome_pos\
    \ = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        my $palindrome_len = 0;\n\
    \        my $palindrome_pos = $i;\n        while ($palindrome_pos >= 0 && substr($string,\
    \ $palindrome_pos, 1) eq substr($string, $len - $palindrome_len - 1, 1)) {\n \
    \           $palindrome_len++;\n            $palindrome_pos--;\n        }\n  \
    \      if ($palindrome_len > $max_palindrome_len) {\n            $max_palindrome_len\
    \ = $palindrome_len;\n            $max_palindrome_pos = $palindrome_pos;\n   \
    \     }\n    }\n    return $string . reverse(substr($string, 0, $max_palindrome_pos\
    \ + 1));\n}", "    my $palindrome = $string;\n    my $prefix = reverse $string;\n\
    \    my $suffix = \"\";\n    my $length = length $string;\n    for (my $i = 0;\
    \ $i < $length; $i++) {\n        $suffix = substr($string, $i);\n        $prefix\
    \ = substr($string, 0, $length - $i);\n        if ($suffix eq $prefix) {\n   \
    \         $palindrome .= reverse $prefix;\n            last;\n        }\n    }\n\
    \    return $palindrome;\n}", "    my $length = length($string);\n    my $palindrome_length\
    \ = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        if (substr($string,\
    \ $i, 1) eq substr($string, $length - $i - 1, 1)) {\n            $palindrome_length++;\n\
    \        } else {\n            last;\n        }\n    }\n    return $string . reverse(substr($string,\
    \ 0, $length - $palindrome_length));\n}", "    my $length = length($string);\n\
    \    my $palindrome_length = 0;\n    for (my $i = 0; $i < $length; $i++) {\n \
    \       my $j = 0;\n        while ($i - $j >= 0 && $i + $j < $length && substr($string,\
    \ $i - $j, 1) eq substr($string, $i + $j, 1)) {\n            $j++;\n        }\n\
    \        $palindrome_length = $j * 2 - 1 if $j * 2 - 1 > $palindrome_length;\n\
    \    }\n    for (my $i = 0; $i < $length; $i++) {\n        my $j = 0;\n      \
    \  while ($i - $j >= 0 && $i + $j + 1 < $length && substr($string, $i - $j, 1)\
    \ eq substr($string, $i + $j + 1, 1)) {\n            $j++;\n        }\n      \
    \  $palindrome_length = $j * 2 if $j * 2 > $palindrome_length;\n    }\n    return\
    \ $string . reverse(substr($string, 0, $length - $palindrome_length));\n}", " \
    \   my $length = length($string);\n    my $palindrome_length = 0;\n    my $palindrome_index\
    \ = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        my $j = 0;\n      \
    \  while ($i - $j >= 0 && $i + $j < $length && substr($string, $i - $j, 1) eq\
    \ substr($string, $i + $j, 1)) {\n            $j++;\n        }\n        if ($j\
    \ > $palindrome_length) {\n            $palindrome_length = $j;\n            $palindrome_index\
    \ = $i;\n        }\n    }\n    my $prefix = substr($string, 0, $palindrome_index\
    \ - $palindrome_length + 1);\n    return $string . reverse($prefix);\n}", "  \
    \  my $len = length($string);\n    my $i = 0;\n    my $j = $len - 1;\n    my $palindrome_suffix\
    \ = \"\";\n    my $palindrome_prefix = \"\";\n    while ($i < $j) {\n        if\
    \ (substr($string, $i, 1) eq substr($string, $j, 1)) {\n            $palindrome_suffix\
    \ = substr($string, $i, $j - $i + 1);\n            $palindrome_prefix = substr($string,\
    \ 0, $i);\n            $i++;\n            $j--;\n        } else {\n          \
    \  $i = 0;\n            $j--;\n        }\n    }\n    return $string . reverse($palindrome_prefix);\n\
    }", "    my $palindrome = $string;\n    my $reverse = reverse $string;\n    my\
    \ $length = length $string;\n    my $i = 0;\n    while ($i < $length) {\n    \
    \    if (substr($palindrome, $i) eq substr($reverse, 0, $length - $i)) {\n   \
    \         return $palindrome . substr($reverse, $length - $i);\n        }\n  \
    \      $i++;\n    }\n    return $palindrome;\n}", "    my $palindrome = $string;\n\
    \    my $prefix = substr($string, 0, length($string) - 1);\n    while (!is_palindrome($palindrome))\
    \ {\n        $palindrome = $prefix . reverse($prefix);\n        $prefix = substr($prefix,\
    \ 0, length($prefix) - 1);\n    }\n    return $palindrome;\n}", "    my $len =\
    \ length($string);\n    if ($len == 0) {\n        return $string;\n    }\n   \
    \ my $i = 0;\n    my $j = $len - 1;\n    my $k = 0;\n    my $l = 0;\n    my $m\
    \ = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my\
    \ $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n  \
    \  my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l1\
    \ = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n    my $o = 0;\n    my $p1 = 0;\n  \
    \  my $q1 = 0;\n    my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1\
    \ = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n \
    \   my $z1 = 0;\n    my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1\
    \ = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n \
    \   my $i2 = 0;\n    my $j2 = 0;\n    my $k2 = 0;\n    my $l2 = 0;\n    my $m2\
    \ = 0;\n    my", "    my $length = length($string);\n    my $prefix = substr($string,\
    \ 0, $length - 1);\n    my $suffix = substr($string, $length - 1, 1);\n    my\
    \ $palindrome = $string;\n    while (length($prefix) > 0) {\n        if ($prefix\
    \ eq reverse($prefix)) {\n            $palindrome = $prefix . $suffix . reverse($prefix);\n\
    \            last;\n        }\n        $suffix = substr($prefix, $length - 2,\
    \ 1) . $suffix;\n        $prefix = substr($prefix, 0, $length - 2);\n    }\n \
    \   return $palindrome;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
