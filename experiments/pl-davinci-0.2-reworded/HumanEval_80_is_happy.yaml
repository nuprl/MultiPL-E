name: HumanEval_80_is_happy
language: pl
prompt: "# You are given a string s.\n# Your task is to check if the string is happl\
  \ or not.\n# A string is happl if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# >>> is_happy(a)\n# \"\"\n# >>> is_happy(aa)\n\
  # \"\"\n# >>> is_happy(abcd)\n# 1\n# >>> is_happy(aabb)\n# \"\"\n# >>> is_happy(adb)\n\
  # 1\n# >>> is_happy(xyy)\n# \"\"\nsub is_happy {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n\
  \        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"aabb\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return \"\" if length($s) < 3;\n    my @s = split(//, $s);\n  \
    \  for (my $i = 0; $i < $#s - 1; $i++) {\n        return \"\" if $s[$i] eq $s[$i\
    \ + 1] or $s[$i] eq $s[$i + 2] or $s[$i + 1] eq $s[$i + 2];\n    }\n    return\
    \ 1;\n}", "    my $len = length($s);\n    if ($len < 3) {\n        return \"\"\
    ;\n    }\n    my $i = 0;\n    while ($i < $len - 2) {\n        my $sub = substr($s,\
    \ $i, 3);\n        if ($sub =~ /(\\w)\\1\\1/) {\n            return \"\";\n  \
    \      }\n        $i++;\n    }\n    return 1;\n}", "    # Your code here\n   \
    \ my $len = length($s);\n    if($len < 3){\n        return \"\";\n    }\n    for(my\
    \ $i = 0; $i < $len - 2; $i++){\n        my $sub = substr($s, $i, 3);\n      \
    \  if($sub =~ /(\\w)\\1\\1/){\n            return \"\";\n        }\n    }\n  \
    \  return 1;\n}", "    return \"\" if length($s) < 3;\n    my $i = 0;\n    while($i\
    \ < length($s) - 2) {\n        return \"\" if substr($s, $i, 1) eq substr($s,\
    \ $i + 1, 1);\n        return \"\" if substr($s, $i, 1) eq substr($s, $i + 2,\
    \ 1);\n        return \"\" if substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n\
    \        $i++;\n    }\n    return 1;\n}", "    return \"\" if length($s) < 3;\n\
    \    my $i = 0;\n    while ($i < length($s) - 2) {\n        return \"\" if substr($s,\
    \ $i, 1) eq substr($s, $i + 1, 1);\n        return \"\" if substr($s, $i, 1) eq\
    \ substr($s, $i + 2, 1);\n        return \"\" if substr($s, $i + 1, 1) eq substr($s,\
    \ $i + 2, 1);\n        $i++;\n    }\n    return 1;\n}", "    # Your code here\n\
    \    if (length($s) < 3) {\n        return \"\";\n    }\n    my @s = split(\"\"\
    , $s);\n    for (my $i = 0; $i < length($s) - 2; $i++) {\n        if ($s[$i] eq\
    \ $s[$i + 1] || $s[$i] eq $s[$i + 2] || $s[$i + 1] eq $s[$i + 2]) {\n        \
    \    return \"\";\n        }\n    }\n    return 1;\n}", "    if (length($s) <\
    \ 3) {\n        return \"\";\n    }\n    for (my $i = 0; $i < length($s) - 2;\
    \ $i++) {\n        if (substr($s, $i, 1) eq substr($s, $i + 1, 1) ||\n       \
    \     substr($s, $i, 1) eq substr($s, $i + 2, 1) ||\n            substr($s, $i\
    \ + 1, 1) eq substr($s, $i + 2, 1)) {\n            return \"\";\n        }\n \
    \   }\n    return 1;\n}", "    return \"\" if(length($s) < 3);\n    my @s = split(//,\
    \ $s);\n    for(my $i = 0; $i < @s - 2; $i++) {\n        return \"\" if($s[$i]\
    \ eq $s[$i + 1] || $s[$i] eq $s[$i + 2] || $s[$i + 1] eq $s[$i + 2]);\n    }\n\
    \    return 1;\n}", "    return \"\" if length($s) < 3;\n    return \"\" if $s\
    \ =~ /(.)\\1\\1/;\n    return 1;\n}", "    my $len = length($s);\n    return \"\
    \" if $len < 3;\n    my $i = 0;\n    while ($i < $len - 2) {\n        my $sub\
    \ = substr($s, $i, 3);\n        if ($sub =~ /(\\w)\\1\\1/) {\n            return\
    \ \"\";\n        }\n        $i++;\n    }\n    return 1;\n}", "    my $len = length($s);\n\
    \    return \"\" if $len < 3;\n    my $i = 0;\n    while ($i < $len - 2) {\n \
    \       my $c1 = substr($s, $i, 1);\n        my $c2 = substr($s, $i + 1, 1);\n\
    \        my $c3 = substr($s, $i + 2, 1);\n        return \"\" if $c1 eq $c2 ||\
    \ $c1 eq $c3 || $c2 eq $c3;\n        $i++;\n    }\n    return 1;\n}", "    return\
    \ \"\" if length($s) < 3;\n    for (my $i = 0; $i < length($s) - 2; $i++) {\n\
    \        return \"\" if substr($s, $i, 1) eq substr($s, $i + 1, 1) ||\n      \
    \      substr($s, $i, 1) eq substr($s, $i + 2, 1) ||\n            substr($s, $i\
    \ + 1, 1) eq substr($s, $i + 2, 1);\n    }\n    return 1;\n}", "    return 0 if\
    \ length($s) < 3;\n    my $i = 0;\n    while ($i < length($s) - 2) {\n       \
    \ my $c1 = substr($s, $i, 1);\n        my $c2 = substr($s, $i + 1, 1);\n     \
    \   my $c3 = substr($s, $i + 2, 1);\n        return 0 if $c1 eq $c2 || $c1 eq\
    \ $c3 || $c2 eq $c3;\n        $i++;\n    }\n    return 1;\n}", "    return \"\"\
    \ if length($s) < 3;\n    my $i = 0;\n    while ($i < length($s) - 2) {\n    \
    \    return \"\" if substr($s, $i, 1) eq substr($s, $i + 1, 1);\n        return\
    \ \"\" if substr($s, $i, 1) eq substr($s, $i + 2, 1);\n        return \"\" if\
    \ substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n        $i++;\n    }\n    return\
    \ 1;\n}", "    return \"\" if length($s) < 3;\n    my @s = split //, $s;\n   \
    \ for (my $i = 0; $i < @s - 2; $i++) {\n        return \"\" if $s[$i] eq $s[$i\
    \ + 1] || $s[$i] eq $s[$i + 2] || $s[$i + 1] eq $s[$i + 2];\n    }\n    return\
    \ 1;\n}", "    my $len = length($s);\n    if ($len < 3) {\n        return \"\"\
    ;\n    }\n    my $i = 0;\n    while ($i < $len - 2) {\n        my $c1 = substr($s,\
    \ $i, 1);\n        my $c2 = substr($s, $i + 1, 1);\n        my $c3 = substr($s,\
    \ $i + 2, 1);\n        if ($c1 eq $c2 || $c1 eq $c3 || $c2 eq $c3) {\n       \
    \     return \"\";\n        }\n        $i++;\n    }\n    return 1;\n}", "    return\
    \ \"\" if length($s) < 3;\n    my $i = 0;\n    while ($i < length($s) - 2) {\n\
    \        my $sub = substr($s, $i, 3);\n        return \"\" if $sub =~ /(.)\\1/;\n\
    \        $i++;\n    }\n    return 1;\n}", "    my $len = length($s);\n    return\
    \ \"\" if $len < 3;\n    my $i = 0;\n    while ($i < $len - 2) {\n        my $c1\
    \ = substr($s, $i, 1);\n        my $c2 = substr($s, $i + 1, 1);\n        my $c3\
    \ = substr($s, $i + 2, 1);\n        return \"\" if $c1 eq $c2 || $c1 eq $c3 ||\
    \ $c2 eq $c3;\n        $i++;\n    }\n    return 1;\n}", "    return \"\" if length($s)\
    \ < 3;\n    my $i = 0;\n    while ($i < length($s) - 2) {\n        return \"\"\
    \ if substr($s, $i, 1) eq substr($s, $i + 1, 1);\n        return \"\" if substr($s,\
    \ $i, 1) eq substr($s, $i + 2, 1);\n        return \"\" if substr($s, $i + 1,\
    \ 1) eq substr($s, $i + 2, 1);\n        $i++;\n    }\n    return 1;\n}", "   \
    \ return \"\" if length($s) < 3;\n    my $i = 0;\n    while ($i < length($s) -\
    \ 2) {\n        return \"\" if substr($s, $i, 1) eq substr($s, $i + 1, 1);\n \
    \       return \"\" if substr($s, $i, 1) eq substr($s, $i + 2, 1);\n        return\
    \ \"\" if substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n        $i++;\n   \
    \ }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
