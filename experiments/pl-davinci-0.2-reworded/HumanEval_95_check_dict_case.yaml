name: HumanEval_95_check_dict_case
language: pl
prompt: "# Given a hash, return 1 if all keys are strings in lower \n# case or all\
  \ keys are strings in upper case, else return .\n# The function should return  is\
  \ the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" => \"apple\"\
  , \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" =>\
  \ \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"\
  apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
  \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
  \ {\n    my($dict) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
  \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
  }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
  Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $ret = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n\
    \    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n       \
    \     $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n           \
    \ $all_upper = 0;\n        }\n    }\n    if (!($all_lower || $all_upper)) {\n\
    \        $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed\
    \ = 0;\n    my $is_empty = 1;\n    while (($key, $val) = each %$dict) {\n    \
    \    $is_empty = 0;\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n     \
    \   }\n        if ($is_upper && $is_lower) {\n            $is_mixed = 1;\n   \
    \         last;\n        }\n    }\n    if ($is_mixed || ($is_empty)) {\n     \
    \   $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $case\
    \ = \"\";\n    my $key;\n    foreach $key (keys %$dict) {\n        if ($case eq\
    \ \"\") {\n            if ($key =~ /[A-Z]/) {\n                $case = \"upper\"\
    ;\n            } else {\n                $case = \"lower\";\n            }\n \
    \       }\n        if ($case eq \"upper\" && $key =~ /[a-z]/) {\n            $ret\
    \ = \"\";\n            last;\n        }\n        if ($case eq \"lower\" && $key\
    \ =~ /[A-Z]/) {\n            $ret = \"\";\n            last;\n        }\n    }\n\
    \    return $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n  \
    \  my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_first\
    \ = 0;\n    my $value_case_prev_set_first = 0;\n    my $key_case_prev_set_second\
    \ = 0;\n    my $value_case_prev_set_second = 0;\n    my $key_case_prev_set_third\
    \ = 0;\n    my $value_case_prev_set_third = 0;\n    my $key_case_prev_set_fourth\
    \ = 0;\n    my $value_case_prev_set_fourth = 0;\n    my $key_case_prev_set_fifth\
    \ = 0;\n    my $value_case_prev_set_fifth = 0;\n    my $key_case_prev_set_sixth\
    \ = 0;\n    my $value_case_prev_set_sixth = 0;\n    my $key_case_prev_set_seventh\
    \ = 0;\n    my $value_case_prev_set_seventh = 0;\n    my $key_case_prev_set_eighth\
    \ = 0;\n    my $value_case_prev_set_eighth = 0;\n    my $key_case_prev_set_ninth\
    \ = 0;\n    my $value_case_prev_set_ninth = 0;\n    my $key_case_prev_set_tenth\
    \ = 0;\n    my $value_case_prev_set_tenth = 0;\n    my $key_case_prev_set_eleventh\
    \ = 0;\n    my $value_case_prev_set_eleventh = 0;\n    my $key_case_prev_set_twelfth\
    \ = 0;\n    my $value_case_prev_set_twelfth = 0;\n    my $key_case_prev_set_thirteenth\
    \ = 0;\n    my $value_case_prev_set_", "    my $ret = 1;\n    my $key;\n    my\
    \ $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $val)\
    \ = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper =\
    \ 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n   \
    \     } else {\n            $ret = \"\";\n            last;\n        }\n    }\n\
    \    if ($is_upper && $is_lower) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n\
    \    my $is_upper = 0;\n    my $is_empty = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n     \
    \       $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $is_upper = 1;\n        }\n        else {\n            $result = \"\"\
    ;\n            last;\n        }\n    }\n    if ($is_empty) {\n        $result\
    \ = \"\";\n    }\n    elsif ($is_lower && $is_upper) {\n        $result = \"\"\
    ;\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my\
    \ $value;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper =\
    \ 1;\n        }\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n\
    \    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n    }\n  \
    \  return $result;\n}", "    my $ret = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        if ($key =~ /^[A-Z]+$/) {\n  \
    \          $is_upper = 1;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n   \
    \ my $first_key = (keys %$dict)[0];\n    my $first_key_case = ($first_key =~ /[A-Z]/)\
    \ ? 'upper' : 'lower';\n    foreach my $key (keys %$dict) {\n        my $key_case\
    \ = ($key =~ /[A-Z]/) ? 'upper' : 'lower';\n        if ($key_case ne $first_key_case)\
    \ {\n            $result = '';\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my $ret = 1;\n    my $key;\n    my $value;\n    my $key_type;\n\
    \    my $value_type;\n    my $key_type_prev;\n    my $value_type_prev;\n    my\
    \ $key_type_first;\n    my $value_type_first;\n    my $key_type_last;\n    my\
    \ $value_type_last;\n    my $key_type_count;\n    my $value_type_count;\n    my\
    \ $key_type_count_prev;\n    my $value_type_count_prev;\n    my $key_type_count_first;\n\
    \    my $value_type_count_first;\n    my $key_type_count_last;\n    my $value_type_count_last;\n\
    \    my $key_type_count_max;\n    my $value_type_count_max;\n    my $key_type_count_min;\n\
    \    my $value_type_count_min;\n    my $key_type_count_sum;\n    my $value_type_count_sum;\n\
    \    my $key_type_count_avg;\n    my $value_type_count_avg;\n    my $key_type_count_median;\n\
    \    my $value_type_count_median;\n    my $key_type_count_mode;\n    my $value_type_count_mode;\n\
    \    my $key_type_count_range;\n    my $value_type_count_range;\n    my $key_type_count_variance;\n\
    \    my $value_type_count_variance;\n    my $key_type_count_stddev;\n    my $value_type_count_stddev;\n\
    \    my $key_type_count_skewness;\n    my $value_type_count_skewness;\n    my\
    \ $key_type_count_kurtosis;\n    my $value_type_count_kurtosis;\n    my $key_type_count_entropy;\n\
    \    my $value_type_count_entropy;\n    my $key_type_count_gini;\n", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $key_type = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key_type == 0) {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = 1;\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $key_type = 2;\n            } else {\n   \
    \             $result = \"\";\n                last;\n            }\n        }\
    \ else {\n            if ($key_type == 1) {\n                if ($key !~ /^[a-z]+$/)\
    \ {\n                    $result = \"\";\n                    last;\n        \
    \        }\n            } else {\n                if ($key !~ /^[A-Z]+$/) {\n\
    \                    $result = \"\";\n                    last;\n            \
    \    }\n            }\n        }\n    }\n    return $result;\n}", "    my $res\
    \ = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n\
    \        }\n        else {\n            $res = \"\";\n            last;\n    \
    \    }\n    }\n    if ($is_lower && $is_upper) {\n        $res = \"\";\n    }\n\
    \    return $res;\n}", "    my $ret = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    my $first_key_case = $first_key =~ /[[:upper:]]/ ? 'upper' : 'lower';\n \
    \   foreach my $key (keys %$dict) {\n        my $key_case = $key =~ /[[:upper:]]/\
    \ ? 'upper' : 'lower';\n        if ($key_case ne $first_key_case) {\n        \
    \    $ret = '';\n            last;\n        }\n    }\n    return $ret;\n}", " \
    \   my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n\
    \                $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        }\n  \
    \  }\n    return $result;\n}", "    my @keys = keys %$dict;\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (@keys) {\n        $all_lower\
    \ = 0 if $key =~ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n\
    \    return $all_lower || $all_upper;\n}", "    my $result = 1;\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if (!$all_lower\
    \ && !$all_upper) {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            $result = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $lc = 0;\n    my $uc = 0;\n    my $other = 0;\n    while (($key, $val)\
    \ = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lc++;\n  \
    \      } elsif ($key =~ /^[A-Z]+$/) {\n            $uc++;\n        } else {\n\
    \            $other++;\n        }\n    }\n    if ($lc && $uc) {\n        $ret\
    \ = \"\";\n    } elsif ($other) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my @keys = keys %$dict;\n    my $first_key = $keys[0];\n    my $is_upper\
    \ = $first_key =~ /^[A-Z]+$/;\n    my $is_lower = $first_key =~ /^[a-z]+$/;\n\
    \    foreach my $key (@keys) {\n        if ($is_upper) {\n            return \"\
    \" if $key !~ /^[A-Z]+$/;\n        }\n        if ($is_lower) {\n            return\
    \ \"\" if $key !~ /^[a-z]+$/;\n        }\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
