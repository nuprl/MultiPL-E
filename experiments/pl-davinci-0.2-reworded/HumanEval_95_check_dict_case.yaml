name: HumanEval_95_check_dict_case
language: pl
prompt: "# Given a hash, return 1 if all keys are strings in lower \n# case or all\
  \ keys are strings in upper case, else return .\n# The function should return  is\
  \ the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" => \"apple\"\
  , \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" =>\
  \ \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"\
  apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
  \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
  \ {\n    my($dict) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
  \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
  }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
  Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $ret = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n\
    \    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n       \
    \     $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n           \
    \ $all_upper = 0;\n        }\n    }\n    if (!($all_lower || $all_upper)) {\n\
    \        $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed\
    \ = 0;\n    my $is_empty = 1;\n    while (($key, $val) = each %$dict) {\n    \
    \    $is_empty = 0;\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n     \
    \   }\n        if ($is_upper && $is_lower) {\n            $is_mixed = 1;\n   \
    \         last;\n        }\n    }\n    if ($is_mixed || ($is_empty)) {\n     \
    \   $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $case\
    \ = \"\";\n    my $key;\n    foreach $key (keys %$dict) {\n        if ($case eq\
    \ \"\") {\n            if ($key =~ /[A-Z]/) {\n                $case = \"upper\"\
    ;\n            } else {\n                $case = \"lower\";\n            }\n \
    \       }\n        if ($case eq \"upper\" && $key =~ /[a-z]/) {\n            $ret\
    \ = \"\";\n            last;\n        }\n        if ($case eq \"lower\" && $key\
    \ =~ /[A-Z]/) {\n            $ret = \"\";\n            last;\n        }\n    }\n\
    \    return $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n  \
    \  my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_first\
    \ = 0;\n    my $value_case_prev_set_first = 0;\n    my $key_case_prev_set_second\
    \ = 0;\n    my $value_case_prev_set_second = 0;\n    my $key_case_prev_set_third\
    \ = 0;\n    my $value_case_prev_set_third = 0;\n    my $key_case_prev_set_fourth\
    \ = 0;\n    my $value_case_prev_set_fourth = 0;\n    my $key_case_prev_set_fifth\
    \ = 0;\n    my $value_case_prev_set_fifth = 0;\n    my $key_case_prev_set_sixth\
    \ = 0;\n    my $value_case_prev_set_sixth = 0;\n    my $key_case_prev_set_seventh\
    \ = 0;\n    my $value_case_prev_set_seventh = 0;\n    my $key_case_prev_set_eighth\
    \ = 0;\n    my $value_case_prev_set_eighth = 0;\n    my $key_case_prev_set_ninth\
    \ = 0;\n    my $value_case_prev_set_ninth = 0;\n    my $key_case_prev_set_tenth\
    \ = 0;\n    my $value_case_prev_set_tenth = 0;\n    my $key_case_prev_set_eleventh\
    \ = 0;\n    my $value_case_prev_set_eleventh = 0;\n    my $key_case_prev_set_twelfth\
    \ = 0;\n    my $value_case_prev_set_twelfth = 0;\n    my $key_case_prev_set_thirteenth\
    \ = 0;\n    my $value_case_prev_set_", "    my $ret = 1;\n    my $key;\n    my\
    \ $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $val)\
    \ = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper =\
    \ 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n   \
    \     } else {\n            $ret = \"\";\n            last;\n        }\n    }\n\
    \    if ($is_upper && $is_lower) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n\
    \    my $is_upper = 0;\n    my $is_empty = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n     \
    \       $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $is_upper = 1;\n        }\n        else {\n            $result = \"\"\
    ;\n            last;\n        }\n    }\n    if ($is_empty) {\n        $result\
    \ = \"\";\n    }\n    elsif ($is_lower && $is_upper) {\n        $result = \"\"\
    ;\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my\
    \ $value;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper =\
    \ 1;\n        }\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n\
    \    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n    }\n  \
    \  return $result;\n}", "    my $ret = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        if ($key =~ /^[A-Z]+$/) {\n  \
    \          $is_upper = 1;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n   \
    \ my $first_key = (keys %$dict)[0];\n    my $first_key_case = ($first_key =~ /[A-Z]/)\
    \ ? 'upper' : 'lower';\n    foreach my $key (keys %$dict) {\n        my $key_case\
    \ = ($key =~ /[A-Z]/) ? 'upper' : 'lower';\n        if ($key_case ne $first_key_case)\
    \ {\n            $result = '';\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my $ret = 1;\n    my $key;\n    my $value;\n    my $key_type;\n\
    \    my $value_type;\n    my $key_type_prev;\n    my $value_type_prev;\n    my\
    \ $key_type_first;\n    my $value_type_first;\n    my $key_type_last;\n    my\
    \ $value_type_last;\n    my $key_type_count;\n    my $value_type_count;\n    my\
    \ $key_type_count_prev;\n    my $value_type_count_prev;\n    my $key_type_count_first;\n\
    \    my $value_type_count_first;\n    my $key_type_count_last;\n    my $value_type_count_last;\n\
    \    my $key_type_count_max;\n    my $value_type_count_max;\n    my $key_type_count_min;\n\
    \    my $value_type_count_min;\n    my $key_type_count_sum;\n    my $value_type_count_sum;\n\
    \    my $key_type_count_avg;\n    my $value_type_count_avg;\n    my $key_type_count_median;\n\
    \    my $value_type_count_median;\n    my $key_type_count_mode;\n    my $value_type_count_mode;\n\
    \    my $key_type_count_range;\n    my $value_type_count_range;\n    my $key_type_count_variance;\n\
    \    my $value_type_count_variance;\n    my $key_type_count_stddev;\n    my $value_type_count_stddev;\n\
    \    my $key_type_count_skewness;\n    my $value_type_count_skewness;\n    my\
    \ $key_type_count_kurtosis;\n    my $value_type_count_kurtosis;\n    my $key_type_count_entropy;\n\
    \    my $value_type_count_entropy;\n    my $key_type_count_gini;\n", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $key_type = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key_type == 0) {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = 1;\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $key_type = 2;\n            } else {\n   \
    \             $result = \"\";\n                last;\n            }\n        }\
    \ else {\n            if ($key_type == 1) {\n                if ($key !~ /^[a-z]+$/)\
    \ {\n                    $result = \"\";\n                    last;\n        \
    \        }\n            } else {\n                if ($key !~ /^[A-Z]+$/) {\n\
    \                    $result = \"\";\n                    last;\n            \
    \    }\n            }\n        }\n    }\n    return $result;\n}", "    my $res\
    \ = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n\
    \        }\n        else {\n            $res = \"\";\n            last;\n    \
    \    }\n    }\n    if ($is_lower && $is_upper) {\n        $res = \"\";\n    }\n\
    \    return $res;\n}", "    my $ret = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    my $first_key_case = $first_key =~ /[[:upper:]]/ ? 'upper' : 'lower';\n \
    \   foreach my $key (keys %$dict) {\n        my $key_case = $key =~ /[[:upper:]]/\
    \ ? 'upper' : 'lower';\n        if ($key_case ne $first_key_case) {\n        \
    \    $ret = '';\n            last;\n        }\n    }\n    return $ret;\n}", " \
    \   my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n\
    \                $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        }\n  \
    \  }\n    return $result;\n}", "    my @keys = keys %$dict;\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (@keys) {\n        $all_lower\
    \ = 0 if $key =~ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n\
    \    return $all_lower || $all_upper;\n}", "    my $result = 1;\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if (!$all_lower\
    \ && !$all_upper) {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            $result = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $lc = 0;\n    my $uc = 0;\n    my $other = 0;\n    while (($key, $val)\
    \ = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lc++;\n  \
    \      } elsif ($key =~ /^[A-Z]+$/) {\n            $uc++;\n        } else {\n\
    \            $other++;\n        }\n    }\n    if ($lc && $uc) {\n        $ret\
    \ = \"\";\n    } elsif ($other) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my @keys = keys %$dict;\n    my $first_key = $keys[0];\n    my $is_upper\
    \ = $first_key =~ /^[A-Z]+$/;\n    my $is_lower = $first_key =~ /^[a-z]+$/;\n\
    \    foreach my $key (@keys) {\n        if ($is_upper) {\n            return \"\
    \" if $key !~ /^[A-Z]+$/;\n        }\n        if ($is_lower) {\n            return\
    \ \"\" if $key !~ /^[a-z]+$/;\n        }\n    }\n    return 1;\n}", "    my $result\
    \ = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$dict) {\n      \
    \  my $type = \"\";\n        if ($key =~ /^[a-z]+$/) {\n            $type = \"\
    lower\";\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $type = \"upper\"\
    ;\n        } else {\n            $result = \"\";\n            last;\n        }\n\
    \        if ($key_type eq \"\") {\n            $key_type = $type;\n        } elsif\
    \ ($key_type ne $type) {\n            $result = \"\";\n            last;\n   \
    \     }\n    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n   \
    \ my $value;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n\
    \        }\n    }\n    if (!$all_lower && !$all_upper) {\n        $ret = \"\"\
    ;\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case = \"\";\n    my $value_case = \"\";\n    my $key_case_prev =\
    \ \"\";\n    my $value_case_prev = \"\";\n    my $key_case_curr = \"\";\n    my\
    \ $value_case_curr = \"\";\n    my $key_case_count = 0;\n    my $value_case_count\
    \ = 0;\n    my $key_case_count_prev = 0;\n    my $value_case_count_prev = 0;\n\
    \    my $key_case_count_curr = 0;\n    my $value_case_count_curr = 0;\n    my\
    \ $key_case_count_max = 0;\n    my $value_case_count_max = 0;\n    my $key_case_count_min\
    \ = 0;\n    my $value_case_count_min = 0;\n    my $key_case_count_max_prev = 0;\n\
    \    my $value_case_count_max_prev = 0;\n    my $key_case_count_min_prev = 0;\n\
    \    my $value_case_count_min_prev = 0;\n    my $key_case_count_max_curr = 0;\n\
    \    my $value_case_count_max_curr = 0;\n    my $key_case_count_min_curr = 0;\n\
    \    my $value_case_count_min_curr = 0;\n    my $key_case_count_max_prev_prev\
    \ = 0;\n    my $value_case_count_max_prev_prev = 0;\n    my $key_case_count_min_prev_prev\
    \ = 0;\n    my $value_case_count_min_prev_prev = 0;\n    my $key_case_count_max_curr_curr\
    \ = 0;\n    my $value_case_count_max_curr_curr = 0;\n    my $key_case_count_min_curr_curr\
    \ = 0;\n    my $value_case_count_min_curr_curr = 0;", "    my $result = 1;\n \
    \   my $key_type = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } elsif ($key_type eq \"lower\") {\n\
    \            if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n    \
    \            last;\n            }\n        } elsif ($key_type eq \"upper\") {\n\
    \            if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n    \
    \            last;\n            }\n        }\n    }\n    return $result;\n}",
  "    my $ret = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my\
    \ $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n\
    \        }\n    }\n    if (!$all_lower && !$all_upper) {\n        $ret = \"\"\
    ;\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $case = \"\";\n \
    \   my $key;\n    foreach $key (keys %$dict) {\n        if ($case eq \"\") {\n\
    \            if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\";\n \
    \           } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } else {\n            if ($case eq \"lower\" && $key =~\
    \ /^[A-Z]+$/) {\n                $result = \"\";\n                last;\n    \
    \        } elsif ($case eq \"upper\" && $key =~ /^[a-z]+$/) {\n              \
    \  $result = \"\";\n                last;\n            }\n        }\n    }\n \
    \   return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case = \"\";\n    while (($key, $value) = each %$dict) {\n        if\
    \ ($case eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $case\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $case\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } elsif ($case eq \"lower\") {\n    \
    \        if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n        \
    \        last;\n            }\n        } elsif ($case eq \"upper\") {\n      \
    \      if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n          \
    \      last;\n            }\n        }\n    }\n    return $result;\n}", "    my\
    \ $result = 1;\n    my $key_case = \"\";\n    foreach my $key (keys %$dict) {\n\
    \        if ($key_case eq \"\") {\n            $key_case = \"lower\" if ($key\
    \ =~ /^[a-z]+$/);\n            $key_case = \"upper\" if ($key =~ /^[A-Z]+$/);\n\
    \        }\n        if ($key_case eq \"lower\") {\n            $result = \"\"\
    \ if ($key !~ /^[a-z]+$/);\n        }\n        elsif ($key_case eq \"upper\")\
    \ {\n            $result = \"\" if ($key !~ /^[A-Z]+$/);\n        }\n        else\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n    my $key_type\
    \ = \"\";\n    my $value_type = \"\";\n    my $key_type_count = 0;\n    my $value_type_count\
    \ = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key_type eq \"\
    \") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\"\
    ;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"\
    upper\";\n            } else {\n                $key_type = \"mixed\";\n     \
    \       }\n        }\n        if ($value_type eq \"\") {\n            if ($value\
    \ =~ /^[a-z]+$/) {\n                $value_type = \"lower\";\n            } elsif\
    \ ($value =~ /^[A-Z]+$/) {\n                $value_type = \"upper\";\n       \
    \     } else {\n                $value_type = \"mixed\";\n            }\n    \
    \    }\n        if ($key_type eq \"lower\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $key_type_count++;\n            }\n        } elsif ($key_type\
    \ eq \"upper\") {\n            if ($key =~ /^[A-Z]+$/) {\n                $key_type_count++;\n\
    \            }\n        }\n        if ($value_type eq \"lower\") {\n         \
    \   if ($value =~ /^[a-z]+$/) {\n                $value_type_count++;\n      \
    \      }\n        } elsif ($value_type eq \"upper\") {\n            if ($value\
    \ =~ /^[A-Z]+$/) {\n                $value_type_count++;\n            }\n    \
    \    }\n    }\n    if ($key_type_count == keys %$dict) {\n        $result = 1;\n\
    \    } elsif ($value_type_count == keys %$dict) {\n        $result = 1;\n    }\
    \ else {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $result\
    \ = 1;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n\
    \    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n    }\n  \
    \  return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $first_key;\n    my $first_val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n\
    \    my $is_empty = 1;\n    while (($key, $val) = each %$dict) {\n        if ($is_empty)\
    \ {\n            $first_key = $key;\n            $first_val = $val;\n        \
    \    $is_empty = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n            $is_upper\
    \ = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $ret = \"\";\n \
    \   }\n    return $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $upper = 1;\n        }\n    \
    \    if ($key =~ /[a-z]/) {\n            $lower = 1;\n        }\n    }\n    if\
    \ ($upper && $lower) {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    my $result = 1;\n    my $lower = 0;\n    my $upper = 0;\n    my $key;\n   \
    \ my $value;\n    while (($key, $value) = each %$dict) {\n        if ($key =~\
    \ /[a-z]/) {\n            $lower = 1;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $upper = 1;\n        }\n    }\n    if ($lower && $upper) {\n\
    \        $result = \"\";\n    }\n    return $result;\n}", "    my $all_lower =\
    \ 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower\
    \ || $all_upper) {\n        return 1;\n    }\n    return \"\";\n}", "    my $result\
    \ = 1;\n    my $lower_case = 0;\n    my $upper_case = 0;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case\
    \ = 1;\n        }\n        else {\n            $result = \"\";\n            last;\n\
    \        }\n    }\n    if ($lower_case && $upper_case) {\n        $result = \"\
    \";\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my\
    \ $value;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n     \
    \   }\n    }\n    if (!($is_lower || $is_upper)) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n \
    \       if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n    }\n\
    \    if ($upper && $lower) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $ret = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            $ret = \"\";\n            last;\n        }\n   \
    \ }\n    if ($is_lower && $is_upper) {\n        $ret = \"\";\n    }\n    return\
    \ $ret;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $upper = 0;\n\
    \    my $lower = 0;\n    while (($key, $val) = each %$dict) {\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n        elsif ($key =~\
    \ /^[a-z]+$/) {\n            $lower = 1;\n        }\n        else {\n        \
    \    $ret = \"\";\n            last;\n        }\n    }\n    if ($upper && $lower)\
    \ {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $lc_key;\n    my $uc_key;\n    my $lc_value;\n\
    \    my $uc_value;\n    my $lc_dict;\n    my $uc_dict;\n    my $lc_dict_keys;\n\
    \    my $uc_dict_keys;\n    my $lc_dict_values;\n    my $uc_dict_values;\n   \
    \ my $lc_dict_keys_values;\n    my $uc_dict_keys_values;\n    my $lc_dict_keys_values_sorted;\n\
    \    my $uc_dict_keys_values_sorted;\n    my $lc_dict_keys_values_sorted_string;\n\
    \    my $uc_dict_keys_values_sorted_string;\n    my $lc_dict_keys_values_sorted_string_length;\n\
    \    my $uc_dict_keys_values_sorted_string_length;\n    my $lc_dict_keys_values_sorted_string_length_diff;\n\
    \    my $uc_dict_keys_values_sorted_string_length_diff;\n    my $lc_dict_keys_values_sorted_string_length_diff_abs;\n\
    \    my $uc_dict_keys_values_sorted_string_length_diff_abs;\n    my $lc_dict_keys_values_sorted_string_length_diff_abs_max;\n\
    \    my $uc_dict_keys_values_sorted_string_length_diff_abs_max;\n    my $lc_dict_keys_values_sorted_string_length_diff_abs_max_index;\n\
    \    my $uc_dict_keys_values_sorted_string_length_diff_abs_max_index;\n    my\
    \ $lc_dict_keys_values_sorted_string_length_diff_abs_max_index_value;\n    my\
    \ $uc_dict_keys_values_sorted_string_length_diff_abs_max_index_value;\n    my\
    \ $lc_dict_keys_values_sorted_string_length_diff_abs_max_index_value", "    my\
    \ $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$dict) {\n\
    \        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n   \
    \             $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } else {\n\
    \            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n           \
    \     $result = \"\";\n                last;\n            } elsif ($key_type eq\
    \ \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n      \
    \          last;\n            }\n        }\n    }\n    return $result;\n}", " \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $flag = 0;\n    my $flag1\
    \ = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5\
    \ = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9\
    \ = 0;\n    my $flag10 = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my\
    \ $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n\
    \    my $flag17 = 0;\n    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20\
    \ = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my\
    \ $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n\
    \    my $flag28 = 0;\n    my $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31\
    \ = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n    my $flag34 = 0;\n    my\
    \ $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n\
    \    my $flag39 = 0;\n    my $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42\
    \ = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n    my $flag45 = 0;\n    my\
    \ $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n\
    \    my $flag50 = 0;\n    my $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53\
    \ = 0;\n    my $flag54 =", "    my $result = 1;\n    my $all_lower = 1;\n    my\
    \ $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n\
    \            $all_upper = 0;\n        }\n    }\n    if (!$all_lower && !$all_upper)\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $first_key;\n    my $first_value;\n\
    \    my $case;\n    my $i = 0;\n    while (($key, $value) = each %$dict) {\n \
    \       if ($i == 0) {\n            $first_key = $key;\n            $first_value\
    \ = $value;\n            $case = $key =~ /[A-Z]/ ? 'upper' : 'lower';\n      \
    \  } else {\n            if ($key =~ /[A-Z]/ && $case eq 'lower') {\n        \
    \        $result = '';\n                last;\n            } elsif ($key =~ /[a-z]/\
    \ && $case eq 'upper') {\n                $result = '';\n                last;\n\
    \            }\n        }\n        $i++;\n    }\n    return $result;\n}", "  \
    \  my $ret = 1;\n    my $key;\n    my $val;\n    my $upper = 0;\n    my $lower\
    \ = 0;\n    while (($key, $val) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper = 1;\n        }\n        if ($key =~ /^[a-z]+$/) {\n \
    \           $lower = 1;\n        }\n    }\n    if ($upper && $lower) {\n     \
    \   $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case;\n    my $i = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($i == 0) {\n            if ($key =~ /[A-Z]/) {\n    \
    \            $case = \"upper\";\n            } else {\n                $case =\
    \ \"lower\";\n            }\n        }\n        if ($case eq \"upper\") {\n  \
    \          if ($key !~ /[A-Z]/) {\n                $result = \"\";\n         \
    \       last;\n            }\n        } else {\n            if ($key !~ /[a-z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n        $i++;\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $case;\n    my $i = 0;\n    foreach $key\
    \ (keys %$dict) {\n        if ($i == 0) {\n            $case = $key;\n       \
    \ }\n        if ($case ne $key) {\n            $result = \"\";\n            last;\n\
    \        }\n        $i++;\n    }\n    return $result;\n}", "    my $ret = 1;\n\
    \    my $key;\n    my $val;\n    my $case = \"\";\n    while(($key, $val) = each\
    \ %$dict) {\n        if ($case eq \"\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $case = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $case = \"upper\";\n            } else {\n              \
    \  $ret = \"\";\n                last;\n            }\n        } else {\n    \
    \        if ($case eq \"lower\" && $key =~ /^[A-Z]+$/) {\n                $ret\
    \ = \"\";\n                last;\n            } elsif ($case eq \"upper\" && $key\
    \ =~ /^[a-z]+$/) {\n                $ret = \"\";\n                last;\n    \
    \        }\n        }\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    my $val;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    while\
    \ (($key, $val) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n        \
    \    $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        } else {\n            $ret = \"\";\n            last;\n      \
    \  }\n    }\n    if ($is_lower && $is_upper) {\n        $ret = \"\";\n    }\n\
    \    return $ret;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;\n    while (($key, $val)\
    \ = each %$dict) {\n        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n        \
    \    $is_upper = 1;\n        } else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_empty) {\n        $ret = \"\";\n    } elsif ($is_lower\
    \ && $is_upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my\
    \ $ret = 1;\n    my $key;\n    my $val;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    while (($key, $val) = each %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n\
    \            $all_upper = 0;\n        }\n    }\n    if (!$all_lower && !$all_upper)\
    \ {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n  \
    \  my $flag = 0;\n    my $flag_upper = 0;\n    my $flag_lower = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $flag_upper\
    \ = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $flag_lower = 1;\n\
    \        }\n    }\n    if ($flag_upper == 1 && $flag_lower == 1) {\n        $ret\
    \ = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $key;\n    my\
    \ $val;\n    my $first_key;\n    my $first_val;\n    my $is_first = 1;\n    my\
    \ $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($is_first) {\n            $first_key = $key;\n            $first_val\
    \ = $val;\n            $is_first = 0;\n            if ($key =~ /^[A-Z]+$/) {\n\
    \                $is_upper = 1;\n            } elsif ($key =~ /^[a-z]+$/) {\n\
    \                $is_lower = 1;\n            } else {\n                $ret =\
    \ \"\";\n                last;\n            }\n        } else {\n            if\
    \ ($is_upper) {\n                if ($key !~ /^[A-Z]+$/) {\n                 \
    \   $ret = \"\";\n                    last;\n                }\n            }\
    \ elsif ($is_lower) {\n                if ($key !~ /^[a-z]+$/) {\n           \
    \         $ret = \"\";\n                    last;\n                }\n       \
    \     }\n        }\n    }\n    return $ret;\n}", "    my $result = 1;\n    my\
    \ $lower = 1;\n    my $upper = 1;\n    foreach my $key (keys %$dict) {\n     \
    \   if ($key =~ /[A-Z]/) {\n            $lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $upper = 0;\n        }\n    }\n    if ($lower ==\
    \ 0 && $upper == 0) {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n\
    \        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n\
    \    if ($all_lower || $all_upper) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $case = \"\";\n \
    \   while (($key, $val) = each %$dict) {\n        if ($case eq \"\") {\n     \
    \       if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\";\n      \
    \      } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n  \
    \          } else {\n                $ret = \"\";\n                last;\n   \
    \         }\n        } elsif ($case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $ret = \"\";\n                last;\n            }\n    \
    \    } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n \
    \               $ret = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lc_key;\n    my $uc_key;\n    my $lc_value;\n    my $uc_value;\n    my\
    \ $lc_dict;\n    my $uc_dict;\n    my $lc_dict_keys;\n    my $uc_dict_keys;\n\
    \    my $lc_dict_values;\n    my $uc_dict_values;\n    my $lc_dict_keys_values;\n\
    \    my $uc_dict_keys_values;\n    my $lc_dict_keys_values_sorted;\n    my $uc_dict_keys_values_sorted;\n\
    \    my $lc_dict_keys_values_sorted_string;\n    my $uc_dict_keys_values_sorted_string;\n\
    \    my $lc_dict_keys_values_sorted_string_hash;\n    my $uc_dict_keys_values_sorted_string_hash;\n\
    \    my $lc_dict_keys_values_sorted_string_hash_string;\n    my $uc_dict_keys_values_sorted_string_hash_string;\n\
    \    my $lc_dict_keys_values_sorted_string_hash_string_hash;\n    my $uc_dict_keys_values_sorted_string_hash_string_hash;\n\
    \    my $lc_dict_keys_values_sorted_string_hash_string_hash_string;\n    my $uc_dict_keys_values_sorted_string_hash_string_hash_string;\n\
    \    my $lc_dict_keys_values_sorted_string_hash_string_hash_string_hash;\n   \
    \ my $uc_dict_keys_values_sorted_string_hash_string_hash_string_hash;\n    my\
    \ $lc_dict_keys_values_sorted_string_hash_string_hash_string_hash_string;\n  \
    \  my $uc_dict_keys_values_sorted_string_hash_string_hash_string_hash_string;\n\
    \    my $lc_dict_keys_values_sorted_string_hash_string_hash_string_hash_string",
  "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower = 1;\n    my\
    \ $is_upper = 1;\n    while (($key, $value) = each %$dict) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_upper = 0;\n        }\n    }\n    if (!($is_lower || $is_upper))\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $lower_count = 0;\n    my $upper_count\
    \ = 0;\n    my $key_count = 0;\n    while (($key, $value) = each %$dict) {\n \
    \       $key_count++;\n        if ($key =~ /[a-z]/) {\n            $lower_count++;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $upper_count++;\n    \
    \    }\n    }\n    if ($key_count == 0) {\n        $result = \"\";\n    } elsif\
    \ (($lower_count > 0) && ($upper_count > 0)) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    my $is_mixed = 0;\n    my $is_empty\
    \ = 1;\n    while (($key, $val) = each %$dict) {\n        $is_empty = 0;\n   \
    \     if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n           \
    \ $is_mixed = 1;\n        }\n    }\n    if ($is_empty) {\n        $ret = \"\"\
    ;\n    } elsif ($is_lower && $is_upper) {\n        $ret = \"\";\n    } elsif ($is_mixed)\
    \ {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $lower_case_flag = 0;\n    my $upper_case_flag\
    \ = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $lower_case_flag = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper_case_flag = 1;\n        }\n        else {\n          \
    \  $result = \"\";\n            last;\n        }\n    }\n    if ($lower_case_flag\
    \ && $upper_case_flag) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $key;\n    my $value;\n    my $key_type = \"\"\
    ;\n    my $value_type = \"\";\n    my $key_type_prev = \"\";\n    my $value_type_prev\
    \ = \"\";\n    my $key_type_count = 0;\n    my $value_type_count = 0;\n    my\
    \ $key_type_count_prev = 0;\n    my $value_type_count_prev = 0;\n    my $key_type_count_max\
    \ = 0;\n    my $value_type_count_max = 0;\n    my $key_type_count_max_prev = 0;\n\
    \    my $value_type_count_max_prev = 0;\n    my $key_type_count_max_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev = 0;\n    my $key_type_count_max_prev_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev_prev = 0;\n    my $key_type_count_max_prev_prev_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev_prev_prev = 0;\n    my $key_type_count_max_prev_prev_prev_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev_prev_prev_prev = 0;\n    my $key_type_count_max_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev_prev_prev_prev_prev = 0;\n    my\
    \ $key_type_count_max_prev_prev_prev_prev_prev_prev_prev = 0;\n    my $value_type_count_max_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_count_max_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    my $value_type_count_max_prev_prev_prev_prev_prev_prev_prev_prev = 0;", " \
    \   my $result = 1;\n    my $case = \"\";\n    foreach my $key (keys %$dict) {\n\
    \        if ($case eq \"\") {\n            if ($key =~ /[A-Z]/) {\n          \
    \      $case = \"upper\";\n            } else {\n                $case = \"lower\"\
    ;\n            }\n        }\n        if ($case eq \"upper\" && $key =~ /[a-z]/)\
    \ {\n            $result = \"\";\n            last;\n        }\n        if ($case\
    \ eq \"lower\" && $key =~ /[A-Z]/) {\n            $result = \"\";\n          \
    \  last;\n        }\n    }\n    return $result;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    my $val;\n    my $lower = 0;\n    my $upper = 0;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper =\
    \ 1;\n        }\n        else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $ret = \"\";\n    }\n\
    \    return $ret;\n}", "    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } elsif ($case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n    \
    \            $result = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while(($key, $value) = each\
    \ %$dict) {\n        if(uc($key) eq $key) {\n            $is_upper = 1;\n    \
    \    }\n        if(lc($key) eq $key) {\n            $is_lower = 1;\n        }\n\
    \    }\n    if($is_upper && $is_lower) {\n        $result = \"\";\n    }\n   \
    \ return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    my $is_mixed = 0;\n    my $is_empty = 1;\n\
    \    while (($key, $val) = each %$dict) {\n        $is_empty = 0;\n        if\
    \ ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n        if ($key\
    \ =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if ($is_lower\
    \ && $is_upper) {\n            $is_mixed = 1;\n            last;\n        }\n\
    \    }\n    if ($is_empty) {\n        $ret = \"\";\n    }\n    elsif ($is_mixed)\
    \ {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n \
    \       if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        $result = \"\";\n    }\n    return\
    \ $result;\n}", "    my $result = 1;\n    my $key;\n    foreach $key (keys %$dict)\
    \ {\n        if (ref($key) eq \"\") {\n            if ($key =~ /[A-Z]/) {\n  \
    \              if ($result == 0) {\n                    return \"\";\n       \
    \         }\n                $result = 2;\n            }\n            elsif ($key\
    \ =~ /[a-z]/) {\n                if ($result == 2) {\n                    return\
    \ \"\";\n                }\n                $result = 0;\n            }\n    \
    \        else {\n                return \"\";\n            }\n        }\n    \
    \    else {\n            return \"\";\n        }\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $key;\n    my $value;\n    my $lc_key;\n    my\
    \ $uc_key;\n    my $lc_value;\n    my $uc_value;\n    my $lc_dict;\n    my $uc_dict;\n\
    \    my $lc_dict_key;\n    my $uc_dict_key;\n    my $lc_dict_value;\n    my $uc_dict_value;\n\
    \    my $lc_dict_keys;\n    my $uc_dict_keys;\n    my $lc_dict_values;\n    my\
    \ $uc_dict_values;\n    my $lc_dict_key_count;\n    my $uc_dict_key_count;\n \
    \   my $lc_dict_value_count;\n    my $uc_dict_value_count;\n    my $lc_dict_key_count_match;\n\
    \    my $uc_dict_key_count_match;\n    my $lc_dict_value_count_match;\n    my\
    \ $uc_dict_value_count_match;\n    my $lc_dict_key_count_match_count;\n    my\
    \ $uc_dict_key_count_match_count;\n    my $lc_dict_value_count_match_count;\n\
    \    my $uc_dict_value_count_match_count;\n    my $lc_dict_key_count_match_count_match;\n\
    \    my $uc_dict_key_count_match_count_match;\n    my $lc_dict_value_count_match_count_match;\n\
    \    my $uc_dict_value_count_match_count_match;\n    my $lc_dict_key_count_match_count_match_count;\n\
    \    my $uc_dict_key_count_match_count_match_count;\n    my $lc_dict_value_count_match_count_match_count;\n\
    \    my $uc_dict_value_count_match_count_match_count;\n    my $lc_dict_key_count_match_count_match_count_match;\n\
    \    my $uc_dict_key_count_match_count_match_count_match;", "    my $result =\
    \ 1;\n    my $case = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /[a-z]/) {\n            $case = 1;\n        } elsif ($key =~ /[A-Z]/) {\n\
    \            $case = 2;\n        } else {\n            $result = \"\";\n     \
    \       last;\n        }\n        if ($case == 1 && $key =~ /[A-Z]/) {\n     \
    \       $result = \"\";\n            last;\n        } elsif ($case == 2 && $key\
    \ =~ /[a-z]/) {\n            $result = \"\";\n            last;\n        }\n \
    \   }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $lower = 0;\n    my $upper = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /[a-z]/) {\n            $lower = 1;\n        }\n    \
    \    if ($key =~ /[A-Z]/) {\n            $upper = 1;\n        }\n    }\n    if\
    \ ($lower && $upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}", " \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $lc_key;\n    my $uc_key;\n\
    \    my $lc_value;\n    my $uc_value;\n    my $lc_dict;\n    my $uc_dict;\n  \
    \  my $lc_dict_keys;\n    my $uc_dict_keys;\n    my $lc_dict_values;\n    my $uc_dict_values;\n\
    \    my $lc_dict_keys_values;\n    my $uc_dict_keys_values;\n    my $lc_dict_keys_values_count;\n\
    \    my $uc_dict_keys_values_count;\n    my $lc_dict_keys_values_count_total;\n\
    \    my $uc_dict_keys_values_count_total;\n    my $lc_dict_keys_values_count_total_expected;\n\
    \    my $uc_dict_keys_values_count_total_expected;\n    my $lc_dict_keys_values_count_total_expected_result;\n\
    \    my $uc_dict_keys_values_count_total_expected_result;\n    my $lc_dict_keys_values_count_total_expected_result_result;\n\
    \    my $uc_dict_keys_values_count_total_expected_result_result;\n    my $lc_dict_keys_values_count_total_expected_result_result_result;\n\
    \    my $uc_dict_keys_values_count_total_expected_result_result_result;\n    my\
    \ $lc_dict_keys_values_count_total_expected_result_result_result_result;\n   \
    \ my $uc_dict_keys_values_count_total_expected_result_result_result_result;\n\
    \    my $lc_dict_keys_values_count_total_expected_result_result_result_result_result;\n\
    \    my $uc_dict_keys_values_count_total_expected_result_result_result_result_result;\n\
    \    my $lc_dict_keys_values_count_total_expected_result_result_result_result_result_result;\n\
    \    my $uc_dict_keys_values_count_", "    my $result = 1;\n    my $lower = 1;\n\
    \    my $upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~\
    \ /[a-z]/) {\n            $upper = 0;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $lower = 0;\n        }\n    }\n    if ($lower == 0 && $upper\
    \ == 0) {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $ret\
    \ = 1;\n    my $key;\n    my $val;\n    my $lc_key;\n    my $uc_key;\n    my $lc_val;\n\
    \    my $uc_val;\n    my $lc_key_count = 0;\n    my $uc_key_count = 0;\n    my\
    \ $lc_val_count = 0;\n    my $uc_val_count = 0;\n    my $key_count = 0;\n    my\
    \ $val_count = 0;\n    my $key_val_count = 0;\n    my $val_key_count = 0;\n  \
    \  my $key_val_key_count = 0;\n    my $val_key_val_count = 0;\n    my $key_val_val_count\
    \ = 0;\n    my $val_key_key_count = 0;\n    my $key_val_key_val_count = 0;\n \
    \   my $val_key_val_key_count = 0;\n    my $key_val_val_key_count = 0;\n    my\
    \ $val_key_key_val_count = 0;\n    my $key_val_key_val_key_count = 0;\n    my\
    \ $val_key_val_key_val_count = 0;\n    my $key_val_val_key_val_count = 0;\n  \
    \  my $val_key_key_val_key_count = 0;\n    my $key_val_key_val_key_val_count =\
    \ 0;\n    my $val_key_val_key_val_key_count = 0;\n    my $key_val_val_key_val_key_count\
    \ = 0;\n    my $val_key_key_val_key_val_count = 0;\n    my $key_val_key_val_key_val_key_count\
    \ = 0;\n    my $val_key_val_key_val_key_val_count = 0;\n    my $key_val_val_key_val_key_val_count\
    \ = 0;\n    my $val_key_key_val_key_val_key_count = 0;\n    my $key_val_", " \
    \   my $result = 1;\n    my $upper = 0;\n    my $lower = 0;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n\
    \        }\n        if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n     \
    \   }\n    }\n    if ($upper && $lower) {\n        $result = \"\";\n    }\n  \
    \  return $result;\n}", "    my $result = 1;\n    my $key;\n    foreach $key (keys\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            if ($key =~ /[a-z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n        else {\n            if ($key =~ /[A-Z]/) {\n              \
    \  $result = \"\";\n                last;\n            }\n        }\n    }\n \
    \   return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type;\n    my $value_type;\n    my $key_type_prev;\n    my $value_type_prev;\n\
    \    my $key_type_first;\n    my $value_type_first;\n    my $key_type_second;\n\
    \    my $value_type_second;\n    my $key_type_third;\n    my $value_type_third;\n\
    \    my $key_type_fourth;\n    my $value_type_fourth;\n    my $key_type_fifth;\n\
    \    my $value_type_fifth;\n    my $key_type_sixth;\n    my $value_type_sixth;\n\
    \    my $key_type_seventh;\n    my $value_type_seventh;\n    my $key_type_eighth;\n\
    \    my $value_type_eighth;\n    my $key_type_ninth;\n    my $value_type_ninth;\n\
    \    my $key_type_tenth;\n    my $value_type_tenth;\n    my $key_type_eleventh;\n\
    \    my $value_type_eleventh;\n    my $key_type_twelfth;\n    my $value_type_twelfth;\n\
    \    my $key_type_thirteenth;\n    my $value_type_thirteenth;\n    my $key_type_fourteenth;\n\
    \    my $value_type_fourteenth;\n    my $key_type_fifteenth;\n    my $value_type_fifteenth;\n\
    \    my $key_type_sixteenth;\n    my $value_type_sixteenth;\n    my $key_type_seventeenth;\n\
    \    my $value_type_seventeenth;\n    my $key_type_eighteenth;\n    my $value_type_eighteenth;\n\
    \    my $key_type_nineteenth;\n    my $value_type_nineteenth;\n    my $key_type_twentieth;\n\
    \    my $value_type_twentieth;\n    my $key_type_twenty_first;\n    my $value_type",
  "    my $ret = 1;\n    my $first_key = (keys %$dict)[0];\n    my $first_key_case\
    \ = ($first_key =~ /[A-Z]/) ? 'upper' : 'lower';\n    foreach my $key (keys %$dict)\
    \ {\n        my $key_case = ($key =~ /[A-Z]/) ? 'upper' : 'lower';\n        if\
    \ ($key_case ne $first_key_case) {\n            $ret = '';\n            last;\n\
    \        }\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $lower =\
    \ 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n        elsif ($key =~\
    \ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n        else {\n        \
    \    $result = \"\";\n            last;\n        }\n    }\n    if ($lower && $upper)\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key_case\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_case eq \"\"\
    ) {\n            if ($key =~ /[A-Z]/) {\n                $key_case = \"UPPER\"\
    ;\n            }\n            else {\n                $key_case = \"LOWER\";\n\
    \            }\n        }\n        if ($key =~ /[A-Z]/ && $key_case eq \"LOWER\"\
    ) {\n            $result = \"\";\n            last;\n        }\n        if ($key\
    \ =~ /[a-z]/ && $key_case eq \"UPPER\") {\n            $result = \"\";\n     \
    \       last;\n        }\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n\
    \        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n\
    \    if ($all_lower == 0 && $all_upper == 0) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $key_type = \"\";\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n        \
    \    if ($key =~ /[a-z]/) {\n                $key_type = \"lower\";\n        \
    \    } elsif ($key =~ /[A-Z]/) {\n                $key_type = \"upper\";\n   \
    \         } else {\n                $result = \"\";\n                last;\n \
    \           }\n        } elsif ($key_type eq \"lower\") {\n            if ($key\
    \ =~ /[A-Z]/) {\n                $result = \"\";\n                last;\n    \
    \        }\n        } elsif ($key_type eq \"upper\") {\n            if ($key =~\
    \ /[a-z]/) {\n                $result = \"\";\n                last;\n       \
    \     }\n        }\n    }\n    return $result;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    foreach $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n  \
    \          if ($key =~ /[a-z]/) {\n                $ret = \"\";\n            \
    \    last;\n            }\n        }\n        else {\n            if ($key =~\
    \ /[A-Z]/) {\n                $ret = \"\";\n                last;\n          \
    \  }\n        }\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n        if ($key\
    \ =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $result = \"\";\n    }\n    return $result;\n}", " \
    \   my $ret = 1;\n    my $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    while (($key, $val) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n    \
    \        $is_lower = 1;\n        } else {\n            $ret = \"\";\n        \
    \    last;\n        }\n    }\n    if ($is_upper && $is_lower) {\n        $ret\
    \ = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $key;\n    my\
    \ $value;\n    my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) =\
    \ each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n\
    \        }\n        if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n     \
    \   }\n    }\n    if ($upper && $lower) {\n        $ret = \"\";\n    }\n    return\
    \ $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each %$dict) {\n  \
    \      if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n     \
    \       $result = \"\";\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $result = \"\";\n    }\n    return $result;\n}", " \
    \   my $ret = 1;\n    my $key;\n    my $val;\n    my $key_type;\n    my $val_type;\n\
    \    my $key_type_prev;\n    my $val_type_prev;\n    my $key_type_prev_prev;\n\
    \    my $val_type_prev_prev;\n    my $key_type_prev_prev_prev;\n    my $val_type_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n  \
    \  my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n   \
    \ my $", "    my $result = 1;\n    my $key;\n    my $value;\n    my $upper = 0;\n\
    \    my $lower = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $upper++;\n        } elsif ($key =~ /^[a-z]+$/)\
    \ {\n            $lower++;\n        } else {\n            $result = \"\";\n  \
    \          last;\n        }\n    }\n    if ($upper > 0 && $lower > 0) {\n    \
    \    $result = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n    my\
    \ $is_upper = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n     \
    \   if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n   \
    \ if ($is_upper && $is_lower) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my($key, $value);\n    my($all_lower, $all_upper);\n    $all_lower =\
    \ 1;\n    $all_upper = 1;\n    while (($key, $value) = each %$dict) {\n      \
    \  if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if\
    \ ($key =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower\
    \ || $all_upper) {\n        return 1;\n    }\n    return \"\";\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $key_case;\n    my $value_case;\n\
    \    my $key_case_prev;\n    my $value_case_prev;\n    my $key_case_prev_set =\
    \ 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_first = 0;\n\
    \    my $value_case_prev_set_first = 0;\n    my $key_case_prev_set_second = 0;\n\
    \    my $value_case_prev_set_second = 0;\n    my $key_case_prev_set_third = 0;\n\
    \    my $value_case_prev_set_third = 0;\n    my $key_case_prev_set_fourth = 0;\n\
    \    my $value_case_prev_set_fourth = 0;\n    my $key_case_prev_set_fifth = 0;\n\
    \    my $value_case_prev_set_fifth = 0;\n    my $key_case_prev_set_sixth = 0;\n\
    \    my $value_case_prev_set_sixth = 0;\n    my $key_case_prev_set_seventh = 0;\n\
    \    my $value_case_prev_set_seventh = 0;\n    my $key_case_prev_set_eighth =\
    \ 0;\n    my $value_case_prev_set_eighth = 0;\n    my $key_case_prev_set_ninth\
    \ = 0;\n    my $value_case_prev_set_ninth = 0;\n    my $key_case_prev_set_tenth\
    \ = 0;\n    my $value_case_prev_set_tenth = 0;\n    my $key_case_prev_set_eleventh\
    \ = 0;\n    my $value_case_prev_set_eleventh = 0;\n    my $key_case_prev_set_twelfth\
    \ = 0;\n    my $value_case_prev_set_twelfth = 0;\n    my $key_case_prev_set_thirteenth\
    \ = 0;\n    my $value_case_prev_set_", "    my $ret = 1;\n    my $key_case = \"\
    \";\n    foreach my $key (keys %$dict) {\n        if ($key_case eq \"\") {\n \
    \           $key_case = ($key =~ /^[a-z]+$/) ? \"lower\" : \"upper\";\n      \
    \  } else {\n            if ($key_case eq \"lower\" && $key !~ /^[a-z]+$/) {\n\
    \                $ret = \"\";\n                last;\n            } elsif ($key_case\
    \ eq \"upper\" && $key !~ /^[A-Z]+$/) {\n                $ret = \"\";\n      \
    \          last;\n            }\n        }\n    }\n    return $ret;\n}", "   \
    \ my $result = 1;\n    my $key;\n    my $value;\n    my $upper = 0;\n    my $lower\
    \ = 0;\n    while(($key, $value) = each(%$dict)) {\n        if($key =~ /[A-Z]/)\
    \ {\n            $upper = 1;\n        }\n        if($key =~ /[a-z]/) {\n     \
    \       $lower = 1;\n        }\n    }\n    if($upper && $lower) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $is_all_lower = 1;\n    my\
    \ $is_all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~\
    \ /[A-Z]/) {\n            $is_all_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_all_upper = 0;\n        }\n    }\n    if ($is_all_lower)\
    \ {\n        return 1;\n    }\n    if ($is_all_upper) {\n        return 1;\n \
    \   }\n    return \"\";\n}", "    my $result = 1;\n    my $case = \"\";\n    my\
    \ $key;\n    my $value;\n    while (($key, $value) = each %$dict) {\n        if\
    \ ($case eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $case\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $case\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } elsif ($case eq \"lower\") {\n    \
    \        if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n        \
    \        last;\n            }\n        } elsif ($case eq \"upper\") {\n      \
    \      if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n          \
    \      last;\n            }\n        }\n    }\n    return $result;\n}", "    my\
    \ $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n    \
    \    if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n \
    \   if ($all_lower || $all_upper) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        }\n  \
    \  }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\
    \ else {\n            $ret = \"\";\n            last;\n        }\n    }\n    if\
    \ ($is_lower && $is_upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}",
  "    my $ret = 1;\n    my $key;\n    my $val;\n    my $case = 0;\n    my $count\
    \ = 0;\n    while (($key, $val) = each %$dict) {\n        if ($count == 0) {\n\
    \            if ($key =~ /^[a-z]+$/) {\n                $case = 1;\n         \
    \   } elsif ($key =~ /^[A-Z]+$/) {\n                $case = 2;\n            }\
    \ else {\n                $ret = \"\";\n                last;\n            }\n\
    \        } else {\n            if ($case == 1 && $key =~ /^[A-Z]+$/) {\n     \
    \           $ret = \"\";\n                last;\n            } elsif ($case ==\
    \ 2 && $key =~ /^[a-z]+$/) {\n                $ret = \"\";\n                last;\n\
    \            }\n        }\n        $count++;\n    }\n    return $ret;\n}", " \
    \   my $res = 1;\n    my $key;\n    my $val;\n    my $lc = 1;\n    my $uc = 1;\n\
    \    while (($key, $val) = each %$dict) {\n        if ($key =~ /[a-z]/) {\n  \
    \          $uc = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n            $lc\
    \ = 0;\n        }\n    }\n    if ($lc == 0 && $uc == 0) {\n        $res = \"\"\
    ;\n    }\n    return $res;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    while (($key, $value) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $result = \"\";\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 1;\n    my $keys = keys %$dict;\n    if ($keys\
    \ == 0) {\n        return 1;\n    }\n    my $first_key = (keys %$dict)[0];\n \
    \   my $first_key_is_upper = $first_key =~ /^[A-Z]+$/;\n    my $first_key_is_lower\
    \ = $first_key =~ /^[a-z]+$/;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($first_key_is_upper) {\n            if ($key !~ /^[A-Z]+$/) {\n           \
    \     $result = \"\";\n                last;\n            }\n        } elsif ($first_key_is_lower)\
    \ {\n            if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n\
    \                last;\n            }\n        } else {\n            $result =\
    \ \"\";\n            last;\n        }\n    }\n    return $result;\n}", "    my\
    \ $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    my $is_empty = 1;\n    while (($key, $val) = each %$dict) {\n    \
    \    $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            $ret = \"\";\n            last;\n        }\n   \
    \ }\n    if ($is_empty) {\n        $ret = \"\";\n    } elsif ($is_lower && $is_upper)\
    \ {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $case;\n    my $i = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($i == 0) {\n            $case = $key =~\
    \ /^[a-z]+$/ ? \"lower\" : \"upper\";\n        } else {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                if ($case ne \"lower\") {\n              \
    \      $result = \"\";\n                    last;\n                }\n       \
    \     } elsif ($key =~ /^[A-Z]+$/) {\n                if ($case ne \"upper\")\
    \ {\n                    $result = \"\";\n                    last;\n        \
    \        }\n            } else {\n                $result = \"\";\n          \
    \      last;\n            }\n        }\n        $i++;\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            $result = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    while (($key, $value) = each %$dict) {\n        if ($case)\
    \ {\n            if ($case eq 'upper') {\n                if ($key !~ /^[A-Z]+$/)\
    \ {\n                    $result = '';\n                    last;\n          \
    \      }\n            }\n            else {\n                if ($key !~ /^[a-z]+$/)\
    \ {\n                    $result = '';\n                    last;\n          \
    \      }\n            }\n        }\n        else {\n            if ($key =~ /^[A-Z]+$/)\
    \ {\n                $case = 'upper';\n            }\n            else {\n   \
    \             $case = 'lower';\n            }\n        }\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $key;\n    my $value;\n    my $upper = 0;\n \
    \   my $lower = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $upper++;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $lower++;\n        }\n    }\n    if ($upper > 0 && $lower > 0)\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my @keys =\
    \ keys %$dict;\n    my $result = 1;\n    my $case = \"\";\n    foreach my $key\
    \ (@keys) {\n        if ($case eq \"\") {\n            $case = $key =~ /^[a-z]+$/\
    \ ? \"lower\" : \"upper\";\n        }\n        if ($key =~ /^[a-z]+$/) {\n   \
    \         if ($case ne \"lower\") {\n                $result = \"\";\n       \
    \         last;\n            }\n        } else {\n            if ($case ne \"\
    upper\") {\n                $result = \"\";\n                last;\n         \
    \   }\n        }\n    }\n    return $result;\n}", "    my $ret = 1;\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower\
    \ == 0 && $all_upper == 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}",
  "    my $is_all_lower = 1;\n    my $is_all_upper = 1;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_all_lower = 0;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $is_all_upper = 0;\n \
    \       }\n    }\n    if ($is_all_lower || $is_all_upper) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my $result = 1;\n    my $case = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case == 0) {\n            if ($key =~\
    \ /[A-Z]/) {\n                $case = 1;\n            }\n            elsif ($key\
    \ =~ /[a-z]/) {\n                $case = 2;\n            }\n        }\n      \
    \  else {\n            if ($case == 1 && $key =~ /[a-z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n            elsif ($case == 2\
    \ && $key =~ /[A-Z]/) {\n                $result = \"\";\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    while\
    \ (($key, $value) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n         \
    \   $upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $lower\
    \ = 1;\n        }\n    }\n    if ($upper && $lower) {\n        $result = \"\"\
    ;\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my\
    \ $value;\n    my $key_is_lower = 1;\n    my $key_is_upper = 1;\n    my $key_is_string\
    \ = 1;\n    my $key_is_number = 1;\n    my $key_is_mixed = 1;\n    my $key_is_mixed_string\
    \ = 1;\n    my $key_is_mixed_number = 1;\n    my $key_is_mixed_string_number =\
    \ 1;\n    my $key_is_mixed_number_string = 1;\n    my $key_is_mixed_string_number_string\
    \ = 1;\n    my $key_is_mixed_number_string_number = 1;\n    my $key_is_mixed_string_number_string_number\
    \ = 1;\n    my $key_is_mixed_number_string_number_string = 1;\n    my $key_is_mixed_string_number_string_number_string\
    \ = 1;\n    my $key_is_mixed_number_string_number_string_number = 1;\n    my $key_is_mixed_string_number_string_number_string_number\
    \ = 1;\n    my $key_is_mixed_number_string_number_string_number_string = 1;\n\
    \    my $key_is_mixed_string_number_string_number_string_number_string = 1;\n\
    \    my $key_is_mixed_number_string_number_string_number_string_number = 1;\n\
    \    my $key_is_mixed_string_number_string_number_string_number_string_number\
    \ = 1;\n    my $key_is_mixed_number_string_number_string_number_string_number_string\
    \ = 1;\n    my $key_is_mixed_string_number_string_number_string_number_string_number_string\
    \ = 1;\n    my $key_is_mixed_number_string_number_string_number_string_number_string_number\
    \ = 1;\n    my $key_is_mixed_string_number_string_", "    my $result = 1;\n  \
    \  my $lower_case = 0;\n    my $upper_case = 0;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n       \
    \ }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n    \
    \    }\n        else {\n            $result = \"\";\n            last;\n     \
    \   }\n    }\n    if ($lower_case && $upper_case) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key_type = \"\"\
    ;\n    foreach my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n   \
    \         $key_type = is_upper($key) ? \"upper\" : \"lower\";\n        }\n   \
    \     if ($key_type eq \"upper\" && !is_upper($key)) {\n            $result =\
    \ \"\";\n            last;\n        }\n        if ($key_type eq \"lower\" && !is_lower($key))\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;\n    while (($key, $value)\
    \ = each %$dict) {\n        $is_empty = 0;\n        if ($key =~ /[a-z]/) {\n \
    \           $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n      \
    \      $is_upper = 1;\n        }\n    }\n    if ($is_empty) {\n        $result\
    \ = \"\";\n    }\n    elsif ($is_lower && $is_upper) {\n        $result = \"\"\
    ;\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my\
    \ $value;\n    my $upper = 1;\n    my $lower = 1;\n    while (($key, $value) =\
    \ each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $lower = 0;\n  \
    \      }\n        if ($key =~ /[a-z]/) {\n            $upper = 0;\n        }\n\
    \    }\n    if ($upper == 0 && $lower == 0) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n \
    \   my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n\
    \    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my\
    \ $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n\
    \    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my\
    \ $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n\
    \    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;", "    my $result = 1;\n\
    \    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n \
    \       if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n    }\n\
    \    if ($is_lower == 0 && $is_upper == 0) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_",
  "    my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n\
    \                $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } else {\n\
    \            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n           \
    \     $result = \"\";\n                last;\n            } elsif ($key_type eq\
    \ \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n      \
    \          last;\n            }\n        }\n    }\n    return $result;\n}", " \
    \   my $result = 1;\n    my $all_upper = 1;\n    my $all_lower = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n\
    \        }\n    }\n    if (!($all_upper || $all_lower)) {\n        $result = \"\
    \";\n    }\n    return $result;\n}", "    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    if ($all_lower || $all_upper)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my $result = 1;\n  \
    \  my $key;\n    my $value;\n    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n\
    \    my $value_case_prev;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set_count = 0;\n    my $value_case_prev_set_count\
    \ = 0;\n    my $key_case_prev_set_count_prev = 0;\n    my $value_case_prev_set_count_prev\
    \ = 0;\n    my $key_case_prev_set_count_prev_set = 0;\n    my $value_case_prev_set_count_prev_set\
    \ = 0;\n    my $key_case_prev_set_count_prev_set_count = 0;\n    my $value_case_prev_set_count_prev_set_count\
    \ = 0;\n    my $key_case_prev_set_count_prev_set_count_prev = 0;\n    my $value_case_prev_set_count_prev_set_count_prev\
    \ = 0;\n    my $key_case_prev_set_count_prev_set_count_prev_set = 0;\n    my $value_case_prev_set_count_prev_set_count_prev_set\
    \ = 0;\n    my $key_case_prev_set_count_prev_set_count_prev_set_count = 0;\n \
    \   my $value_case_prev_set_count_prev_set_count_prev_set_count = 0;\n    my $key_case_prev_set_count_prev_set_count_prev_set_count_prev\
    \ = 0;\n    my $value_case_prev_set_count_prev_set_count_prev_set_count_prev =\
    \ 0;\n    my $key_case_prev_set_count_prev_set_count_prev_set_count_prev_set =\
    \ 0;\n    my $value_case_prev_set_count_prev_set_count_prev_set_count_prev_",
  "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n    my\
    \ $is_upper = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key\
    \ =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_upper = 1;\n        }\n    }\n    if ($is_lower && $is_upper)\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $is_upper = 1;\n        } else {\n            $result = \"\";\n     \
    \       last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n    my $case = \"\
    \";\n    foreach my $key (keys %$dict) {\n        if ($case eq \"\") {\n     \
    \       if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\";\n      \
    \      } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n  \
    \          } else {\n                $ret = \"\";\n                last;\n   \
    \         }\n        } elsif ($case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $ret = \"\";\n                last;\n            }\n    \
    \    } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n \
    \               $ret = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $ret;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $key_case;\n    my $val_case;\n    my $key_case_prev;\n    my $val_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $val_case_prev_set = 0;\n    my $key_case_prev_set_val\
    \ = 0;\n    my $val_case_prev_set_val = 0;\n    my $key_case_prev_set_val_prev\
    \ = 0;\n    my $val_case_prev_set_val_prev = 0;\n    my $key_case_prev_set_val_prev_set\
    \ = 0;\n    my $val_case_prev_set_val_prev_set = 0;\n    my $key_case_prev_set_val_prev_set_val\
    \ = 0;\n    my $val_case_prev_set_val_prev_set_val = 0;\n    my $key_case_prev_set_val_prev_set_val_prev\
    \ = 0;\n    my $val_case_prev_set_val_prev_set_val_prev = 0;\n    my $key_case_prev_set_val_prev_set_val_prev_set\
    \ = 0;\n    my $val_case_prev_set_val_prev_set_val_prev_set = 0;\n    my $key_case_prev_set_val_prev_set_val_prev_set_val\
    \ = 0;\n    my $val_case_prev_set_val_prev_set_val_prev_set_val = 0;\n    my $key_case_prev_set_val_prev_set_val_prev_set_val_prev\
    \ = 0;\n    my $val_case_prev_set_val_prev_set_val_prev_set_val_prev = 0;\n  \
    \  my $key_case_prev_set_val_prev_set_val_prev_set_val_prev_set = 0;\n    my $val_case_prev_set_val_prev_set_val_prev_set_val_prev_",
  "    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        $is_lower = 0 if $key =~ /[A-Z]/;\n        $is_upper = 0 if $key\
    \ =~ /[a-z]/;\n    }\n    return $is_lower || $is_upper;\n}", "    my $ret = 1;\n\
    \    my $key;\n    my $val;\n    my $is_lower = 0;\n    my $is_upper = 0;\n  \
    \  my $is_mixed = 0;\n    while (($key, $val) = each %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        } else {\n            $is_mixed = 1;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        $ret = \"\";\n \
    \   } elsif ($is_mixed) {\n        $ret = \"\";\n    }\n    return $ret;\n}",
  "    my $ret = 1;\n    my $key;\n    my $val;\n    my $case;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($case) {\n            if ($case eq 'lower')\
    \ {\n                if ($key =~ /[A-Z]/) {\n                    $ret = '';\n\
    \                    last;\n                }\n            }\n            elsif\
    \ ($case eq 'upper') {\n                if ($key =~ /[a-z]/) {\n             \
    \       $ret = '';\n                    last;\n                }\n           \
    \ }\n        }\n        else {\n            if ($key =~ /[a-z]/) {\n         \
    \       $case = 'lower';\n            }\n            elsif ($key =~ /[A-Z]/) {\n\
    \                $case = 'upper';\n            }\n        }\n    }\n    return\
    \ $ret;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_upper =\
    \ 1;\n    my $is_lower = 1;\n    while (($key, $val) = each %$dict) {\n      \
    \  if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n    }\n    if ($is_lower\
    \ == 0 && $is_upper == 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}",
  "    my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n\
    \                $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } else {\n\
    \            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n           \
    \     $result = \"\";\n                last;\n            } elsif ($key_type eq\
    \ \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n      \
    \          last;\n            }\n        }\n    }\n    return $result;\n}", " \
    \   my $result = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            $result = \"\";\n            last;\n        }\n\
    \    }\n    if ($is_lower && $is_upper) {\n        $result = \"\";\n    }\n  \
    \  return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_case = \"\";\n    while (($key, $val) = each %$dict) {\n        if ($key_case\
    \ eq \"\") {\n            if ($key =~ /[A-Z]/) {\n                $key_case =\
    \ \"upper\";\n            } elsif ($key =~ /[a-z]/) {\n                $key_case\
    \ = \"lower\";\n            } else {\n                $ret = \"\";\n         \
    \       last;\n            }\n        } elsif ($key_case eq \"upper\") {\n   \
    \         if ($key =~ /[a-z]/) {\n                $ret = \"\";\n             \
    \   last;\n            }\n        } elsif ($key_case eq \"lower\") {\n       \
    \     if ($key =~ /[A-Z]/) {\n                $ret = \"\";\n                last;\n\
    \            }\n        }\n    }\n    return $ret;\n}", "    my $result = 1;\n\
    \    my $lower = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n     \
    \   if ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n    }\n   \
    \ if ($lower && $upper) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $lower = 0;\n    my\
    \ $upper = 0;\n    while (($key, $val) = each %$dict) {\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n       \
    \     $upper = 1;\n        } else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $ret = \"\";\n    }\n\
    \    return $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n  \
    \  my $lowercase = 1;\n    my $uppercase = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $lowercase = 0;\n   \
    \     }\n        if ($key =~ /[a-z]/) {\n            $uppercase = 0;\n       \
    \ }\n    }\n    if ($lowercase == 0 && $uppercase == 0) {\n        $result = \"\
    \";\n    }\n    return $result;\n}", "    my $result = 1;\n    my $case = \"\"\
    ;\n    foreach my $key (keys %$dict) {\n        if ($case eq \"\") {\n       \
    \     if ($key =~ /[A-Z]/) {\n                $case = \"upper\";\n           \
    \ } else {\n                $case = \"lower\";\n            }\n        }\n   \
    \     if ($case eq \"upper\" && $key =~ /[a-z]/) {\n            $result = \"\"\
    ;\n            last;\n        }\n        if ($case eq \"lower\" && $key =~ /[A-Z]/)\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my $ret = 1;\n    my $all_lower = 1;\n    my $all_upper =\
    \ 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n  \
    \          $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n      \
    \      $all_upper = 0;\n        }\n    }\n    if ($all_lower == 0 && $all_upper\
    \ == 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $lower = 0;\n    my $upper = 0;\n\
    \    while (($key, $value) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            $result = '';\n            last;\n        }\n \
    \   }\n    if ($lower && $upper) {\n        $result = '';\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $lower = 0;\n    my $upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n    \
    \    } else {\n            $result = 0;\n            last;\n        }\n    }\n\
    \    if ($lower && $upper) {\n        $result = 0;\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        }\n  \
    \  }\n    return $result;\n}", "    my $result = 1;\n    my $is_upper = 0;\n \
    \   my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~\
    \ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_lower = 1;\n        }\n    }\n    if ($is_upper && $is_lower)\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $key_case = \"\";\n    my $value_case\
    \ = \"\";\n    my $key_case_prev = \"\";\n    my $value_case_prev = \"\";\n  \
    \  my $key_case_curr = \"\";\n    my $value_case_curr = \"\";\n    my $key_case_flag\
    \ = 0;\n    my $value_case_flag = 0;\n    my $key_case_flag_prev = 0;\n    my\
    \ $value_case_flag_prev = 0;\n    my $key_case_flag_curr = 0;\n    my $value_case_flag_curr\
    \ = 0;\n    my $key_case_flag_prev_prev = 0;\n    my $value_case_flag_prev_prev\
    \ = 0;\n    my $key_case_flag_curr_curr = 0;\n    my $value_case_flag_curr_curr\
    \ = 0;\n    my $key_case_flag_prev_prev_prev = 0;\n    my $value_case_flag_prev_prev_prev\
    \ = 0;\n    my $key_case_flag_curr_curr_curr = 0;\n    my $value_case_flag_curr_curr_curr\
    \ = 0;\n    my $key_case_flag_prev_prev_prev_prev = 0;\n    my $value_case_flag_prev_prev_prev_prev\
    \ = 0;\n    my $key_case_flag_curr_curr_curr_curr = 0;\n    my $value_case_flag_curr_curr_curr_curr\
    \ = 0;\n    my $key_case_flag_prev_prev_prev_prev_prev = 0;\n    my $value_case_flag_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_case_flag_curr_curr_curr_curr_curr = 0;\n    my $value_case_flag_curr_curr_curr_curr_curr\
    \ = 0;\n    my $key_case_", "    my $result = 1;\n    my $key;\n    foreach $key\
    \ (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $result = \"\"\
    \ if ($result == 1);\n        }\n        else {\n            $result = \"\" if\
    \ ($result == 2);\n        }\n    }\n    return $result;\n}", "    my $ret = 1;\n\
    \    my $key;\n    my $val;\n    my $lc_key;\n    my $uc_key;\n    my $lc_val;\n\
    \    my $uc_val;\n    my $lc_dict;\n    my $uc_dict;\n    my $lc_dict_str;\n \
    \   my $uc_dict_str;\n    my $dict_str;\n    my $lc_dict_str_len;\n    my $uc_dict_str_len;\n\
    \    my $dict_str_len;\n    my $lc_dict_str_len_diff;\n    my $uc_dict_str_len_diff;\n\
    \    my $dict_str_len_diff;\n    my $lc_dict_str_len_diff_abs;\n    my $uc_dict_str_len_diff_abs;\n\
    \    my $dict_str_len_diff_abs;\n    my $lc_dict_str_len_diff_abs_avg;\n    my\
    \ $uc_dict_str_len_diff_abs_avg;\n    my $dict_str_len_diff_abs_avg;\n    my $lc_dict_str_len_diff_abs_avg_diff;\n\
    \    my $uc_dict_str_len_diff_abs_avg_diff;\n    my $dict_str_len_diff_abs_avg_diff;\n\
    \    my $lc_dict_str_len_diff_abs_avg_diff_abs;\n    my $uc_dict_str_len_diff_abs_avg_diff_abs;\n\
    \    my $dict_str_len_diff_abs_avg_diff_abs;\n    my $lc_dict_str_len_diff_abs_avg_diff_abs_avg;\n\
    \    my $uc_dict_str_len_diff_abs_avg_diff_abs_avg;\n    my $dict_str_len_diff_abs_avg_diff_abs_avg;\n\
    \    my $lc_dict_str_len_diff_abs_avg_diff_abs_avg_diff;\n    my $uc_dict_str",
  "    my $ret = 1;\n    my $is_upper = 1;\n    my $is_lower = 1;\n    foreach my\
    \ $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    if ($is_upper == 0 && $is_lower == 0) {\n        $ret =\
    \ \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $key_case = \"\
    \";\n    foreach my $key (keys %$dict) {\n        if ($key_case eq \"\") {\n \
    \           if ($key =~ /^[a-z]+$/) {\n                $key_case = \"lower\";\n\
    \            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_case = \"upper\"\
    ;\n            } else {\n                $ret = \"\";\n                last;\n\
    \            }\n        } else {\n            if ($key_case eq \"lower\" && $key\
    \ =~ /^[A-Z]+$/) {\n                $ret = \"\";\n                last;\n    \
    \        } elsif ($key_case eq \"upper\" && $key =~ /^[a-z]+$/) {\n          \
    \      $ret = \"\";\n                last;\n            }\n        }\n    }\n\
    \    return $ret;\n}", "    my $ret = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    my $first_key_case = $first_key =~ /[A-Z]/ ? 'upper' : 'lower';\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/ && $first_key_case eq 'lower')\
    \ {\n            $ret = '';\n            last;\n        }\n        if ($key =~\
    \ /[a-z]/ && $first_key_case eq 'upper') {\n            $ret = '';\n         \
    \   last;\n        }\n    }\n    return $ret;\n}", "    my $result = 1;\n    my\
    \ $key_type = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } else {\n            if ($key_type eq\
    \ \"lower\" && $key =~ /^[A-Z]+$/) {\n                $result = \"\";\n      \
    \          last;\n            } elsif ($key_type eq \"upper\" && $key =~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n\
    \    my $value_case_prev;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_defined = 0;\n    my $value_case_prev_defined = 0;\n  \
    \  my $key_case_prev_is_upper = 0;\n    my $value_case_prev_is_upper = 0;\n  \
    \  my $key_case_prev_is_lower = 0;\n    my $value_case_prev_is_lower = 0;\n  \
    \  my $key_case_prev_is_mixed = 0;\n    my $value_case_prev_is_mixed = 0;\n  \
    \  my $key_case_prev_is_numeric = 0;\n    my $value_case_prev_is_numeric = 0;\n\
    \    my $key_case_prev_is_alpha = 0;\n    my $value_case_prev_is_alpha = 0;\n\
    \    my $key_case_prev_is_alphanumeric = 0;\n    my $value_case_prev_is_alphanumeric\
    \ = 0;\n    my $key_case_prev_is_alphanumeric_mixed = 0;\n    my $value_case_prev_is_alphanumeric_mixed\
    \ = 0;\n    my $key_case_prev_is_alphanumeric_upper = 0;\n    my $value_case_prev_is_alphanumeric_upper\
    \ = 0;\n    my $key_case_prev_is_alphanumeric_lower = 0;\n    my $value_case_prev_is_alphanumeric_lower\
    \ = 0;\n    my $key_case_prev_is_alphanumeric_mixed_upper = 0;\n    my $value_case_prev_is_alphanumeric_mixed_upper\
    \ = 0;\n    my $key_case_prev_is_alphanumeric_mixed_lower = 0;\n    my $value_case_prev_is_alphanumeric_mixed_lower\
    \ = 0;\n    my $key_case_prev_is_alphan", "    my $ret = 1;\n    my $key;\n  \
    \  my $val;\n    my $lc = 0;\n    my $uc = 0;\n    foreach $key (keys %$dict)\
    \ {\n        $val = $dict->{$key};\n        if ($key =~ /^[a-z]+$/) {\n      \
    \      $lc++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $uc++;\n  \
    \      } else {\n            $ret = \"\";\n            last;\n        }\n    }\n\
    \    if ($lc > 0 && $uc > 0) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my $result = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    if (!($all_lower || $all_upper)) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n    my $lower\
    \ = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper = 1;\n        } else {\n            $result = \"\";\n\
    \            last;\n        }\n    }\n    if ($lower && $upper) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    my $mixed = 0;\n\
    \    my $empty = 0;\n    my $count = 0;\n    my $key_count = 0;\n    my $value_count\
    \ = 0;\n    my $key_len = 0;\n    my $value_len = 0;\n    my $key_len_sum = 0;\n\
    \    my $value_len_sum = 0;\n    my $key_len_avg = 0;\n    my $value_len_avg =\
    \ 0;\n    my $key_len_max = 0;\n    my $value_len_max = 0;\n    my $key_len_min\
    \ = 0;\n    my $value_len_min = 0;\n    my $key_len_median = 0;\n    my $value_len_median\
    \ = 0;\n    my $key_len_mode = 0;\n    my $value_len_mode = 0;\n    my $key_len_range\
    \ = 0;\n    my $value_len_range = 0;\n    my $key_len_variance = 0;\n    my $value_len_variance\
    \ = 0;\n    my $key_len_std_dev = 0;\n    my $value_len_std_dev = 0;\n    my $key_len_skewness\
    \ = 0;\n    my $value_len_skewness = 0;\n    my $key_len_kurtosis = 0;\n    my\
    \ $value_len_kurtosis = 0;\n    my $key_len_zscore = 0;\n    my $value_len_zscore\
    \ = 0;\n    my $key_len_zscore_sum = 0;\n    my $value_len_zscore_sum = 0;\n \
    \   my $key_len_zscore_avg = 0;\n    my $value_len_zscore_avg = 0;\n    my $key_len_zscore_max\
    \ = 0;\n    my $value_len_zscore_max = 0;\n    my $key_len_z", "    my($key, $value);\n\
    \    my($upper) = 1;\n    my($lower) = 1;\n    while(($key, $value) = each %$dict)\
    \ {\n        if($key =~ /[A-Z]/) {\n            $lower = 0;\n        }\n     \
    \   if($key =~ /[a-z]/) {\n            $upper = 0;\n        }\n    }\n    if($upper\
    \ || $lower) {\n        return 1;\n    }\n    return \"\";\n}", "    my $ret =\
    \ 1;\n    my $flag = 0;\n    foreach my $key (keys %$dict) {\n        if ($flag\
    \ == 0) {\n            $flag = 1;\n            $ret = ($key =~ /^[a-z]+$/) ? 1\
    \ : 2;\n        }\n        if ($ret == 1 && $key =~ /^[A-Z]+$/) {\n          \
    \  $ret = \"\";\n        }\n        if ($ret == 2 && $key =~ /^[a-z]+$/) {\n \
    \           $ret = \"\";\n        }\n    }\n    return $ret;\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $count = 0;\n    my $lower = 0;\n\
    \    my $upper = 0;\n    while (($key, $value) = each %$dict) {\n        $count++;\n\
    \        if ($key =~ /[a-z]/) {\n            $lower++;\n        }\n        if\
    \ ($key =~ /[A-Z]/) {\n            $upper++;\n        }\n    }\n    if ($count\
    \ > 0) {\n        if ($lower > 0 && $upper > 0) {\n            $result = \"\"\
    ;\n        }\n    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n\
    \    my $value;\n    my $lower = 0;\n    my $upper = 0;\n    while (($key, $value)\
    \ = each(%$dict)) {\n        if ($key =~ /[a-z]/) {\n            $lower = 1;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $upper = 1;\n        }\n\
    \    }\n    if ($lower && $upper) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my $result = 1;\n    my $key;\n    my $value;\n    my $key_case = \"\"\
    ;\n    my $value_case = \"\";\n    my $key_case_prev = \"\";\n    my $value_case_prev\
    \ = \"\";\n    my $key_case_curr = \"\";\n    my $value_case_curr = \"\";\n  \
    \  my $key_case_count = 0;\n    my $value_case_count = 0;\n    my $key_case_count_prev\
    \ = 0;\n    my $value_case_count_prev = 0;\n    my $key_case_count_curr = 0;\n\
    \    my $value_case_count_curr = 0;\n    my $key_case_count_max = 0;\n    my $value_case_count_max\
    \ = 0;\n    my $key_case_count_max_prev = 0;\n    my $value_case_count_max_prev\
    \ = 0;\n    my $key_case_count_max_curr = 0;\n    my $value_case_count_max_curr\
    \ = 0;\n    my $key_case_count_max_prev_prev = 0;\n    my $value_case_count_max_prev_prev\
    \ = 0;\n    my $key_case_count_max_curr_curr = 0;\n    my $value_case_count_max_curr_curr\
    \ = 0;\n    my $key_case_count_max_prev_curr = 0;\n    my $value_case_count_max_prev_curr\
    \ = 0;\n    my $key_case_count_max_curr_prev = 0;\n    my $value_case_count_max_curr_prev\
    \ = 0;\n    my $key_case_count_max_prev_prev_prev = 0;\n    my $value_case_count_max_prev_prev_prev\
    \ = 0;\n    my $key_case_count_max_curr_curr_curr = 0;\n    my $value_case_count_max_curr_curr_curr\
    \ = 0;\n    my $key_case_", "    my $ret = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if (ref($key) eq 'HASH') {\n            $ret = check_dict_case($key);\n\
    \        }\n        elsif (ref($key) eq 'ARRAY') {\n            $ret = check_dict_case($key);\n\
    \        }\n        else {\n            if ($key =~ /[A-Z]/) {\n             \
    \   $ret = '';\n            }\n            elsif ($key =~ /[a-z]/) {\n       \
    \         $ret = 1;\n            }\n            else {\n                $ret =\
    \ '';\n            }\n        }\n    }\n    return $ret;\n}", "    my $result\
    \ = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$dict) {\n      \
    \  if ($key_type eq \"\") {\n            $key_type = $key =~ /^[a-z]+$/ ? \"lower\"\
    \ : \"upper\";\n        }\n        if ($key_type eq \"lower\" && $key !~ /^[a-z]+$/)\
    \ {\n            $result = \"\";\n            last;\n        }\n        if ($key_type\
    \ eq \"upper\" && $key !~ /^[A-Z]+$/) {\n            $result = \"\";\n       \
    \     last;\n        }\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $is_lower = 0;\n    my $is_upper = 0;\n\
    \    while (($key, $value) = each %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n     \
    \       $is_upper = 1;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $result = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $case;\n    my $count = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($count == 0) {\n            if ($key =~\
    \ /[a-z]/) {\n                $case = \"lower\";\n            } else {\n     \
    \           $case = \"upper\";\n            }\n        } else {\n            if\
    \ ($case eq \"lower\" && $key =~ /[A-Z]/) {\n                $result = \"\";\n\
    \                last;\n            } elsif ($case eq \"upper\" && $key =~ /[a-z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n        $count++;\n    }\n    return $result;\n}", "    my $ret = 1;\n\
    \    my $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n  \
    \  while (($key, $val) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n \
    \           $is_upper = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        else {\n            $ret = \"\"\
    ;\n            last;\n        }\n    }\n    if ($is_upper && $is_lower) {\n  \
    \      $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n    my\
    \ $case = \"\";\n    foreach my $key (keys %$dict) {\n        if ($case eq \"\"\
    ) {\n            if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\"\
    ;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } elsif ($case eq \"lower\") {\n            if ($key !~\
    \ /^[a-z]+$/) {\n                $result = \"\";\n                last;\n    \
    \        }\n        } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $lower_count = 0;\n    my $upper_count = 0;\n    my $key_count\
    \ = 0;\n    while (($key, $value) = each %$dict) {\n        $key_count++;\n  \
    \      if ($key =~ /^[a-z]+$/) {\n            $lower_count++;\n        } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $upper_count++;\n        } else {\n    \
    \        $result = \"\";\n            last;\n        }\n    }\n    if ($key_count\
    \ > 0) {\n        if ($lower_count > 0 && $upper_count > 0) {\n            $result\
    \ = \"\";\n        }\n    }\n    return $result;\n}", "    my $all_lower = 1;\n\
    \    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower\
    \ = 0 if $key =~ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n\
    \    return $all_lower || $all_upper;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    my $is_empty\
    \ = 1;\n    while (($key, $value) = each %$dict) {\n        $is_empty = 0;\n \
    \       if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n      \
    \  if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n    }\n    if\
    \ ($is_empty) {\n        return 1;\n    }\n    if ($is_lower && $is_upper) {\n\
    \        return \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $lc_key;\n    my $uc_key;\n    my $lc_value;\n\
    \    my $uc_value;\n    my $lc_dict;\n    my $uc_dict;\n    my $lc_dict_keys;\n\
    \    my $uc_dict_keys;\n    my $lc_dict_values;\n    my $uc_dict_values;\n   \
    \ my $lc_dict_keys_values;\n    my $uc_dict_keys_values;\n    my $lc_dict_keys_values_sorted;\n\
    \    my $uc_dict_keys_values_sorted;\n    my $lc_dict_keys_values_sorted_string;\n\
    \    my $uc_dict_keys_values_sorted_string;\n    my $lc_dict_keys_values_sorted_string_length;\n\
    \    my $uc_dict_keys_values_sorted_string_length;\n    my $lc_dict_keys_values_sorted_string_length_diff;\n\
    \    my $uc_dict_keys_values_sorted_string_length_diff;\n    my $lc_dict_keys_values_sorted_string_length_diff_abs;\n\
    \    my $uc_dict_keys_values_sorted_string_length_diff_abs;\n    my $lc_dict_keys_values_sorted_string_length_diff_abs_max;\n\
    \    my $uc_dict_keys_values_sorted_string_length_diff_abs_max;\n    my $lc_dict_keys_values_sorted_string_length_diff_abs_max_index;\n\
    \    my $uc_dict_keys_values_sorted_string_length_diff_abs_max_index;\n    my\
    \ $lc_dict_keys_values_sorted_string_length_diff_abs_max_index_value;\n    my\
    \ $uc_dict_keys_values_sorted_string_length_diff_abs_max_index_value;\n    my\
    \ $lc_dict_keys_values_sorted_string_length_diff_abs_max_index_value", "    my\
    \ $result = 1;\n    my $key;\n    my $value;\n    my $lower_count = 0;\n    my\
    \ $upper_count = 0;\n    my $key_count = 0;\n    my $value_count = 0;\n    my\
    \ $lower_key_count = 0;\n    my $upper_key_count = 0;\n    my $lower_value_count\
    \ = 0;\n    my $upper_value_count = 0;\n    my $lower_key_value_count = 0;\n \
    \   my $upper_key_value_count = 0;\n    my $lower_key_value_count_all = 0;\n \
    \   my $upper_key_value_count_all = 0;\n    my $lower_key_value_count_all_1 =\
    \ 0;\n    my $upper_key_value_count_all_1 = 0;\n    my $lower_key_value_count_all_2\
    \ = 0;\n    my $upper_key_value_count_all_2 = 0;\n    my $lower_key_value_count_all_3\
    \ = 0;\n    my $upper_key_value_count_all_3 = 0;\n    my $lower_key_value_count_all_4\
    \ = 0;\n    my $upper_key_value_count_all_4 = 0;\n    my $lower_key_value_count_all_5\
    \ = 0;\n    my $upper_key_value_count_all_5 = 0;\n    my $lower_key_value_count_all_6\
    \ = 0;\n    my $upper_key_value_count_all_6 = 0;\n    my $lower_key_value_count_all_7\
    \ = 0;\n    my $upper_key_value_count_all_7 = 0;\n    my $lower_key_value_count_all_8\
    \ = 0;\n    my $upper_key_value_count_all_8 = 0;\n    my $lower_key_value_count_all_9\
    \ = 0;\n    my $upper_key_value_count_all_9 = 0;\n    my $lower_key_value_count_all_10\
    \ = 0;\n   ", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    my $is_mixed = 0;\n    my $is_empty = 1;\n\
    \    while (($key, $val) = each %$dict) {\n        $is_empty = 0;\n        if\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } elsif ($key =~\
    \ /^[a-z]+$/) {\n            $is_lower = 1;\n        } else {\n            $is_mixed\
    \ = 1;\n        }\n    }\n    if ($is_empty) {\n        $ret = \"\";\n    } elsif\
    \ ($is_mixed) {\n        $ret = \"\";\n    } elsif ($is_upper && $is_lower) {\n\
    \        $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    my $val;\n    my $case;\n    my $first = 1;\n    while (($key, $val)\
    \ = each %$dict) {\n        if ($first) {\n            $case = ($key =~ /^[a-z]+$/)\
    \ ? 'lower' : 'upper';\n            $first = 0;\n        }\n        if ($case\
    \ eq 'lower' && $key !~ /^[a-z]+$/) {\n            $ret = '';\n            last;\n\
    \        }\n        if ($case eq 'upper' && $key !~ /^[A-Z]+$/) {\n          \
    \  $ret = '';\n            last;\n        }\n    }\n    return $ret;\n}", "  \
    \  my $ret = 1;\n    my $key;\n    my $value;\n    my $key_case = \"\";\n    my\
    \ $value_case = \"\";\n    my $key_case_prev = \"\";\n    my $value_case_prev\
    \ = \"\";\n    my $key_case_first = \"\";\n    my $value_case_first = \"\";\n\
    \    my $key_case_last = \"\";\n    my $value_case_last = \"\";\n    my $key_case_first_prev\
    \ = \"\";\n    my $value_case_first_prev = \"\";\n    my $key_case_last_prev =\
    \ \"\";\n    my $value_case_last_prev = \"\";\n    my $key_case_first_next = \"\
    \";\n    my $value_case_first_next = \"\";\n    my $key_case_last_next = \"\"\
    ;\n    my $value_case_last_next = \"\";\n    my $key_case_first_next_next = \"\
    \";\n    my $value_case_first_next_next = \"\";\n    my $key_case_last_next_next\
    \ = \"\";\n    my $value_case_last_next_next = \"\";\n    my $key_case_first_prev_prev\
    \ = \"\";\n    my $value_case_first_prev_prev = \"\";\n    my $key_case_last_prev_prev\
    \ = \"\";\n    my $value_case_last_prev_prev = \"\";\n    my $key_case_first_next_next_next\
    \ = \"\";\n    my $value_case_first_next_next_next = \"\";\n    my $key_case_last_next_next_next\
    \ = \"\";\n    my $value_case_last_next_next_next = \"\";\n    my $key_case_first_prev_prev_prev\
    \ = \"\";\n    my $value_case_first_prev_prev_prev = \"\";\n    my $key_case_last_prev_prev_prev\
    \ = \"\";\n    my $value_case_last_prev_prev_prev = \"\";\n    my $key_case_first_next_next_next_",
  "    my $result = 1;\n    my $key;\n    my $value;\n    my $lower_case = 0;\n  \
    \  my $upper_case = 0;\n    while (($key, $value) = each %$dict) {\n        if\
    \ ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n        }\n        elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n        }\n        else\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    if\
    \ ($lower_case && $upper_case) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $case = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if ($case eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n   \
    \             $case = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n\
    \                $case = \"upper\";\n            } else {\n                $result\
    \ = \"\";\n                last;\n            }\n        } elsif ($case eq \"\
    lower\") {\n            if ($key !~ /^[a-z]+$/) {\n                $result = \"\
    \";\n                last;\n            }\n        } elsif ($case eq \"upper\"\
    ) {\n            if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n\
    \                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n\
    \    my $is_upper = 0;\n    while (($key, $value) = each %$dict) {\n        if\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    if\
    \ ($is_lower && $is_upper) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_upper = 0;\n   \
    \ my $is_lower = 0;\n    while (($key, $val) = each %$dict) {\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        if ($key =~\
    \ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n    }\n    if ($is_upper\
    \ && $is_lower) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my\
    \ $ret = 1;\n    my $flag = 0;\n    my $flag1 = 0;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $flag = 1;\n        }\n\
    \        if ($key =~ /[a-z]/) {\n            $flag1 = 1;\n        }\n    }\n \
    \   if ($flag == 1 && $flag1 == 1) {\n        $ret = \"\";\n    }\n    return\
    \ $ret;\n}", "    my $result = 1;\n    my $lower = 0;\n    my $upper = 0;\n  \
    \  foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n      \
    \      $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            $result = \"\";\n            last;\n        }\n\
    \    }\n    if ($lower > 0 && $upper > 0) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } elsif ($case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n    \
    \            $result = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed = 0;\n    my $is_empty\
    \ = 1;\n    while (($key, $val) = each %$dict) {\n        $is_empty = 0;\n   \
    \     if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } elsif ($key\
    \ =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } else {\n           \
    \ $is_mixed = 1;\n        }\n    }\n    if ($is_empty) {\n        $ret = \"\"\
    ;\n    } elsif ($is_upper && $is_lower) {\n        $ret = \"\";\n    } elsif ($is_mixed)\
    \ {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n  \
    \  my $key;\n    my $val;\n    my $key_type;\n    my $val_type;\n    my $key_type_prev;\n\
    \    my $val_type_prev;\n    while (($key, $val) = each %$dict) {\n        $key_type\
    \ = ref($key);\n        $val_type = ref($val);\n        if (defined($key_type_prev)\
    \ && $key_type_prev ne $key_type) {\n            $ret = \"\";\n            last;\n\
    \        }\n        if (defined($val_type_prev) && $val_type_prev ne $val_type)\
    \ {\n            $ret = \"\";\n            last;\n        }\n        $key_type_prev\
    \ = $key_type;\n        $val_type_prev = $val_type;\n    }\n    return $ret;\n\
    }", "    my $ret = 1;\n    my $case = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if ($case eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n   \
    \             $case = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n\
    \                $case = \"upper\";\n            } else {\n                $ret\
    \ = \"\";\n                last;\n            }\n        } else {\n          \
    \  if ($case eq \"lower\" && $key =~ /^[A-Z]+$/) {\n                $ret = \"\"\
    ;\n                last;\n            } elsif ($case eq \"upper\" && $key =~ /^[a-z]+$/)\
    \ {\n                $ret = \"\";\n                last;\n            }\n    \
    \    }\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $is_lower =\
    \ 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        if ($key =~\
    \ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $result = \"\";\n    }\n    return $result;\n}", " \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $lower_count = 0;\n\
    \    my $upper_count = 0;\n    while (($key, $value) = each %$dict) {\n      \
    \  if ($key =~ /^[a-z]+$/) {\n            $lower_count++;\n        } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $upper_count++;\n        } else {\n          \
    \  $result = \"\";\n            last;\n        }\n    }\n    if ($lower_count\
    \ > 0 && $upper_count > 0) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n    }\n    if ($all_lower == 0 && $all_upper == 0) {\n    \
    \    $result = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n \
    \   my $case = \"\";\n    foreach my $key (keys %$dict) {\n        if ($case eq\
    \ \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\"\
    ;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } elsif ($case eq \"lower\") {\n            if ($key !~\
    \ /^[a-z]+$/) {\n                $result = \"\";\n                last;\n    \
    \        }\n        } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key_type\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type eq \"\"\
    ) {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\"\
    ;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"\
    upper\";\n            } else {\n                $result = \"\";\n            \
    \    last;\n            }\n        } elsif ($key_type eq \"lower\") {\n      \
    \      if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n          \
    \      last;\n            }\n        } elsif ($key_type eq \"upper\") {\n    \
    \        if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n        \
    \        last;\n            }\n        }\n    }\n    return $result;\n}", "  \
    \  my $ret = 1;\n    my $first_key = (keys %$dict)[0];\n    my $first_key_case\
    \ = $first_key =~ /[A-Z]/ ? 'upper' : 'lower';\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/ and $first_key_case eq 'lower') {\n         \
    \   $ret = '';\n            last;\n        }\n        if ($key =~ /[a-z]/ and\
    \ $first_key_case eq 'upper') {\n            $ret = '';\n            last;\n \
    \       }\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $lower = 0;\n\
    \    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~\
    \ /^[a-z]+$/) {\n            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper = 1;\n        } else {\n            $ret = \"\";\n   \
    \         last;\n        }\n    }\n    if ($lower && $upper) {\n        $ret =\
    \ \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $key;\n    my\
    \ $val;\n    my $key_type;\n    while (($key, $val) = each %$dict) {\n       \
    \ if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n          \
    \      $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n  \
    \              $key_type = \"upper\";\n            } else {\n                $ret\
    \ = \"\";\n                last;\n            }\n        } else {\n          \
    \  if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n                $ret =\
    \ \"\";\n                last;\n            } elsif ($key_type eq \"upper\" &&\
    \ $key =~ /^[a-z]+$/) {\n                $ret = \"\";\n                last;\n\
    \            }\n        }\n    }\n    return $ret;\n}", "    my $result = 1;\n\
    \    my $key_type = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } else {\n            if ($key_type eq\
    \ \"lower\" && $key =~ /^[A-Z]+$/) {\n                $result = \"\";\n      \
    \          last;\n            } elsif ($key_type eq \"upper\" && $key =~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case;\n    while (($key, $value) = each %$dict) {\n \
    \       if (defined $case) {\n            if ($case eq 'upper') {\n          \
    \      if ($key =~ /[a-z]/) {\n                    $result = '';\n           \
    \         last;\n                }\n            }\n            else {\n      \
    \          if ($key =~ /[A-Z]/) {\n                    $result = '';\n       \
    \             last;\n                }\n            }\n        }\n        else\
    \ {\n            if ($key =~ /[A-Z]/) {\n                $case = 'upper';\n  \
    \          }\n            else {\n                $case = 'lower';\n         \
    \   }\n        }\n    }\n    return $result;\n}", "    my $result = 1;\n    my\
    \ $key_type = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type\
    \ eq \"\") {\n            $key_type = $key =~ /^[a-z]+$/ ? \"lower\" : \"upper\"\
    ;\n        }\n        if ($key_type eq \"lower\" && $key !~ /^[a-z]+$/) {\n  \
    \          $result = \"\";\n            last;\n        }\n        if ($key_type\
    \ eq \"upper\" && $key !~ /^[A-Z]+$/) {\n            $result = \"\";\n       \
    \     last;\n        }\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
