name: HumanEval_95_check_dict_case
language: pl
prompt: "# Given a hash, return 1 if all keys are strings in lower \n# case or all\
  \ keys are strings in upper case, else return .\n# The function should return  is\
  \ the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" => \"apple\"\
  , \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" =>\
  \ \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"\
  apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
  \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
  \ {\n    my($dict) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
  \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
  }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
  Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = 1;\n    my $key;\n    my $value;\n    my $upper =\
    \ 0;\n    my $lower = 0;\n    while (($key, $value) = each %$dict) {\n       \
    \ if ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } elsif ($key =~ /^[a-z]+$/)\
    \ {\n            $lower++;\n        } else {\n            $result = \"\";\n  \
    \          last;\n        }\n    }\n    if ($upper > 0 && $lower > 0) {\n    \
    \    $result = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    my $val;\n    my $lc_key;\n    my $uc_key;\n    my $lc_val;\n   \
    \ my $uc_val;\n    my $lc_dict = {};\n    my $uc_dict = {};\n    my $lc_dict_str;\n\
    \    my $uc_dict_str;\n    my $dict_str;\n    my $lc_dict_str_sorted;\n    my\
    \ $uc_dict_str_sorted;\n    my $dict_str_sorted;\n    my $lc_dict_str_sorted_uniq;\n\
    \    my $uc_dict_str_sorted_uniq;\n    my $dict_str_sorted_uniq;\n    my $lc_dict_str_sorted_uniq_len;\n\
    \    my $uc_dict_str_sorted_uniq_len;\n    my $dict_str_sorted_uniq_len;\n   \
    \ my $lc_dict_str_sorted_uniq_len_diff;\n    my $uc_dict_str_sorted_uniq_len_diff;\n\
    \    my $dict_str_sorted_uniq_len_diff;\n    my $lc_dict_str_sorted_uniq_len_diff_abs;\n\
    \    my $uc_dict_str_sorted_uniq_len_diff_abs;\n    my $dict_str_sorted_uniq_len_diff_abs;\n\
    \    my $lc_dict_str_sorted_uniq_len_diff_abs_sum;\n    my $uc_dict_str_sorted_uniq_len_diff_abs_sum;\n\
    \    my $dict_str_sorted_uniq_len_diff_abs_sum;\n    my $lc_dict_str_sorted_uniq_len_diff_abs_sum_diff;\n\
    \    my $uc_dict_str_sorted_uniq_len_diff_abs_sum_diff;\n    my $dict_str_sorted_uniq_len_diff_abs_sum_diff;\n\
    \    my $lc_dict_str", "    my $ret = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $ret = \"\"\
    ;\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n  \
    \      $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    if (scalar(keys\
    \ %$dict) == 0) {\n        return $ret;\n    }\n    my $first_key = (keys %$dict)[0];\n\
    \    my $first_key_case = get_case($first_key);\n    foreach my $key (keys %$dict)\
    \ {\n        my $key_case = get_case($key);\n        if ($key_case ne $first_key_case)\
    \ {\n            $ret = \"\";\n            last;\n        }\n    }\n    return\
    \ $ret;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $case;\n  \
    \  my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my\
    \ $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n\
    \    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my\
    \ $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n\
    \    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my\
    \ $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n\
    \    my $I;\n    my $J;\n    my $K;", "    my $ret = 1;\n    my $key;\n    my\
    \ $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $val)\
    \ = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper =\
    \ 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n            $is_lower =\
    \ 1;\n        }\n        else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $ret = \"\";\n \
    \   }\n    return $ret;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n \
    \   my $upper = 0;\n    my $lower = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $upper = 1;\n        }\n    \
    \    if ($key =~ /[a-z]/) {\n            $lower = 1;\n        }\n    }\n    if\
    \ ($upper && $lower) {\n        $ret = \"\";\n    }\n    return $ret;\n}", " \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n   \
    \ my $is_upper = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else {\n  \
    \          $result = \"\";\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $result = \"\";\n    }\n    return $result;\n}", " \
    \   my @keys = keys %$dict;\n    my $flag = 1;\n    foreach my $key (@keys) {\n\
    \        if ($key =~ /[A-Z]/) {\n            $flag = 0;\n            last;\n \
    \       }\n    }\n    if ($flag == 1) {\n        return 1;\n    }\n    $flag =\
    \ 1;\n    foreach my $key (@keys) {\n        if ($key =~ /[a-z]/) {\n        \
    \    $flag = 0;\n            last;\n        }\n    }\n    if ($flag == 1) {\n\
    \        return 1;\n    }\n    return \"\";\n}", "    my $ret = 1;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else\
    \ {\n            $ret = \"\";\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my\
    \ $result = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower =\
    \ 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper =\
    \ 1;\n        }\n        else {\n            $result = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif ($key =~\
    \ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else {\n     \
    \       $result = \"\";\n            last;\n        }\n    }\n    if ($is_empty)\
    \ {\n        $result = \"\";\n    }\n    elsif ($is_lower && $is_upper) {\n  \
    \      $result = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $case = \"\";\n    my $key;\n    foreach $key (keys %$dict) {\n      \
    \  if ($case eq \"\") {\n            if ($key =~ /[A-Z]/) {\n                $case\
    \ = \"upper\";\n            }\n            elsif ($key =~ /[a-z]/) {\n       \
    \         $case = \"lower\";\n            }\n            else {\n            \
    \    $result = \"\";\n                last;\n            }\n        }\n      \
    \  elsif ($case eq \"upper\") {\n            if ($key =~ /[a-z]/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        }\n  \
    \      elsif ($case eq \"lower\") {\n            if ($key =~ /[A-Z]/) {\n    \
    \            $result = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n\
    \        }\n        else {\n            $result = \"\";\n            last;\n \
    \       }\n    }\n    if ($is_lower && $is_upper) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $all_lower = 1;\n    my $all_upper =\
    \ 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n  \
    \          $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n      \
    \      $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $key_type;\n    my $val_type;\n\
    \    my $key_type_prev;\n    my $val_type_prev;\n    my $key_type_prev_prev;\n\
    \    my $val_type_prev_prev;\n    my $key_type_prev_prev_prev;\n    my $val_type_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n  \
    \  my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n   \
    \ my $", "    my $result = 1;\n    my $is_upper = 0;\n    my $is_lower = 0;\n\
    \    foreach my $key (keys %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n    \
    \        $is_upper = 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } else {\n            $result = \"\";\n            last;\n   \
    \     }\n    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n \
    \   }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lc_key;\n    my $uc_key;\n    my $lc_value;\n    my $uc_value;\n    my\
    \ $lc_dict;\n    my $uc_dict;\n    my $lc_dict_keys;\n    my $uc_dict_keys;\n\
    \    my $lc_dict_values;\n    my $uc_dict_values;\n    my $lc_dict_keys_values;\n\
    \    my $uc_dict_keys_values;\n    my $lc_dict_keys_values_sorted;\n    my $uc_dict_keys_values_sorted;\n\
    \    my $lc_dict_keys_values_sorted_string;\n    my $uc_dict_keys_values_sorted_string;\n\
    \    my $lc_dict_keys_values_sorted_string_length;\n    my $uc_dict_keys_values_sorted_string_length;\n\
    \    my $lc_dict_keys_values_sorted_string_length_diff;\n    my $uc_dict_keys_values_sorted_string_length_diff;\n\
    \    my $lc_dict_keys_values_sorted_string_length_diff_abs;\n    my $uc_dict_keys_values_sorted_string_length_diff_abs;\n\
    \    my $lc_dict_keys_values_sorted_string_length_diff_abs_max;\n    my $uc_dict_keys_values_sorted_string_length_diff_abs_max;\n\
    \    my $lc_dict_keys_values_sorted_string_length_diff_abs_max_index;\n    my\
    \ $uc_dict_keys_values_sorted_string_length_diff_abs_max_index;\n    my $lc_dict_keys_values_sorted_string_length_diff_abs_max_index_value;\n\
    \    my $uc_dict_keys_values_sorted_string_length_diff_abs_max_index_value;\n\
    \    my $lc_dict_keys_values_sorted_string_length_diff_abs_max_index_value", " \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $lower_case = 1;\n \
    \   my $upper_case = 1;\n    while (($key, $value) = each %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $lower_case = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $upper_case = 0;\n        }\n    }\n    if ($lower_case\
    \ == 0 && $upper_case == 0) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n   \
    \     }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n       \
    \ }\n    }\n    if ($all_lower || $all_upper) {\n        return 1;\n    }\n  \
    \  return \"\";\n}", "    my $result = 1;\n    my $lower = 0;\n    my $upper =\
    \ 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n           \
    \ $upper = 1;\n        } else {\n            $result = \"\";\n            last;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $first = 1;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($first) {\n            $case = $key =~ /^[a-z]+$/ ? 'lower' : 'upper';\n\
    \            $first = 0;\n        }\n        if ($key =~ /^[a-z]+$/) {\n     \
    \       $result = '' if $case eq 'upper';\n        }\n        elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $result = '' if $case eq 'lower';\n        }\n        else {\n\
    \            $result = '';\n        }\n    }\n    return $result;\n}", "    my\
    \ $is_upper = 1;\n    my $is_lower = 1;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n     \
    \   if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n    }\n   \
    \ return $is_upper || $is_lower;\n}", "    my $result = 1;\n    my $key;\n   \
    \ my $value;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            $result = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    if (scalar(keys(%$dict)) == 0) {\n        return $result;\n\
    \    }\n    while (($key, $value) = each(%$dict)) {\n        if ($case eq \"\"\
    ) {\n            if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\"\
    ;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } elsif ($case eq \"lower\") {\n            if ($key !~\
    \ /^[a-z]+$/) {\n                $result = \"\";\n                last;\n    \
    \        }\n        } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case;\n    while (($key, $value) = each %$dict) {\n \
    \       if ($key =~ /[A-Z]/) {\n            $case = \"upper\";\n        } else\
    \ {\n            $case = \"lower\";\n        }\n        if ($case eq \"upper\"\
    ) {\n            if ($key =~ /[a-z]/) {\n                $result = \"\";\n   \
    \             last;\n            }\n        } else {\n            if ($key =~\
    \ /[A-Z]/) {\n                $result = \"\";\n                last;\n       \
    \     }\n        }\n    }\n    return $result;\n}", "    my $result = 1;\n   \
    \ my $key_type = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } else {\n            if ($key_type eq\
    \ \"lower\" && $key =~ /^[A-Z]+$/) {\n                $result = \"\";\n      \
    \          last;\n            } elsif ($key_type eq \"upper\" && $key =~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "    my $result = \"\";\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key !~ /^[a-z]+$/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ !~ /^[A-Z]+$/) {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower\
    \ || $all_upper) {\n        $result = 1;\n    }\n    return $result;\n}", "  \
    \  my $ret = 1;\n    my $key;\n    my $val;\n    my $case;\n    my $key_case;\n\
    \    my $val_case;\n    my $key_case_count = 0;\n    my $val_case_count = 0;\n\
    \    my $key_case_count_lower = 0;\n    my $val_case_count_lower = 0;\n    my\
    \ $key_case_count_upper = 0;\n    my $val_case_count_upper = 0;\n    my $key_case_count_mixed\
    \ = 0;\n    my $val_case_count_mixed = 0;\n    my $key_case_count_other = 0;\n\
    \    my $val_case_count_other = 0;\n    my $key_case_count_none = 0;\n    my $val_case_count_none\
    \ = 0;\n    my $key_case_count_none_count = 0;\n    my $val_case_count_none_count\
    \ = 0;\n    my $key_case_count_none_count_lower = 0;\n    my $val_case_count_none_count_lower\
    \ = 0;\n    my $key_case_count_none_count_upper = 0;\n    my $val_case_count_none_count_upper\
    \ = 0;\n    my $key_case_count_none_count_mixed = 0;\n    my $val_case_count_none_count_mixed\
    \ = 0;\n    my $key_case_count_none_count_other = 0;\n    my $val_case_count_none_count_other\
    \ = 0;\n    my $key_case_count_none_count_none = 0;\n    my $val_case_count_none_count_none\
    \ = 0;\n    my $key_case_count_none_count_none_count = 0;\n    my $val_case_count_none_count_none_count\
    \ = 0;\n    my $key_case_count_none_count_none_count_lower = 0;\n    my $val_case_count_none_count_none_count_lower\
    \ = 0;\n    my $key_", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $key_case;\n\
    \    my $val_case;\n    my $key_case_prev;\n    my $val_case_prev;\n    my $key_case_first;\n\
    \    my $val_case_first;\n    my $key_case_first_set = 0;\n    my $val_case_first_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $val_case_prev_set = 0;\n    my\
    \ $key_case_set = 0;\n    my $val_case_set = 0;\n    my $key_case_mismatch = 0;\n\
    \    my $val_case_mismatch = 0;\n    my $key_case_mismatch_prev = 0;\n    my $val_case_mismatch_prev\
    \ = 0;\n    my $key_case_mismatch_first = 0;\n    my $val_case_mismatch_first\
    \ = 0;\n    my $key_case_mismatch_first_set = 0;\n    my $val_case_mismatch_first_set\
    \ = 0;\n    my $key_case_mismatch_prev_set = 0;\n    my $val_case_mismatch_prev_set\
    \ = 0;\n    my $key_case_mismatch_set = 0;\n    my $val_case_mismatch_set = 0;\n\
    \    my $key_case_mismatch_prev_set = 0;\n    my $val_case_mismatch_prev_set =\
    \ 0;\n    my $key_case_mismatch_first_set = 0;\n    my $val_case_mismatch_first_set\
    \ = 0;\n    my $key_case_mismatch_first_set = 0;\n    my $val_case_mismatch_first_set\
    \ = 0;\n    my $key_case_mismatch_prev_set = 0;\n    my $val_case_mismatch_prev_set\
    \ = 0;\n    my $key_case_mismatch_first_set =", "    my $ret = 1;\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower\
    \ == 0 && $all_upper == 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}",
  "    my $ret = 1;\n    my $key;\n    my $val;\n    my $lc_key;\n    my $uc_key;\n\
    \    my $lc_val;\n    my $uc_val;\n    my $lc_dict;\n    my $uc_dict;\n    my\
    \ $lc_dict_ref;\n    my $uc_dict_ref;\n    my $lc_dict_ref_ref;\n    my $uc_dict_ref_ref;\n\
    \    my $lc_dict_ref_ref_ref;\n    my $uc_dict_ref_ref_ref;\n    my $lc_dict_ref_ref_ref_ref;\n\
    \    my $uc_dict_ref_ref_ref_ref;\n    my $lc_dict_ref_ref_ref_ref_ref;\n    my\
    \ $uc_dict_ref_ref_ref_ref_ref;\n    my $lc_dict_ref_ref_ref_ref_ref_ref;\n  \
    \  my $uc_dict_ref_ref_ref_ref_ref_ref;\n    my $lc_dict_ref_ref_ref_ref_ref_ref_ref;\n\
    \    my $uc_dict_ref_ref_ref_ref_ref_ref_ref;\n    my $lc_dict_ref_ref_ref_ref_ref_ref_ref_ref;\n\
    \    my $uc_dict_ref_ref_ref_ref_ref_ref_ref_ref;\n    my $lc_dict_ref_ref_ref_ref_ref_ref_ref_ref_ref;\n\
    \    my $uc_dict_ref_ref_ref_ref_ref_ref_ref_ref_ref;\n    my $lc_dict_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref;\n\
    \    my $uc_dict_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref;\n    my $lc_dict_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref;\n\
    \    my $uc_dict_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref;\n    my $", "  \
    \  my $result = 1;\n    my $key;\n    my $value;\n    my $case;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[a-z]/) {\n            $i = 1;\n        }\n\
    \        if ($key =~ /[A-Z]/) {\n            $j = 1;\n        }\n        if ($key\
    \ =~ /[0-9]/) {\n            $k = 1;\n        }\n        if ($key =~ /[!@#$%^&*()_+\\\
    -=\\[\\]{};':\"\\\\|,.<>\\/?]/) {\n            $l", "    my $ret = 1;\n    my\
    \ $is_upper = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n     \
    \       $ret = \"\";\n            last;\n        }\n    }\n    if ($is_lower &&\
    \ $is_upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $result\
    \ = 1;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       }\n        elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n\
    \        }\n        else {\n            $result = \"\";\n            last;\n \
    \       }\n    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my @keys = keys %$dict;\n    my $key = $keys[0];\n\
    \    my $case = $key =~ /[a-z]/ ? 'lower' : 'upper';\n    foreach $key (@keys)\
    \ {\n        if ($case eq 'lower' && $key =~ /[A-Z]/) {\n            return '';\n\
    \        }\n        if ($case eq 'upper' && $key =~ /[a-z]/) {\n            return\
    \ '';\n        }\n    }\n    return 1;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $upper = 1;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $lower = 1;\n        }\n\
    \    }\n    if ($upper && $lower) {\n        $result = \"\";\n    }\n    return\
    \ $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each %$dict) {\n  \
    \      if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n    \
    \    if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        $result = \"\";\n    }\n    return\
    \ $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;\n    while (($key, $val)\
    \ = each %$dict) {\n        $is_empty = 0;\n        if ($key =~ /[a-z]/) {\n \
    \           $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n      \
    \      $is_upper = 1;\n        }\n    }\n    if ($is_empty) {\n        $ret =\
    \ \"\";\n    }\n    elsif ($is_lower && $is_upper) {\n        $ret = \"\";\n \
    \   }\n    return $ret;\n}", "    my $result = 1;\n    my $key_type = \"\";\n\
    \    foreach my $key (keys %$dict) {\n        my $type = \"\";\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $type = \"lower\";\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $type = \"upper\";\n        } else {\n            $result = \"\
    \";\n            last;\n        }\n        if ($key_type eq \"\") {\n        \
    \    $key_type = $type;\n        } elsif ($key_type ne $type) {\n            $result\
    \ = \"\";\n            last;\n        }\n    }\n    return $result;\n}", "   \
    \ my $result = 1;\n    my $key;\n    my $value;\n    my $case = \"\";\n    while\
    \ (($key, $value) = each %$dict) {\n        if ($case eq \"\") {\n           \
    \ if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            }\
    \ elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n         \
    \   } else {\n                $result = \"\";\n                last;\n       \
    \     }\n        } elsif ($case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n  \
    \  my $value;\n    my $key_case = \"\";\n    my $value_case = \"\";\n    my $key_case_previous\
    \ = \"\";\n    my $value_case_previous = \"\";\n    my $key_case_current = \"\"\
    ;\n    my $value_case_current = \"\";\n    my $key_case_flag = 0;\n    my $value_case_flag\
    \ = 0;\n    my $key_case_flag_previous = 0;\n    my $value_case_flag_previous\
    \ = 0;\n    my $key_case_flag_current = 0;\n    my $value_case_flag_current =\
    \ 0;\n    my $key_case_flag_previous_value = 0;\n    my $value_case_flag_previous_value\
    \ = 0;\n    my $key_case_flag_current_value = 0;\n    my $value_case_flag_current_value\
    \ = 0;\n    my $key_case_flag_previous_key = 0;\n    my $value_case_flag_previous_key\
    \ = 0;\n    my $key_case_flag_current_key = 0;\n    my $value_case_flag_current_key\
    \ = 0;\n    my $key_case_flag_previous_value_key = 0;\n    my $value_case_flag_previous_value_key\
    \ = 0;\n    my $key_case_flag_current_value_key = 0;\n    my $value_case_flag_current_value_key\
    \ = 0;\n    my $key_case_flag_previous_value_key_value = 0;\n    my $value_case_flag_previous_value_key_value\
    \ = 0;\n    my $key_case_flag_current_value_key_value = 0;\n    my $value_case_flag_current_value_key_value\
    \ = 0;\n    my $key_case_flag_previous_value_key_value_key = 0;\n    my $value_case_flag_previous_value_key_value_key\
    \ = 0;\n    my $key_", "    my $result = 1;\n    my $key;\n    my $value;\n  \
    \  my $is_lower = 1;\n    my $is_upper = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n\
    \    }\n    if ($is_lower == 0 && $is_upper == 0) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $case = 0;\n   \
    \ my $key;\n    foreach $key (keys %$dict) {\n        if ($case == 0) {\n    \
    \        if ($key =~ /[A-Z]/) {\n                $case = 1;\n            }\n \
    \           elsif ($key =~ /[a-z]/) {\n                $case = 2;\n          \
    \  }\n            else {\n                $result = \"\";\n                last;\n\
    \            }\n        }\n        elsif ($case == 1) {\n            if ($key\
    \ =~ /[a-z]/) {\n                $result = \"\";\n                last;\n    \
    \        }\n        }\n        elsif ($case == 2) {\n            if ($key =~ /[A-Z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        else {\n            $result = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $is_string;\n    my $is_lower;\n    my $is_upper;\n   \
    \ my $is_digit;\n    my $is_alpha;\n    my $is_alnum;\n    my $is_space;\n   \
    \ my $is_cntrl;\n    my $is_graph;\n    my $is_print;\n    my $is_punct;\n   \
    \ my $is_xdigit;\n    my $is_blank;\n    my $is_ascii;\n    my $is_utf8;\n   \
    \ my $is_utf8_cntrl;\n    my $is_utf8_digit;\n    my $is_utf8_graph;\n    my $is_utf8_lower;\n\
    \    my $is_utf8_print;\n    my $is_utf8_punct;\n    my $is_utf8_space;\n    my\
    \ $is_utf8_upper;\n    my $is_utf8_xdigit;\n    my $is_utf8_mark;\n    my $is_utf8_title;\n\
    \    my $is_utf8_defined;\n    my $is_utf8_alnum;\n    my $is_utf8_alpha;\n  \
    \  my $is_utf8_blank;\n    my $is_utf8_cntrl;\n    my $is_utf8_digit;\n    my\
    \ $is_utf8_graph;\n    my $is_utf8_lower;\n    my $is_utf8_print;\n    my $is_utf8_punct;\n\
    \    my $is_utf8_space;\n    my $is_utf8_upper;\n    my $is_utf8_xdigit;\n   \
    \ my $is_utf8_mark;\n    my $is_utf8_title;\n    my $is_utf8_defined;\n    my\
    \ $is_utf8_alnum;\n    my $is_utf8_alpha;\n    my $is_utf8_blank;\n    my $is_utf8_cntrl;\n\
    \    my $is", "    my @keys = keys %$dict;\n    my $flag = 0;\n    my $count =\
    \ 0;\n    my $count1 = 0;\n    foreach my $key (@keys) {\n        if($key =~ /^[a-z]+$/)\
    \ {\n            $count++;\n        }\n        if($key =~ /^[A-Z]+$/) {\n    \
    \        $count1++;\n        }\n    }\n    if($count == scalar(@keys) || $count1\
    \ == scalar(@keys)) {\n        $flag = 1;\n    }\n    return $flag;\n}", "   \
    \ my $result = 1;\n    my $key;\n    my $value;\n    while(($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            if ($key =~ /[a-z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n        else {\n            if ($key =~ /[A-Z]/) {\n              \
    \  $result = \"\";\n                last;\n            }\n        }\n    }\n \
    \   return $result;\n}", "    my $result = 1;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n        \
    \    $upper = 1;\n        }\n    }\n    if ($lower && $upper) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $lower = 0;\n    my $upper = 0;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n\
    \        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n  \
    \      }\n        else {\n            $result = \"\";\n            last;\n   \
    \     }\n    }\n    if ($lower && $upper) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\
    \ else {\n            $result = \"\";\n            last;\n        }\n    }\n \
    \   if ($is_upper && $is_lower) {\n        $result = \"\";\n    }\n    return\
    \ $result;\n}", "    my $ret = 1;\n    my $key;\n    foreach $key (keys %$dict)\
    \ {\n        if (ref($key) eq \"\") {\n            if ($key =~ /[A-Z]/) {\n  \
    \              if ($ret == 0) {\n                    return \"\";\n          \
    \      }\n                $ret = 2;\n            }\n            elsif ($key =~\
    \ /[a-z]/) {\n                if ($ret == 2) {\n                    return \"\"\
    ;\n                }\n                $ret = 0;\n            }\n            else\
    \ {\n                return \"\";\n            }\n        }\n        else {\n\
    \            return \"\";\n        }\n    }\n    return $ret;\n}", "    my $result\
    \ = 1;\n    my $first_key = (keys %$dict)[0];\n    my $first_key_case = $first_key\
    \ =~ /[A-Z]/ ? 'upper' : 'lower';\n    foreach my $key (keys %$dict) {\n     \
    \   if ($key =~ /[A-Z]/ && $first_key_case eq 'lower') {\n            $result\
    \ = '';\n            last;\n        }\n        if ($key =~ /[a-z]/ && $first_key_case\
    \ eq 'upper') {\n            $result = '';\n            last;\n        }\n   \
    \ }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       }\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n   \
    \     }\n    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n \
    \   }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $lc = 0;\n    my $uc = 0;\n    my $n = 0;\n    while (($key, $val) = each\
    \ %$dict) {\n        $n++;\n        if ($key =~ /^[a-z]+$/) {\n            $lc++;\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            $uc++;\n        } else {\n\
    \            $ret = \"\";\n            last;\n        }\n    }\n    if ($n > 0\
    \ && $ret == 1) {\n        if ($lc > 0 && $uc > 0) {\n            $ret = \"\"\
    ;\n        }\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $lower = 0;\n    my $upper = 0;\n    while (($key, $val)\
    \ = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n        } else\
    \ {\n            $ret = \"\";\n            last;\n        }\n    }\n    if ($lower\
    \ && $upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    my $is_empty = 1;\n    while (($key, $value) = each %$dict) {\n  \
    \      $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            $result = \"\";\n            last;\n        }\n\
    \    }\n    if ($is_empty) {\n        $result = \"\";\n    } elsif ($is_lower\
    \ && $is_upper) {\n        $result = \"\";\n    }\n    return $result;\n}", " \
    \   my $result = 1;\n    my $key_type = \"\";\n    my $key_type_count = 0;\n \
    \   foreach my $key (keys %$dict) {\n        if ($key_type_count == 0) {\n   \
    \         if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n\
    \            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n            $key_type_count++;\n        } else {\n           \
    \ if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n                $result\
    \ = \"\";\n                last;\n            } elsif ($key_type eq \"upper\"\
    \ && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $ret = 1;\n\
    \    my $key;\n    my $value;\n    my $key_type = \"\";\n    my $value_type =\
    \ \"\";\n    my $key_type_count = 0;\n    my $value_type_count = 0;\n    my $key_type_count_lower\
    \ = 0;\n    my $key_type_count_upper = 0;\n    my $value_type_count_lower = 0;\n\
    \    my $value_type_count_upper = 0;\n    my $key_type_count_string = 0;\n   \
    \ my $value_type_count_string = 0;\n    my $key_type_count_number = 0;\n    my\
    \ $value_type_count_number = 0;\n    my $key_type_count_other = 0;\n    my $value_type_count_other\
    \ = 0;\n    my $key_type_count_mixed = 0;\n    my $value_type_count_mixed = 0;\n\
    \    my $key_type_count_mixed_lower = 0;\n    my $key_type_count_mixed_upper =\
    \ 0;\n    my $value_type_count_mixed_lower = 0;\n    my $value_type_count_mixed_upper\
    \ = 0;\n    my $key_type_count_mixed_string = 0;\n    my $value_type_count_mixed_string\
    \ = 0;\n    my $key_type_count_mixed_number = 0;\n    my $value_type_count_mixed_number\
    \ = 0;\n    my $key_type_count_mixed_other = 0;\n    my $value_type_count_mixed_other\
    \ = 0;\n    my $key_type_count_mixed_lower_string = 0;\n    my $key_type_count_mixed_upper_string\
    \ = 0;\n    my $value_type_count_mixed_lower_string = 0;\n    my $value_type_count_mixed_upper_string\
    \ = 0;\n    my $key_type_count_mixed_lower_number = 0;\n    my $key_type_count_mixed_",
  "    my $ret = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my\
    \ $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n\
    \        }\n    }\n    if ($all_lower == 0 && $all_upper == 0) {\n        $ret\
    \ = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $key;\n    my\
    \ $val;\n    my $case;\n    my $first = 1;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($first) {\n            $case = ($key =~ /^[a-z]+$/) ? 'lower'\
    \ : 'upper';\n            $first = 0;\n        }\n        if ($case eq 'lower'\
    \ && $key !~ /^[a-z]+$/) {\n            $ret = '';\n            last;\n      \
    \  }\n        if ($case eq 'upper' && $key !~ /^[A-Z]+$/) {\n            $ret\
    \ = '';\n            last;\n        }\n    }\n    return $ret;\n}", "    my $result\
    \ = 1;\n    my $lower = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[a-z]/) {\n            $lower = 1;\n        }\n    \
    \    if ($key =~ /[A-Z]/) {\n            $upper = 1;\n        }\n    }\n    if\
    \ ($lower && $upper) {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower = 1;\n    my\
    \ $is_upper = 1;\n    while (($key, $value) = each %$dict) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_upper = 0;\n        }\n    }\n    if ($is_lower == 0 && $is_upper\
    \ == 0) {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $ret\
    \ = 1;\n    my $key;\n    my $val;\n    my $key_type;\n    my $val_type;\n   \
    \ my $key_type_first = \"\";\n    my $val_type_first = \"\";\n    my $key_type_second\
    \ = \"\";\n    my $val_type_second = \"\";\n    my $key_type_third = \"\";\n \
    \   my $val_type_third = \"\";\n    my $key_type_fourth = \"\";\n    my $val_type_fourth\
    \ = \"\";\n    my $key_type_fifth = \"\";\n    my $val_type_fifth = \"\";\n  \
    \  my $key_type_sixth = \"\";\n    my $val_type_sixth = \"\";\n    my $key_type_seventh\
    \ = \"\";\n    my $val_type_seventh = \"\";\n    my $key_type_eighth = \"\";\n\
    \    my $val_type_eighth = \"\";\n    my $key_type_ninth = \"\";\n    my $val_type_ninth\
    \ = \"\";\n    my $key_type_tenth = \"\";\n    my $val_type_tenth = \"\";\n  \
    \  my $key_type_eleventh = \"\";\n    my $val_type_eleventh = \"\";\n    my $key_type_twelfth\
    \ = \"\";\n    my $val_type_twelfth = \"\";\n    my $key_type_thirteenth = \"\"\
    ;\n    my $val_type_thirteenth = \"\";\n    my $key_type_fourteenth = \"\";\n\
    \    my $val_type_fourteenth = \"\";\n    my $key_type_fifteenth = \"\";\n   \
    \ my $val_type_fifteenth = \"\";\n    my $key_type_sixteenth = \"\";\n    my $val_type_sixteenth\
    \ = \"\";\n    my $key_type_seventeenth = \"\";\n    my $val_type_seventeenth\
    \ = \"\";\n    my $key_type_eighteenth = \"\";\n    my $val_type_eighteenth =\
    \ \"\";\n    my $key_type_nineteenth = \"\";\n", "    my $result = 1;\n    my\
    \ $key;\n    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $upper++;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $lower++;\n        }\n\
    \    }\n    if ($upper > 0 && $lower > 0) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_count_lower = 0;\n   \
    \ my $key_type_count_upper = 0;\n    my $value_type_count_lower = 0;\n    my $value_type_count_upper\
    \ = 0;\n    my $key_type_count_string = 0;\n    my $value_type_count_string =\
    \ 0;\n    my $key_type_count_number = 0;\n    my $value_type_count_number = 0;\n\
    \    my $key_type_count_other = 0;\n    my $value_type_count_other = 0;\n    my\
    \ $key_type_count_mixed = 0;\n    my $value_type_count_mixed = 0;\n    my $key_type_count_mixed_lower\
    \ = 0;\n    my $key_type_count_mixed_upper = 0;\n    my $value_type_count_mixed_lower\
    \ = 0;\n    my $value_type_count_mixed_upper = 0;\n    my $key_type_count_mixed_string\
    \ = 0;\n    my $value_type_count_mixed_string = 0;\n    my $key_type_count_mixed_number\
    \ = 0;\n    my $value_type_count_mixed_number = 0;\n    my $key_type_count_mixed_other\
    \ = 0;\n    my $value_type_count_mixed_other = 0;\n    my $key_type_count_mixed_lower_string\
    \ = 0;\n    my $key_type_count_mixed_upper_string = 0;\n    my $value_type_count_mixed_lower_string\
    \ = 0;\n    my $value_type_count_mixed_upper_string = 0;\n    my $key_type_count_mixed_lower_number\
    \ = 0;\n    my $key_type_count_mixed_", "    my $result = 1;\n    my $lower_case\
    \ = 0;\n    my $upper_case = 0;\n    my $key;\n    foreach $key (keys %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n       \
    \ }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n    \
    \    }\n        else {\n            $result = \"\";\n            last;\n     \
    \   }\n    }\n    if ($lower_case && $upper_case) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my($key, $value);\n    my($upper_case) =\
    \ 1;\n    my($lower_case) = 1;\n    while (($key, $value) = each %$dict) {\n \
    \       if ($key =~ /[A-Z]/) {\n            $lower_case = 0;\n        }\n    \
    \    if ($key =~ /[a-z]/) {\n            $upper_case = 0;\n        }\n    }\n\
    \    if ($upper_case) {\n        return 1;\n    }\n    if ($lower_case) {\n  \
    \      return 1;\n    }\n    return \"\";\n}", "    my $result = 1;\n    my $lower\
    \ = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper++;\n        } else {\n            $result = \"\";\n  \
    \          last;\n        }\n    }\n    if ($lower && $upper) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type = \"\";\n    my $value_type = \"\";\n    my\
    \ $key_type_count = 0;\n    my $value_type_count = 0;\n    my $key_type_count_upper\
    \ = 0;\n    my $key_type_count_lower = 0;\n    my $value_type_count_upper = 0;\n\
    \    my $value_type_count_lower = 0;\n    my $key_type_count_string = 0;\n   \
    \ my $value_type_count_string = 0;\n    my $key_type_count_number = 0;\n    my\
    \ $value_type_count_number = 0;\n    my $key_type_count_other = 0;\n    my $value_type_count_other\
    \ = 0;\n    my $key_type_count_mixed = 0;\n    my $value_type_count_mixed = 0;\n\
    \    my $key_type_count_mixed_upper = 0;\n    my $key_type_count_mixed_lower =\
    \ 0;\n    my $value_type_count_mixed_upper = 0;\n    my $value_type_count_mixed_lower\
    \ = 0;\n    my $key_type_count_mixed_string = 0;\n    my $value_type_count_mixed_string\
    \ = 0;\n    my $key_type_count_mixed_number = 0;\n    my $value_type_count_mixed_number\
    \ = 0;\n    my $key_type_count_mixed_other = 0;\n    my $value_type_count_mixed_other\
    \ = 0;\n    my $key_type_count_mixed_upper_string = 0;\n    my $key_type_count_mixed_lower_string\
    \ = 0;\n    my $value_type_count_mixed_upper_string = 0;\n    my $value_type_count_mixed_lower_string\
    \ = 0;\n    my $key_type_count_mixed_upper_number = 0;\n    my $key_type_count_mixed_",
  "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    my $is_empty = 1;\n    while (($key, $val) = each %$dict) {\n    \
    \    $is_empty = 0;\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n     \
    \   }\n    }\n    if ($is_empty) {\n        $ret = \"\";\n    } elsif ($is_upper\
    \ && $is_lower) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my\
    \ $ret = 1;\n    my $first_key = (keys %$dict)[0];\n    my $case = $first_key\
    \ =~ /[a-z]/ ? 'lower' : 'upper';\n    foreach my $key (keys %$dict) {\n     \
    \   if ($case eq 'lower' && $key =~ /[A-Z]/) {\n            $ret = '';\n     \
    \       last;\n        }\n        if ($case eq 'upper' && $key =~ /[a-z]/) {\n\
    \            $ret = '';\n            last;\n        }\n    }\n    return $ret;\n\
    }", "    my $is_upper = 1;\n    my $is_lower = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n \
    \       if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n    }\n\
    \    if ($is_upper || $is_lower) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key_type eq \"\") {\n            $key_type = is_upper($key)\
    \ ? \"upper\" : \"lower\";\n        }\n        if ($key_type eq \"upper\" && !is_upper($key))\
    \ {\n            $result = \"\";\n            last;\n        }\n        if ($key_type\
    \ eq \"lower\" && !is_lower($key)) {\n            $result = \"\";\n          \
    \  last;\n        }\n    }\n    return $result;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while\
    \ (($key, $val) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n        \
    \    $is_upper = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n       \
    \     $is_lower = 1;\n        }\n        else {\n            $ret = \"\";\n  \
    \          last;\n        }\n    }\n    if ($is_upper && $is_lower) {\n      \
    \  $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if (!$all_lower\
    \ && !$all_upper) {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    my $flag = 1;\n    my $key;\n    my $value;\n    my $count = 0;\n    while\
    \ (($key, $value) = each %$dict) {\n        if ($count == 0) {\n            if\
    \ ($key =~ /[A-Z]/) {\n                $flag = 2;\n            }\n           \
    \ else {\n                $flag = 1;\n            }\n        }\n        if ($flag\
    \ == 1) {\n            if ($key =~ /[A-Z]/) {\n                return \"\";\n\
    \            }\n        }\n        else {\n            if ($key =~ /[a-z]/) {\n\
    \                return \"\";\n            }\n        }\n        $count++;\n \
    \   }\n    if ($count == 0) {\n        return \"\";\n    }\n    return $flag;\n\
    }", "    my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        }\n  \
    \  }\n    return $result;\n}", "    my $ret = 1;\n    my $upper = 0;\n    my $lower\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n\
    \            $upper = 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n           \
    \ $lower = 1;\n        } else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($upper && $lower) {\n        $ret = \"\";\n    }\n\
    \    return $ret;\n}", "    my $result = 1;\n    my $all_upper = 1;\n    my $all_lower\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    if ($all_upper == 0 && $all_lower\
    \ == 0) {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $ret\
    \ = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n   \
    \     }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n       \
    \ }\n    }\n    if (!$all_lower && !$all_upper) {\n        $ret = \"\";\n    }\n\
    \    return $ret;\n}", "    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            }\n  \
    \          elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\"\
    ;\n            }\n            else {\n                $result = \"\";\n      \
    \          last;\n            }\n        }\n        elsif ($key_type eq \"lower\"\
    ) {\n            if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n\
    \                last;\n            }\n        }\n        elsif ($key_type eq\
    \ \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    foreach $key (keys %$dict) {\n        $val\
    \ = $dict->{$key};\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n     \
    \   }\n    }\n    if ($is_upper && $is_lower) {\n        $ret = \"\";\n    }\n\
    \    return $ret;\n}", "    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    my $is_empty = 1;\n    foreach my $key (keys %$dict) {\n        $is_empty\
    \ = 0;\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n      \
    \  } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    if\
    \ ($is_lower && $is_upper) {\n        $result = \"\";\n    } elsif ($is_empty)\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n\
    \    my $key;\n    my $val;\n    my $key_type;\n    my $val_type;\n    my $key_type_prev;\n\
    \    my $val_type_prev;\n    my $key_type_first;\n    my $val_type_first;\n  \
    \  my $key_type_second;\n    my $val_type_second;\n    my $key_type_third;\n \
    \   my $val_type_third;\n    my $key_type_fourth;\n    my $val_type_fourth;\n\
    \    my $key_type_fifth;\n    my $val_type_fifth;\n    my $key_type_sixth;\n \
    \   my $val_type_sixth;\n    my $key_type_seventh;\n    my $val_type_seventh;\n\
    \    my $key_type_eighth;\n    my $val_type_eighth;\n    my $key_type_ninth;\n\
    \    my $val_type_ninth;\n    my $key_type_tenth;\n    my $val_type_tenth;\n \
    \   my $key_type_eleventh;\n    my $val_type_eleventh;\n    my $key_type_twelfth;\n\
    \    my $val_type_twelfth;\n    my $key_type_thirteenth;\n    my $val_type_thirteenth;\n\
    \    my $key_type_fourteenth;\n    my $val_type_fourteenth;\n    my $key_type_fifteenth;\n\
    \    my $val_type_fifteenth;\n    my $key_type_sixteenth;\n    my $val_type_sixteenth;\n\
    \    my $key_type_seventeenth;\n    my $val_type_seventeenth;\n    my $key_type_eighteenth;\n\
    \    my $val_type_eighteenth;\n    my $key_type_nineteenth;\n    my $val_type_nineteenth;\n\
    \    my $key_type_twentieth;\n    my $val_type_twentieth;\n    my $key_type_twentyfirst;\n\
    \    my $val_type_", "    my $result = 1;\n    my $key_type = \"\";\n    my $key;\n\
    \    foreach $key (keys %$dict) {\n        if ($key_type eq \"\") {\n        \
    \    if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n     \
    \       } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } elsif ($key_type eq \"lower\") {\n            if ($key\
    \ !~ /^[a-z]+$/) {\n                $result = \"\";\n                last;\n \
    \           }\n        } elsif ($key_type eq \"upper\") {\n            if ($key\
    \ !~ /^[A-Z]+$/) {\n                $result = \"\";\n                last;\n \
    \           }\n        }\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $lower = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n        } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $upper = 1;\n        } else {\n            $result\
    \ = \"\";\n            last;\n        }\n    }\n    if ($lower && $upper) {\n\
    \        $result = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n\
    \    my $key;\n    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    my\
    \ $count = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key =~\
    \ /[A-Z]/) {\n            $upper = 1;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $lower = 1;\n        }\n        $count++;\n    }\n    if ($count\
    \ == 0) {\n        $ret = \"\";\n    }\n    elsif ($upper && $lower) {\n     \
    \   $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_count = 0;\n    my $lower_count = 0;\n    my $upper_count\
    \ = 0;\n    my $other_count = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        $key_count++;\n        if ($key =~ /^[a-z]+$/) {\n            $lower_count++;\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper_count++;\n       \
    \ } else {\n            $other_count++;\n        }\n    }\n    if ($lower_count\
    \ > 0 && $upper_count > 0) {\n        $result = \"\";\n    } elsif ($other_count\
    \ > 0) {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $count = 0;\n    my $lower = 0;\n\
    \    my $upper = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key\
    \ =~ /[a-z]/) {\n            $lower++;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $upper++;\n        }\n        $count++;\n    }\n    if ($count\
    \ > 0 && $lower > 0 && $upper > 0) {\n        $result = \"\";\n    }\n    return\
    \ $result;\n}", "    my $ret = 1;\n    my $key;\n    my $value;\n    my $key_type;\n\
    \    my $value_type;\n    my $key_type_count = 0;\n    my $value_type_count =\
    \ 0;\n    my $key_type_prev;\n    my $value_type_prev;\n    my $key_type_prev_count\
    \ = 0;\n    my $value_type_prev_count = 0;\n    my $key_type_prev_prev;\n    my\
    \ $value_type_prev_prev;\n    my $key_type_prev_prev_count = 0;\n    my $value_type_prev_prev_count\
    \ = 0;\n    my $key_type_prev_prev_prev;\n    my $value_type_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_count = 0;\n    my $value_type_prev_prev_prev_count\
    \ = 0;\n    my $key_type_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_count = 0;\n    my $value_type_prev_prev_prev_prev_count\
    \ = 0;\n    my $key_type_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_count = 0;\n    my $value_type_prev_prev_prev_prev_prev_count\
    \ = 0;\n    my $key_type_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_count = 0;\n    my $value_type_prev_prev_prev_prev_prev_prev_count\
    \ = 0;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev_prev;",
  "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_upper = 0;\n    my\
    \ $is_lower = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        if ($key =~\
    \ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n    }\n    if ($is_upper\
    \ && $is_lower) {\n        $result = \"\";\n    }\n    return $result;\n}", " \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $is_upper = 0;\n   \
    \ my $is_lower = 0;\n    my $is_empty = 1;\n    while (($key, $value) = each %$dict)\
    \ {\n        $is_empty = 0;\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       } else {\n            $result = \"\";\n            last;\n        }\n\
    \    }\n    if ($is_empty) {\n        $result = \"\";\n    } elsif ($is_upper\
    \ && $is_lower) {\n        $result = \"\";\n    }\n    return $result;\n}", " \
    \   my $result = 1;\n    my $lower = 1;\n    my $upper = 1;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $lower = 0;\n \
    \       }\n        if ($key =~ /[a-z]/) {\n            $upper = 0;\n        }\n\
    \    }\n    if ($lower == 0 && $upper == 0) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lc = 0;\n    my $uc = 0;\n    while (($key, $val) = each %$dict) {\n      \
    \  if ($key =~ /^[a-z]+$/) {\n            $lc++;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $uc++;\n        } else {\n            $ret = \"\";\n        \
    \    last;\n        }\n    }\n    if ($lc > 0 && $uc > 0) {\n        $ret = \"\
    \";\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $case = \"\";\n\
    \    foreach my $key (keys %$dict) {\n        if ($case eq \"\") {\n         \
    \   if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\";\n          \
    \  } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n      \
    \      } else {\n                $result = \"\";\n                last;\n    \
    \        }\n        } else {\n            if ($case eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($case eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\"\
    ;\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "    my($key, $value);\n    my($lower, $upper);\n    $lower = $upper = 1;\n\
    \    while(($key, $value) = each %$dict) {\n        if($key =~ /[A-Z]/) {\n  \
    \          $lower = 0;\n        }\n        if($key =~ /[a-z]/) {\n           \
    \ $upper = 0;\n        }\n    }\n    if($lower || $upper) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 1;\n    my $is_upper = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n\
    \    }\n    if ($is_lower == 0 && $is_upper == 0) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $count = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($count == 0) {\n            $case = $key;\n        }\n        if\
    \ ($key =~ /[A-Z]/) {\n            $case = \"upper\";\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $case = \"lower\";\n        }\n        if ($case\
    \ eq \"upper\") {\n            if ($key =~ /[a-z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n        if ($case\
    \ eq \"lower\") {\n            if ($key =~ /[A-Z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n        $count++;\n\
    \    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $case;\n    my $key_case;\n    my $val_case;\n    my $key_case_upper;\n\
    \    my $key_case_lower;\n    my $val_case_upper;\n    my $val_case_lower;\n \
    \   my $key_case_upper_count;\n    my $key_case_lower_count;\n    my $val_case_upper_count;\n\
    \    my $val_case_lower_count;\n    my $key_case_upper_count_prev;\n    my $key_case_lower_count_prev;\n\
    \    my $val_case_upper_count_prev;\n    my $val_case_lower_count_prev;\n    my\
    \ $key_case_upper_count_curr;\n    my $key_case_lower_count_curr;\n    my $val_case_upper_count_curr;\n\
    \    my $val_case_lower_count_curr;\n    my $key_case_upper_count_next;\n    my\
    \ $key_case_lower_count_next;\n    my $val_case_upper_count_next;\n    my $val_case_lower_count_next;\n\
    \    my $key_case_upper_count_prev_next;\n    my $key_case_lower_count_prev_next;\n\
    \    my $val_case_upper_count_prev_next;\n    my $val_case_lower_count_prev_next;\n\
    \    my $key_case_upper_count_curr_next;\n    my $key_case_lower_count_curr_next;\n\
    \    my $val_case_upper_count_curr_next;\n    my $val_case_lower_count_curr_next;\n\
    \    my $key_case_upper_count_prev_curr;\n    my $key_case_lower_count_prev_curr;\n\
    \    my $val_case_upper_count_prev_curr;\n    my $val_case_lower_count_prev_curr;\n\
    \    my $key_case_upper_", "    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        my $key_case = $key =~ /^[a-z]+$/ ? \"lower\"\
    \ : \"upper\";\n        if ($case eq \"\") {\n            $case = $key_case;\n\
    \        } elsif ($case ne $key_case) {\n            $result = \"\";\n       \
    \     last;\n        }\n    }\n    return $result;\n}", "    my $key;\n    my\
    \ $val;\n    my $ret = 1;\n    my $lower = 1;\n    my $upper = 1;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $lower =\
    \ 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $upper = 0;\n   \
    \     }\n    }\n    if ($lower == 0 && $upper == 0) {\n        $ret = \"\";\n\
    \    }\n    return $ret;\n}", "    my $result = 1;\n    my $key_type = \"\";\n\
    \    foreach my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n     \
    \       if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n  \
    \          } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } else {\n            if ($key_type eq \"lower\" && $key\
    \ =~ /^[A-Z]+$/) {\n                $result = \"\";\n                last;\n \
    \           } elsif ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n       \
    \         $result = \"\";\n                last;\n            }\n        }\n \
    \   }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    my $is_mixed = 0;\n    my $is_empty\
    \ = 1;\n    while (($key, $val) = each %$dict) {\n        $is_empty = 0;\n   \
    \     if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n           \
    \ $is_mixed = 1;\n        }\n    }\n    if ($is_empty) {\n        $ret = \"\"\
    ;\n    } elsif ($is_lower && $is_upper) {\n        $ret = \"\";\n    } elsif ($is_mixed)\
    \ {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $all_lower = 1;\n\
    \    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }", "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_upper = 0;\n\
    \    my $is_lower = 0;\n    while (($key, $value) = each %$dict) {\n        if\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n    }\n    if ($is_upper\
    \ && $is_lower) {\n        $result = \"\";\n    }\n    return $result;\n}", " \
    \   my($key, $value);\n    my($lower_case) = 1;\n    my($upper_case) = 1;\n  \
    \  my($result) = 1;\n    while (($key, $value) = each %$dict) {\n        if ($lower_case)\
    \ {\n            $lower_case = ($key =~ /^[a-z]+$/);\n        }\n        if ($upper_case)\
    \ {\n            $upper_case = ($key =~ /^[A-Z]+$/);\n        }\n    }\n    if\
    \ ($lower_case || $upper_case) {\n        $result = 1;\n    } else {\n       \
    \ $result = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n    my\
    \ $key;\n    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $upper++;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $lower++;\n        }\n\
    \    }\n    if ($upper > 0 && $lower > 0) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lc_key;\n    my $uc_key;\n    my $lc_dict = {};\n    my $uc_dict = {};\n  \
    \  while (($key, $val) = each %$dict) {\n        $lc_key = lc($key);\n       \
    \ $uc_key = uc($key);\n        if (exists $lc_dict->{$lc_key}) {\n           \
    \ $ret = \"\";\n            last;\n        }\n        if (exists $uc_dict->{$uc_key})\
    \ {\n            $ret = \"\";\n            last;\n        }\n        if ($lc_key\
    \ eq $key) {\n            $lc_dict->{$lc_key} = $val;\n        }\n        if ($uc_key\
    \ eq $key) {\n            $uc_dict->{$uc_key} = $val;\n        }\n    }\n    return\
    \ $ret;\n}", "    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper = 0;\n\
    \    foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n       \
    \     $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n            $is_upper\
    \ = 1;\n        }\n    }\n    if ($is_lower && $is_upper) {\n        $result =\
    \ \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $result = \"\";\n    }\n    return $result;\n}", " \
    \   my $ret = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n\
    \        }\n    }\n    if (!($all_lower || $all_upper)) {\n        $ret = \"\"\
    ;\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $is_lower = 0;\n   \
    \ my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~\
    \ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        } else {\n            $ret = \"\";\n\
    \            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n    \
    \    $ret = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $key_type\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type eq \"\"\
    ) {\n            if ($key =~ /[a-z]/) {\n                $key_type = \"lower\"\
    ;\n            } elsif ($key =~ /[A-Z]/) {\n                $key_type = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } elsif ($key_type eq \"lower\") {\n            if ($key\
    \ =~ /[A-Z]/) {\n                $result = \"\";\n                last;\n    \
    \        }\n        } elsif ($key_type eq \"upper\") {\n            if ($key =~\
    \ /[a-z]/) {\n                $result = \"\";\n                last;\n       \
    \     }\n        }\n    }\n    return $result;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    my $val;\n    my $key_type;\n    my $val_type;\n    my $key_type_prev;\n\
    \    my $val_type_prev;\n    while (($key, $val) = each %$dict) {\n        $key_type\
    \ = ref($key);\n        $val_type = ref($val);\n        if ($key_type_prev &&\
    \ $key_type_prev ne $key_type) {\n            $ret = '';\n            last;\n\
    \        }\n        if ($val_type_prev && $val_type_prev ne $val_type) {\n   \
    \         $ret = '';\n            last;\n        }\n        $key_type_prev = $key_type;\n\
    \        $val_type_prev = $val_type;\n    }\n    return $ret;\n}", "    my($key,\
    \ $val);\n    my($lower, $upper);\n    my($ret) = 1;\n    while (($key, $val)\
    \ = each %$dict) {\n        if ($key =~ /[a-z]/) {\n            $lower = 1;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $upper = 1;\n        }\n\
    \    }\n    if ($lower && $upper) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key_type eq \"\") {\n            $key_type = ($key =~\
    \ /^[a-z]+$/) ? \"lower\" : \"upper\";\n        }\n        if ($key_type eq \"\
    lower\" && $key !~ /^[a-z]+$/) {\n            $result = \"\";\n            last;\n\
    \        }\n        if ($key_type eq \"upper\" && $key !~ /^[A-Z]+$/) {\n    \
    \        $result = \"\";\n            last;\n        }\n    }\n    return $result;\n\
    }", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $key_type;\n    my $val_type;\n\
    \    my $key_type_prev;\n    my $val_type_prev;\n    my $key_type_prev_prev;\n\
    \    my $val_type_prev_prev;\n    my $key_type_prev_prev_prev;\n    my $val_type_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n  \
    \  my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n   \
    \ my $", "    my $result = 1;\n    my $lower = 0;\n    my $upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower\
    \ = 1;\n        }\n        if ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $is_lower = 0;\n    my\
    \ $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        }\n        else {\n            $result\
    \ = 0;\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $result = 0;\n    }\n    return $result;\n}", "    my $is_lower = 0;\n\
    \    my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        if ($key =~\
    \ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        return \"\";\n    }\n    return 1;\n}", "    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    return $all_lower\
    \ || $all_upper;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    my $is_mixed = 0;\n    while (($key, $val)\
    \ = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower =\
    \ 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n   \
    \     } else {\n            $is_mixed = 1;\n        }\n    }\n    if ($is_mixed\
    \ || ($is_lower && $is_upper)) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my $ret = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n\
    \        }\n    }\n    if ($all_lower == 0 && $all_upper == 0) {\n        $ret\
    \ = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $lower =\
    \ 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /[a-z]/) {\n            $lower = 1;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $upper = 1;\n        }\n    }\n    if ($lower && $upper) {\n\
    \        $result = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $is_lower = 0;\n    my $is_upper = 0;\n\
    \    while (($key, $value) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $result =\
    \ \"\";\n            last;\n        }\n    }\n    if ($is_lower && $is_upper)\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $result\
    \ = 1;\n    my $upper = 0;\n    my $lower = 0;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } elsif\
    \ ($key =~ /^[a-z]+$/) {\n            $lower++;\n        } else {\n          \
    \  $result = \"\";\n            last;\n        }\n    }\n    if ($upper > 0 &&\
    \ $lower > 0) {\n        $result = \"\";\n    }\n    return $result;\n}", "  \
    \  my $ret = 1;\n    my $key;\n    my $val;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n           \
    \ $upper = 1;\n        } else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($lower && $upper) {\n        $ret = \"\";\n    }\n\
    \    return $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n  \
    \  my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n\
    \    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n    }\n  \
    \  return $result;\n}", "    my $ret = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $ret = \"\"\
    ;\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n  \
    \      $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $case\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        if ($case eq \"\") {\n\
    \            if ($key =~ /[A-Z]/) {\n                $case = \"upper\";\n    \
    \        } else {\n                $case = \"lower\";\n            }\n       \
    \ }\n        if ($case eq \"upper\" && $key =~ /[a-z]/) {\n            $ret =\
    \ \"\";\n            last;\n        }\n        if ($case eq \"lower\" && $key\
    \ =~ /[A-Z]/) {\n            $ret = \"\";\n            last;\n        }\n    }\n\
    \    return $ret;\n}", "    my $ret = 1;\n    my $key;\n    my $value;\n    my\
    \ $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper\
    \ = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n\
    \        }\n        if ($is_upper && $is_lower) {\n            $is_mixed = 1;\n\
    \            last;\n        }\n    }\n    if ($is_mixed) {\n        $ret = \"\"\
    ;\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type;\n    while (($key, $value) = each %$dict) {\n        if ($key_type\
    \ eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type\
    \ = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type\
    \ = \"upper\";\n            } else {\n                $result = \"\";\n      \
    \          last;\n            }\n        } elsif ($key_type eq \"lower\") {\n\
    \            if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n    \
    \            last;\n            }\n        } elsif ($key_type eq \"upper\") {\n\
    \            if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n    \
    \            last;\n            }\n        }\n    }\n    return $result;\n}",
  "    my($key, $val);\n    my($lower, $upper);\n    $lower = $upper = 1;\n    while(($key,\
    \ $val) = each %$dict) {\n        if($key =~ /[A-Z]/) {\n            $lower =\
    \ 0;\n        } else {\n            $upper = 0;\n        }\n    }\n    return\
    \ $lower || $upper;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 1;\n    my $is_upper = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n\
    \    }\n    if ($is_lower == 0 && $is_upper == 0) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $first_key;\n    my $first_value;\n    my $first_key_type;\n    my $first_value_type;\n\
    \    my $key_type;\n    my $value_type;\n    my $key_case;\n    my $value_case;\n\
    \    my $first_key_case;\n    my $first_value_case;\n    my $key_count = 0;\n\
    \    my $value_count = 0;\n    my $key_case_count = 0;\n    my $value_case_count\
    \ = 0;\n    my $first_key_case_count = 0;\n    my $first_value_case_count = 0;\n\
    \    my $key_case_match = 0;\n    my $value_case_match = 0;\n    my $first_key_case_match\
    \ = 0;\n    my $first_value_case_match = 0;\n    my $key_case_mismatch = 0;\n\
    \    my $value_case_mismatch = 0;\n    my $first_key_case_mismatch = 0;\n    my\
    \ $first_value_case_mismatch = 0;\n    my $key_case_upper = 0;\n    my $value_case_upper\
    \ = 0;\n    my $first_key_case_upper = 0;\n    my $first_value_case_upper = 0;\n\
    \    my $key_case_lower = 0;\n    my $value_case_lower = 0;\n    my $first_key_case_lower\
    \ = 0;\n    my $first_value_case_lower = 0;\n    my $key_case_mixed = 0;\n   \
    \ my $value_case_mixed = 0;\n    my $first_key_case_mixed = 0;\n    my $first_value_case_mixed\
    \ = 0;\n    my $key_case_upper_count = 0;\n    my $value_case_upper_count = 0;\n\
    \    my $first_key_case_upper_count = 0;\n    my $first_value_case_upper_count\
    \ = 0;", "    my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } else {\n\
    \            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/) {\n           \
    \     $result = \"\";\n                last;\n            } elsif ($key_type eq\
    \ \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n      \
    \          last;\n            }\n        }\n    }\n    return $result;\n}", " \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $case = \"\";\n    while\
    \ (($key, $value) = each %$dict) {\n        if ($case eq \"\") {\n           \
    \ $case = $key =~ /^[a-z]+$/ ? \"lower\" : \"upper\";\n        }\n        if ($key\
    \ =~ /^[a-z]+$/ && $case ne \"lower\") {\n            $result = \"\";\n      \
    \      last;\n        }\n        if ($key =~ /^[A-Z]+$/ && $case ne \"upper\"\
    ) {\n            $result = \"\";\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each %$dict) {\n  \
    \      if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n       \
    \ if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n    }\n    if\
    \ ($is_lower && $is_upper) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $lower = 1;\n    my $upper = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        $lower = 0 if $key =~ /[A-Z]/;\n        $upper = 0 if $key =~ /[a-z]/;\n\
    \    }\n    return $lower || $upper;\n}", "    my $result = 1;\n    my $key;\n\
    \    foreach $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n          \
    \  if ($key =~ /[a-z]/) {\n                $result = \"\";\n                last;\n\
    \            }\n        }\n        else {\n            if ($key =~ /[A-Z]/) {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    if\
    \ ($is_lower && $is_upper) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $lc_key;\n    my $uc_key;\n\
    \    my $lc_val;\n    my $uc_val;\n    my $lc_dict;\n    my $uc_dict;\n    my\
    \ $lc_dict_str;\n    my $uc_dict_str;\n    my $dict_str;\n    my $lc_dict_str_len;\n\
    \    my $uc_dict_str_len;\n    my $dict_str_len;\n    my $lc_dict_str_len_diff;\n\
    \    my $uc_dict_str_len_diff;\n    my $dict_str_len_diff;\n    my $lc_dict_str_len_diff_abs;\n\
    \    my $uc_dict_str_len_diff_abs;\n    my $dict_str_len_diff_abs;\n    my $lc_dict_str_len_diff_abs_avg;\n\
    \    my $uc_dict_str_len_diff_abs_avg;\n    my $dict_str_len_diff_abs_avg;\n \
    \   my $lc_dict_str_len_diff_abs_avg_diff;\n    my $uc_dict_str_len_diff_abs_avg_diff;\n\
    \    my $dict_str_len_diff_abs_avg_diff;\n    my $lc_dict_str_len_diff_abs_avg_diff_abs;\n\
    \    my $uc_dict_str_len_diff_abs_avg_diff_abs;\n    my $dict_str_len_diff_abs_avg_diff_abs;\n\
    \    my $lc_dict_str_len_diff_abs_avg_diff_abs_avg;\n    my $uc_dict_str_len_diff_abs_avg_diff_abs_avg;\n\
    \    my $dict_str_len_diff_abs_avg_diff_abs_avg;\n    my $lc_dict_str_len_diff_abs_avg_diff_abs_avg_diff;\n\
    \    my $uc_dict_str", "    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            return \"\";\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        return \"\";\n    } else {\n        return 1;\n   \
    \ }\n}", "    my $result = 1;\n    my $key_case = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key_case eq \"\") {\n            if ($key =~ /[A-Z]/)\
    \ {\n                $key_case = \"upper\";\n            } else {\n          \
    \      $key_case = \"lower\";\n            }\n        }\n        if ($key_case\
    \ eq \"upper\") {\n            if ($key !~ /[A-Z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        } else {\n          \
    \  if ($key !~ /[a-z]/) {\n                $result = \"\";\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $case;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n\
    \    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n\
    \    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n\
    \    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n\
    \    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n\
    \    my $Y = 0;\n    my $Z = 0;\n    my $count = 0;\n    my $count2 = 0;\n   \
    \ my $count3 = 0;\n    my $count4 = 0;\n    my $count5 = 0;\n    my $count6 =\
    \ 0;\n    my $count7 = 0;\n    my $count8 = 0;\n    my $count9 = 0;\n    my $count10\
    \ = 0;\n    my $count11 = 0;\n    my $count12 = 0;\n    my $count13 = 0;\n   \
    \ my $count14 = 0;\n    my $count15 = 0;", "    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            return \"\"\
    ;\n        }\n    }\n    return $is_lower + $is_upper;\n}", "    my $ret = 1;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\
    \ elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n\
    \            $ret = \"\";\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my\
    \ $result = 1;\n    my $key;\n    my $value;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n \
    \           $is_lower = 1;\n        }\n    }\n    if ($is_upper && $is_lower)\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n\
    \    my $lc = 0;\n    my $uc = 0;\n    foreach my $key (keys %$dict) {\n     \
    \   if ($key =~ /^[a-z]+$/) {\n            $lc = 1;\n        } elsif ($key =~\
    \ /^[A-Z]+$/) {\n            $uc = 1;\n        } else {\n            $ret = \"\
    \";\n            last;\n        }\n    }\n    if ($lc && $uc) {\n        $ret\
    \ = \"\";\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $lower_case\
    \ = 0;\n    my $upper_case = 0;\n    foreach my $key (keys %$dict) {\n       \
    \ if ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n        } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n        } else {\n         \
    \   $result = \"\";\n            last;\n        }\n    }\n    if ($lower_case\
    \ && $upper_case) {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    my $result = 1;\n    my $key;\n    my $value;\n    my $lc_key;\n    my $uc_key;\n\
    \    my $lc_dict = {};\n    my $uc_dict = {};\n    my $lc_dict_keys = [];\n  \
    \  my $uc_dict_keys = [];\n    my $lc_dict_values = [];\n    my $uc_dict_values\
    \ = [];\n    my $lc_dict_key_count = 0;\n    my $uc_dict_key_count = 0;\n    my\
    \ $lc_dict_value_count = 0;\n    my $uc_dict_value_count = 0;\n    my $dict_key_count\
    \ = 0;\n    my $dict_value_count = 0;\n    my $dict_keys = [];\n    my $dict_values\
    \ = [];\n    my $dict_key_index = 0;\n    my $dict_value_index = 0;\n    my $lc_dict_key_index\
    \ = 0;\n    my $uc_dict_key_index = 0;\n    my $lc_dict_value_index = 0;\n   \
    \ my $uc_dict_value_index = 0;\n    my $dict_key_match_count = 0;\n    my $dict_value_match_count\
    \ = 0;\n    my $lc_dict_key_match_count = 0;\n    my $uc_dict_key_match_count\
    \ = 0;\n    my $lc_dict_value_match_count = 0;\n    my $uc_dict_value_match_count\
    \ = 0;\n    my $lc_dict_key_match_index = 0;\n    my $uc_dict_key_match_index\
    \ = 0;\n    my $lc_dict_value_match_index = 0;\n    my $uc_dict_value_match_index\
    \ = 0;\n    my $lc_dict_key_match = 0;\n    my $uc_dict_key_match = 0;\n    my\
    \ $lc_dict_value_match = 0;\n    my $uc_dict_value_match = 0;\n    my $lc_dict_key_match_value\
    \ = \"\";\n    my $uc_", "    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n     \
    \       $is_upper = 1;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $result = \"\";\n    }\n    return $result;\n}", "    my $result = 1;\n\
    \    my $case = \"\";\n    foreach my $key (keys %$dict) {\n        if ($case\
    \ eq \"\") {\n            if ($key =~ /[A-Z]/) {\n                $case = \"upper\"\
    ;\n            } elsif ($key =~ /[a-z]/) {\n                $case = \"lower\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } elsif ($case eq \"upper\") {\n            if ($key =~\
    \ /[a-z]/) {\n                $result = \"\";\n                last;\n       \
    \     }\n        } elsif ($case eq \"lower\") {\n            if ($key =~ /[A-Z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $ret = \"\";\n \
    \   }\n    return $ret;\n}", "    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } else {\n            if ($case eq \"lower\" && $key =~ /^[A-Z]+$/) {\n  \
    \              $result = \"\";\n                last;\n            } elsif ($case\
    \ eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n   \
    \             last;\n            }\n        }\n    }\n    return $result;\n}",
  "    my $result = 1;\n    my $lower = 1;\n    my $upper = 1;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $lower = 0;\n \
    \       }\n        if ($key =~ /[a-z]/) {\n            $upper = 0;\n        }\n\
    \    }\n    if ($lower == 0 && $upper == 0) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lower = 0;\n    my $upper = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n \
    \       elsif ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n   \
    \     else {\n            $result = \"\";\n            last;\n        }\n    }\n\
    \    if ($lower && $upper) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower = 0;\n   \
    \ my $is_upper = 0;\n    while (($key, $val) = each %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else {\n  \
    \          $ret = \"\";\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my\
    \ $result = 1;\n    my $key;\n    my $value;\n    my $upper_count = 0;\n    my\
    \ $lower_count = 0;\n    my $key_count = 0;\n    my $value_count = 0;\n    my\
    \ $key_value_count = 0;\n    my $key_value_upper_count = 0;\n    my $key_value_lower_count\
    \ = 0;\n    my $key_value_mixed_count = 0;\n    my $key_value_mixed_upper_count\
    \ = 0;\n    my $key_value_mixed_lower_count = 0;\n    my $key_value_mixed_upper_lower_count\
    \ = 0;\n    my $key_value_mixed_lower_upper_count = 0;\n    my $key_value_mixed_upper_lower_upper_count\
    \ = 0;\n    my $key_value_mixed_lower_upper_lower_count = 0;\n    my $key_value_mixed_upper_lower_upper_lower_count\
    \ = 0;\n    my $key_value_mixed_lower_upper_lower_upper_count = 0;\n    my $key_value_mixed_upper_lower_upper_lower_upper_count\
    \ = 0;\n    my $key_value_mixed_lower_upper_lower_upper_lower_count = 0;\n   \
    \ my $key_value_mixed_upper_lower_upper_lower_upper_lower_count = 0;\n    my $key_value_mixed_lower_upper_lower_upper_lower_upper_count\
    \ = 0;\n    my $key_value_mixed_upper_lower_upper_lower_upper_lower_upper_count\
    \ = 0;\n    my $key_value_mixed_lower_upper_lower_upper_lower_upper_lower_count\
    \ = 0;\n    my $key_value_mixed_upper_lower_upper_lower_upper_lower_upper_lower_count\
    \ = 0;\n    my $key_value_mixed_lower_upper_lower_upper_lower_upper_lower_upper_count\
    \ = 0;\n    my $key_value_mixed_upper_", "    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case;\n    my $i = 0;\n    foreach $key (keys %$dict)\
    \ {\n        if ($i == 0) {\n            if ($key =~ /[a-z]/) {\n            \
    \    $case = \"lower\";\n            } elsif ($key =~ /[A-Z]/) {\n           \
    \     $case = \"upper\";\n            } else {\n                $result = \"\"\
    ;\n                last;\n            }\n        } else {\n            if ($case\
    \ eq \"lower\" && $key =~ /[A-Z]/) {\n                $result = \"\";\n      \
    \          last;\n            } elsif ($case eq \"upper\" && $key =~ /[a-z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n        $i++;\n    }\n    return $result;\n}", "    my $ret = 1;\n\
    \    my $key;\n    my $val;\n    my $is_lower = 0;\n    my $is_upper = 0;\n  \
    \  my $is_mixed = 0;\n    my $is_empty = 1;\n    while (($key, $val) = each %$dict)\
    \ {\n        $is_empty = 0;\n        if ($key =~ /[a-z]/) {\n            $is_lower\
    \ = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n\
    \        }\n        if ($is_lower && $is_upper) {\n            $is_mixed = 1;\n\
    \            last;\n        }\n    }\n    if ($is_mixed) {\n        $ret = \"\"\
    ;\n    }\n    if ($is_empty) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my $result = 1;\n    my $key;\n    my $value;\n    my $lower_case_key\
    \ = 0;\n    my $upper_case_key = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case_key = 1;\n   \
    \     } elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case_key = 1;\n     \
    \   } else {\n            $result = \"\";\n            last;\n        }\n    }\n\
    \    if ($lower_case_key && $upper_case_key) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\
    \ else {\n            $result = \"\";\n            last;\n        }\n    }\n \
    \   if ($is_lower && $is_upper) {\n        $result = \"\";\n    }\n    return\
    \ $result;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n    my $key_case;\n\
    \    my $val_case;\n    my $key_case_prev;\n    my $val_case_prev;\n    while\
    \ (($key, $val) = each %$dict) {\n        $key_case = $key =~ /^[a-z]+$/ ? \"\
    lower\" : \"upper\";\n        $val_case = $val =~ /^[a-z]+$/ ? \"lower\" : \"\
    upper\";\n        if ($key_case_prev && $key_case_prev ne $key_case) {\n     \
    \       $ret = \"\";\n            last;\n        }\n        if ($val_case_prev\
    \ && $val_case_prev ne $val_case) {\n            $ret = \"\";\n            last;\n\
    \        }\n        $key_case_prev = $key_case;\n        $val_case_prev = $val_case;\n\
    \    }\n    return $ret;\n}", "    my $result = 1;\n    my $lower = 0;\n    my\
    \ $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/)\
    \ {\n            $lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n    \
    \        $upper = 1;\n        }\n    }\n    if ($lower && $upper) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       } else {\n            $ret = \"\";\n            last;\n        }\n   \
    \ }\n    if ($is_upper && $is_lower) {\n        $ret = \"\";\n    }\n    return\
    \ $ret;\n}", "    my $ret = 1;\n    my $key;\n    my $value;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each %$dict) {\n  \
    \      if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n       \
    \ if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n    if\
    \ ($is_upper && $is_lower) {\n        $ret = \"\";\n    }\n    return $ret;\n}",
  "    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    while (($key, $val) = each %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n \
    \           $is_upper = 0;\n        }\n    }\n    if ($is_lower == 0 && $is_upper\
    \ == 0) {\n        $ret = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n\
    \    my $key;\n    foreach $key (keys %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $ret = \"\" if ($ret == 1);\n        } else {\n            $ret\
    \ = \"\" if ($ret == 2);\n        }\n    }\n    return $ret;\n}", "    my $flag\
    \ = 1;\n    my $key;\n    my $val;\n    my $key_case;\n    my $val_case;\n   \
    \ my $key_case_prev;\n    my $val_case_prev;\n    my $key_case_curr;\n    my $val_case_curr;\n\
    \    my $key_case_next;\n    my $val_case_next;\n    my $key_case_next_next;\n\
    \    my $val_case_next_next;\n    my $key_case_next_next_next;\n    my $val_case_next_next_next;\n\
    \    my $key_case_next_next_next_next;\n    my $val_case_next_next_next_next;\n\
    \    my $key_case_next_next_next_next_next;\n    my $val_case_next_next_next_next_next;\n\
    \    my $key_case_next_next_next_next_next_next;\n    my $val_case_next_next_next_next_next_next;\n\
    \    my $key_case_next_next_next_next_next_next_next;\n    my $val_case_next_next_next_next_next_next_next;\n\
    \    my $key_case_next_next_next_next_next_next_next_next;\n    my $val_case_next_next_next_next_next_next_next_next;\n\
    \    my $key_case_next_next_next_next_next_next_next_next_next;\n    my $val_case_next_next_next_next_next_next_next_next_next;\n\
    \    my $key_case_next_next_next_next_next_next_next_next_next_next;\n    my $val_case_next_next_next_next_next_next_next_next_next_next;\n\
    \    my $key_case_next_next_next_next_next_next_next_next_next_next_next;\n  \
    \  my $val_case_next_next_next_next_next_next_next_next_", "    my $ret = 1;\n\
    \    my $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n  \
    \  my $is_empty = 1;\n    while (($key, $val) = each %$dict) {\n        $is_empty\
    \ = 0;\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n\
    \        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n\
    \    if ($is_empty) {\n        return 1;\n    }\n    if ($is_upper && $is_lower)\
    \ {\n        return \"\";\n    }\n    return 1;\n}", "    my $ret = 1;\n    my\
    \ $key;\n    my $val;\n    my $lower = 0;\n    my $upper = 0;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n    \
    \    } else {\n            $ret = \"\";\n            last;\n        }\n    }\n\
    \    if ($lower && $upper) {\n        $ret = \"\";\n    }\n    return $ret;\n}",
  "    my $result = 1;\n    my $lower = 0;\n    my $upper = 0;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n\
    \        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n  \
    \      }\n        else {\n            $result = \"\";\n            last;\n   \
    \     }\n    }\n    if ($lower && $upper) {\n        $result = \"\";\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       }\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n   \
    \     }\n    }\n    if ($is_upper && $is_lower) {\n        $result = \"\";\n \
    \   }\n    return $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_lower = 1;\n        }\n    }\n    if ($is_empty) {\n    \
    \    $result = \"\";\n    }\n    elsif ($is_upper && $is_lower) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n \
    \   my $value;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        $ret = \"\";\n \
    \   }\n    return $ret;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $all_lower = 1;\n    my $all_upper = 1;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $all_upper = 0;\n        }\n    }\n    if ($is_empty) {\n   \
    \     $result = \"\";\n    }\n    elsif ($all_lower || $all_upper) {\n       \
    \ $result = 1;\n    }\n    else {\n        $result = \"\";\n    }\n    return\
    \ $result;\n}", "    my $result = 1;\n    my $key;\n    my $value;\n    my $key_type\
    \ = \"\";\n    my $value_type = \"\";\n    my $key_type_count = 0;\n    my $value_type_count\
    \ = 0;\n    my $key_type_count_lower = 0;\n    my $key_type_count_upper = 0;\n\
    \    my $value_type_count_lower = 0;\n    my $value_type_count_upper = 0;\n  \
    \  my $key_type_count_string = 0;\n    my $value_type_count_string = 0;\n    my\
    \ $key_type_count_number = 0;\n    my $value_type_count_number = 0;\n    my $key_type_count_other\
    \ = 0;\n    my $value_type_count_other = 0;\n    my $key_type_count_other_lower\
    \ = 0;\n    my $key_type_count_other_upper = 0;\n    my $value_type_count_other_lower\
    \ = 0;\n    my $value_type_count_other_upper = 0;\n    my $key_type_count_other_string\
    \ = 0;\n    my $value_type_count_other_string = 0;\n    my $key_type_count_other_number\
    \ = 0;\n    my $value_type_count_other_number = 0;\n    my $key_type_count_other_other\
    \ = 0;\n    my $value_type_count_other_other = 0;\n    my $key_type_count_other_other_lower\
    \ = 0;\n    my $key_type_count_other_other_upper = 0;\n    my $value_type_count_other_other_lower\
    \ = 0;\n    my $value_type_count_other_other_upper = 0;\n    my $key_type_count_other_other_string\
    \ = 0;\n    my $value_type_count_other_other_string = 0;\n    my $key_type_count_other_other_number\
    \ = 0;\n    my $value_type_count_other_other_number = 0;\n    my $", "    my $result\
    \ = 1;\n    my $lower = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[a-z]/) {\n            $lower = 1;\n        }\n    \
    \    if ($key =~ /[A-Z]/) {\n            $upper = 1;\n        }\n    }\n    if\
    \ ($lower && $upper) {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    my $ret = 1;\n    my $case = \"\";\n    foreach my $key (keys %$dict) {\n \
    \       if ($case eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n        \
    \        $case = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n    \
    \            $case = \"upper\";\n            } else {\n                $ret =\
    \ \"\";\n                last;\n            }\n        } else {\n            if\
    \ ($case eq \"lower\" && $key =~ /^[A-Z]+$/) {\n                $ret = \"\";\n\
    \                last;\n            } elsif ($case eq \"upper\" && $key =~ /^[a-z]+$/)\
    \ {\n                $ret = \"\";\n                last;\n            }\n    \
    \    }\n    }\n    return $ret;\n}", "    my $result = 1;\n    my $key_type =\
    \ \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n\
    \            $key_type = get_key_type($key);\n        }\n        if ($key_type\
    \ ne get_key_type($key)) {\n            $result = \"\";\n            last;\n \
    \       }\n    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_empty =\
    \ 1;\n    while (($key, $val) = each %$dict) {\n        $is_empty = 0;\n     \
    \   if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if\
    \ ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n    if ($is_empty)\
    \ {\n        $ret = \"\";\n    } elsif ($is_upper && $is_lower) {\n        $ret\
    \ = \"\";\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $is_lower =\
    \ 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        } else {\n            $ret = \"\";\n\
    \            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n    \
    \    $ret = \"\";\n    }\n    return $ret;\n}", "    my($key, $value);\n    my($lower_case)\
    \ = 1;\n    my($upper_case) = 1;\n    while(($key, $value) = each %$dict) {\n\
    \        if($key =~ /[A-Z]/) {\n            $lower_case = 0;\n        }\n    \
    \    if($key =~ /[a-z]/) {\n            $upper_case = 0;\n        }\n    }\n \
    \   if($lower_case == 1 || $upper_case == 1) {\n        return 1;\n    }\n   \
    \ return \"\";\n}", "    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "    my($key, $value);\n    my($all_lower, $all_upper);\n    $all_lower =\
    \ 1;\n    $all_upper = 1;\n    while(($key, $value) = each %$dict) {\n       \
    \ if($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if($all_lower\
    \ || $all_upper) {\n        return 1;\n    }\n    return \"\";\n}", "    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $lower_case = 0;\n    my $upper_case\
    \ = 0;\n    my $other_case = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n        } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n        } else {\n   \
    \         $other_case = 1;\n        }\n    }\n    if ($lower_case && $upper_case)\
    \ {\n        $result = \"\";\n    } elsif ($lower_case && $other_case) {\n   \
    \     $result = \"\";\n    } elsif ($upper_case && $other_case) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        $ret = \"\";\n \
    \   }\n    return $ret;\n}", "    my $result = 1;\n    my $flag = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($flag == 0) {\n            if ($key =~\
    \ /[A-Z]/) {\n                $flag = 1;\n            }\n        }\n        if\
    \ ($flag == 1) {\n            if ($key =~ /[a-z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n        if ($flag\
    \ == 0) {\n            if ($key =~ /[a-z]/) {\n                $flag = 1;\n  \
    \          }\n        }\n        if ($flag == 1) {\n            if ($key =~ /[A-Z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } elsif ($key =~\
    \ /^[a-z]+$/) {\n            $is_lower = 1;\n        } else {\n            $result\
    \ = \"\";\n            last;\n        }\n    }\n    if ($is_upper && $is_lower)\
    \ {\n        $result = \"\";\n    }\n    return $result;\n}", "    my $ret = 1;\n\
    \    my $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n  \
    \  while (($key, $val) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n \
    \           $is_upper = 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n         \
    \   $is_lower = 1;\n        } else {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $ret = \"\";\n \
    \   }\n    return $ret;\n}", "    my $ret = 1;\n    my $key;\n    my $val;\n \
    \   my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n \
    \       if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n\
    \    if ($is_upper && $is_lower) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $key_type = \"upper\";\n            } else {\n          \
    \      $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        } elsif\
    \ ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n        \
    \        $result = \"\";\n                last;\n            }\n        }\n  \
    \  }\n    return $result;\n}", "    my $result = 1;\n    my $key_case = \"\";\n\
    \    foreach my $key (keys %$dict) {\n        if ($key_case eq \"\") {\n     \
    \       if ($key =~ /[A-Z]/) {\n                $key_case = \"upper\";\n     \
    \       } else {\n                $key_case = \"lower\";\n            }\n    \
    \    }\n        if ($key_case eq \"upper\") {\n            if ($key !~ /[A-Z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } else {\n            if ($key !~ /[a-z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 1;\n    my $key;\n    foreach $key (keys %$dict)\
    \ {\n        if (is_upper($key) || is_lower($key)) {\n            next;\n    \
    \    } else {\n            $result = \"\";\n            last;\n        }\n   \
    \ }\n    return $result;\n}", "    my $ret = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    my $first_key_case = $first_key =~ /[A-Z]/ ? 'upper' : 'lower';\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/ && $first_key_case eq 'lower')\
    \ {\n            $ret = '';\n            last;\n        }\n        if ($key =~\
    \ /[a-z]/ && $first_key_case eq 'upper') {\n            $ret = '';\n         \
    \   last;\n        }\n    }\n    return $ret;\n}", "    my $ret = 1;\n    my $key;\n\
    \    my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper\
    \ = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $ret = \"\";\n \
    \   }\n    return $ret;\n}", "    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } elsif ($case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n    \
    \            $result = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $result;\n}", "    my $result = 1;\n    my $upper = 0;\n  \
    \  my $lower = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper = 1;\n        }\n        if ($key =~ /^[a-z]+$/) {\n \
    \           $lower = 1;\n        }\n    }\n    if ($upper && $lower) {\n     \
    \   $result = \"\";\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
