name: HumanEval_161_solve
language: pl
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# >>> solve(\"1234\")\n# \"4321\"\n# >>> solve(\"ab\")\n\
  # \"AB\"\n# >>> solve(\"#a@C\")\n# \"#A@c\"\nsub solve {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n\
  \        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"\
  ),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $result = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $result .= uc $c;\n   \
    \     } elsif ($c =~ /[A-Z]/) {\n            $result .= lc $c;\n        } else\
    \ {\n            $result .= $c;\n        }\n    }\n    return $result;\n}", " \
    \   my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            $c =~ tr/a-zA-Z/A-Za-z/;\n\
    \        }\n        push @r, $c;\n    }\n    return join '', @r;\n}", "    my\
    \ $result = \"\";\n    if ($s =~ /[a-zA-Z]/) {\n        for (my $i = 0; $i < length($s);\
    \ $i++) {\n            if ($s[$i] =~ /[a-z]/) {\n                $result .= uc($s[$i]);\n\
    \            } elsif ($s[$i] =~ /[A-Z]/) {\n                $result .= lc($s[$i]);\n\
    \            } else {\n                $result .= $s[$i];\n            }\n   \
    \     }\n    } else {\n        for (my $i = length($s) - 1; $i >= 0; $i--) {\n\
    \            $result .= $s[$i];\n        }\n    }\n    return $result;\n}", " \
    \   my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/i) {\n            $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        push @r,\
    \ $c;\n    }\n    return join '', @r;\n}", "    my $r = \"\";\n    if ($s =~ /[a-zA-Z]/)\
    \ {\n        for (my $i = 0; $i < length($s); $i++) {\n            my $c = substr($s,\
    \ $i, 1);\n            if ($c =~ /[a-z]/) {\n                $r .= uc($c);\n \
    \           } elsif ($c =~ /[A-Z]/) {\n                $r .= lc($c);\n       \
    \     } else {\n                $r .= $c;\n            }\n        }\n    } else\
    \ {\n        for (my $i = length($s) - 1; $i >= 0; $i--) {\n            $r .=\
    \ substr($s, $i, 1);\n        }\n    }\n    return $r;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n \
    \           if ($c =~ /[a-z]/) {\n                $c = uc $c;\n            } else\
    \ {\n                $c = lc $c;\n            }\n        }\n        push @r, $c;\n\
    \    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = \"\"\
    ;\n    for (my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i,\
    \ 1);\n        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else {\n           \
    \ $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n           \
    \ push @r, $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n     \
    \       $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        push @r, $c;\n    }\n   \
    \ return join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $result = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $result .= uc $c;\n   \
    \     } elsif ($c =~ /[A-Z]/) {\n            $result .= lc $c;\n        } else\
    \ {\n            $result .= $c;\n        }\n    }\n    return scalar reverse $result;\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my $r = \"\";\n    my $i = 0;\n\
    \    my $l = length($s);\n    while ($i < $l) {\n        my $c = substr($s, $i,\
    \ 1);\n        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else {\n           \
    \ $r .= $c;\n        }\n        $i++;\n    }\n    return $r;\n}", "    my $r =\
    \ '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n        \
    \    $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my $res = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res\
    \ .= lc $c;\n        } else {\n            $res .= $c;\n        }\n    }\n   \
    \ return $res;\n}", "    my $r = \"\";\n    for my $c (split //, $s) {\n     \
    \   if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = '';\n    if ($s =~ /[a-zA-Z]/)\
    \ {\n        $r = reverse $s;\n    } else {\n        $r = reverse $s;\n    }\n\
    \    return $r;\n}", "    my $res = \"\";\n    my $flag = 0;\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $flag = 1;\n       \
    \     $res .= $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n            $res\
    \ .= $c;\n        }\n    }\n    return $flag ? $res : scalar reverse $s;\n}",
  "    my $result = '';\n    my $is_letter = 0;\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-zA-Z]/) {\n            $is_letter = 1;\n            if\
    \ ($c =~ /[a-z]/) {\n                $result .= uc $c;\n            } else {\n\
    \                $result .= lc $c;\n            }\n        } else {\n        \
    \    $result .= $c;\n        }\n    }\n    if ($is_letter) {\n        return $result;\n\
    \    } else {\n        return reverse $s;\n    }\n}", "    my $r = '';\n    for\
    \ my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $res = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n \
    \       } else {\n            $res .= $c;\n        }\n    }\n    return $res;\n\
    }", "    my $r = \"\";\n    my $l = \"\";\n    my $u = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = length($s);\n    for ($i = 0; $i\
    \ < $l; $i++) {\n        $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $r\
    \ .= lc($c);\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    my $i = 0;\n    my $l = length($s);\n    while\
    \ ($i < $l) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/i)\
    \ {\n            if ($c =~ /[a-z]/) {\n                $c = uc($c);\n        \
    \    } else {\n                $c = lc($c);\n            }\n        }\n      \
    \  $r = $c . $r;\n        $i++;\n    }\n    return $r;\n}", "    my $r = \"\"\
    ;\n    my $c;\n    for (my $i = 0; $i < length($s); $i++) {\n        $c = substr($s,\
    \ $i, 1);\n        if ($c =~ /[a-z]/) {\n            $c = uc($c);\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $c = lc($c);\n        }\n        $r = $c . $r;\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    if ($s =~ /[a-zA-Z]/) {\n  \
    \      $r = reverse $s;\n    } else {\n        $r = reverse $s;\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    if ($s =~ /[a-zA-Z]/) {\n        $s =~ tr/a-zA-Z/A-Za-z/;\n\
    \    } else {\n        $s = reverse $s;\n    }\n    return $s;\n}", "    my @s\
    \ = split //, $s;\n    my $rev = 1;\n    for my $i (0..$#s) {\n        if ($s[$i]\
    \ =~ /[a-zA-Z]/) {\n            $rev = 0;\n            $s[$i] =~ tr/a-zA-Z/A-Za-z/;\n\
    \        }\n    }\n    if ($rev) {\n        @s = reverse @s;\n    }\n    return\
    \ join '', @s;\n}", "    my $result = \"\";\n    my $i = 0;\n    my $is_letter\
    \ = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s,\
    \ $i, 1);\n        if ($c =~ /[a-zA-Z]/) {\n            $is_letter = 1;\n    \
    \        if ($c =~ /[a-z]/) {\n                $c = uc($c);\n            } else\
    \ {\n                $c = lc($c);\n            }\n        }\n        $result .=\
    \ $c;\n    }\n    if ($is_letter == 0) {\n        $result = reverse($result);\n\
    \    }\n    return $result;\n}", "    my @s = split //, $s;\n    my @r;\n    for\
    \ my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            push @r, $c =~ /[a-z]/\
    \ ? uc $c : lc $c;\n        } else {\n            push @r, $c;\n        }\n  \
    \  }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my @a = split //, $s;\n \
    \   my @b = map {\n        if (/[a-z]/) {\n            uc;\n        } elsif (/[A-Z]/)\
    \ {\n            lc;\n        } else {\n            $_;\n        }\n    } @a;\n\
    \    return join '', @b;\n}", "    my $r = '';\n    my $i = 0;\n    my $l = length($s);\n\
    \    while ($i < $l) {\n        my $c = substr($s, $i, 1);\n        if ($c =~\
    \ /[a-z]/i) {\n            $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        $r .=\
    \ $c;\n        $i++;\n    }\n    return $r;\n}", "    my $r = reverse $s;\n  \
    \  my $i = 0;\n    while ($i < length $r) {\n        if ($r =~ /[a-zA-Z]/) {\n\
    \            my $c = substr($r, $i, 1);\n            if ($c =~ /[a-z]/) {\n  \
    \              substr($r, $i, 1) = uc $c;\n            } else {\n            \
    \    substr($r, $i, 1) = lc $c;\n            }\n        }\n        $i++;\n   \
    \ }\n    return $r;\n}", "    my $r = '';\n    if ($s =~ /[a-zA-Z]/) {\n     \
    \   $r = reverse $s;\n    } else {\n        $r = reverse $s;\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for (my $i = length($s) - 1; $i >= 0; $i--) {\n\
    \        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n          \
    \  $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my $r = \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = reverse $s;\n    $r =~ s/([a-z])/\\U$1/g;\n\
    \    $r =~ s/([A-Z])/\\L$1/g;\n    return $r;\n}", "    my $r = '';\n    for (my\
    \ $i = length($s) - 1; $i >= 0; $i--) {\n        my $c = substr($s, $i, 1);\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n    if ($s =~ /[a-zA-Z]/)\
    \ {\n        $r = reverse $s;\n    } else {\n        $r = reverse $s;\n    }\n\
    \    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n      \
    \  if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return scalar reverse $r;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n \
    \           if ($c =~ /[a-z]/) {\n                $c = uc $c;\n            } else\
    \ {\n                $c = lc $c;\n            }\n        }\n        push @r, $c;\n\
    \    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n    for (my\
    \ $i = length($s) - 1; $i >= 0; $i--) {\n        my $c = substr($s, $i, 1);\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my $flag = 0;\n    for my $i (0..$#s) {\n        if ($s[$i] =~ /[a-zA-Z]/)\
    \ {\n            $flag = 1;\n            $s[$i] =~ tr/a-zA-Z/A-Za-z/;\n      \
    \  }\n    }\n    if ($flag == 0) {\n        @s = reverse @s;\n    }\n    return\
    \ join \"\", @s;\n}", "    my $res = '';\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/i) {\n\
    \            $res .= $c =~ /[a-z]/ ? uc($c) : lc($c);\n        } else {\n    \
    \        $res .= $c;\n        }\n    }\n    return $res;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        $r .= $c =~ /[a-z]/ ? uc $c : $c =~ /[A-Z]/\
    \ ? lc $c : $c;\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            if ($c\
    \ =~ /[a-z]/) {\n                $c = uc $c;\n            } else {\n         \
    \       $c = lc $c;\n            }\n        }\n        push @r, $c;\n    }\n \
    \   return join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $result = \"\";\n    if ($s =~\
    \ /[a-zA-Z]/) {\n        $result = reverse_case($s);\n    } else {\n        $result\
    \ = reverse($s);\n    }\n    return $result;\n}", "    my $result = '';\n    if\
    \ ($s =~ /[a-zA-Z]/) {\n        $result = reverse_case($s);\n    } else {\n  \
    \      $result = reverse($s);\n    }\n    return $result;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   my $r = '';\n    my $i = 0;\n    my $l = length($s);\n    while ($i < $l)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/i) {\n     \
    \       if ($c =~ /[a-z]/) {\n                $c = uc($c);\n            } else\
    \ {\n                $c = lc($c);\n            }\n        }\n        $r .= $c;\n\
    \        $i++;\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            if ($c\
    \ =~ /[a-z]/) {\n                $c = uc $c;\n            } else {\n         \
    \       $c = lc $c;\n            }\n        }\n        push @r, $c;\n    }\n \
    \   return join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/)\
    \ {\n                $c = uc $c;\n            } else {\n                $c = lc\
    \ $c;\n            }\n        }\n        push @r, $c;\n    }\n    return join\
    \ '', @r;\n}", "    my $result = '';\n    for my $i (0..length($s)-1) {\n    \
    \    my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/i) {\n            $result\
    \ .= $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n            $result .=\
    \ $c;\n        }\n    }\n    return $result;\n}", "    my $res = '';\n    for\
    \ my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res .= uc\
    \ $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n       \
    \ } else {\n            $res .= $c;\n        }\n    }\n    return $res;\n}", " \
    \   my $r = '';\n    for (my $i = length($s) - 1; $i >= 0; $i--) {\n        my\
    \ $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else\
    \ {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r =\
    \ '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n        \
    \    $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/i) {\n            $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        push @r,\
    \ $c;\n    }\n    return join '', @r;\n}", "    my $r = '';\n    my $l = length($s);\n\
    \    for (my $i = 0; $i < $l; $i++) {\n        my $c = substr($s, $i, 1);\n  \
    \      if ($c =~ /[a-z]/i) {\n            $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n\
    \        $r .= $c;\n    }\n    return $r;\n}", "    my $rev = reverse $s;\n  \
    \  my $res = '';\n    for (my $i = 0; $i < length $s; $i++) {\n        my $c =\
    \ substr($rev, $i, 1);\n        if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n        } else\
    \ {\n            $res .= $c;\n        }\n    }\n    return $res;\n}", "    my\
    \ $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n   \
    \         $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc\
    \ $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n\
    }", "    my $result = '';\n    my $is_letter = 0;\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-zA-Z]/) {\n            $is_letter = 1;\n          \
    \  $result .= $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n            $result\
    \ .= $c;\n        }\n    }\n    return $is_letter ? $result : reverse $result;\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = \"\";\n    my $i = 0;\n    my $l\
    \ = length($s);\n    while ($i < $l) {\n        my $c = substr($s, $i, 1);\n \
    \       if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc($c);\n        } else {\n            $r .= $c;\n\
    \        }\n        $i++;\n    }\n    return $r;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n           \
    \ if ($c =~ /[a-z]/) {\n                $c = uc $c;\n            } else {\n  \
    \              $c = lc $c;\n            }\n        }\n        push @r, $c;\n \
    \   }\n    return join '', @r;\n}", "    my $r = \"\";\n    my $i = 0;\n    while($i\
    \ < length($s)) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i)\
    \ {\n            $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        $r .= $c;\n    \
    \    $i++;\n    }\n    return $r;\n}", "    my @arr = split //, $s;\n    my $flag\
    \ = 0;\n    for my $i (0..$#arr) {\n        if ($arr[$i] =~ /[a-zA-Z]/) {\n  \
    \          $flag = 1;\n            if ($arr[$i] =~ /[a-z]/) {\n              \
    \  $arr[$i] = uc $arr[$i];\n            } else {\n                $arr[$i] = lc\
    \ $arr[$i];\n            }\n        }\n    }\n    if ($flag == 0) {\n        return\
    \ reverse $s;\n    } else {\n        return join '', @arr;\n    }\n}", "    my\
    \ $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n   \
    \         $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc\
    \ $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n\
    }", "    my $r = reverse $s;\n    if ($r =~ /[a-zA-Z]/) {\n        $r =~ tr/a-zA-Z/A-Za-z/;\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my $rev\
    \ = 0;\n    for my $i (0..$#s) {\n        if ($s[$i] =~ /[a-zA-Z]/) {\n      \
    \      $rev = 1;\n            $s[$i] =~ tr/a-zA-Z/A-Za-z/;\n        }\n    }\n\
    \    return $rev ? join('', @s) : scalar reverse $s;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n     \
    \       push @r, $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n          \
    \  push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   my $r = '';\n    my $i = 0;\n    my $l = length($s);\n    while ($i < $l)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/i) {\n     \
    \       $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        $r .= $c;\n        $i++;\n\
    \    }\n    return $r;\n}", "    my $str = '';\n    if ($s =~ /[a-zA-Z]/) {\n\
    \        for my $c (split //, $s) {\n            if ($c =~ /[a-z]/) {\n      \
    \          $str .= uc $c;\n            } elsif ($c =~ /[A-Z]/) {\n           \
    \     $str .= lc $c;\n            } else {\n                $str .= $c;\n    \
    \        }\n        }\n    } else {\n        $str = reverse $s;\n    }\n    return\
    \ $str;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n  \
    \      if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/) {\n             \
    \   $c = uc $c;\n            } else {\n                $c = lc $c;\n         \
    \   }\n        }\n        push @r, $c;\n    }\n    return join '', @r;\n}", " \
    \   my $str = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $str .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n         \
    \   $str .= lc $c;\n        } else {\n            $str .= $c;\n        }\n   \
    \ }\n    return $str;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/)\
    \ {\n                $c = uc $c;\n            } else {\n                $c = lc\
    \ $c;\n            }\n        }\n        push @r, $c;\n    }\n    return join\
    \ '', @r;\n}", "    return reverse $s if $s !~ /[a-zA-Z]/;\n    my @arr = split\
    \ //, $s;\n    for (my $i = 0; $i < @arr; $i++) {\n        if ($arr[$i] =~ /[a-z]/)\
    \ {\n            $arr[$i] = uc $arr[$i];\n        } elsif ($arr[$i] =~ /[A-Z]/)\
    \ {\n            $arr[$i] = lc $arr[$i];\n        }\n    }\n    return join '',\
    \ @arr;\n}", "    my $r = \"\";\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    if ($s =~ /[a-zA-Z]/) {\n  \
    \      $r = reverse $s;\n    }\n    else {\n        $r = reverse $s;\n    }\n\
    \    return $r;\n}", "    my @a = split(//, $s);\n    my @b = ();\n    for my\
    \ $i (0..$#a) {\n        if ($a[$i] =~ /[a-z]/i) {\n            push @b, $a[$i]\
    \ =~ /[a-z]/ ? uc $a[$i] : lc $a[$i];\n        } else {\n            push @b,\
    \ $a[$i];\n        }\n    }\n    return join('', @b);\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n \
    \           push @r, $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n      \
    \      push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $result\
    \ = '';\n    my $is_letter = 0;\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-zA-Z]/) {\n            $is_letter = 1;\n            $result .= $c =~\
    \ /[a-z]/ ? uc $c : lc $c;\n        } else {\n            $result .= $c;\n   \
    \     }\n    }\n    return $is_letter ? $result : scalar reverse $s;\n}", "  \
    \  my @s = split //, $s;\n    my @t;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/i) {\n            push @t, $c =~ /[a-z]/ ? uc $c : lc $c;\n        }\
    \ else {\n            push @t, $c;\n        }\n    }\n    return join '', @t;\n\
    }", "    my $result = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n      \
    \      $result .= lc $c;\n        } else {\n            $result .= $c;\n     \
    \   }\n    }\n    return $result;\n}", "    my $r = '';\n    for my $i (0..length($s)-1)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n      \
    \      $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my $res = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res\
    \ .= lc $c;\n        } else {\n            $res .= $c;\n        }\n    }\n   \
    \ return $res;\n}", "    my $result = \"\";\n    if ($s =~ /[a-zA-Z]/) {\n   \
    \     for (my $i = 0; $i < length($s); $i++) {\n            if ($s[$i] =~ /[a-z]/)\
    \ {\n                $result .= uc($s[$i]);\n            } elsif ($s[$i] =~ /[A-Z]/)\
    \ {\n                $result .= lc($s[$i]);\n            } else {\n          \
    \      $result .= $s[$i];\n            }\n        }\n    } else {\n        $result\
    \ = reverse($s);\n    }\n    return $result;\n}", "    my $r = '';\n    for my\
    \ $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = \"\"\
    ;\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   if ($s =~ /[a-zA-Z]/) {\n        $s =~ tr/a-zA-Z/A-Za-z/;\n    }\n    else\
    \ {\n        $s = reverse $s;\n    }\n    return $s;\n}", "    my $result = \"\
    \";\n    my $i = 0;\n    my $is_letter = 0;\n    while ($i < length($s)) {\n \
    \       if ($s[$i] =~ /[a-zA-Z]/) {\n            $is_letter = 1;\n           \
    \ if ($s[$i] =~ /[a-z]/) {\n                $result .= uc($s[$i]);\n         \
    \   } else {\n                $result .= lc($s[$i]);\n            }\n        }\
    \ else {\n            $result .= $s[$i];\n        }\n        $i++;\n    }\n  \
    \  if ($is_letter) {\n        return $result;\n    } else {\n        return reverse($s);\n\
    \    }\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n   \
    \     if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/) {\n              \
    \  $c = uc $c;\n            } else {\n                $c = lc $c;\n          \
    \  }\n        }\n        push @r, $c;\n    }\n    return join '', @r;\n}", " \
    \   my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    if ($s =~ /[a-zA-Z]/) {\n        $r = reverse\
    \ $s;\n    } else {\n        $r = reverse $s;\n    }\n    return $r;\n}", "  \
    \  my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/i) {\n            push @r, $c =~ /[a-z]/ ? uc $c : lc $c;\n        }\
    \ else {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my $r = \"\";\n    for my $c (split //, $s) {\n      \
    \  if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return scalar reverse $r;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n           \
    \ $c =~ tr/A-Za-z/a-zA-Z/;\n        }\n        push @r, $c;\n    }\n    return\
    \ join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n       \
    \ if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n   \
    \ for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/)\
    \ {\n                $c = uc $c;\n            } else {\n                $c = lc\
    \ $c;\n            }\n        }\n        push @r, $c;\n    }\n    return join\
    \ '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    my $flag = 0;\n   \
    \ for my $c (@s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $flag = 1;\n\
    \            if ($c =~ /[a-z]/) {\n                $c =~ tr/a-z/A-Z/;\n      \
    \      }\n            else {\n                $c =~ tr/A-Z/a-z/;\n           \
    \ }\n        }\n        push @r, $c;\n    }\n    if ($flag == 0) {\n        @r\
    \ = reverse @r;\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n           \
    \ if ($c =~ /[a-z]/) {\n                $c = uc $c;\n            } else {\n  \
    \              $c = lc $c;\n            }\n        }\n        push @r, $c;\n \
    \   }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = \"\";\n    if($s\
    \ =~ /[a-zA-Z]/) {\n        $r = join(\"\", map {\n            if($_ =~ /[a-z]/)\
    \ {\n                uc($_);\n            } elsif($_ =~ /[A-Z]/) {\n         \
    \       lc($_);\n            } else {\n                $_;\n            }\n  \
    \      } split(\"\", $s));\n    } else {\n        $r = join(\"\", reverse(split(\"\
    \", $s)));\n    }\n    return $r;\n}", "    my $res = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n      \
    \  } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n        } else {\n \
    \           $res .= $c;\n        }\n    }\n    return $res;\n}", "    my @s =\
    \ split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i)\
    \ {\n            if ($c =~ /[a-z]/) {\n                $c = uc $c;\n         \
    \   } else {\n                $c = lc $c;\n            }\n        }\n        push\
    \ @r, $c;\n    }\n    return join '', @r;\n}", "    my $r = \"\";\n    if ($s\
    \ =~ /[a-zA-Z]/) {\n        $r = reverse $s;\n    } else {\n        for (my $i\
    \ = 0; $i < length($s); $i++) {\n            my $c = substr($s, $i, 1);\n    \
    \        if ($c =~ /[a-z]/) {\n                $c = uc($c);\n            } elsif\
    \ ($c =~ /[A-Z]/) {\n                $c = lc($c);\n            }\n           \
    \ $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n\
    \    my @res;\n    for my $c (@s) {\n        if ($c =~ /[a-zA-Z]/) {\n       \
    \     if ($c =~ /[a-z]/) {\n                $c = uc $c;\n            } else {\n\
    \                $c = lc $c;\n            }\n        }\n        push @res, $c;\n\
    \    }\n    return join '', reverse @res;\n}", "    my $r = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/i) {\n            if ($c =~ /[a-z]/) {\n                $c = uc $c;\n\
    \            } else {\n                $c = lc $c;\n            }\n        }\n\
    \        push @r, $c;\n    }\n    return join '', @r;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/i) {\n            if ($c =~ /[a-z]/) {\n                $c = uc $c;\n\
    \            } else {\n                $c = lc $c;\n            }\n        }\n\
    \        push @r, $c;\n    }\n    return join '', @r;\n}", "    my $str = \"\"\
    ;\n    for (my $i = 0; $i < length($s); $i++) {\n        if ($s[$i] =~ /[a-zA-Z]/)\
    \ {\n            $str .= $s[$i] =~ /[a-z]/ ? uc($s[$i]) : lc($s[$i]);\n      \
    \  } else {\n            $str .= $s[$i];\n        }\n    }\n    return $str;\n\
    }", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c\
    \ =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/) {\n                $c = uc $c;\n\
    \            } else {\n                $c = lc $c;\n            }\n        }\n\
    \        push @r, $c;\n    }\n    return join '', @r;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n \
    \           push @r, $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n      \
    \      push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $rev\
    \ = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      $rev .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $rev .=\
    \ lc $c;\n        } else {\n            $rev .= $c;\n        }\n    }\n    return\
    \ $rev;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n  \
    \      if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/) {\n             \
    \   $c = uc $c;\n            }\n            else {\n                $c = lc $c;\n\
    \            }\n        }\n        push @r, $c;\n    }\n    return join '', @r;\n\
    }", "    my $r = \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return reverse $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $r = '';\n    for (my $i = length($s)\
    \ - 1; $i >= 0; $i--) {\n        my $c = substr($s, $i, 1);\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n \
    \           $r .= lc($c);\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my $r =\
    \ '';\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc\
    \ $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        }\
    \ else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my\
    \ $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n   \
    \         $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc\
    \ $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n\
    }", "    my @a = split //, $s;\n    my @b = map {\n        if (/[a-z]/) {\n  \
    \          uc $_;\n        } elsif (/[A-Z]/) {\n            lc $_;\n        }\
    \ else {\n            $_;\n        }\n    } @a;\n    return join '', @b;\n}",
  "    if ($s =~ /[a-zA-Z]/) {\n        $s =~ tr/a-zA-Z/A-Za-z/;\n    } else {\n \
    \       $s = reverse $s;\n    }\n    return $s;\n}", "    my $r = '';\n    for\
    \ my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return scalar reverse $r;\n}", " \
    \   my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my $r = '';\n    for my $c (@s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/)\
    \ {\n                $c = uc $c;\n            } else {\n                $c = lc\
    \ $c;\n            }\n        }\n        push @r, $c;\n    }\n    return join\
    \ '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return scalar reverse $r;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n     \
    \       push @r, $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n          \
    \  push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    if ($s =~\
    \ /[a-zA-Z]/) {\n        $s =~ tr/a-zA-Z/A-Za-z/;\n    } else {\n        $s =\
    \ reverse $s;\n    }\n    return $s;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n   \
    \ for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .=\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n      \
    \  } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", "  \
    \  my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for (my $i = length($s) - 1;\
    \ $i >= 0; $i--) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n          \
    \  $r .= lc($c);\n        } else {\n            $r .= $c;\n        }\n    }\n\
    \    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n      \
    \  if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n   \
    \ for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            $c =~ tr/a-zA-Z/A-Za-z/;\n\
    \        }\n        push @r, $c;\n    }\n    return join '', @r;\n}", "    my\
    \ $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n   \
    \         $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc\
    \ $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n\
    }", "    my @s = split //, $s;\n    my $i = 0;\n    my $j = $#s;\n    while ($i\
    \ < $j) {\n        if ($s[$i] =~ /[a-zA-Z]/) {\n            if ($s[$j] =~ /[a-zA-Z]/)\
    \ {\n                ($s[$i], $s[$j]) = ($s[$j], $s[$i]);\n                $i++;\n\
    \                $j--;\n            } else {\n                $j--;\n        \
    \    }\n        } else {\n            if ($s[$j] =~ /[a-zA-Z]/) {\n          \
    \      $i++;\n            } else {\n                $i++;\n                $j--;\n\
    \            }\n        }\n    }\n    return join '', @s;\n}", "    my @s = split(//,\
    \ $s);\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n    \
    \        if ($c =~ /[a-z]/) {\n                $c = uc($c);\n            } else\
    \ {\n                $c = lc($c);\n            }\n        }\n        push @r,\
    \ $c;\n    }\n    return join('', reverse(@r));\n}", "    my $r = '';\n    for\
    \ my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n \
    \           $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        push @r, $c;\n    }\n\
    \    return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for\
    \ my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/)\
    \ {\n                $c = uc $c;\n            } else {\n                $c = lc\
    \ $c;\n            }\n        }\n        push @r, $c;\n    }\n    return join\
    \ '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n\
    \        if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/) {\n           \
    \     $c = uc $c;\n            } else {\n                $c = lc $c;\n       \
    \     }\n        }\n        push @r, $c;\n    }\n    return join '', @r;\n}",
  "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            push @r, $c\
    \ =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n            push @r, $c;\n  \
    \      }\n    }\n    return join '', @r;\n}", "    my $r = \"\";\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $result = '';\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $result .= lc $c;\n        } else {\n            $result .= $c;\n\
    \        }\n    }\n    return $result;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $res = '';\n \
    \   for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n \
    \       } else {\n            $res .= $c;\n        }\n    }\n    return $res;\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $rev = reverse $s;\n    my $res = '';\n\
    \    for my $i (0..length($s)-1) {\n        my $c = substr($rev, $i, 1);\n   \
    \     if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $res .= lc $c;\n        } else {\n            $res .=\
    \ $c;\n        }\n    }\n    return $res;\n}", "    my $r = \"\";\n    my $l =\
    \ length($s);\n    for (my $i = 0; $i < $l; $i++) {\n        my $c = substr($s,\
    \ $i, 1);\n        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else {\n     \
    \       $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n     \
    \       if ($c =~ /[a-z]/) {\n                $c = uc $c;\n            } else\
    \ {\n                $c = lc $c;\n            }\n        }\n        push @r, $c;\n\
    \    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            $c =~ tr/A-Za-z/a-zA-Z/;\n\
    \        }\n        push @r, $c;\n    }\n    return join '', @r;\n}", "    my\
    \ $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n   \
    \         $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc\
    \ $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n\
    }", "    my $result = \"\";\n    my $i = 0;\n    my $is_letter = 0;\n    while\
    \ ($i < length($s)) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-zA-Z]/)\
    \ {\n            $is_letter = 1;\n            if ($c =~ /[a-z]/) {\n         \
    \       $c = uc($c);\n            } else {\n                $c = lc($c);\n   \
    \         }\n        }\n        $result .= $c;\n        $i++;\n    }\n    if ($is_letter\
    \ == 0) {\n        $result = reverse($result);\n    }\n    return $result;\n}",
  "    my $r = '';\n    my $i = 0;\n    my $l = length($s);\n    while ($i < $l) {\n\
    \        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/i) {\n         \
    \   $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        $r .= $c;\n        $i++;\n  \
    \  }\n    return $r;\n}", "    my @s = split //, $s;\n    my $i = 0;\n    my $j\
    \ = $#s;\n    while ($i < $j) {\n        if ($s[$i] =~ /[a-zA-Z]/) {\n       \
    \     if ($s[$j] =~ /[a-zA-Z]/) {\n                ($s[$i], $s[$j]) = ($s[$j],\
    \ $s[$i]);\n                $i++;\n                $j--;\n            } else {\n\
    \                $j--;\n            }\n        } else {\n            if ($s[$j]\
    \ =~ /[a-zA-Z]/) {\n                $i++;\n            } else {\n            \
    \    $i++;\n                $j--;\n            }\n        }\n    }\n    return\
    \ join '', @s;\n}", "    my $res = '';\n    for my $c (split //, $s) {\n     \
    \   if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $res .= lc $c;\n        } else {\n            $res .= $c;\n \
    \       }\n    }\n    return $res;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            push @r, $c\
    \ =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n            push @r, $c;\n  \
    \      }\n    }\n    return join '', @r;\n}", "    my $res = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n        } else\
    \ {\n            $res .= $c;\n        }\n    }\n    return $res;\n}", "    my\
    \ $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n   \
    \         $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc\
    \ $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for (@s) {\n  \
    \      if (/[a-z]/) {\n            push @r, uc $_;\n        } elsif (/[A-Z]/)\
    \ {\n            push @r, lc $_;\n        } else {\n            push @r, $_;\n\
    \        }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n \
    \   my $i = 0;\n    while ($i < @s) {\n        if ($s[$i] =~ /[a-zA-Z]/) {\n \
    \           $s[$i] =~ tr/a-zA-Z/A-Za-z/;\n        }\n        $i++;\n    }\n  \
    \  return join '', @s;\n}", "    my @s = split //, $s;\n    my @r;\n    for my\
    \ $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/) {\n\
    \                $c = uc $c;\n            } else {\n                $c = lc $c;\n\
    \            }\n        }\n        push @r, $c;\n    }\n    return join '', @r;\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n   \
    \ for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .=\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n      \
    \  } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
