name: HumanEval_161_solve
language: pl
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# >>> solve(\"1234\")\n# \"4321\"\n# >>> solve(\"ab\")\n\
  # \"AB\"\n# >>> solve(\"#a@C\")\n# \"#A@c\"\nsub solve {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n\
  \        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"\
  ),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $result = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $result .= uc $c;\n   \
    \     } elsif ($c =~ /[A-Z]/) {\n            $result .= lc $c;\n        } else\
    \ {\n            $result .= $c;\n        }\n    }\n    return $result;\n}", " \
    \   my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            $c =~ tr/a-zA-Z/A-Za-z/;\n\
    \        }\n        push @r, $c;\n    }\n    return join '', @r;\n}", "    my\
    \ $result = \"\";\n    if ($s =~ /[a-zA-Z]/) {\n        for (my $i = 0; $i < length($s);\
    \ $i++) {\n            if ($s[$i] =~ /[a-z]/) {\n                $result .= uc($s[$i]);\n\
    \            } elsif ($s[$i] =~ /[A-Z]/) {\n                $result .= lc($s[$i]);\n\
    \            } else {\n                $result .= $s[$i];\n            }\n   \
    \     }\n    } else {\n        for (my $i = length($s) - 1; $i >= 0; $i--) {\n\
    \            $result .= $s[$i];\n        }\n    }\n    return $result;\n}", " \
    \   my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/i) {\n            $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        push @r,\
    \ $c;\n    }\n    return join '', @r;\n}", "    my $r = \"\";\n    if ($s =~ /[a-zA-Z]/)\
    \ {\n        for (my $i = 0; $i < length($s); $i++) {\n            my $c = substr($s,\
    \ $i, 1);\n            if ($c =~ /[a-z]/) {\n                $r .= uc($c);\n \
    \           } elsif ($c =~ /[A-Z]/) {\n                $r .= lc($c);\n       \
    \     } else {\n                $r .= $c;\n            }\n        }\n    } else\
    \ {\n        for (my $i = length($s) - 1; $i >= 0; $i--) {\n            $r .=\
    \ substr($s, $i, 1);\n        }\n    }\n    return $r;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n \
    \           if ($c =~ /[a-z]/) {\n                $c = uc $c;\n            } else\
    \ {\n                $c = lc $c;\n            }\n        }\n        push @r, $c;\n\
    \    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = \"\"\
    ;\n    for (my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i,\
    \ 1);\n        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else {\n           \
    \ $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n           \
    \ push @r, $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n     \
    \       $c =~ tr/a-zA-Z/A-Za-z/;\n        }\n        push @r, $c;\n    }\n   \
    \ return join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $result = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $result .= uc $c;\n   \
    \     } elsif ($c =~ /[A-Z]/) {\n            $result .= lc $c;\n        } else\
    \ {\n            $result .= $c;\n        }\n    }\n    return scalar reverse $result;\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
