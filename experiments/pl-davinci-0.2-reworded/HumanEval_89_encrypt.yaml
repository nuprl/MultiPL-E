name: HumanEval_89_encrypt
language: pl
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# >>> encrypt(\"hi\")\n# \"lm\"\n# >>> encrypt(\"\
  asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt(\"gf\")\n# \"kj\"\n# >>> encrypt(\"\
  et\")\n# \"ix\"\nsub encrypt {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n\
  \        if(eq_deeply($candidate->(\"hi\"),\"lm\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"\
  ewhjklnop\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"gf\"),\"kj\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  faewfawefaewg\"),\"jeiajeaijeiak\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),\"e\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    my $ret = \"\";\n    for my $c (split //, $s) {\n        $ret .=\
    \ chr(ord($c) + 2 * 2);\n    }\n    return $ret;\n}", "    my $result = \"\";\n\
    \    my $i = 0;\n    while ($i < length($s)) {\n        my $c = substr($s, $i,\
    \ 1);\n        my $ord = ord($c);\n        $ord += 2 * 2;\n        $c = chr($ord);\n\
    \        $result .= $c;\n        $i++;\n    }\n    return $result;\n}", "    my\
    \ $c = \"\";\n    my $i = 0;\n    while ($i < length($s)) {\n        my $ch =\
    \ substr($s, $i, 1);\n        my $n = ord($ch) - ord('a');\n        $n = ($n +\
    \ 2 * 2) % 26;\n        $c .= chr($n + ord('a'));\n        $i++;\n    }\n    return\
    \ $c;\n}", "    my $result = \"\";\n    for (my $i = 0; $i < length($s); $i++)\
    \ {\n        my $c = substr($s, $i, 1);\n        my $n = ord($c) - ord('a');\n\
    \        $n = ($n + 2) % 26;\n        $result .= chr($n + ord('a'));\n    }\n\
    \    return $result;\n}", "    my $result = \"\";\n    my $i = 0;\n    while ($i\
    \ < length($s)) {\n        my $c = substr($s, $i, 1);\n        my $ord = ord($c);\n\
    \        $ord = $ord + 2 * 2;\n        $c = chr($ord);\n        $result = $result\
    \ . $c;\n        $i = $i + 1;\n    }\n    return $result;\n}", "    my $r = \"\
    \";\n    for my $c (split //, $s) {\n        $r .= chr(ord($c) + 2 * 2);\n   \
    \ }\n    return $r;\n}", "    my $result = \"\";\n    foreach my $c (split //,\
    \ $s) {\n        $result .= chr(ord($c) + 2 * 2);\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    my $i;\n    for ($i = 0; $i < length($s); $i++)\
    \ {\n        my $c = substr($s, $i, 1);\n        my $n = ord($c) - ord('a');\n\
    \        $n = ($n + 2) % 26;\n        $result .= chr($n + ord('a'));\n    }\n\
    \    return $result;\n}", "    my $enc = \"\";\n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        my $idx = index($alphabet,\
    \ $c);\n        $idx = ($idx + 2 * 2) % 26;\n        $enc .= substr($alphabet,\
    \ $idx, 1);\n    }\n    return $enc;\n}", "    my $result = \"\";\n    for (my\
    \ $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n     \
    \   my $n = ord($c) - ord('a');\n        $n = ($n + 2) % 26;\n        $c = chr($n\
    \ + ord('a'));\n        $result .= $c;\n    }\n    return $result;\n}", "    my\
    \ $r = '';\n    my $a = ord('a');\n    my $z = ord('z');\n    my $A = ord('A');\n\
    \    my $Z = ord('Z');\n    my $n = ord('n');\n    my $m = ord('m');\n    for\
    \ my $c (split //, $s) {\n        my $o = ord($c);\n        if ($o >= $a && $o\
    \ <= $z) {\n            if ($o <= $n) {\n                $o += 2;\n          \
    \  } else {\n                $o -= 24;\n            }\n        } elsif ($o >=\
    \ $A && $o <= $Z) {\n            if ($o <= $m) {\n                $o += 2;\n \
    \           } else {\n                $o -= 24;\n            }\n        }\n  \
    \      $r .= chr($o);\n    }\n    return $r;\n}", "    my $r = \"\";\n    for\
    \ my $c (split //, $s) {\n        my $i = ord($c) - ord('a');\n        $i = ($i\
    \ + 2) % 26;\n        $r .= chr($i + ord('a'));\n    }\n    return $r;\n}", " \
    \   my $r = \"\";\n    for my $c (split //, $s) {\n        $r .= chr(ord($c) +\
    \ 2 * 2);\n    }\n    return $r;\n}", "    my $r = \"\";\n    for my $c (split\
    \ //, $s) {\n        my $i = ord($c) - ord('a');\n        $i = ($i + 2) % 26;\n\
    \        $r .= chr($i + ord('a'));\n    }\n    return $r;\n}", "    my $r = \"\
    \";\n    for my $c (split //, $s) {\n        my $i = ord($c) - ord('a');\n   \
    \     $i = ($i + 2) % 26;\n        $r .= chr($i + ord('a'));\n    }\n    return\
    \ $r;\n}", "    my $result = \"\";\n    for my $c (split //, $s) {\n        my\
    \ $index = ord($c) - ord('a');\n        $index = ($index + 2) % 26;\n        $result\
    \ .= chr($index + ord('a'));\n    }\n    return $result;\n}", "    my $encrypted\
    \ = \"\";\n    my $i = 0;\n    my $len = length($s);\n    while ($i < $len) {\n\
    \        my $c = substr($s, $i, 1);\n        my $ascii = ord($c);\n        if\
    \ ($ascii >= 97 && $ascii <= 122) {\n            $ascii += 2;\n            if\
    \ ($ascii > 122) {\n                $ascii -= 26;\n            }\n        }\n\
    \        $encrypted .= chr($ascii);\n        $i++;\n    }\n    return $encrypted;\n\
    }", "    my $r = \"\";\n    foreach my $c (split //, $s) {\n        $r .= chr(ord($c)\
    \ + 2 * 2);\n    }\n    return $r;\n}", "    my $r = \"\";\n    for my $c (split\
    \ //, $s) {\n        $r .= chr(ord($c) + 2 * 2);\n    }\n    return $r;\n}", " \
    \   my $result = \"\";\n    my @chars = split //, $s;\n    foreach my $c (@chars)\
    \ {\n        my $i = ord($c) - ord('a');\n        $i = ($i + 2 * 2) % 26;\n  \
    \      $result .= chr($i + ord('a'));\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
