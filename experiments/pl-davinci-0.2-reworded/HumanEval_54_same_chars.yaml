name: HumanEval_54_same_chars
language: pl
prompt: "# Check if two words have the same characters.\n# >>> same_chars(\"eabcdzzzz\"\
  , \"dddzzzzzzzddeddabc\")\n# 1\n# >>> same_chars(\"abcd\", \"dddddddabc\")\n# 1\n\
  # >>> same_chars(\"dddddddabc\", \"abcd\")\n# 1\n# >>> same_chars(\"eabcd\", \"\
  dddddddabc\")\n# \"\"\n# >>> same_chars(\"abcd\", \"dddddddabce\")\n# \"\"\n# >>>\
  \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# \"\"\nsub same_chars {\n \
  \   my($s0, $s1) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&same_chars;\n\
  \        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcd\", \"dddddddabc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->(\"dddddddabc\", \"abcd\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eabcd\", \"dddddddabc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabcf\"),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eabcdzzzz\", \"dddzzzzzzzddddabc\"),\"\")) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\", \"aaccc\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %chars;\n    foreach my $c (split //, $s0) {\n        $chars{$c}++;\n\
    \    }\n    foreach my $c (split //, $s1) {\n        $chars{$c}--;\n    }\n  \
    \  foreach my $c (keys %chars) {\n        return \"\" if $chars{$c} != 0;\n  \
    \  }\n    return 1;\n}", "    my @a0 = split //, $s0;\n    my @a1 = split //,\
    \ $s1;\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n\
    \    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys\
    \ %h0) {\n        if (!exists $h1{$c}) {\n            return \"\";\n        }\n\
    \        if ($h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n\
    \    for my $c (keys %h1) {\n        if (!exists $h0{$c}) {\n            return\
    \ \"\";\n        }\n        if ($h0{$c} != $h1{$c}) {\n            return \"\"\
    ;\n        }\n    }\n    return 1;\n}", "    my @a0 = split //, $s0;\n    my @a1\
    \ = split //, $s1;\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n\
    \    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys\
    \ %h0) {\n        if (!exists $h1{$c}) {\n            return \"\";\n        }\n\
    \        if ($h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n\
    \    for my $c (keys %h1) {\n        if (!exists $h0{$c}) {\n            return\
    \ \"\";\n        }\n        if ($h1{$c} != $h0{$c}) {\n            return \"\"\
    ;\n        }\n    }\n    return 1;\n}", "    my @a0 = sort split //, $s0;\n  \
    \  my @a1 = sort split //, $s1;\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < @a0 && $j < @a1) {\n        if ($a0[$i] eq $a1[$j]) {\n            $i++;\n\
    \            $j++;\n        } elsif ($a0[$i] lt $a1[$j]) {\n            return\
    \ \"\";\n        } else {\n            $j++;\n        }\n    }\n    return $i\
    \ == @a0 ? 1 : \"\";\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //,\
    \ $s1;\n    my %s0;\n    my %s1;\n    for (@s0) {\n        $s0{$_}++;\n    }\n\
    \    for (@s1) {\n        $s1{$_}++;\n    }\n    for (keys %s0) {\n        return\
    \ '' if $s0{$_} != $s1{$_};\n    }\n    return 1;\n}", "    my @s0 = split //,\
    \ $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my\
    \ %s1 = map { $_ => 1 } @s1;\n    for my $c (keys %s0) {\n        return \"\"\
    \ if !$s1{$c};\n    }\n    for my $c (keys %s1) {\n        return \"\" if !$s0{$c};\n\
    \    }\n    return 1;\n}", "    my @a0 = sort split //, $s0;\n    my @a1 = sort\
    \ split //, $s1;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @a0 && $j <\
    \ @a1) {\n        if ($a0[$i] lt $a1[$j]) {\n            $i++;\n        } elsif\
    \ ($a0[$i] gt $a1[$j]) {\n            $j++;\n        } else {\n            $i++;\n\
    \            $j++;\n        }\n    }\n    if ($i == @a0 && $j == @a1) {\n    \
    \    return 1;\n    } else {\n        return \"\";\n    }\n}", "    my @s0 = split(//,\
    \ $s0);\n    my @s1 = split(//, $s1);\n    my %s0;\n    my %s1;\n    for my $c\
    \ (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n\
    \    }\n    for my $c (keys %s0) {\n        return \"\" if $s0{$c} != $s1{$c};\n\
    \    }\n    for my $c (keys %s1) {\n        return \"\" if $s0{$c} != $s1{$c};\n\
    \    }\n    return 1;\n}", "    my(%c0, %c1);\n    for (split //, $s0) { $c0{$_}++\
    \ }\n    for (split //, $s1) { $c1{$_}++ }\n    for (keys %c0) {\n        return\
    \ '' if $c0{$_} != $c1{$_};\n    }\n    return 1;\n}", "    my @a0 = split //,\
    \ $s0;\n    my @a1 = split //, $s1;\n    my %h0;\n    my %h1;\n    for my $c (@a0)\
    \ {\n        $h0{$c}++;\n    }\n    for my $c (@a1) {\n        $h1{$c}++;\n  \
    \  }\n    for my $c (keys %h0) {\n        if ($h0{$c} != $h1{$c}) {\n        \
    \    return \"\";\n        }\n    }\n    return 1;\n}", "    my @s0 = split //,\
    \ $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map {$_ => 1} @s0;\n    my %s1\
    \ = map {$_ => 1} @s1;\n    for my $c (keys %s0) {\n        return \"\" if !exists\
    \ $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return \"\" if !exists\
    \ $s0{$c};\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1\
    \ = split //, $s1;\n    my @s0_sorted = sort @s0;\n    my @s1_sorted = sort @s1;\n\
    \    my $s0_sorted = join \"\", @s0_sorted;\n    my $s1_sorted = join \"\", @s1_sorted;\n\
    \    return $s0_sorted eq $s1_sorted;\n}", "    my %c0 = map { $_ => 1 } split\
    \ //, $s0;\n    my %c1 = map { $_ => 1 } split //, $s1;\n    for my $c (keys %c0)\
    \ {\n        return \"\" if !exists $c1{$c};\n    }\n    for my $c (keys %c1)\
    \ {\n        return \"\" if !exists $c0{$c};\n    }\n    return 1;\n}", "    my\
    \ @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_ =>\
    \ 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my @s0_keys = keys %s0;\n \
    \   my @s1_keys = keys %s1;\n    my %s0_count = ();\n    my %s1_count = ();\n\
    \    for my $c (@s0_keys) {\n        $s0_count{$c} = 0;\n    }\n    for my $c\
    \ (@s1_keys) {\n        $s1_count{$c} = 0;\n    }\n    for my $c (@s0) {\n   \
    \     $s0_count{$c}++;\n    }\n    for my $c (@s1) {\n        $s1_count{$c}++;\n\
    \    }\n    for my $c (@s0_keys) {\n        if ($s0_count{$c} != $s1_count{$c})\
    \ {\n            return \"\";\n        }\n    }\n    return 1;\n}", "    my(%c0,\
    \ %c1);\n    for my $c (split //, $s0) {\n        $c0{$c}++;\n    }\n    for my\
    \ $c (split //, $s1) {\n        $c1{$c}++;\n    }\n    for my $c (keys %c0) {\n\
    \        return \"\" if $c0{$c} != $c1{$c};\n    }\n    for my $c (keys %c1) {\n\
    \        return \"\" if $c0{$c} != $c1{$c};\n    }\n    return 1;\n}", "    my\
    \ $s0_copy = $s0;\n    my $s1_copy = $s1;\n    my $s0_len = length($s0);\n   \
    \ my $s1_len = length($s1);\n    my $s0_chars = {};\n    my $s1_chars = {};\n\
    \    my $s0_char;\n    my $s1_char;\n    my $i;\n    my $j;\n    my $result =\
    \ 1;", "    my $s0_len = length($s0);\n    my $s1_len = length($s1);\n    return\
    \ \"\" if $s0_len != $s1_len;\n    my @s0 = split //, $s0;\n    my @s1 = split\
    \ //, $s1;\n    my %s0_count;\n    my %s1_count;\n    for my $i (0..$s0_len-1)\
    \ {\n        $s0_count{$s0[$i]}++;\n        $s1_count{$s1[$i]}++;\n    }\n   \
    \ for my $i (0..$s0_len-1) {\n        return \"\" if $s0_count{$s0[$i]} != $s1_count{$s0[$i]};\n\
    \    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //,\
    \ $s1;\n    my %s0;\n    my %s1;\n    for (@s0) {\n        $s0{$_}++;\n    }\n\
    \    for (@s1) {\n        $s1{$_}++;\n    }\n    for (keys %s0) {\n        return\
    \ \"\" if $s0{$_} != $s1{$_};\n    }\n    for (keys %s1) {\n        return \"\"\
    \ if $s0{$_} != $s1{$_};\n    }\n    return 1;\n}", "    my %h0 = map { $_ =>\
    \ 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split //, $s1;\n    for (keys\
    \ %h0) {\n        return \"\" if !exists $h1{$_};\n    }\n    for (keys %h1) {\n\
    \        return \"\" if !exists $h0{$_};\n    }\n    return 1;\n}", "    my @s0\
    \ = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 }\
    \ @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my @s0_only = grep { !$s1{$_} }\
    \ @s0;\n    my @s1_only = grep { !$s0{$_} } @s1;\n    return @s0_only == 0 &&\
    \ @s1_only == 0 ? 1 : \"\";\n}", "    my @s0 = split //, $s0;\n    my @s1 = split\
    \ //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n\
    \    for my $c (keys %s0) {\n        return \"\" if !exists $s1{$c};\n    }\n\
    \    for my $c (keys %s1) {\n        return \"\" if !exists $s0{$c};\n    }\n\
    \    return 1;\n}", "    my @a0 = split(//, $s0);\n    my @a1 = split(//, $s1);\n\
    \    my @a;\n    my $i;\n    my $j;\n    my $found;\n    my $result = 1;\n   \
    \ for ($i = 0; $i <= $#a0; $i++) {\n        $found = 0;\n        for ($j = 0;\
    \ $j <= $#a1; $j++) {\n            if ($a0[$i] eq $a1[$j]) {\n               \
    \ $found = 1;\n                splice(@a1, $j, 1);\n                last;\n  \
    \          }\n        }\n        if (!$found) {\n            $result = \"\";\n\
    \            last;\n        }\n    }\n    return $result;\n}", "    my @a0 = split\
    \ //, $s0;\n    my @a1 = split //, $s1;\n    my %h0;\n    my %h1;\n    for my\
    \ $c (@a0) {\n        $h0{$c}++;\n    }\n    for my $c (@a1) {\n        $h1{$c}++;\n\
    \    }\n    for my $c (keys %h0) {\n        if (!exists $h1{$c}) {\n         \
    \   return \"\";\n        }\n        if ($h0{$c} != $h1{$c}) {\n            return\
    \ \"\";\n        }\n    }\n    for my $c (keys %h1) {\n        if (!exists $h0{$c})\
    \ {\n            return \"\";\n        }\n        if ($h1{$c} != $h0{$c}) {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my %h0 =\
    \ map { $_ => 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split //, $s1;\n\
    \    for my $c (keys %h0) {\n        return \"\" if !exists $h1{$c};\n    }\n\
    \    for my $c (keys %h1) {\n        return \"\" if !exists $h0{$c};\n    }\n\
    \    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n\
    \    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my\
    \ @s0_only = grep { !$s1{$_} } @s0;\n    my @s1_only = grep { !$s0{$_} } @s1;\n\
    \    return @s0_only || @s1_only ? \"\" : 1;\n}", "    my %c0 = map { $_ => 1\
    \ } split //, $s0;\n    my %c1 = map { $_ => 1 } split //, $s1;\n    my $r = \"\
    \";\n    for my $c (keys %c0) {\n        if (exists $c1{$c}) {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my @s0 = split //, $s0;\n\
    \    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n    for my $c (@s0) {\n\
    \        $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n\
    \    for my $c (keys %s0) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n\
    \    for my $c (keys %s1) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n\
    \    return 1;\n}", "    my %c;\n    for my $c (split //, $s0) {\n        $c{$c}++;\n\
    \    }\n    for my $c (split //, $s1) {\n        $c{$c}--;\n    }\n    for my\
    \ $c (keys %c) {\n        return \"\" if $c{$c};\n    }\n    return 1;\n}", " \
    \   my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
    \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my $s = \"\";\n    for my\
    \ $c (keys %s0) {\n        if ($s1{$c}) {\n            $s .= $c;\n        }\n\
    \    }\n    return $s;\n}", "    my @a0 = sort split //, $s0;\n    my @a1 = sort\
    \ split //, $s1;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @a0 && $j <\
    \ @a1) {\n        if ($a0[$i] lt $a1[$j]) {\n            $i++;\n        } elsif\
    \ ($a0[$i] gt $a1[$j]) {\n            $j++;\n        } else {\n            $i++;\n\
    \            $j++;\n        }\n    }\n    return $i == @a0 && $j == @a1;\n}",
  "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
    \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my $result = 1;\n    for\
    \ my $c (@s0) {\n        if (!exists $s1{$c}) {\n            $result = \"\";\n\
    \            last;\n        }\n    }\n    for my $c (@s1) {\n        if (!exists\
    \ $s0{$c}) {\n            $result = \"\";\n            last;\n        }\n    }\n\
    \    return $result;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //,\
    \ $s1;\n    my %s0;\n    my %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n\
    \    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys\
    \ %s0) {\n        if ($s0{$c} != $s1{$c}) {\n            return \"\";\n      \
    \  }\n    }\n    return 1;\n}", "    my %c0;\n    my %c1;\n    for my $c (split\
    \ //, $s0) {\n        $c0{$c}++;\n    }\n    for my $c (split //, $s1) {\n   \
    \     $c1{$c}++;\n    }\n    for my $c (keys %c0) {\n        return \"\" if $c0{$c}\
    \ != $c1{$c};\n    }\n    for my $c (keys %c1) {\n        return \"\" if $c0{$c}\
    \ != $c1{$c};\n    }\n    return 1;\n}", "    my @s0 = split(//, $s0);\n    my\
    \ @s1 = split(//, $s1);\n    my %s0 = ();\n    my %s1 = ();\n    for my $c (@s0)\
    \ {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n  \
    \  }\n    for my $c (keys %s0) {\n        if ($s0{$c} != $s1{$c}) {\n        \
    \    return \"\";\n        }\n    }\n    return 1;\n}", "    my @s0 = split //,\
    \ $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n    for my $c (@s0)\
    \ {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n  \
    \  }\n    for my $c (keys %s0) {\n        return \"\" if $s0{$c} != $s1{$c};\n\
    \    }\n    for my $c (keys %s1) {\n        return \"\" if $s0{$c} != $s1{$c};\n\
    \    }\n    return 1;\n}", "    my @a0 = split(//, $s0);\n    my @a1 = split(//,\
    \ $s1);\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n\
    \    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys\
    \ %h0) {\n        if (!exists $h1{$c}) {\n            return \"\";\n        }\n\
    \        if ($h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n\
    \    for my $c (keys %h1) {\n        if (!exists $h0{$c}) {\n            return\
    \ \"\";\n        }\n        if ($h1{$c} != $h0{$c}) {\n            return \"\"\
    ;\n        }\n    }\n    return 1;\n}", "    my %h0 = map {$_ => 1} split //,\
    \ $s0;\n    my %h1 = map {$_ => 1} split //, $s1;\n    for (keys %h0) {\n    \
    \    return \"\" if !$h1{$_};\n    }\n    for (keys %h1) {\n        return \"\"\
    \ if !$h0{$_};\n    }\n    return 1;\n}", "    my @a0 = split //, $s0;\n    my\
    \ @a1 = split //, $s1;\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n    \
    \    $h0{$c}++;\n    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n   \
    \ for my $c (keys %h0) {\n        if(!exists $h1{$c}) {\n            return \"\
    \";\n        }\n        if($h0{$c} != $h1{$c}) {\n            return \"\";\n \
    \       }\n    }\n    for my $c (keys %h1) {\n        if(!exists $h0{$c}) {\n\
    \            return \"\";\n        }\n        if($h0{$c} != $h1{$c}) {\n     \
    \       return \"\";\n        }\n    }\n    return 1;\n}", "    my @a0 = sort\
    \ split(//, $s0);\n    my @a1 = sort split(//, $s1);\n    my $i = 0;\n    my $j\
    \ = 0;\n    while ($i < @a0 && $j < @a1) {\n        if ($a0[$i] eq $a1[$j]) {\n\
    \            $i++;\n            $j++;\n        } elsif ($a0[$i] lt $a1[$j]) {\n\
    \            return \"\";\n        } else {\n            $j++;\n        }\n  \
    \  }\n    return $i == @a0 ? 1 : \"\";\n}", "    my @s0 = split //, $s0;\n   \
    \ my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map\
    \ { $_ => 1 } @s1;\n    my %s = map { $_ => 1 } keys %s0, keys %s1;\n    for my\
    \ $c (keys %s) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n    return\
    \ 1;\n}", "    my %h0 = map {$_ => 1} split //, $s0;\n    my %h1 = map {$_ =>\
    \ 1} split //, $s1;\n    foreach my $k (keys %h0) {\n        return \"\" if !exists\
    \ $h1{$k};\n    }\n    foreach my $k (keys %h1) {\n        return \"\" if !exists\
    \ $h0{$k};\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1\
    \ = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ =>\
    \ 1 } @s1;\n    my $r = 1;\n    for my $c (@s0) {\n        if (!$s1{$c}) {\n \
    \           $r = \"\";\n            last;\n        }\n    }\n    for my $c (@s1)\
    \ {\n        if (!$s0{$c}) {\n            $r = \"\";\n            last;\n    \
    \    }\n    }\n    return $r;\n}", "    my @a0 = split(//, $s0);\n    my @a1 =\
    \ split(//, $s1);\n    my %h0;\n    my %h1;\n    foreach my $c (@a0) {\n     \
    \   $h0{$c}++;\n    }\n    foreach my $c (@a1) {\n        $h1{$c}++;\n    }\n\
    \    foreach my $c (keys %h0) {\n        if (!defined($h1{$c}) || $h0{$c} != $h1{$c})\
    \ {\n            return \"\";\n        }\n    }\n    foreach my $c (keys %h1)\
    \ {\n        if (!defined($h0{$c}) || $h0{$c} != $h1{$c}) {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    my(%h0, %h1);\n    foreach\
    \ my $c (split(//, $s0)) {\n        $h0{$c}++;\n    }\n    foreach my $c (split(//,\
    \ $s1)) {\n        $h1{$c}++;\n    }\n    foreach my $c (keys %h0) {\n       \
    \ if (!defined($h1{$c}) || $h0{$c} != $h1{$c}) {\n            return \"\";\n \
    \       }\n    }\n    foreach my $c (keys %h1) {\n        if (!defined($h0{$c})\
    \ || $h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_\
    \ => 1 } split //, $s1;\n    for my $c (keys %c0) {\n        return \"\" if !$c1{$c};\n\
    \    }\n    for my $c (keys %c1) {\n        return \"\" if !$c0{$c};\n    }\n\
    \    return 1;\n}", "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 =\
    \ map { $_ => 1 } split //, $s1;\n    my %h = map { $_ => 1 } keys %h0, keys %h1;\n\
    \    my $s = join \"\", sort keys %h;\n    my $r = 1;\n    for my $c (split //,\
    \ $s) {\n        my $n0 = $h0{$c} || 0;\n        my $n1 = $h1{$c} || 0;\n    \
    \    if ($n0 != $n1) {\n            $r = \"\";\n            last;\n        }\n\
    \    }\n    return $r;\n}", "    my @a0 = split //, $s0;\n    my @a1 = split //,\
    \ $s1;\n    my %h0;\n    my %h1;\n    for (@a0) {\n        $h0{$_}++;\n    }\n\
    \    for (@a1) {\n        $h1{$_}++;\n    }\n    for (keys %h0) {\n        return\
    \ \"\" if $h0{$_} != $h1{$_};\n    }\n    return 1;\n}", "    my %c0 = map { $_\
    \ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split //, $s1;\n    for\
    \ my $c (keys %c0) {\n        return \"\" if !$c1{$c};\n    }\n    for my $c (keys\
    \ %c1) {\n        return \"\" if !$c0{$c};\n    }\n    return 1;\n}", "    my\
    \ %h0 = ();\n    my %h1 = ();\n    for my $c (split //, $s0) {\n        $h0{$c}++;\n\
    \    }\n    for my $c (split //, $s1) {\n        $h1{$c}++;\n    }\n    for my\
    \ $c (keys %h0) {\n        if (!exists $h1{$c} || $h0{$c} != $h1{$c}) {\n    \
    \        return \"\";\n        }\n    }\n    for my $c (keys %h1) {\n        if\
    \ (!exists $h0{$c} || $h0{$c} != $h1{$c}) {\n            return \"\";\n      \
    \  }\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split\
    \ //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n\
    \    my $r = 1;\n    for my $c (keys %s0) {\n        if (!exists $s1{$c}) {\n\
    \            $r = \"\";\n            last;\n        }\n    }\n    for my $c (keys\
    \ %s1) {\n        if (!exists $s0{$c}) {\n            $r = \"\";\n           \
    \ last;\n        }\n    }\n    return $r;\n}", "    my %c0 = ();\n    my %c1 =\
    \ ();\n    for my $c (split //, $s0) {\n        $c0{$c}++;\n    }\n    for my\
    \ $c (split //, $s1) {\n        $c1{$c}++;\n    }\n    for my $c (keys %c0) {\n\
    \        if ($c0{$c} != $c1{$c}) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my %c0 = map {$_ => 1} split //, $s0;\n    my %c1 = map\
    \ {$_ => 1} split //, $s1;\n    my $ok = 1;\n    for my $c (keys %c0) {\n    \
    \    if (!defined $c1{$c}) {\n            $ok = 0;\n            last;\n      \
    \  }\n    }\n    if ($ok) {\n        for my $c (keys %c1) {\n            if (!defined\
    \ $c0{$c}) {\n                $ok = 0;\n                last;\n            }\n\
    \        }\n    }\n    return $ok ? 1 : \"\";\n}", "    my @a0 = split(//, $s0);\n\
    \    my @a1 = split(//, $s1);\n    my @a;\n    my $i;\n    my $j;\n    my $found;\n\
    \    my $result = 1;\n    for ($i = 0; $i <= $#a0; $i++) {\n        $found = 0;\n\
    \        for ($j = 0; $j <= $#a1; $j++) {\n            if ($a0[$i] eq $a1[$j])\
    \ {\n                $found = 1;\n                splice(@a1, $j, 1);\n      \
    \          last;\n            }\n        }\n        if (!$found) {\n         \
    \   $result = \"\";\n            last;\n        }\n    }\n    return $result;\n\
    }", "    my $i;\n    my $c;\n    my %c0;\n    my %c1;\n    my $len0 = length($s0);\n\
    \    my $len1 = length($s1);\n    if ($len0 != $len1) {\n        return \"\";\n\
    \    }\n    for ($i = 0; $i < $len0; $i++) {\n        $c = substr($s0, $i, 1);\n\
    \        $c0{$c}++;\n    }\n    for ($i = 0; $i < $len1; $i++) {\n        $c =\
    \ substr($s1, $i, 1);\n        $c1{$c}++;\n    }\n    for $c (keys %c0) {\n  \
    \      if ($c0{$c} != $c1{$c}) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my(%h0, %h1);\n    $h0{$_}++ for split //, $s0;\n   \
    \ $h1{$_}++ for split //, $s1;\n    for (keys %h0) {\n        return \"\" if !exists\
    \ $h1{$_} || $h0{$_} != $h1{$_};\n    }\n    for (keys %h1) {\n        return\
    \ \"\" if !exists $h0{$_} || $h1{$_} != $h0{$_};\n    }\n    return 1;\n}", " \
    \   my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my\
    \ %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1)\
    \ {\n        $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return \"\"\
    \ if !exists $s1{$c} || $s0{$c} != $s1{$c};\n    }\n    for my $c (keys %s1) {\n\
    \        return \"\" if !exists $s0{$c} || $s0{$c} != $s1{$c};\n    }\n    return\
    \ 1;\n}", "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_\
    \ => 1 } split //, $s1;\n    for my $c (keys %c0) {\n        return \"\" if !exists\
    \ $c1{$c};\n    }\n    for my $c (keys %c1) {\n        return \"\" if !exists\
    \ $c0{$c};\n    }\n    return 1;\n}", "    my %c0;\n    my %c1;\n    for my $c\
    \ (split //, $s0) {\n        $c0{$c}++;\n    }\n    for my $c (split //, $s1)\
    \ {\n        $c1{$c}++;\n    }\n    for my $c (keys %c0) {\n        return \"\"\
    \ if !exists $c1{$c} || $c0{$c} != $c1{$c};\n    }\n    for my $c (keys %c1) {\n\
    \        return \"\" if !exists $c0{$c} || $c1{$c} != $c0{$c};\n    }\n    return\
    \ 1;\n}", "    my $len0 = length($s0);\n    my $len1 = length($s1);\n    if ($len0\
    \ != $len1) {\n        return \"\";\n    }\n    my %h0;\n    my %h1;\n    for\
    \ (my $i = 0; $i < $len0; $i++) {\n        my $c0 = substr($s0, $i, 1);\n    \
    \    my $c1 = substr($s1, $i, 1);\n        $h0{$c0}++;\n        $h1{$c1}++;\n\
    \    }\n    foreach my $c (keys %h0) {\n        if ($h0{$c} != $h1{$c}) {\n  \
    \          return \"\";\n        }\n    }\n    return 1;\n}", "    my @s0 = split(//,\
    \ $s0);\n    my @s1 = split(//, $s1);\n    my %s0 = ();\n    my %s1 = ();\n  \
    \  for (@s0) {\n        $s0{$_}++;\n    }\n    for (@s1) {\n        $s1{$_}++;\n\
    \    }\n    for (keys %s0) {\n        return \"\" if !exists $s1{$_} || $s0{$_}\
    \ != $s1{$_};\n    }\n    for (keys %s1) {\n        return \"\" if !exists $s0{$_}\
    \ || $s0{$_} != $s1{$_};\n    }\n    return 1;\n}", "    my %h0 = map { $_ =>\
    \ 1 } split(//, $s0);\n    my %h1 = map { $_ => 1 } split(//, $s1);\n    for my\
    \ $k (keys %h0) {\n        return \"\" if (!exists $h1{$k});\n    }\n    for my\
    \ $k (keys %h1) {\n        return \"\" if (!exists $h0{$k});\n    }\n    return\
    \ 1;\n}", "    my @s0 = split(//, $s0);\n    my @s1 = split(//, $s1);\n    my\
    \ %s0 = ();\n    my %s1 = ();\n    for my $c (@s0) {\n        $s0{$c}++;\n   \
    \ }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys %s0)\
    \ {\n        if ($s0{$c} != $s1{$c}) {\n            return \"\";\n        }\n\
    \    }\n    return 1;\n}", "    my @a0 = split //, $s0;\n    my @a1 = split //,\
    \ $s1;\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n\
    \    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys\
    \ %h0) {\n        if (!defined $h1{$c} || $h0{$c} != $h1{$c}) {\n            return\
    \ '';\n        }\n    }\n    for my $c (keys %h1) {\n        if (!defined $h0{$c}\
    \ || $h0{$c} != $h1{$c}) {\n            return '';\n        }\n    }\n    return\
    \ 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n\
    \    my %s1;\n    for my $i (@s0) {\n        $s0{$i}++;\n    }\n    for my $i\
    \ (@s1) {\n        $s1{$i}++;\n    }\n    for my $i (keys %s0) {\n        if (!defined\
    \ $s1{$i} || $s0{$i} != $s1{$i}) {\n            return \"\";\n        }\n    }\n\
    \    for my $i (keys %s1) {\n        if (!defined $s0{$i} || $s0{$i} != $s1{$i})\
    \ {\n            return \"\";\n        }\n    }\n    return 1;\n}", "    my @s0\
    \ = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 }\
    \ @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my @s0_only = grep { !$s1{$_} }\
    \ @s0;\n    my @s1_only = grep { !$s0{$_} } @s1;\n    return @s0_only || @s1_only\
    \ ? \"\" : 1;\n}", "    my @a0 = split(//, $s0);\n    my @a1 = split(//, $s1);\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $n0 = scalar(@a0);\n    my $n1 = scalar(@a1);\n\
    \    my $ret = \"\";\n    for ($i = 0; $i < $n0; $i++) {\n        for ($j = 0;\
    \ $j < $n1; $j++) {\n            if ($a0[$i] eq $a1[$j]) {\n                $ret\
    \ .= $a0[$i];\n                $a1[$j] = \"\";\n                last;\n      \
    \      }\n        }\n    }\n    return $ret;\n}", "    my @s0 = split //, $s0;\n\
    \    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n    for (@s0) {\n    \
    \    $s0{$_}++;\n    }\n    for (@s1) {\n        $s1{$_}++;\n    }\n    for (keys\
    \ %s0) {\n        return \"\" if $s0{$_} != $s1{$_};\n    }\n    return 1;\n}",
  "    my $s0_chars = {};\n    my $s1_chars = {};\n    for my $c (split //, $s0) {\n\
    \        $s0_chars->{$c}++;\n    }\n    for my $c (split //, $s1) {\n        $s1_chars->{$c}++;\n\
    \    }\n    for my $c (keys %$s0_chars) {\n        return \"\" if $s0_chars->{$c}\
    \ != $s1_chars->{$c};\n    }\n    return 1;\n}", "    my $s0_count = count_chars($s0);\n\
    \    my $s1_count = count_chars($s1);\n    return \"\" if $s0_count ne $s1_count;\n\
    \    return 1;\n}", "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n\
    \    my %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n    }\n\
    \    for my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys %h0) {\n\
    \        return \"\" if !defined $h1{$c} || $h0{$c} != $h1{$c};\n    }\n    for\
    \ my $c (keys %h1) {\n        return \"\" if !defined $h0{$c} || $h1{$c} != $h0{$c};\n\
    \    }\n    return 1;\n}", "    my @a0 = sort split //, $s0;\n    my @a1 = sort\
    \ split //, $s1;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @a0 && $j <\
    \ @a1) {\n        if ($a0[$i] eq $a1[$j]) {\n            $i++;\n            $j++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $i == @a0 ?\
    \ 1 : \"\";\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n \
    \   my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my @s0_only\
    \ = grep { ! $s1{$_} } @s0;\n    my @s1_only = grep { ! $s0{$_} } @s1;\n    return\
    \ @s0_only || @s1_only ? \"\" : 1;\n}", "    my @a0 = split(//, $s0);\n    my\
    \ @a1 = split(//, $s1);\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n   \
    \     $h0{$c}++;\n    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n  \
    \  for my $c (keys %h0) {\n        if (!defined($h1{$c}) || $h0{$c} != $h1{$c})\
    \ {\n            return \"\";\n        }\n    }\n    for my $c (keys %h1) {\n\
    \        if (!defined($h0{$c}) || $h0{$c} != $h1{$c}) {\n            return \"\
    \";\n        }\n    }\n    return 1;\n}", "    my @a0 = sort split //, $s0;\n\
    \    my @a1 = sort split //, $s1;\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < @a0 && $j < @a1) {\n        if ($a0[$i] lt $a1[$j]) {\n            $i++;\n\
    \        } elsif ($a0[$i] gt $a1[$j]) {\n            $j++;\n        } else {\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return $i == @a0\
    \ && $j == @a1;\n}", "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n\
    \    for my $c (keys %c0) {\n        return \"\" if $c0{$c} != $c1{$c};\n    }\n\
    \    return 1;\n}", "    my(%c0, %c1);\n    for (split //, $s0) { $c0{$_}++; }\n\
    \    for (split //, $s1) { $c1{$_}++; }\n    for (keys %c0) {\n        return\
    \ \"\" if !exists $c1{$_} || $c0{$_} != $c1{$_};\n    }\n    return 1;\n}", " \
    \   my @a0 = split(//, $s0);\n    my @a1 = split(//, $s1);\n    my %h0;\n    my\
    \ %h1;\n    foreach my $c (@a0) {\n        $h0{$c}++;\n    }\n    foreach my $c\
    \ (@a1) {\n        $h1{$c}++;\n    }\n    foreach my $c (keys %h0) {\n       \
    \ if (!defined($h1{$c}) || $h0{$c} != $h1{$c}) {\n            return \"\";\n \
    \       }\n    }\n    foreach my $c (keys %h1) {\n        if (!defined($h0{$c})\
    \ || $h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n\
    \    my %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c\
    \ (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        if ($s0{$c}\
    \ != $s1{$c}) {\n            return \"\";\n        }\n    }\n    return 1;\n}",
  "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
    \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n   \
    \     $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        if (!exists $s1{$c})\
    \ {\n            return \"\";\n        }\n        if ($s0{$c} != $s1{$c}) {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my %c;\n\
    \    $c{$_}++ for split //, $s0;\n    $c{$_}-- for split //, $s1;\n    return\
    \ \"\" if grep { $_ != 0 } values %c;\n    return 1;\n}", "    my %count;\n  \
    \  for my $c (split //, $s0) {\n        $count{$c}++;\n    }\n    for my $c (split\
    \ //, $s1) {\n        $count{$c}--;\n    }\n    for my $c (keys %count) {\n  \
    \      return \"\" if $count{$c};\n    }\n    return 1;\n}", "    my %c0 = map\
    \ {$_ => 1} split //, $s0;\n    my %c1 = map {$_ => 1} split //, $s1;\n    my\
    \ $result = 1;\n    for my $c (keys %c0) {\n        if (!exists $c1{$c}) {\n \
    \           $result = \"\";\n            last;\n        }\n    }\n    return $result;\n\
    }", "    my @s0 = split(//, $s0);\n    my @s1 = split(//, $s1);\n    my %s0 =\
    \ ();\n    my %s1 = ();\n    for my $c (@s0) {\n        $s0{$c}++;\n    }\n  \
    \  for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n\
    \        if ($s0{$c} != $s1{$c}) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my @a0 = split(//, $s0);\n    my @a1 = split(//, $s1);\n\
    \    my %h0;\n    my %h1;\n    foreach my $c (@a0) {\n        $h0{$c}++;\n   \
    \ }\n    foreach my $c (@a1) {\n        $h1{$c}++;\n    }\n    foreach my $c (keys\
    \ %h0) {\n        if (!defined($h1{$c}) || $h0{$c} != $h1{$c}) {\n           \
    \ return \"\";\n        }\n    }\n    foreach my $c (keys %h1) {\n        if (!defined($h0{$c})\
    \ || $h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my @a0 = split(//, $s0);\n    my @a1 = split(//, $s1);\n    my\
    \ %h0;\n    my %h1;\n    foreach my $c (@a0) {\n        $h0{$c}++;\n    }\n  \
    \  foreach my $c (@a1) {\n        $h1{$c}++;\n    }\n    foreach my $c (keys %h0)\
    \ {\n        if (!defined($h1{$c}) || $h0{$c} != $h1{$c}) {\n            return\
    \ \"\";\n        }\n    }\n    foreach my $c (keys %h1) {\n        if (!defined($h0{$c})\
    \ || $h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my @a0 = split(//, $s0);\n    my @a1 = split(//, $s1);\n    my\
    \ %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n    }\n    for\
    \ my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys %h0) {\n     \
    \   if (!defined($h1{$c}) || $h0{$c} != $h1{$c}) {\n            return \"\";\n\
    \        }\n    }\n    for my $c (keys %h1) {\n        if (!defined($h0{$c}) ||\
    \ $h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0\
    \ = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my @s0_only =\
    \ grep { !$s1{$_} } @s0;\n    my @s1_only = grep { !$s0{$_} } @s1;\n    return\
    \ @s0_only == 0 && @s1_only == 0 ? 1 : \"\";\n}", "    my @s0 = split(//, $s0);\n\
    \    my @s1 = split(//, $s1);\n    my %s0 = ();\n    my %s1 = ();\n    for my\
    \ $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n\
    \    }\n    for my $c (keys %s0) {\n        if (!defined($s1{$c}) || $s1{$c} !=\
    \ $s0{$c}) {\n            return \"\";\n        }\n    }\n    for my $c (keys\
    \ %s1) {\n        if (!defined($s0{$c}) || $s0{$c} != $s1{$c}) {\n           \
    \ return \"\";\n        }\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n\
    \    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n    for (@s0) {\n    \
    \    $s0{$_}++;\n    }\n    for (@s1) {\n        $s1{$_}++;\n    }\n    for (keys\
    \ %s0) {\n        if ($s0{$_} != $s1{$_}) {\n            return \"\";\n      \
    \  }\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split\
    \ //, $s1;\n    my %s0;\n    my %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n\
    \    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys\
    \ %s0) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n    for my $c (keys\
    \ %s1) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n    return 1;\n}",
  "    my $s0_chars = {};\n    my $s1_chars = {};\n    for my $c (split //, $s0) {\n\
    \        $s0_chars->{$c}++;\n    }\n    for my $c (split //, $s1) {\n        $s1_chars->{$c}++;\n\
    \    }\n    for my $c (keys %$s0_chars) {\n        return \"\" if !exists $s1_chars->{$c}\
    \ || $s1_chars->{$c} < $s0_chars->{$c};\n    }\n    return 1;\n}", "    my %h0\
    \ = ();\n    my %h1 = ();\n    for my $c (split //, $s0) {\n        $h0{$c}++;\n\
    \    }\n    for my $c (split //, $s1) {\n        $h1{$c}++;\n    }\n    for my\
    \ $c (keys %h0) {\n        return \"\" if !defined $h1{$c} || $h0{$c} != $h1{$c};\n\
    \    }\n    for my $c (keys %h1) {\n        return \"\" if !defined $h0{$c} ||\
    \ $h1{$c} != $h0{$c};\n    }\n    return 1;\n}", "    my @a0 = split(//, $s0);\n\
    \    my @a1 = split(//, $s1);\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n\
    \        $h0{$c}++;\n    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n\
    \    for my $c (keys %h0) {\n        if (!exists $h1{$c}) {\n            return\
    \ \"\";\n        }\n        if ($h0{$c} != $h1{$c}) {\n            return \"\"\
    ;\n        }\n    }\n    for my $c (keys %h1) {\n        if (!exists $h0{$c})\
    \ {\n            return \"\";\n        }\n        if ($h1{$c} != $h0{$c}) {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my @a0 =\
    \ split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0;\n    my %h1;\n    for\
    \ my $c (@a0) {\n        $h0{$c}++;\n    }\n    for my $c (@a1) {\n        $h1{$c}++;\n\
    \    }\n    for my $c (keys %h0) {\n        if (!exists $h1{$c}) {\n         \
    \   return \"\";\n        }\n        if ($h0{$c} != $h1{$c}) {\n            return\
    \ \"\";\n        }\n    }\n    for my $c (keys %h1) {\n        if (!exists $h0{$c})\
    \ {\n            return \"\";\n        }\n        if ($h1{$c} != $h0{$c}) {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my @s0 =\
    \ split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n\
    \    my %s1 = map { $_ => 1 } @s1;\n    my $s0_ok = 1;\n    my $s1_ok = 1;\n \
    \   for my $c (@s0) {\n        if (!exists $s1{$c}) {\n            $s0_ok = 0;\n\
    \            last;\n        }\n    }\n    for my $c (@s1) {\n        if (!exists\
    \ $s0{$c}) {\n            $s1_ok = 0;\n            last;\n        }\n    }\n \
    \   return $s0_ok && $s1_ok;\n}", "    my %c0 = map { $_ => 1 } split(//, $s0);\n\
    \    my %c1 = map { $_ => 1 } split(//, $s1);\n    my @c0 = sort keys %c0;\n \
    \   my @c1 = sort keys %c1;\n    return \"\" if @c0 != @c1;\n    for my $i (0..$#c0)\
    \ {\n        return \"\" if $c0[$i] ne $c1[$i];\n    }\n    return 1;\n}", " \
    \   my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    my $i\
    \ = 0;\n    my $j = 0;\n    while ($i < @a0 && $j < @a1) {\n        if ($a0[$i]\
    \ eq $a1[$j]) {\n            $i++;\n            $j++;\n        } elsif ($a0[$i]\
    \ lt $a1[$j]) {\n            return \"\";\n        } else {\n            $j++;\n\
    \        }\n    }\n    return $i == @a0 ? 1 : \"\";\n}", "    my @a0 = sort split\
    \ //, $s0;\n    my @a1 = sort split //, $s1;\n    my $i = 0;\n    my $j = 0;\n\
    \    while ($i < @a0 && $j < @a1) {\n        if ($a0[$i] eq $a1[$j]) {\n     \
    \       $i++;\n            $j++;\n        } else {\n            $j++;\n      \
    \  }\n    }\n    return $i == @a0 ? 1 : \"\";\n}", "    my @a0 = sort split //,\
    \ $s0;\n    my @a1 = sort split //, $s1;\n    my $i = 0;\n    my $j = 0;\n   \
    \ while ($i < @a0 && $j < @a1) {\n        if ($a0[$i] eq $a1[$j]) {\n        \
    \    $i++;\n            $j++;\n        } else {\n            $j++;\n        }\n\
    \    }\n    return $i == @a0 ? 1 : \"\";\n}", "    my @s0 = split //, $s0;\n \
    \   my @s1 = split //, $s1;\n    my @s0_sorted = sort @s0;\n    my @s1_sorted\
    \ = sort @s1;\n    my $s0_sorted = join '', @s0_sorted;\n    my $s1_sorted = join\
    \ '', @s1_sorted;\n    return $s0_sorted eq $s1_sorted;\n}", "    my @s0 = sort\
    \ split //, $s0;\n    my @s1 = sort split //, $s1;\n    my $i = 0;\n    my $j\
    \ = 0;\n    while ($i < @s0 && $j < @s1) {\n        if ($s0[$i] eq $s1[$j]) {\n\
    \            $i++;\n            $j++;\n        } elsif ($s0[$i] lt $s1[$j]) {\n\
    \            return '';\n        } else {\n            $j++;\n        }\n    }\n\
    \    return $i == @s0 ? 1 : '';\n}", "    my @s0 = split(//, $s0);\n    my @s1\
    \ = split(//, $s1);\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_\
    \ => 1 } @s1;\n    my @s0_only = grep { !$s1{$_} } @s0;\n    my @s1_only = grep\
    \ { !$s0{$_} } @s1;\n    return @s0_only || @s1_only ? \"\" : 1;\n}", "    my\
    \ %c;\n    for my $c (split //, $s0) {\n        $c{$c}++;\n    }\n    for my $c\
    \ (split //, $s1) {\n        $c{$c}--;\n    }\n    for my $c (keys %c) {\n   \
    \     return \"\" if $c{$c};\n    }\n    return 1;\n}", "    my $s0_count = count_chars($s0);\n\
    \    my $s1_count = count_chars($s1);\n    my $s0_len = length($s0);\n    my $s1_len\
    \ = length($s1);\n    my $s0_count_len = scalar(keys %$s0_count);\n    my $s1_count_len\
    \ = scalar(keys %$s1_count);\n    return \"\" if $s0_len != $s1_len;\n    return\
    \ \"\" if $s0_count_len != $s1_count_len;\n    for my $k (keys %$s0_count) {\n\
    \        return \"\" if $s0_count->{$k} != $s1_count->{$k};\n    }\n    return\
    \ 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0\
    \ = map {$_ => 1} @s0;\n    my %s1 = map {$_ => 1} @s1;\n    for my $c (@s0) {\n\
    \        return \"\" if !$s1{$c};\n    }\n    for my $c (@s1) {\n        return\
    \ \"\" if !$s0{$c};\n    }\n    return 1;\n}", "    my(%h0, %h1);\n    for (split(//,\
    \ $s0)) { $h0{$_}++; }\n    for (split(//, $s1)) { $h1{$_}++; }\n    for (keys\
    \ %h0) {\n        return \"\" if !exists $h1{$_} || $h0{$_} != $h1{$_};\n    }\n\
    \    for (keys %h1) {\n        return \"\" if !exists $h0{$_} || $h1{$_} != $h0{$_};\n\
    \    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //,\
    \ $s1;\n    my %s0;\n    my %s1;\n    for (@s0) {\n        $s0{$_}++;\n    }\n\
    \    for (@s1) {\n        $s1{$_}++;\n    }\n    for (keys %s0) {\n        if\
    \ (!exists $s1{$_} || $s0{$_} != $s1{$_}) {\n            return \"\";\n      \
    \  }\n    }\n    return 1;\n}", "    my @s0 = split(//, $s0);\n    my @s1 = split(//,\
    \ $s1);\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n\
    \    my @s0_only = grep { !$s1{$_} } @s0;\n    my @s1_only = grep { !$s0{$_} }\
    \ @s1;\n    return @s0_only == 0 && @s1_only == 0;\n}", "    my @s0 = split //,\
    \ $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n    for (@s0) {\
    \ $s0{$_}++; }\n    for (@s1) { $s1{$_}++; }\n    for (keys %s0) {\n        return\
    \ \"\" if !exists $s1{$_} || $s0{$_} != $s1{$_};\n    }\n    for (keys %s1) {\n\
    \        return \"\" if !exists $s0{$_} || $s0{$_} != $s1{$_};\n    }\n    return\
    \ 1;\n}", "    my @a0 = split(//, $s0);\n    my @a1 = split(//, $s1);\n    my\
    \ %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n    }\n    for\
    \ my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys %h0) {\n     \
    \   if (!exists $h1{$c}) {\n            return \"\";\n        }\n        if ($h0{$c}\
    \ != $h1{$c}) {\n            return \"\";\n        }\n    }\n    for my $c (keys\
    \ %h1) {\n        if (!exists $h0{$c}) {\n            return \"\";\n        }\n\
    \        if ($h1{$c} != $h0{$c}) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n\
    \    my %s0 = ();\n    my %s1 = ();\n    for my $c (@s0) {\n        $s0{$c}++;\n\
    \    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys\
    \ %s0) {\n        if ($s0{$c} != $s1{$c}) {\n            return \"\";\n      \
    \  }\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split\
    \ //, $s1;\n    my %s0;\n    my %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n\
    \    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys\
    \ %s0) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n    for my $c (keys\
    \ %s1) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n    return 1;\n}",
  "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0;\n    my %h1;\n\
    \    for (@a0) {\n        $h0{$_}++;\n    }\n    for (@a1) {\n        $h1{$_}++;\n\
    \    }\n    for (keys %h0) {\n        return \"\" if !exists $h1{$_} || $h0{$_}\
    \ != $h1{$_};\n    }\n    for (keys %h1) {\n        return \"\" if !exists $h0{$_}\
    \ || $h1{$_} != $h0{$_};\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n\
    \    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 =\
    \ map { $_ => 1 } @s1;\n    my @s0_only = grep { ! exists $s1{$_} } @s0;\n   \
    \ my @s1_only = grep { ! exists $s0{$_} } @s1;\n    return @s0_only || @s1_only\
    \ ? \"\" : 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n\
    \    my %s0;\n    my %s1;\n    for (@s0) {\n        $s0{$_}++;\n    }\n    for\
    \ (@s1) {\n        $s1{$_}++;\n    }\n    for (keys %s0) {\n        if ($s0{$_}\
    \ != $s1{$_}) {\n            return \"\";\n        }\n    }\n    return 1;\n}",
  "    my $s0_count = count_chars($s0);\n    my $s1_count = count_chars($s1);\n  \
    \  my $result = 1;\n    foreach my $char (keys %$s0_count) {\n        if (!exists\
    \ $s1_count->{$char} || $s1_count->{$char} != $s0_count->{$char}) {\n        \
    \    $result = \"\";\n            last;\n        }\n    }\n    return $result;\n\
    }", "    my $len = length($s0);\n    my $len1 = length($s1);\n    if ($len !=\
    \ $len1) {\n        return \"\";\n    }\n    my @s0 = split(//, $s0);\n    my\
    \ @s1 = split(//, $s1);\n    my %s0;\n    my %s1;\n    for (my $i = 0; $i < $len;\
    \ $i++) {\n        $s0{$s0[$i]}++;\n        $s1{$s1[$i]}++;\n    }\n    my @s0_keys\
    \ = keys %s0;\n    my @s1_keys = keys %s1;\n    my $len_s0 = scalar @s0_keys;\n\
    \    my $len_s1 = scalar @s1_keys;\n    if ($len_s0 != $len_s1) {\n        return\
    \ \"\";\n    }\n    for (my $i = 0; $i < $len_s0; $i++) {\n        if ($s0{$s0_keys[$i]}\
    \ != $s1{$s0_keys[$i]}) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 = map { $_\
    \ => 1 } split //, $s1;\n    my %h = (%h0, %h1);\n    my $s = join \"\", sort\
    \ keys %h;\n    my $r = \"\";\n    for my $c (split //, $s) {\n        $r .= $c\
    \ if $h0{$c} && $h1{$c};\n    }\n    return $r;\n}", "    my(%c0, %c1);\n    my($c);\n\
    \    foreach $c (split(//, $s0)) {\n        $c0{$c}++;\n    }\n    foreach $c\
    \ (split(//, $s1)) {\n        $c1{$c}++;\n    }\n    foreach $c (keys %c0) {\n\
    \        if ($c1{$c} != $c0{$c}) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my $s0_counts = count_chars($s0);\n    my $s1_counts\
    \ = count_chars($s1);\n    return \"\" if (scalar keys %$s0_counts != scalar keys\
    \ %$s1_counts);\n    for my $k (keys %$s0_counts) {\n        return \"\" if ($s0_counts->{$k}\
    \ != $s1_counts->{$k});\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n\
    \    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 =\
    \ map { $_ => 1 } @s1;\n    my @s0_only = grep { !$s1{$_} } @s0;\n    my @s1_only\
    \ = grep { !$s0{$_} } @s1;\n    return (@s0_only == 0 && @s1_only == 0) ? 1 :\
    \ \"\";\n}", "    my @a0 = split(//, $s0);\n    my @a1 = split(//, $s1);\n   \
    \ my %h0;\n    my %h1;\n    foreach my $c (@a0) {\n        $h0{$c}++;\n    }\n\
    \    foreach my $c (@a1) {\n        $h1{$c}++;\n    }\n    foreach my $c (keys\
    \ %h0) {\n        if (!exists $h1{$c}) {\n            return \"\";\n        }\n\
    \        if ($h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my %c0;\n    my %c1;\n    for my $c (split //, $s0) {\n\
    \        $c0{$c}++;\n    }\n    for my $c (split //, $s1) {\n        $c1{$c}++;\n\
    \    }\n    for my $c (keys %c0) {\n        return \"\" if $c0{$c} != $c1{$c};\n\
    \    }\n    for my $c (keys %c1) {\n        return \"\" if $c0{$c} != $c1{$c};\n\
    \    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //,\
    \ $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n\
    \    my @s0_only = grep { !exists $s1{$_} } @s0;\n    my @s1_only = grep { !exists\
    \ $s0{$_} } @s1;\n    return @s0_only || @s1_only ? \"\" : 1;\n}", "    my @s0\
    \ = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 }\
    \ @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my @s0_unique = grep { !$s1{$_}\
    \ } @s0;\n    my @s1_unique = grep { !$s0{$_} } @s1;\n    return @s0_unique ||\
    \ @s1_unique ? \"\" : 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split\
    \ //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n\
    \    my %s = (%s0, %s1);\n    my @s = sort keys %s;\n    my $s = join '', @s;\n\
    \    my $s0 = join '', @s0;\n    my $s1 = join '', @s1;\n    if ($s0 =~ /^$s$/\
    \ && $s1 =~ /^$s$/) {\n        return 1;\n    }\n    return '';\n}", "    my(%c0,\
    \ %c1);\n    for (split //, $s0) { $c0{$_}++; }\n    for (split //, $s1) { $c1{$_}++;\
    \ }\n    for (keys %c0) {\n        return \"\" if !exists $c1{$_} || $c0{$_} !=\
    \ $c1{$_};\n    }\n    for (keys %c1) {\n        return \"\" if !exists $c0{$_}\
    \ || $c0{$_} != $c1{$_};\n    }\n    return 1;\n}", "    my @a0 = split(//, $s0);\n\
    \    my @a1 = split(//, $s1);\n    my %h0;\n    my %h1;\n    foreach my $c (@a0)\
    \ {\n        $h0{$c}++;\n    }\n    foreach my $c (@a1) {\n        $h1{$c}++;\n\
    \    }\n    foreach my $c (keys %h0) {\n        if (!defined($h1{$c}) || $h0{$c}\
    \ != $h1{$c}) {\n            return \"\";\n        }\n    }\n    foreach my $c\
    \ (keys %h1) {\n        if (!defined($h0{$c}) || $h0{$c} != $h1{$c}) {\n     \
    \       return \"\";\n        }\n    }\n    return 1;\n}", "    my %c0 = map {\
    \ $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split //, $s1;\n    my\
    \ $ok = 1;\n    for my $c (keys %c0) {\n        $ok = 0 if !exists $c1{$c};\n\
    \    }\n    for my $c (keys %c1) {\n        $ok = 0 if !exists $c0{$c};\n    }\n\
    \    return $ok ? 1 : \"\";\n}", "    my @s0 = split //, $s0;\n    my @s1 = split\
    \ //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n\
    \    my @s0_only = grep { !$s1{$_} } @s0;\n    my @s1_only = grep { !$s0{$_} }\
    \ @s1;\n    return @s0_only || @s1_only ? \"\" : 1;\n}", "    my @s0 = split(//,\
    \ $s0);\n    my @s1 = split(//, $s1);\n    my %s0 = ();\n    my %s1 = ();\n  \
    \  for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
    \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        if ($s0{$c} != $s1{$c})\
    \ {\n            return \"\";\n        }\n    }\n    return 1;\n}", "    my %c0\
    \ = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return \"\" if keys(%c0)\
    \ != keys(%c1);\n    for my $c (keys %c0) {\n        return \"\" if $c0{$c} !=\
    \ $c1{$c};\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1\
    \ = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ =>\
    \ 1 } @s1;\n    my @s0_only = grep { !$s1{$_} } @s0;\n    my @s1_only = grep {\
    \ !$s0{$_} } @s1;\n    return @s0_only || @s1_only ? \"\" : 1;\n}", "    my @s0\
    \ = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map {$_ => 1} @s0;\n\
    \    my %s1 = map {$_ => 1} @s1;\n    my $s = \"\";\n    for my $c (keys %s0)\
    \ {\n        if ($s0{$c} == $s1{$c}) {\n            $s .= $c;\n        }\n   \
    \ }\n    return $s;\n}", "    my @a0 = split //, $s0;\n    my @a1 = split //,\
    \ $s1;\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n\
    \    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys\
    \ %h0) {\n        if ($h0{$c} != $h1{$c}) {\n            return \"\";\n      \
    \  }\n    }\n    return 1;\n}", "    my @a0 = split //, $s0;\n    my @a1 = split\
    \ //, $s1;\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n\
    \    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys\
    \ %h0) {\n        if (!exists $h1{$c}) {\n            return \"\";\n        }\n\
    \        if ($h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n\
    \    for my $c (keys %h1) {\n        if (!exists $h0{$c}) {\n            return\
    \ \"\";\n        }\n        if ($h1{$c} != $h0{$c}) {\n            return \"\"\
    ;\n        }\n    }\n    return 1;\n}", "    my %h0 = map { $_ => 1 } split //,\
    \ $s0;\n    my %h1 = map { $_ => 1 } split //, $s1;\n    for my $k (keys %h0)\
    \ {\n        return \"\" if !exists $h1{$k};\n    }\n    for my $k (keys %h1)\
    \ {\n        return \"\" if !exists $h0{$k};\n    }\n    return 1;\n}", "    my\
    \ @chars0 = split //, $s0;\n    my @chars1 = split //, $s1;\n    my %count0;\n\
    \    my %count1;\n    for my $c (@chars0) {\n        $count0{$c}++;\n    }\n \
    \   for my $c (@chars1) {\n        $count1{$c}++;\n    }\n    for my $c (keys\
    \ %count0) {\n        if ($count0{$c} != $count1{$c}) {\n            return \"\
    \";\n        }\n    }\n    return 1;\n}", "    my %c0 = map { $_ => 1 } split\
    \ //, $s0;\n    my %c1 = map { $_ => 1 } split //, $s1;\n    for my $c (keys %c0)\
    \ {\n        return \"\" if !exists $c1{$c};\n    }\n    for my $c (keys %c1)\
    \ {\n        return \"\" if !exists $c0{$c};\n    }\n    return 1;\n}", "    my\
    \ @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my $i = 0;\n    my $j\
    \ = 0;\n    while ($i < @s0 && $j < @s1) {\n        if ($s0[$i] eq $s1[$j]) {\n\
    \            $i++;\n            $j++;\n        } else {\n            $j++;\n \
    \       }\n    }\n    return $i == @s0 ? 1 : \"\";\n}", "    my @s0 = split //,\
    \ $s0;\n    my @s1 = split //, $s1;\n    my %s0 = ();\n    my %s1 = ();\n    for\
    \ my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n\
    \    }\n    for my $c (keys %s0) {\n        if (!defined $s1{$c} || $s0{$c} !=\
    \ $s1{$c}) {\n            return \"\";\n        }\n    }\n    for my $c (keys\
    \ %s1) {\n        if (!defined $s0{$c} || $s0{$c} != $s1{$c}) {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n \
    \   my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map\
    \ { $_ => 1 } @s1;\n    my $result = 1;\n    for my $c (keys %s0) {\n        if\
    \ (!exists $s1{$c}) {\n            $result = \"\";\n            last;\n      \
    \  }\n    }\n    for my $c (keys %s1) {\n        if (!exists $s0{$c}) {\n    \
    \        $result = \"\";\n            last;\n        }\n    }\n    return $result;\n\
    }", "    my @s0 = split(//, $s0);\n    my @s1 = split(//, $s1);\n    my %s0 =\
    \ ();\n    my %s1 = ();\n    foreach my $c (@s0) {\n        $s0{$c}++;\n    }\n\
    \    foreach my $c (@s1) {\n        $s1{$c}++;\n    }\n    foreach my $c (keys\
    \ %s0) {\n        if ($s0{$c} != $s1{$c}) {\n            return \"\";\n      \
    \  }\n    }\n    return 1;\n}", "    my @a0 = sort split(//, $s0);\n    my @a1\
    \ = sort split(//, $s1);\n    while (@a0 && @a1 && $a0[0] eq $a1[0]) {\n     \
    \   shift @a0;\n        shift @a1;\n    }\n    return @a0 == 0 && @a1 == 0 ? 1\
    \ : \"\";\n}", "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n   \
    \ my %h0;\n    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n    }\n   \
    \ for my $c (@a1) {\n        $h1{$c}++;\n    }\n    for my $c (keys %h0) {\n \
    \       if (!defined $h1{$c} || $h0{$c} != $h1{$c}) {\n            return \"\"\
    ;\n        }\n    }\n    for my $c (keys %h1) {\n        if (!defined $h0{$c}\
    \ || $h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n\
    \    my %s1;\n    for (@s0) {\n        $s0{$_}++;\n    }\n    for (@s1) {\n  \
    \      $s1{$_}++;\n    }\n    for (keys %s0) {\n        return \"\" if $s0{$_}\
    \ != $s1{$_};\n    }\n    return 1;\n}", "    my @a0 = split //, $s0;\n    my\
    \ @a1 = split //, $s1;\n    my %h0;\n    my %h1;\n    for (@a0) {\n        $h0{$_}++;\n\
    \    }\n    for (@a1) {\n        $h1{$_}++;\n    }\n    for (keys %h0) {\n   \
    \     if ($h0{$_} != $h1{$_}) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n\
    \    my %s0;\n    my %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n    }\n\
    \    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n\
    \        return \"\" if $s0{$c} != $s1{$c};\n    }\n    for my $c (keys %s1) {\n\
    \        return \"\" if $s0{$c} != $s1{$c};\n    }\n    return 1;\n}", "    my\
    \ %h0 = map { $_ => 1 } split(//, $s0);\n    my %h1 = map { $_ => 1 } split(//,\
    \ $s1);\n    my $r = 1;\n    for (keys %h0) {\n        $r = \"\" if !exists $h1{$_};\n\
    \    }\n    for (keys %h1) {\n        $r = \"\" if !exists $h0{$_};\n    }\n \
    \   return $r;\n}", "    my %c0 = map {$_ => 1} split //, $s0;\n    my %c1 = map\
    \ {$_ => 1} split //, $s1;\n    for my $c (keys %c0) {\n        return \"\" if\
    \ !$c1{$c};\n    }\n    for my $c (keys %c1) {\n        return \"\" if !$c0{$c};\n\
    \    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //,\
    \ $s1;\n    my %s0;\n    my %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n\
    \    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys\
    \ %s0) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n    for my $c (keys\
    \ %s1) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n    return 1;\n}",
  "    my %c0;\n    my %c1;\n    my $i;\n    for ($i = 0; $i < length($s0); $i++)\
    \ {\n        $c0{substr($s0, $i, 1)}++;\n    }\n    for ($i = 0; $i < length($s1);\
    \ $i++) {\n        $c1{substr($s1, $i, 1)}++;\n    }\n    for $i (keys %c0) {\n\
    \        if ($c0{$i} != $c1{$i}) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 =\
    \ map { $_ => 1 } split //, $s1;\n    for my $c (keys %c0) {\n        return \"\
    \" if !$c1{$c};\n    }\n    for my $c (keys %c1) {\n        return \"\" if !$c0{$c};\n\
    \    }\n    return 1;\n}", "    my %h0 = map { $_ => 1 } split //, $s0;\n    my\
    \ %h1 = map { $_ => 1 } split //, $s1;\n    my $r = 1;\n    for my $c (keys %h0)\
    \ {\n        if (!exists $h1{$c}) {\n            $r = \"\";\n            last;\n\
    \        }\n    }\n    return $r;\n}", "    my @s0 = split //, $s0;\n    my @s1\
    \ = split //, $s1;\n    my %s0;\n    my %s1;\n    for (@s0) {\n        $s0{$_}++;\n\
    \    }\n    for (@s1) {\n        $s1{$_}++;\n    }\n    for (keys %s0) {\n   \
    \     return \"\" if $s0{$_} != $s1{$_};\n    }\n    return 1;\n}", "    my %c;\n\
    \    for my $c (split //, $s0) {\n        $c{$c}++;\n    }\n    for my $c (split\
    \ //, $s1) {\n        $c{$c}--;\n    }\n    for my $c (keys %c) {\n        return\
    \ \"\" if $c{$c};\n    }\n    return 1;\n}", "    my %c;\n    for my $c (split\
    \ //, $s0) {\n        $c{$c}++;\n    }\n    for my $c (split //, $s1) {\n    \
    \    $c{$c}--;\n    }\n    for my $c (keys %c) {\n        return \"\" if $c{$c};\n\
    \    }\n    return 1;\n}", "    my @a0 = split //, $s0;\n    my @a1 = split //,\
    \ $s1;\n    my %c0 = ();\n    my %c1 = ();\n    for (@a0) { $c0{$_}++; }\n   \
    \ for (@a1) { $c1{$_}++; }\n    for (keys %c0) {\n        return \"\" if !exists\
    \ $c1{$_} || $c0{$_} != $c1{$_};\n    }\n    for (keys %c1) {\n        return\
    \ \"\" if !exists $c0{$_} || $c0{$_} != $c1{$_};\n    }\n    return 1;\n}", " \
    \   my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my\
    \ %s1;\n    for (@s0) {\n        $s0{$_}++;\n    }\n    for (@s1) {\n        $s1{$_}++;\n\
    \    }\n    for (keys %s0) {\n        return \"\" if $s0{$_} != $s1{$_};\n   \
    \ }\n    return 1;\n}", "    my %c0 = ();\n    my %c1 = ();\n    my $i;\n    for\
    \ ($i = 0; $i < length($s0); $i++) {\n        $c0{substr($s0, $i, 1)}++;\n   \
    \ }\n    for ($i = 0; $i < length($s1); $i++) {\n        $c1{substr($s1, $i, 1)}++;\n\
    \    }\n    foreach $k (keys %c0) {\n        if (!defined($c1{$k}) || $c1{$k}\
    \ != $c0{$k}) {\n            return \"\";\n        }\n    }\n    foreach $k (keys\
    \ %c1) {\n        if (!defined($c0{$k}) || $c0{$k} != $c1{$k}) {\n           \
    \ return \"\";\n        }\n    }\n    return 1;\n}", "    my %c0;\n    my %c1;\n\
    \    for my $c (split //, $s0) {\n        $c0{$c}++;\n    }\n    for my $c (split\
    \ //, $s1) {\n        $c1{$c}++;\n    }\n    for my $c (keys %c0) {\n        return\
    \ \"\" if !exists $c1{$c} || $c0{$c} != $c1{$c};\n    }\n    for my $c (keys %c1)\
    \ {\n        return \"\" if !exists $c0{$c} || $c1{$c} != $c0{$c};\n    }\n  \
    \  return 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n\
    \    my %s0;\n    my %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n    }\n\
    \    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n\
    \        return \"\" if $s0{$c} != $s1{$c};\n    }\n    for my $c (keys %s1) {\n\
    \        return \"\" if $s0{$c} != $s1{$c};\n    }\n    return 1;\n}", "    my\
    \ @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
    \    for (@s0) {\n        $s0{$_}++;\n    }\n    for (@s1) {\n        $s1{$_}++;\n\
    \    }\n    for (keys %s0) {\n        return \"\" if !exists $s1{$_} || $s0{$_}\
    \ != $s1{$_};\n    }\n    for (keys %s1) {\n        return \"\" if !exists $s0{$_}\
    \ || $s0{$_} != $s1{$_};\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n\
    \    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 =\
    \ map { $_ => 1 } @s1;\n    my @s0_only = grep { !$s1{$_} } @s0;\n    my @s1_only\
    \ = grep { !$s0{$_} } @s1;\n    return @s0_only || @s1_only ? \"\" : 1;\n}", " \
    \   my $s0_copy = $s0;\n    my $s1_copy = $s1;\n    my $s0_len = length($s0);\n\
    \    my $s1_len = length($s1);\n    my $s0_chars = {};\n    my $s1_chars = {};\n\
    \    my $s0_char;\n    my $s1_char;\n    my $i;\n    my $j;\n    my $s0_char_count;\n\
    \    my $s1_char_count;\n    my $s0_char_count_copy;\n    my $s1_char_count_copy;\n\
    \    my $s0_char_count_copy_copy;\n    my $s1_char_count_copy_copy;\n    my $s0_char_count_copy_copy_copy;\n\
    \    my $s1_char_count_copy_copy_copy;\n    my $s0_char_count_copy_copy_copy_copy;\n\
    \    my $s1_char_count_copy_copy_copy_copy;\n    my $s0_char_count_copy_copy_copy_copy_copy;\n\
    \    my $s1_char_count_copy_copy_copy_copy_copy;\n    my $s0_char_count_copy_copy_copy_copy_copy_copy;\n\
    \    my $s1_char_count_copy_copy_copy_copy_copy_copy;\n    my $s0_char_count_copy_copy_copy_copy_copy_copy_copy;\n\
    \    my $s1_char_count_copy_copy_copy_copy_copy_copy_copy;\n    my $s0_char_count_copy_copy_copy_copy_copy_copy_copy_copy;\n\
    \    my $s1_char_count_copy_copy_copy_copy_copy_copy_copy_copy;\n    my $s0_char_count_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n\
    \    my $s1_char_count_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n    my $",
  "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split\
    \ //, $s1;\n    my $r = 1;\n    for my $k (keys %h0) {\n        $r = \"\" if !exists\
    \ $h1{$k};\n    }\n    for my $k (keys %h1) {\n        $r = \"\" if !exists $h0{$k};\n\
    \    }\n    return $r;\n}", "    my(%h0, %h1);\n    my($c);\n    foreach $c (split(//,\
    \ $s0)) {\n        $h0{$c}++;\n    }\n    foreach $c (split(//, $s1)) {\n    \
    \    $h1{$c}++;\n    }\n    foreach $c (keys %h0) {\n        if (!defined($h1{$c})\
    \ || $h1{$c} < $h0{$c}) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my %c0 = map {$_ => 1} split //, $s0;\n    my %c1 = map {$_ =>\
    \ 1} split //, $s1;\n    for my $c (keys %c0) {\n        return \"\" if !$c1{$c};\n\
    \    }\n    for my $c (keys %c1) {\n        return \"\" if !$c0{$c};\n    }\n\
    \    return 1;\n}", "    my(%h0, %h1);\n    for (split //, $s0) {\n        $h0{$_}++;\n\
    \    }\n    for (split //, $s1) {\n        $h1{$_}++;\n    }\n    for (keys %h0)\
    \ {\n        return \"\" if !exists $h1{$_} || $h0{$_} != $h1{$_};\n    }\n  \
    \  for (keys %h1) {\n        return \"\" if !exists $h0{$_} || $h1{$_} != $h0{$_};\n\
    \    }\n    return 1;\n}", "    my @s0 = split(//, $s0);\n    my @s1 = split(//,\
    \ $s1);\n    my %s0;\n    my %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n\
    \    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys\
    \ %s0) {\n        if (!defined($s1{$c}) || $s0{$c} != $s1{$c}) {\n           \
    \ return \"\";\n        }\n    }\n    for my $c (keys %s1) {\n        if (!defined($s0{$c})\
    \ || $s0{$c} != $s1{$c}) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0\
    \ = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my @s0_only =\
    \ grep { !$s1{$_} } @s0;\n    my @s1_only = grep { !$s0{$_} } @s1;\n    return\
    \ $s0 if !@s0_only && !@s1_only;\n    return '';\n}", "    my @a0 = split //,\
    \ $s0;\n    my @a1 = split //, $s1;\n    my %h0;\n    my %h1;\n    for my $c (@a0)\
    \ {\n        $h0{$c}++;\n    }\n    for my $c (@a1) {\n        $h1{$c}++;\n  \
    \  }\n    for my $c (keys %h0) {\n        if (!exists $h1{$c}) {\n           \
    \ return \"\";\n        }\n        if ($h0{$c} != $h1{$c}) {\n            return\
    \ \"\";\n        }\n    }\n    for my $c (keys %h1) {\n        if (!exists $h0{$c})\
    \ {\n            return \"\";\n        }\n        if ($h1{$c} != $h0{$c}) {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my @s0 =\
    \ split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n    for\
    \ my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n\
    \    }\n    for my $c (keys %s0) {\n        return \"\" if $s0{$c} != $s1{$c};\n\
    \    }\n    for my $c (keys %s1) {\n        return \"\" if $s0{$c} != $s1{$c};\n\
    \    }\n    return 1;\n}", "    my %h0 = map { $_ => 1 } split //, $s0;\n    my\
    \ %h1 = map { $_ => 1 } split //, $s1;\n    for my $c (keys %h0) {\n        return\
    \ \"\" if !exists $h1{$c};\n    }\n    for my $c (keys %h1) {\n        return\
    \ \"\" if !exists $h0{$c};\n    }\n    return 1;\n}", "    my(%c0, %c1);\n   \
    \ for (split //, $s0) { $c0{$_}++; }\n    for (split //, $s1) { $c1{$_}++; }\n\
    \    for (keys %c0) {\n        return \"\" if !defined $c1{$_} || $c0{$_} != $c1{$_};\n\
    \    }\n    for (keys %c1) {\n        return \"\" if !defined $c0{$_} || $c0{$_}\
    \ != $c1{$_};\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my\
    \ @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map {\
    \ $_ => 1 } @s1;\n    for my $c (keys %s0) {\n        return \"\" if !exists $s1{$c};\n\
    \    }\n    for my $c (keys %s1) {\n        return \"\" if !exists $s0{$c};\n\
    \    }\n    return 1;\n}", "    my %c0 = map { $_ => 1 } split //, $s0;\n    my\
    \ %c1 = map { $_ => 1 } split //, $s1;\n    for my $c (keys %c0) {\n        return\
    \ \"\" if !exists $c1{$c};\n    }\n    for my $c (keys %c1) {\n        return\
    \ \"\" if !exists $c0{$c};\n    }\n    return 1;\n}", "    my @s0 = split //,\
    \ $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my\
    \ %s1 = map { $_ => 1 } @s1;\n    my @s0_only = grep { !$s1{$_} } @s0;\n    my\
    \ @s1_only = grep { !$s0{$_} } @s1;\n    return @s0_only || @s1_only ? \"\" :\
    \ 1;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0\
    \ = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my %s = (%s0,\
    \ %s1);\n    my @s = sort keys %s;\n    my %c0 = map { $_ => 0 } @s;\n    my %c1\
    \ = map { $_ => 0 } @s;\n    for my $c (@s0) {\n        $c0{$c}++;\n    }\n  \
    \  for my $c (@s1) {\n        $c1{$c}++;\n    }\n    for my $c (@s) {\n      \
    \  return \"\" if $c0{$c} != $c1{$c};\n    }\n    return 1;\n}", "    my $len\
    \ = length($s0);\n    my $len1 = length($s1);\n    return \"\" if $len != $len1;\n\
    \    my @chars = split //, $s0;\n    my @chars1 = split //, $s1;\n    my %hash\
    \ = ();\n    for my $i (0..$#chars) {\n        $hash{$chars[$i]}++;\n    }\n \
    \   for my $i (0..$#chars1) {\n        $hash{$chars1[$i]}--;\n    }\n    for my\
    \ $i (0..$#chars) {\n        return \"\" if $hash{$chars[$i]} != 0;\n    }\n \
    \   return 1;\n}", "    return \"\" if length($s0) != length($s1);\n    my %h0\
    \ = map { $_ => 1 } split(//, $s0);\n    my %h1 = map { $_ => 1 } split(//, $s1);\n\
    \    for my $k (keys %h0) {\n        return \"\" if !exists $h1{$k};\n    }\n\
    \    return 1;\n}", "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 =\
    \ map { $_ => 1 } split //, $s1;\n    my $s = \"\";\n    foreach my $c (keys %h0)\
    \ {\n        if (exists $h1{$c}) {\n            $s .= $c;\n        }\n    }\n\
    \    return $s;\n}", "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n\
    \    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my\
    \ @s0_only = grep { !$s1{$_} } @s0;\n    my @s1_only = grep { !$s0{$_} } @s1;\n\
    \    return @s0_only || @s1_only ? \"\" : 1;\n}", "    my @s0 = split //, $s0;\n\
    \    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 =\
    \ map { $_ => 1 } @s1;\n    my @s0_only = grep { !$s1{$_} } @s0;\n    my @s1_only\
    \ = grep { !$s0{$_} } @s1;\n    return @s0_only || @s1_only ? \"\" : 1;\n}", " \
    \   my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map {$_\
    \ => 1} @s0;\n    my %s1 = map {$_ => 1} @s1;\n    my $diff = 0;\n    foreach\
    \ my $c (keys %s0) {\n        if (!exists $s1{$c}) {\n            $diff = 1;\n\
    \            last;\n        }\n    }\n    foreach my $c (keys %s1) {\n       \
    \ if (!exists $s0{$c}) {\n            $diff = 1;\n            last;\n        }\n\
    \    }\n    return $diff ? \"\" : 1;\n}", "    my @a0 = sort split //, $s0;\n\
    \    my @a1 = sort split //, $s1;\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < @a0 && $j < @a1) {\n        if ($a0[$i] eq $a1[$j]) {\n            $i++;\n\
    \            $j++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $i == @a0 ? 1 : \"\";\n}", "    my @a0 = split(//, $s0);\n    my @a1\
    \ = split(//, $s1);\n    my %h0;\n    my %h1;\n    for my $c (@a0) {\n       \
    \ $h0{$c}++;\n    }\n    for my $c (@a1) {\n        $h1{$c}++;\n    }\n    for\
    \ my $c (keys %h0) {\n        if ($h0{$c} != $h1{$c}) {\n            return \"\
    \";\n        }\n    }\n    return 1;\n}", "    my @s0 = split(//, $s0);\n    my\
    \ @s1 = split(//, $s1);\n    my %s0;\n    my %s1;\n    for my $c (@s0) {\n   \
    \     $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n  \
    \  for my $c (keys %s0) {\n        if ($s0{$c} != $s1{$c}) {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n \
    \   my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map\
    \ { $_ => 1 } @s1;\n    my @intersection = grep { $s0{$_} } @s1;\n    return join\
    \ '', @intersection;\n}", "    my @s0 = split(//, $s0);\n    my @s1 = split(//,\
    \ $s1);\n    my %s0;\n    my %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n\
    \    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n    for my $c (keys\
    \ %s0) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n    for my $c (keys\
    \ %s1) {\n        return \"\" if $s0{$c} != $s1{$c};\n    }\n    return 1;\n}",
  "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0;\n    my %h1;\n\
    \    for my $c (@a0) {\n        $h0{$c}++;\n    }\n    for my $c (@a1) {\n   \
    \     $h1{$c}++;\n    }\n    for my $c (keys %h0) {\n        if (!defined $h1{$c}\
    \ || $h0{$c} != $h1{$c}) {\n            return \"\";\n        }\n    }\n    for\
    \ my $c (keys %h1) {\n        if (!defined $h0{$c} || $h0{$c} != $h1{$c}) {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my @s0 =\
    \ split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n    for\
    \ my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n\
    \    }\n    for my $c (keys %s0) {\n        return \"\" if !defined $s1{$c} ||\
    \ $s0{$c} != $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return \"\"\
    \ if !defined $s0{$c} || $s0{$c} != $s1{$c};\n    }\n    return 1;\n}", "    my(%c0,\
    \ %c1);\n    foreach my $c (split //, $s0) {\n        $c0{$c}++;\n    }\n    foreach\
    \ my $c (split //, $s1) {\n        $c1{$c}++;\n    }\n    foreach my $c (keys\
    \ %c0) {\n        return \"\" if $c0{$c} != $c1{$c};\n    }\n    return 1;\n}",
  "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
    \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n   \
    \     $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return \"\" if $s0{$c}\
    \ != $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return \"\" if $s0{$c}\
    \ != $s1{$c};\n    }\n    return 1;\n}", "    my @s0 = split //, $s0;\n    my\
    \ @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n    for my $c (@s0) {\n    \
    \    $s0{$c}++;\n    }\n    for my $c (@s1) {\n        $s1{$c}++;\n    }\n   \
    \ for my $c (keys %s0) {\n        return \"\" if !exists $s1{$c} || $s0{$c} !=\
    \ $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return \"\" if !exists\
    \ $s0{$c} || $s0{$c} != $s1{$c};\n    }\n    return 1;\n}", "    my %h0 = map\
    \ { $_ => 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split //, $s1;\n  \
    \  my %h = (%h0, %h1);\n    my @k = keys %h;\n    my $res = 1;\n    for my $k\
    \ (@k) {\n        if ($h0{$k} != $h1{$k}) {\n            $res = \"\";\n      \
    \      last;\n        }\n    }\n    return $res;\n}", "    my @s0 = split //,\
    \ $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my\
    \ %s1 = map { $_ => 1 } @s1;\n    for my $c (keys %s0) {\n        return \"\"\
    \ if !exists $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return \"\"\
    \ if !exists $s0{$c};\n    }\n    return 1;\n}", "    my %count;\n    for my $c\
    \ (split //, $s0) {\n        $count{$c}++;\n    }\n    for my $c (split //, $s1)\
    \ {\n        $count{$c}--;\n    }\n    for my $c (keys %count) {\n        return\
    \ \"\" if $count{$c};\n    }\n    return 1;\n}", "    my(%h0, %h1);\n    for my\
    \ $c (split //, $s0) {\n        $h0{$c}++;\n    }\n    for my $c (split //, $s1)\
    \ {\n        $h1{$c}++;\n    }\n    for my $c (keys %h0) {\n        return \"\"\
    \ if $h0{$c} != $h1{$c};\n    }\n    for my $c (keys %h1) {\n        return \"\
    \" if $h0{$c} != $h1{$c};\n    }\n    return 1;\n}", "    my %h0 = map { $_ =>\
    \ 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split //, $s1;\n    for my\
    \ $k (keys %h0) {\n        return \"\" if !exists $h1{$k};\n    }\n    for my\
    \ $k (keys %h1) {\n        return \"\" if !exists $h0{$k};\n    }\n    return\
    \ 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
