name: HumanEval_85_add
language: pl
prompt: "# Given a non-empty array of integers lst. add the even elements that are\
  \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n    my($lst)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n  \
  \      if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2)\
    \ {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n  \
    \      $sum += $lst->[$i] if ($lst->[$i] % 2 == 0);\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for my $i (0..$#$lst) {\n        if ($i % 2 == 1) {\n\
    \            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "  \
    \  my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for my $i (1..$#$lst) {\n        $sum += $lst->[$i] if $i % 2\
    \ == 1 and $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        if ($lst->[$i] %\
    \ 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n  \
    \      if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
