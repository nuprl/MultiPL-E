name: HumanEval_115_max_fill
language: pl
prompt: "# You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n# and each 1 in a row represents a single unit of water.\n# Each well has\
  \ a corresponding bucket that can be used to extract water from it, \n# and all\
  \ buckets have the same capacity.\n# Your task is to use the buckets to empty the\
  \ wells.\n# Output the number of times you need to lower the buckets.\n# Example\
  \ 1:\n# >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example\
  \ 2:\n# >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n\
  # 5\n# Example 3:\n# >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n\
  # * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length\
  \ <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\nsub max_fill {\n  \
  \  my($grid, $capacity) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_fill;\n\
  \        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0,\
  \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0,\
  \ 0, 0], [0, 0, 0]], 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1,\
  \ 1, 1, 1], [1, 1, 1, 1]], 9),2)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    my $max = 0;\n    for my $row (@$grid) {\n\
    \        my $sum = 0;\n        for my $col (@$row) {\n            $sum += $col;\n\
    \        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n\
    \    }\n    $count = $max / $capacity;\n    if ($max % $capacity) {\n        $count++;\n\
    \    }\n    return $count;\n}", "    my $total = 0;\n    my $row_max = 0;\n  \
    \  for my $row (@$grid) {\n        my $row_total = 0;\n        for my $well (@$row)\
    \ {\n            $row_total += $well;\n        }\n        $row_max = $row_total\
    \ if $row_total > $row_max;\n        $total += $row_total;\n    }\n    my $row_count\
    \ = scalar @$grid;\n    my $col_count = scalar @{$grid->[0]};\n    my $row_fill\
    \ = int($capacity / $col_count);\n    my $row_fill_count = int($row_count / $row_fill);\n\
    \    my $row_fill_remainder = $row_count % $row_fill;\n    my $row_fill_remainder_count\
    \ = int($row_fill_remainder / $row_max);\n    my $row_fill_remainder_remainder\
    \ = $row_fill_remainder % $row_max;\n    my $row_fill_remainder_remainder_count\
    \ = int($row_fill_remainder_remainder / $capacity);\n    return $row_fill_count\
    \ + $row_fill_remainder_count + $row_fill_remainder_remainder_count;\n}", "  \
    \  my $count = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n       \
    \ for my $well (@$row) {\n            $fill += $well;\n            if ($fill ==\
    \ $capacity) {\n                $count++;\n                $fill = 0;\n      \
    \      }\n        }\n        $count += int($fill / $capacity);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $row_count = scalar @$grid;\n    my\
    \ $col_count = scalar @{$grid->[0]};\n    my $row_index = 0;\n    my $col_index\
    \ = 0;\n    my $row_sum = 0;\n    my $col_sum = 0;\n    my $row_max = 0;\n   \
    \ my $col_max = 0;\n    my $row_max_index = 0;\n    my $col_max_index = 0;\n \
    \   my $row_max_sum = 0;\n    my $col_max_sum = 0;\n    my $row_max_count = 0;\n\
    \    my $col_max_count = 0;\n    my $row_max_count_index = 0;\n    my $col_max_count_index\
    \ = 0;\n    my $row_max_count_sum = 0;\n    my $col_max_count_sum = 0;\n    my\
    \ $row_max_count_max = 0;\n    my $col_max_count_max = 0;\n    my $row_max_count_max_index\
    \ = 0;\n    my $col_max_count_max_index = 0;\n    my $row_max_count_max_sum =\
    \ 0;\n    my $col_max_count_max_sum = 0;\n    my $row_max_count_max_count = 0;\n\
    \    my $col_max_count_max_count = 0;\n    my $row_max_count_max_count_index =\
    \ 0;\n    my $col_max_count_max_count_index = 0;\n    my $row_max_count_max_count_sum\
    \ = 0;\n    my $col_max_count_max_count_sum = 0;\n    my $row_max_count_max_count_max\
    \ = 0;\n    my $col_max_count_max_count_max = 0;\n    my $row_max_count_max_count_max_index\
    \ = 0;\n    my $col_max_count_max_count_max_index = 0;\n    my $row_max_count_max",
  "    my $count = 0;\n    my $max_height = 0;\n    for my $row (@$grid) {\n     \
    \   my $row_height = 0;\n        for my $well (@$row) {\n            $row_height\
    \ += $well;\n        }\n        $max_height = $row_height if $row_height > $max_height;\n\
    \    }\n    while ($max_height > 0) {\n        my $row_height = 0;\n        for\
    \ my $row (@$grid) {\n            $row_height = 0;\n            for my $well (@$row)\
    \ {\n                if ($well > 0) {\n                    $well--;\n        \
    \            $row_height++;\n                }\n            }\n            $count\
    \ += $row_height;\n        }\n        $max_height--;\n    }\n    return $count;\n\
    }", "    my $rows = scalar @$grid;\n    my $cols = scalar @{$grid->[0]};\n   \
    \ my $count = 0;\n    my $bucket = $capacity;\n    for my $row (0..$rows-1) {\n\
    \        for my $col (0..$cols-1) {\n            if ($grid->[$row][$col] == 1)\
    \ {\n                if ($bucket == 0) {\n                    $bucket = $capacity;\n\
    \                    $count++;\n                }\n                $bucket--;\n\
    \            }\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    my $max_height = 0;\n    my $max_height_index = 0;\n    my $max_height_row\
    \ = 0;\n    for my $row (0 .. $#{$grid}) {\n        for my $col (0 .. $#{$grid->[$row]})\
    \ {\n            if ($grid->[$row][$col] == 1) {\n                $max_height++;\n\
    \                $max_height_index = $col;\n                $max_height_row =\
    \ $row;\n            }\n        }\n    }\n    for my $row (0 .. $#{$grid}) {\n\
    \        for my $col (0 .. $#{$grid->[$row]}) {\n            if ($grid->[$row][$col]\
    \ == 1) {\n                if ($row == $max_height_row && $col == $max_height_index)\
    \ {\n                    $count += $max_height;\n                } else {\n  \
    \                  $count += $max_height - $row;\n                }\n        \
    \    }\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n    my\
    \ $max_height = 0;\n    for my $row (@$grid) {\n        my $height = 0;\n    \
    \    for my $col (@$row) {\n            $height += $col;\n        }\n        $max_height\
    \ = $height if $height > $max_height;\n    }\n    for my $row (@$grid) {\n   \
    \     my $height = 0;\n        for my $col (@$row) {\n            $height += $col;\n\
    \        }\n        $count += $max_height - $height;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $row_count = @$grid;\n    my $col_count = @{$grid->[0]};\n\
    \    my $row_index = 0;\n    my $col_index = 0;\n    my $row_index_max = $row_count\
    \ - 1;\n    my $col_index_max = $col_count - 1;\n    my $row_index_min = 0;\n\
    \    my $col_index_min = 0;\n    my $row_index_next = 0;\n    my $col_index_next\
    \ = 0;\n    my $row_index_prev = 0;\n    my $col_index_prev = 0;\n    my $row_index_new\
    \ = 0;\n    my $col_index_new = 0;\n    my $row_index_new_max = 0;\n    my $col_index_new_max\
    \ = 0;\n    my $row_index_new_min = 0;\n    my $col_index_new_min = 0;\n    my\
    \ $row_index_new_next = 0;\n    my $col_index_new_next = 0;\n    my $row_index_new_prev\
    \ = 0;\n    my $col_index_new_prev = 0;\n    my $row_index_new_new = 0;\n    my\
    \ $col_index_new_new = 0;\n    my $row_index_new_new_max = 0;\n    my $col_index_new_new_max\
    \ = 0;\n    my $row_index_new_new_min = 0;\n    my $col_index_new_new_min = 0;\n\
    \    my $row_index_new_new_next = 0;\n    my $col_index_new_new_next = 0;\n  \
    \  my $row_index_new_new_prev = 0;\n    my $col_index_new_new_prev = 0;\n    my\
    \ $row_index_new_new_new = 0;\n    my $col_index_new_new_new = 0;\n    my $row_index_new_new_new_max\
    \ = 0;\n    my $col_index", "    my $count = 0;\n    my $max_height = 0;\n   \
    \ for my $row (@$grid) {\n        my $height = 0;\n        for my $col (@$row)\
    \ {\n            $height += $col;\n        }\n        $max_height = $height if\
    \ $height > $max_height;\n    }\n    for my $row (@$grid) {\n        my $height\
    \ = 0;\n        for my $col (@$row) {\n            $height += $col;\n        }\n\
    \        $count += $max_height - $height;\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    for my $row (@$grid) {\n        my $sum = 0;\n        for\
    \ my $cell (@$row) {\n            $sum += $cell;\n        }\n        $count +=\
    \ $sum / $capacity;\n        $count += $sum % $capacity;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $max_height = 0;\n    for my $row (@$grid) {\n\
    \        my $height = 0;\n        for my $well (@$row) {\n            $height++\
    \ if $well;\n        }\n        $max_height = $height if $height > $max_height;\n\
    \    }\n    for my $height (1 .. $max_height) {\n        for my $row (@$grid)\
    \ {\n            my $row_height = 0;\n            for my $well (@$row) {\n   \
    \             $row_height++ if $well;\n                if ($row_height == $height)\
    \ {\n                    $count++;\n                    last;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $row = 0;\n    my $col = 0;\n    my $max_row = scalar @$grid;\n\
    \    my $max_col = scalar @{$grid->[0]};\n    while ($row < $max_row) {\n    \
    \    $col = 0;\n        while ($col < $max_col) {\n            if ($grid->[$row][$col]\
    \ == 1) {\n                $grid->[$row][$col] = 0;\n                $count++;\n\
    \                $row = 0;\n                $col = 0;\n            }\n       \
    \     $col++;\n        }\n        $row++;\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    my $row_count = scalar @$grid;\n    my $col_count = scalar\
    \ @{$grid->[0]};\n    my $row_index = 0;\n    my $col_index = 0;\n    my $row_max\
    \ = 0;\n    my $col_max = 0;\n    my $row_sum = 0;\n    my $col_sum = 0;\n   \
    \ my $row_max_index = 0;\n    my $col_max_index = 0;\n    my $row_max_sum = 0;\n\
    \    my $col_max_sum = 0;\n    my $row_max_count = 0;\n    my $col_max_count =\
    \ 0;\n    my $row_max_index_count = 0;\n    my $col_max_index_count = 0;\n   \
    \ my $row_max_sum_count = 0;\n    my $col_max_sum_count = 0;\n    my $row_max_sum_index\
    \ = 0;\n    my $col_max_sum_index = 0;\n    my $row_max_sum_index_count = 0;\n\
    \    my $col_max_sum_index_count = 0;\n    my $row_max_sum_index_count_max = 0;\n\
    \    my $col_max_sum_index_count_max = 0;\n    my $row_max_sum_index_count_max_index\
    \ = 0;\n    my $col_max_sum_index_count_max_index = 0;\n    my $row_max_sum_index_count_max_index_count\
    \ = 0;\n    my $col_max_sum_index_count_max_index_count = 0;\n    my $row_max_sum_index_count_max_index_count_max\
    \ = 0;\n    my $col_max_sum_index_count_max_index_count_max = 0;\n    my $row_max_sum_index_count_max_index_count_max_index\
    \ = 0;\n    my $col_max_sum_index_count_max_index_count_max_index = 0;\n    my",
  "    my $rows = scalar @$grid;\n    my $cols = scalar @{$grid->[0]};\n    my $total\
    \ = 0;\n    for my $row (0..$rows-1) {\n        for my $col (0..$cols-1) {\n \
    \           if ($grid->[$row][$col]) {\n                $total += $capacity;\n\
    \            }\n        }\n    }\n    return $total;\n}", "    my $count = 0;\n\
    \    my $row_count = scalar @$grid;\n    my $col_count = scalar @{$grid->[0]};\n\
    \    my $row_index = 0;\n    my $col_index = 0;\n    my $row_sum = 0;\n    my\
    \ $col_sum = 0;\n    while ($row_index < $row_count) {\n        $row_sum += $grid->[$row_index][$col_index];\n\
    \        $col_sum += $grid->[$row_index][$col_index];\n        if ($row_sum ==\
    \ $capacity) {\n            $row_sum = 0;\n            $row_index++;\n       \
    \ }\n        if ($col_sum == $capacity) {\n            $col_sum = 0;\n       \
    \     $col_index++;\n        }\n        $count++;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $max_height = 0;\n    for my $row (@$grid) {\n\
    \        my $height = 0;\n        for my $col (@$row) {\n            $height +=\
    \ $col;\n        }\n        $max_height = $height if $height > $max_height;\n\
    \    }\n    while ($max_height > 0) {\n        $count += $capacity;\n        $max_height\
    \ -= $capacity;\n    }\n    return $count;\n}", "    my $count = 0;\n    my $max_height\
    \ = 0;\n    for my $row (@$grid) {\n        my $height = 0;\n        for my $cell\
    \ (@$row) {\n            $height++ if $cell;\n        }\n        $max_height =\
    \ $height if $height > $max_height;\n    }\n    for my $height (1 .. $max_height)\
    \ {\n        for my $row (@$grid) {\n            my $fill = 0;\n            for\
    \ my $cell (@$row) {\n                $fill++ if $cell;\n                if ($fill\
    \ == $height) {\n                    $count++;\n                    $fill = 0;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for my $row (@$grid) {\n        my $sum = 0;\n       \
    \ for my $col (@$row) {\n            $sum += $col;\n        }\n        $count\
    \ += int($sum / $capacity);\n        $count += $sum % $capacity;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $row_count = scalar @$grid;\n    my\
    \ $col_count = scalar @{$grid->[0]};\n    my $water_count = 0;\n    for my $row\
    \ (0..$row_count-1) {\n        for my $col (0..$col_count-1) {\n            if\
    \ ($grid->[$row][$col] == 1) {\n                $water_count++;\n            }\n\
    \        }\n    }\n    $count += $water_count / $capacity;\n    $count += $water_count\
    \ % $capacity;\n    return $count;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
