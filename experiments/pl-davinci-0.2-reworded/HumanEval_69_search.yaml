name: HumanEval_69_search
language: pl
prompt: "# You are given a non-empty array of positive integers. Return the greatest\
  \ integer that is greater than \n# zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n# The frequency of an integer is the number\
  \ of times it appears in the array.\n# If no such a value exist, return -1.\n# Examples:\n\
  # >>> search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n\
  # 3\n# >>> search([5, 5, 4, 4, 4])\n# -1\nsub search {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n\
  \        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4,\
  \ 1, 4, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([3, 3]),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8,\
  \ 8, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8,\
  \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8,\
  \ 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6,\
  \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 9, 10, 1, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6,\
  \ 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5,\
  \ 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1,\
  \ 10, 3, 6, 1, 8]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1,\
  \ 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %freq;\n    for my $i (@$lst) {\n        $freq{$i}++;\n    }\n\
    \    my $max = -1;\n    for my $i (keys %freq) {\n        if ($i <= $freq{$i}\
    \ && $i > $max) {\n            $max = $i;\n        }\n    }\n    return $max;\n\
    }", "    my $max = -1;\n    my %count;\n    for my $i (@$lst) {\n        $count{$i}++;\n\
    \    }\n    for my $i (@$lst) {\n        if ($count{$i} >= $i && $i > $max) {\n\
    \            $max = $i;\n        }\n    }\n    return $max;\n}", "    my $max\
    \ = -1;\n    my %count;\n    for my $i (@$lst) {\n        $count{$i}++;\n    }\n\
    \    for my $i (@$lst) {\n        if ($count{$i} >= $i) {\n            $max =\
    \ $i if $i > $max;\n        }\n    }\n    return $max;\n}", "    my $max = -1;\n\
    \    my %count;\n    for my $x (@$lst) {\n        $count{$x}++;\n    }\n    for\
    \ my $x (@$lst) {\n        if ($count{$x} >= $x && $x > $max) {\n            $max\
    \ = $x;\n        }\n    }\n    return $max;\n}", "    my $max = -1;\n    my %count;\n\
    \    for my $x (@$lst) {\n        $count{$x}++;\n    }\n    for my $x (@$lst)\
    \ {\n        if ($count{$x} >= $x && $x > $max) {\n            $max = $x;\n  \
    \      }\n    }\n    return $max;\n}", "    my %count;\n    for my $i (@$lst)\
    \ {\n        $count{$i}++;\n    }\n    for my $i (sort {$b <=> $a} keys %count)\
    \ {\n        if ($count{$i} >= $i) {\n            return $i;\n        }\n    }\n\
    \    return -1;\n}", "    my $max = 0;\n    my %freq;\n    for my $n (@$lst) {\n\
    \        $freq{$n}++;\n        $max = $n if $n > $max;\n    }\n    for my $n (1..$max)\
    \ {\n        return $n if $freq{$n} >= $n;\n    }\n    return -1;\n}", "    my\
    \ $max = -1;\n    my %count;\n    foreach my $i (@$lst) {\n        $count{$i}++;\n\
    \    }\n    foreach my $i (@$lst) {\n        if ($count{$i} >= $i) {\n       \
    \     $max = $i if $i > $max;\n        }\n    }\n    return $max;\n}", "    my\
    \ $max = -1;\n    my %count;\n    for my $n (@$lst) {\n        $count{$n}++;\n\
    \    }\n    for my $n (@$lst) {\n        if ($count{$n} >= $n && $n > $max) {\n\
    \            $max = $n;\n        }\n    }\n    return $max;\n}", "    my %count;\n\
    \    for my $i (@$lst) {\n        $count{$i}++;\n    }\n    my $max = -1;\n  \
    \  for my $i (sort {$a <=> $b} keys %count) {\n        if ($count{$i} >= $i) {\n\
    \            $max = $i;\n        }\n    }\n    return $max;\n}", "    my %count;\n\
    \    foreach my $i (@$lst) {\n        $count{$i}++;\n    }\n    my @sorted = sort\
    \ {$b <=> $a} keys %count;\n    foreach my $i (@sorted) {\n        if ($count{$i}\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}", "  \
    \  my %count;\n    for my $i (@$lst) {\n        $count{$i}++;\n    }\n    my $max\
    \ = -1;\n    for my $i (sort {$b <=> $a} keys %count) {\n        if ($count{$i}\
    \ >= $i) {\n            $max = $i;\n            last;\n        }\n    }\n    return\
    \ $max;\n}", "    my %count;\n    foreach my $i (@$lst) {\n        $count{$i}++;\n\
    \    }\n    my $max = -1;\n    foreach my $i (keys %count) {\n        if ($count{$i}\
    \ >= $i && $i > $max) {\n            $max = $i;\n        }\n    }\n    return\
    \ $max;\n}", "    my %count;\n    foreach my $i (@$lst) {\n        $count{$i}++;\n\
    \    }\n    my @keys = sort {$b <=> $a} keys %count;\n    foreach my $k (@keys)\
    \ {\n        if ($k <= $count{$k}) {\n            return $k;\n        }\n    }\n\
    \    return -1;\n}", "    my %count;\n    foreach my $i (@$lst) {\n        $count{$i}++;\n\
    \    }\n    my @keys = sort {$b <=> $a} keys %count;\n    foreach my $k (@keys)\
    \ {\n        if ($k <= $count{$k}) {\n            return $k;\n        }\n    }\n\
    \    return -1;\n}", "    my %count;\n    for my $i (@$lst) {\n        $count{$i}++;\n\
    \    }\n    my $max = -1;\n    for my $i (keys %count) {\n        if ($count{$i}\
    \ >= $i) {\n            $max = $i;\n        }\n    }\n    return $max;\n}", " \
    \   my %count;\n    foreach my $i (@$lst) {\n        $count{$i}++;\n    }\n  \
    \  my $max = -1;\n    foreach my $i (keys %count) {\n        if ($count{$i} >=\
    \ $i && $i > $max) {\n            $max = $i;\n        }\n    }\n    return $max;\n\
    }", "    my %count;\n    for my $e (@$lst) {\n        $count{$e}++;\n    }\n \
    \   my $max = -1;\n    for my $e (sort {$b <=> $a} keys %count) {\n        if\
    \ ($count{$e} >= $e) {\n            $max = $e;\n            last;\n        }\n\
    \    }\n    return $max;\n}", "    my %count;\n    foreach my $i (@$lst) {\n \
    \       $count{$i}++;\n    }\n    my $max = -1;\n    foreach my $i (sort {$b <=>\
    \ $a} keys %count) {\n        if ($count{$i} >= $i) {\n            $max = $i;\n\
    \            last;\n        }\n    }\n    return $max;\n}", "    my $max = -1;\n\
    \    my %count;\n    for my $i (@$lst) {\n        $count{$i}++;\n    }\n    for\
    \ my $i (@$lst) {\n        if ($count{$i} >= $i) {\n            $max = $i;\n \
    \       }\n    }\n    return $max;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
