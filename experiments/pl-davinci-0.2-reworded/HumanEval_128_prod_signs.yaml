name: HumanEval_128_prod_signs
language: pl
prompt: "# You are given an array arr of integers and you need to return\n# sum of\
  \ magnitudes of integers multiplied by product of all signs\n# of each number in\
  \ the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n#\
  \ Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n# 0\n\
  # >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
  \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1,\
  \ 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
  \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n\
    \    for my $i (@$arr) {\n        $prod *= $i <=> 0;\n        $sum += abs($i);\n\
    \    }\n    return $sum * $prod;\n}", "    my $prod = 1;\n    my $sum = 0;\n \
    \   foreach my $num (@$arr) {\n        if ($num > 0) {\n            $prod *= 1;\n\
    \            $sum += $num;\n        } elsif ($num < 0) {\n            $prod *=\
    \ -1;\n            $sum += abs($num);\n        } else {\n            $prod *=\
    \ 0;\n        }\n    }\n    return $prod * $sum;\n}", "    return undef unless\
    \ @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n   \
    \     $prod *= $num <=> 0;\n        $sum += abs($num);\n    }\n    return $sum\
    \ * $prod;\n}", "    return undef unless @$arr;\n    my $prod = 1;\n    my $sum\
    \ = 0;\n    for my $n (@$arr) {\n        $prod *= $n <=> 0;\n        $sum += abs($n);\n\
    \    }\n    return $sum * $prod;\n}", "    my $prod = 1;\n    my $sum = 0;\n \
    \   if (scalar @$arr == 0) {\n        return undef;\n    }\n    foreach my $num\
    \ (@$arr) {\n        if ($num == 0) {\n            $prod = 0;\n            last;\n\
    \        }\n        elsif ($num > 0) {\n            $sum += $num;\n        }\n\
    \        else {\n            $sum -= $num;\n            $prod *= -1;\n       \
    \ }\n    }\n    return $sum * $prod;\n}", "    my $prod = 1;\n    my $sum = 0;\n\
    \    foreach my $num (@$arr) {\n        if ($num > 0) {\n            $prod *=\
    \ 1;\n            $sum += $num;\n        } elsif ($num < 0) {\n            $prod\
    \ *= -1;\n            $sum += -$num;\n        } else {\n            $prod *= 0;\n\
    \        }\n    }\n    return $prod * $sum;\n}", "    return undef unless @$arr;\n\
    \    my $prod = 1;\n    my $sum = 0;\n    for my $i (@$arr) {\n        if ($i\
    \ > 0) {\n            $prod *= 1;\n            $sum += $i;\n        } elsif ($i\
    \ < 0) {\n            $prod *= -1;\n            $sum += -$i;\n        } else {\n\
    \            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}", "  \
    \  return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs($num);\n \
    \   }\n    return $sum * $prod;\n}", "    my $sum = 0;\n    my $prod = 1;\n  \
    \  foreach my $num (@$arr) {\n        if ($num > 0) {\n            $sum += $num;\n\
    \            $prod *= 1;\n        } elsif ($num < 0) {\n            $sum += $num\
    \ * -1;\n            $prod *= -1;\n        } else {\n            $prod *= 0;\n\
    \        }\n    }\n    return $sum * $prod;\n}", "    return undef unless @$arr;\n\
    \    my $prod = 1;\n    my $sum = 0;\n    for my $n (@$arr) {\n        if ($n\
    \ > 0) {\n            $prod *= 1;\n            $sum += $n;\n        } elsif ($n\
    \ < 0) {\n            $prod *= -1;\n            $sum += -$n;\n        } else {\n\
    \            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}", "  \
    \  return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $n (@$arr) {\n        $prod *= $n == 0 ? 0 : $n > 0 ? 1 : -1;\n        $sum\
    \ += abs($n);\n    }\n    return $prod * $sum;\n}", "    return undef unless @$arr;\n\
    \    my $prod = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n        $prod\
    \ *= $num <=> 0;\n        $sum += abs($num);\n    }\n    return $sum * $prod;\n\
    }", "    return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n   \
    \ for my $n (@$arr) {\n        $prod *= $n <=> 0;\n        $sum += abs($n);\n\
    \    }\n    return $sum * $prod;\n}", "    return undef unless @$arr;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n        if ($num >\
    \ 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif ($num\
    \ < 0) {\n            $prod *= -1;\n            $sum += -$num;\n        } else\
    \ {\n            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}",
  "    return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $n (@$arr) {\n        $prod *= $n <=> 0;\n        $sum += abs($n);\n    }\n\
    \    return $sum * $prod;\n}", "    return undef unless @$arr;\n    my $sign =\
    \ 1;\n    my $sum = 0;\n    for my $i (@$arr) {\n        $sign *= $i <=> 0;\n\
    \        $sum += abs($i);\n    }\n    return $sum * $sign;\n}", "    return undef\
    \ unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $i (@$arr) {\n\
    \        if ($i > 0) {\n            $prod *= 1;\n            $sum += $i;\n   \
    \     } elsif ($i < 0) {\n            $prod *= -1;\n            $sum += -$i;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $sum\
    \ * $prod;\n}", "    return undef unless @$arr;\n    my $prod = 1;\n    my $sum\
    \ = 0;\n    for my $num (@$arr) {\n        $sum += abs($num);\n        $prod *=\
    \ $num <=> 0;\n    }\n    return $sum * $prod;\n}", "    return undef unless @$arr;\n\
    \    my $prod = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n        $prod\
    \ *= $num <=> 0;\n        $sum += abs($num);\n    }\n    return $sum * $prod;\n\
    }", "    return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n   \
    \ for my $elem (@$arr) {\n        $prod *= $elem <=> 0;\n        $sum += abs($elem);\n\
    \    }\n    return $sum * $prod;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
