name: HumanEval_76_is_simple_power
language: pl
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\n# >>> is_simple_power(1, 4)\n# true\n# >>> is_simple_power(2, 2)\n\
  # true\n# >>> is_simple_power(8, 2)\n# true\n# >>> is_simple_power(3, 2)\n# false\n\
  # >>> is_simple_power(3, 1)\n# false\n# >>> is_simple_power(5, 3)\n# false\nsub\
  \ is_simple_power {\n    my($x, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n\
  \        if(eq_deeply($candidate->(16, 2),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9,\
  \ 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16,\
  \ 4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24,\
  \ 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(128, 4),\"\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $x == $n ** int(log($x) / log($n));\n}", "    return $x\
    \ == $n**int(log($x)/log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n**int($x/$n);\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n**int($x/$n);\n\
    }", "    return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n**int($x/$n);\n}", "    return $x == $n**int($x**(1/$n));\n\
    }", "    return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n**int(log($x)/log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $i = 0;\n   \
    \ while ($x > 1) {\n        $x /= $n;\n        $i++;\n    }\n    return $x ==\
    \ 1;\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x\
    \ == $n**int(log($x)/log($n));\n}", "    return $x == $n**int($x/$n);\n}", " \
    \   return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n**int(log($x)/log($n));\n}", "    # your code here\n \
    \   return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n**int($x/$n);\n\
    }", "    return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    my $int = int(log($x)/log($n));\n    return $n**$int == $x;\n}", "  \
    \  return $x == $n**int(log($x)/log($n));\n}", "    # your code here\n    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    my $i = 0;\n    while ($x > 1) {\n        $x /= $n;\n        $i++;\n\
    \    }\n    return $x == 1;\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    my $int = int(log($x)/log($n));\n    return $n**$int == $x;\n}", "  \
    \  return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n**int($x/$n);\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    my $i = 0;\n    while (1) {\n        my $pow = $n ** $i;\n\
    \        return 1 if $pow == $x;\n        return 0 if $pow > $x;\n        $i++;\n\
    \    }\n}", "    return $x == $n**int(log($x)/log($n));\n}", "    return $x ==\
    \ $n ** int(log($x) / log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    my $i = 0;\n    while ( $n ** $i <= $x ) {\n        return 1 if $n **\
    \ $i == $x;\n        $i++;\n    }\n    return 0;\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    my $int = int(log($x)/log($n));\n    return $n**$int == $x;\n}", "  \
    \  return $x == $n**int($x/$n);\n}", "    return $x == $n**int($x/$n);\n}", " \
    \   return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n**int($x**(1/$n));\n\
    }", "    my $i = 1;\n    my $result = $n ** $i;\n    while ($result <= $x) {\n\
    \        if ($result == $x) {\n            return 1;\n        }\n        $i++;\n\
    \        $result = $n ** $i;\n    }\n    return 0;\n}", "    return $x == $n**int(log($x)/log($n));\n\
    }", "    # Your code goes here\n    return $x == $n**int(log($x)/log($n));\n}",
  "    return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n**int($x**(1/$n));\n\
    }", "    return $x == $n**int(log($x)/log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
