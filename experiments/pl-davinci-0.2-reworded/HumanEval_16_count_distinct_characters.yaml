name: HumanEval_16_count_distinct_characters
language: pl
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n# >>> count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters(\"\
  Jerry\")\n# 4\nsub count_distinct_characters {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdecadeCADE\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry\
  \ jERRY JeRRRY\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n}\n\ntesthumaneval();"
completions: ["    my %characters;\n    foreach my $character (split(//, $string))\
    \ {\n        $characters{lc($character)} = 1;\n    }\n    return scalar(keys %characters);\n\
    }", "    my %seen;\n    my @chars = split //, $string;\n    foreach my $char (@chars)\
    \ {\n        $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", " \
    \   my %hash;\n    my @array = split(//, $string);\n    foreach my $char (@array)\
    \ {\n        $hash{lc($char)} = 1;\n    }\n    return scalar(keys %hash);\n}",
  "    my %hash;\n    foreach my $char (split //, $string) {\n        $hash{lc $char}\
    \ = 1;\n    }\n    return scalar keys %hash;\n}", "    my %hash = ();\n    my\
    \ @array = split //, $string;\n    foreach my $char (@array) {\n        $hash{lc($char)}\
    \ = 1;\n    }\n    return scalar keys %hash;\n}", "    my @chars = split(//, $string);\n\
    \    my %seen;\n    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n\
    \    }\n    return scalar(keys %seen);\n}", "    my %count;\n    foreach my $char\
    \ (split //, $string) {\n        $count{lc $char} = 1;\n    }\n    return scalar\
    \ keys %count;\n}", "    my %hash;\n    my @array = split(//, $string);\n    foreach\
    \ my $char (@array) {\n        $hash{lc($char)} = 1;\n    }\n    return scalar(keys\
    \ %hash);\n}", "    my %seen;\n    my @chars = split(//, $string);\n    foreach\
    \ my $char (@chars) {\n        $seen{lc($char)} = 1;\n    }\n    return scalar(keys\
    \ %seen);\n}", "    my %count;\n    $count{lc $_}++ for split //, $string;\n \
    \   return scalar keys %count;\n}", "    my %hash;\n    foreach my $char (split\
    \ //, $string) {\n        $hash{lc $char} = 1;\n    }\n    return scalar keys\
    \ %hash;\n}", "    my %hash;\n    foreach my $char (split //, $string) {\n   \
    \     $hash{lc $char} = 1;\n    }\n    return scalar keys %hash;\n}", "    my\
    \ @chars = split(//, $string);\n    my %hash;\n    foreach my $char (@chars) {\n\
    \        $hash{lc($char)} = 1;\n    }\n    return scalar(keys %hash);\n}", " \
    \   my %seen;\n    my @chars = split(//, $string);\n    foreach my $char (@chars)\
    \ {\n        $seen{lc($char)} = 1;\n    }\n    return scalar(keys %seen);\n}",
  "    my %hash;\n    foreach my $char (split //, $string) {\n        $hash{lc $char}\
    \ = 1;\n    }\n    return scalar keys %hash;\n}", "    my %hash;\n    my @array\
    \ = split(//, $string);\n    foreach my $char (@array) {\n        $hash{lc($char)}\
    \ = 1;\n    }\n    return scalar(keys %hash);\n}", "    my @chars = split(//,\
    \ $string);\n    my %char_hash;\n    foreach my $char (@chars) {\n        $char_hash{lc($char)}\
    \ = 1;\n    }\n    return scalar(keys %char_hash);\n}", "    my %hash;\n    foreach\
    \ my $char (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n    return\
    \ scalar keys %hash;\n}", "    my @chars = split(//, $string);\n    my %count;\n\
    \    foreach my $char (@chars) {\n        $count{lc($char)}++;\n    }\n    return\
    \ scalar(keys %count);\n}", "    my %characters;\n    foreach my $character (split\
    \ //, $string) {\n        $characters{lc $character} = 1;\n    }\n    return scalar\
    \ keys %characters;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
