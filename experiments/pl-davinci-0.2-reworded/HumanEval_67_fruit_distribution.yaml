name: HumanEval_67_fruit_distribution
language: pl
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n\
  # >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution(\"\
  2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution(\"100 apples and\
  \ 1 oranges\", 120)\n# 19\nsub fruit_distribution {\n    my($s, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n\
  \        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  5 apples and 6 oranges\", 21),10)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1 apples and 0 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  2 apples and 3 oranges\", 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return\
    \ $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    return $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\\
    d+) oranges/;\n    $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and\
    \ (\\d+) oranges/;\n    return $n - $a - $o;\n}", "    my $a = $s =~ s/apples//g;\n\
    \    my $o = $s =~ s/oranges//g;\n    return $n - $a - $o;\n}", "    my($a, $o)\
    \ = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my($a,\
    \ $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "  \
    \  my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n\
    }", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return $n\
    \ - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    return $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\\
    d+) oranges/;\n    $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and\
    \ (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    return $n - $a - $o;\n}", "    my($a, $o) = $s =~\
    \ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my($a, $o)\
    \ = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my($a,\
    \ $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return $n - $a - $o;\n}",
  "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
