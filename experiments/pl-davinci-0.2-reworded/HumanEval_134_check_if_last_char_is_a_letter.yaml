name: HumanEval_134_check_if_last_char_is_a_letter
language: pl
prompt: "# Create a function that returns 1 if the last character\n# of a given string\
  \ is an alphabetical character and is not\n# a part of a word, and  otherwise.\n\
  # Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>>\
  \ check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\
  apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\
  \n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter\
  \ {\n    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n\
  \        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/\
    \ && $last_char !~ /\\w/) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   my $result = \"\";\n    if ($txt =~ /\\w\\s$/) {\n        $result = 1;\n \
    \   }\n    return $result;\n}", "    my $ret = \"\";\n    if ($txt =~ /\\w\\s+\\\
    w$/) {\n        $ret = 1;\n    }\n    return $ret;\n}", "    my $ret = \"\";\n\
    \    if ($txt =~ /\\w$/) {\n        $ret = 1;\n    }\n    return $ret;\n}", " \
    \   my $result = \"\";\n    if (length($txt) > 0) {\n        my $last_char = substr($txt,\
    \ -1);\n        if ($last_char =~ /[a-zA-Z]/) {\n            my $last_char_index\
    \ = length($txt) - 1;\n            my $prev_char = substr($txt, $last_char_index\
    \ - 1, 1);\n            if ($prev_char =~ /\\s/) {\n                $result =\
    \ 1;\n            }\n        }\n    }\n    return $result;\n}", "    my $result\
    \ = \"\";\n    if ($txt =~ /\\w\\s$/) {\n        $result = 1;\n    }\n    return\
    \ $result;\n}", "    my $result = \"\";\n    my $last_char = substr($txt, -1);\n\
    \    if ($last_char =~ /[a-zA-Z]/ && $last_char !~ /\\w/) {\n        $result =\
    \ 1;\n    }\n    return $result;\n}", "    my $last_char = substr($txt, -1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my $result = \"\";\n    if ($txt =~ /\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\\
    s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\\
    s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\\
    s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\\
    s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\\
    s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\\
    s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\\
    s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\\
    s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\", " \
    \   my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char\
    \ !~ /\\w/) {\n        return 1;\n    }\n    return \"\";\n}", "    my $result\
    \ = \"\";\n    if ($txt =~ /\\w\\s$/) {\n        $result = 1;\n    }\n    return\
    \ $result;\n}", "    my $last_char = substr($txt, -1);\n    if ($last_char =~\
    \ /[a-zA-Z]/ && $last_char !~ /\\w/) {\n        return 1;\n    }\n    return \"\
    \";\n}", "    my $last_char = substr($txt, -1);\n    my $last_char_is_letter =\
    \ $last_char =~ /[a-zA-Z]/;\n    my $last_char_is_not_a_part_of_a_word = $txt\
    \ =~ /\\s$last_char$/;\n    return $last_char_is_letter && $last_char_is_not_a_part_of_a_word;\n\
    }", "    if ($txt =~ /\\w\\s$/) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my $last_char = substr($txt, -1);\n    if ($last_char\
    \ =~ /\\w/) {\n        return \"\";\n    } else {\n        return 1;\n    }\n}",
  "    my $last_char = substr($txt, -1);\n    if ($last_char =~ /\\w/) {\n       \
    \ return \"\";\n    }\n    else {\n        return 1;\n    }\n}", "    my $result\
    \ = \"\";\n    if ( $txt =~ /\\w$/ ) {\n        $result = 1;\n    }\n    return\
    \ $result;\n}", "    my $last_char = substr($txt, -1);\n    my $last_char_is_a_letter\
    \ = 0;\n    if ($last_char =~ /[a-zA-Z]/) {\n        $last_char_is_a_letter =\
    \ 1;\n    }\n    return $last_char_is_a_letter;\n}", "    my $ret = \"\";\n  \
    \  if(length($txt) > 0) {\n        my $last_char = substr($txt, length($txt) -\
    \ 1, 1);\n        if(($last_char =~ /[a-zA-Z]/) && ($last_char !~ /\\w/)) {\n\
    \            $ret = 1;\n        }\n    }\n    return $ret;\n}", "    my $result\
    \ = \"\";\n    if (length($txt) > 0) {\n        my $last_char = substr($txt, -1);\n\
    \        if ($last_char =~ /[a-zA-Z]/) {\n            my @words = split(/\\s+/,\
    \ $txt);\n            my $last_word = $words[-1];\n            if ($last_word\
    \ =~ /[a-zA-Z]/) {\n                $result = \"\";\n            } else {\n  \
    \              $result = 1;\n            }\n        }\n    }\n    return $result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
