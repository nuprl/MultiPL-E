language: pl
name: HumanEval_95_check_dict_case
results:
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_count\
    \ = 0;\n    my $value_case_prev_set_count = 0;\n    my $key_case_prev_unset_count\
    \ = 0;\n    my $value_case_prev_unset_count = 0;\n    my $key_case_prev_unset_count_prev\
    \ = 0;\n    my $value_case_prev_unset_count_prev = 0;\n    my $key_case_prev_unset_count_prev_set\
    \ = 0;\n    my $value_case_prev_unset_count_prev_set = 0;\n    my $key_case_prev_unset_count_prev_set_count\
    \ = 0;\n    my $value_case_prev_unset_count_prev_set_count = 0;\n    my $key_case_prev_unset_count_prev_unset_count\
    \ = 0;\n    my $value_case_prev_unset_count_prev_unset_count = 0;\n    my $key_case_prev_unset_count_prev_unset_count_prev\
    \ = 0;\n    my $value_case_prev_unset_count_prev_unset_count_prev = 0;\n    my\
    \ $key_case_prev_unset_count_prev_unset_count_prev_set = 0;\n    my $value_case_prev_unset_count_prev_unset_count_prev_set\
    \ = 0;\n    my $key_case_prev_unset_count_prev_unset_count_prev_set_count = 0;\n\
    \    my $value_case_prev_unset_count_prev_unset_count_prev_set_count = 0;\n  \
    \  my $key_case_prev_unset_count_prev_unset_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1vqif6ls.pl line 45, at end
    of line

    syntax error at /tmp/tmp1vqif6ls.pl line 45, near "$key_case_prev_unset_count_prev_unset_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1vqif6ls.pl line 80, at end of
    line

    syntax error at /tmp/tmp1vqif6ls.pl line 80, at EOF

    Execution of /tmp/tmp1vqif6ls.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_type;\n    my $val_type;\n    my $key_type_prev;\n    my $val_type_prev;\n\
    \    my $key_type_curr;\n    my $val_type_curr;\n    my $key_type_next;\n    my\
    \ $val_type_next;\n    my $key_type_prev_prev;\n    my $val_type_prev_prev;\n\
    \    my $key_type_next_next;\n    my $val_type_next_next;\n    my $key_type_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev;\n    my $key_type_next_next_next;\n    my $val_type_next_next_next;\n\
    \    my $key_type_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev;\n\
    \    my $key_type_next_next_next_next;\n    my $val_type_next_next_next_next;\n\
    \    my $key_type_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev;\n\
    \    my $key_type_next_next_next_next_next;\n    my $val_type_next_next_next_next_next;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_next_next_next_next_next_next;\n    my $val_type_next_next_next_next_next_next;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_next_next_next_next_next_next_next;\n    my $val_type_next_next_next_next_next_next_next;\n\
    \    my $key_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpgp4f62dw.pl line 53, at end
    of line

    syntax error at /tmp/tmpgp4f62dw.pl line 53, near "$key_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpgp4f62dw.pl line 88, at end of
    line

    syntax error at /tmp/tmpgp4f62dw.pl line 88, at EOF

    Execution of /tmp/tmpgp4f62dw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $case_count = 0;\n    my $case_type;\n    my $case_type_count\
    \ = 0;\n    my $case_type_prev;\n    my $case_type_prev_count = 0;\n    my $case_type_prev_count_max\
    \ = 0;\n    my $case_type_prev_count_max_type;\n    my $case_type_prev_count_max_type_count\
    \ = 0;\n    my $case_type_prev_count_max_type_count_max = 0;\n    my $case_type_prev_count_max_type_count_max_type;\n\
    \    my $case_type_prev_count_max_type_count_max_type_count = 0;\n    my $case_type_prev_count_max_type_count_max_type_count_max\
    \ = 0;\n    my $case_type_prev_count_max_type_count_max_type_count_max_type;\n\
    \    my $case_type_prev_count_max_type_count_max_type_count_max_type_count = 0;\n\
    \    my $case_type_prev_count_max_type_count_max_type_count_max_type_count_max\
    \ = 0;\n    my $case_type_prev_count_max_type_count_max_type_count_max_type_count_max_type;\n\
    \    my $case_type_prev_count_max_type_count_max_type_count_max_type_count_max_type_count\
    \ = 0;\n    my $case_type_prev_count_max_type_count_max_type_count_max_type_count_max_type_count_max\
    \ = 0;\n    my $case_type_prev_count_max_type_count_max_type_count_max_type_count_max_type_count_max_type;\n\
    \    my $case_type_prev_count_max_type_count_max_type_count_max_type_count_max_type_count_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpg2c3slrh.pl line 41, at end
    of line

    syntax error at /tmp/tmpg2c3slrh.pl line 41, near "$case_type_prev_count_max_type_count_max_type_count_max_type_count_max_type_count_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpg2c3slrh.pl line 76, at end of
    line

    syntax error at /tmp/tmpg2c3slrh.pl line 76, at EOF

    Execution of /tmp/tmpg2c3slrh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_case;\n    my $val_case;\n    my $key_case_prev;\n    my $val_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $val_case_prev_set = 0;\n    my $key_case_prev_val;\n\
    \    my $val_case_prev_val;\n    my $key_case_prev_val_set = 0;\n    my $val_case_prev_val_set\
    \ = 0;\n    my $key_case_prev_val_val;\n    my $val_case_prev_val_val;\n    my\
    \ $key_case_prev_val_val_set = 0;\n    my $val_case_prev_val_val_set = 0;\n  \
    \  my $key_case_prev_val_val_val;\n    my $val_case_prev_val_val_val;\n    my\
    \ $key_case_prev_val_val_val_set = 0;\n    my $val_case_prev_val_val_val_set =\
    \ 0;\n    my $key_case_prev_val_val_val_val;\n    my $val_case_prev_val_val_val_val;\n\
    \    my $key_case_prev_val_val_val_val_set = 0;\n    my $val_case_prev_val_val_val_val_set\
    \ = 0;\n    my $key_case_prev_val_val_val_val_val;\n    my $val_case_prev_val_val_val_val_val;\n\
    \    my $key_case_prev_val_val_val_val_val_set = 0;\n    my $val_case_prev_val_val_val_val_val_set\
    \ = 0;\n    my $key_case_prev_val_val_val_val_val_val;\n    my $val_case_prev_val_val_val_val_val_val;\n\
    \    my $key_case_prev_val_val_val_val_val_val_set =\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1lwmx5bv.pl line 49, at end
    of line

    syntax error at /tmp/tmp1lwmx5bv.pl line 49, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1lwmx5bv.pl line 84, at end of
    line

    syntax error at /tmp/tmp1lwmx5bv.pl line 84, at EOF

    Execution of /tmp/tmp1lwmx5bv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /[A-Z]/) {\n                $case = \"upper\";\n            } else {\n  \
    \              $case = \"lower\";\n            }\n        }\n        if ($case\
    \ eq \"upper\" && $key =~ /[a-z]/) {\n            $result = \"\";\n          \
    \  last;\n        }\n        if ($case eq \"lower\" && $key =~ /[A-Z]/) {\n  \
    \          $result = \"\";\n            last;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper = 0;\n    my $lower = 0;\n    if (scalar(keys %$dict) == 0) {\n\
    \        return '';\n    }\n    while (($key, $value) = each %$dict) {\n     \
    \   if ($key =~ /[A-Z]/) {\n            $upper++;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $lower++;\n        }\n    }\n    if ($upper > 0 &&\
    \ $lower > 0) {\n        $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case = \"\";\n    my $value_case = \"\";\n    my $key_case_prev =\
    \ \"\";\n    my $value_case_prev = \"\";\n    my $key_case_curr = \"\";\n    my\
    \ $value_case_curr = \"\";\n    my $key_case_flag = 0;\n    my $value_case_flag\
    \ = 0;\n    my $key_case_prev_flag = 0;\n    my $value_case_prev_flag = 0;\n \
    \   my $key_case_curr_flag = 0;\n    my $value_case_curr_flag = 0;\n    my $key_case_prev_flag_set\
    \ = 0;\n    my $value_case_prev_flag_set = 0;\n    my $key_case_curr_flag_set\
    \ = 0;\n    my $value_case_curr_flag_set = 0;\n    my $key_case_prev_flag_set_flag\
    \ = 0;\n    my $value_case_prev_flag_set_flag = 0;\n    my $key_case_curr_flag_set_flag\
    \ = 0;\n    my $value_case_curr_flag_set_flag = 0;\n    my $key_case_prev_flag_set_flag_flag\
    \ = 0;\n    my $value_case_prev_flag_set_flag_flag = 0;\n    my $key_case_curr_flag_set_flag_flag\
    \ = 0;\n    my $value_case_curr_flag_set_flag_flag = 0;\n    my $key_case_prev_flag_set_flag_flag_flag\
    \ = 0;\n    my $value_case_prev_flag_set_flag_flag_flag = 0;\n    my $key_case_curr_flag_set_flag_flag_flag\
    \ = 0;\n    my $value_case_curr_flag_set_flag_flag_flag = 0;\n    my $key_case_prev_flag_set_flag_flag_flag_flag\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpzps6rsf9.pl line 50,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpzps6rsf9.pl line 50, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpzps6rsf9.pl line 85, at end of line\nsyntax\
    \ error at /tmp/tmpzps6rsf9.pl line 85, at EOF\nExecution of /tmp/tmpzps6rsf9.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    foreach $key (keys\
    \ %$dict) {\n        if (ref($key) eq 'SCALAR') {\n            $ret = '';\n  \
    \          last;\n        }\n        if ($key =~ /[A-Z]/) {\n            if ($key\
    \ =~ /[a-z]/) {\n                $ret = '';\n                last;\n         \
    \   }\n        } else {\n            if ($key =~ /[A-Z]/) {\n                $ret\
    \ = '';\n                last;\n            }\n        }\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($key, $val);\n    my($all_lower, $all_upper);\n\
    \    $all_lower = 1;\n    $all_upper = 1;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n\
    \        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n\
    \    if ($all_lower || $all_upper) {\n        return 1;\n    }\n    return '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n        \
    \    $is_upper = 1;\n        } else {\n            $result = '';\n           \
    \ last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n        $result\
    \ = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    while (($key, $value) = each %$dict) {\n        if ($case)\
    \ {\n            if ($case eq \"lower\") {\n                if ($key =~ /[A-Z]/)\
    \ {\n                    $result = \"\";\n                    last;\n        \
    \        }\n            }\n            else {\n                if ($key =~ /[a-z]/)\
    \ {\n                    $result = \"\";\n                    last;\n        \
    \        }\n            }\n        }\n        else {\n            if ($key =~\
    \ /[a-z]/) {\n                $case = \"lower\";\n            }\n            else\
    \ {\n                $case = \"upper\";\n            }\n        }\n    }\n   \
    \ return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $first_key;\n    my $first_value;\n    my $case;\n    my $first_case;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpr91jnm07.pl line 136,
    at end of line

    syntax error at /tmp/tmpr91jnm07.pl line 136, at EOF

    Execution of /tmp/tmpr91jnm07.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' if (keys %$dict == 0);\n    my $case =\
    \ '';\n    foreach my $key (keys %$dict) {\n        if ($case eq '') {\n     \
    \       $case = $key =~ /^[a-z]+$/ ? 'lower' : 'upper';\n        }\n        else\
    \ {\n            return '' if ($key =~ /^[a-z]+$/ ? 'lower' : 'upper') ne $case;\n\
    \        }\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_count\
    \ = 0;\n    my $value_case_prev_set_count = 0;\n    my $key_case_prev_set_count_max\
    \ = 0;\n    my $value_case_prev_set_count_max = 0;\n    my $key_case_prev_set_count_max_key;\n\
    \    my $value_case_prev_set_count_max_key;\n    my $key_case_prev_set_count_max_value;\n\
    \    my $value_case_prev_set_count_max_value;\n    my $key_case_prev_set_count_max_key_case;\n\
    \    my $value_case_prev_set_count_max_key_case;\n    my $key_case_prev_set_count_max_value_case;\n\
    \    my $value_case_prev_set_count_max_value_case;\n    my $key_case_prev_set_count_max_key_case_prev;\n\
    \    my $value_case_prev_set_count_max_key_case_prev;\n    my $key_case_prev_set_count_max_value_case_prev;\n\
    \    my $value_case_prev_set_count_max_value_case_prev;\n    my $key_case_prev_set_count_max_key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set_count_max_key_case_prev_set = 0;\n    my $key_case_prev_set_count_max_value_case_prev_set\
    \ = 0;\n    my $value_case_prev_set_count_max_value_case_prev_set = 0;\n    my\
    \ $key_case_prev_set_count_max_\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpp1hzjjjs.pl line 47, at end
    of line

    syntax error at /tmp/tmpp1hzjjjs.pl line 47, near "$key_case_prev_set_count_max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpp1hzjjjs.pl line 82, at end of
    line

    syntax error at /tmp/tmpp1hzjjjs.pl line 82, at EOF

    Execution of /tmp/tmpp1hzjjjs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case;\n    my $i = 0;\n    foreach $key (keys %$dict) {\n        if ($i ==\
    \ 0) {\n            $case = ($key =~ /^[a-z]+$/) ? 'lower' : 'upper';\n      \
    \  } else {\n            if ($case eq 'lower' && $key !~ /^[a-z]+$/) {\n     \
    \           $ret = '';\n                last;\n            } elsif ($case eq 'upper'\
    \ && $key !~ /^[A-Z]+$/) {\n                $ret = '';\n                last;\n\
    \            }\n        }\n        $i++;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;\n    while (($key,\
    \ $val) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n \
    \           $is_upper = 1;\n        }\n    }\n    if ($is_empty) {\n        $ret\
    \ = '';\n    } elsif ($is_lower && $is_upper) {\n        $ret = '';\n    }\n \
    \   return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_first\
    \ = 0;\n    my $value_case_prev_set_first = 0;\n    my $key_case_prev_set_second\
    \ = 0;\n    my $value_case_prev_set_second = 0;\n    my $key_case_prev_set_third\
    \ = 0;\n    my $value_case_prev_set_third = 0;\n    my $key_case_prev_set_fourth\
    \ = 0;\n    my $value_case_prev_set_fourth = 0;\n    my $key_case_prev_set_fifth\
    \ = 0;\n    my $value_case_prev_set_fifth = 0;\n    my $key_case_prev_set_sixth\
    \ = 0;\n    my $value_case_prev_set_sixth = 0;\n    my $key_case_prev_set_seventh\
    \ = 0;\n    my $value_case_prev_set_seventh = 0;\n    my $key_case_prev_set_eighth\
    \ = 0;\n    my $value_case_prev_set_eighth = 0;\n    my $key_case_prev_set_ninth\
    \ = 0;\n    my $value_case_prev_set_ninth = 0;\n    my $key_case_prev_set_tenth\
    \ = 0;\n    my $value_case_prev_set_tenth = 0;\n    my $key_case_prev_set_eleventh\
    \ = 0;\n    my $value_case_prev_set_eleventh = 0;\n    my $key_case_prev_set_twelfth\
    \ = 0;\n    my $value_case_prev_set_twelfth = 0;\n    my $key_case_prev_set_thirteenth\
    \ = 0;\n    my $value_case_prev_set_\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpll6nqyal.pl line 52, at end
    of line

    syntax error at /tmp/tmpll6nqyal.pl line 52, near "$value_case_prev_set_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpll6nqyal.pl line 87, at end of
    line

    syntax error at /tmp/tmpll6nqyal.pl line 87, at EOF

    Execution of /tmp/tmpll6nqyal.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n\
    \        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n\
    \        else {\n            $ret = '';\n            last;\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        $ret = '';\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $ret = '';\n\
    \            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n    \
    \    $ret = '';\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_case = '';\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_case eq '') {\n            if ($key\
    \ =~ /[a-z]/) {\n                $key_case = 'lower';\n            } elsif ($key\
    \ =~ /[A-Z]/) {\n                $key_case = 'upper';\n            } else {\n\
    \                $result = '';\n                last;\n            }\n       \
    \ } elsif ($key_case eq 'lower') {\n            if ($key =~ /[A-Z]/) {\n     \
    \           $result = '';\n                last;\n            }\n        } elsif\
    \ ($key_case eq 'upper') {\n            if ($key =~ /[a-z]/) {\n             \
    \   $result = '';\n                last;\n            }\n        }\n    }\n  \
    \  return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /[a-z]/) {\n                $key_type = \"lower\";\n            } elsif ($key\
    \ =~ /[A-Z]/) {\n                $key_type = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } elsif ($key_type eq \"lower\") {\n            if ($key =~ /[A-Z]/) {\n \
    \               $result = \"\";\n                last;\n            }\n      \
    \  } elsif ($key_type eq \"upper\") {\n            if ($key =~ /[a-z]/) {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 1;\n    my $is_upper = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n\
    \    }\n    if ($is_lower == 0 && $is_upper == 0) {\n        $result = '';\n \
    \   }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_lower = 1;\n        }\n    }\n    if ($is_empty) {\n    \
    \    $result = '';\n    } elsif ($is_upper && $is_lower) {\n        $result =\
    \ '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 1;\n    my $is_upper = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n\
    \    }\n    if (!($is_lower || $is_upper)) {\n        $result = '';\n    }\n \
    \   return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $count = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($count == 0) {\n            $case = $key =~ /^[a-z]+$/ ? \"lower\"\
    \ : \"upper\";\n        } else {\n            if ($key =~ /^[a-z]+$/) {\n    \
    \            if ($case ne \"lower\") {\n                    $result = \"\";\n\
    \                    last;\n                }\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                if ($case ne \"upper\") {\n                    $result =\
    \ \"\";\n                    last;\n                }\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   }\n        $count++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    foreach $key\
    \ (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            if ($key =~ /[a-z]/)\
    \ {\n                $result = '';\n                last;\n            }\n   \
    \     }\n        else {\n            if ($key =~ /[A-Z]/) {\n                $result\
    \ = '';\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n\
    \        }\n        else {\n            $result = '';\n            last;\n   \
    \     }\n    }\n    if ($is_lower && $is_upper) {\n        $result = '';\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @keys = keys %$dict;\n    my $key = $keys[0];\n\
    \    my $case = $key =~ /^[a-z]+$/ ? 'lower' : 'upper';\n    foreach $key (@keys)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            return '' if $case eq 'upper';\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            return '' if $case eq 'lower';\n\
    \        } else {\n            return '';\n        }\n    }\n    return 1;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type;\n    my $value_type;\n    my $key_type_count = 0;\n    my $value_type_count\
    \ = 0;\n    my $key_type_count_upper = 0;\n    my $key_type_count_lower = 0;\n\
    \    my $value_type_count_upper = 0;\n    my $value_type_count_lower = 0;\n  \
    \  my $key_type_count_string = 0;\n    my $value_type_count_string = 0;\n    my\
    \ $key_type_count_number = 0;\n    my $value_type_count_number = 0;\n    my $key_type_count_other\
    \ = 0;\n    my $value_type_count_other = 0;\n    my $key_type_count_mixed = 0;\n\
    \    my $value_type_count_mixed = 0;\n    my $key_type_count_mixed_upper = 0;\n\
    \    my $key_type_count_mixed_lower = 0;\n    my $value_type_count_mixed_upper\
    \ = 0;\n    my $value_type_count_mixed_lower = 0;\n    my $key_type_count_mixed_string\
    \ = 0;\n    my $value_type_count_mixed_string = 0;\n    my $key_type_count_mixed_number\
    \ = 0;\n    my $value_type_count_mixed_number = 0;\n    my $key_type_count_mixed_other\
    \ = 0;\n    my $value_type_count_mixed_other = 0;\n    my $key_type_count_mixed_upper_string\
    \ = 0;\n    my $key_type_count_mixed_lower_string = 0;\n    my $value_type_count_mixed_upper_string\
    \ = 0;\n    my $value_type_count_mixed_lower_string = 0;\n    my $key_type_count_mixed_upper_number\
    \ = 0;\n    my $key_type_count_mixed_lower_number =\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpctljewwu.pl line 52, at end
    of line

    syntax error at /tmp/tmpctljewwu.pl line 52, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpctljewwu.pl line 87, at end of
    line

    syntax error at /tmp/tmpctljewwu.pl line 87, at EOF

    Execution of /tmp/tmpctljewwu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 1;\n    my $is_upper = 1;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n         \
    \   $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper\
    \ = 0;\n        }\n        $is_empty = 0;\n    }\n    if ($is_empty) {\n     \
    \   $result = '';\n    }\n    elsif ($is_lower == 0 && $is_upper == 0) {\n   \
    \     $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_count\
    \ = 0;\n    my $value_case_prev_set_count = 0;\n    my $key_case_prev_set_count_max\
    \ = 0;\n    my $value_case_prev_set_count_max = 0;\n    my $key_case_prev_set_count_max_prev\
    \ = 0;\n    my $value_case_prev_set_count_max_prev = 0;\n    my $key_case_prev_set_count_max_prev_set\
    \ = 0;\n    my $value_case_prev_set_count_max_prev_set = 0;\n    my $key_case_prev_set_count_max_prev_set_count\
    \ = 0;\n    my $value_case_prev_set_count_max_prev_set_count = 0;\n    my $key_case_prev_set_count_max_prev_set_count_max\
    \ = 0;\n    my $value_case_prev_set_count_max_prev_set_count_max = 0;\n    my\
    \ $key_case_prev_set_count_max_prev_set_count_max_prev = 0;\n    my $value_case_prev_set_count_max_prev_set_count_max_prev\
    \ = 0;\n    my $key_case_prev_set_count_max_prev_set_count_max_prev_set = 0;\n\
    \    my $value_case_prev_set_count_max_prev_set_count_max_prev_set = 0;\n    my\
    \ $key_case_prev_set_count_max_prev_set_count_max_prev_set_count = 0;\n    my\
    \ $value_case_prev_set_count_max_prev_set_count_max_prev_set_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmppzkntypk.pl line 44, at end
    of line

    syntax error at /tmp/tmppzkntypk.pl line 44, near "$value_case_prev_set_count_max_prev_set_count_max_prev_set_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmppzkntypk.pl line 79, at end of
    line

    syntax error at /tmp/tmppzkntypk.pl line 79, at EOF

    Execution of /tmp/tmppzkntypk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $flag = 1;\n    my $key;\n    my $value;\n  \
    \  my $key_case;\n    my $value_case;\n    my @keys = keys(%$dict);\n    my @values\
    \ = values(%$dict);\n    if(scalar(@keys) == 0) {\n        return '';\n    }\n\
    \    $key = $keys[0];\n    $value = $values[0];\n    $key_case = check_case($key);\n\
    \    $value_case = check_case($value);\n    if($key_case eq $value_case) {\n \
    \       foreach $key (@keys) {\n            if(check_case($key) ne $key_case)\
    \ {\n                $flag = 0;\n                last;\n            }\n      \
    \  }\n        foreach $value (@values) {\n            if(check_case($value) ne\
    \ $value_case) {\n                $flag = 0;\n                last;\n        \
    \    }\n        }\n    } else {\n        $flag = 0;\n    }\n    if($flag == 1)\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::check_case called at /tmp/tmp617kti1b.pl line
    29.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_flag = 0;\n    my $value_case_prev_flag = 0;\n    my $key_case_flag\
    \ = 0;\n    my $value_case_flag = 0;\n    my $key_case_flag_prev = 0;\n    my\
    \ $value_case_flag_prev = 0;\n    my $key_case_flag_prev_flag = 0;\n    my $value_case_flag_prev_flag\
    \ = 0;\n    my $key_case_flag_prev_flag_prev = 0;\n    my $value_case_flag_prev_flag_prev\
    \ = 0;\n    my $key_case_flag_prev_flag_prev_flag = 0;\n    my $value_case_flag_prev_flag_prev_flag\
    \ = 0;\n    my $key_case_flag_prev_flag_prev_flag_prev = 0;\n    my $value_case_flag_prev_flag_prev_flag_prev\
    \ = 0;\n    my $key_case_flag_prev_flag_prev_flag_prev_flag = 0;\n    my $value_case_flag_prev_flag_prev_flag_prev_flag\
    \ = 0;\n    my $key_case_flag_prev_flag_prev_flag_prev_flag_prev = 0;\n    my\
    \ $value_case_flag_prev_flag_prev_flag_prev_flag_prev = 0;\n    my $key_case_flag_prev_flag_prev_flag_prev_flag_prev_flag\
    \ = 0;\n    my $value_case_flag_prev_flag_prev_flag_prev_flag_prev_flag = 0;\n\
    \    my $key_case_flag_prev_flag_prev_flag_prev_flag_prev_flag_prev = 0;\n   \
    \ my $value_case_flag_prev_flag_prev_flag_prev_flag_prev_flag_prev = 0;\n    my\
    \ $key_case_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprt11gj7o.pl line 47, at end
    of line

    syntax error at /tmp/tmprt11gj7o.pl line 47, near "$key_case_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprt11gj7o.pl line 82, at end of
    line

    syntax error at /tmp/tmprt11gj7o.pl line 82, at EOF

    Execution of /tmp/tmprt11gj7o.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key_type = \"\";\n    my $key_type_lower\
    \ = \"\";\n    my $key_type_upper = \"\";\n    foreach my $key (keys %$dict) {\n\
    \        if ($key_type eq \"\") {\n            $key_type = ref($key);\n      \
    \      if ($key_type eq \"\") {\n                $key_type_lower = $key =~ /^[a-z]+$/;\n\
    \                $key_type_upper = $key =~ /^[A-Z]+$/;\n            }\n      \
    \  }\n        if ($key_type eq \"\") {\n            if ($key_type_lower) {\n \
    \               if ($key !~ /^[a-z]+$/) {\n                    $ret = \"\";\n\
    \                    last;\n                }\n            }\n            elsif\
    \ ($key_type_upper) {\n                if ($key !~ /^[A-Z]+$/) {\n           \
    \         $ret = \"\";\n                    last;\n                }\n       \
    \     }\n        }\n        else {\n            if (ref($key) ne $key_type) {\n\
    \                $ret = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower = 1;\n    my $upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        $lower = 0 if $key !~ /^[a-z]+$/;\n       \
    \ $upper = 0 if $key !~ /^[A-Z]+$/;\n    }\n    return $lower || $upper;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    foreach $key\
    \ (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $result = '';\n\
    \            last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_value\
    \ = 0;\n    my $value_case_prev_set_value = 0;\n    my $key_case_prev_set_value_upper\
    \ = 0;\n    my $value_case_prev_set_value_upper = 0;\n    my $key_case_prev_set_value_lower\
    \ = 0;\n    my $value_case_prev_set_value_lower = 0;\n    my $key_case_prev_set_value_mixed\
    \ = 0;\n    my $value_case_prev_set_value_mixed = 0;\n    my $key_case_prev_set_value_upper_count\
    \ = 0;\n    my $value_case_prev_set_value_upper_count = 0;\n    my $key_case_prev_set_value_lower_count\
    \ = 0;\n    my $value_case_prev_set_value_lower_count = 0;\n    my $key_case_prev_set_value_mixed_count\
    \ = 0;\n    my $value_case_prev_set_value_mixed_count = 0;\n    my $key_case_prev_set_value_upper_count_prev\
    \ = 0;\n    my $value_case_prev_set_value_upper_count_prev = 0;\n    my $key_case_prev_set_value_lower_count_prev\
    \ = 0;\n    my $value_case_prev_set_value_lower_count_prev = 0;\n    my $key_case_prev_set_value_mixed_count_prev\
    \ = 0;\n    my $value_case_prev_set_value_mixed_count_prev = 0;\n    my $key_case_prev_set_value_upper_count_prev_set\
    \ = 0;\n    my $value_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpqdd6jli5.pl line 48, at end
    of line

    syntax error at /tmp/tmpqdd6jli5.pl line 48, near "$value_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpqdd6jli5.pl line 83, at end of
    line

    syntax error at /tmp/tmpqdd6jli5.pl line 83, at EOF

    Execution of /tmp/tmpqdd6jli5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_flag\
    \ = 0;\n    my $value_case_prev_set_flag = 0;\n    my $key_case_prev_set_flag_prev\
    \ = 0;\n    my $value_case_prev_set_flag_prev = 0;\n    my $key_case_prev_set_flag_prev_set\
    \ = 0;\n    my $value_case_prev_set_flag_prev_set = 0;\n    my $key_case_prev_set_flag_prev_set_flag\
    \ = 0;\n    my $value_case_prev_set_flag_prev_set_flag = 0;\n    my $key_case_prev_set_flag_prev_set_flag_prev\
    \ = 0;\n    my $value_case_prev_set_flag_prev_set_flag_prev = 0;\n    my $key_case_prev_set_flag_prev_set_flag_prev_set\
    \ = 0;\n    my $value_case_prev_set_flag_prev_set_flag_prev_set = 0;\n    my $key_case_prev_set_flag_prev_set_flag_prev_set_flag\
    \ = 0;\n    my $value_case_prev_set_flag_prev_set_flag_prev_set_flag = 0;\n  \
    \  my $key_case_prev_set_flag_prev_set_flag_prev_set_flag_prev = 0;\n    my $value_case_prev_set_flag_prev_set_flag_prev_set_flag_prev\
    \ = 0;\n    my $key_case_prev_set_flag_prev_set_flag_prev_set_flag_prev_set =\
    \ 0;\n    my $value_case_prev_set_flag_prev_set_flag_prev_set_flag_prev_\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0vpkxg1r.pl line 44, at end
    of line

    syntax error at /tmp/tmp0vpkxg1r.pl line 44, near "$value_case_prev_set_flag_prev_set_flag_prev_set_flag_prev_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0vpkxg1r.pl line 79, at end of
    line

    syntax error at /tmp/tmp0vpkxg1r.pl line 79, at EOF

    Execution of /tmp/tmp0vpkxg1r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_case;\n    my $val_case;\n    my $key_case_prev;\n    my $val_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $val_case_prev_set = 0;\n    my $key_case_prev_val;\n\
    \    my $val_case_prev_val;\n    my $key_case_prev_val_set = 0;\n    my $val_case_prev_val_set\
    \ = 0;\n    my $key_case_prev_val_val;\n    my $val_case_prev_val_val;\n    my\
    \ $key_case_prev_val_val_set = 0;\n    my $val_case_prev_val_val_set = 0;\n  \
    \  my $key_case_prev_val_val_val;\n    my $val_case_prev_val_val_val;\n    my\
    \ $key_case_prev_val_val_val_set = 0;\n    my $val_case_prev_val_val_val_set =\
    \ 0;\n    my $key_case_prev_val_val_val_val;\n    my $val_case_prev_val_val_val_val;\n\
    \    my $key_case_prev_val_val_val_val_set = 0;\n    my $val_case_prev_val_val_val_val_set\
    \ = 0;\n    my $key_case_prev_val_val_val_val_val;\n    my $val_case_prev_val_val_val_val_val;\n\
    \    my $key_case_prev_val_val_val_val_val_set = 0;\n    my $val_case_prev_val_val_val_val_val_set\
    \ = 0;\n    my $key_case_prev_val_val_val_val_val_val;\n    my $val_case_prev_val_val_val_val_val_val;\n\
    \    my $key_case_prev_val_val_val_val_val_val_set =\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1lwmx5bv.pl line 49, at end
    of line

    syntax error at /tmp/tmp1lwmx5bv.pl line 49, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1lwmx5bv.pl line 84, at end of
    line

    syntax error at /tmp/tmp1lwmx5bv.pl line 84, at EOF

    Execution of /tmp/tmp1lwmx5bv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $first_key;\n    my $first_value;\n\
    \    my $first_key_case;\n    my $first_value_case;\n    my $key_count = 0;\n\
    \    my $value_count = 0;\n    my $key_upper_count = 0;\n    my $key_lower_count\
    \ = 0;\n    my $value_upper_count = 0;\n    my $value_lower_count = 0;\n    my\
    \ $key_upper_case = 0;\n    my $key_lower_case = 0;\n    my $value_upper_case\
    \ = 0;\n    my $value_lower_case = 0;\n    my $key_upper_case_first = 0;\n   \
    \ my $key_lower_case_first = 0;\n    my $value_upper_case_first = 0;\n    my $value_lower_case_first\
    \ = 0;\n    my $key_upper_case_all = 0;\n    my $key_lower_case_all = 0;\n   \
    \ my $value_upper_case_all = 0;\n    my $value_lower_case_all = 0;\n    my $key_upper_case_all_first\
    \ = 0;\n    my $key_lower_case_all_first = 0;\n    my $value_upper_case_all_first\
    \ = 0;\n    my $value_lower_case_all_first = 0;\n    my $key_upper_case_all_first_key\
    \ = 0;\n    my $key_lower_case_all_first_key = 0;\n    my $value_upper_case_all_first_value\
    \ = 0;\n    my $value_lower_case_all_first_value = 0;\n    my $key_upper_case_all_first_key_value\
    \ = 0;\n    my $key_lower_case_all_first_key_value = 0;\n    my $value_upper_case_all_first_key_value\
    \ = 0;\n    my $value_lower_case_all_first_key_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplw5ztmzb.pl line 56, at end
    of line

    syntax error at /tmp/tmplw5ztmzb.pl line 56, near "$value_lower_case_all_first_key_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplw5ztmzb.pl line 91, at end of
    line

    syntax error at /tmp/tmplw5ztmzb.pl line 91, at EOF

    Execution of /tmp/tmplw5ztmzb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $all_lower = 1;\n    my $all_upper = 1;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n   \
    \     }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n       \
    \ }\n    }\n    if (!$all_lower && !$all_upper) {\n        $result = '';\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lower = 0;\n    my $upper = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $lower++;\n        } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } else {\n          \
    \  $result = '';\n            last;\n        }\n    }\n    if ($lower > 0 && $upper\
    \ > 0) {\n        $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_defined = 0;\n    my $value_case_prev_defined = 0;\n  \
    \  while (($key, $value) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $key_case = 'lower';\n        } elsif ($key =~ /^[A-Z]+$/) {\n  \
    \          $key_case = 'upper';\n        } else {\n            $key_case = 'mixed';\n\
    \        }\n        if ($value =~ /^[a-z]+$/) {\n            $value_case = 'lower';\n\
    \        } elsif ($value =~ /^[A-Z]+$/) {\n            $value_case = 'upper';\n\
    \        } else {\n            $value_case = 'mixed';\n        }\n        if ($key_case_prev_defined)\
    \ {\n            if ($key_case ne $key_case_prev) {\n                $result =\
    \ '';\n                last;\n            }\n        }\n        if ($value_case_prev_defined)\
    \ {\n            if ($value_case ne $value_case_prev) {\n                $result\
    \ = '';\n                last;\n            }\n        }\n        $key_case_prev\
    \ = $key_case;\n        $value_case_prev = $value_case;\n        $key_case_prev_defined\
    \ = 1;\n        $value_case_prev_defined = 1;\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_first\
    \ = 0;\n    my $value_case_prev_set_first = 0;\n    my $key_case_prev_set_second\
    \ = 0;\n    my $value_case_prev_set_second = 0;\n    my $key_case_prev_set_third\
    \ = 0;\n    my $value_case_prev_set_third = 0;\n    my $key_case_prev_set_fourth\
    \ = 0;\n    my $value_case_prev_set_fourth = 0;\n    my $key_case_prev_set_fifth\
    \ = 0;\n    my $value_case_prev_set_fifth = 0;\n    my $key_case_prev_set_sixth\
    \ = 0;\n    my $value_case_prev_set_sixth = 0;\n    my $key_case_prev_set_seventh\
    \ = 0;\n    my $value_case_prev_set_seventh = 0;\n    my $key_case_prev_set_eighth\
    \ = 0;\n    my $value_case_prev_set_eighth = 0;\n    my $key_case_prev_set_ninth\
    \ = 0;\n    my $value_case_prev_set_ninth = 0;\n    my $key_case_prev_set_tenth\
    \ = 0;\n    my $value_case_prev_set_tenth = 0;\n    my $key_case_prev_set_eleventh\
    \ = 0;\n    my $value_case_prev_set_eleventh = 0;\n    my $key_case_prev_set_twelfth\
    \ = 0;\n    my $value_case_prev_set_twelfth = 0;\n    my $key_case_prev_set_thirteenth\
    \ = 0;\n    my $value_case_prev_set_\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpll6nqyal.pl line 52, at end
    of line

    syntax error at /tmp/tmpll6nqyal.pl line 52, near "$value_case_prev_set_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpll6nqyal.pl line 87, at end of
    line

    syntax error at /tmp/tmpll6nqyal.pl line 87, at EOF

    Execution of /tmp/tmpll6nqyal.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n\
    \        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n\
    \        else {\n            $ret = '';\n            last;\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        $ret = '';\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n\
    \        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n\
    \        else {\n            $ret = '';\n            last;\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        $ret = '';\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case;\n    my $is_upper;\n    my $is_lower;\n    my $is_mixed;\n    my $is_empty;\n\
    \    my $is_string;\n    my $is_number;\n    my $is_symbol;\n    my $is_other;\n\
    \    my $is_all_string;\n    my $is_all_number;\n    my $is_all_symbol;\n    my\
    \ $is_all_other;\n    my $is_all_upper;\n    my $is_all_lower;\n    my $is_all_mixed;\n\
    \    my $is_all_empty;\n    my $is_all_upper_string;\n    my $is_all_lower_string;\n\
    \    my $is_all_mixed_string;\n    my $is_all_empty_string;\n    my $is_all_upper_number;\n\
    \    my $is_all_lower_number;\n    my $is_all_mixed_number;\n    my $is_all_empty_number;\n\
    \    my $is_all_upper_symbol;\n    my $is_all_lower_symbol;\n    my $is_all_mixed_symbol;\n\
    \    my $is_all_empty_symbol;\n    my $is_all_upper_other;\n    my $is_all_lower_other;\n\
    \    my $is_all_mixed_other;\n    my $is_all_empty_other;\n    my $is_all_upper_string_number;\n\
    \    my $is_all_lower_string_number;\n    my $is_all_mixed_string_number;\n  \
    \  my $is_all_empty_string_number;\n    my $is_all_upper_string_symbol;\n    my\
    \ $is_all_lower_string_symbol;\n    my $is_all_mixed_string_symbol;\n    my $is_all_empty_string_symbol;\n\
    \    my $is_all_upper_string_other;\n    my $is_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmph9rtngma.pl line 63, at end
    of line

    syntax error at /tmp/tmph9rtngma.pl line 63, near "$is_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmph9rtngma.pl line 98, at end of
    line

    syntax error at /tmp/tmph9rtngma.pl line 98, at EOF

    Execution of /tmp/tmph9rtngma.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case = \"\";\n    my $value_case = \"\";\n    my $value_type = \"\
    \";\n    my $key_type = \"\";\n    my $key_count = 0;\n    my $value_count = 0;\n\
    \    my $key_count_upper = 0;\n    my $key_count_lower = 0;\n    my $value_count_upper\
    \ = 0;\n    my $value_count_lower = 0;\n    my $key_count_string = 0;\n    my\
    \ $value_count_string = 0;\n    my $key_count_number = 0;\n    my $value_count_number\
    \ = 0;\n    my $key_count_other = 0;\n    my $value_count_other = 0;\n    my $key_count_undef\
    \ = 0;\n    my $value_count_undef = 0;\n    my $key_count_null = 0;\n    my $value_count_null\
    \ = 0;\n    my $key_count_true = 0;\n    my $value_count_true = 0;\n    my $key_count_false\
    \ = 0;\n    my $value_count_false = 0;\n    my $key_count_array = 0;\n    my $value_count_array\
    \ = 0;\n    my $key_count_hash = 0;\n    my $value_count_hash = 0;\n    my $key_count_object\
    \ = 0;\n    my $value_count_object = 0;\n    my $key_count_boolean = 0;\n    my\
    \ $value_count_boolean = 0;\n    my $key_count_number_string = 0;\n    my $value_count_number_string\
    \ = 0;\n    my $key_count_number_boolean = 0;\n    my $value_count_number_boolean\
    \ = 0;\n    my $key_count_string_boolean = 0;\n    my $value_count_string_boolean\
    \ = 0;\n    my $key_count_string_number = 0;\n    my $value_count_string_number\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp9x1n2f56.pl line 95, at
    end of line

    syntax error at /tmp/tmp9x1n2f56.pl line 95, at EOF

    Execution of /tmp/tmp9x1n2f56.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $first_key;\n    my $first_value;\n\
    \    my $first_key_case;\n    my $first_value_case;\n    my $key_case_match =\
    \ 0;\n    my $value_case_match = 0;\n    my $key_case_mismatch = 0;\n    my $value_case_mismatch\
    \ = 0;\n    my $key_case_mismatch_count = 0;\n    my $value_case_mismatch_count\
    \ = 0;\n    my $key_case_match_count = 0;\n    my $value_case_match_count = 0;\n\
    \    my $key_case_mismatch_count_total = 0;\n    my $value_case_mismatch_count_total\
    \ = 0;\n    my $key_case_match_count_total = 0;\n    my $value_case_match_count_total\
    \ = 0;\n    my $key_case_mismatch_count_total_max = 0;\n    my $value_case_mismatch_count_total_max\
    \ = 0;\n    my $key_case_match_count_total_max = 0;\n    my $value_case_match_count_total_max\
    \ = 0;\n    my $key_case_mismatch_count_total_min = 0;\n    my $value_case_mismatch_count_total_min\
    \ = 0;\n    my $key_case_match_count_total_min = 0;\n    my $value_case_match_count_total_min\
    \ = 0;\n    my $key_case_mismatch_count_total_avg = 0;\n    my $value_case_mismatch_count_total_avg\
    \ = 0;\n    my $key_case_match_count_total_avg = 0;\n    my $value_case_match_count_total_avg\
    \ = 0;\n    my $key_case_mismatch_count_total_sum = 0;\n    my $value_case_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpm54_hs5g.pl line 52, at end
    of line

    syntax error at /tmp/tmpm54_hs5g.pl line 52, near "$value_case_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpm54_hs5g.pl line 87, at end of
    line

    syntax error at /tmp/tmpm54_hs5g.pl line 87, at EOF

    Execution of /tmp/tmpm54_hs5g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n   \
    \ my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q =\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp_gwr3n9u.pl line 82, at end
    of line

    syntax error at /tmp/tmp_gwr3n9u.pl line 82, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp_gwr3n9u.pl line 117, at end
    of line

    syntax error at /tmp/tmp_gwr3n9u.pl line 117, at EOF

    Execution of /tmp/tmp_gwr3n9u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $flag = 0;\n    my $flag_upper = 0;\n    my $flag_lower = 0;\n    if (scalar\
    \ keys %$dict == 0) {\n        return '';\n    }\n    while (($key, $val) = each\
    \ %$dict) {\n        if ($key =~ /[a-z]/) {\n            $flag_lower = 1;\n  \
    \      }\n        if ($key =~ /[A-Z]/) {\n            $flag_upper = 1;\n     \
    \   }\n    }\n    if ($flag_lower == 1 && $flag_upper == 1) {\n        $ret =\
    \ '';\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $key_case;\n    my $value_case;\n    my $key_case_count\
    \ = 0;\n    my $value_case_count = 0;\n    my $key_case_upper = 0;\n    my $key_case_lower\
    \ = 0;\n    my $value_case_upper = 0;\n    my $value_case_lower = 0;\n    my $key_case_mixed\
    \ = 0;\n    my $value_case_mixed = 0;\n    my $key_case_mixed_count = 0;\n   \
    \ my $value_case_mixed_count = 0;\n    my $key_case_upper_count = 0;\n    my $key_case_lower_count\
    \ = 0;\n    my $value_case_upper_count = 0;\n    my $value_case_lower_count =\
    \ 0;\n    my $key_case_upper_count_max = 0;\n    my $key_case_lower_count_max\
    \ = 0;\n    my $value_case_upper_count_max = 0;\n    my $value_case_lower_count_max\
    \ = 0;\n    my $key_case_upper_count_max_key = \"\";\n    my $key_case_lower_count_max_key\
    \ = \"\";\n    my $value_case_upper_count_max_key = \"\";\n    my $value_case_lower_count_max_key\
    \ = \"\";\n    my $key_case_upper_count_max_value = \"\";\n    my $key_case_lower_count_max_value\
    \ = \"\";\n    my $value_case_upper_count_max_value = \"\";\n    my $value_case_lower_count_max_value\
    \ = \"\";\n    my $key_case_upper_count_max_key_length = 0;\n    my $key_case_lower_count_max_key_length\
    \ = 0;\n    my $value_case_upper_count_max_key_length = 0;\n    my $value_case_lower_count_max_key_length\
    \ =\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpqzl2qsog.pl line 53, at end
    of line

    syntax error at /tmp/tmpqzl2qsog.pl line 53, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpqzl2qsog.pl line 88, at end of
    line

    syntax error at /tmp/tmpqzl2qsog.pl line 88, at EOF

    Execution of /tmp/tmpqzl2qsog.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $first_key = 1;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($first_key) {\n            $case = ($key =~ /[a-z]/) ? 'lower'\
    \ : 'upper';\n            $first_key = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            if ($case ne 'lower') {\n                $result = '';\n    \
    \            last;\n            }\n        }\n        else {\n            if ($case\
    \ ne 'upper') {\n                $result = '';\n                last;\n      \
    \      }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case = \"\";\n    while (($key, $val) = each %$dict) {\n        if ($case eq\
    \ \"\") {\n            if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\"\
    ;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\"\
    ;\n            } else {\n                $ret = \"\";\n                last;\n\
    \            }\n        } else {\n            if ($case eq \"lower\" && $key =~\
    \ /^[A-Z]+$/) {\n                $ret = \"\";\n                last;\n       \
    \     } elsif ($case eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $ret\
    \ = \"\";\n                last;\n            }\n        }\n    }\n    return\
    \ $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return '';\n        }\n    }\n\
    \    return $is_lower + $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       }\n        elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n\
    \        }\n        else {\n            $result = '';\n            last;\n   \
    \     }\n    }\n    if ($is_upper && $is_lower) {\n        $result = '';\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lower_case = 0;\n    my $upper_case = 0;\n    while (($key, $value) =\
    \ each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case =\
    \ 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case\
    \ = 1;\n        }\n        else {\n            $result = '';\n            last;\n\
    \        }\n    }\n    if ($lower_case && $upper_case) {\n        $result = '';\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $first_key;\n    my $first_value;\n    my $first_case;\n\
    \    my $key_count = 0;\n    my $value_count = 0;\n    my $case_count = 0;\n \
    \   my $first_key_count = 0;\n    my $first_value_count = 0;\n    my $first_case_count\
    \ = 0;\n    my $key_case_count = 0;\n    my $first_key_case_count = 0;\n    my\
    \ $key_value_count = 0;\n    my $first_key_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\n    my $first_key_case_value_count = 0;\n    my $key_case_value_count\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmplsh5aypo.pl line 92, at
    end of line

    syntax error at /tmp/tmplsh5aypo.pl line 92, at EOF

    Execution of /tmp/tmplsh5aypo.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $result = '';\n            last;\n\
    \        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_first;\n    my $value_case_first;\n    my $key_case_first_prev;\n\
    \    my $value_case_first_prev;\n    my $key_case_first_prev_prev;\n    my $value_case_first_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev;\n    my $value_case_first_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $value_case_first_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_case_first_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_case_first_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu7p9dju1.pl line 47, at end
    of line

    syntax error at /tmp/tmpu7p9dju1.pl line 47, near "$key_case_first_prev_prev_prev_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu7p9dju1.pl line 82, at end of
    line

    syntax error at /tmp/tmpu7p9dju1.pl line 82, at EOF

    Execution of /tmp/tmpu7p9dju1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case == 0) {\n            if ($key =~\
    \ /^[a-z]+$/) {\n                $case = 1;\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $case = 2;\n            } else {\n                $result\
    \ = '';\n                last;\n            }\n        } elsif ($case == 1) {\n\
    \            if ($key =~ /^[A-Z]+$/) {\n                $result = '';\n      \
    \          last;\n            }\n        } elsif ($case == 2) {\n            if\
    \ ($key =~ /^[a-z]+$/) {\n                $result = '';\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key_case = '';\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_case eq '') {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_case = 'lower';\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_case = 'upper';\n            }\
    \ else {\n                $ret = '';\n                last;\n            }\n \
    \       } else {\n            if ($key_case eq 'lower' && $key =~ /^[A-Z]+$/)\
    \ {\n                $ret = '';\n                last;\n            } elsif ($key_case\
    \ eq 'upper' && $key =~ /^[a-z]+$/) {\n                $ret = '';\n          \
    \      last;\n            }\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_count_lower = 0;\n   \
    \ my $key_type_count_upper = 0;\n    my $value_type_count_lower = 0;\n    my $value_type_count_upper\
    \ = 0;\n    my $key_type_count_lower_flag = 0;\n    my $key_type_count_upper_flag\
    \ = 0;\n    my $value_type_count_lower_flag = 0;\n    my $value_type_count_upper_flag\
    \ = 0;\n    my $key_type_count_flag = 0;\n    my $value_type_count_flag = 0;\n\
    \    my $key_type_count_lower_flag_count = 0;\n    my $key_type_count_upper_flag_count\
    \ = 0;\n    my $value_type_count_lower_flag_count = 0;\n    my $value_type_count_upper_flag_count\
    \ = 0;\n    my $key_type_count_flag_count = 0;\n    my $value_type_count_flag_count\
    \ = 0;\n    my $key_type_count_lower_flag_count_flag = 0;\n    my $key_type_count_upper_flag_count_flag\
    \ = 0;\n    my $value_type_count_lower_flag_count_flag = 0;\n    my $value_type_count_upper_flag_count_flag\
    \ = 0;\n    my $key_type_count_flag_count_flag = 0;\n    my $value_type_count_flag_count_flag\
    \ = 0;\n    my $key_type_count_lower_flag_count_flag_count = 0;\n    my $key_type_count_upper_flag_count_flag_count\
    \ = 0;\n    my $value_type_count_lower_flag_count_flag_count = 0;\n    my $value_type_count_upper_flag_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7p6geu7r.pl line 50, at end
    of line

    syntax error at /tmp/tmp7p6geu7r.pl line 50, near "$value_type_count_upper_flag_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7p6geu7r.pl line 85, at end of
    line

    syntax error at /tmp/tmp7p6geu7r.pl line 85, at EOF

    Execution of /tmp/tmp7p6geu7r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_case eq \"\") {\n            $key_case\
    \ = $key =~ /^[a-z]+$/ ? \"lower\" : \"upper\";\n        }\n        if ($key_case\
    \ eq \"lower\" && $key !~ /^[a-z]+$/) {\n            $result = \"\";\n       \
    \     last;\n        }\n        if ($key_case eq \"upper\" && $key !~ /^[A-Z]+$/)\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_case = \"\";\n    my $val_case = \"\";\n    my $key_case_prev = \"\";\n\
    \    my $val_case_prev = \"\";\n    my $key_case_curr = \"\";\n    my $val_case_curr\
    \ = \"\";\n    my $key_case_next = \"\";\n    my $val_case_next = \"\";\n    my\
    \ $key_case_prev_prev = \"\";\n    my $val_case_prev_prev = \"\";\n    my $key_case_next_next\
    \ = \"\";\n    my $val_case_next_next = \"\";\n    my $key_case_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev = \"\";\n    my $key_case_next_next_next\
    \ = \"\";\n    my $val_case_next_next_next = \"\";\n    my $key_case_prev_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev_prev = \"\";\n    my $key_case_next_next_next_next\
    \ = \"\";\n    my $val_case_next_next_next_next = \"\";\n    my $key_case_prev_prev_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev_prev_prev = \"\";\n    my $key_case_next_next_next_next_next\
    \ = \"\";\n    my $val_case_next_next_next_next_next = \"\";\n    my $key_case_prev_prev_prev_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev_prev_prev_prev = \"\";\n    my $key_case_next_next_next_next_next_next\
    \ = \"\";\n    my $val_case_next_next_next_next_next_next = \"\";\n    my $key_case_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpc_pju32j.pl line 50, at end
    of line

    syntax error at /tmp/tmpc_pju32j.pl line 50, near "$val_case_prev_prev_prev_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpc_pju32j.pl line 85, at end of
    line

    syntax error at /tmp/tmpc_pju32j.pl line 85, at EOF

    Execution of /tmp/tmpc_pju32j.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n   \
    \ my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    foreach $key (keys %$dict) {\n        $val = $dict->{$key};\n        if ($key\
    \ =~ /[a-z]/) {\n            $i = 1;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $j = 1;\n        }\n        if ($key =~ /[0-9]/) {\n        \
    \    $k = 1;\n        }\n        if ($key =~ /[\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\\
    -\\+\\=\\\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Search pattern not terminated at /tmp/tmplj2jitgb.pl line 76.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lc_key;\n    my $uc_key;\n    my $lc_val;\n    my $uc_val;\n    my $lc_dict;\n\
    \    my $uc_dict;\n    my $lc_dict_keys;\n    my $uc_dict_keys;\n    my $lc_dict_vals;\n\
    \    my $uc_dict_vals;\n    my $lc_dict_key_vals;\n    my $uc_dict_key_vals;\n\
    \    my $lc_dict_val_keys;\n    my $uc_dict_val_keys;\n    my $lc_dict_key_val_keys;\n\
    \    my $uc_dict_key_val_keys;\n    my $lc_dict_val_key_vals;\n    my $uc_dict_val_key_vals;\n\
    \    my $lc_dict_key_val_key_vals;\n    my $uc_dict_key_val_key_vals;\n    my\
    \ $lc_dict_val_key_val_keys;\n    my $uc_dict_val_key_val_keys;\n    my $lc_dict_key_val_key_val_keys;\n\
    \    my $uc_dict_key_val_key_val_keys;\n    my $lc_dict_val_key_val_key_vals;\n\
    \    my $uc_dict_val_key_val_key_vals;\n    my $lc_dict_key_val_key_val_key_vals;\n\
    \    my $uc_dict_key_val_key_val_key_vals;\n    my $lc_dict_val_key_val_key_val_keys;\n\
    \    my $uc_dict_val_key_val_key_val_keys;\n    my $lc_dict_key_val_key_val_key_val_keys;\n\
    \    my $uc_dict_key_val_key_val_key_val_keys;\n    my $lc_dict_val_key_val_key_val_key_vals;\n\
    \    my $uc_dict_val_key_val_key_val_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpynhn1b2q.pl line 54, at end
    of line

    syntax error at /tmp/tmpynhn1b2q.pl line 54, near "$uc_dict_val_key_val_key_val_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpynhn1b2q.pl line 89, at end of
    line

    syntax error at /tmp/tmpynhn1b2q.pl line 89, at EOF

    Execution of /tmp/tmpynhn1b2q.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i = 0;\n    while (($key, $value) = each %$dict) {\n \
    \       if ($i == 0) {\n            if ($key =~ /^[a-z]+$/) {\n              \
    \  $case = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n          \
    \      $case = \"upper\";\n            } else {\n                $result = '';\n\
    \                last;\n            }\n        } else {\n            if ($case\
    \ eq \"lower\" && $key !~ /^[a-z]+$/) {\n                $result = '';\n     \
    \           last;\n            } elsif ($case eq \"upper\" && $key !~ /^[A-Z]+$/)\
    \ {\n                $result = '';\n                last;\n            }\n   \
    \     }\n        $i++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $value;\n   \
    \ my $is_upper = 0;\n    my $is_lower = 0;\n    while(($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n \
    \       if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n\
    \    if ($is_upper && $is_lower) {\n        $ret = '';\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_is_upper\
    \ = 0;\n    my $value_case_prev_is_upper = 0;\n    my $key_case_prev_is_lower\
    \ = 0;\n    my $value_case_prev_is_lower = 0;\n    my $key_case_prev_is_mixed\
    \ = 0;\n    my $value_case_prev_is_mixed = 0;\n    my $key_case_prev_is_all_upper\
    \ = 0;\n    my $value_case_prev_is_all_upper = 0;\n    my $key_case_prev_is_all_lower\
    \ = 0;\n    my $value_case_prev_is_all_lower = 0;\n    my $key_case_prev_is_all_mixed\
    \ = 0;\n    my $value_case_prev_is_all_mixed = 0;\n    my $key_case_prev_is_all_upper_or_lower\
    \ = 0;\n    my $value_case_prev_is_all_upper_or_lower = 0;\n    my $key_case_prev_is_all_upper_or_mixed\
    \ = 0;\n    my $value_case_prev_is_all_upper_or_mixed = 0;\n    my $key_case_prev_is_all_lower_or_mixed\
    \ = 0;\n    my $value_case_prev_is_all_lower_or_mixed = 0;\n    my $key_case_prev_is_all_upper_or_lower_or_mixed\
    \ = 0;\n    my $value_case_prev_is_all_upper_or_lower_or_mixed = 0;\n    my $key_case_prev_is_all_upper_or_lower_or_mixed_or_empty\
    \ = 0\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpc8wzj_aa.pl line 47, at end
    of line

    syntax error at /tmp/tmpc8wzj_aa.pl line 47, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpc8wzj_aa.pl line 82, at end of
    line

    syntax error at /tmp/tmpc8wzj_aa.pl line 82, at EOF

    Execution of /tmp/tmpc8wzj_aa.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\
    \ elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n\
    \            $ret = '';\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $ret = '';\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $result =\
    \ '';\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $result =\
    \ '';\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower_case = 1;\n    my $upper_case = 1;\n \
    \   foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n        \
    \    $lower_case = 0;\n        }\n        if ($key =~ /[a-z]/) {\n           \
    \ $upper_case = 0;\n        }\n    }\n    return $lower_case || $upper_case;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $first_key;\n    foreach\
    \ my $key (keys %$dict) {\n        if (!defined $first_key) {\n            $first_key\
    \ = $key;\n        }\n        if ($key ne uc($key) && $key ne lc($key)) {\n  \
    \          $result = '';\n            last;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\
    \ else {\n            $result = '';\n            last;\n        }\n    }\n   \
    \ if ($is_lower && $is_upper) {\n        $result = '';\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    my $first_key_case = $first_key =~ /[a-z]/ ? 'lower' : 'upper';\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[a-z]/ && $first_key_case eq 'upper')\
    \ {\n            $result = '';\n            last;\n        }\n        if ($key\
    \ =~ /[A-Z]/ && $first_key_case eq 'lower') {\n            $result = '';\n   \
    \         last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $is_upper = 1;\n    my $is_lower\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n     \
    \       $is_upper = 0;\n        }\n    }\n    if ($is_upper == 0 && $is_lower\
    \ == 0) {\n        $ret = '';\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    if (scalar(keys %$dict) == 0) {\n        return '';\n    }\n    foreach $key\
    \ (keys %$dict) {\n        $value = $dict->{$key};\n        if ($key =~ /[a-z]/)\
    \ {\n            $i = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n        \
    \    $j = 1;\n        }\n        if ($key =~ /[0-9]/) {\n            $k = 1;\n\
    \        }\n        if ($key =~ /[\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Search pattern not terminated at /tmp/tmptajcengq.pl line 79.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 0
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n \
    \       } else {\n            return '';\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        return '';\n    } elsif ($is_lower) {\n        return\
    \ 1;\n    } elsif ($is_upper) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $upper = 0;\n    my $lower = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $upper\
    \ = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $lower = 1;\n \
    \       }\n    }\n    if ($upper && $lower) {\n        return '';\n    }\n   \
    \ return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\
    \ else {\n            $result = '';\n            last;\n        }\n    }\n   \
    \ if ($is_lower && $is_upper) {\n        $result = '';\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $value;\n   \
    \ my $key_type;\n    my $key_type_lower = 0;\n    my $key_type_upper = 0;\n  \
    \  while (($key, $value) = each %$dict) {\n        if ($key_type_lower == 0 &&\
    \ $key_type_upper == 0) {\n            if ($key =~ /^[a-z]+$/) {\n           \
    \     $key_type_lower = 1;\n            } elsif ($key =~ /^[A-Z]+$/) {\n     \
    \           $key_type_upper = 1;\n            } else {\n                $ret =\
    \ '';\n                last;\n            }\n        } elsif ($key_type_lower\
    \ == 1) {\n            if ($key !~ /^[a-z]+$/) {\n                $ret = '';\n\
    \                last;\n            }\n        } elsif ($key_type_upper == 1)\
    \ {\n            if ($key !~ /^[A-Z]+$/) {\n                $ret = '';\n     \
    \           last;\n            }\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    if (scalar(keys %$dict) ==\
    \ 0) {\n        return '';\n    }\n    while (($key, $value) = each %$dict) {\n\
    \        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n     \
    \   if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n    }\n   \
    \ if ($is_lower && $is_upper) {\n        $result = '';\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case;\n    if (scalar(keys %$dict) == 0) {\n        return '';\n    }\n   \
    \ while (($key, $val) = each %$dict) {\n        if ($case eq '') {\n         \
    \   if ($key =~ /^[a-z]+$/) {\n                $case = 'lower';\n            }\
    \ elsif ($key =~ /^[A-Z]+$/) {\n                $case = 'upper';\n           \
    \ } else {\n                return '';\n            }\n        } else {\n    \
    \        if ($case eq 'lower' && $key =~ /^[A-Z]+$/) {\n                return\
    \ '';\n            } elsif ($case eq 'upper' && $key =~ /^[a-z]+$/) {\n      \
    \          return '';\n            }\n        }\n    }\n    return $ret;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_first;\n    my $value_case_first;\n    my $key_case_last;\n\
    \    my $value_case_last;\n    my $key_case_first_seen = 0;\n    my $value_case_first_seen\
    \ = 0;\n    my $key_case_last_seen = 0;\n    my $value_case_last_seen = 0;\n \
    \   my $key_case_prev_seen = 0;\n    my $value_case_prev_seen = 0;\n    my $key_case_prev_seen\
    \ = 0;\n    my $value_case_prev_seen = 0;\n    my $key_case_prev_seen = 0;\n \
    \   my $value_case_prev_seen = 0;\n    my $key_case_prev_seen = 0;\n    my $value_case_prev_seen\
    \ = 0;\n    my $key_case_prev_seen = 0;\n    my $value_case_prev_seen = 0;\n \
    \   my $key_case_prev_seen = 0;\n    my $value_case_prev_seen = 0;\n    my $key_case_prev_seen\
    \ = 0;\n    my $value_case_prev_seen = 0;\n    my $key_case_prev_seen = 0;\n \
    \   my $value_case_prev_seen = 0;\n    my $key_case_prev_seen = 0;\n    my $value_case_prev_seen\
    \ = 0;\n    my $key_case_prev_seen = 0;\n    my $value_case_prev_seen = 0;\n \
    \   my $key_case_prev_seen = 0;\n    my $value_case_prev_seen = 0;\n    my $key_case_prev_seen\
    \ = 0;\n    my $value_case_prev_seen = 0;\n    my $key_case_prev_seen = 0;\n \
    \   my $value_case_prev_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmppxklznr4.pl line 58, at end
    of line

    syntax error at /tmp/tmppxklznr4.pl line 58, near "$value_case_prev_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmppxklznr4.pl line 93, at end of
    line

    syntax error at /tmp/tmppxklznr4.pl line 93, at EOF

    Execution of /tmp/tmppxklznr4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    while (($key, $value) = each %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $i = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n            $j\
    \ = 1;\n        }\n        if ($key =~ /[0-9]/) {\n            $k = 1;\n     \
    \   }\n        if ($key =~ /[\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\-\\=\\{\\}\\\
    [\\]\\;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Search pattern not terminated at /tmp/tmphd49bvp1.pl line 75.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    if ($first_key =~ /[A-Z]/) {\n        foreach my $key (keys %$dict) {\n \
    \           if ($key !~ /[A-Z]/) {\n                $ret = '';\n             \
    \   last;\n            }\n        }\n    } else {\n        foreach my $key (keys\
    \ %$dict) {\n            if ($key !~ /[a-z]/) {\n                $ret = '';\n\
    \                last;\n            }\n        }\n    }\n    return $ret;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            $result =\
    \ '';\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_type;\n    my $val_type;\n    my $key_type_prev;\n    my $val_type_prev;\n\
    \    my $key_type_curr;\n    my $val_type_curr;\n    my $key_type_next;\n    my\
    \ $val_type_next;\n    my $key_type_next_next;\n    my $val_type_next_next;\n\
    \    my $key_type_prev_prev;\n    my $val_type_prev_prev;\n    my $key_type_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev;\n   \
    \ my $val_type_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmphnqt8gyk.pl line 84, at
    end of line

    syntax error at /tmp/tmphnqt8gyk.pl line 84, at EOF

    Execution of /tmp/tmphnqt8gyk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    if (scalar(keys %$dict) ==\
    \ 0) {\n        return '';\n    }\n    while (($key, $value) = each %$dict) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n  \
    \      if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        $result = '';\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n\
    \    }\n    if ($is_upper && $is_lower) {\n        $result = '';\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $upper++;\n        }\n      \
    \  if ($key =~ /[a-z]/) {\n            $lower++;\n        }\n    }\n    if ($upper\
    \ > 0 && $lower > 0) {\n        $result = '';\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } elsif ($key_type eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($key_type eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    foreach $key\
    \ (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            if ($key =~ /[a-z]/)\
    \ {\n                $result = '';\n                last;\n            }\n   \
    \     }\n        else {\n            if ($key =~ /[A-Z]/) {\n                $result\
    \ = '';\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078326
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type;\n    my $value_type;\n    my $key_type_prev;\n    my $value_type_prev;\n\
    \    my $key_type_curr;\n    my $value_type_curr;\n    my $key_type_next;\n  \
    \  my $value_type_next;\n    my $key_type_next_next;\n    my $value_type_next_next;\n\
    \    my $key_type_next_next_next;\n    my $value_type_next_next_next;\n    my\
    \ $key_type_next_next_next_next;\n    my $value_type_next_next_next_next;\n  \
    \  my $key_type_next_next_next_next_next;\n    my $value_type_next_next_next_next_next;\n\
    \    my $key_type_next_next_next_next_next_next;\n    my $value_type_next_next_next_next_next_next;\n\
    \    my $key_type_next_next_next_next_next_next_next;\n    my $value_type_next_next_next_next_next_next_next;\n\
    \    my $key_type_next_next_next_next_next_next_next_next;\n    my $value_type_next_next_next_next_next_next_next_next;\n\
    \    my $key_type_next_next_next_next_next_next_next_next_next;\n    my $value_type_next_next_next_next_next_next_next_next_next;\n\
    \    my $key_type_next_next_next_next_next_next_next_next_next_next;\n    my $value_type_next_next_next_next_next_next_next_next_next_next;\n\
    \    my $key_type_next_next_next_next_next_next_next_next_next_next_next;\n  \
    \  my $value_type_next_next_next_next_next_next_next_next_\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpgdwojeid.pl line 48, at end
    of line

    syntax error at /tmp/tmpgdwojeid.pl line 48, near "$value_type_next_next_next_next_next_next_next_next_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpgdwojeid.pl line 83, at end of
    line

    syntax error at /tmp/tmpgdwojeid.pl line 83, at EOF

    Execution of /tmp/tmpgdwojeid.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case;\n    my $i = 0;\n    while (($key, $val) = each %$dict) {\n        if\
    \ ($i == 0) {\n            $case = ($key =~ /^[a-z]+$/) ? \"lower\" : \"upper\"\
    ;\n        } else {\n            if ($case eq \"lower\" && $key !~ /^[a-z]+$/)\
    \ {\n                $ret = \"\";\n                last;\n            } elsif\
    \ ($case eq \"upper\" && $key !~ /^[A-Z]+$/) {\n                $ret = \"\";\n\
    \                last;\n            }\n        }\n        $i++;\n    }\n    return\
    \ $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    my $first_key_case = $first_key =~ /^[a-z]+$/ ? 'lower' : 'upper';\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $ret\
    \ = '' if $first_key_case eq 'upper';\n        } else {\n            $ret = ''\
    \ if $first_key_case eq 'lower';\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lc_key;\n    my $uc_key;\n    my $lc_val;\n    my $uc_val;\n    my $lc_dict;\n\
    \    my $uc_dict;\n    my $lc_dict_count;\n    my $uc_dict_count;\n    my $lc_dict_count_total;\n\
    \    my $uc_dict_count_total;\n    my $lc_dict_count_total_expected;\n    my $uc_dict_count_total_expected;\n\
    \    my $lc_dict_count_expected;\n    my $uc_dict_count_expected;\n    my $lc_dict_count_total_actual;\n\
    \    my $uc_dict_count_total_actual;\n    my $lc_dict_count_actual;\n    my $uc_dict_count_actual;\n\
    \    my $lc_dict_count_total_diff;\n    my $uc_dict_count_total_diff;\n    my\
    \ $lc_dict_count_diff;\n    my $uc_dict_count_diff;\n    my $lc_dict_count_total_diff_percent;\n\
    \    my $uc_dict_count_total_diff_percent;\n    my $lc_dict_count_diff_percent;\n\
    \    my $uc_dict_count_diff_percent;\n    my $lc_dict_count_total_diff_percent_expected;\n\
    \    my $uc_dict_count_total_diff_percent_expected;\n    my $lc_dict_count_diff_percent_expected;\n\
    \    my $uc_dict_count_diff_percent_expected;\n    my $lc_dict_count_total_diff_percent_actual;\n\
    \    my $uc_dict_count_total_diff_percent_actual;\n    my $lc_dict_count_diff_percent_actual;\n\
    \    my $uc_dict_count_diff_percent_actual;\n    my $lc_dict_count_total_diff_percent_diff;\n\
    \    my $uc_dict_count_total_diff_percent_diff;\n    my $lc_dict_count_diff_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpm6tigek0.pl line 57, at end
    of line

    syntax error at /tmp/tmpm6tigek0.pl line 57, near "$lc_dict_count_diff_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpm6tigek0.pl line 92, at end of
    line

    syntax error at /tmp/tmpm6tigek0.pl line 92, at EOF

    Execution of /tmp/tmpm6tigek0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 0
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my(@keys) = keys %$dict;\n    return '' if @keys\
    \ == 0;\n    my($key) = $keys[0];\n    my($is_lower) = $key =~ /^[a-z]+$/;\n \
    \   my($is_upper) = $key =~ /^[A-Z]+$/;\n    return '' if !$is_lower && !$is_upper;\n\
    \    foreach $key (@keys) {\n        return '' if $is_lower && $key !~ /^[a-z]+$/;\n\
    \        return '' if $is_upper && $key !~ /^[A-Z]+$/;\n    }\n    return 1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $first_key;\n    my $first_value;\n    my $first_case;\n\
    \    my $key_count = 0;\n    my $value_count = 0;\n    while (($key, $value) =\
    \ each %$dict) {\n        if ($key_count == 0) {\n            $first_key = $key;\n\
    \            $first_value = $value;\n            $first_case = ($key =~ /[a-z]/)\
    \ ? \"lower\" : \"upper\";\n        } else {\n            $case = ($key =~ /[a-z]/)\
    \ ? \"lower\" : \"upper\";\n            if ($case ne $first_case) {\n        \
    \        $result = '';\n                last;\n            }\n        }\n    \
    \    $key_count++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n        \
    \    $is_upper = 1;\n        } else {\n            $ret = '';\n            last;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        $ret = '';\n   \
    \ }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $flag = 1;\n    my $key;\n    my $value;\n  \
    \  my $key_type;\n    my $value_type;\n    my $key_type_prev;\n    my $value_type_prev;\n\
    \    my $key_type_prev_prev;\n    my $value_type_prev_prev;\n    my $key_type_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev;\n \
    \   my $value_type_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpo4l2yal1.pl line 46,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpo4l2yal1.pl line 46, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpo4l2yal1.pl line 81, at end of line\nsyntax\
    \ error at /tmp/tmpo4l2yal1.pl line 81, at EOF\nExecution of /tmp/tmpo4l2yal1.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    while (($key, $value) = each %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $i++;\n        }\n        if ($key =~ /[A-Z]/) {\n            $j++;\n\
    \        }\n        if ($key =~ /[0-9]/) {\n            $k++;\n        }\n   \
    \     if ($key =~ /[a]/) {\n            $l++;\n        }\n        if ($key =~\
    \ /[b]/) {\n            $m++;\n        }\n        if ($key =\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpslrj7lpi.pl line 82, at end
    of line

    syntax error at /tmp/tmpslrj7lpi.pl line 82, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpslrj7lpi.pl line 117, at end
    of line

    syntax error at /tmp/tmpslrj7lpi.pl line 117, at EOF

    Execution of /tmp/tmpslrj7lpi.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $key_case_prev;\n    my $value_case;\n    my $value_case_prev;\n\
    \    my $key_count = 0;\n    my $value_count = 0;\n    my $key_count_prev = 0;\n\
    \    my $value_count_prev = 0;\n    my $key_count_upper = 0;\n    my $key_count_lower\
    \ = 0;\n    my $value_count_upper = 0;\n    my $value_count_lower = 0;\n    my\
    \ $key_count_upper_prev = 0;\n    my $key_count_lower_prev = 0;\n    my $value_count_upper_prev\
    \ = 0;\n    my $value_count_lower_prev = 0;\n    my $key_count_upper_prev = 0;\n\
    \    my $key_count_lower_prev = 0;\n    my $value_count_upper_prev = 0;\n    my\
    \ $value_count_lower_prev = 0;\n    my $key_count_upper_prev = 0;\n    my $key_count_lower_prev\
    \ = 0;\n    my $value_count_upper_prev = 0;\n    my $value_count_lower_prev =\
    \ 0;\n    my $key_count_upper_prev = 0;\n    my $key_count_lower_prev = 0;\n \
    \   my $value_count_upper_prev = 0;\n    my $value_count_lower_prev = 0;\n   \
    \ my $key_count_upper_prev = 0;\n    my $key_count_lower_prev = 0;\n    my $value_count_upper_prev\
    \ = 0;\n    my $value_count_lower_prev = 0;\n    my $key_count_upper_prev = 0;\n\
    \    my $key_count_lower_prev = 0;\n    my $value_count_upper_prev = 0;\n    my\
    \ $value_count_lower_prev = 0;\n    my $key_count_upper_prev = 0;\n    my $key_count_lower_prev\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmph0k5odyi.pl line 93, at
    end of line

    syntax error at /tmp/tmph0k5odyi.pl line 93, at EOF

    Execution of /tmp/tmph0k5odyi.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n \
    \       elsif ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n   \
    \     else {\n            $result = '';\n            last;\n        }\n    }\n\
    \    if ($upper && $lower) {\n        $result = '';\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    my $first_key_case = $first_key =~ /[a-z]/ ? 'lower' : 'upper';\n    foreach\
    \ my $key (keys %$dict) {\n        my $key_case = $key =~ /[a-z]/ ? 'lower' :\
    \ 'upper';\n        if ($key_case ne $first_key_case) {\n            $result =\
    \ '';\n            last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpoypt5rer.pl line 57, at end
    of line

    syntax error at /tmp/tmpoypt5rer.pl line 57, near "$key_case_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpoypt5rer.pl line 92, at end of
    line

    syntax error at /tmp/tmpoypt5rer.pl line 92, at EOF

    Execution of /tmp/tmpoypt5rer.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    foreach $key (keys %$dict) {\n        $value = $dict->{$key};\n        $case\
    \ = $key;\n        if ($case =~ /[a-z]/) {\n            $i = 1;\n        }\n \
    \       if ($case =~ /[A-Z]/) {\n            $j = 1;\n        }\n        if ($case\
    \ =~ /[0-9]/) {\n            $k = 1;\n        }\n        if ($case =~ /[`~!@#$%^&*()_+-={}|[\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Search pattern not terminated at /tmp/tmp2xjeukpt.pl line 77.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_case;\n    my $val_case;\n    my $key_case_prev;\n    my $val_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $val_case_prev_set = 0;\n    my $key_case_prev_val;\n\
    \    my $val_case_prev_val;\n    my $key_case_prev_val_set = 0;\n    my $val_case_prev_val_set\
    \ = 0;\n    my $key_case_prev_val_val;\n    my $val_case_prev_val_val;\n    my\
    \ $key_case_prev_val_val_set = 0;\n    my $val_case_prev_val_val_set = 0;\n  \
    \  my $key_case_prev_val_val_val;\n    my $val_case_prev_val_val_val;\n    my\
    \ $key_case_prev_val_val_val_set = 0;\n    my $val_case_prev_val_val_val_set =\
    \ 0;\n    my $key_case_prev_val_val_val_val;\n    my $val_case_prev_val_val_val_val;\n\
    \    my $key_case_prev_val_val_val_val_set = 0;\n    my $val_case_prev_val_val_val_val_set\
    \ = 0;\n    my $key_case_prev_val_val_val_val_val;\n    my $val_case_prev_val_val_val_val_val;\n\
    \    my $key_case_prev_val_val_val_val_val_set = 0;\n    my $val_case_prev_val_val_val_val_val_set\
    \ = 0;\n    my $key_case_prev_val_val_val_val_val_val;\n    my $val_case_prev_val_val_val_val_val_val;\n\
    \    my $key_case_prev_val_val_val_val_val_val_set =\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1lwmx5bv.pl line 49, at end
    of line

    syntax error at /tmp/tmp1lwmx5bv.pl line 49, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1lwmx5bv.pl line 84, at end of
    line

    syntax error at /tmp/tmp1lwmx5bv.pl line 84, at EOF

    Execution of /tmp/tmp1lwmx5bv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $first_key;\n    my $first_value;\n\
    \    my $first_key_case;\n    my $first_value_case;\n    my $key_count = 0;\n\
    \    my $value_count = 0;\n    while (($key, $value) = each %$dict) {\n      \
    \  $key_count++;\n        $value_count++;\n        if ($key_count == 1) {\n  \
    \          $first_key = $key;\n            $first_value = $value;\n          \
    \  $first_key_case = ($key =~ /^[a-z]+$/) ? 'lower' : 'upper';\n            $first_value_case\
    \ = ($value =~ /^[a-z]+$/) ? 'lower' : 'upper';\n        } else {\n          \
    \  $key_case = ($key =~ /^[a-z]+$/) ? 'lower' : 'upper';\n            $value_case\
    \ = ($value =~ /^[a-z]+$/) ? 'lower' : 'upper';\n            if ($key_case ne\
    \ $first_key_case) {\n                $result = '';\n                last;\n \
    \           }\n            if ($value_case ne $first_value_case) {\n         \
    \       $result = '';\n                last;\n            }\n        }\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lower_case = 0;\n    my $upper_case = 0;\n    my $first_key = 1;\n  \
    \  while (($key, $value) = each %$dict) {\n        if ($first_key) {\n       \
    \     if ($key =~ /^[a-z]+$/) {\n                $lower_case = 1;\n          \
    \  } elsif ($key =~ /^[A-Z]+$/) {\n                $upper_case = 1;\n        \
    \    } else {\n                $result = '';\n                last;\n        \
    \    }\n            $first_key = 0;\n        } else {\n            if ($lower_case)\
    \ {\n                if ($key !~ /^[a-z]+$/) {\n                    $result =\
    \ '';\n                    last;\n                }\n            } elsif ($upper_case)\
    \ {\n                if ($key !~ /^[A-Z]+$/) {\n                    $result =\
    \ '';\n                    last;\n                }\n            }\n        }\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case = 0;\n    my $result = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case == 0) {\n            if ($key =~\
    \ /^[a-z]+$/) {\n                $case = 1;\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $case = 2;\n            } else {\n                $result\
    \ = '';\n                last;\n            }\n        } elsif ($case == 1) {\n\
    \            if ($key =~ /^[A-Z]+$/) {\n                $result = '';\n      \
    \          last;\n            }\n        } elsif ($case == 2) {\n            if\
    \ ($key =~ /^[a-z]+$/) {\n                $result = '';\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n\
    \        }\n        else {\n            $result = '';\n            last;\n   \
    \     }\n    }\n    if ($is_lower && $is_upper) {\n        $result = '';\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $first_key = (keys %$dict)[0];\n\
    \    my $first_key_case = $first_key =~ /[a-z]/ ? \"lower\" : \"upper\";\n   \
    \ foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n          \
    \  if ($first_key_case eq \"upper\") {\n                $result = '';\n      \
    \          last;\n            }\n        }\n        else {\n            if ($first_key_case\
    \ eq \"lower\") {\n                $result = '';\n                last;\n    \
    \        }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    my $key;\n\
    \    my $value;\n    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n\
    \    my $value_case_prev;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpayva664w.pl line 92, at
    end of line

    syntax error at /tmp/tmpayva664w.pl line 92, at EOF

    Execution of /tmp/tmpayva664w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    foreach $key (keys\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            if ($key =~ /[a-z]/)\
    \ {\n                $ret = '';\n                last;\n            }\n      \
    \  }\n        else {\n            if ($key =~ /[A-Z]/) {\n                $ret\
    \ = '';\n                last;\n            }\n        }\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $result = '';\n            last;\n\
    \        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @keys = keys %$dict;\n    my $key = $keys[0];\n\
    \    my $case = $key =~ /^[a-z]+$/ ? 'lower' : 'upper';\n    foreach my $key (@keys)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            return '' if $case eq 'upper';\n\
    \        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            return '' if $case\
    \ eq 'lower';\n        }\n        else {\n            return '';\n        }\n\
    \    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case = \"\";\n    my $value_case = \"\";\n    my $first_key = 1;\n\
    \    my $first_value = 1;\n    while (($key, $value) = each %$dict) {\n      \
    \  if ($first_key) {\n            $key_case = get_case($key);\n            $first_key\
    \ = 0;\n        }\n        if ($first_value) {\n            $value_case = get_case($value);\n\
    \            $first_value = 0;\n        }\n        if ($key_case ne get_case($key)\
    \ || $value_case ne get_case($value)) {\n            $result = \"\";\n       \
    \     last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_case called at /tmp/tmpr9rukh57.pl line
    26.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach $key (keys %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n\
    \        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n\
    \        else {\n            $result = '';\n            last;\n        }\n   \
    \ }\n    if ($is_lower && $is_upper) {\n        $result = '';\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($key);\n    my($retval) = 1;\n    my($upper)\
    \ = 0;\n    my($lower) = 0;\n    foreach $key (keys %$dict) {\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $lower = 1;\n        }\n    }\n    if ($upper && $lower) {\n\
    \        $retval = '';\n    }\n    return $retval;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key_type eq \"\") {\n            if ($key =~\
    \ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n            } else\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result =\
    \ \"\";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_case = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_case = \"upper\";\n           \
    \ } else {\n                $result = \"\";\n                last;\n         \
    \   }\n        } elsif ($key_case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       } elsif ($key_case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lc = 0;\n    my $uc = 0;\n    while (($key, $val) = each %$dict) {\n      \
    \  if ($key =~ /^[a-z]+$/) {\n            $lc++;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $uc++;\n        } else {\n            $ret = '';\n          \
    \  last;\n        }\n    }\n    if ($lc && $uc) {\n        $ret = '';\n    }\n\
    \    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    while (($key, $value) = each %$dict) {\n      \
    \  if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n         \
    \       $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n \
    \               $key_type = \"upper\";\n            } else {\n               \
    \ $result = \"\";\n                last;\n            }\n        } elsif ($key_type\
    \ eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        } elsif ($key_type eq\
    \ \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $count = 0;\n    while(($key, $value) = each %$dict) {\n\
    \        if ($count == 0) {\n            $case = $key;\n        } else {\n   \
    \         if ($case ne $key) {\n                $result = '';\n              \
    \  last;\n            }\n        }\n        $count++;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $count = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($count == 0) {\n            if ($key =~ /[a-z]/) {\n            \
    \    $case = \"lower\";\n            } elsif ($key =~ /[A-Z]/) {\n           \
    \     $case = \"upper\";\n            } else {\n                $result = \"\"\
    ;\n                last;\n            }\n        } else {\n            if ($case\
    \ eq \"lower\" && $key =~ /[A-Z]/) {\n                $result = \"\";\n      \
    \          last;\n            } elsif ($case eq \"upper\" && $key =~ /[a-z]/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n        $count++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 0
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $dict_size = scalar(keys %$dict);\n    if ($dict_size ==\
    \ 0) {\n        return '';\n    }\n    while (($key, $value) = each %$dict) {\n\
    \        if ($case eq '') {\n            if ($key =~ /^[a-z]+$/) {\n         \
    \       $case = 'lower';\n            } elsif ($key =~ /^[A-Z]+$/) {\n       \
    \         $case = 'upper';\n            } else {\n                return '';\n\
    \            }\n        } elsif ($case eq 'lower') {\n            if ($key !~\
    \ /^[a-z]+$/) {\n                return '';\n            }\n        } elsif ($case\
    \ eq 'upper') {\n            if ($key !~ /^[A-Z]+$/) {\n                return\
    \ '';\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\
    \ elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n\
    \            $ret = '';\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $ret = '';\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n        \
    \    $is_upper = 1;\n        } else {\n            $result = '';\n           \
    \ last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n        $result\
    \ = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_first;\n    my $value_case_first;\n    my $key_case_first_prev;\n\
    \    my $value_case_first_prev;\n    my $key_case_first_prev_prev;\n    my $value_case_first_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev;\n    my $value_case_first_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $value_case_first_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $value_case_first_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_case_first_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_case_first_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_case_first_prev_prev_prev_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu7p9dju1.pl line 47, at end
    of line

    syntax error at /tmp/tmpu7p9dju1.pl line 47, near "$key_case_first_prev_prev_prev_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu7p9dju1.pl line 82, at end of
    line

    syntax error at /tmp/tmpu7p9dju1.pl line 82, at EOF

    Execution of /tmp/tmpu7p9dju1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n\
    \        elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n\
    \        else {\n            $ret = '';\n            last;\n        }\n    }\n\
    \    if ($is_upper && $is_lower) {\n        $ret = '';\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $key_case;\n    my $value_case;\n    my $key_case_count\
    \ = 0;\n    my $value_case_count = 0;\n    my $key_case_count_upper = 0;\n   \
    \ my $key_case_count_lower = 0;\n    my $value_case_count_upper = 0;\n    my $value_case_count_lower\
    \ = 0;\n    my $key_case_count_mixed = 0;\n    my $value_case_count_mixed = 0;\n\
    \    my $key_case_count_mixed_upper = 0;\n    my $key_case_count_mixed_lower =\
    \ 0;\n    my $value_case_count_mixed_upper = 0;\n    my $value_case_count_mixed_lower\
    \ = 0;\n    my $key_case_count_mixed_upper_lower = 0;\n    my $value_case_count_mixed_upper_lower\
    \ = 0;\n    my $key_case_count_mixed_upper_lower_upper = 0;\n    my $key_case_count_mixed_upper_lower_lower\
    \ = 0;\n    my $value_case_count_mixed_upper_lower_upper = 0;\n    my $value_case_count_mixed_upper_lower_lower\
    \ = 0;\n    my $key_case_count_mixed_upper_lower_upper_lower = 0;\n    my $value_case_count_mixed_upper_lower_upper_lower\
    \ = 0;\n    my $key_case_count_mixed_upper_lower_upper_lower_upper = 0;\n    my\
    \ $key_case_count_mixed_upper_lower_upper_lower_lower = 0;\n    my $value_case_count_mixed_upper_lower_upper_lower_upper\
    \ = 0;\n    my $value_case_count_mixed_upper_lower_upper_lower_lower = 0;\n  \
    \  my $key_case_count_mixed_upper_lower_upper_lower_upper_lower\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpa4ox8uz9.pl line 48, at end
    of line

    syntax error at /tmp/tmpa4ox8uz9.pl line 48, near "$key_case_count_mixed_upper_lower_upper_lower_upper_lower

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpa4ox8uz9.pl line 83, at end of
    line

    syntax error at /tmp/tmpa4ox8uz9.pl line 83, at EOF

    Execution of /tmp/tmpa4ox8uz9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $ret = '';\n            last;\n\
    \        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 1;\n    my $is_upper = 1;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /[a-z]/) {\n            $is_upper = 0;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_lower = 0;\n        }\n    }\n    if ($is_empty) {\n    \
    \    $result = '';\n    }\n    elsif ($is_lower && $is_upper) {\n        $result\
    \ = '';\n    }\n    elsif ($is_lower) {\n        $result = 1;\n    }\n    elsif\
    \ ($is_upper) {\n        $result = 1;\n    }\n    else {\n        $result = '';\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case_type;\n    my $case_type_prev;\n    while (($key, $value) = each\
    \ %$dict) {\n        $case_type = is_upper_case($key);\n        if ($case_type\
    \ == 0) {\n            $case_type = is_lower_case($key);\n        }\n        if\
    \ ($case_type == 0) {\n            $result = '';\n            last;\n        }\n\
    \        if ($case_type_prev && $case_type != $case_type_prev) {\n           \
    \ $result = '';\n            last;\n        }\n        $case_type_prev = $case_type;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_upper_case called at /tmp/tmpoz39ckd0.pl
    line 23.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $value;\n   \
    \ my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_first\
    \ = 0;\n    my $value_case_prev_set_first = 0;\n    my $key_case_prev_set_second\
    \ = 0;\n    my $value_case_prev_set_second = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        $key_case = get_case($key);\n        $value_case = get_case($value);\n\
    \        if ($key_case_prev_set == 0) {\n            $key_case_prev = $key_case;\n\
    \            $key_case_prev_set = 1;\n            $key_case_prev_set_first = 1;\n\
    \        }\n        if ($value_case_prev_set == 0) {\n            $value_case_prev\
    \ = $value_case;\n            $value_case_prev_set = 1;\n            $value_case_prev_set_first\
    \ = 1;\n        }\n        if ($key_case_prev_set_first == 1 && $key_case_prev_set_second\
    \ == 0) {\n            if ($key_case_prev != $key_case) {\n                $key_case_prev_set_second\
    \ = 1;\n            }\n        }\n        if ($value_case_prev_set_first == 1\
    \ && $value_case_prev_set_second == 0) {\n            if ($value_case_prev !=\
    \ $value_case) {\n                $value_case_prev_set_second = 1;\n         \
    \   }\n        }\n        if ($key_case_prev_set_second == 1 && $key_case_prev\
    \ != $key_case) {\n            $ret = '';\n            last;\n        }\n    \
    \    if ($value_case_prev_set_second == 1 && $value_case_prev != $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpx7taea5h.pl line 58,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpx7taea5h.pl line 58, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpx7taea5h.pl line 93, at end of line\nsyntax\
    \ error at /tmp/tmpx7taea5h.pl line 93, at EOF\nExecution of /tmp/tmpx7taea5h.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    while (($key, $value) = each %$dict) {\n      \
    \  if ($key_type eq \"\") {\n            if ($key =~ /^[a-z]+$/) {\n         \
    \       $key_type = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n \
    \               $key_type = \"upper\";\n            } else {\n               \
    \ $result = \"\";\n                last;\n            }\n        } elsif ($key_type\
    \ eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        } elsif ($key_type eq\
    \ \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_case eq \"\") {\n            if ($key\
    \ =~ /[a-z]/) {\n                $key_case = \"lower\";\n            } elsif ($key\
    \ =~ /[A-Z]/) {\n                $key_case = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } else {\n            if ($key_case eq \"lower\" && $key =~ /[A-Z]/) {\n \
    \               $result = \"\";\n                last;\n            } elsif ($key_case\
    \ eq \"upper\" && $key =~ /[a-z]/) {\n                $result = \"\";\n      \
    \          last;\n            }\n        }\n    }\n    return $result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $is_upper;\n    my $is_lower;\n    my $is_mixed;\n    my\
    \ $is_empty;\n    my $is_string;\n    my $is_number;\n    my $is_symbol;\n   \
    \ my $is_other;\n    my $is_all_string;\n    my $is_all_number;\n    my $is_all_symbol;\n\
    \    my $is_all_other;\n    my $is_all_upper;\n    my $is_all_lower;\n    my $is_all_mixed;\n\
    \    my $is_all_empty;\n    my $is_all_same;\n    my $is_all_different;\n    my\
    \ $is_all_same_case;\n    my $is_all_different_case;\n    my $is_all_same_type;\n\
    \    my $is_all_different_type;\n    my $is_all_same_type_and_case;\n    my $is_all_different_type_and_case;\n\
    \    my $is_all_same_type_or_case;\n    my $is_all_different_type_or_case;\n \
    \   my $is_all_same_type_xor_case;\n    my $is_all_different_type_xor_case;\n\
    \    my $is_all_same_type_and_case_or_empty;\n    my $is_all_different_type_and_case_or_empty;\n\
    \    my $is_all_same_type_or_case_or_empty;\n    my $is_all_different_type_or_case_or_empty;\n\
    \    my $is_all_same_type_xor_case_or_empty;\n    my $is_all_different_type_xor_case_or_empty;\n\
    \    my $is_all_same_type_and_case_or_empty_or_mixed;\n    my $is_all_different_type_and_case_or_empty_or_mixed;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpybjjf85v.pl line 92, at
    end of line

    syntax error at /tmp/tmpybjjf85v.pl line 92, at EOF

    Execution of /tmp/tmpybjjf85v.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lc = 0;\n    my $uc = 0;\n    while (($key, $val) = each %$dict) {\n      \
    \  if ($key =~ /^[a-z]+$/) {\n            $lc++;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $uc++;\n        } else {\n            $ret = '';\n          \
    \  last;\n        }\n    }\n    if ($lc && $uc) {\n        $ret = '';\n    }\n\
    \    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_prev =\
    \ \"\";\n    my $value_type_prev = \"\";\n    my $key_type_curr = \"\";\n    my\
    \ $value_type_curr = \"\";\n    my $key_type_next = \"\";\n    my $value_type_next\
    \ = \"\";\n    my $key_type_next_next = \"\";\n    my $value_type_next_next =\
    \ \"\";\n    my $key_type_next_next_next = \"\";\n    my $value_type_next_next_next\
    \ = \"\";\n    my $key_type_next_next_next_next = \"\";\n    my $value_type_next_next_next_next\
    \ = \"\";\n    my $key_type_next_next_next_next_next = \"\";\n    my $value_type_next_next_next_next_next\
    \ = \"\";\n    my $key_type_next_next_next_next_next_next = \"\";\n    my $value_type_next_next_next_next_next_next\
    \ = \"\";\n    my $key_type_next_next_next_next_next_next_next = \"\";\n    my\
    \ $value_type_next_next_next_next_next_next_next = \"\";\n    my $key_type_next_next_next_next_next_next_next_next\
    \ = \"\";\n    my $value_type_next_next_next_next_next_next_next_next = \"\";\n\
    \    my $key_type_next_next_next_next_next_next_next_next_next = \"\";\n    my\
    \ $value_type_next_next_next_next_next_next_next_next_next = \"\";\n    my $key_type_next_next_next_next_next_next_next_next_next_next\
    \ = \"\";\n    my $value_type_next_next_next_next_next_next_next_next_next_next\
    \ = \"\";\n   \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6gcv3rwx.pl line 82, at
    end of line

    syntax error at /tmp/tmp6gcv3rwx.pl line 82, at EOF

    Execution of /tmp/tmp6gcv3rwx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $case;\n    my $i = 0;\n    while (($key, $val) = each %$dict) {\n        if\
    \ ($i == 0) {\n            if ($key =~ /[a-z]/) {\n                $case = 'lower';\n\
    \            } elsif ($key =~ /[A-Z]/) {\n                $case = 'upper';\n \
    \           } else {\n                $ret = '';\n                last;\n    \
    \        }\n        } else {\n            if ($case eq 'lower' && $key =~ /[A-Z]/)\
    \ {\n                $ret = '';\n                last;\n            } elsif ($case\
    \ eq 'upper' && $key =~ /[a-z]/) {\n                $ret = '';\n             \
    \   last;\n            }\n        }\n        $i++;\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $first_key;\n    my $first_value;\n    my $first_case;\n\
    \    my $first_key_case;\n    my $first_value_case;\n    my $key_case;\n    my\
    \ $value_case;\n    my $key_case_match;\n    my $value_case_match;\n    my $key_value_case_match;\n\
    \    my $key_value_case_mismatch;\n    my $key_value_case_mismatch_count;\n  \
    \  my $key_value_case_mismatch_max;\n    my $key_value_case_mismatch_max_key;\n\
    \    my $key_value_case_mismatch_max_value;\n    my $key_value_case_mismatch_max_key_case;\n\
    \    my $key_value_case_mismatch_max_value_case;\n    my $key_value_case_mismatch_max_key_value_case_match;\n\
    \    my $key_value_case_mismatch_max_key_value_case_mismatch;\n    my $key_value_case_mismatch_max_key_value_case_mismatch_count;\n\
    \    my $key_value_case_mismatch_max_key_value_case_mismatch_max;\n    my $key_value_case_mismatch_max_key_value_case_mismatch_max_key;\n\
    \    my $key_value_case_mismatch_max_key_value_case_mismatch_max_value;\n    my\
    \ $key_value_case_mismatch_max_key_value_case_mismatch_max_key_case;\n    my $key_value_case_mismatch_max_key_value_case_mismatch_max_value_case;\n\
    \    my $key_value_case_mismatch_max_key_value_case_mismatch_max_key_value_case_match;\n\
    \    my $key_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz938zhjs.pl line 48, at end
    of line

    syntax error at /tmp/tmpz938zhjs.pl line 48, near "$key_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz938zhjs.pl line 83, at end of
    line

    syntax error at /tmp/tmpz938zhjs.pl line 83, at EOF

    Execution of /tmp/tmpz938zhjs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $first_key;\n    my $first_value;\n    my $first_case;\n\
    \    my $first_key_case;\n    my $first_value_case;\n    my $key_case;\n    my\
    \ $value_case;\n    my $key_case_match;\n    my $value_case_match;\n    my $key_value_case_match;\n\
    \    my $key_value_case_mismatch;\n    my $key_value_case_mismatch_count;\n  \
    \  my $key_value_case_mismatch_max;\n    my $key_value_case_mismatch_max_key;\n\
    \    my $key_value_case_mismatch_max_value;\n    my $key_value_case_mismatch_max_key_case;\n\
    \    my $key_value_case_mismatch_max_value_case;\n    my $key_value_case_mismatch_max_key_value_case_match;\n\
    \    my $key_value_case_mismatch_max_key_value_case_mismatch;\n    my $key_value_case_mismatch_max_key_value_case_mismatch_count;\n\
    \    my $key_value_case_mismatch_max_key_value_case_mismatch_max;\n    my $key_value_case_mismatch_max_key_value_case_mismatch_max_key;\n\
    \    my $key_value_case_mismatch_max_key_value_case_mismatch_max_value;\n    my\
    \ $key_value_case_mismatch_max_key_value_case_mismatch_max_key_case;\n    my $key_value_case_mismatch_max_key_value_case_mismatch_max_value_case;\n\
    \    my $key_value_case_mismatch_max_key_value_case_mismatch_max_key_value_case_match;\n\
    \    my $key_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz938zhjs.pl line 48, at end
    of line

    syntax error at /tmp/tmpz938zhjs.pl line 48, near "$key_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz938zhjs.pl line 83, at end of
    line

    syntax error at /tmp/tmpz938zhjs.pl line 83, at EOF

    Execution of /tmp/tmpz938zhjs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $count = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($count == 0) {\n            if ($key =~ /^[a-z]+$/) {\n         \
    \       $case = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/) {\n     \
    \           $case = \"upper\";\n            } else {\n                $result\
    \ = '';\n                last;\n            }\n        } else {\n            if\
    \ ($case eq \"lower\" && $key !~ /^[a-z]+$/) {\n                $result = '';\n\
    \                last;\n            } elsif ($case eq \"upper\" && $key !~ /^[A-Z]+$/)\
    \ {\n                $result = '';\n                last;\n            }\n   \
    \     }\n        $count++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_first;\n    my $value_case_first;\n    my $key_case_last;\n\
    \    my $value_case_last;\n    my $key_count = 0;\n    my $value_count = 0;\n\
    \    my $key_count_lower = 0;\n    my $value_count_lower = 0;\n    my $key_count_upper\
    \ = 0;\n    my $value_count_upper = 0;\n    my $key_count_mixed = 0;\n    my $value_count_mixed\
    \ = 0;\n    my $key_count_other = 0;\n    my $value_count_other = 0;\n    my $key_count_prev\
    \ = 0;\n    my $value_count_prev = 0;\n    my $key_count_first = 0;\n    my $value_count_first\
    \ = 0;\n    my $key_count_last = 0;\n    my $value_count_last = 0;\n    my $key_count_lower_prev\
    \ = 0;\n    my $value_count_lower_prev = 0;\n    my $key_count_upper_prev = 0;\n\
    \    my $value_count_upper_prev = 0;\n    my $key_count_mixed_prev = 0;\n    my\
    \ $value_count_mixed_prev = 0;\n    my $key_count_other_prev = 0;\n    my $value_count_other_prev\
    \ = 0;\n    my $key_count_first_prev = 0;\n    my $value_count_first_prev = 0;\n\
    \    my $key_count_last_prev = 0;\n    my $value_count_last_prev = 0;\n    my\
    \ $key_count_lower_first = 0;\n    my $value_count_lower_first = 0;\n    my $key_count_upper_first\
    \ = 0;\n    my $value_count_upper_first = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpvctb74rm.pl line 95, at
    end of line

    syntax error at /tmp/tmpvctb74rm.pl line 95, at EOF

    Execution of /tmp/tmpvctb74rm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /[a-z]/) {\n            $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_upper = 1;\n        }\n    }\n    if ($is_empty) {\n    \
    \    $result = '';\n    } elsif ($is_lower && $is_upper) {\n        $result =\
    \ '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    if (scalar(keys %$dict) == 0) {\n        return '';\n    }\n    while (($key,\
    \ $value) = each %$dict) {\n        if ($key =~ /[a-z]/) {\n            $i = 1;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $j = 1;\n        }\n \
    \       if ($key =~ /[0-9]/) {\n            $k = 1;\n        }\n        if ($key\
    \ =~ /[\\!\\@\\#\\$\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Search pattern not terminated at /tmp/tmp73ml0nsf.pl line 78.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $count = 0;\n    my $lower_count = 0;\n    my $upper_count = 0;\n    while\
    \ (($key, $value) = each %$dict) {\n        $count++;\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $lower_count++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n   \
    \         $upper_count++;\n        } else {\n            $result = '';\n     \
    \   }\n    }\n    if ($count > 0) {\n        if ($lower_count > 0 && $upper_count\
    \ > 0) {\n            $result = '';\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n \
    \       if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n\
    \    if ($is_upper && $is_lower) {\n        $ret = '';\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $key_case;\n    my $value_case;\n    my $key_case_count\
    \ = 0;\n    my $value_case_count = 0;\n    my $key_case_upper = 0;\n    my $key_case_lower\
    \ = 0;\n    my $value_case_upper = 0;\n    my $value_case_lower = 0;\n    my $key_case_mixed\
    \ = 0;\n    my $value_case_mixed = 0;\n    my $key_case_mixed_count = 0;\n   \
    \ my $value_case_mixed_count = 0;\n    my $key_case_mixed_upper = 0;\n    my $key_case_mixed_lower\
    \ = 0;\n    my $value_case_mixed_upper = 0;\n    my $value_case_mixed_lower =\
    \ 0;\n    my $key_case_mixed_upper_count = 0;\n    my $key_case_mixed_lower_count\
    \ = 0;\n    my $value_case_mixed_upper_count = 0;\n    my $value_case_mixed_lower_count\
    \ = 0;\n    my $key_case_mixed_upper_lower = 0;\n    my $value_case_mixed_upper_lower\
    \ = 0;\n    my $key_case_mixed_upper_lower_count = 0;\n    my $key_case_mixed_upper_lower_upper\
    \ = 0;\n    my $key_case_mixed_upper_lower_lower = 0;\n    my $value_case_mixed_upper_lower_upper\
    \ = 0;\n    my $value_case_mixed_upper_lower_lower = 0;\n    my $key_case_mixed_upper_lower_upper_count\
    \ = 0;\n    my $key_case_mixed_upper_lower_lower_count = 0;\n    my $value_case_mixed_upper_lower_upper_count\
    \ = 0;\n    my $value_case_mixed_upper_lower_lower_count = 0;\n\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpltn408d9.pl line 88, at
    end of line

    syntax error at /tmp/tmpltn408d9.pl line 88, at EOF

    Execution of /tmp/tmpltn408d9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    my $key;\n    my $value;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\
    \ elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n\
    \            $ret = '';\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $ret = '';\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n\
    \    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my\
    \ $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my $b;\n\
    \    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my\
    \ $i1;\n    my $j1;\n    my $k1;\n    my $l1;\n    my $m1;\n    my $n1;\n    my\
    \ $o1;\n    my $p1;\n    my $q1;\n    my $r1;\n    my $s1;\n    my $t1;\n    my\
    \ $u1;\n    my $v1;\n    my $w1;\n    my $x1;\n    my $y1;\n    my $z1;\n    my\
    \ $a1;\n    my $b1;\n    my $c1;\n    my $d1;\n    my $e1;\n    my $f1;\n    my\
    \ $g1;\n    my $h1;\n    my $i2;\n    my $j2;\n    my $k2;\n    my $l2;\n    my\
    \ $m2;\n    my $n2;\n    my $o2;\n    my $p2;\n    my $q2;\n    my $r2;\n    my\
    \ $s2;\n    my $t2;\n    my $u2;\n    my $v2;\n    my $w2;\n    my $x2;\n    my\
    \ $y2;\n    my $z2;\n    my $a2;\n    my $b2;\n    my $c2;\n    my $d2;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpdkeeybs2.pl line 129,
    at end of line

    syntax error at /tmp/tmpdkeeybs2.pl line 129, at EOF

    Execution of /tmp/tmpdkeeybs2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_type;\n    my $val_type;\n    my $key_type_prev;\n    my $val_type_prev;\n\
    \    my $key_type_prev_prev;\n    my $val_type_prev_prev;\n    my $key_type_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev;\n   \
    \ my $val_type_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n  \
    \  my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpuk40i7j5.pl line 46,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpuk40i7j5.pl line 46, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpuk40i7j5.pl line 81, at end of line\nsyntax\
    \ error at /tmp/tmpuk40i7j5.pl line 81, at EOF\nExecution of /tmp/tmpuk40i7j5.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $case = 0;\n    my $key;\n\
    \    my $val;\n    while (($key, $val) = each %$dict) {\n        if ($case ==\
    \ 0) {\n            if ($key =~ /[A-Z]/) {\n                $case = 1;\n     \
    \       } else {\n                $case = 2;\n            }\n        }\n     \
    \   if ($case == 1) {\n            if ($key =~ /[a-z]/) {\n                $ret\
    \ = '';\n                last;\n            }\n        } else {\n            if\
    \ ($key =~ /[A-Z]/) {\n                $ret = '';\n                last;\n   \
    \         }\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lc = 0;\n    my $uc = 0;\n    my $lc_key = 0;\n    my $uc_key = 0;\n    my\
    \ $lc_val = 0;\n    my $uc_val = 0;\n    my $lc_key_val = 0;\n    my $uc_key_val\
    \ = 0;\n    my $lc_val_key = 0;\n    my $uc_val_key = 0;\n    my $lc_key_val_key\
    \ = 0;\n    my $uc_key_val_key = 0;\n    my $lc_val_key_val = 0;\n    my $uc_val_key_val\
    \ = 0;\n    my $lc_key_val_key_val = 0;\n    my $uc_key_val_key_val = 0;\n   \
    \ my $lc_key_val_val_key = 0;\n    my $uc_key_val_val_key = 0;\n    my $lc_val_key_key_val\
    \ = 0;\n    my $uc_val_key_key_val = 0;\n    my $lc_val_val_key_val = 0;\n   \
    \ my $uc_val_val_key_val = 0;\n    my $lc_val_val_val_key = 0;\n    my $uc_val_val_val_key\
    \ = 0;\n    my $lc_val_val_val_val = 0;\n    my $uc_val_val_val_val = 0;\n   \
    \ my $lc_key_val_val_val = 0;\n    my $uc_key_val_val_val = 0;\n    my $lc_key_key_val_val\
    \ = 0;\n    my $uc_key_key_val_val = 0;\n    my $lc_key_key_key_val = 0;\n   \
    \ my $uc_key_key_key_val = 0;\n    my $lc_key_key_key_key = 0;\n    my $uc_key_key_key_key\
    \ = 0;\n    my $lc_key_key_val_\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpd7g9a4bm.pl line 55, at end
    of line

    syntax error at /tmp/tmpd7g9a4bm.pl line 55, near "$lc_key_key_val_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpd7g9a4bm.pl line 90, at end of
    line

    syntax error at /tmp/tmpd7g9a4bm.pl line 90, at EOF

    Execution of /tmp/tmpd7g9a4bm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key = '';\n    my $value\
    \ = '';\n    my $key_case = '';\n    my $value_case = '';\n    my $key_case_prev\
    \ = '';\n    my $value_case_prev = '';\n    my $key_case_flag = 0;\n    my $value_case_flag\
    \ = 0;\n    my $key_case_prev_flag = 0;\n    my $value_case_prev_flag = 0;\n \
    \   my $key_case_prev_flag_set = 0;\n    my $value_case_prev_flag_set = 0;\n \
    \   my $key_case_prev_flag_set_first = 0;\n    my $value_case_prev_flag_set_first\
    \ = 0;\n    my $key_case_prev_flag_set_first_flag = 0;\n    my $value_case_prev_flag_set_first_flag\
    \ = 0;\n    my $key_case_prev_flag_set_first_flag_set = 0;\n    my $value_case_prev_flag_set_first_flag_set\
    \ = 0;\n    my $key_case_prev_flag_set_first_flag_set_first = 0;\n    my $value_case_prev_flag_set_first_flag_set_first\
    \ = 0;\n    my $key_case_prev_flag_set_first_flag_set_first_flag = 0;\n    my\
    \ $value_case_prev_flag_set_first_flag_set_first_flag = 0;\n    my $key_case_prev_flag_set_first_flag_set_first_flag_set\
    \ = 0;\n    my $value_case_prev_flag_set_first_flag_set_first_flag_set = 0;\n\
    \    my $key_case_prev_flag_set_first_flag_set_first_flag_set_first = 0;\n   \
    \ my $value_case_prev_flag_set_first_flag_set_first_flag_set_first = 0;\n    my\
    \ $key_case_prev_flag_set_first_flag_set_first_flag_\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpl73oscm2.pl line 45, at end
    of line

    syntax error at /tmp/tmpl73oscm2.pl line 45, near "$key_case_prev_flag_set_first_flag_set_first_flag_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpl73oscm2.pl line 80, at end of
    line

    syntax error at /tmp/tmpl73oscm2.pl line 80, at EOF

    Execution of /tmp/tmpl73oscm2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $key_case;\n    my $value_case;\n    my $key_count = 0;\n\
    \    my $value_count = 0;\n    my $key_case_count = 0;\n    my $value_case_count\
    \ = 0;\n    my $key_case_match = 0;\n    my $value_case_match = 0;\n    my $key_case_mismatch\
    \ = 0;\n    my $value_case_mismatch = 0;\n    my $key_case_mismatch_count = 0;\n\
    \    my $value_case_mismatch_count = 0;\n    my $key_case_mismatch_flag = 0;\n\
    \    my $value_case_mismatch_flag = 0;\n    my $key_case_mismatch_flag_count =\
    \ 0;\n    my $value_case_mismatch_flag_count = 0;\n    my $key_case_mismatch_flag_count_max\
    \ = 0;\n    my $value_case_mismatch_flag_count_max = 0;\n    my $key_case_mismatch_flag_count_min\
    \ = 0;\n    my $value_case_mismatch_flag_count_min = 0;\n    my $key_case_mismatch_flag_count_max_key\
    \ = \"\";\n    my $value_case_mismatch_flag_count_max_key = \"\";\n    my $key_case_mismatch_flag_count_min_key\
    \ = \"\";\n    my $value_case_mismatch_flag_count_min_key = \"\";\n    my $key_case_mismatch_flag_count_max_value\
    \ = \"\";\n    my $value_case_mismatch_flag_count_max_value = \"\";\n    my $key_case_mismatch_flag_count_min_value\
    \ = \"\";\n    my $value_case_mismatch_flag_count_min_value = \"\";\n    my $key_case_mismatch_flag_count_max_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvtuw423h.pl line 50, at end
    of line

    syntax error at /tmp/tmpvtuw423h.pl line 50, near "$key_case_mismatch_flag_count_max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvtuw423h.pl line 85, at end of
    line

    syntax error at /tmp/tmpvtuw423h.pl line 85, at EOF

    Execution of /tmp/tmpvtuw423h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $lower = 1;\n    my $upper = 1;\n    while (($key, $val) = each %$dict) {\n\
    \        if ($key =~ /[a-z]/) {\n            $upper = 0;\n        }\n        if\
    \ ($key =~ /[A-Z]/) {\n            $lower = 0;\n        }\n    }\n    if ($lower\
    \ == 0 && $upper == 0) {\n        $ret = '';\n    }\n    return $ret;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $upper++;\n        }\n      \
    \  if ($key =~ /[a-z]/) {\n            $lower++;\n        }\n    }\n    if ($upper\
    \ > 0 && $lower > 0) {\n        $result = '';\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            $case = $key\
    \ =~ /^[a-z]+$/ ? \"lower\" : \"upper\";\n        }\n        if ($key =~ /^[a-z]+$/\
    \ && $case ne \"lower\") {\n            $ret = \"\";\n            last;\n    \
    \    }\n        if ($key =~ /^[A-Z]+$/ && $case ne \"upper\") {\n            $ret\
    \ = \"\";\n            last;\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key_type = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\";\n           \
    \ } else {\n                $ret = \"\";\n                last;\n            }\n\
    \        } else {\n            if ($key_type eq \"lower\" && $key =~ /^[A-Z]+$/)\
    \ {\n                $ret = \"\";\n                last;\n            } elsif\
    \ ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $ret = \"\"\
    ;\n                last;\n            }\n        }\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $count = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($count == 0) {\n            if ($key =~ /[a-z]/) {\n            \
    \    $case = \"lower\";\n            } else {\n                $case = \"upper\"\
    ;\n            }\n        } else {\n            if ($case eq \"lower\" && $key\
    \ =~ /[A-Z]/) {\n                $result = \"\";\n                last;\n    \
    \        } elsif ($case eq \"upper\" && $key =~ /[a-z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n        $count++;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $upper = 0;\n    my $lower\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n\
    \            $upper = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n  \
    \          $lower = 1;\n        }\n        else {\n            $result = '';\n\
    \            last;\n        }\n    }\n    if ($upper && $lower) {\n        $result\
    \ = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $count = 0;\n    my $count_upper = 0;\n    my $count_lower\
    \ = 0;\n    while (($key, $value) = each %$dict) {\n        if ($count == 0) {\n\
    \            $case = ($key =~ /[A-Z]/) ? \"upper\" : \"lower\";\n        }\n \
    \       if ($key =~ /[A-Z]/) {\n            $count_upper++;\n        }\n     \
    \   if ($key =~ /[a-z]/) {\n            $count_lower++;\n        }\n        $count++;\n\
    \    }\n    if ($count_upper > 0 && $count_lower > 0) {\n        $result = \"\"\
    ;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;\n    while (($key,\
    \ $val) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n \
    \           $is_upper = 1;\n        }\n    }\n    if ($is_empty) {\n        $ret\
    \ = '';\n    }\n    elsif ($is_lower && $is_upper) {\n        $ret = '';\n   \
    \ }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_case = \"\";\n    my $val_case = \"\";\n    my $key_case_prev = \"\";\n\
    \    my $val_case_prev = \"\";\n    my $key_case_curr = \"\";\n    my $val_case_curr\
    \ = \"\";\n    my $key_case_next = \"\";\n    my $val_case_next = \"\";\n    my\
    \ $key_case_prev_prev = \"\";\n    my $val_case_prev_prev = \"\";\n    my $key_case_next_next\
    \ = \"\";\n    my $val_case_next_next = \"\";\n    my $key_case_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev = \"\";\n    my $key_case_next_next_next\
    \ = \"\";\n    my $val_case_next_next_next = \"\";\n    my $key_case_prev_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev_prev = \"\";\n    my $key_case_next_next_next_next\
    \ = \"\";\n    my $val_case_next_next_next_next = \"\";\n    my $key_case_prev_prev_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev_prev_prev = \"\";\n    my $key_case_next_next_next_next_next\
    \ = \"\";\n    my $val_case_next_next_next_next_next = \"\";\n    my $key_case_prev_prev_prev_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev_prev_prev_prev = \"\";\n    my $key_case_next_next_next_next_next_next\
    \ = \"\";\n    my $val_case_next_next_next_next_next_next = \"\";\n    my $key_case_prev_prev_prev_prev_prev_prev_prev\
    \ = \"\";\n    my $val_case_prev_prev_prev_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpc_pju32j.pl line 50, at end
    of line

    syntax error at /tmp/tmpc_pju32j.pl line 50, near "$val_case_prev_prev_prev_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpc_pju32j.pl line 85, at end of
    line

    syntax error at /tmp/tmpc_pju32j.pl line 85, at EOF

    Execution of /tmp/tmpc_pju32j.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $first_key = 1;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($first_key) {\n            $case = ($key =~ /^[a-z]+$/) ? 'lower'\
    \ : 'upper';\n            $first_key = 0;\n        }\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            if ($case ne 'lower') {\n                $result = '';\n    \
    \            last;\n            }\n        }\n        elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            if ($case ne 'upper') {\n                $result = '';\n    \
    \            last;\n            }\n        }\n        else {\n            $result\
    \ = '';\n            last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return '';\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        return '';\n    }\n    else {\n  \
    \      return 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 0
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif ($key =~\
    \ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else {\n     \
    \       $result = '';\n            last;\n        }\n    }\n    if ($is_empty)\
    \ {\n        $result = '';\n    }\n    elsif ($is_lower && $is_upper) {\n    \
    \    $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case = \"\";\n    my $result = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } elsif ($case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n    \
    \            $result = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case == 0) {\n            if ($key =~\
    \ /^[a-z]+$/) {\n                $case = 1;\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $case = 2;\n            } else {\n                $result\
    \ = '';\n                last;\n            }\n        } elsif ($case == 1) {\n\
    \            if ($key =~ /^[A-Z]+$/) {\n                $result = '';\n      \
    \          last;\n            }\n        } elsif ($case == 2) {\n            if\
    \ ($key =~ /^[a-z]+$/) {\n                $result = '';\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    my $key;\n\
    \    foreach $key (keys %$dict) {\n        if ($case eq \"\") {\n            if\
    \ ($key =~ /[A-Z]/) {\n                $case = \"upper\";\n            } else\
    \ {\n                $case = \"lower\";\n            }\n        }\n        if\
    \ ($case eq \"upper\" && $key =~ /[a-z]/) {\n            $result = \"\";\n   \
    \         last;\n        }\n        if ($case eq \"lower\" && $key =~ /[A-Z]/)\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $flag = 1;\n    my $key;\n    my $value;\n  \
    \  my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_prev = \"\
    \";\n    my $value_type_prev = \"\";\n    my $key_type_flag = 0;\n    my $value_type_flag\
    \ = 0;\n    while (($key, $value) = each %$dict) {\n        $key_type = ref($key);\n\
    \        $value_type = ref($value);\n        if ($key_type_flag == 0) {\n    \
    \        $key_type_prev = $key_type;\n            $key_type_flag = 1;\n      \
    \  }\n        if ($value_type_flag == 0) {\n            $value_type_prev = $value_type;\n\
    \            $value_type_flag = 1;\n        }\n        if ($key_type ne $key_type_prev)\
    \ {\n            $flag = 0;\n            last;\n        }\n        if ($value_type\
    \ ne $value_type_prev) {\n            $flag = 0;\n            last;\n        }\n\
    \        if ($key_type eq \"\") {\n            if ($key =~ /[A-Z]/) {\n      \
    \          $flag = 0;\n                last;\n            }\n        }\n     \
    \   if ($key_type eq \"\") {\n            if ($key =~ /[a-z]/) {\n           \
    \     $flag = 0;\n                last;\n            }\n        }\n    }\n   \
    \ if ($flag == 1) {\n        return 1;\n    }\n    else {\n        return \"\"\
    ;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078327
- exit_code: 0
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $first_key;\n    my $first_value;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    my $is_empty = 1;\n    while (($key, $value) = each %$dict) {\n  \
    \      $is_empty = 0;\n        if ($first_key eq \"\") {\n            $first_key\
    \ = $key;\n            $first_value = $value;\n        }\n        if ($key =~\
    \ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } elsif ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        } else {\n            $result = \"\"\
    ;\n            last;\n        }\n    }\n    if ($is_empty) {\n        $result\
    \ = \"\";\n    } elsif ($is_upper && $is_lower) {\n        $result = \"\";\n \
    \   }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n\
    \    }\n    if ($is_upper && $is_lower) {\n        $result = '';\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n    \
    \    }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n\
    \    }\n    if ($is_upper && $is_lower) {\n        $result = '';\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @keys = keys %$dict;\n    my $flag = 1;\n   \
    \ my $case = \"\";\n    if (@keys) {\n        $case = $keys[0] =~ /[a-z]/ ? \"\
    lower\" : \"upper\";\n        foreach my $key (@keys) {\n            if ($key\
    \ =~ /[a-z]/ && $case eq \"upper\") {\n                $flag = 0;\n          \
    \      last;\n            }\n            if ($key =~ /[A-Z]/ && $case eq \"lower\"\
    ) {\n                $flag = 0;\n                last;\n            }\n      \
    \  }\n    }\n    return $flag;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $is_upper = 1;\n    my $is_lower = 1;\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n \
    \       if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n    }\n\
    \    if ($is_upper == 0 && $is_lower == 0) {\n        $ret = '';\n    }\n    return\
    \ $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    if (!$all_lower && !$all_upper)\
    \ {\n        $ret = '';\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed\
    \ = 0;\n    my $is_empty = 1;\n    my $is_string = 0;\n    my $is_number = 0;\n\
    \    my $is_other = 0;\n    my $is_all_string = 1;\n    my $is_all_number = 1;\n\
    \    my $is_all_other = 1;\n    my $is_all_upper = 1;\n    my $is_all_lower =\
    \ 1;\n    my $is_all_mixed = 1;\n    my $is_all_empty = 1;\n    while (($key,\
    \ $value) = each %$dict) {\n        $is_empty = 0;\n        if (ref($key) eq \"\
    \") {\n            if ($key =~ /^[a-z]+$/) {\n                $is_lower = 1;\n\
    \                $is_all_upper = 0;\n                $is_all_mixed = 0;\n    \
    \        }\n            elsif ($key =~ /^[A-Z]+$/) {\n                $is_upper\
    \ = 1;\n                $is_all_lower = 0;\n                $is_all_mixed = 0;\n\
    \            }\n            else {\n                $is_mixed = 1;\n         \
    \       $is_all_lower = 0;\n                $is_all_upper = 0;\n            }\n\
    \            $is_string = 1;\n            $is_all_number = 0;\n            $is_all_other\
    \ = 0;\n        }\n        elsif (ref($key) eq \"ARRAY\") {\n            $is_other\
    \ = 1;\n            $is_all_string = 0;\n            $is_all_number = 0;\n   \
    \     }\n        elsif (ref($key) eq \"HASH\") {\n            $is_other = 1;\n\
    \            $is_all_string = 0;\n            $is_all_number = 0;\n        }\n\
    \        else {\n            $is_number = 1;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpe_kubbd4.pl line 104,
    at end of line

    syntax error at /tmp/tmpe_kubbd4.pl line 104, at EOF

    Execution of /tmp/tmpe_kubbd4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    while (($key, $value) = each\
    \ %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\
    \ else {\n            $result = '';\n            last;\n        }\n    }\n   \
    \ if ($is_lower && $is_upper) {\n        $result = '';\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } else {\n            if ($case eq \"lower\" && $key =~ /^[A-Z]+$/) {\n  \
    \              $result = \"\";\n                last;\n            } elsif ($case\
    \ eq \"upper\" && $key =~ /^[a-z]+$/) {\n                $result = \"\";\n   \
    \             last;\n            }\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $count = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($count == 0) {\n            if ($key =~ /^[a-z]+$/) {\n         \
    \       $case = 'lower';\n            } elsif ($key =~ /^[A-Z]+$/) {\n       \
    \         $case = 'upper';\n            } else {\n                $result = '';\n\
    \                last;\n            }\n        } else {\n            if ($case\
    \ eq 'lower' && $key !~ /^[a-z]+$/) {\n                $result = '';\n       \
    \         last;\n            } elsif ($case eq 'upper' && $key !~ /^[A-Z]+$/)\
    \ {\n                $result = '';\n                last;\n            }\n   \
    \     }\n        $count++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n        \
    \    $is_upper = 1;\n        } else {\n            $result = '';\n           \
    \ last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n        $result\
    \ = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $value;\n   \
    \ my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\
    \ elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } else {\n\
    \            $ret = '';\n            last;\n        }\n    }\n    if ($is_upper\
    \ && $is_lower) {\n        $ret = '';\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 0
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        elsif ($key =~\
    \ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        else {\n     \
    \       $result = '';\n            last;\n        }\n    }\n    if ($is_empty)\
    \ {\n        $result = '';\n    }\n    elsif ($is_upper && $is_lower) {\n    \
    \    $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpoypt5rer.pl line 57, at end
    of line

    syntax error at /tmp/tmpoypt5rer.pl line 57, near "$key_case_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpoypt5rer.pl line 92, at end of
    line

    syntax error at /tmp/tmpoypt5rer.pl line 92, at EOF

    Execution of /tmp/tmpoypt5rer.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $first_key = undef;\n    foreach\
    \ my $key (keys %$dict) {\n        if (defined $first_key) {\n            if ($first_key\
    \ =~ /^[a-z]+$/) {\n                if ($key !~ /^[a-z]+$/) {\n              \
    \      $ret = '';\n                    last;\n                }\n            }\n\
    \            elsif ($first_key =~ /^[A-Z]+$/) {\n                if ($key !~ /^[A-Z]+$/)\
    \ {\n                    $ret = '';\n                    last;\n             \
    \   }\n            }\n            else {\n                $ret = '';\n       \
    \         last;\n            }\n        }\n        else {\n            $first_key\
    \ = $key;\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $value;\n   \
    \ my $case;\n    my $prev_case;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($key =~ /[A-Z]/) {\n            $case = 'upper';\n        } elsif\
    \ ($key =~ /[a-z]/) {\n            $case = 'lower';\n        } else {\n      \
    \      $ret = '';\n            last;\n        }\n        if (defined $prev_case\
    \ && $case ne $prev_case) {\n            $ret = '';\n            last;\n     \
    \   }\n        $prev_case = $case;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_lower = 1;\n        }\n    }\n    if ($is_empty) {\n    \
    \    $result = '';\n    }\n    elsif ($is_upper && $is_lower) {\n        $result\
    \ = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    foreach $key\
    \ (keys %$dict) {\n        if (ref($key) eq \"\") {\n            if ($key =~ /[A-Z]/)\
    \ {\n                if ($key =~ /[a-z]/) {\n                    $result = \"\"\
    ;\n                    last;\n                }\n            }\n            else\
    \ {\n                if ($key =~ /[A-Z]/) {\n                    $result = \"\"\
    ;\n                    last;\n                }\n            }\n        }\n  \
    \      else {\n            $result = \"\";\n            last;\n        }\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078327
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my\
    \ $key_case;\n    my $val_case;\n    my $key_case_prev;\n    my $val_case_prev;\n\
    \    my $key_case_curr;\n    my $val_case_curr;\n    my $key_case_next;\n    my\
    \ $val_case_next;\n    my $key_case_next_next;\n    my $val_case_next_next;\n\
    \    my $key_case_next_next_next;\n    my $val_case_next_next_next;\n    my $key_case_next_next_next_next;\n\
    \    my $val_case_next_next_next_next;\n    my $key_case_next_next_next_next_next;\n\
    \    my $val_case_next_next_next_next_next;\n    my $key_case_next_next_next_next_next_next;\n\
    \    my $val_case_next_next_next_next_next_next;\n    my $key_case_next_next_next_next_next_next_next;\n\
    \    my $val_case_next_next_next_next_next_next_next;\n    my $key_case_next_next_next_next_next_next_next_next;\n\
    \    my $val_case_next_next_next_next_next_next_next_next;\n    my $key_case_next_next_next_next_next_next_next_next_next;\n\
    \    my $val_case_next_next_next_next_next_next_next_next_next;\n    my $key_case_next_next_next_next_next_next_next_next_next_next;\n\
    \    my $val_case_next_next_next_next_next_next_next_next_next_next;\n    my $key_case_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    my $val_case_next_next_next_next_next_next_next_next_\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpqly9_jxj.pl line 48, at end
    of line

    syntax error at /tmp/tmpqly9_jxj.pl line 48, near "$val_case_next_next_next_next_next_next_next_next_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpqly9_jxj.pl line 83, at end of
    line

    syntax error at /tmp/tmpqly9_jxj.pl line 83, at EOF

    Execution of /tmp/tmpqly9_jxj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n     \
    \       $is_upper = 0;\n        }\n    }\n    if ($is_lower == 0 && $is_upper\
    \ == 0) {\n        $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        $is_lower = 0 if $key !~ /^[a-z]+$/;\n    \
    \    $is_upper = 0 if $key !~ /^[A-Z]+$/;\n    }\n    return $is_lower || $is_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078327
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lower_case = 0;\n    my $upper_case = 0;\n    while (($key, $value) =\
    \ each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case =\
    \ 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case\
    \ = 1;\n        }\n        else {\n            $result = '';\n            last;\n\
    \        }\n    }\n    if ($lower_case && $upper_case) {\n        $result = '';\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078326
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n    my $key_case;\n\
    \    foreach $key (keys %$dict) {\n        if ($key_case eq \"\") {\n        \
    \    $key_case = ($key =~ /^[a-z]+$/) ? \"lower\" : \"upper\";\n        }\n  \
    \      if ($key_case eq \"lower\" && $key !~ /^[a-z]+$/) {\n            $ret =\
    \ \"\";\n            last;\n        }\n        if ($key_case eq \"upper\" && $key\
    \ !~ /^[A-Z]+$/) {\n            $ret = \"\";\n            last;\n        }\n \
    \   }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078327
