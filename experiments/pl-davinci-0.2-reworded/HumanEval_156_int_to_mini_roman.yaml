name: HumanEval_156_int_to_mini_roman
language: pl
prompt: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n#\
  \ >>> int_to_mini_roman(19)\n# \"xix\"\n# >>> int_to_mini_roman(152)\n# \"clii\"\
  \n# >>> int_to_mini_roman(426)\n# \"cdxxvi\"\nsub int_to_mini_roman {\n    my($number)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n\
  \        if(eq_deeply($candidate->(19),\"xix\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"\
  ccli\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"\
  cdxxvi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(500),\"d\")) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\
  iv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"\
  xliii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"\
  xc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"\
  xciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"\
  dxxxii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(900),\"cm\")) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"\
  m\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = '';\n    my $i = 0;\n    while ($number > 0) {\n \
    \       my $digit = $number % 10;\n        $result = $mini_roman_digits[$i][$digit]\
    \ . $result;\n        $number = int($number / 10);\n        $i++;\n    }\n   \
    \ return $result;\n}", "    my $result = \"\";\n    my $remainder = $number;\n\
    \    my $digit = 0;\n    my $roman_digit = \"\";\n    while ($remainder > 0) {\n\
    \        $digit = $remainder % 10;\n        $remainder = int($remainder / 10);\n\
    \        if ($digit == 1) {\n            $roman_digit = \"i\";\n        } elsif\
    \ ($digit == 2) {\n            $roman_digit = \"ii\";\n        } elsif ($digit\
    \ == 3) {\n            $roman_digit = \"iii\";\n        } elsif ($digit == 4)\
    \ {\n            $roman_digit = \"iv\";\n        } elsif ($digit == 5) {\n   \
    \         $roman_digit = \"v\";\n        } elsif ($digit == 6) {\n           \
    \ $roman_digit = \"vi\";\n        } elsif ($digit == 7) {\n            $roman_digit\
    \ = \"vii\";\n        } elsif ($digit == 8) {\n            $roman_digit = \"viii\"\
    ;\n        } elsif ($digit == 9) {\n            $roman_digit = \"ix\";\n     \
    \   } elsif ($digit == 0) {\n            $roman_digit = \"\";\n        }\n   \
    \     $result = $roman_digit . $result;\n    }\n    return $result;\n}", "   \
    \ my $result = \"\";\n    my $n = $number;\n    my $i = 0;\n    while ($n > 0)\
    \ {\n        my $digit = $n % 10;\n        $n = int($n / 10);\n        my $ones\
    \ = $digit % 5;\n        my $fives = int($digit / 5);\n        if ($fives == 1)\
    \ {\n            $result = \"v\" . $result;\n        }\n        if ($ones == 4)\
    \ {\n            $result = \"iv\" . $result;\n        } else {\n            $result\
    \ = (\"i\" x $ones) . $result;\n        }\n        if ($i == 0) {\n          \
    \  $result =~ tr/ivx/IVX/;\n        } elsif ($i == 1) {\n            $result =~\
    \ tr/ivx/XLC/;\n        } elsif ($i == 2) {\n            $result =~ tr/ivx/CDM/;\n\
    \        }\n        $i++;\n    }\n    return lc($result);\n}", "    my $result\
    \ = \"\";\n    my $i = 0;\n    while ($number > 0) {\n        my $digit = $number\
    \ % 10;\n        $result = $mini_roman_digits[$i][$digit] . $result;\n       \
    \ $number = int($number / 10);\n        $i++;\n    }\n    return $result;\n}",
  "    my $result = \"\";\n    my $remainder = $number;\n    my @numerals = qw(m d\
    \ c l x v i);\n    my @values = (1000, 500, 100, 50, 10, 5, 1);\n    my $i = 0;\n\
    \    while ($remainder > 0) {\n        my $div = int($remainder / $values[$i]);\n\
    \        if ($div > 0) {\n            $result .= $numerals[$i] x $div;\n     \
    \       $remainder -= $values[$i] * $div;\n        }\n        $i++;\n    }\n \
    \   $result =~ s/dcccc/cm/g;\n    $result =~ s/cccc/cd/g;\n    $result =~ s/lxxxx/xc/g;\n\
    \    $result =~ s/xxxx/xl/g;\n    $result =~ s/viiii/ix/g;\n    $result =~ s/iiii/iv/g;\n\
    \    return $result;\n}", "    my $roman = \"\";\n    my $i = 0;\n    while ($number\
    \ > 0) {\n        my $digit = $number % 10;\n        if ($digit == 9) {\n    \
    \        $roman = $MINI_ROMAN_DIGITS[$i+1] . $roman;\n            $roman = $MINI_ROMAN_DIGITS[$i]\
    \ . $roman;\n        } elsif ($digit >= 5) {\n            $roman = $MINI_ROMAN_DIGITS[$i]\
    \ x ($digit - 5) . $roman;\n            $roman = $MINI_ROMAN_DIGITS[$i+1] . $roman;\n\
    \        } elsif ($digit == 4) {\n            $roman = $MINI_ROMAN_DIGITS[$i+1]\
    \ . $roman;\n            $roman = $MINI_ROMAN_DIGITS[$i] . $roman;\n        }\
    \ else {\n            $roman = $MINI_ROMAN_DIGITS[$i] x $digit . $roman;\n   \
    \     }\n        $number = int($number / 10);\n        $i += 2;\n    }\n    return\
    \ $roman;\n}", "    my $result = \"\";\n    my $remainder = $number;\n    while\
    \ ($remainder > 0) {\n        if ($remainder >= 1000) {\n            $result .=\
    \ \"m\";\n            $remainder -= 1000;\n        } elsif ($remainder >= 900)\
    \ {\n            $result .= \"cm\";\n            $remainder -= 900;\n        }\
    \ elsif ($remainder >= 500) {\n            $result .= \"d\";\n            $remainder\
    \ -= 500;\n        } elsif ($remainder >= 400) {\n            $result .= \"cd\"\
    ;\n            $remainder -= 400;\n        } elsif ($remainder >= 100) {\n   \
    \         $result .= \"c\";\n            $remainder -= 100;\n        } elsif ($remainder\
    \ >= 90) {\n            $result .= \"xc\";\n            $remainder -= 90;\n  \
    \      } elsif ($remainder >= 50) {\n            $result .= \"l\";\n         \
    \   $remainder -= 50;\n        } elsif ($remainder >= 40) {\n            $result\
    \ .= \"xl\";\n            $remainder -= 40;\n        } elsif ($remainder >= 10)\
    \ {\n            $result .= \"x\";\n            $remainder -= 10;\n        } elsif\
    \ ($remainder >= 9) {\n            $result .= \"ix\";\n            $remainder\
    \ -= 9;\n        } elsif ($remainder >= 5) {\n            $result .= \"v\";\n\
    \            $remainder -= 5;\n        } elsif ($remainder >= 4) {\n         \
    \   $result .= \"iv\";\n            $remainder -= 4;\n        } else {\n     \
    \       $result .= \"i\";\n            $remainder -= 1;\n        }\n    }\n  \
    \  return $result;\n}", "    my $result = '';\n    my $remainder = $number;\n\
    \    my $i = 0;\n    while($remainder > 0) {\n        my $digit = $remainder %\
    \ 10;\n        $remainder = int($remainder / 10);\n        if($digit == 9) {\n\
    \            $result = $mini_roman_digits[$i + 1] . $result;\n            $result\
    \ = $mini_roman_digits[$i] . $result;\n        } elsif($digit == 4) {\n      \
    \      $result = $mini_roman_digits[$i + 1] . $result;\n            $result =\
    \ $mini_roman_digits[$i] . $result;\n        } else {\n            if($digit >=\
    \ 5) {\n                $result = $mini_roman_digits[$i + 1] . $result;\n    \
    \            $digit -= 5;\n            }\n            $result = $mini_roman_digits[$i]\
    \ x $digit . $result;\n        }\n        $i += 2;\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    my $remainder = $number;\n    my $divisor = 1000;\n\
    \    my $roman_numeral = \"m\";\n    while ($divisor > 0) {\n        my $quotient\
    \ = int($remainder / $divisor);\n        $remainder = $remainder % $divisor;\n\
    \        if ($quotient == 4) {\n            $result .= $roman_numeral . ($roman_numeral\
    \ eq \"i\" ? \"v\" : \"x\");\n        } elsif ($quotient == 9) {\n           \
    \ $result .= $roman_numeral . ($roman_numeral eq \"i\" ? \"x\" : \"c\");\n   \
    \     } else {\n            $result .= $roman_numeral x $quotient;\n        }\n\
    \        $divisor /= 10;\n        $roman_numeral = $divisor == 1 ? \"i\" : $divisor\
    \ == 10 ? \"x\" : \"c\";\n    }\n    return $result;\n}", "    my $result = \"\
    \";\n    my $i = 0;\n    while ($number > 0) {\n        my $digit = $number %\
    \ 10;\n        my $roman = $mini_roman_digits[$i]->[$digit];\n        $result\
    \ = $roman . $result;\n        $number = int($number / 10);\n        $i++;\n \
    \   }\n    return $result;\n}", "    my $result = '';\n    my $remainder = $number;\n\
    \    my @numbers = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n \
    \   my @letters = ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v',\
    \ 'iv', 'i');\n    for (my $i = 0; $i < scalar(@numbers); $i++) {\n        while\
    \ ($remainder >= $numbers[$i]) {\n            $result .= $letters[$i];\n     \
    \       $remainder -= $numbers[$i];\n        }\n    }\n    return $result;\n}",
  "    my $result = \"\";\n    my $remainder = $number;\n    my $digit = 0;\n    my\
    \ $roman = \"\";\n    my $i = 0;\n    my @roman_numeral = ('m', 'cm', 'd', 'cd',\
    \ 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i');\n    my @arabic_numeral =\
    \ (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    while ($i <= $#arabic_numeral)\
    \ {\n        $digit = int($remainder / $arabic_numeral[$i]);\n        $remainder\
    \ = $remainder % $arabic_numeral[$i];\n        $roman = $roman_numeral[$i];\n\
    \        $result = $result . $roman x $digit;\n        $i++;\n    }\n    return\
    \ $result;\n}", "    my $result = '';\n    my $i = 0;\n    my $num_length = length($number);\n\
    \    my $num_array = split(//, $number);\n    my @roman_array = ('i', 'v', 'x',\
    \ 'l', 'c', 'd', 'm');\n    while ($i < $num_length) {\n        my $digit = $num_array[$i];\n\
    \        my $digit_value = $digit * (10 ** ($num_length - $i - 1));\n        my\
    \ $roman_index = 2 * ($num_length - $i - 1);\n        if ($digit_value == 9) {\n\
    \            $result .= $roman_array[$roman_index] . $roman_array[$roman_index\
    \ + 2];\n        } elsif ($digit_value == 4) {\n            $result .= $roman_array[$roman_index]\
    \ . $roman_array[$roman_index + 1];\n        } else {\n            if ($digit\
    \ >= 5) {\n                $result .= $roman_array[$roman_index + 1];\n      \
    \          $digit -= 5;\n            }\n            $result .= $roman_array[$roman_index]\
    \ x $digit;\n        }\n        $i++;\n    }\n    return $result;\n}", "    my\
    \ $result = \"\";\n    my $temp = $number;\n    while ($temp > 0) {\n        if\
    \ ($temp >= 1000) {\n            $result .= \"m\";\n            $temp -= 1000;\n\
    \        } elsif ($temp >= 900) {\n            $result .= \"cm\";\n          \
    \  $temp -= 900;\n        } elsif ($temp >= 500) {\n            $result .= \"\
    d\";\n            $temp -= 500;\n        } elsif ($temp >= 400) {\n          \
    \  $result .= \"cd\";\n            $temp -= 400;\n        } elsif ($temp >= 100)\
    \ {\n            $result .= \"c\";\n            $temp -= 100;\n        } elsif\
    \ ($temp >= 90) {\n            $result .= \"xc\";\n            $temp -= 90;\n\
    \        } elsif ($temp >= 50) {\n            $result .= \"l\";\n            $temp\
    \ -= 50;\n        } elsif ($temp >= 40) {\n            $result .= \"xl\";\n  \
    \          $temp -= 40;\n        } elsif ($temp >= 10) {\n            $result\
    \ .= \"x\";\n            $temp -= 10;\n        } elsif ($temp >= 9) {\n      \
    \      $result .= \"ix\";\n            $temp -= 9;\n        } elsif ($temp >=\
    \ 5) {\n            $result .= \"v\";\n            $temp -= 5;\n        } elsif\
    \ ($temp >= 4) {\n            $result .= \"iv\";\n            $temp -= 4;\n  \
    \      } elsif ($temp >= 1) {\n            $result .= \"i\";\n            $temp\
    \ -= 1;\n        }\n    }\n    return $result;\n}", "    my $result = '';\n  \
    \  my $remainder = $number;\n    my $i = 0;\n    while ($remainder > 0) {\n  \
    \      my $digit = $remainder % 10;\n        $remainder = int($remainder / 10);\n\
    \        my $digit_roman = $digit_to_mini_roman[$i]->[$digit];\n        $result\
    \ = $digit_roman . $result;\n        $i++;\n    }\n    return $result;\n}", " \
    \   my $result = '';\n    my $i = 0;\n    while ($number > 0) {\n        my $digit\
    \ = $number % 10;\n        $result = $mini_roman_numerals[$i][$digit] . $result;\n\
    \        $number = int($number / 10);\n        $i++;\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    my $remainder = $number;\n    my $i = 0;\n  \
    \  while ($remainder > 0) {\n        my $digit = $remainder % 10;\n        $remainder\
    \ = int($remainder / 10);\n        if ($digit == 9) {\n            $result = $mini_roman_digits[$i+1]\
    \ . $result;\n            $digit = 1;\n        }\n        elsif ($digit == 4)\
    \ {\n            $result = $mini_roman_digits[$i] . $mini_roman_digits[$i+1] .\
    \ $result;\n            $digit = 0;\n        }\n        elsif ($digit >= 5) {\n\
    \            $result = $mini_roman_digits[$i+1] . $result;\n            $digit\
    \ -= 5;\n        }\n        $result = ($mini_roman_digits[$i] x $digit) . $result;\n\
    \        $i += 2;\n    }\n    return $result;\n}", "    my $result = \"\";\n \
    \   my $remainder = $number;\n    my $numeral;\n    my $value;\n    my $i;\n \
    \   my @numerals = (\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    my @values = (1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    for($i = 0; $i < 13; $i++) {\n      \
    \  $numeral = $numerals[$i];\n        $value = $values[$i];\n        while($remainder\
    \ >= $value) {\n            $result .= $numeral;\n            $remainder -= $value;\n\
    \        }\n    }\n    return $result;\n}", "    my $result = '';\n    my @numbers\
    \ = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    my @letters =\
    \ ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i');\n \
    \   for (my $i = 0; $i < @numbers; $i++) {\n        while ($number >= $numbers[$i])\
    \ {\n            $result .= $letters[$i];\n            $number -= $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}", "    my $result = \"\";\n    my $i\
    \ = 0;\n    while ($number > 0) {\n        if ($number >= $roman_numerals[$i]->[0])\
    \ {\n            $result .= $roman_numerals[$i]->[1];\n            $number -=\
    \ $roman_numerals[$i]->[0];\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
