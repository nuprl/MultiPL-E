name: HumanEval_5_intersperse
language: pl
prompt: "# Insert a number 'delimeter' between every two consecutive elements of input\
  \ array `numbers'\n# >>> intersperse([], 4)\n# []\n# >>> intersperse([1, 2, 3],\
  \ 4)\n# [1, 4, 2, 4, 3]\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersperse;\n\
  \        if(eq_deeply($candidate->([], 7),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5,\
  \ 8, 6, 8, 3, 8, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2])) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result = ();\n    foreach my $number (@$numbers) {\n      \
    \  push @result, $number;\n        push @result, $delimeter;\n    }\n    pop @result;\n\
    \    return \\@result;\n}", "    my @result = ();\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        push @result, $numbers->[$i];\n        push @result, $delimeter\
    \ if $i < @$numbers - 1;\n    }\n    return @result;\n}", "    my @result = ();\n\
    \    foreach my $number (@$numbers) {\n        push @result, $number;\n      \
    \  push @result, $delimeter;\n    }\n    pop @result;\n    return \\@result;\n\
    }", "    my @result = ();\n    foreach my $number (@$numbers) {\n        push\
    \ @result, $number;\n        push @result, $delimeter;\n    }\n    pop @result;\n\
    \    return \\@result;\n}", "    my @result = ();\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        push @result, $numbers->[$i];\n        push @result, $delimeter\
    \ if $i < @$numbers - 1;\n    }\n    return @result;\n}", "    my @result = ();\n\
    \    foreach my $number (@$numbers) {\n        push @result, $number;\n      \
    \  push @result, $delimeter;\n    }\n    pop @result;\n    return \\@result;\n\
    }", "    my @result = ();\n    for my $i (0 .. $#{$numbers}) {\n        push @result,\
    \ $numbers->[$i];\n        push @result, $delimeter if $i < $#{$numbers};\n  \
    \  }\n    return \\@result;\n}", "    my @result = ();\n    for (my $i = 0; $i\
    \ < @$numbers; $i++) {\n        push @result, $numbers->[$i];\n        push @result,\
    \ $delimeter if $i < @$numbers - 1;\n    }\n    return @result;\n}", "    my @result\
    \ = ();\n    my $last_index = $#{$numbers};\n    for (my $i = 0; $i <= $last_index;\
    \ $i++) {\n        push @result, $numbers->[$i];\n        push @result, $delimeter\
    \ if $i < $last_index;\n    }\n    return \\@result;\n}", "    my @result = ();\n\
    \    foreach my $number (@$numbers) {\n        push @result, $number;\n      \
    \  push @result, $delimeter;\n    }\n    pop @result;\n    return \\@result;\n\
    }", "    my @result = ();\n    foreach my $number (@$numbers) {\n        push\
    \ @result, $number;\n        push @result, $delimeter;\n    }\n    pop @result;\n\
    \    return \\@result;\n}", "    my @result = ();\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        push @result, $numbers->[$i];\n        push @result, $delimeter\
    \ if $i < @$numbers - 1;\n    }\n    return @result;\n}", "    return [] if !@$numbers;\n\
    \    my @result = ($numbers->[0]);\n    for (my $i = 1; $i < @$numbers; $i++)\
    \ {\n        push @result, $delimeter, $numbers->[$i];\n    }\n    return \\@result;\n\
    }", "    my @result = ();\n    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n\
    \        push @result, $numbers->[$i];\n        push @result, $delimeter if $i\
    \ < scalar(@$numbers) - 1;\n    }\n    return \\@result;\n}", "    my @result\
    \ = ();\n    for (my $i = 0; $i < @$numbers; $i++) {\n        push @result, $numbers->[$i];\n\
    \        push @result, $delimeter if $i < @$numbers - 1;\n    }\n    return @result;\n\
    }", "    my @result = ();\n    foreach my $number (@$numbers) {\n        push\
    \ @result, $number;\n        push @result, $delimeter;\n    }\n    pop @result;\n\
    \    return \\@result;\n}", "    my @result = ();\n    foreach my $number (@$numbers)\
    \ {\n        push @result, $number;\n        push @result, $delimeter;\n    }\n\
    \    pop @result;\n    return \\@result;\n}", "    my @result = ();\n    for (my\
    \ $i = 0; $i < @$numbers; $i++) {\n        push @result, $numbers->[$i];\n   \
    \     push @result, $delimeter if $i < @$numbers - 1;\n    }\n    return @result;\n\
    }", "    my @result = ();\n    for (my $i = 0; $i < @$numbers; $i++) {\n     \
    \   push @result, $numbers->[$i];\n        push @result, $delimeter if $i < @$numbers\
    \ - 1;\n    }\n    return @result;\n}", "    my @result = ();\n    for (my $i\
    \ = 0; $i < @$numbers; $i++) {\n        push @result, $numbers->[$i];\n      \
    \  push @result, $delimeter if $i < @$numbers - 1;\n    }\n    return @result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
