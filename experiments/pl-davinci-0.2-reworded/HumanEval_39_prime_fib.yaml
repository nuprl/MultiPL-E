name: HumanEval_39_prime_fib
language: pl
prompt: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
  # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nsub prime_fib {\n    my($n)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_fib;\n\
  \        if(eq_deeply($candidate->(1),2)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(2),3)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),13))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),89))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),233))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1597))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28657))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),514229))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),433494437))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $fib = fib($n);\n    while (!is_prime($fib)) {\n        $n++;\n\
    \        $fib = fib($n);\n    }\n    return $fib;\n}", "    my $i = 1;\n    my\
    \ $fib = 0;\n    while ($i <= $n) {\n        $fib = fib($i);\n        if (is_prime($fib))\
    \ {\n            $i++;\n        }\n    }\n    return $fib;\n}", "    my $i = 0;\n\
    \    my $fib = 0;\n    while ($i < $n) {\n        $fib = next_fib($fib);\n   \
    \     $i++ if is_prime($fib);\n    }\n    return $fib;\n}", "    my $fib = fib($n);\n\
    \    return $fib if is_prime($fib);\n    return prime_fib($n+1);\n}", "    my\
    \ $i = 1;\n    my $fib = 1;\n    while ($i < $n) {\n        $fib = next_fib($fib);\n\
    \        $i++ if is_prime($fib);\n    }\n    return $fib;\n}", "    my $i = 0;\n\
    \    my $fib = 0;\n    while ($i < $n) {\n        $fib = next_fib($fib);\n   \
    \     $i++ if is_prime($fib);\n    }\n    return $fib;\n}", "    my $fib = fib($n);\n\
    \    while (!is_prime($fib)) {\n        $n++;\n        $fib = fib($n);\n    }\n\
    \    return $fib;\n}", "    my $fib = fib($n);\n    return $fib if is_prime($fib);\n\
    \    return prime_fib($n+1);\n}", "    my($i, $fib, $count);\n    $count = 0;\n\
    \    for ($i = 1; $count < $n; $i++) {\n        $fib = fib($i);\n        if (is_prime($fib))\
    \ {\n            $count++;\n        }\n    }\n    return $fib;\n}", "    my $i\
    \ = 1;\n    my $fib = 1;\n    my $prev_fib = 0;\n    while ($i < $n) {\n     \
    \   my $next_fib = $fib + $prev_fib;\n        $prev_fib = $fib;\n        $fib\
    \ = $next_fib;\n        $i++ if is_prime($fib);\n    }\n    return $fib;\n}",
  "    my $i = 0;\n    my $f = 0;\n    while ($i < $n) {\n        $f = next_prime_fib($f);\n\
    \        $i++;\n    }\n    return $f;\n}", "    my $i = 0;\n    my $fib = 0;\n\
    \    while ($i < $n) {\n        $fib = next_fib();\n        if (is_prime($fib))\
    \ {\n            $i++;\n        }\n    }\n    return $fib;\n}", "    my $fib =\
    \ fibonacci($n);\n    while (!is_prime($fib)) {\n        $n++;\n        $fib =\
    \ fibonacci($n);\n    }\n    return $fib;\n}", "    my $i = 1;\n    my $fib =\
    \ 0;\n    my $prime = 0;\n    while ($i <= $n) {\n        $fib = fib($i);\n  \
    \      if (is_prime($fib)) {\n            $prime = $fib;\n            $i++;\n\
    \        }\n    }\n    return $prime;\n}", "    my $i = 1;\n    my $fib = 1;\n\
    \    my $fib_prev = 1;\n    my $fib_prev_prev = 1;\n    while ($i < $n) {\n  \
    \      $fib_prev_prev = $fib_prev;\n        $fib_prev = $fib;\n        $fib =\
    \ $fib_prev + $fib_prev_prev;\n        if (is_prime($fib)) {\n            $i++;\n\
    \        }\n    }\n    return $fib;\n}", "    my $i = 1;\n    my $fib = 1;\n \
    \   my $prime_fib = 2;\n    while ($i < $n) {\n        $fib = fib($fib);\n   \
    \     if (is_prime($fib)) {\n            $prime_fib = $fib;\n            $i++;\n\
    \        }\n    }\n    return $prime_fib;\n}", "    my $fib = fib($n);\n    while\
    \ (!is_prime($fib)) {\n        $n++;\n        $fib = fib($n);\n    }\n    return\
    \ $fib;\n}", "    my $i = 1;\n    my $fib = 1;\n    my $fib_prev = 1;\n    while\
    \ ($i < $n) {\n        my $fib_next = $fib + $fib_prev;\n        $fib_prev = $fib;\n\
    \        $fib = $fib_next;\n        if (is_prime($fib)) {\n            $i++;\n\
    \        }\n    }\n    return $fib;\n}", "    my $i = 0;\n    my $fib = 0;\n \
    \   while ($i < $n) {\n        $fib = next_fib($fib);\n        if (is_prime($fib))\
    \ {\n            $i++;\n        }\n    }\n    return $fib;\n}", "    my $i = 1;\n\
    \    my $fib = 1;\n    while ($i < $n) {\n        $fib = next_fib($fib);\n   \
    \     $i++ if is_prime($fib);\n    }\n    return $fib;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
