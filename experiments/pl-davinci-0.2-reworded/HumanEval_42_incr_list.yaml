name: HumanEval_42_incr_list
language: pl
prompt: "# Return array with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n\
  # [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4,\
  \ 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return [map { $_ + 1 } @$l];\n}", "    my @l = @$l;\n    for (my\
    \ $i = 0; $i < @l; $i++) {\n        $l[$i]++;\n    }\n    return @l;\n}", "  \
    \  my @ret = ();\n    foreach my $e (@$l) {\n        push @ret, $e + 1;\n    }\n\
    \    return \\@ret;\n}", "    my @r;\n    for my $i (@$l) {\n        push @r,\
    \ $i + 1;\n    }\n    return \\@r;\n}", "    my @l = @$l;\n    my @r;\n    for\
    \ my $i (@l) {\n        push @r, $i + 1;\n    }\n    return \\@r;\n}", "    my\
    \ @l = @$l;\n    foreach my $i (@l) {\n        $i++;\n    }\n    return @l;\n}",
  "    my @l = @$l;\n    for (@l) {\n        $_++;\n    }\n    return \\@l;\n}", " \
    \   my @l = @$l;\n    for my $i (0..$#l) {\n        $l[$i]++;\n    }\n    return\
    \ \\@l;\n}", "    my @l = @$l;\n    for my $i (0..$#l) {\n        $l[$i]++;\n\
    \    }\n    return \\@l;\n}", "    my @ret = ();\n    for my $e (@$l) {\n    \
    \    push @ret, $e + 1;\n    }\n    return \\@ret;\n}", "    my @new_l = map {\
    \ $_ + 1 } @$l;\n    return \\@new_l;\n}", "    my $i = 0;\n    my $len = scalar(@$l);\n\
    \    my @ret;\n    while ($i < $len) {\n        $ret[$i] = $l->[$i] + 1;\n   \
    \     $i++;\n    }\n    return @ret;\n}", "    my @incr_l = map { $_ + 1 } @$l;\n\
    \    return \\@incr_l;\n}", "    my @ret = ();\n    foreach my $e (@$l) {\n  \
    \      push @ret, $e + 1;\n    }\n    return \\@ret;\n}", "    my @l = @$l;\n\
    \    my @r;\n    for my $i (@l) {\n        push @r, $i + 1;\n    }\n    return\
    \ \\@r;\n}", "    my @l = @$l;\n    for my $i (0..$#l) {\n        $l[$i]++;\n\
    \    }\n    return \\@l;\n}", "    return [ map { $_ + 1 } @$l ];\n}", "    my\
    \ @res = ();\n    foreach my $e (@$l) {\n        push @res, $e + 1;\n    }\n \
    \   return \\@res;\n}", "    my @l = @$l;\n    for (@l) {\n        $_++;\n   \
    \ }\n    return \\@l;\n}", "    my @l = @$l;\n    my @r;\n    for my $i (@l) {\n\
    \        push @r, $i + 1;\n    }\n    return \\@r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
