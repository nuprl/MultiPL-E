name: HumanEval_116_sort_array
language: pl
prompt: "# In this Kata, you have to sort an array of non-negative integers according\
  \ to\n# number of ones in their binary representation in ascending order.\n# For\
  \ similar number of ones, sort based on decimal value.\n# It must be implemented\
  \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
  \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
  # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
  \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
  \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
  \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5,\
  \ 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 44, 12, 32,\
  \ 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted = sort {\n        my $a_ones = ($a =~ tr/1//);\n   \
    \     my $b_ones = ($b =~ tr/1//);\n        if ($a_ones == $b_ones) {\n      \
    \      return $a <=> $b;\n        }\n        return $a_ones <=> $b_ones;\n   \
    \ } @$arr;\n    return \\@sorted;\n}", "    my @sorted = sort {\n        my $a_ones\
    \ = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n        if ($a_ones ==\
    \ $b_ones) {\n            return $a <=> $b;\n        }\n        return $a_ones\
    \ <=> $b_ones;\n    } @$arr;\n    return \\@sorted;\n}", "    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @$arr;\n    return \\@sorted;\n}", "    my @sorted = sort {\n    \
    \    my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n        if\
    \ ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n        return\
    \ $a_ones <=> $b_ones;\n    } @$arr;\n    return \\@sorted;\n}", "    my @sorted\
    \ = sort {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @$arr;\n    return \\@sorted;\n}",
  "    my @sorted = sort {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones\
    \ = ($b =~ tr/1//);\n        if ($a_ones == $b_ones) {\n            return $a\
    \ <=> $b;\n        }\n        return $a_ones <=> $b_ones;\n    } @$arr;\n    return\
    \ \\@sorted;\n}", "    my @sorted = sort {\n        my $a_ones = () = split(//,\
    \ sprintf(\"%b\", $a));\n        my $b_ones = () = split(//, sprintf(\"%b\", $b));\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @$arr;\n    return \\@sorted;\n\
    }", "    my @sorted = sort {\n        my $b_ones = ($b =~ tr/1//);\n        my\
    \ $a_ones = ($a =~ tr/1//);\n        if ($a_ones == $b_ones) {\n            return\
    \ $a <=> $b;\n        }\n        return $a_ones <=> $b_ones;\n    } @$arr;\n \
    \   return \\@sorted;\n}", "    my @sorted = sort {\n        my $a_ones = () =\
    \ split //, sprintf(\"%b\", $a);\n        my $b_ones = () = split //, sprintf(\"\
    %b\", $b);\n        $a_ones <=> $b_ones || $a <=> $b;\n    } @$arr;\n    return\
    \ \\@sorted;\n}", "    my @sorted = sort {\n        my $a_ones = () = split(//,\
    \ sprintf(\"%b\", $a));\n        my $b_ones = () = split(//, sprintf(\"%b\", $b));\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @$arr;\n    return \\@sorted;\n\
    }", "    my @sorted = sort {\n        my $a_ones = () = split(//, unpack(\"B*\"\
    , pack(\"N\", $a)));\n        my $b_ones = () = split(//, unpack(\"B*\", pack(\"\
    N\", $b)));\n        $a_ones <=> $b_ones || $a <=> $b\n    } @$arr;\n    return\
    \ \\@sorted;\n}", "    my @sorted = sort {\n        my $a_ones = $a =~ tr/1//;\n\
    \        my $b_ones = $b =~ tr/1//;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @$arr;\n    return \\@sorted;\n}", "    my @sorted = sort {\n        my\
    \ $x = $a;\n        my $y = $b;\n        my $x_ones = 0;\n        my $y_ones =\
    \ 0;\n        while ($x > 0) {\n            $x_ones++ if $x % 2 == 1;\n      \
    \      $x /= 2;\n        }\n        while ($y > 0) {\n            $y_ones++ if\
    \ $y % 2 == 1;\n            $y /= 2;\n        }\n        if ($x_ones == $y_ones)\
    \ {\n            return $a <=> $b;\n        }\n        return $x_ones <=> $y_ones;\n\
    \    } @$arr;\n    return \\@sorted;\n}", "    my @sorted = sort {\n        my\
    \ $x = $a;\n        my $y = $b;\n        my $x_ones = 0;\n        my $y_ones =\
    \ 0;\n        while ($x > 0) {\n            $x_ones++ if $x % 2;\n           \
    \ $x = int($x / 2);\n        }\n        while ($y > 0) {\n            $y_ones++\
    \ if $y % 2;\n            $y = int($y / 2);\n        }\n        if ($x_ones ==\
    \ $y_ones) {\n            return $a <=> $b;\n        }\n        return $x_ones\
    \ <=> $y_ones;\n    } @$arr;\n    return \\@sorted;\n}", "    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @$arr;\n    return \\@sorted;\n\
    }", "    my @sorted = sort {\n        my $a_ones = ($a =~ tr/1//);\n        my\
    \ $b_ones = ($b =~ tr/1//);\n        if ($a_ones == $b_ones) {\n            return\
    \ $a <=> $b;\n        }\n        return $a_ones <=> $b_ones;\n    } @$arr;\n \
    \   return \\@sorted;\n}", "    my @sorted = sort {\n        my $a_ones = ($a\
    \ =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n        if ($a_ones == $b_ones)\
    \ {\n            return $a <=> $b;\n        }\n        return $a_ones <=> $b_ones;\n\
    \    } @$arr;\n    return \\@sorted;\n}", "    my @sorted = sort {\n        my\
    \ $a_ones = scalar(grep { $_ eq '1' } split(//, sprintf(\"%b\", $a)));\n     \
    \   my $b_ones = scalar(grep { $_ eq '1' } split(//, sprintf(\"%b\", $b)));\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @$arr;\n    return \\@sorted;\n}",
  "    my @sorted = sort {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones\
    \ = $b =~ tr/1//;\n        if ($a_ones == $b_ones) {\n            return $a <=>\
    \ $b;\n        }\n        return $a_ones <=> $b_ones;\n    } @$arr;\n    return\
    \ \\@sorted;\n}", "    return [sort {\n        my($a_ones) = $a =~ tr/1//;\n \
    \       my($b_ones) = $b =~ tr/1//;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @$arr];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
