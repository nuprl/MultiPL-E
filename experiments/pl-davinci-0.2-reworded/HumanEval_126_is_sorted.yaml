name: HumanEval_126_is_sorted
language: pl
prompt: "# Given an array of numbers, return whether or not they are sorted\n# in\
  \ ascending order. If array has more than 1 duplicate of the same\n# number, return\
  \ . Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted([5])\n\
  # 1\n# >>> is_sorted([1, 2, 3, 4, 5])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5])\n#\
  \ \"\"\n# >>> is_sorted([1, 2, 3, 4, 5, 6])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5,\
  \ 6, 7])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n# \"\"\n# >>> is_sorted([1,\
  \ 2, 2, 3, 3, 4])\n# 1\n# >>> is_sorted([1, 2, 2, 2, 3, 4])\n# \"\"\nsub is_sorted\
  \ {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n\
  \        if(eq_deeply($candidate->([5]),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 2, 4, 5]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4, 5, 6, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 3, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my($prev) = undef;\n    my($dup) = 0;\n    foreach my $x (@$lst)\
    \ {\n        if (defined($prev)) {\n            if ($x < $prev) {\n          \
    \      return \"\";\n            }\n            if ($x == $prev) {\n         \
    \       $dup = 1;\n            }\n        }\n        $prev = $x;\n    }\n    return\
    \ $dup ? \"\" : 1;\n}", "    my $last = undef;\n    my $dup = 0;\n    for my $i\
    \ (@$lst) {\n        if (defined $last) {\n            if ($i == $last) {\n  \
    \              $dup = 1;\n            }\n            elsif ($i < $last) {\n  \
    \              return \"\" if $dup;\n                return \"\" if $i != $last\
    \ - 1;\n            }\n        }\n        $last = $i;\n    }\n    return 1;\n}",
  "    my $sorted = 1;\n    my $prev = 0;\n    foreach my $num (@$lst) {\n       \
    \ if ($num < $prev) {\n            $sorted = \"\";\n            last;\n      \
    \  }\n        $prev = $num;\n    }\n    return $sorted;\n}", "    my $prev = $lst->[0];\n\
    \    for my $i (1 .. $#$lst) {\n        if ($lst->[$i] < $prev) {\n          \
    \  return \"\";\n        }\n        $prev = $lst->[$i];\n    }\n    return 1;\n\
    }", "    my $prev = undef;\n    my $prev_count = 0;\n    for my $x (@$lst) {\n\
    \        if (defined $prev) {\n            if ($x < $prev) {\n               \
    \ return \"\";\n            }\n            if ($x == $prev) {\n              \
    \  $prev_count++;\n                if ($prev_count > 1) {\n                  \
    \  return \"\";\n                }\n            }\n        }\n        $prev =\
    \ $x;\n    }\n    return 1;\n}", "    my $prev = $lst->[0];\n    for my $i (1\
    \ .. $#$lst) {\n        if ($lst->[$i] < $prev) {\n            return \"\";\n\
    \        }\n        $prev = $lst->[$i];\n    }\n    return 1;\n}", "    my $prev\
    \ = $lst->[0];\n    for my $i (1 .. $#$lst) {\n        if ($lst->[$i] < $prev)\
    \ {\n            return \"\";\n        }\n        $prev = $lst->[$i];\n    }\n\
    \    return 1;\n}", "    my $last = $lst->[0];\n    for my $i (1 .. $#$lst) {\n\
    \        if ($lst->[$i] < $last) {\n            return \"\";\n        }\n    \
    \    $last = $lst->[$i];\n    }\n    return 1;\n}", "    my $last = undef;\n \
    \   my $count = 0;\n    for my $i (@$lst) {\n        if (defined $last) {\n  \
    \          if ($i < $last) {\n                return \"\";\n            }\n  \
    \          if ($i == $last) {\n                $count++;\n            }\n    \
    \    }\n        $last = $i;\n    }\n    return $count == 0 ? 1 : \"\";\n}", " \
    \   my $prev = shift @$lst;\n    for my $curr (@$lst) {\n        return '' if\
    \ $curr < $prev;\n        $prev = $curr;\n    }\n    return 1;\n}", "    my $i\
    \ = 0;\n    my $j = 1;\n    my $len = scalar(@$lst);\n    my $prev = $lst->[$i];\n\
    \    while ($j < $len) {\n        if ($lst->[$j] < $prev) {\n            return\
    \ \"\";\n        }\n        $prev = $lst->[$j];\n        $j++;\n    }\n    return\
    \ 1;\n}", "    my $prev = $lst->[0];\n    my $dup = 0;\n    for my $i (1..$#$lst)\
    \ {\n        if ($lst->[$i] < $prev) {\n            return \"\";\n        }\n\
    \        if ($lst->[$i] == $prev) {\n            $dup = 1;\n        }\n      \
    \  $prev = $lst->[$i];\n    }\n    return $dup ? \"\" : 1;\n}", "    my $last\
    \ = undef;\n    my $dup = 0;\n    for my $i (@$lst) {\n        if (defined $last)\
    \ {\n            if ($i < $last) {\n                return \"\";\n           \
    \ }\n            if ($i == $last) {\n                $dup = 1;\n            }\n\
    \        }\n        $last = $i;\n    }\n    return $dup ? \"\" : 1;\n}", "   \
    \ my $i = 0;\n    my $len = scalar(@$lst);\n    my $prev = $lst->[$i];\n    $i++;\n\
    \    while ($i < $len) {\n        if ($lst->[$i] < $prev) {\n            return\
    \ \"\";\n        }\n        $prev = $lst->[$i];\n        $i++;\n    }\n    return\
    \ 1;\n}", "    my $prev = $lst->[0];\n    for my $i (1 .. $#$lst) {\n        if\
    \ ($lst->[$i] < $prev) {\n            return \"\";\n        }\n        $prev =\
    \ $lst->[$i];\n    }\n    return 1;\n}", "    my $prev = undef;\n    my $dups\
    \ = 0;\n    for my $i (@$lst) {\n        if (defined $prev) {\n            if\
    \ ($i < $prev) {\n                return \"\";\n            }\n            if\
    \ ($i == $prev) {\n                $dups++;\n            }\n        }\n      \
    \  $prev = $i;\n    }\n    return $dups ? \"\" : 1;\n}", "    my $prev = shift\
    \ @$lst;\n    for my $i (@$lst) {\n        return \"\" if $i < $prev;\n      \
    \  $prev = $i;\n    }\n    return 1;\n}", "    my $last = shift @$lst;\n    for\
    \ my $x (@$lst) {\n        if ($x < $last) {\n            return \"\";\n     \
    \   }\n        $last = $x;\n    }\n    return 1;\n}", "    my $n = @$lst;\n  \
    \  my $i = 0;\n    my $prev = $lst->[0];\n    while ($i < $n) {\n        if ($lst->[$i]\
    \ < $prev) {\n            return \"\";\n        }\n        $prev = $lst->[$i];\n\
    \        $i++;\n    }\n    return 1;\n}", "    my $prev = $lst->[0];\n    for\
    \ my $i (1 .. $#$lst) {\n        if ($lst->[$i] < $prev) {\n            return\
    \ \"\";\n        }\n        $prev = $lst->[$i];\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
