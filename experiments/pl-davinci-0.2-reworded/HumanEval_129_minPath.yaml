name: HumanEval_129_minPath
language: pl
prompt: "# Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n# each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have\
  \ to find the minimum path of length k in the grid. You can start\n# from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n# in other words,\
  \ you can go to cells which share an edge with you current\n# cell.\n# Please note\
  \ that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n\
  # You CANNOT go off the grid.\n# A path A (of length k) is considered less than\
  \ a path B (of length k) if\n# after making the ordered arrays of the values on\
  \ the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A\
  \ is lexicographically less\n# than lst_B, in other words, there exist an integer\
  \ index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j <\
  \ i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n\
  # Return an ordered array of the values on the cells that the minimum path go through.\n\
  # Examples:    \n# >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n\
  # >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\nsub minPath {\n    my($grid,\
  \ $k) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n\
  \        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5,\
  \ 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6,\
  \ 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6,\
  \ 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10,\
  \ 1, 10, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3,\
  \ 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4],\
  \ [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12,\
  \ 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1,\
  \ 6, 1, 6, 1, 6, 1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1,\
  \ 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1,\
  \ 5, 1, 5, 1, 5, 1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1,\
  \ 2, 1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3,\
  \ 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n \
    \   my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n  \
    \  my $min_path_sum = $n * $n + 1;\n    my $min_path_len = $n * $n + 1;\n    my\
    \ $min_path_len_sum = $n * $n + 1;\n    my $min_path_len_sum_path = [];\n    my\
    \ $min_path_len_sum_path_sum = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum = $n * $n + 1;\n\
    \    my $min_path_len_sum_path_sum_path_sum_path_sum_path = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path =\
    \ [];\n    my $min_sum = $n * $m * $k;\n    my $min_path_sum = $min_sum;\n   \
    \ my $min_path_sum_idx = 0;\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            my $path = [];\n            my $path_sum = 0;\n\
    \            my $path_sum_idx = 0;\n            my $path_sum_idx_min = 0;\n  \
    \          my $path_sum_idx_max = 0;\n            my $path_sum_idx_min_sum = $min_sum;\n\
    \            my $path_sum_idx_max_sum = $min_sum;\n            my $path_sum_idx_min_sum_idx\
    \ = 0;\n            my $path_sum_idx_max_sum_idx = 0;\n            my $path_sum_idx_min_sum_idx_min\
    \ = 0;\n            my $path_sum_idx_max_sum_idx_max = 0;\n            my $path_sum_idx_min_sum_idx_min_sum\
    \ = $min_sum;\n            my $path_sum_idx_max_sum_idx_max_sum = $min_sum;\n\
    \            my $path_sum_idx_min_sum_idx_min_sum_idx = 0;\n            my $path_sum_idx_max_sum_idx_max_sum_idx\
    \ = 0;\n            my $path_sum_idx_min_sum_idx_min_sum_idx_min = 0;\n      \
    \      my $path_sum_idx_max_sum_idx_max_sum_idx_max = 0;\n            my $path_sum_idx_min_sum_idx_min_sum_idx_min_sum\
    \ = $min_sum;\n            my $path_sum_idx_max_sum_idx", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $visited = [];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m + 1;\n    for my\
    \ $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n\
    \            my $sum = 0;\n            $visited->[$i][$j] = 1;\n            push\
    \ @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n           \
    \ my $res = dfs($grid, $visited, $path, $sum, $i, $j, $k);\n            if ($res->[0]\
    \ < $minSum) {\n                $minSum = $res->[0];\n                $minPath\
    \ = $res->[1];\n            }\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
    \ = 0;\n        }\n    }\n    my $dfs;\n    $dfs = sub {\n        my($i, $j, $sum,\
    \ $path) = @_;\n        if ($sum > $min_sum) {\n            return;\n        }\n\
    \        if ($sum == $k) {\n            if ($sum < $min_sum) {\n             \
    \   $min_sum = $sum;\n                $min = $path;\n            }\n         \
    \   return;\n        }\n        if ($i > 0 && !$visited->[$i - 1]->[$j]) {\n \
    \           $visited->[$i - 1]->[$j] = 1;\n            $dfs->($i - 1, $j, $sum\
    \ + 1, [@$path, $grid->[$i - 1]->[$j]]);\n            $visited->[$i - 1]->[$j]\
    \ = 0;\n        }\n        if ($i < $n - 1 && !$visited->[$i + 1]->[$j]) {\n \
    \           $visited->[$i + 1]->[$j] = 1;\n            $dfs->($i + 1, $j, $sum\
    \ + 1, [@$path, $grid->[$i + 1]->[$j]]);\n            $visited->[$i + 1]->[$j]\
    \ = 0;\n        }\n        if ($j > 0 && !$visited->[$i]->[$j - 1]) {\n      \
    \      $visited->[$i]->[$j - 1] = 1;\n            $dfs->($i, $j - 1, $sum + 1,\
    \ [@$path, $grid->[$i]", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = $grid->[$i][$j];\n            my $visited = [[0] x $m] x $n;\n\
    \            $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
    \            my $res = minPathHelper($grid, $i, $j, $k - 1, $sum, $visited, $path);\n\
    \            if ($res->[0] < $min_sum) {\n                $min_sum = $res->[0];\n\
    \                $min_path = $res->[1];\n            }\n        }\n    }\n   \
    \ return $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my @path;\n    my @minPath;\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2\
    \ = $n * $n + 1;\n    my $minPathSum3 = $n * $n + 1;\n    my $minPathSum4 = $n\
    \ * $n + 1;\n    my $minPathSum5 = $n * $n + 1;\n    my $minPathSum6 = $n * $n\
    \ + 1;\n    my $minPathSum7 = $n * $n + 1;\n    my $minPathSum8 = $n * $n + 1;\n\
    \    my $minPathSum9 = $n * $n + 1;\n    my $minPathSum10 = $n * $n + 1;\n   \
    \ my $minPathSum11 = $n * $n + 1;\n    my $minPathSum12 = $n * $n + 1;\n    my\
    \ $minPathSum13 = $n * $n + 1;\n    my $minPathSum14 = $n * $n + 1;\n    my $minPathSum15\
    \ = $n * $n + 1;\n    my $minPathSum16 = $n * $n + 1;\n    my $minPathSum17 =\
    \ $n * $n + 1;\n    my $minPathSum18 = $n * $n + 1;\n    my $minPathSum19 = $n\
    \ * $n + 1;\n    my $minPathSum20 = $n * $n + 1;\n    my $minPathSum21 = $n *\
    \ $n + 1;\n    my $minPathSum22 = $n * $n + 1;\n    my $minPathSum23 = $n * $n\
    \ + 1;\n    my $minPathSum24 = $n * $n + 1;\n    my $minPathSum25 = $n * $n +\
    \ 1;\n    my $minPathSum26 = $n * $n + 1;\n    my $minPathSum27 = $n * $n + 1;\n\
    \    my $minPathSum28 = $", "    my $n = @$grid;\n    my @visited = ();\n    my\
    \ @path = ();\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my\
    \ $min_path_sum = $min_sum;\n    my $min_path_lex = $min_sum;\n    my $min_path_lex_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum = $min_sum;\n    my $min_path_lex_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum = $min_sum;\n    my\
    \ $min_path_lex_sum_sum_sum_sum_sum_sum_sum = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum = $min_sum;\n\
    \    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = $min_sum;\n  \
    \  my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = $min_sum;\n\
    \    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = $min_sum;\n\
    \    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = $min_sum;\n\
    \    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_sum = $n *\
    \ $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $sum = 0;\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum);\n            if ($sum < $min_sum) {\n            \
    \    $min_sum = $sum;\n                $min_path = $path;\n            }\n   \
    \     }\n    }\n    return $min_path;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minSum = $n * $m + 1;\n    my $minPathSum = $n\
    \ * $m + 1;\n    my $minPathSum2 = $n * $m + 1;\n    my $minPathSum3 = $n * $m\
    \ + 1;\n    my $minPathSum4 = $n * $m + 1;\n    my $minPathSum5 = $n * $m + 1;\n\
    \    my $minPathSum6 = $n * $m + 1;\n    my $minPathSum7 = $n * $m + 1;\n    my\
    \ $minPathSum8 = $n * $m + 1;\n    my $minPathSum9 = $n * $m + 1;\n    my $minPathSum10\
    \ = $n * $m + 1;\n    my $minPathSum11 = $n * $m + 1;\n    my $minPathSum12 =\
    \ $n * $m + 1;\n    my $minPathSum13 = $n * $m + 1;\n    my $minPathSum14 = $n\
    \ * $m + 1;\n    my $minPathSum15 = $n * $m + 1;\n    my $minPathSum16 = $n *\
    \ $m + 1;\n    my $minPathSum17 = $n * $m + 1;\n    my $minPathSum18 = $n * $m\
    \ + 1;\n    my $minPathSum19 = $n * $m + 1;\n    my $minPathSum20 = $n * $m +\
    \ 1;\n    my $minPathSum21 = $n * $m + 1;\n    my $minPathSum22 = $n * $m + 1;\n\
    \    my $minPathSum23 = $n * $m + 1;\n    my $minPathSum24 = $n * $m + 1;\n  \
    \  my $minPathSum25 = $n * $m + 1;\n    my $minPathSum26 = $n * $m + 1;\n    my\
    \ $minPathSum27 = $n * $m + 1;\n    my $minPath", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n * $m * $k;\n\
    \    my $min_path_sum = $min_sum;\n    my $min_path_sum_found = 0;\n    my $min_path_found\
    \ = 0;\n    my $min_path_sum_found_at = 0;\n    my $min_path_found_at = 0;\n \
    \   my $min_path_sum_found_at_i = 0;\n    my $min_path_found_at_i = 0;\n    my\
    \ $min_path_sum_found_at_j = 0;\n    my $min_path_found_at_j = 0;\n    my $min_path_sum_found_at_k\
    \ = 0;\n    my $min_path_found_at_k = 0;\n    my $min_path_sum_found_at_l = 0;\n\
    \    my $min_path_found_at_l = 0;\n    my $min_path_sum_found_at_m = 0;\n    my\
    \ $min_path_found_at_m = 0;\n    my $min_path_sum_found_at_n = 0;\n    my $min_path_found_at_n\
    \ = 0;\n    my $min_path_sum_found_at_o = 0;\n    my $min_path_found_at_o = 0;\n\
    \    my $min_path_sum_found_at_p = 0;\n    my $min_path_found_at_p = 0;\n    my\
    \ $min_path_sum_found_at_q = 0;\n    my $min_path_found_at_q = 0;\n    my $min_path_sum_found_at_r\
    \ = 0;\n    my $min_path_found_at_r = 0;\n    my $min_path_sum_found_at_s = 0;\n\
    \    my $min_path_found_at_s = 0;\n    my $min_path_sum_found_at_t =", "    my\
    \ $N = scalar(@$grid);\n    my $M = scalar(@{$grid->[0]});\n    my $minPath =\
    \ [];\n    my $minPathVal = [];\n    for my $i (0 .. $N - 1) {\n        for my\
    \ $j (0 .. $M - 1) {\n            my $currPath = [];\n            my $currPathVal\
    \ = [];\n            my $currVal = $grid->[$i][$j];\n            push @$currPath,\
    \ [$i, $j];\n            push @$currPathVal, $currVal;\n            my $currK\
    \ = 1;\n            while ($currK < $k) {\n                my $nextPath = [];\n\
    \                my $nextPathVal = [];\n                for my $p (0 .. scalar(@$currPath)\
    \ - 1) {\n                    my $currCell = $currPath->[$p];\n              \
    \      my $currCellVal = $currPathVal->[$p];\n                    my $i = $currCell->[0];\n\
    \                    my $j = $currCell->[1];\n                    if ($i > 0)\
    \ {\n                        my $nextCell = [$i - 1, $j];\n                  \
    \      my $nextCellVal = $grid->[$i - 1][$j];\n                        if ($nextCellVal\
    \ < $currCellVal) {\n                            push @$nextPath, $nextCell;\n\
    \                            push @$nextPathVal, $nextCellVal;\n             \
    \           }\n                    }\n                    if ($i < $N - 1) {\n\
    \                        my $nextCell = [$i + 1, $j];\n                      \
    \  my $nextCellVal = $grid->[$i + 1][$j];\n                        if ($nextCellVal\
    \ < $currCellVal) {\n                            push @$nextPath, $nextCell;\n\
    \                            push @$nextPathVal, $nextCellVal;\n             \
    \           }\n                    }\n                    if ($j > 0) {\n    \
    \                    my $nextCell = [$i, $j - 1];\n                        my\
    \ $nextCellVal = $grid->[$i][$j - 1];\n                        if ($next", " \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
    \ = $n * $n * $k;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            dfs($grid, $n, $m, $i, $j, $k - 1, $path, $sum, $visited, $min, $min_sum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min;\n}",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k = $n * $n\
    \ + 1;\n    my $min_path_k = [];\n    my $path = [];\n    my $path_sum = 0;\n\
    \    my $path_sum_k = 0;\n    my $path_k = [];\n    my $visited = [];\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n   \
    \         $visited->[$i][$j] = 0;\n        }\n    }\n    for (my $i = 0; $i <\
    \ $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $path = [];\n\
    \            $path_sum = 0;\n            $path_sum_k = 0;\n            $path_k\
    \ = [];\n            for (my $i = 0; $i < $n; $i++) {\n                for (my\
    \ $j = 0; $j < $m; $j++) {\n                    $visited->[$i][$j] = 0;\n    \
    \            }\n            }\n            $visited->[$i][$j] = 1;\n         \
    \   push @$path, $grid->[$i][$j];\n            $path_sum += $grid->[$i][$j];\n\
    \            $path_sum_k += $grid->[$i][$j];\n            push @$path_k, $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k, $n, $m, $visited, $path, $path_sum, $path_sum_k,\
    \ $path_k, $min_path, $min_path_sum, $min_path_sum_k, $min_path_k);\n        }\n\
    \    }\n    return $min_path_k;\n", "    my $n = scalar(@$grid);\n    my $m =\
    \ scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_sum = $n * $n +\
    \ 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n     \
    \       my $path = [];\n            my $sum = 0;\n            my $visited = {};\n\
    \            my $dfs = sub {\n                my($i, $j, $k) = @_;\n         \
    \       if ($k == 0) {\n                    if ($sum < $min_sum) {\n         \
    \               $min_sum = $sum;\n                        $min_path = [@$path];\n\
    \                    }\n                    return;\n                }\n     \
    \           for my $d ([-1, 0], [1, 0], [0, -1], [0, 1]) {\n                 \
    \   my $i1 = $i + $d->[0];\n                    my $j1 = $j + $d->[1];\n     \
    \               if ($i1 >= 0 && $i1 < $n && $j1 >= 0 && $j1 < $m && !$visited->{\"\
    $i1,$j1\"}) {\n                        $visited->{\"$i1,$j1\"} = 1;\n        \
    \                $sum += $grid->[$i1][$j1];\n                        push @$path,\
    \ $grid->[$i1][$j1];\n                        $dfs->($i1, $j1, $k - 1);\n    \
    \                    pop @$path;\n                        $sum -= $grid->[$i1][$j1];\n\
    \                        delete $visited->{\"$i1,$j1\"};\n                   \
    \ }\n                }\n            };\n            $dfs->($i, $j, $k);\n    \
    \    }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum = $n\
    \ * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n    my\
    \ $path = [];\n    my $pathSum = 0;\n    my $pathSum2 = 0;\n    my $path2 = [];\n\
    \    my $visited = {};\n    my $visited2 = {};\n    my $visited3 = {};\n    my\
    \ $visited4 = {};\n    my $visited5 = {};\n    my $visited6 = {};\n    my $visited7\
    \ = {};\n    my $visited8 = {};\n    my $visited9 = {};\n    my $visited10 = {};\n\
    \    my $visited11 = {};\n    my $visited12 = {};\n    my $visited13 = {};\n \
    \   my $visited14 = {};\n    my $visited15 = {};\n    my $visited16 = {};\n  \
    \  my $visited17 = {};\n    my $visited18 = {};\n    my $visited19 = {};\n   \
    \ my $visited20 = {};\n    my $visited21 = {};\n    my $visited22 = {};\n    my\
    \ $visited23 = {};\n    my $visited24 = {};\n    my $visited25 = {};\n    my $visited26\
    \ = {};\n    my $visited27 = {};\n    my $visited28 = {};\n    my $visited29 =\
    \ {};\n    my $visited30 = {};\n    my $visited31 = {};\n    my $visited32 = {};\n\
    \    my $visited33 = {};\n    my $visited34 = {};\n    my $visited35 = {};\n \
    \   my $visited36 = {};\n    my $visited37 = {};\n    my $visited38 = {};\n  \
    \  my $visited39 = {};\n    my $visited40 =", "    my $n = scalar(@$grid);\n \
    \   my $m = scalar(@{$grid->[0]});\n    my $visited = {};\n    my $minPath = [];\n\
    \    my $minSum = $n * $n + 1;\n    for (my $i = 0; $i < $n; $i++) {\n       \
    \ for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n            my\
    \ $sum = 0;\n            $visited->{$i}->{$j} = 1;\n            dfs($grid, $visited,\
    \ $i, $j, $k, $path, $sum);\n            $visited->{$i}->{$j} = 0;\n         \
    \   if ($sum < $minSum) {\n                $minSum = $sum;\n                $minPath\
    \ = $path;\n            }\n        }\n    }\n    return $minPath;\n}", "    my\
    \ $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
    \ = $n * $n * $n;\n    my $min_path = [];\n    my $visited = [];\n    for my $i\
    \ (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            $min_path = [];\n            $visited->[$i][$j] =\
    \ 1;\n            dfs($grid, $i, $j, $k, $visited, $min_path, $min, $min_sum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min;\n}",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min_path = [];\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            my $path = [];\n            $visited->[$i][$j]\
    \ = 1;\n            dfs($grid, $visited, $i, $j, $k, $path);\n            $visited->[$i][$j]\
    \ = 0;\n            if (@$min_path == 0 || $path < $min_path) {\n            \
    \    $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathValue = [];\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            my $path = [];\n            my $pathValue\
    \ = [];\n            for my $l (0 .. $k - 1) {\n                $path->[$l] =\
    \ [];\n                $pathValue->[$l] = [];\n                for my $i (0 ..\
    \ $n - 1) {\n                    for my $j (0 .. $m - 1) {\n                 \
    \       $path->[$l]->[$i]->[$j] = [];\n                        $pathValue->[$l]->[$i]->[$j]\
    \ = [];\n                    }\n                }\n            }\n           \
    \ $path->[0]->[$i]->[$j] = [$i, $j];\n            $pathValue->[0]->[$i]->[$j]\
    \ = $grid->[$i]->[$j];\n            for my $l (1 .. $k - 1) {\n              \
    \  for my $i (0 .. $n - 1) {\n                    for my $j (0 .. $m - 1) {\n\
    \                        my $minPathValue = undef;\n                        my\
    \ $minPath = undef;\n                        if ($i > 0) {\n                 \
    \           if (not defined($minPathValue) or $pathValue->[$l - 1]->[$i - 1]->[$j]\
    \ < $minPathValue) {\n                                $minPathValue = $pathValue->[$l\
    \ - 1]->[$i - 1]->[$j];\n                                $minPath = $path->[$l\
    \ - 1]->[$i - 1]->[$j];\n                            }\n                     \
    \   }\n                        if ($i < $n - 1) {\n                          \
    \  if (not defined($minPathValue) or $pathValue->[$l - 1]->[$i + 1]->[$j] < $minPathValue)\
    \ {\n                                $min", "    my $n = scalar(@$grid);\n   \
    \ my $m = scalar(@{$grid->[0]});\n    my @path = ();\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n + 1;\n    my $min_path_len = $n * $n + 1;\n  \
    \  my $min_path_val = $n * $n + 1;\n    my $min_path_val_idx = $n * $n + 1;\n\
    \    my $min_path_val_idx_sum = $n * $n + 1;\n    my $min_path_val_idx_len = $n\
    \ * $n + 1;\n    my $min_path_val_idx_val = $n * $n + 1;\n    my $min_path_val_idx_val_idx\
    \ = $n * $n + 1;\n    my $min_path_val_idx_val_idx_sum = $n * $n + 1;\n    my\
    \ $min_path_val_idx_val_idx_len = $n * $n + 1;\n    my $min_path_val_idx_val_idx_val\
    \ = $n * $n + 1;\n    my $min_path_val_idx_val_idx_val_idx = $n * $n + 1;\n  \
    \  my $min_path_val_idx_val_idx_val_idx_sum = $n * $n + 1;\n    my $min_path_val_idx_val_idx_val_idx_len\
    \ = $n * $n + 1;\n    my $min_path_val_idx_val_idx_val_idx_val = $n * $n + 1;\n\
    \    my $min_path_val_idx_val_idx_val_idx_val_idx = $n * $n + 1;\n    my $min_path_val_idx_val_idx_val_idx_val_idx_sum\
    \ = $n * $n + 1;\n    my $min_path", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n         \
    \   my $sum = 0;\n            my $visited = [];\n            for my $row (0 ..\
    \ $n - 1) {\n                for my $col (0 .. $m - 1) {\n                   \
    \ $visited->[$row][$col] = 0;\n                }\n            }\n            $visited->[$i][$j]\
    \ = 1;\n            dfs($grid, $i, $j, $visited, $path, $sum, $k, $min, $min_sum);\n\
    \        }\n    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $min = [map {[map {[(1) x $n] x $m} (1)\
    \ x $n] x $m} (1) x $k];\n    my $min_path = [map {[map {[(1) x $n] x $m} (1)\
    \ x $n] x $m} (1) x $k];\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            $min->[0]->[$i]->[$j] = $grid->[$i]->[$j];\n     \
    \       $min_path->[0]->[$i]->[$j] = [$grid->[$i]->[$j]];\n        }\n    }\n\
    \    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n          \
    \  for my $j (0 .. $m - 1) {\n                my $min_val = $min->[$l - 1]->[$i]->[$j];\n\
    \                my $min_path_val = $min_path->[$l - 1]->[$i]->[$j];\n       \
    \         for my $d (0 .. 3) {\n                    my $x = $i + $dx[$d];\n  \
    \                  my $y = $j + $dy[$d];\n                    if ($x >= 0 && $x\
    \ < $n && $y >= 0 && $y < $m) {\n                        my $val = $min->[$l -\
    \ 1]->[$x]->[$y];\n                        if ($val < $min_val) {\n          \
    \                  $min_val = $val;\n                            $min_path_val\
    \ = $min_path->[$l - 1]->[$x]->[$y];\n                        }\n            \
    \            elsif ($val == $min_val) {\n                            my $path_val\
    \ = $min_path->[$l - 1]->[$x]->", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n\
    \            my $path_sum = 0;\n            my $visited = [];\n            for\
    \ my $x (0 .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n         \
    \           $visited->[$x][$y] = 0;\n                }\n            }\n      \
    \      $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n  \
    \          $path_sum += $grid->[$i][$j];\n            my $res = dfs($grid, $i,\
    \ $j, $k - 1, $visited, $path, $path_sum);\n            if ($res->[0] < $min_path_sum)\
    \ {\n                $min_path = $res->[1];\n                $min_path_sum = $res->[0];\n\
    \            }\n        }\n    }\n    return $min_path;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n\
    \ * $m + 1;\n    my $min_path_sum_count = 0;\n    my $min_path_sum_index = 0;\n\
    \    my $min_path_sum_index_count = 0;\n    my $min_path_sum_index_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count = 0;\n    my $min_path_sum_index_count_count_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count_count_count = 0;\n    my\
    \ $min_path_sum_index_count_count_count_count_count_count = 0;\n    my $min_path_sum_index_count_count_count_count_count_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my $min_path_sum_index_count_count_count_count_count_count_count_",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSumGrid = [];\n  \
    \  for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n\
    \            $minPathSumGrid->[$i]->[$j] = $n * $n * $k;\n        }\n    }\n \
    \   for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n\
    \            my $path = [];\n            my $pathSum = 0;\n            my $pathSumGrid\
    \ = [];\n            for (my $i = 0; $i < $n; $i++) {\n                for (my\
    \ $j = 0; $j < $m; $j++) {\n                    $pathSumGrid->[$i]->[$j] = $n\
    \ * $n * $k;\n                }\n            }\n            my $pathSumGrid =\
    \ findPath($grid, $i, $j, $k, $path, $pathSum, $pathSumGrid);\n            if\
    \ ($pathSum < $minPathSum) {\n                $minPathSum = $pathSum;\n      \
    \          $minPathSumGrid = $pathSumGrid;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_val\
    \ = [];\n    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n       \
    \ for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j\
    \ < $m; $j++) {\n            my $path = [];\n            my $path_val = [];\n\
    \            $visited->[$i][$j] = 1;\n            push(@$path, [$i, $j]);\n  \
    \          push(@$path_val, $grid->[$i][$j]);\n            dfs($grid, $i, $j,\
    \ $k, $visited, $path, $path_val, $min_path, $min_path_val);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path_val;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min = [map { [map { [0, 0] } (0 ..\
    \ $m - 1)] } (0 .. $n - 1)];\n    my $min_path = [];\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            if ($i == 0 && $j == 0)\
    \ {\n                $min->[$i][$j] = [$grid->[$i][$j], 1];\n            } elsif\
    \ ($i == 0) {\n                $min->[$i][$j] = [$min->[$i][$j - 1]->[0] + $grid->[$i][$j],\
    \ $min->[$i][$j - 1]->[1] + 1];\n            } elsif ($j == 0) {\n           \
    \     $min->[$i][$j] = [$min->[$i - 1][$j]->[0] + $grid->[$i][$j], $min->[$i -\
    \ 1][$j]->[1] + 1];\n            } else {\n                my $min_prev = $min->[$i\
    \ - 1][$j]->[0] < $min->[$i][$j - 1]->[0] ? $min->[$i - 1][$j] : $min->[$i][$j\
    \ - 1];\n                $min->[$i][$j] = [$min_prev->[0] + $grid->[$i][$j], $min_prev->[1]\
    \ + 1];\n            }\n        }\n    }\n    my $i = $n - 1;\n    my $j = $m\
    \ - 1;\n    while ($k > 0) {\n        push @$min_path, $grid->[$i][$j];\n    \
    \    if ($i == 0) {\n            $j--;\n        } elsif ($j == 0) {\n        \
    \    $i--;\n        } else {\n            my $min_prev = $", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my @path;\n    my $min_path = [];\n    my $min_sum\
    \ = $n * $n * $k;\n    my $min_lex = $min_sum;\n    my $min_lex_path = [];\n \
    \   my $min_lex_sum = $min_sum;\n    my $min_lex_lex = $min_sum;\n    my $min_lex_lex_path\
    \ = [];\n    my $min_lex_lex_sum = $min_sum;\n    my $min_lex_lex_lex = $min_sum;\n\
    \    my $min_lex_lex_lex_path = [];\n    my $min_lex_lex_lex_sum = $min_sum;\n\
    \    my $min_lex_lex_lex_lex = $min_sum;\n    my $min_lex_lex_lex_lex_path = [];\n\
    \    my $min_lex_lex_lex_lex_sum = $min_sum;\n    my $min_lex_lex_lex_lex_lex\
    \ = $min_sum;\n    my $min_lex_lex_lex_lex_lex_path = [];\n    my $min_lex_lex_lex_lex_lex_sum\
    \ = $min_sum;\n    my $min_lex_lex_lex_lex_lex_lex = $min_sum;\n    my $min_lex_lex_lex_lex_lex_lex_path\
    \ = [];\n    my $min_lex_lex_lex_lex_lex_lex_sum = $min_sum;\n    my $min_lex_lex_lex_lex_lex_lex_lex\
    \ = $min_sum;\n    my $min_lex_lex_lex_lex_lex_lex_lex_path = [];\n    my $min_lex_lex_lex_lex_lex_lex_lex_sum\
    \ = $min_sum;\n    my $min_lex_lex_lex_lex_lex_lex_lex_lex = $min_sum;\n    my\
    \ $min_lex_lex_lex_lex_lex_lex_lex_lex_path = [];\n    my $", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_len\
    \ = $n * $n + 1;\n    my $min_path_len_sum = $n * $n + 1;\n    my $min_path_len_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum = $n * $n + 1;\n\
    \    my $min_path_len_sum_path_sum_path_sum_path_sum_path = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n   \
    \ my $min = [];\n    my $min_sum = $n * $n * $k;\n    my $visited = {};\n    my\
    \ $dfs;\n    $dfs = sub {\n        my($i, $j, $sum, $path) = @_;\n        return\
    \ if $sum > $min_sum;\n        if (@$path == $k) {\n            if ($sum < $min_sum)\
    \ {\n                $min_sum = $sum;\n                $min = $path;\n       \
    \     }\n            return;\n        }\n        for my $d ([-1, 0], [1, 0], [0,\
    \ -1], [0, 1]) {\n            my $x = $i + $d->[0];\n            my $y = $j +\
    \ $d->[1];\n            next if $x < 0 || $x >= $n || $y < 0 || $y >= $m;\n  \
    \          next if $visited->{\"$x,$y\"};\n            $visited->{\"$x,$y\"} =\
    \ 1;\n            $dfs->($x, $y, $sum + $grid->[$x][$y], [@$path, $grid->[$x][$y]]);\n\
    \            $visited->{\"$x,$y\"} = 0;\n        }\n    };\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $visited->{\"$i,$j\"} = 1;\n \
    \           $dfs->($i, $j, $grid->[$i][$j], [$grid->[$i][$j]]);\n            $visited->{\"\
    $i,$j\"} = 0;\n        }\n    }\n    return $min;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n\
    \ * $m * $k;\n    my $min_path_sum_grid = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $min_path_sum_grid->[$i]->[$j]\
    \ = $n * $m * $k;\n        }\n    }\n    my $queue = [];\n    push @$queue, [0,\
    \ 0, 0, $grid->[0]->[0]];\n    while (@$queue) {\n        my $e = shift @$queue;\n\
    \        my($i, $j, $l, $sum) = @$e;\n        if ($l == $k) {\n            if\
    \ ($sum < $min_path_sum) {\n                $min_path_sum = $sum;\n          \
    \      $min_path = [$grid->[$i]->[$j]];\n            } elsif ($sum == $min_path_sum)\
    \ {\n                push @$min_path, $grid->[$i]->[$j];\n            }\n    \
    \        next;\n        }\n        if ($sum > $min_path_sum_grid->[$i]->[$j])\
    \ {\n            next;\n        }\n        $min_path_sum_grid->[$i]->[$j] = $sum;\n\
    \        if ($i > 0) {\n            push @$queue, [$i - 1, $j, $l + 1, $sum +\
    \ $grid->[$i - 1]->[$j]];\n        }\n        if ($i < $n - 1) {\n           \
    \ push @$queue, [$i + 1, $j, $l + 1, $sum + $grid->[$i + 1]->[$j]];\n        }\n\
    \        if ($j > 0) {\n            push @$queue, [$i, $j - 1, $l + 1, $sum +\
    \ $grid->[$i]->[$", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n * $k;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n * $k;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n * $k;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n * $k;\n    my $minPath", "    my $n =\
    \ scalar(@$grid);\n    my @path;\n    my $min_path = [];\n    my $min_sum = $n\
    \ * $n * $n;\n    my $min_path_sum = $min_sum;\n    my $min_path_lex = [];\n \
    \   my $min_path_lex_sum = $min_sum;\n    my $min_path_lex_sum_sum = $min_sum;\n\
    \    my $min_path_lex_sum_sum_sum = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum = $min_sum;\n\
    \    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum =\
    \ $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_sum;\n    my $min_path_lex_sum_sum_sum_sum_sum_sum", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i]->[$j] = [];\n\
    \            for my $l (0 .. $k - 1) {\n                $dp->[$i]->[$j]->[$l]\
    \ = [];\n            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            $dp->[$i]->[$j]->[0] = [$grid->[$i]->[$j]];\n\
    \        }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n -\
    \ 1) {\n            for my $j (0 .. $m - 1) {\n                my $min = [];\n\
    \                if ($i > 0) {\n                    my $cur = $dp->[$i - 1]->[$j]->[$l\
    \ - 1];\n                    if (scalar(@$cur) > 0) {\n                      \
    \  if (scalar(@$min) == 0 || $cur->[0] < $min->[0]) {\n                      \
    \      $min = $cur;\n                        }\n                    }\n      \
    \          }\n                if ($i < $n - 1) {\n                    my $cur\
    \ = $dp->[$i + 1]->[$j]->[$l - 1];\n                    if (scalar(@$cur) > 0)\
    \ {\n                        if (scalar(@$min) == 0 || $cur->[0] < $min->[0])\
    \ {\n                            $min = $cur;\n                        }\n   \
    \                 }\n                }\n                if ($j > 0) {\n      \
    \              my $cur = $dp->[$i]->[$j - 1]->[$l - 1];\n                    if\
    \ (scalar(@$cur) > 0) {\n                        if (scalar(@", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n * $k;\n    my $minPathSum_i = 0;\n    my $minPathSum_j = 0;\n    my\
    \ $minPathSum_k = 0;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
    \ - 1) {\n            for my $k (0 .. $k - 1) {\n                my $pathSum =\
    \ $grid->[$i][$j];\n                my $pathSum_i = $i;\n                my $pathSum_j\
    \ = $j;\n                my $pathSum_k = $k;\n                my $path = [$grid->[$i][$j]];\n\
    \                while ($pathSum_k > 0) {\n                    my $minPathSum_i_new\
    \ = $pathSum_i;\n                    my $minPathSum_j_new = $pathSum_j;\n    \
    \                my $minPathSum_k_new = $pathSum_k;\n                    my $minPathSum_new\
    \ = $pathSum;\n                    my $minPath_new = $path;\n                \
    \    if ($pathSum_i > 0 && $grid->[$pathSum_i - 1][$pathSum_j] < $grid->[$minPathSum_i_new][$minPathSum_j_new])\
    \ {\n                        $minPathSum_i_new = $pathSum_i - 1;\n           \
    \             $minPathSum_j_new = $pathSum_j;\n                        $minPathSum_k_new\
    \ = $pathSum_k - 1;\n                        $minPathSum_new = $pathSum + $grid->[$pathSum_i\
    \ - 1][$pathSum_j];\n                        $minPath_new = [@$path, $grid->[$pathSum_i\
    \ - 1][$pathSum_j]];\n                    }\n                    if ($pathSum_i\
    \ < $n - 1 && $grid->[$pathSum_i + 1][$pathSum_j] < $grid->[$", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_len\
    \ = $n * $n + 1;\n    my $min_path_len_sum = $n * $n + 1;\n    my $min_path_len_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum = $n * $n + 1;\n\
    \    my $min_path_len_sum_path_sum_path_sum_path_sum_path = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          my $path = [];\n            my $path_sum = 0;\n            my $path_len\
    \ = 0;\n            my $path_len_sum = 0;\n            my $path_len_sum_path =\
    \ [];\n            my $path_len_sum_path_sum = 0;\n            my $path_len_sum_path_sum_path\
    \ = [];\n            my $path_len_sum_path_sum_path_sum = 0;\n            my $path_len_sum_path_sum_path_sum_path\
    \ = [];\n            my $path_len_", "    my $n = scalar(@$grid);\n    my @path\
    \ = ();\n    my $min_path = undef;\n    my $min_path_sum = undef;\n    my $min_path_val\
    \ = undef;\n    my $min_path_val_sum = undef;\n    my $min_path_val_sum_idx =\
    \ undef;\n    my $min_path_val_sum_idx_val = undef;\n    my $min_path_val_sum_idx_val_sum\
    \ = undef;\n    my $min_path_val_sum_idx_val_sum_idx = undef;\n    my $min_path_val_sum_idx_val_sum_idx_val\
    \ = undef;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum = undef;\n    my\
    \ $min_path_val_sum_idx_val_sum_idx_val_sum_idx = undef;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val\
    \ = undef;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val_sum = undef;\n\
    \    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val_sum_idx = undef;\n \
    \   my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val_sum_idx_val = undef;\n\
    \    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val_sum_idx_val_sum = undef;\n\
    \    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val_sum_idx_val_sum_idx\
    \ = undef;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx", "    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n\
    \    my $minPathSum = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n   \
    \ my $minPathSum3 = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPath3 =\
    \ [];\n    my $minPath4 = [];\n    my $minPath5 = [];\n    my $minPath6 = [];\n\
    \    my $minPath7 = [];\n    my $minPath8 = [];\n    my $minPath9 = [];\n    my\
    \ $minPath10 = [];\n    my $minPath11 = [];\n    my $minPath12 = [];\n    my $minPath13\
    \ = [];\n    my $minPath14 = [];\n    my $minPath15 = [];\n    my $minPath16 =\
    \ [];\n    my $minPath17 = [];\n    my $minPath18 = [];\n    my $minPath19 = [];\n\
    \    my $minPath20 = [];\n    my $minPath21 = [];\n    my $minPath22 = [];\n \
    \   my $minPath23 = [];\n    my $minPath24 = [];\n    my $minPath25 = [];\n  \
    \  my $minPath26 = [];\n    my $minPath27 = [];\n    my $minPath28 = [];\n   \
    \ my $minPath29 = [];\n    my $minPath30 = [];\n    my $minPath31 = [];\n    my\
    \ $minPath32 = [];\n    my $minPath33 = [];\n    my $minPath34 = [];\n    my $minPath35\
    \ = [];\n    my $minPath36 = [];\n    my $minPath37 = [];\n    my $minPath38 =\
    \ [];\n    my $minPath39 = [];\n    my $minPath40 = [];\n    my $minPath41 = [];\n\
    \    my $minPath42 = [];\n    my $minPath43 = [];\n    my $minPath44 = [];\n \
    \   my $minPath45 = [];\n    my $minPath46 = [];\n    my $minPath47 = [];\n  \
    \  my $minPath", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $m * $k;\n    my $min_path_sum = $min_sum;\n \
    \   my $path = [];\n    my $path_sum = 0;\n    my $visited = [];\n    for my $i\
    \ (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            $path = [];\n            $path_sum = 0;\n        \
    \    $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n    \
    \        $path_sum += $grid->[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $path, $path_sum, $visited, $min_path, $min_path_sum);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_sum =\
    \ $n * $n * $k;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n      \
    \  for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j] = 0;\n        }\n\
    \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         my $path = [];\n            my $sum = 0;\n            $visited->[$i]->[$j]\
    \ = 1;\n            $path->[0] = $grid->[$i]->[$j];\n            $sum += $grid->[$i]->[$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $path, $sum, $visited, $min_path, $min_sum);\n\
    \            $visited->[$i]->[$j] = 0;\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n\
    \    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n * $k;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n * $k;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n * $k;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n * $k;\n    my $minPath", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $minPath = [];\n    my $minPathSum = $n * $n + 1;\n\
    \    my $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPathSum3\
    \ = $n * $n + 1;\n    my $minPath3 = [];\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $pathSum\
    \ = 0;\n            my $pathSum2 = 0;\n            my $path2 = [];\n         \
    \   my $pathSum3 = 0;\n            my $path3 = [];\n            my $visited =\
    \ [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $visited->[$i][$j] = 0;\n                }\n\
    \            }\n            $visited->[$i][$j] = 1;\n            push @$path,\
    \ $grid->[$i][$j];\n            push @$path2, $grid->[$i][$j];\n            push\
    \ @$path3, $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n      \
    \      $pathSum2 += $grid->[$i][$j];\n            $pathSum3 += $grid->[$i][$j];\n\
    \            my $paths = [];\n            my $paths2 = [];\n            my $paths3\
    \ = [];\n            push @$paths, $path;\n            push @$paths2, $path2;\n\
    \            push @$paths3, $path3;\n            for my $l (1 .. $k - 1) {\n \
    \               my $newPaths = [];\n                my $newPaths2 = [];\n    \
    \            my $newPaths3 = [];\n                for my $path (@$paths) {\n \
    \                   my $i = @$path - 1;\n                    my $j = $path->[$i];\n\
    \                    if ($i >", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minSum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            my $visited = [];\n            for my $i (0\
    \ .. $n - 1) {\n                for my $j (0 .. $m - 1) {\n                  \
    \  $visited->[$i][$j] = 0;\n                }\n            }\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum, $visited);\n            if ($sum < $minSum) {\n   \
    \             $minSum = $sum;\n                $minPath = $path;\n           \
    \ }\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $path = [];\n    my $path_sum = 0;\n    my $visited =\
    \ [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n    \
    \        $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $path = [];\n            $path_sum\
    \ = 0;\n            $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
    \            $path_sum += $grid->[$i][$j];\n            dfs($grid, $i, $j, $k\
    \ - 1, $path, $path_sum, $visited, $min_path, $min_path_sum);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "    my $n = @$grid;\n  \
    \  my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n * $m *\
    \ $k;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n    \
    \        my $path = [];\n            my $sum = 0;\n            my $visited = [];\n\
    \            for my $x (0 .. $n - 1) {\n                for my $y (0 .. $m - 1)\
    \ {\n                    $visited->[$x][$y] = 0;\n                }\n        \
    \    }\n            $visited->[$i][$j] = 1;\n            my $dfs = sub {\n   \
    \             my($i, $j, $k) = @_;\n                if ($k == 0) {\n         \
    \           if ($sum < $min_sum) {\n                        $min_sum = $sum;\n\
    \                        $min_path = [@$path];\n                    }\n      \
    \              return;\n                }\n                for my $d (0 .. 3)\
    \ {\n                    my $x = $i + $dx[$d];\n                    my $y = $j\
    \ + $dy[$d];\n                    if ($x >= 0 && $x < $n && $y >= 0 && $y < $m\
    \ && !$visited->[$x][$y]) {\n                        $visited->[$x][$y] = 1;\n\
    \                        push @$path, $grid->[$x][$y];\n                     \
    \   $sum += $grid->[$x][$y];\n                        &$dfs($x, $y, $k - 1);\n\
    \                        pop @$path;\n                        $sum -= $grid->[$x][$y];\n\
    \                        $visited->[$x][$y] = 0;\n                    }\n    \
    \            }\n            };\n            push @$path, $grid->[$i][$j];\n  \
    \          $sum += $grid->[$i][$j];\n            &$dfs($i, $j, $k - 1);\n    \
    \    }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $min = [];\n    my $min_sum = $n * $n +\
    \ 1;\n    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_path\
    \ = [];\n    my $min_path_path_sum = $n * $n + 1;\n    my $min_path_path_path\
    \ = [];\n    my $min_path_path_path_sum = $n * $n + 1;\n    my $min_path_path_path_path\
    \ = [];\n    my $min_path_path_path_path_sum = $n * $n + 1;\n    my $min_path_path_path_path_path\
    \ = [];\n    my $min_path_path_path_path_path_sum = $n * $n + 1;\n    my $min_path_path_path_path_path_path\
    \ = [];\n    my $min_path_path_path_path_path_path_sum = $n * $n + 1;\n    my\
    \ $min_path_path_path_path_path_path_path = [];\n    my $min_path_path_path_path_path_path_path_sum\
    \ = $n * $n + 1;\n    my $min_path_path_path_path_path_path_path_path = [];\n\
    \    my $min_path_path_path_path_path_path_path_path_sum = $n * $n + 1;\n    my\
    \ $min_path_path_path_path_path_path_path_path_path = [];\n    my $min_path_path_path_path_path_path_path_path_path_sum\
    \ = $n * $n + 1;\n    my $min_path_path_path_path_path_path_path_path_path_path\
    \ = [];\n    my $min_path_path_path_path_path_path_path_path_path_path_sum = $n\
    \ * $n + 1;\n    my $min_path_", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minSum = $n * $m * $k;\n    my $minPathSum = $minSum;\n\
    \    my $minPathSum2 = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n\
    \    my $minPathSum3 = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4\
    \ = [];\n    my $minPath5 = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6\
    \ = $minSum;\n    my $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $minSum;\n    my $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9\
    \ = [];\n    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n   \
    \ my $minPath10 = [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n\
    \    my $minPathSum12 = $minSum;\n    my $minPath12 = [];\n    my $minPath13 =\
    \ [];\n    my $minPathSum13 = $minSum;\n    my $minPathSum14 = $minSum;\n    my\
    \ $minPath14 = [];\n    my $minPath15 = [];\n    my $minPathSum15 = $minSum;\n\
    \    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n    my $minPath17 =\
    \ [];\n    my $minPathSum17 = $minSum;\n    my $minPathSum18 = $minSum;\n    my\
    \ $minPath18 = [];\n    my $minPath19 = [];\n    my $minPathSum19 = $minSum;\n\
    \    my $minPathSum20 = $minSum;\n    my $minPath20 = [];\n    my $minPath21 =\
    \ [];\n    my $minPathSum21 = $minSum;\n    my $minPathSum22 = $min", "    my\
    \ $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited =\
    \ [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            my $path = [];\n            $visited->[$i][$j] = 1;\n \
    \           push @$path, $grid->[$i][$j];\n            my $ret = minPathHelper($grid,\
    \ $visited, $i, $j, $k - 1, $path);\n            if (scalar(@$ret) > 0) {\n  \
    \              if (scalar(@$minPath) == 0) {\n                    $minPath = $ret;\n\
    \                } else {\n                    my $cmp = comparePath($minPath,\
    \ $ret);\n                    if ($cmp == 1) {\n                        $minPath\
    \ = $ret;\n                    }\n                }\n            }\n         \
    \   $visited->[$i][$j] = 0;\n        }\n    }\n    return $minPath;\n}", "   \
    \ my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n \
    \   my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx = 0;\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n\
    \            my $sum = 0;\n            my $path_sum = $min_sum;\n            my\
    \ $path_sum_idx = 0;\n            my $path_sum_jdx = 0;\n            for my $l\
    \ (0 .. $k - 1) {\n                push @$path, $grid->[$i][$j];\n           \
    \     $sum += $grid->[$i][$j];\n                if ($l == $k - 1) {\n        \
    \            if ($sum < $path_sum) {\n                        $path_sum = $sum;\n\
    \                        $path_sum_idx = $i;\n                        $path_sum_jdx\
    \ = $j;\n                    }\n                    if ($path_sum < $min_path_sum)\
    \ {\n                        $min_path_sum = $path_sum;\n                    \
    \    $min_path_sum_idx = $path_sum_idx;\n                        $min_path_sum_jdx\
    \ = $path_sum_jdx;\n                        $min_path = $path;\n             \
    \       }\n                    last;\n                }\n                my $min_value\
    \ = $n * $n;\n                my $min_idx = $i;\n                my $min_jdx =\
    \ $j;\n                if ($i > 0) {\n                    if ($grid->[$i - 1][$j]\
    \ < $min_value) {\n                        $min_value = $grid->[$i - 1][$j];\n\
    \                        $min_idx = $i - 1;\n                        $min_jdx\
    \ = $j;\n                    }\n                }\n                if ($i < $n",
  "    my $n = scalar(@$grid);\n    my $min_path = [map {[map {[undef, undef]} (0\
    \ .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value = [map {[map {undef} (0\
    \ .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value_k = [map {[map {undef}\
    \ (0 .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value_k_1 = [map {[map {undef}\
    \ (0 .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value_k_1_min = [map {[map\
    \ {undef} (0 .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value_k_1_min_prev\
    \ = [map {[map {undef} (0 .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value_k_1_min_prev_prev\
    \ = [map {[map {undef} (0 .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value_k_1_min_prev_prev_prev\
    \ = [map {[map {undef} (0 .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value_k_1_min_prev_prev_prev_prev\
    \ = [map {[map {undef} (0 .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value_k_1_min_prev_prev_prev_prev_prev\
    \ = [map {[map {undef} (0 .. $n - 1)]} (0 .. $n - 1)];\n    my $min_path_value_k_1_min_prev_prev_prev_prev_prev_prev\
    \ = [map {[map {undef} (0 .. $n - 1)]} (0 .. $n - 1)];", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_path = [];\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1)\
    \ {\n            my $sum = 0;\n            my $path = [];\n            my $visited\
    \ = [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $visited->[$i][$j] = 0;\n                }\n\
    \            }\n            $visited->[$i][$j] = 1;\n            $sum += $grid->[$i][$j];\n\
    \            push @$path, $grid->[$i][$j];\n            dfs($grid, $i, $j, $k\
    \ - 1, $sum, $path, $visited, $min, $min_sum, $min_path);\n        }\n    }\n\
    \    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min = [];\n    my $min_sum = $n * $n * $k;\n    my $visited = [];\n \
    \   for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n           \
    \ $visited->[$i]->[$j] = 0;\n        }\n    }\n    dfs($grid, $k, 0, 0, 0, $min,\
    \ $min_sum, $visited);\n    return $min;\n}", "    my $n = scalar(@$grid);\n \
    \   my $m = scalar(@{$grid->[0]});\n    my $min = [];\n    my $visited = [];\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            if ($visited->[$i][$j] == 0) {\n                $visited->[$i][$j]\
    \ = 1;\n                my $path = [$grid->[$i][$j]];\n                my $result\
    \ = dfs($grid, $i, $j, $k, $visited, $path);\n                if (!defined($min)\
    \ || $result->[0] < $min->[0]) {\n                    $min = $result;\n      \
    \          }\n            }\n        }\n    }\n    return $min->[1];\n}", "  \
    \  my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min_path = [];\n    my $min_sum = $n * $m +\
    \ 1;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my\
    \ $path = [];\n            my $sum = 0;\n            $visited->[$i][$j] = 1;\n\
    \            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            if ($sum < $min_sum) {\n                $min_sum = $sum;\n      \
    \          $min_path = $path;\n            }\n            dfs($grid, $n, $m, $i,\
    \ $j, $k, $visited, $path, $sum, $min_path, $min_sum);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "    my @path;\n    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min = $n * $m;\n\
    \    my $min_path;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
    \ - 1) {\n            my $path = _minPath($grid, $i, $j, $k, $n, $m);\n      \
    \      if ($path && $path->[0] < $min) {\n                $min = $path->[0];\n\
    \                $min_path = $path->[1];\n            }\n        }\n    }\n  \
    \  return $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n \
    \   my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            my $path = [];\n            my $sum = 0;\n          \
    \  my $visited = [];\n            for my $i (0 .. $n - 1) {\n                for\
    \ my $j (0 .. $m - 1) {\n                    $visited->[$i][$j] = 0;\n       \
    \         }\n            }\n            $visited->[$i][$j] = 1;\n            dfs($grid,\
    \ $i, $j, $k - 1, $path, $sum, $visited);\n            if ($sum < $min_sum) {\n\
    \                $min_sum = $sum;\n                $min_path = $path;\n      \
    \      }\n        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n\
    \    my $minPathSum3 = $n * $n + 1;\n    my $minPath3 = [];\n    my $visited =\
    \ [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n       \
    \     my $path = [];\n            my $pathSum = 0;\n            my $pathSum2 =\
    \ 0;\n            my $path2 = [];\n            my $pathSum3 = 0;\n           \
    \ my $path3 = [];\n            $visited->[$i][$j] = 1;\n            push @$path,\
    \ $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n            push\
    \ @$path2, $grid->[$i][$j];\n            $pathSum2 += $grid->[$i][$j];\n     \
    \       push @$path3, $grid->[$i][$j];\n            $pathSum3 += $grid->[$i][$j];\n\
    \            my $res = minPathHelper($grid, $i, $j, $k - 1, $visited, $path, $pathSum,\
    \ $minPath, $minPathSum, $path2, $pathSum2, $minPath2, $minPathSum2, $path3, $pathSum3,\
    \ $minPath3, $minPathSum3);\n            $minPath = $res->[0];\n            $minPathSum\
    \ = $res->[1];\n            $minPath2 = $res->[2];\n            $", "    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum =\
    \ $n * $n + 1;\n    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n\
    \    my $min_path_len = $n * $n + 1;\n    my $min_path_len_sum = $n * $n + 1;\n\
    \    my $path = [];\n    my $path_sum = 0;\n    my $path_len = 0;\n    my $path_len_sum\
    \ = 0;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n   \
    \ for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $path\
    \ = [];\n            $path_sum = 0;\n            $path_len = 0;\n            $path_len_sum\
    \ = 0;\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $visited->[$i][$j] = 0;\n                }\n\
    \            }\n            dfs($grid, $i, $j, $k, $visited, $path, $path_sum,\
    \ $path_len, $path_len_sum, $min, $min_sum, $min_path, $min_path_sum, $min_path_len,\
    \ $min_path_len_sum);\n        }\n    }\n    return $min_path;\n}", "    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum;\n\
    \    my $min_path_k = [];\n    my $min_path_sum_k_1 = $min_path_sum;\n    my $min_path_k_1\
    \ = [];\n    my $min_path_sum_k_2 = $min_path_sum;\n    my $min_path_k_2 = [];\n\
    \    my $min_path_sum_k_3 = $min_path_sum;\n    my $min_path_k_3 = [];\n    my\
    \ $min_path_sum_k_4 = $min_path_sum;\n    my $min_path_k_4 = [];\n    my $min_path_sum_k_5\
    \ = $min_path_sum;\n    my $min_path_k_5 = [];\n    my $min_path_sum_k_6 = $min_path_sum;\n\
    \    my $min_path_k_6 = [];\n    my $min_path_sum_k_7 = $min_path_sum;\n    my\
    \ $min_path_k_7 = [];\n    my $min_path_sum_k_8 = $min_path_sum;\n    my $min_path_k_8\
    \ = [];\n    my $min_path_sum_k_9 = $min_path_sum;\n    my $min_path_k_9 = [];\n\
    \    my $min_path_sum_k_10 = $min_path_sum;\n    my $min_path_k_10 = [];\n   \
    \ my $min_path_sum_k_11 = $min_path_sum;\n    my $min_path_k_11 = [];\n    my\
    \ $min_path_sum_k_12 = $min_path_sum;\n    my $min_path_k_12 = [];\n    my $min_path_sum_k_13\
    \ = $min", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited =\
    \ [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min_path = [];\n    my $min_sum = $n * $m *\
    \ $k;\n    my $min_sum_path = [];\n    my $min_sum_path_visited = [];\n    my\
    \ $min_lex_path = [];\n    my $min_lex_path_visited = [];\n    my $sum = 0;\n\
    \    my $lex = [];\n    my $lex_visited = [];\n    my $path = [];\n    my $path_visited\
    \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n          \
    \  $path = [];\n            $path_visited = [];\n            $lex = [];\n    \
    \        $lex_visited = [];\n            $sum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            $path->[0] = $grid->[$i][$j];\n            $path_visited->[0]\
    \ = [$i, $j];\n            $lex->[0] = $grid->[$i][$j];\n            $lex_visited->[0]\
    \ = [$i, $j];\n            $sum += $grid->[$i][$j];\n            dfs($grid, $k,\
    \ $n, $m, $visited, $path, $path_visited, $lex, $lex_visited, $sum, $min_path,\
    \ $min_sum, $min_sum_path, $min_sum_path_visited, $min_lex_path, $min_lex_path_visited);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_idx = 0;\n\
    \    my $min_path_sum_jdx = 0;\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $path = [];\n            my $path_sum = 0;\n\
    \            my $path_sum_idx = 0;\n            my $path_sum_jdx = 0;\n      \
    \      my $path_sum_min = $n * $n + 1;\n            my $path_sum_min_idx = 0;\n\
    \            my $path_sum_min_jdx = 0;\n            my $path_sum_min_path = [];\n\
    \            my $path_sum_min_path_idx = 0;\n            my $path_sum_min_path_jdx\
    \ = 0;\n            my $path_sum_min_path_sum = 0;\n            my $path_sum_min_path_sum_idx\
    \ = 0;\n            my $path_sum_min_path_sum_jdx = 0;\n            my $path_sum_min_path_sum_min\
    \ = $n * $n + 1;\n            my $path_sum_min_path_sum_min_idx = 0;\n       \
    \     my $path_sum_min_path_sum_min_jdx = 0;\n            my $path_sum_min_path_sum_min_path\
    \ = [];\n            my $path_sum_min_path_sum_min_path_idx = 0;\n           \
    \ my $path_sum_min_path_sum_min_path_jdx = 0;\n            my $path_sum_min_path_sum_min_path_sum\
    \ = 0;\n            my $path_sum_min_path_sum_min_path_sum_idx = 0;\n        \
    \    my $path_sum_min_path_sum_min_path_sum_jdx = 0", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx = 0;\n\
    \    my $min_path_sum_dir = 0;\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            for my $dir (0 .. 3) {\n                my $path\
    \ = [];\n                my $path_sum = 0;\n                my $idx = $i;\n  \
    \              my $jdx = $j;\n                for my $step (0 .. $k - 1) {\n \
    \                   push @$path, $grid->[$idx][$jdx];\n                    $path_sum\
    \ += $grid->[$idx][$jdx];\n                    if ($dir == 0) {\n            \
    \            $idx -= 1;\n                    } elsif ($dir == 1) {\n         \
    \               $jdx += 1;\n                    } elsif ($dir == 2) {\n      \
    \                  $idx += 1;\n                    } else {\n                \
    \        $jdx -= 1;\n                    }\n                    if ($idx < 0 ||\
    \ $idx >= $n || $jdx < 0 || $jdx >= $m) {\n                        last;\n   \
    \                 }\n                }\n                if ($path_sum < $min_path_sum)\
    \ {\n                    $min_path = $path;\n                    $min_path_sum\
    \ = $path_sum;\n                    $min_path_sum_idx = $i;\n                \
    \    $min_path_sum_jdx = $j;\n                    $min_path_sum_dir = $dir;\n\
    \                }\n            }\n        }\n    }\n    return $min_path;\n}",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $visited\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            if ($visited->[$i][$j]\
    \ == 0) {\n                $visited->[$i][$j] = 1;\n                my $path =\
    \ [];\n                push @$path, $grid->[$i][$j];\n                dfs($grid,\
    \ $i, $j, $k - 1, $visited, $path, $min);\n                $visited->[$i][$j]\
    \ = 0;\n            }\n        }\n    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_grid = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $min_path_sum_grid->[$i]->[$j]\
    \ = $n * $n * $k;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            my $path = [];\n            my $path_sum\
    \ = 0;\n            my $path_sum_grid = [];\n            for my $i (0 .. $n -\
    \ 1) {\n                for my $j (0 .. $m - 1) {\n                    $path_sum_grid->[$i]->[$j]\
    \ = $n * $n * $k;\n                }\n            }\n            find_path($grid,\
    \ $i, $j, $k, $path, $path_sum, $path_sum_grid, $min_path, $min_path_sum, $min_path_sum_grid);\n\
    \        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n \
    \   my @ans;\n    my $min = $grid->[0][0];\n    my $min_i = 0;\n    my $min_j\
    \ = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n;\
    \ $j++) {\n            if ($grid->[$i][$j] < $min) {\n                $min = $grid->[$i][$j];\n\
    \                $min_i = $i;\n                $min_j = $j;\n            }\n \
    \       }\n    }\n    my @dirs = ([-1, 0], [1, 0], [0, -1], [0, 1]);\n    my @queue\
    \ = ([$min_i, $min_j]);\n    my %visited;\n    while (@queue) {\n        my $cur\
    \ = shift @queue;\n        my ($i, $j) = @$cur;\n        if ($visited{\"$i,$j\"\
    }) {\n            next;\n        }\n        $visited{\"$i,$j\"} = 1;\n       \
    \ push @ans, $grid->[$i][$j];\n        if (scalar(@ans) == $k) {\n           \
    \ return \\@ans;\n        }\n        for my $dir (@dirs) {\n            my ($di,\
    \ $dj) = @$dir;\n            my $ni = $i + $di;\n            my $nj = $j + $dj;\n\
    \            if ($ni >= 0 && $ni < $n && $nj >= 0 && $nj < $n) {\n           \
    \     push @queue, [$ni, $nj];\n            }\n        }\n    }\n    return \\\
    @ans;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $minPath =\
    \ [];\n    my $minSum = $n * $m + 1;\n    my $minPathSum = $minSum;\n    my $minPathSum2\
    \ = $minSum;\n    my $minPathSum3 = $minSum;\n    my $minPathSum4 = $minSum;\n\
    \    my $minPathSum5 = $minSum;\n    my $minPathSum6 = $minSum;\n    my $minPathSum7\
    \ = $minSum;\n    my $minPathSum8 = $minSum;\n    my $minPathSum9 = $minSum;\n\
    \    my $minPathSum10 = $minSum;\n    my $minPathSum11 = $minSum;\n    my $minPathSum12\
    \ = $minSum;\n    my $minPathSum13 = $minSum;\n    my $minPathSum14 = $minSum;\n\
    \    my $minPathSum15 = $minSum;\n    my $minPathSum16 = $minSum;\n    my $minPathSum17\
    \ = $minSum;\n    my $minPathSum18 = $minSum;\n    my $minPathSum19 = $minSum;\n\
    \    my $minPathSum20 = $minSum;\n    my $minPathSum21 = $minSum;\n    my $minPathSum22\
    \ = $minSum;\n    my $minPathSum23 = $minSum;\n    my $minPathSum24 = $minSum;\n\
    \    my $minPathSum25 = $minSum;\n    my $minPathSum26 = $minSum;\n    my $minPathSum27\
    \ = $minSum;\n    my $minPathSum28 = $minSum;\n    my $minPathSum29 = $minSum;\n\
    \    my $minPathSum30 = $minSum;\n    my $minPathSum31 = $minSum;\n    my $minPathSum32\
    \ = $minSum;\n    my $minPathSum33 = $minSum;\n    my $minPathSum34 = $minSum;\n\
    \    my $minPathSum35 = $minSum;\n    my $minPathSum36 = $", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n * $m\
    \ * $k;\n    my $min_path_sum = $min_sum;\n    my $min_path_len = $k;\n    my\
    \ $min_path_len_sum = $min_sum;\n    my $min_path_len_sum_len = $k;\n    my $min_path_len_sum_len_sum\
    \ = $min_sum;\n    my $min_path_len_sum_len_sum_len = $k;\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n \
    \           my $sum = 0;\n            my $path_sum = $min_sum;\n            my\
    \ $path_len = $k;\n            my $path_len_sum = $min_sum;\n            my $path_len_sum_len\
    \ = $k;\n            my $path_len_sum_len_sum = $min_sum;\n            my $path_len_sum_len_sum_len\
    \ = $k;\n            my $path_len_sum_len_sum_len_sum = $min_sum;\n          \
    \  my $path_len_sum_len_sum_len_sum_len = $k;\n            my $path_len_sum_len_sum_len_sum_len_sum\
    \ = $min_sum;\n            my $path_len_sum_len_sum_len_sum_len_sum_len = $k;\n\
    \            my $path_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n  \
    \          my $path_len_sum_len_sum_len_sum_len_sum_len_sum_len = $k;\n      \
    \      my $path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n\
    \            my $path_len_sum_len_sum_len_sum_len_sum_len", "    my $n = @$grid;\n\
    \    my @path;\n    my $min_path;\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_lex = $n * $n + 1;\n    my $min_path_lex_sum\
    \ = $n * $n + 1;\n    my $min_path_lex_sum_str = $n * $n + 1;\n    my $min_path_lex_str\
    \ = $n * $n + 1;\n    my $min_path_str = $n * $n + 1;\n    my $min_path_sum_str\
    \ = $n * $n + 1;\n    my $min_sum_str = $n * $n + 1;\n    my $min_path_lex_sum_str_rev\
    \ = $n * $n + 1;\n    my $min_path_lex_str_rev = $n * $n + 1;\n    my $min_path_str_rev\
    \ = $n * $n + 1;\n    my $min_path_sum_str_rev = $n * $n + 1;\n    my $min_sum_str_rev\
    \ = $n * $n + 1;\n    my $min_path_lex_sum_str_rev_rev = $n * $n + 1;\n    my\
    \ $min_path_lex_str_rev_rev = $n * $n + 1;\n    my $min_path_str_rev_rev = $n\
    \ * $n + 1;\n    my $min_path_sum_str_rev_rev = $n * $n + 1;\n    my $min_sum_str_rev_rev\
    \ = $n * $n + 1;\n    my $min_path_lex_sum_str_rev_rev_rev = $n * $n + 1;\n  \
    \  my $min_path_lex_str_rev_rev_rev = $n * $n + 1;\n    my $min_path_str_rev_rev_rev\
    \ = $n * $n + 1;\n    my $min_path_sum_str_rev_", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n\
    \    my $minPath3 = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath4\
    \ = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum5\
    \ = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath7 = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath8\
    \ = [];\n    my $minPathSum8 = $n * $n + 1;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n  \
    \          my $pathSum = 0;\n            my $path2 = [];\n            my $pathSum2\
    \ = 0;\n            my $path3 = [];\n            my $pathSum3 = 0;\n         \
    \   my $path4 = [];\n            my $pathSum4 = 0;\n            my $path5 = [];\n\
    \            my $pathSum5 = 0;\n            my $path6 = [];\n            my $pathSum6\
    \ = 0;\n            my $path7 = [];\n            my $pathSum7 = 0;\n         \
    \   my $path8 = [];\n            my $pathSum8 = 0;\n            my $visited =\
    \ {};\n            my $visited2 = {};\n            my $visited3 = {};\n      \
    \      my $visited4 = {};\n            my $visited5 = {};\n            my $visited6\
    \ = {};\n            my $visited7 = {};\n            my $visited8 = {};\n    \
    \        my $paths = [$path, $path2", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minSum = $n * $m + 1;\n    my $minPathSum = $n\
    \ * $m + 1;\n    my $minPathSum2 = $n * $m + 1;\n    my $minPathSum3 = $n * $m\
    \ + 1;\n    my $minPathSum4 = $n * $m + 1;\n    my $minPathSum5 = $n * $m + 1;\n\
    \    my $minPathSum6 = $n * $m + 1;\n    my $minPathSum7 = $n * $m + 1;\n    my\
    \ $minPathSum8 = $n * $m + 1;\n    my $minPathSum9 = $n * $m + 1;\n    my $minPathSum10\
    \ = $n * $m + 1;\n    my $minPathSum11 = $n * $m + 1;\n    my $minPathSum12 =\
    \ $n * $m + 1;\n    my $minPathSum13 = $n * $m + 1;\n    my $minPathSum14 = $n\
    \ * $m + 1;\n    my $minPathSum15 = $n * $m + 1;\n    my $minPathSum16 = $n *\
    \ $m + 1;\n    my $minPathSum17 = $n * $m + 1;\n    my $minPathSum18 = $n * $m\
    \ + 1;\n    my $minPathSum19 = $n * $m + 1;\n    my $minPathSum20 = $n * $m +\
    \ 1;\n    my $minPathSum21 = $n * $m + 1;\n    my $minPathSum22 = $n * $m + 1;\n\
    \    my $minPathSum23 = $n * $m + 1;\n    my $minPathSum24 = $n * $m + 1;\n  \
    \  my $minPathSum25 = $n * $m + 1;\n    my $minPathSum26 = $n * $m + 1;\n    my\
    \ $minPathSum27 = $n * $m + 1;\n    my $minPath", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $visited = [];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    my $min_path = [];\n    my $min_sum = $n * $m + 1;\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n\
    \            my $sum = 0;\n            $visited->[$i][$j] = 1;\n            dfs($grid,\
    \ $visited, $i, $j, $k, $path, $sum);\n            $visited->[$i][$j] = 0;\n \
    \           if ($sum < $min_sum) {\n                $min_sum = $sum;\n       \
    \         $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_grid = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $min_path_sum_grid->[$i]->[$j] = $n * $n * $k;\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path\
    \ = [];\n            my $path_sum = 0;\n            my $path_sum_grid = [];\n\
    \            for my $i (0 .. $n - 1) {\n                for my $j (0 .. $m - 1)\
    \ {\n                    $path_sum_grid->[$i]->[$j] = $n * $n * $k;\n        \
    \        }\n            }\n            dfs($grid, $i, $j, $k, $path, $path_sum,\
    \ $path_sum_grid, $min_path, $min_path_sum, $min_path_sum_grid);\n        }\n\
    \    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPathSum3 = $n * $n * $k;\n    my $minPathSum4 =\
    \ $n * $n * $k;\n    my $minPathSum5 = $n * $n * $k;\n    my $minPathSum6 = $n\
    \ * $n * $k;\n    my $minPathSum7 = $n * $n * $k;\n    my $minPathSum8 = $n *\
    \ $n * $k;\n    my $minPathSum9 = $n * $n * $k;\n    my $minPathSum10 = $n * $n\
    \ * $k;\n    my $minPathSum11 = $n * $n * $k;\n    my $minPathSum12 = $n * $n\
    \ * $k;\n    my $minPathSum13 = $n * $n * $k;\n    my $minPathSum14 = $n * $n\
    \ * $k;\n    my $minPathSum15 = $n * $n * $k;\n    my $minPathSum16 = $n * $n\
    \ * $k;\n    my $minPathSum17 = $n * $n * $k;\n    my $minPathSum18 = $n * $n\
    \ * $k;\n    my $minPathSum19 = $n * $n * $k;\n    my $minPathSum20 = $n * $n\
    \ * $k;\n    my $minPathSum21 = $n * $n * $k;\n    my $minPathSum22 = $n * $n\
    \ * $k;\n    my $minPathSum23 = $n * $n * $k;\n    my $minPathSum24 = $n * $n\
    \ * $k;\n    my $minPathSum25 = $n * $n * $k;\n    my $minPathSum26 = $n * $n\
    \ * $k;\n    my $minPath", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2\
    \ = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n + 1;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n + 1;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my\
    \ $minPathSum19 = $n * $n +", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n \
    \   my $min_path_sum = $n * $n + 1;\n    my $visited = [];\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            $min->[$i][$j] = $n * $n + 1;\n        }\n    }\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $min_path->[$i][$j] = [];\n        }\n    }\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $min->[$i][$j] = $grid->[$i][$j];\n\
    \            $min_path->[$i][$j] = [$grid->[$i][$j]];\n        }\n    }\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            if ($i\
    \ > 0) {\n                if ($min->[$i - 1][$j] + $grid->[$i][$j] < $min->[$i][$j])\
    \ {\n                    $min->[$i][$j] = $min->[$i - 1][$j] + $grid->[$i][$j];\n\
    \                    $min_path->[$i][$j] = [@{$min_path->[$i - 1][$j]}, $grid->[$i][$j]];\n\
    \                }\n            }\n            if ($j > 0) {\n               \
    \ if ($min->[$i][", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $m * $k;\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum\
    \ = 0;\n            my $visited = [];\n            for my $x (0 .. $n - 1) {\n\
    \                for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            my $res = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum);\n  \
    \          if (defined $res) {\n                if ($res->[1] < $min_sum) {\n\
    \                    $min_path = $res->[0];\n                    $min_sum = $res->[1];\n\
    \                }\n            }\n        }\n    }\n    return $min_path;\n}",
  "    my $n = scalar(@$grid);\n    my $min_path = [];\n    my $min_path_sum = $n\
    \ * $n + 1;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_idx_val = $min_path_sum;\n\
    \    my $min_path_sum_idx_val_idx = 0;\n    my $min_path_sum_idx_val_idx_val =\
    \ $min_path_sum;\n    my $min_path_sum_idx_val_idx_val_idx = 0;\n    my $min_path_sum_idx_val_idx_val_idx_val\
    \ = $min_path_sum;\n    my $min_path_sum_idx_val_idx_val_idx_val_idx = 0;\n  \
    \  my $min_path_sum_idx_val_idx_val_idx_val_idx_val = $min_path_sum;\n    my $min_path_sum_idx_val_idx_val_idx_val_idx_val_idx\
    \ = 0;\n    my $min_path_sum_idx_val_idx_val_idx_val_idx_val_idx_val = $min_path_sum;\n\
    \    my $min_path_sum_idx_val_idx_val_idx_val_idx_val_idx_val_idx = 0;\n    my\
    \ $min_path_sum_idx_val_idx_val_idx_val_idx_val_idx_val_idx_val = $min_path_sum;\n\
    \    my $min_path_sum_idx_val_idx_val_idx_val_idx_val_idx_val_idx_val_idx = 0;\n\
    \    my $min_path_sum_idx_val_idx_val_idx_val_idx_val_idx_val_idx_val_idx_val\
    \ = $min_path_sum;\n    my", "    my $n = scalar(@$grid);\n    my $minPath = [];\n\
    \    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n    my\
    \ $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3 = $n * $n + 1;\n\
    \    my $minPathSum4 = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPath5\
    \ = [];\n    my $minPathSum5 = $n * $n + 1;\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7 = $n * $n\
    \ + 1;\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPath9\
    \ = [];\n    my $minPathSum9 = $n * $n + 1;\n    my $minPathSum10 = $n * $n +\
    \ 1;\n    my $minPath10 = [];\n    my $minPath11 = [];\n    my $minPathSum11 =\
    \ $n * $n + 1;\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12 = [];\n\
    \    my $minPath13 = [];\n    my $minPathSum13 = $n * $n + 1;\n    my $minPathSum14\
    \ = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPath15 = [];\n    my $minPathSum15\
    \ = $n * $n + 1;\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath16 = [];\n\
    \    my $minPath17 = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPathSum18\
    \ = $n * $n + 1;\n    my $minPath18 = [];\n    my $minPath19 = [];\n    my $minPathSum19\
    \ = $n * $n + 1;\n    my $minPathSum", "    my $n = scalar(@$grid);\n    my $min_path\
    \ = [];\n    my $min_path_value = $n * $n + 1;\n    my $visited = {};\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n   \
    \         my $path = [];\n            my $path_value = 0;\n            my $visited\
    \ = {};\n            dfs($grid, $i, $j, $k, $path, $path_value, $visited, $min_path,\
    \ $min_path_value);\n        }\n    }\n    return $min_path;\n}", "    my $n =\
    \ scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n * $k;\n    for my $i (0 .. $n - 1) {\n       \
    \ for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $path_sum\
    \ = 0;\n            my $visited = [];\n            for my $x (0 .. $n - 1) {\n\
    \                for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            push @$path, $grid->[$i][$j];\n            $path_sum += $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $path_sum, $min_path,\
    \ $min_path_sum);\n        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min = [map { [map { [$_] } @$_] }\
    \ @$grid];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            for my $d (0 .. 3) {\n                my($x, $y) = ($i + $dx[$d],\
    \ $j + $dy[$d]);\n                if ($x >= 0 && $x < $n && $y >= 0 && $y < $m)\
    \ {\n                    my $cur = $min->[$i][$j];\n                    my $next\
    \ = $min->[$x][$y];\n                    if (scalar(@$cur) < scalar(@$next)) {\n\
    \                        $min->[$x][$y] = $cur;\n                    } elsif (scalar(@$cur)\
    \ == scalar(@$next)) {\n                        if ($cur->[0] < $next->[0]) {\n\
    \                            $min->[$x][$y] = $cur;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   my $res = [];\n    my $i = 0;\n    my $j = 0;\n    for (1 .. $k) {\n     \
    \   push @$res, $grid->[$i][$j];\n        my $cur = $min->[$i][$j];\n        my\
    \ $next = $cur;\n        for my $d (0 .. 3) {\n            my($x, $y) = ($i +\
    \ $dx[$d], $j + $dy[$d]);\n            if ($x >= 0 && $x < $n && $y >= 0 && $y\
    \ < $m) {\n                my $cur = $min->[$x][$y];\n                if (scalar(@$cur)\
    \ < scalar(@$next)) {\n                    $next = $cur;\n                } elsif\
    \ (scalar(@$cur) == scalar(@$next)) {\n                    if ($", "    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum =\
    \ $n * $n + 1;\n    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n\
    \    my $min_path_len = $n * $n + 1;\n    my $min_path_len_sum = $n * $n + 1;\n\
    \    my $min_path_len_sum_path = [];\n    my $min_path_len_sum_path_sum = $n *\
    \ $n + 1;\n    my $min_path_len_sum_path_sum_path = [];\n    my $min_path_len_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path = [];\n    my\
    \ $min_path_len_sum_path_sum_path_sum_path_sum = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum = $n * $n\
    \ + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path = [];\n\
    \    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum = $n *\
    \ $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_", "    my $n = scalar(@$grid);\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_idx_prev\
    \ = 0;\n    my $min_path_sum_idx_next = 0;\n    my $min_path_sum_idx_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_next_next = 0;\n    my $min_path_sum_idx_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_next_next_next = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_next_next_next_next = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_next_next_next_next_next = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_next_next_next_next_next_next = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_next_next_next_next_next_next_next = 0;\n   \
    \ my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    my $min_path_sum_idx_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $min_path", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_value = [];\n    my $min_path_value_sum\
    \ = $n * $n + 1;\n    my $min_path_value_sum_k = $min_path_value_sum;\n    my\
    \ $min_path_value_sum_k_1 = $min_path_value_sum;\n    my $min_path_value_sum_k_2\
    \ = $min_path_value_sum;\n    my $min_path_value_sum_k_3 = $min_path_value_sum;\n\
    \    my $min_path_value_sum_k_4 = $min_path_value_sum;\n    my $min_path_value_sum_k_5\
    \ = $min_path_value_sum;\n    my $min_path_value_sum_k_6 = $min_path_value_sum;\n\
    \    my $min_path_value_sum_k_7 = $min_path_value_sum;\n    my $min_path_value_sum_k_8\
    \ = $min_path_value_sum;\n    my $min_path_value_sum_k_9 = $min_path_value_sum;\n\
    \    my $min_path_value_sum_k_10 = $min_path_value_sum;\n    my $min_path_value_sum_k_11\
    \ = $min_path_value_sum;\n    my $min_path_value_sum_k_12 = $min_path_value_sum;\n\
    \    my $min_path_value_sum_k_13 = $min_path_value_sum;\n    my $min_path_value_sum_k_14\
    \ = $min_path_value_sum;\n    my $min_path_value_sum_k_15 = $min_path_value_sum;\n\
    \    my $min_path_value_sum_k_16 = $min_path_value_sum;\n    my $min_path_value_sum_k_17\
    \ = $min", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i]->[$j]\
    \ = 0;\n        }\n    }\n    my $dfs;\n    $dfs = sub {\n        my($i, $j, $sum,\
    \ $path) = @_;\n        if ($sum > $min_sum) {\n            return;\n        }\n\
    \        if ($sum == $k) {\n            if ($sum < $min_sum) {\n             \
    \   $min_sum = $sum;\n                $min = $path;\n            } elsif ($sum\
    \ == $min_sum) {\n                my $cmp = lexicographic_compare($path, $min);\n\
    \                if ($cmp < 0) {\n                    $min = $path;\n        \
    \        }\n            }\n            return;\n        }\n        if ($i > 0\
    \ && !$visited->[$i - 1]->[$j]) {\n            $visited->[$i - 1]->[$j] = 1;\n\
    \            $dfs->($i - 1, $j, $sum + 1, [@$path, $grid->[$i - 1]->[$j]]);\n\
    \            $visited->[$i - 1]->[$j] = 0;\n        }\n        if ($i < $n - 1\
    \ && !$visited->[$i + 1]->[$j]) {\n            $visited->[$i + 1]->[$j] = 1;\n\
    \            $dfs->($i + 1, $j, $sum + 1, [@$path, $grid->[$i + 1]->[$j]]);\n\
    \            $visited->[$i + 1]->[$j] = 0;\n        }\n        if ($j > 0 && !$visited->[$i]->[$j\
    \ - 1", "    my $n = @$grid;\n    my @path;\n    my $min_path;\n    my $min_sum\
    \ = $n * $n * $n;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n -\
    \ 1) {\n            my $sum = 0;\n            my @path;\n            my $path_len\
    \ = 0;\n            my $cur_i = $i;\n            my $cur_j = $j;\n           \
    \ while ($path_len < $k) {\n                push @path, $grid->[$cur_i][$cur_j];\n\
    \                $sum += $grid->[$cur_i][$cur_j];\n                $path_len++;\n\
    \                my $min_sum = $n * $n * $n;\n                my $min_i;\n   \
    \             my $min_j;\n                for my $i (0 .. $n - 1) {\n        \
    \            for my $j (0 .. $n - 1) {\n                        my $sum = $grid->[$i][$j];\n\
    \                        if ($i == $cur_i) {\n                            $sum\
    \ += $grid->[$i][$j - 1] if $j > 0;\n                            $sum += $grid->[$i][$j\
    \ + 1] if $j < $n - 1;\n                        }\n                        elsif\
    \ ($j == $cur_j) {\n                            $sum += $grid->[$i - 1][$j] if\
    \ $i > 0;\n                            $sum += $grid->[$i + 1][$j] if $i < $n\
    \ - 1;\n                        }\n                        else {\n          \
    \                  $sum += $grid->[$i - 1][$j] if $i > 0;\n                  \
    \          $sum += $grid->[$i + 1][$j] if $i < $n - 1;\n                     \
    \       $sum += $grid->[$i][$j - 1] if $j > 0;\n                            $sum\
    \ += $grid->[$i][$j + 1] if $j < $n - 1;\n                        }\n        \
    \                if ($sum < $min_sum) {\n                           ", "    my\
    \ $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $minPath =\
    \ [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n\
    \    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8 = [];\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n       \
    \     my $path = [];\n            my $pathSum = 0;\n            my $path2 = [];\n\
    \            my $pathSum2 = 0;\n            my $path3 = [];\n            my $pathSum3\
    \ = 0;\n            my $path4 = [];\n            my $pathSum4 = 0;\n         \
    \   my $path5 = [];\n            my $pathSum5 = 0;\n            my $path6 = [];\n\
    \            my $pathSum6 = 0;\n            my $path7 = [];\n            my $pathSum7\
    \ = 0;\n            my $path8 = [];\n            my $pathSum8 = 0;\n         \
    \   my $paths = [$path, $path2, $path3, $path4, $path5, $path6, $path7, $path8];\n\
    \            my $pathSums = [$pathSum, $pathSum2, $pathSum3, $pathSum4, $pathSum5,\
    \ $pathSum6, $pathSum7, $pathSum8];\n            my $paths", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_found = 0;\n    my $min_path_sum_found_count\
    \ = 0;\n    my $min_path_sum_found_count_max = 100;\n    my $min_path_sum_found_count_max_reached\
    \ = 0;\n    my $min_path_sum_found_count_max_reached_count = 0;\n    my $min_path_sum_found_count_max_reached_count_max\
    \ = 100;\n    my $min_path_sum_found_count_max_reached_count_max_reached = 0;\n\
    \    my $min_path_sum_found_count_max_reached_count_max_reached_count = 0;\n \
    \   my $min_path_sum_found_count_max_reached_count_max_reached_count_max = 100;\n\
    \    my $min_path_sum_found_count_max_reached_count_max_reached_count_max_reached\
    \ = 0;\n    my $min_path_sum_found_count_max_reached_count_max_reached_count_max_reached_count\
    \ = 0;\n    my $min_path_sum_found_count_max_reached_count_max_reached_count_max_reached_count_max\
    \ = 100;\n    my $min_path_sum_found_count_max_reached_count_max_reached_count_max_reached_count_max_reached\
    \ = 0;\n    my $min_path_sum_found_count_max_reached_count_max_reached_count_max_reached_count_max_reached_count\
    \ = 0;\n    my $min_path_sum_found_count_max_reached_count_max_reached_count_max_reached_count_max_reached_count_max\
    \ = 100;\n    my", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $visited\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          my $path = [];\n            my $path_sum = 0;\n            my $visited\
    \ = [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $visited->[$i][$j] = 0;\n                }\n\
    \            }\n            dfs($grid, $i, $j, $k, $path, $path_sum, $visited);\n\
    \            if ($path_sum < $min_path_sum) {\n                $min_path_sum =\
    \ $path_sum;\n                $min_path = $path;\n            }\n        }\n \
    \   }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n \
    \   my $min_path_sum = $n * $n + 1;\n    my $min_path_len = $n * $n + 1;\n   \
    \ my $path = [];\n    my $path_sum = 0;\n    my $path_len = 0;\n    my $visited\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n       \
    \     $visited->[$i][$j] = 1;\n            $path_sum += $grid->[$i][$j];\n   \
    \         $path_len++;\n            push @$path, $grid->[$i][$j];\n          \
    \  if ($path_len == $k) {\n                if ($path_sum < $min_path_sum) {\n\
    \                    $min_path_sum = $path_sum;\n                    $min_path_len\
    \ = $path_len;\n                    $min_path = $path;\n                }\n  \
    \              elsif ($path_sum == $min_path_sum) {\n                    if ($path_len\
    \ < $min_path_len) {\n                        $min_path_len = $path_len;\n   \
    \                     $min_path = $path;\n                    }\n            \
    \        elsif ($path_len == $min_path_len) {\n                        my $cmp\
    \ = compare_paths($path, $min_path);\n                        if ($cmp < 0) {\n\
    \                            $min_path = $path;\n                        }\n \
    \                   }\n                }\n            }\n            else {\n\
    \                my $next = next_cell($grid, $visited, $", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n    my $minPathSum3 =\
    \ $n * $n * $k;\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath2 = [];\n\
    \    my $minPath3 = [];\n    my $minPath4 = [];\n    my $minPath5 = [];\n    my\
    \ $minPathSum5 = $n * $n * $k;\n    my $minPathSum6 = $n * $n * $k;\n    my $minPath6\
    \ = [];\n    my $minPath7 = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPathSum8\
    \ = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPath9 = [];\n    my $minPathSum9\
    \ = $n * $n * $k;\n    my $minPathSum10 = $n * $n * $k;\n    my $minPath10 = [];\n\
    \    my $minPath11 = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPathSum12\
    \ = $n * $n * $k;\n    my $minPath12 = [];\n    my $minPath13 = [];\n    my $minPathSum13\
    \ = $n * $n * $k;\n    my $minPathSum14 = $n * $n * $k;\n    my $minPath14 = [];\n\
    \    my $minPath15 = [];\n    my $minPathSum15 = $n * $n * $k;\n    my $minPathSum16\
    \ = $n * $n * $k;\n    my $minPath16 = [];\n    my $minPath17 = [];\n    my $minPathSum17\
    \ = $n * $n * $k;\n    my $minPathSum18 = $n * $n * $k;\n    my $minPath", " \
    \   my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum;\n\
    \    my $min_path_sum_k_1 = $min_path_sum;\n    my $min_path_sum_k_2 = $min_path_sum;\n\
    \    my $min_path_sum_k_3 = $min_path_sum;\n    my $min_path_sum_k_4 = $min_path_sum;\n\
    \    my $min_path_sum_k_5 = $min_path_sum;\n    my $min_path_sum_k_6 = $min_path_sum;\n\
    \    my $min_path_sum_k_7 = $min_path_sum;\n    my $min_path_sum_k_8 = $min_path_sum;\n\
    \    my $min_path_sum_k_9 = $min_path_sum;\n    my $min_path_sum_k_10 = $min_path_sum;\n\
    \    my $min_path_sum_k_11 = $min_path_sum;\n    my $min_path_sum_k_12 = $min_path_sum;\n\
    \    my $min_path_sum_k_13 = $min_path_sum;\n    my $min_path_sum_k_14 = $min_path_sum;\n\
    \    my $min_path_sum_k_15 = $min_path_sum;\n    my $min_path_sum_k_16 = $min_path_sum;\n\
    \    my $min_path_sum_k_17 = $min_path_sum;\n    my $min_path_sum_k_18 = $min_path_sum;\n\
    \    my $min_path_sum_k_19 = $min_path_sum;\n    my $min_path_sum_k_20 = $min_path_sum;\n\
    \    my $min_path_sum_k_21 = $", "    my $n = @$grid;\n    my @path;\n    my $min_path;\n\
    \    my $min_sum = $n * $n * $n;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx\
    \ = 0;\n    my $min_path_sum_dir = 0;\n    my $min_path_sum_dir_idx = 0;\n   \
    \ my $min_path_sum_dir_idx_dir = 0;\n    my $min_path_sum_dir_idx_dir_idx = 0;\n\
    \    my $min_path_sum_dir_idx_dir_idx_dir = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir = 0;\n    my\
    \ $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx =\
    \ 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx\
    \ = 0;\n    my $min_path_sum_dir_idx", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = [];\n    my $min_sum = $n * $n * $k;\n    my $visited = [];\n \
    \   for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n           \
    \ $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n \
    \       for my $j (0 .. $m - 1) {\n            my $path = [];\n            my\
    \ $sum = 0;\n            $visited->[$i][$j] = 1;\n            $sum += $grid->[$i][$j];\n\
    \            push @$path, $grid->[$i][$j];\n            dfs($grid, $n, $m, $i,\
    \ $j, $path, $sum, $visited, $k, $min, $min_sum);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n\
    \    my $visited = {};\n    my $min_path = [];\n    my $min_path_sum = $n * $n\
    \ + 1;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_val = 0;\n    my $min_path_sum_val_idx\
    \ = 0;\n    my $min_path_sum_val_idx_val = 0;\n    my $min_path_sum_val_idx_val_idx\
    \ = 0;\n    my $min_path_sum_val_idx_val_idx_val = 0;\n    my $min_path_sum_val_idx_val_idx_val_idx\
    \ = 0;\n    my $min_path_sum_val_idx_val_idx_val_idx_val = 0;\n    my $min_path_sum_val_idx_val_idx_val_idx_val_idx\
    \ = 0;\n    my $min_path_sum_val_idx_val_idx_val_idx_val_idx_val = 0;\n    my\
    \ $min_path_sum_val_idx_val_idx_val_idx_val_idx_val_idx = 0;\n    my $min_path_sum_val_idx_val_idx_val_idx_val_idx_val_idx_val\
    \ = 0;\n    my $min_path_sum_val_idx_val_idx_val_idx_val_idx_val_idx_val_idx =\
    \ 0;\n    my $min_path_sum_val_idx_val_idx_val_idx_val_idx_val_idx_val_idx_val\
    \ = 0;\n    my $min_path_sum_val_idx_val_idx_val_idx_val_idx_val_idx_val_idx_val_idx\
    \ = 0;\n    my $min_path_sum_val_idx_val_idx_val", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_found = 0;\n    my $path_sum = 0;\n  \
    \  my $path = [];\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $dfs = sub {\n        my($i, $j, $path_len) = @_;\n        if ($path_len\
    \ == $k) {\n            $path_sum += $grid->[$i][$j];\n            if ($path_sum\
    \ < $min_path_sum) {\n                $min_path_sum = $path_sum;\n           \
    \     $min_path = [@$path];\n                $min_path_sum_found = 1;\n      \
    \      } elsif ($path_sum == $min_path_sum) {\n                my $path_str =\
    \ join('', @$path);\n                my $min_path_str = join('', @$min_path);\n\
    \                if ($path_str lt $min_path_str) {\n                    $min_path\
    \ = [@$path];\n                    $min_path_sum_found = 1;\n                }\n\
    \            }\n            $path_sum -= $grid->[$i][$j];\n            return;\n\
    \        }\n        $visited->[$i][$j] = 1;\n        $path_sum += $grid->[$i][$j];\n\
    \        push @$path, $grid->[$i][$j];\n        if ($i > 0 && !$visited->[$i -\
    \ 1][$j]) {\n            $dfs->($i - 1, $j, $path_len + 1);\n        }\n     \
    \   if ($i < $n - 1 && !$visited->[$i + 1][$j]) {\n            $", "    my $n\
    \ = @$grid;\n    my @path = ();\n    my $min = $grid->[0][0];\n    my @minPath\
    \ = ($min);\n    my $minPath = \\@minPath;\n    my $path = \\@path;\n    my $minPaths\
    \ = {};\n    my $paths = {};\n    my $minPaths = {};\n    my $paths = {};\n  \
    \  my $minPaths = {};\n    my $paths = {};\n    my $minPaths = {};\n    my $paths\
    \ = {};\n    my $minPaths = {};\n    my $paths = {};\n    my $minPaths = {};\n\
    \    my $paths = {};\n    my $minPaths = {};\n    my $paths = {};\n    my $minPaths\
    \ = {};\n    my $paths = {};\n    my $minPaths = {};\n    my $paths = {};\n  \
    \  my $minPaths = {};\n    my $paths = {};\n    my $minPaths = {};\n    my $paths\
    \ = {};\n    my $minPaths = {};\n    my $paths = {};\n    my $minPaths = {};\n\
    \    my $paths = {};\n    my $minPaths = {};\n    my $paths = {};\n    my $minPaths\
    \ = {};\n    my $paths = {};\n    my $minPaths = {};\n    my $paths = {};\n  \
    \  my $minPaths = {};\n    my $paths = {};\n    my $minPaths = {};\n    my $paths\
    \ = {};\n    my $minPaths = {};\n    my $paths = {};\n    my $minPaths = {};\n\
    \    my $paths = {};\n    my $minPaths = {};\n    my $paths = {};\n    my $minPaths\
    \ = {};\n    my $paths = {};\n    my $minPaths = {};\n    my $paths = {};\n  \
    \  my $minPaths = {};\n   ", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = [];\n    my $min_sum = $n * $n * $k;\n    my $visited = [];\n \
    \   for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n           \
    \ my $path = [];\n            my $sum = 0;\n            my $visited = [];\n  \
    \          for my $x (0 .. $n - 1) {\n                for my $y (0 .. $m - 1)\
    \ {\n                    $visited->[$x][$y] = 0;\n                }\n        \
    \    }\n            $visited->[$i][$j] = 1;\n            dfs($grid, $i, $j, $n,\
    \ $m, $k, $path, $sum, $visited, $min, $min_sum);\n        }\n    }\n    return\
    \ $min;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n\
    \    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            if ($visited->[$i][$j]\
    \ == 0) {\n                $visited->[$i][$j] = 1;\n                my $path =\
    \ [$grid->[$i][$j]];\n                dfs($grid, $i, $j, $k - 1, $visited, $path,\
    \ $min);\n                $visited->[$i][$j] = 0;\n            }\n        }\n\
    \    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_found\
    \ = 0;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            my $path = [];\n            my $path_sum = 0;\n\
    \            my $path_sum_found = 0;\n            my $visited = [];\n        \
    \    for my $i (0 .. $n - 1) {\n                for my $j (0 .. $m - 1) {\n  \
    \                  $visited->[$i][$j] = 0;\n                }\n            }\n\
    \            $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
    \            $path_sum += $grid->[$i][$j];\n            my $path_found = 0;\n\
    \            my $path_found_sum = $n * $n * $k;\n            my $path_found_sum_found\
    \ = 0;\n            my $path_found_path = [];\n            my $path_found_visited\
    \ = [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $path_found_visited->[$i][$j] = 0;\n        \
    \        }\n            }\n            $path_found_visited->[$i][$j] = 1;\n  \
    \          push @$path_found_path, $grid->[$i][$j];\n            $path_found_sum\
    \ += $grid->[$i][$j];\n            my $path_found_found = 0;\n            my $path_found_found_sum\
    \ = $n * $n * $k;\n            my $path_found_found_sum_found = 0;\n         \
    \   my $path_found_found_path = [];\n            my $path_found_found_visited\
    \ = [];\n            for my", "    my $n = scalar(@$grid);\n    my $min_path =\
    \ [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_set = {};\n    my\
    \ $min_path_set_sum = $n * $n + 1;\n    my $min_path_set_count = 0;\n    my $min_path_set_count_sum\
    \ = $n * $n + 1;\n    my $min_path_set_count_sum_count = 0;\n    my $min_path_set_count_sum_count_sum\
    \ = $n * $n + 1;\n    my $min_path_set_count_sum_count_sum_count = 0;\n    my\
    \ $min_path_set_count_sum_count_sum_count_sum = $n * $n + 1;\n    my $min_path_set_count_sum_count_sum_count_sum_count\
    \ = 0;\n    my $min_path_set_count_sum_count_sum_count_sum_count_sum = $n * $n\
    \ + 1;\n    my $min_path_set_count_sum_count_sum_count_sum_count_sum_count = 0;\n\
    \    my $min_path_set_count_sum_count_sum_count_sum_count_sum_count_sum = $n *\
    \ $n + 1;\n    my $min_path_set_count_sum_count_sum_count_sum_count_sum_count_sum_count\
    \ = 0;\n    my $min_path_set_count_sum_count_sum_count_sum_count_sum_count_sum_count_sum\
    \ = $n * $n + 1;\n    my $min_path_set_count_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count\
    \ = 0;\n    my $min_path_set_count_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count_sum\
    \ = $n * $n + 1;\n    my $min_path_set_count_sum_count_sum_count_", "    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum +\
    \ $k;\n    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for\
    \ (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $dfs = sub {\n        my($i, $j, $path, $path_sum) = @_;\n    \
    \    if ($path_sum > $min_path_sum_k) {\n            return;\n        }\n    \
    \    if (scalar(@$path) == $k) {\n            if ($path_sum < $min_path_sum) {\n\
    \                $min_path = $path;\n                $min_path_sum = $path_sum;\n\
    \            }\n            return;\n        }\n        if ($i > 0 && !$visited->[$i\
    \ - 1][$j]) {\n            $visited->[$i - 1][$j] = 1;\n            my $new_path\
    \ = [@$path];\n            push @$new_path, $grid->[$i - 1][$j];\n           \
    \ $dfs->($i - 1, $j, $new_path, $path_sum + $grid->[$i - 1][$j]);\n          \
    \  $visited->[$i - 1][$j] = 0;\n        }\n        if ($i < $n - 1 && !$visited->[$i\
    \ + 1][$j]) {\n            $visited->[$i + 1][$j] = 1;\n            my $new_path\
    \ = [@$path];\n            push @$new_path, $grid->[$i + 1][$j];\n           \
    \ $dfs->($i + 1, $j, $new_path, $path_sum + $grid->[$i", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min_path = [map { [] } 0 .. $n -\
    \ 1];\n    my $min_path_len = [map { [] } 0 .. $n - 1];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $min_path_len->[$i][$j]\
    \ = $k + 1;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            if ($i > 0) {\n                if ($grid->[$i][$j]\
    \ < $grid->[$i - 1][$j]) {\n                    if ($min_path_len->[$i - 1][$j]\
    \ + 1 < $min_path_len->[$i][$j]) {\n                        $min_path_len->[$i][$j]\
    \ = $min_path_len->[$i - 1][$j] + 1;\n                        $min_path->[$i][$j]\
    \ = [@{$min_path->[$i - 1][$j]}, $grid->[$i][$j]];\n                    }\n  \
    \              }\n            }\n            if ($j > 0) {\n                if\
    \ ($grid->[$i][$j] < $grid->[$i][$j - 1]) {\n                    if ($min_path_len->[$i][$j\
    \ - 1] + 1 < $min_path_len->[$i][$j]) {\n                        $min_path_len->[$i][$j]\
    \ = $min_path_len->[$i][$j - 1] + 1;\n                        $min_path->[$i][$j]\
    \ = [@{$min_path->[$i][$j - 1]}, $grid->[$i][$j]];\n                    }\n  \
    \              }\n            }\n            if ($i < $n - 1) {\n            \
    \    if ($grid->[$i][$j] < $", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k\
    \ = $min_path_sum + $k;\n    my $min_path_sum_k_1 = $min_path_sum_k - 1;\n   \
    \ my $min_path_sum_k_2 = $min_path_sum_k - 2;\n    my $min_path_sum_k_3 = $min_path_sum_k\
    \ - 3;\n    my $min_path_sum_k_4 = $min_path_sum_k - 4;\n    my $min_path_sum_k_5\
    \ = $min_path_sum_k - 5;\n    my $min_path_sum_k_6 = $min_path_sum_k - 6;\n  \
    \  my $min_path_sum_k_7 = $min_path_sum_k - 7;\n    my $min_path_sum_k_8 = $min_path_sum_k\
    \ - 8;\n    my $min_path_sum_k_9 = $min_path_sum_k - 9;\n    my $min_path_sum_k_10\
    \ = $min_path_sum_k - 10;\n    my $min_path_sum_k_11 = $min_path_sum_k - 11;\n\
    \    my $min_path_sum_k_12 = $min_path_sum_k - 12;\n    my $min_path_sum_k_13\
    \ = $min_path_sum_k - 13;\n    my $min_path_sum_k_14 = $min_path_sum_k - 14;\n\
    \    my $min_path_sum_k_15 = $min_path_sum_k - 15;\n    my $min_path_sum_k_16\
    \ = $min_path_sum_k - 16;\n    my $min_path_sum_k_17 = $min_path_sum_k - 17;\n\
    \    my $min_path"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
