language: pl
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @words = split(/ /, $test);\n    my %hash;\n    foreach my $word (@words)\
    \ {\n        $hash{$word}++;\n    }\n    my $max = 0;\n    my @max_keys;\n   \
    \ foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n        \
    \    $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push(@max_keys, $key);\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my %result;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $result{$i} = $max;\n        }\n    }\n    return %result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %count;\n    my %result;\n    my @letters = split(/ /, $test);\n    foreach\
    \ my $letter (@letters) {\n        $count{$letter}++;\n    }\n    my $max = 0;\n\
    \    foreach my $key (keys %count) {\n        if ($count{$key} > $max) {\n   \
    \         $max = $count{$key};\n        }\n    }\n    foreach my $key (keys %count)\
    \ {\n        if ($count{$key} == $max) {\n            $result{$key} = $max;\n\
    \        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 0
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter\
    \ (split(/\\s+/, $test)) {\n        $hist{$letter}++;\n        if ($hist{$letter}\
    \ > $max) {\n            $max = $hist{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n\
    \        $result{$letter} = $max;\n    }\n    return \\%result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %histogram = ();\n    foreach my\
    \ $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $histo{$letter}) {\n            $histo{$letter}\
    \ += 1;\n        } else {\n            $histo{$letter} = 1;\n        }\n    }\n\
    \    return %histo;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(' ', $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $word (@array)\
    \ {\n        $hash{$word}++;\n    }\n    return %hash;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %test;\n    foreach my $test (@test)\
    \ {\n        $test{$test}++;\n    }\n    my $max = 0;\n    my @max;\n    foreach\
    \ my $test (keys %test) {\n        if ($test{$test} > $max) {\n            $max\
    \ = $test{$test};\n            @max = ($test);\n        } elsif ($test{$test}\
    \ == $max) {\n            push(@max, $test);\n        }\n    }\n    my %max;\n\
    \    foreach my $max (@max) {\n        $max{$max} = $test{$max};\n    }\n    return\
    \ %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    return %hash;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\\
    s+/, $test)) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max)\
    \ {\n            $max = $hist{$letter};\n            %max = ($letter => $max);\n\
    \        } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n\
    \        }\n    }\n    return %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n\
    \            $max = $histogram{$letter};\n        }\n    }\n    my %result;\n\
    \    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter} ==\
    \ $max) {\n            $result{$letter} = $max;\n        }\n    }\n    return\
    \ %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram = ();\n    my @letters = split(/ /, $test);\n    foreach my\
    \ $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %count;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n\
    \        $result{$letter} = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %count;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $count{$letter}++;\n    }\n    return %count;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n  \
    \      if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/\\s+/, $test);\n    foreach my $word\
    \ (@array) {\n        $hash{$word}++;\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $letter (@array)\
    \ {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n     \
    \       $max = $hash{$key};\n            @max_letters = ($key);\n        } elsif\
    \ ($hash{$key} == $max) {\n            push(@max_letters, $key);\n        }\n\
    \    }\n    my %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
    \ = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/\\s+/, $test);\n    foreach my $word\
    \ (@array) {\n        if (exists $hash{$word}) {\n            $hash{$word} +=\
    \ 1;\n        } else {\n            $hash{$word} = 1;\n        }\n    }\n    return\
    \ %hash;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/\\s+/, $test);\n    my %counts;\n    my %max;\n    foreach\
    \ my $letter (@letters) {\n        $counts{$letter}++;\n        if ($counts{$letter}\
    \ > $max{count}) {\n            $max{count} = $counts{$letter};\n            $max{letter}\
    \ = $letter;\n        }\n    }\n    my %result;\n    foreach my $letter (keys\
    \ %counts) {\n        if ($counts{$letter} == $max{count}) {\n            $result{$letter}\
    \ = $counts{$letter};\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/\\s+/, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@test) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my %hash2;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $hash2{$i} = $max;\n        }\n    }\n    return %hash2;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %counts;\n    foreach my $letter\
    \ (@letters) {\n        if (exists $counts{$letter}) {\n            $counts{$letter}\
    \ += 1;\n        } else {\n            $counts{$letter} = 1;\n        }\n    }\n\
    \    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %counts)\
    \ {\n        if ($counts{$letter} > $max) {\n            $max = $counts{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($counts{$letter} == $max)\
    \ {\n            push(@max_letters, $letter);\n        }\n    }\n    my %result;\n\
    \    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n \
    \   }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"\
    a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" =>\
    \ 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/\\s+/, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %max_histogram;\n  \
    \  foreach my $key (keys %histogram) {\n        if ($histogram{$key} == $max)\
    \ {\n            $max_histogram{$key} = $max;\n        }\n    }\n    return %max_histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %test;\n    foreach my $test (@test)\
    \ {\n        $test{$test}++;\n    }\n    my $max = 0;\n    my %result;\n    foreach\
    \ my $test (keys %test) {\n        if ($test{$test} > $max) {\n            $max\
    \ = $test{$test};\n            %result = ();\n            $result{$test} = $test{$test};\n\
    \        } elsif ($test{$test} == $max) {\n            $result{$test} = $test{$test};\n\
    \        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @arr = split(' ', $test);\n    foreach my $i (@arr) {\n\
    \        $hash{$i}++;\n    }\n    my @keys = sort { $hash{$b} <=> $hash{$a} }\
    \ keys %hash;\n    my %result;\n    my $max = $hash{$keys[0]};\n    foreach my\
    \ $key (@keys) {\n        if ($hash{$key} == $max) {\n            $result{$key}\
    \ = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my %result;\n    foreach\
    \ my $i (keys %hash) {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n\
    \        }\n    }\n    foreach my $i (keys %hash) {\n        if ($hash{$i} ==\
    \ $max) {\n            $result{$i} = $max;\n        }\n    }\n    return %result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my @letters = split(\" \", $test);\n    foreach my $letter\
    \ (@letters) {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n          \
    \  $max = $hist{$letter};\n        }\n    }\n    my %result;\n    foreach my $letter\
    \ (keys %hist) {\n        if ($hist{$letter} == $max) {\n            $result{$letter}\
    \ = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram = ();\n    my @letters = split(/ /, $test);\n    foreach my\
    \ $letter (@letters) {\n        if (exists $histogram{$letter}) {\n          \
    \  $histogram{$letter} += 1;\n        } else {\n            $histogram{$letter}\
    \ = 1;\n        }\n    }\n    return %histogram;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $letter\
    \ (@array) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(' ', $test);\n    my %histogram;\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %max_hash;\n\
    \    foreach my $key (@max_keys) {\n        $max_hash{$key} = $max;\n    }\n \
    \   return %max_hash;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(' ', $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my %max_hash = ();\n \
    \   foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n      \
    \      $max = $hash{$key};\n            %max_hash = ();\n            $max_hash{$key}\
    \ = $max;\n        } elsif ($hash{$key} == $max) {\n            $max_hash{$key}\
    \ = $max;\n        }\n    }\n    return %max_hash;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram = ();\n    my @letters = split(/ /, $test);\n    foreach my\
    \ $letter (@letters) {\n        if (exists $histogram{$letter}) {\n          \
    \  $histogram{$letter}++;\n        } else {\n            $histogram{$letter} =\
    \ 1;\n        }\n    }\n    return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(' ', $test);\n    foreach my $key (@array)\
    \ {\n        $hash{$key}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(' ', $test);\n    my %counts;\n    foreach my $letter\
    \ (@letters) {\n        $counts{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %counts) {\n        if ($counts{$letter} > $max)\
    \ {\n            $max = $counts{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($counts{$letter} == $max) {\n            push @max_letters,\
    \ $letter;\n        }\n    }\n    my %result;\n    foreach my $letter (@max_letters)\
    \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 255
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = max(values %hash);\n    my @max_keys\
    \ = grep { $hash{$_} == $max } keys %hash;\n    my %max_hash;\n    foreach my\
    \ $i (@max_keys) {\n        $max_hash{$i} = $max;\n    }\n    return %max_hash;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj9b3h93t.pl line 22.

    '
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
    \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
    \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters\
    \ = ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push(@max_letters,\
    \ $letter);\n        }\n    }\n    my %result;\n    foreach my $letter (@max_letters)\
    \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
    \ %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \        }\n    }\n    my %result;\n    foreach my $key (keys %hash) {\n     \
    \   if ($hash{$key} == $max) {\n            $result{$key} = $max;\n        }\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my %max;\n    my $max = 0;\n    my @letters = split(\"\
    \ \", $test);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \            %max = ();\n            $max{$letter} = $max;\n        } elsif ($histogram{$letter}\
    \ == $max) {\n            $max{$letter} = $max;\n        }\n    }\n    return\
    \ %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/\\s+/, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@test) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(\" \", $test);\n    my $max = 0;\n\
    \    foreach my $i (@array) {\n        if (exists $hash{$i}) {\n            $hash{$i}\
    \ += 1;\n        } else {\n            $hash{$i} = 1;\n        }\n        if ($hash{$i}\
    \ > $max) {\n            $max = $hash{$i};\n        }\n    }\n    my %result =\
    \ ();\n    foreach my $i (keys %hash) {\n        if ($hash{$i} == $max) {\n  \
    \          $result{$i} = $max;\n        }\n    }\n    return %result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n  \
    \      if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my %result;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $result{$i} = $max;\n        }\n    }\n    return %result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(' ', $test);\n    foreach my $word (@array)\
    \ {\n        $hash{$word}++;\n    }\n    my $max = 0;\n    my @max_keys;\n   \
    \ foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n        \
    \    $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $hash{$letter}++;\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @letters = split(\" \", $test);\n    foreach my $letter\
    \ (@letters) {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n    my %max_hash;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n     \
    \       $max = $hash{$key};\n            %max_hash = ($key => $max);\n       \
    \ }\n        elsif ($hash{$key} == $max) {\n            $max_hash{$key} = $max;\n\
    \        }\n    }\n    return %max_hash;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/\\s+/, $test);\n    foreach my $letter\
    \ (@array) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my(%hash);\n    my(@array) = split(/ /, $test);\n    foreach my $word (@array)\
    \ {\n        if (exists $hash{$word}) {\n            $hash{$word} += 1;\n    \
    \    } else {\n            $hash{$word} = 1;\n        }\n    }\n    return %hash;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n\
    \            $max = $histogram{$letter};\n        }\n    }\n    my %result;\n\
    \    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter} ==\
    \ $max) {\n            $result{$letter} = $max;\n        }\n    }\n    return\
    \ %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %count;\n    my %max;\n    foreach\
    \ my $letter (@letters) {\n        $count{$letter}++;\n    }\n    my $max = 0;\n\
    \    foreach my $key (keys %count) {\n        if ($count{$key} > $max) {\n   \
    \         $max = $count{$key};\n        }\n    }\n    foreach my $key (keys %count)\
    \ {\n        if ($count{$key} == $max) {\n            $max{$key} = $max;\n   \
    \     }\n    }\n    return %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b\
    \ a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"\
    t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %count;\n    my %max;\n    my $max\
    \ = 0;\n    foreach my $letter (@letters) {\n        $count{$letter}++;\n    \
    \    if ($count{$letter} > $max) {\n            $max = $count{$letter};\n    \
    \        %max = ();\n            $max{$letter} = $max;\n        } elsif ($count{$letter}\
    \ == $max) {\n            $max{$letter} = $max;\n        }\n    }\n    return\
    \ %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(' ', $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my @letters = split(/\\s+/, $test);\n    foreach my $letter\
    \ (@letters) {\n        $hist{$letter}++;\n    }\n    return \\%hist;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n  \
    \      if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    my $max = 0;\n    my @keys;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n     \
    \       $max = $hash{$key};\n            @keys = ();\n            push(@keys,\
    \ $key);\n        } elsif ($hash{$key} == $max) {\n            push(@keys, $key);\n\
    \        }\n    }\n    my %result;\n    foreach my $key (@keys) {\n        $result{$key}\
    \ = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $letter (@array)\
    \ {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n    my @max_keys;\n \
    \   foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n      \
    \      $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my %result;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $result{$i} = $max;\n        }\n    }\n    return %result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my %hash2 = ();\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n        }\n    }\n    foreach my $key (keys %hash) {\n     \
    \   if ($hash{$key} == $max) {\n            $hash2{$key} = $max;\n        }\n\
    \    }\n    return %hash2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"\
    a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" =>\
    \ 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %letter_count;\n    my %max_count;\n\
    \    foreach my $letter (@letters) {\n        $letter_count{$letter}++;\n    }\n\
    \    my $max = 0;\n    foreach my $letter (keys %letter_count) {\n        if ($letter_count{$letter}\
    \ > $max) {\n            $max = $letter_count{$letter};\n        }\n    }\n  \
    \  foreach my $letter (keys %letter_count) {\n        if ($letter_count{$letter}\
    \ == $max) {\n            $max_count{$letter} = $max;\n        }\n    }\n    return\
    \ %max_count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n\
    \            $max = $hist{$letter};\n            @max_letters = ($letter);\n \
    \       } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n\
    \        $result{$letter} = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histo{$letter}++;\n    }\n    my $max = 0;\n    my @maxes;\n\
    \    foreach my $key (keys %histo) {\n        if ($histo{$key} > $max) {\n   \
    \         $max = $histo{$key};\n            @maxes = ($key);\n        } elsif\
    \ ($histo{$key} == $max) {\n            push(@maxes, $key);\n        }\n    }\n\
    \    my %result;\n    foreach my $max (@maxes) {\n        $result{$max} = $max;\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/\\s+/, $test);\n    foreach my $word\
    \ (@array) {\n        $hash{$word}++;\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %letter_count;\n    foreach my $letter\
    \ (@letters) {\n        $letter_count{$letter}++;\n    }\n    my $max_count =\
    \ 0;\n    my @max_letters;\n    foreach my $letter (keys %letter_count) {\n  \
    \      if ($letter_count{$letter} > $max_count) {\n            $max_count = $letter_count{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($letter_count{$letter}\
    \ == $max_count) {\n            push @max_letters, $letter;\n        }\n    }\n\
    \    my %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
    \ = $max_count;\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(' ', $test);\n    my %counts;\n    my %max;\n    my $max\
    \ = 0;\n    foreach my $letter (@letters) {\n        $counts{$letter}++;\n   \
    \     if ($counts{$letter} > $max) {\n            $max = $counts{$letter};\n \
    \           %max = ($letter => $max);\n        } elsif ($counts{$letter} == $max)\
    \ {\n            $max{$letter} = $max;\n        }\n    }\n    return %max;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\\
    s+/, $test)) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max)\
    \ {\n            $max = $hist{$letter};\n            %max = ($letter => $max);\n\
    \        } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n\
    \        }\n    }\n    return %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
    \ %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \        }\n    }\n    my %result;\n    foreach my $key (keys %hash) {\n     \
    \   if ($hash{$key} == $max) {\n            $result{$key} = $max;\n        }\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @array = split(' ', $test);\n    my %hash = ();\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split / /, $test;\n    foreach my $letter (@array)\
    \ {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
    \ %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \        }\n    }\n    my %result;\n    foreach my $key (keys %hash) {\n     \
    \   if ($hash{$key} == $max) {\n            $result{$key} = $max;\n        }\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n\
    \            $max = $histogram{$letter};\n        }\n    }\n    my %result;\n\
    \    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter} ==\
    \ $max) {\n            $result{$letter} = $max;\n        }\n    }\n    return\
    \ %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my %hash2;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $hash2{$i} = $max;\n        }\n    }\n    return %hash2;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
    \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
    \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
    \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n     \
    \   if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@test) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my %result;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $result{$i} = $max;\n        }\n    }\n    return %result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hash{$letter}++;\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %count;\n    my %result;\n    my $max = 0;\n    my @words = split(/ /,\
    \ $test);\n    foreach my $word (@words) {\n        $count{$word}++;\n    }\n\
    \    foreach my $key (keys %count) {\n        if ($count{$key} > $max) {\n   \
    \         $max = $count{$key};\n        }\n    }\n    foreach my $key (keys %count)\
    \ {\n        if ($count{$key} == $max) {\n            $result{$key} = $max;\n\
    \        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/\\s+/, $test);\n    foreach my $i\
    \ (@array) {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n    \
    \    } else {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %hist;\n    foreach my $letter (@test)\
    \ {\n        $hist{$letter}++;\n    }\n    my @max = sort { $hist{$b} <=> $hist{$a}\
    \ } keys %hist;\n    my %max;\n    foreach my $letter (@max) {\n        if ($hist{$letter}\
    \ == $hist{$max[0]}) {\n            $max{$letter} = $hist{$letter};\n        }\n\
    \    }\n    return %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"\
    a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" =>\
    \ 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my %hash2;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $hash2{$i} = $max;\n        }\n    }\n    return %hash2;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @arr = split(/ /, $test);\n    foreach my $i (@arr)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $item (@array)\
    \ {\n        if (exists $hash{$item}) {\n            $hash{$item}++;\n       \
    \ } else {\n            $hash{$item} = 1;\n        }\n    }\n    return %hash;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %test;\n    foreach my $test(@test)\
    \ {\n        $test{$test}++;\n    }\n    my $max = 0;\n    my %max;\n    foreach\
    \ my $test(keys %test) {\n        if ($test{$test} > $max) {\n            $max\
    \ = $test{$test};\n            %max = ();\n            $max{$test} = $test{$test};\n\
    \        } elsif ($test{$test} == $max) {\n            $max{$test} = $test{$test};\n\
    \        }\n    }\n    return %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %count;\n    foreach my $word (@test)\
    \ {\n        $count{$word}++;\n    }\n    my $max = 0;\n    my @max_keys;\n  \
    \  foreach my $key (keys %count) {\n        if ($count{$key} > $max) {\n     \
    \       $max = $count{$key};\n            @max_keys = ($key);\n        } elsif\
    \ ($count{$key} == $max) {\n            push @max_keys, $key;\n        }\n   \
    \ }\n    my %result;\n    foreach my $key (@max_keys) {\n        $result{$key}\
    \ = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/\\s+/, $test);\n    my %counts;\n    foreach my $letter\
    \ (@letters) {\n        $counts{$letter}++;\n    }\n    my $max = 0;\n    my %max_counts;\n\
    \    foreach my $letter (keys %counts) {\n        if ($counts{$letter} > $max)\
    \ {\n            $max = $counts{$letter};\n            %max_counts = ($letter\
    \ => $max);\n        } elsif ($counts{$letter} == $max) {\n            $max_counts{$letter}\
    \ = $max;\n        }\n    }\n    return %max_counts;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram = ();\n    my @letters = split(/ /, $test);\n    foreach my\
    \ $letter (@letters) {\n        if (exists $histogram{$letter}) {\n          \
    \  $histogram{$letter}++;\n        } else {\n            $histogram{$letter} =\
    \ 1;\n        }\n    }\n    my $max = 0;\n    my @max_letters = ();\n    foreach\
    \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n\
    \            $max = $histogram{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($histogram{$letter} == $max) {\n            push(@max_letters,\
    \ $letter);\n        }\n    }\n    my %result = ();\n    foreach my $letter (@max_letters)\
    \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
    \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
    \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters\
    \ = ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push(@max_letters,\
    \ $letter);\n        }\n    }\n    my %result;\n    foreach my $letter (@max_letters)\
    \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if(exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    my $max = 0;\n    my %max_hash;\n\
    \    foreach my $key (keys %hash) {\n        if($hash{$key} > $max) {\n      \
    \      $max = $hash{$key};\n            %max_hash = ();\n            $max_hash{$key}\
    \ = $hash{$key};\n        } elsif($hash{$key} == $max) {\n            $max_hash{$key}\
    \ = $hash{$key};\n        }\n    }\n    return %max_hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@test) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @keys = keys %hash;\n\
    \    foreach my $i (@keys) {\n        if ($hash{$i} > $max) {\n            $max\
    \ = $hash{$i};\n        }\n    }\n    my %result;\n    foreach my $i (@keys) {\n\
    \        if ($hash{$i} == $max) {\n            $result{$i} = $max;\n        }\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %test;\n    foreach my $test (@test)\
    \ {\n        $test{$test}++;\n    }\n    my @max = sort {$test{$b} <=> $test{$a}}\
    \ keys %test;\n    my %max;\n    foreach my $max (@max) {\n        if ($test{$max}\
    \ == $test{$max[0]}) {\n            $max{$max} = $test{$max};\n        }\n   \
    \ }\n    return %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        if (exists $hash{$letter}) {\n            $hash{$letter} += 1;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    my $max\
    \ = 0;\n    my @max_letters;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n            @max_letters = ($key);\n\
    \        } elsif ($hash{$key} == $max) {\n            push(@max_letters, $key);\n\
    \        }\n    }\n    my %max_hash;\n    foreach my $letter (@max_letters) {\n\
    \        $max_hash{$letter} = $max;\n    }\n    return %max_hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my %hash2;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $hash2{$i} = $max;\n        }\n    }\n    return %hash2;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my @letters = split(/\\s+/, $test);\n    foreach my $letter\
    \ (@letters) {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n\
    \            $max = $hist{$letter};\n            @max_letters = ($letter);\n \
    \       } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n\
    \        $result{$letter} = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram = ();\n    my @letters = split(/ /, $test);\n    foreach my\
    \ $letter (@letters) {\n        if (exists $histogram{$letter}) {\n          \
    \  $histogram{$letter} += 1;\n        } else {\n            $histogram{$letter}\
    \ = 1;\n        }\n    }\n    return %histogram;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    return %hash;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %count;\n    my %max;\n    my $max\
    \ = 0;\n    foreach my $letter (@letters) {\n        $count{$letter}++;\n    \
    \    if ($count{$letter} > $max) {\n            $max = $count{$letter};\n    \
    \        %max = ($letter => $max);\n        } elsif ($count{$letter} == $max)\
    \ {\n            $max{$letter} = $max;\n        }\n    }\n    return %max;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my %hash2;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $hash2{$i} = $max;\n        }\n    }\n    return %hash2;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %count;\n    my %max;\n    my $max = 0;\n    my @letters = split(/ /,\
    \ $test);\n    foreach my $letter (@letters) {\n        $count{$letter}++;\n \
    \       if ($count{$letter} > $max) {\n            $max = $count{$letter};\n \
    \           %max = ($letter => $max);\n        } elsif ($count{$letter} == $max)\
    \ {\n            $max{$letter} = $max;\n        }\n    }\n    return %max;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n    my @max_keys;\n \
    \   foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n      \
    \      $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push(@max_keys, $key);\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram = ();\n    my @letters = split(/ /, $test);\n    foreach my\
    \ $letter (@letters) {\n        if (exists $histogram{$letter}) {\n          \
    \  $histogram{$letter} += 1;\n        } else {\n            $histogram{$letter}\
    \ = 1;\n        }\n    }\n    return %histogram;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\\
    s+/, $test)) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max)\
    \ {\n            $max = $hist{$letter};\n            %max = ($letter => $max);\n\
    \        } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n\
    \        }\n    }\n    return %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (!exists $hash{$i}) {\n            $hash{$i} = 1;\n        } else\
    \ {\n            $hash{$i} += 1;\n        }\n    }\n    my $max = 0;\n    my @max_keys\
    \ = ();\n    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n\
    \            $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif\
    \ ($hash{$key} == $max) {\n            push(@max_keys, $key);\n        }\n   \
    \ }\n    my %result = ();\n    foreach my $key (@max_keys) {\n        $result{$key}\
    \ = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(' ', $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(' ', $test);\n    foreach my $word\
    \ (@array) {\n        if (exists $hash{$word}) {\n            $hash{$word} +=\
    \ 1;\n        } else {\n            $hash{$word} = 1;\n        }\n    }\n    return\
    \ %hash;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    return %hash;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %result;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $result{$letter}++;\n    }\n    return %result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n  \
    \      if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/\\s+/, $test);\n    my %hist = ();\n    foreach my $letter\
    \ (@letters) {\n        if (exists $hist{$letter}) {\n            $hist{$letter}++;\n\
    \        } else {\n            $hist{$letter} = 1;\n        }\n    }\n    my $max\
    \ = 0;\n    my @max_letters = ();\n    foreach my $letter (keys %hist) {\n   \
    \     if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n     \
    \       @max_letters = ($letter);\n        } elsif ($hist{$letter} == $max) {\n\
    \            push(@max_letters, $letter);\n        }\n    }\n    my %result =\
    \ ();\n    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my(%hash);\n    my(@array) = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my($max) = 0;\n    foreach my $i (keys %hash)\
    \ {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n\
    \    }\n    my(%result);\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            $result{$i} = $max;\n        }\n    }\n    return %result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @array = split(/ /, $test);\n    my %hash = ();\n    my $max = 0;\n  \
    \  my @max_keys = ();\n    foreach my $key (@array) {\n        if (exists $hash{$key})\
    \ {\n            $hash{$key} += 1;\n        } else {\n            $hash{$key}\
    \ = 1;\n        }\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \            @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n  \
    \          push(@max_keys, $key);\n        }\n    }\n    my %result = ();\n  \
    \  foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n    return\
    \ %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@test) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/\\s+/, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@test) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram = ();\n    my @letters = split(/ /, $test);\n    foreach my\
    \ $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %count;\n    my %result;\n    my $max = 0;\n    my @words = split(/ /,\
    \ $test);\n    foreach my $word (@words) {\n        $count{$word}++;\n    }\n\
    \    foreach my $key (keys %count) {\n        if ($count{$key} > $max) {\n   \
    \         $max = $count{$key};\n        }\n    }\n    foreach my $key (keys %count)\
    \ {\n        if ($count{$key} == $max) {\n            $result{$key} = $max;\n\
    \        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(' ', $test);\n    my %count;\n    my %result;\n    my\
    \ $max = 0;\n    foreach my $letter (@letters) {\n        $count{$letter}++;\n\
    \        if ($count{$letter} > $max) {\n            $max = $count{$letter};\n\
    \        }\n    }\n    foreach my $letter (keys %count) {\n        if ($count{$letter}\
    \ == $max) {\n            $result{$letter} = $max;\n        }\n    }\n    return\
    \ %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @keys = keys %hash;\n\
    \    foreach my $i (@keys) {\n        if ($hash{$i} > $max) {\n            $max\
    \ = $hash{$i};\n        }\n    }\n    my %hash2;\n    foreach my $i (@keys) {\n\
    \        if ($hash{$i} == $max) {\n            $hash2{$i} = $max;\n        }\n\
    \    }\n    return %hash2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"\
    a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" =>\
    \ 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @words = split(/ /, $test);\n    my %count;\n    foreach my $word (@words)\
    \ {\n        $count{$word}++;\n    }\n    my $max = 0;\n    foreach my $word (keys\
    \ %count) {\n        if ($count{$word} > $max) {\n            $max = $count{$word};\n\
    \        }\n    }\n    my %result;\n    foreach my $word (keys %count) {\n   \
    \     if ($count{$word} == $max) {\n            $result{$word} = $max;\n     \
    \   }\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b\
    \ a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"\
    t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
    \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
    \        }\n    }\n    my %max_hist;\n    foreach my $key (keys %hist) {\n   \
    \     if ($hist{$key} == $max) {\n            $max_hist{$key} = $max;\n      \
    \  }\n    }\n    return %max_hist;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    foreach my $letter (split(/\\s+/, $test)) {\n       \
    \ $histogram{$letter}++;\n    }\n    return %histogram;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $word (@array)\
    \ {\n        if (exists $hash{$word}) {\n            $hash{$word} += 1;\n    \
    \    } else {\n            $hash{$word} = 1;\n        }\n    }\n    return %hash;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    my $max = 0;\n    my @max_keys;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n     \
    \       $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif\
    \ ($hash{$key} == $max) {\n            push @max_keys, $key;\n        }\n    }\n\
    \    my %result;\n    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $word (@array)\
    \ {\n        if (exists $hash{$word}) {\n            $hash{$word}++;\n       \
    \ } else {\n            $hash{$word} = 1;\n        }\n    }\n    return %hash;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 255
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = max(values %hash);\n    my @keys\
    \ = grep { $hash{$_} == $max } keys %hash;\n    my %result;\n    foreach my $key\
    \ (@keys) {\n        $result{$key} = $max;\n    }\n    return %result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n  \
    \      if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpssqips3z.pl line 22.

    '
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @keys = keys %hash;\n\
    \    foreach my $key (@keys) {\n        if ($hash{$key} > $max) {\n          \
    \  $max = $hash{$key};\n        }\n    }\n    my %result;\n    foreach my $key\
    \ (@keys) {\n        if ($hash{$key} == $max) {\n            $result{$key} = $max;\n\
    \        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    return %hash;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my %max;\n    my $max = 0;\n    my @letters = split(/ /, $test);\n\
    \    foreach my $letter (@letters) {\n        $hist{$letter}++;\n        if ($hist{$letter}\
    \ > $max) {\n            $max = $hist{$letter};\n            %max = ($letter =>\
    \ $max);\n        } elsif ($hist{$letter} == $max) {\n            $max{$letter}\
    \ = $max;\n        }\n    }\n    return %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %counts;\n    foreach my $letter\
    \ (@letters) {\n        $counts{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $letter (keys %counts) {\n        if ($counts{$letter} > $max) {\n      \
    \      $max = $counts{$letter};\n        }\n    }\n    my %maxes;\n    foreach\
    \ my $letter (keys %counts) {\n        if ($counts{$letter} == $max) {\n     \
    \       $maxes{$letter} = $max;\n        }\n    }\n    return %maxes;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n  \
    \      if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @arr = split(/ /, $test);\n    foreach my $letter (@arr)\
    \ {\n        if (exists $hash{$letter}) {\n            $hash{$letter} += 1;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @arr = split(\" \", $test);\n    foreach my $i (@arr) {\n\
    \        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
    \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
    \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters\
    \ = ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push(@max_letters,\
    \ $letter);\n        }\n    }\n    my %result;\n    foreach my $letter (@max_letters)\
    \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    foreach my $char (split(/ /, $test)) {\n        $hash{$char}++;\n\
    \    }\n    my $max = 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n        }\n    }\n    my %result;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n    \
    \        $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n  \
    \      if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %test;\n    foreach my $i (@test) {\n\
    \        $test{$i}++;\n    }\n    my @keys = sort { $test{$b} <=> $test{$a} }\
    \ keys %test;\n    my %result;\n    foreach my $i (@keys) {\n        if ($test{$i}\
    \ == $test{$keys[0]}) {\n            $result{$i} = $test{$i};\n        }\n   \
    \ }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"\
    a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" =>\
    \ 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n\
    \            $max = $histogram{$letter};\n        }\n    }\n    my %result;\n\
    \    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter} ==\
    \ $max) {\n            $result{$letter} = $max;\n        }\n    }\n    return\
    \ %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    my $max = 0;\n    my @keys\
    \ = keys %hash;\n    foreach my $i (@keys) {\n        if ($hash{$i} > $max) {\n\
    \            $max = $hash{$i};\n        }\n    }\n    my %result;\n    foreach\
    \ my $i (@keys) {\n        if ($hash{$i} == $max) {\n            $result{$i} =\
    \ $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/\\s+/, $test);\n    my %counts;\n    foreach my $letter\
    \ (@letters) {\n        $counts{$letter}++;\n    }\n    my %max;\n    foreach\
    \ my $letter (keys %counts) {\n        if (not %max or $counts{$letter} > $max{$letter})\
    \ {\n            %max = ($letter => $counts{$letter});\n        }\n    }\n   \
    \ return %max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(' ', $test);\n    my $max = 0;\n    foreach\
    \ my $i (@array) {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n\
    \        } else {\n            $hash{$i} = 1;\n        }\n        if ($hash{$i}\
    \ > $max) {\n            $max = $hash{$i};\n        }\n    }\n    my %result;\n\
    \    foreach my $i (keys %hash) {\n        if ($hash{$i} == $max) {\n        \
    \    $result{$i} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
    \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
    \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n     \
    \   if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(' ', $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @test = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@test) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n\
    \            $max = $histogram{$letter};\n        }\n    }\n    my %max_histogram;\n\
    \    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter} ==\
    \ $max) {\n            $max_histogram{$letter} = $max;\n        }\n    }\n   \
    \ return %max_histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"\
    a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" =>\
    \ 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my $max = 0;\n    my @max_keys = ();\n    foreach my\
    \ $char (split(/ /, $test)) {\n        if (exists $hash{$char}) {\n          \
    \  $hash{$char} += 1;\n        } else {\n            $hash{$char} = 1;\n     \
    \   }\n        if ($hash{$char} > $max) {\n            $max = $hash{$char};\n\
    \            @max_keys = ($char);\n        } elsif ($hash{$char} == $max) {\n\
    \            push(@max_keys, $char);\n        }\n    }\n    my %result = ();\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram = ();\n    my @letters = split(/ /, $test);\n    foreach my\
    \ $letter (@letters) {\n        if (exists $histogram{$letter}) {\n          \
    \  $histogram{$letter}++;\n        } else {\n            $histogram{$letter} =\
    \ 1;\n        }\n    }\n    return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n\
    \            $max = $hist{$letter};\n            @max_letters = ($letter);\n \
    \       } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n\
    \        $result{$letter} = $max;\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2,\
    \ \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(\" \", $test);\n    foreach my $word (@array)\
    \ {\n        if (exists $hash{$word}) {\n            $hash{$word} += 1;\n    \
    \    } else {\n            $hash{$word} = 1;\n        }\n    }\n    return %hash;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n      \
    \      $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n     \
    \       $result{$key} = $max;\n        }\n    }\n    return %result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
    \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
    \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n     \
    \   if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n\
    \    }\n    return %result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"\
    ),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\"\
    \ => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" =>\
    \ 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my @letters = split(/ /, $test);\n    my %histogram = ();\n    foreach my\
    \ $letter (@letters) {\n        if (exists $histogram{$letter}) {\n          \
    \  $histogram{$letter}++;\n        } else {\n            $histogram{$letter} =\
    \ 1;\n        }\n    }\n    return %histogram;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a\
    \ b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @arr = split(\" \", $test);\n    foreach my $i (@arr) {\n\
    \        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else {\n\
    \            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @array = split(' ', $test);\n    foreach my $item (@array)\
    \ {\n        if (exists $hash{$item}) {\n            $hash{$item} += 1;\n    \
    \    } else {\n            $hash{$item} = 1;\n        }\n    }\n    return %hash;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
    \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"\
    b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
- exit_code: 1
  program: "# Given a string representing a space separated lowercase letters, return\
    \ a hash\n# of the letter with the most repetition and containing the corresponding\
    \ count.\n# If several letters have the same occurrence, return all of them.\n\
    # Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
    # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a\
    \ b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"\
    b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n\
    \    my %hash;\n    my @arr = split(/ /, $test);\n    foreach my $i (@arr) {\n\
    \        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"\
    a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\"\
    \ => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4}))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078199
