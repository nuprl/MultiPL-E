name: HumanEval_105_by_length
language: pl
prompt: "# Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n# reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length([2, 1, 1,\
  \ 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
  , \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length([])\n\
  # []\n# If the array has any strange number ignore it:\n# >>> by_length([1, -1,\
  \ 55])\n# [\"One\"]\nsub by_length {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n\
  \        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\"\
  , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ -1, 55]),[\"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"])) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted = sort {$a <=> $b} @$arr;\n    my @reversed = reverse\
    \ @sorted;\n    my @result;\n    for my $i (@reversed) {\n        if ($i == 1)\
    \ {\n            push @result, \"One\";\n        } elsif ($i == 2) {\n       \
    \     push @result, \"Two\";\n        } elsif ($i == 3) {\n            push @result,\
    \ \"Three\";\n        } elsif ($i == 4) {\n            push @result, \"Four\"\
    ;\n        } elsif ($i == 5) {\n            push @result, \"Five\";\n        }\
    \ elsif ($i == 6) {\n            push @result, \"Six\";\n        } elsif ($i ==\
    \ 7) {\n            push @result, \"Seven\";\n        } elsif ($i == 8) {\n  \
    \          push @result, \"Eight\";\n        } elsif ($i == 9) {\n           \
    \ push @result, \"Nine\";\n        }\n    }\n    return @result;\n}", "    my\
    \ @result = ();\n    my @numbers = (1..9);\n    my @names = (\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n \
    \   my %numbers_to_names = ();\n    @numbers_to_names{@numbers} = @names;\n  \
    \  my @sorted = sort { $a <=> $b } @$arr;\n    for my $num (@sorted) {\n     \
    \   if (exists $numbers_to_names{$num}) {\n            push @result, $numbers_to_names{$num};\n\
    \        }\n    }\n    return reverse @result;\n}", "    my @sorted = sort { $a\
    \ <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @reversed = reverse @sorted;\n\
    \    my @names = map { $number_names{$_} } @reversed;\n    return \\@names;\n}",
  "    my @sorted = sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my\
    \ @reversed = reverse @sorted;\n    my @names = map { $digits{$_} } @reversed;\n\
    \    return \\@names;\n}", "    my @result = ();\n    my @sorted = sort { $a <=>\
    \ $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my %numbers = (\n        1 => \"\
    One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\"\
    ,\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n  \
    \      8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    for my $num (reverse\
    \ @sorted) {\n        push @result, $numbers{$num};\n    }\n    return \\@result;\n\
    }", "    my @sorted = sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n\
    \    my %map = (\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"\
    Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\"\
    ,\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n\
    \    );\n    my @result = map { $map{$_} } reverse @sorted;\n    return \\@result;\n\
    }", "    my @sorted = sort {$a <=> $b} grep {$_ >= 1 && $_ <= 9} @$arr;\n    my\
    \ @reversed = reverse @sorted;\n    my @result = map {$_ == 1 ? \"One\" : $_ ==\
    \ 2 ? \"Two\" : $_ == 3 ? \"Three\" : $_ == 4 ? \"Four\" : $_ == 5 ? \"Five\"\
    \ : $_ == 6 ? \"Six\" : $_ == 7 ? \"Seven\" : $_ == 8 ? \"Eight\" : $_ == 9 ?\
    \ \"Nine\" : $_} @reversed;\n    return \\@result;\n}", "    my @sorted = sort\
    \ { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @reversed = reverse\
    \ @sorted;\n    my @names = map { $digits[$_ - 1] } @reversed;\n    return \\\
    @names;\n}", "    my @sorted = sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 }\
    \ @$arr;\n    my @reversed = reverse @sorted;\n    my @names = map { $names[$_]\
    \ } @reversed;\n    return \\@names;\n}", "    my @sorted = sort { $a <=> $b }\
    \ grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @reversed = reverse @sorted;\n  \
    \  my @result = map { $numbers{$_} } @reversed;\n    return \\@result;\n}", " \
    \   my @sorted = sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my\
    \ @reversed = reverse @sorted;\n    my @names = map { $names[$_] } @reversed;\n\
    \    return \\@names;\n}", "    my @sorted = sort { $a <=> $b } grep { $_ >= 1\
    \ && $_ <= 9 } @$arr;\n    my @reversed = reverse @sorted;\n    my @names = map\
    \ { $digit_names[$_] } @reversed;\n    return \\@names;\n}", "    my @result =\
    \ ();\n    my @nums = (1, 2, 3, 4, 5, 6, 7, 8, 9);\n    my @names = (\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n    my %nums_names = ();\n    for (my $i = 0; $i < scalar(@nums); $i++) {\n\
    \        $nums_names{$nums[$i]} = $names[$i];\n    }\n    foreach my $num (@$arr)\
    \ {\n        if (exists $nums_names{$num}) {\n            push @result, $nums_names{$num};\n\
    \        }\n    }\n    return reverse @result;\n}", "    my @sorted = sort { $a\
    \ <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @reversed = reverse @sorted;\n\
    \    my @result = map { $digits[$_] } @reversed;\n    return \\@result;\n}", " \
    \   my @result = ();\n    my @numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9);\n    my @names\
    \ = (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\");\n    my %map = ();\n    for (my $i = 0; $i < @numbers; $i++) {\n\
    \        $map{$numbers[$i]} = $names[$i];\n    }\n    for (my $i = 0; $i < @$arr;\
    \ $i++) {\n        if (exists $map{$arr->[$i]}) {\n            push @result, $map{$arr->[$i]};\n\
    \        }\n    }\n    return \\@result;\n}", "    my @sorted = sort {$a <=> $b}\
    \ grep {$_ >= 1 && $_ <= 9} @$arr;\n    my @reversed = reverse @sorted;\n    my\
    \ @names = map {$_ == 1 ? \"One\" : $_ == 2 ? \"Two\" : $_ == 3 ? \"Three\" :\
    \ $_ == 4 ? \"Four\" : $_ == 5 ? \"Five\" : $_ == 6 ? \"Six\" : $_ == 7 ? \"Seven\"\
    \ : $_ == 8 ? \"Eight\" : $_ == 9 ? \"Nine\" : \"\"} @reversed;\n    return \\\
    @names;\n}", "    my @ret = ();\n    my @nums = (1..9);\n    my @names = qw(One\
    \ Two Three Four Five Six Seven Eight Nine);\n    my %nums_to_names = map { $nums[$_]\
    \ => $names[$_] } (0..$#nums);\n    for my $num (@$arr) {\n        if (exists\
    \ $nums_to_names{$num}) {\n            push @ret, $nums_to_names{$num};\n    \
    \    }\n    }\n    return reverse sort @ret;\n}", "    my @sorted = sort { $a\
    \ <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @reversed = reverse @sorted;\n\
    \    my @names = map { $names[$_] } @reversed;\n    return \\@names;\n}", "  \
    \  my @sorted = sort {$a <=> $b} grep {$_ >= 1 && $_ <= 9} @$arr;\n    my @reversed\
    \ = reverse @sorted;\n    my @result = map {$_ == 1 ? \"One\" : $_ == 2 ? \"Two\"\
    \ : $_ == 3 ? \"Three\" : $_ == 4 ? \"Four\" : $_ == 5 ? \"Five\" : $_ == 6 ?\
    \ \"Six\" : $_ == 7 ? \"Seven\" : $_ == 8 ? \"Eight\" : $_ == 9 ? \"Nine\" : $_}\
    \ @reversed;\n    return \\@result;\n}", "    my @sorted = sort {$a <=> $b} grep\
    \ {$_ > 0 && $_ < 10} @$arr;\n    my @reversed = reverse @sorted;\n    my @result\
    \ = map {$_ == 1 ? \"One\" : $_ == 2 ? \"Two\" : $_ == 3 ? \"Three\" : $_ == 4\
    \ ? \"Four\" : $_ == 5 ? \"Five\" : $_ == 6 ? \"Six\" : $_ == 7 ? \"Seven\" :\
    \ $_ == 8 ? \"Eight\" : $_ == 9 ? \"Nine\" : $_} @reversed;\n    return \\@result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
