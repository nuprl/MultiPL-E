name: HumanEval_110_exchange
language: pl
prompt: "# In this problem, you will implement a function that takes two arrays of\
  \ numbers,\n# and determines whether it is possible to perform an exchange of elements\n\
  # between them to make lst1 an array of only even numbers.\n# There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n# If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n# all the elements of\
  \ lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n\
  # >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange([1, 2, 3,\
  \ 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\n\
  sub exchange {\n    my($lst1, $lst2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4], [1, 5, 3, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"\
  YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 7, 3], [2, 6, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200,\
  \ 200]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my $lst1_even = 0;\n    my $lst2_even = 0;\n    my $lst1_odd =\
    \ 0;\n    my $lst2_odd = 0;\n    for my $i (@$lst1) {\n        if ($i % 2 == 0)\
    \ {\n            $lst1_even++;\n        } else {\n            $lst1_odd++;\n \
    \       }\n    }\n    for my $i (@$lst2) {\n        if ($i % 2 == 0) {\n     \
    \       $lst2_even++;\n        } else {\n            $lst2_odd++;\n        }\n\
    \    }\n    if ($lst1_even == 0) {\n        return \"NO\";\n    }\n    if ($lst1_odd\
    \ == 0) {\n        return \"YES\";\n    }\n    if ($lst1_even == $lst2_odd) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}", "    my $lst1_odd = grep\
    \ { $_ % 2 } @$lst1;\n    my $lst2_even = grep { $_ % 2 == 0 } @$lst2;\n    return\
    \ $lst1_odd <= $lst2_even ? \"YES\" : \"NO\";\n}", "    my $lst1_odd = grep {\
    \ $_ % 2 } @$lst1;\n    my $lst2_even = grep { $_ % 2 == 0 } @$lst2;\n    return\
    \ $lst1_odd <= $lst2_even ? \"YES\" : \"NO\";\n}", "    my $even = 0;\n    my\
    \ $odd = 0;\n    for my $i (@$lst1) {\n        if ($i % 2 == 0) {\n          \
    \  $even++;\n        } else {\n            $odd++;\n        }\n    }\n    for\
    \ my $i (@$lst2) {\n        if ($i % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n    }\n    if ($even % 2 == 0 and\
    \ $odd % 2 == 0) {\n        return \"YES\";\n    } else {\n        return \"NO\"\
    ;\n    }\n}", "    my $count = 0;\n    foreach my $i (@$lst1) {\n        if ($i\
    \ % 2 == 1) {\n            $count++;\n        }\n    }\n    my $count2 = 0;\n\
    \    foreach my $i (@$lst2) {\n        if ($i % 2 == 0) {\n            $count2++;\n\
    \        }\n    }\n    if ($count == $count2) {\n        return \"YES\";\n   \
    \ } else {\n        return \"NO\";\n    }\n}", "    my $num_odd = 0;\n    my $num_even\
    \ = 0;\n    foreach my $i (@$lst1) {\n        if ($i % 2 == 0) {\n           \
    \ $num_even++;\n        } else {\n            $num_odd++;\n        }\n    }\n\
    \    foreach my $i (@$lst2) {\n        if ($i % 2 == 0) {\n            $num_even++;\n\
    \        } else {\n            $num_odd++;\n        }\n    }\n    if ($num_even\
    \ > $num_odd) {\n        return \"YES\";\n    } else {\n        return \"NO\"\
    ;\n    }\n}", "    my $i = 0;\n    my $j = 0;\n    my $lst1_len = scalar @$lst1;\n\
    \    my $lst2_len = scalar @$lst2;\n    while ($i < $lst1_len && $j < $lst2_len)\
    \ {\n        if ($lst1->[$i] % 2 == 0) {\n            $i++;\n        } elsif ($lst2->[$j]\
    \ % 2 == 0) {\n            $lst1->[$i] = $lst2->[$j];\n            $i++;\n   \
    \         $j++;\n        } else {\n            $j++;\n        }\n    }\n    if\
    \ ($i == $lst1_len) {\n        return \"YES\";\n    } else {\n        return \"\
    NO\";\n    }\n}", "    my $count = 0;\n    for my $i (0..$#$lst1) {\n        if\
    \ ($lst1->[$i] % 2 == 1) {\n            for my $j (0..$#$lst2) {\n           \
    \     if ($lst2->[$j] % 2 == 0) {\n                    $lst1->[$i] = $lst2->[$j];\n\
    \                    $lst2->[$j] = 1;\n                    $count++;\n       \
    \             last;\n                }\n            }\n        }\n    }\n    if\
    \ ($count == 0) {\n        return \"NO\";\n    } else {\n        return \"YES\"\
    ;\n    }\n}", "    my $even = 0;\n    my $odd = 0;\n    foreach my $i (@$lst1)\
    \ {\n        if ($i % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    foreach my $i (@$lst2) {\n        if ($i\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    if ($even % 2 == 0) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}", "    my $even = 0;\n    my $odd = 0;\n\
    \    foreach my $i (@$lst1) {\n        if ($i % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    foreach my $i (@$lst2)\
    \ {\n        if ($i % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    if ($even % 2 == 0 && $odd % 2 == 0) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", " \
    \   my $lst1_odd = 0;\n    my $lst2_even = 0;\n    for my $i (0..$#$lst1) {\n\
    \        $lst1_odd++ if $lst1->[$i] % 2;\n        $lst2_even++ if $lst2->[$i]\
    \ % 2 == 0;\n    }\n    return \"YES\" if $lst1_odd == $lst2_even;\n    return\
    \ \"NO\";\n}", "    my $lst1_odd = 0;\n    my $lst2_even = 0;\n    for my $i (0..$#$lst1)\
    \ {\n        if ($lst1->[$i] % 2 == 1) {\n            $lst1_odd = 1;\n       \
    \ }\n    }\n    for my $i (0..$#$lst2) {\n        if ($lst2->[$i] % 2 == 0) {\n\
    \            $lst2_even = 1;\n        }\n    }\n    if ($lst1_odd && $lst2_even)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $flag = 0;\n    foreach my $i (0..$#{$lst1}) {\n        if ($lst1->[$i]\
    \ % 2 == 1) {\n            foreach my $j (0..$#{$lst2}) {\n                if\
    \ ($lst2->[$j] % 2 == 0) {\n                    $lst1->[$i] = $lst2->[$j];\n \
    \                   $lst2->[$j] = $lst1->[$i];\n                    $flag = 1;\n\
    \                    last;\n                }\n            }\n        }\n    \
    \    if ($flag == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}", "    my $lst1_odd = 0;\n    my $lst2_even = 0;\n    for my $i\
    \ (0..$#$lst1) {\n        if ($lst1->[$i] % 2 == 1) {\n            $lst1_odd =\
    \ 1;\n        }\n    }\n    for my $i (0..$#$lst2) {\n        if ($lst2->[$i]\
    \ % 2 == 0) {\n            $lst2_even = 1;\n        }\n    }\n    if ($lst1_odd\
    \ && $lst2_even) {\n        return \"YES\";\n    } else {\n        return \"NO\"\
    ;\n    }\n}", "    my $lst1_odd = grep { $_ % 2 } @$lst1;\n    my $lst2_even =\
    \ grep { $_ % 2 == 0 } @$lst2;\n    return $lst1_odd <= $lst2_even ? \"YES\" :\
    \ \"NO\";\n}", "    my $even = 0;\n    my $odd = 0;\n    for my $i (@$lst1) {\n\
    \        if ($i % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    for my $i (@$lst2) {\n        if ($i % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    if ($even % 2 == 0) {\n        return \"YES\";\n    } else {\n   \
    \     return \"NO\";\n    }\n}", "    my $count = 0;\n    for my $i (0..$#$lst1)\
    \ {\n        if ($lst1->[$i] % 2 == 1) {\n            for my $j (0..$#$lst2) {\n\
    \                if ($lst2->[$j] % 2 == 0) {\n                    $lst1->[$i]\
    \ = $lst2->[$j];\n                    $lst2->[$j] = $lst1->[$i];\n           \
    \         $count++;\n                    last;\n                }\n          \
    \  }\n        }\n    }\n    if ($count == 0) {\n        return \"YES\";\n    }\
    \ else {\n        return \"NO\";\n    }\n}", "    my $result = \"NO\";\n    my\
    \ $i = 0;\n    while ($i < scalar(@$lst1)) {\n        if ($lst1->[$i] % 2 == 1)\
    \ {\n            my $j = 0;\n            while ($j < scalar(@$lst2)) {\n     \
    \           if ($lst2->[$j] % 2 == 0) {\n                    my $tmp = $lst1->[$i];\n\
    \                    $lst1->[$i] = $lst2->[$j];\n                    $lst2->[$j]\
    \ = $tmp;\n                    $result = \"YES\";\n                    last;\n\
    \                }\n                $j++;\n            }\n        }\n        $i++;\n\
    \    }\n    return $result;\n}", "    my $exchange = 0;\n    my $i = 0;\n    while\
    \ ($i < scalar(@$lst1)) {\n        if ($lst1->[$i] % 2 != 0) {\n            my\
    \ $j = 0;\n            while ($j < scalar(@$lst2)) {\n                if ($lst2->[$j]\
    \ % 2 == 0) {\n                    $lst1->[$i] = $lst2->[$j];\n              \
    \      $lst2->[$j] = $lst1->[$i];\n                    $exchange = 1;\n      \
    \              last;\n                }\n                $j++;\n            }\n\
    \        }\n        $i++;\n    }\n    if ($exchange == 1) {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my $count = 0;\n\
    \    my $count2 = 0;\n    for my $i (0..$#{$lst1}) {\n        if ($lst1->[$i]\
    \ % 2 == 0) {\n            $count++;\n        }\n    }\n    for my $i (0..$#{$lst2})\
    \ {\n        if ($lst2->[$i] % 2 == 0) {\n            $count2++;\n        }\n\
    \    }\n    if ($count == $#{$lst1} + 1) {\n        return \"YES\";\n    }\n \
    \   elsif ($count2 == $#{$lst2} + 1) {\n        return \"YES\";\n    }\n    else\
    \ {\n        return \"NO\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
