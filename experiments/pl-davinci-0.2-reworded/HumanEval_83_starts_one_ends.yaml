name: HumanEval_83_starts_one_ends
language: pl
prompt: "# Given a positive integer n, return the count of the numbers of n-digit\n\
  # positive integers that start or end with 1.\nsub starts_one_ends {\n    my($n)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n\
  \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(2),18)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += 10 ** ($i - 1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10 ** ($i - 1);\n    }\n\
    \    return $count;\n}", "    return 0 if $n < 1;\n    return 1 if $n == 1;\n\
    \    return 10 if $n == 2;\n    return 9 * 9**($n - 2);\n}", "    my $count =\
    \ 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return\
    \ starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}", "    return 0 if $n\
    \ == 0;\n    return 1 if $n == 1;\n    return 10 if $n == 2;\n    return 9 + starts_one_ends($n\
    \ - 1);\n}", "    return 0 if $n < 1;\n    return 1 if $n == 1;\n    return 10\
    \ * starts_one_ends($n - 1) + 10**($n - 1);\n}", "    my $count = 0;\n    my $i\
    \ = 1;\n    while ($i < $n) {\n        $count += 9 * 10 ** ($i - 1);\n       \
    \ $i++;\n    }\n    $count += 10 ** ($n - 1);\n    return $count;\n}", "    my\
    \ $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n\
    \    return $count;\n}", "    return 0 if $n == 0;\n    return 9 if $n == 1;\n\
    \    return 9 * 9 * (10 ** ($n - 2));\n}", "    my $count = 0;\n    for my $i\
    \ (1 .. $n) {\n        $count += 9 * 10**($i - 1);\n    }\n    return $count;\n\
    }", "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}", "    my $count = 0;\n    my $i = 1;\n \
    \   while ($i <= $n) {\n        $count += 9 * 10 ** ($i - 1);\n        $i++;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += 10 ** ($i - 1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    if ($n == 1) {\n        $count = 2;\n\
    \    } elsif ($n == 2) {\n        $count = 4;\n    } else {\n        $count =\
    \ starts_one_ends($n - 1) + starts_one_ends($n - 2);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    return 0 if $n == 0;\n    return 9 if $n\
    \ == 1;\n    return 9 * 9 * (10 ** ($n - 2));\n}", "    my $count = 0;\n    if\
    \ ($n == 1) {\n        $count = 2;\n    }\n    elsif ($n == 2) {\n        $count\
    \ = 4;\n    }\n    else {\n        $count = starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1\
    \ .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n}", "  \
    \  return 0 if $n == 0;\n    return 9 if $n == 1;\n    return 9 * 10**($n-2) +\
    \ starts_one_ends($n-1);\n}", "    my $count = 0;\n    for my $i (1 .. $n - 1)\
    \ {\n        $count += $n - $i;\n    }\n    return $count;\n}", "    return 0\
    \ if $n < 1;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n - 1)\
    \ - 9 * starts_one_ends($n - 2);\n}", "    my $count = 0;\n    my $start = 10**($n-1);\n\
    \    my $end = 10**$n;\n    for my $i ($start .. $end-1) {\n        if ($i =~\
    \ /^1|1$/) {\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    return (10 ** ($n - 1)) + (9 * (10 ** ($n\
    \ - 2)));\n}", "    my $count = 0;\n    my $i = 1;\n    while ($i <= $n) {\n \
    \       $count += 9 * 10 ** ($i - 1);\n        $i++;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for\
    \ my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n\
    }", "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}", "    my $count = 0;\n    if ($n == 1) {\n\
    \        $count = 1;\n    } elsif ($n == 2) {\n        $count = 10;\n    } else\
    \ {\n        $count = 9 * 10 ** ($n - 2);\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 9 * 10**($i -\
    \ 1);\n    }\n    return $count;\n}", "    return 0 if $n == 0;\n    return 10\
    \ if $n == 1;\n    return 9 * 10**($n-2) + starts_one_ends($n-1);\n}", "    my\
    \ $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n\
    \    return $count;\n}", "    return 0 if $n == 0;\n    return 1 if $n == 1;\n\
    \    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}", "    return\
    \ (10**($n-1)) + (9*10**($n-2));\n}", "    return 0 if $n < 1;\n    return 9 if\
    \ $n == 1;\n    return 9 * (10 ** ($n - 2));\n}", "    my $count = 0;\n    my\
    \ $i = 1;\n    while ($i < $n) {\n        $count += 9 * 10 ** ($i - 1);\n    \
    \    $i++;\n    }\n    $count += 10 ** ($n - 1);\n    return $count;\n}", "  \
    \  my $count = 0;\n    for my $i (1 .. $n) {\n        $count += $n - $i + 1;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += (9 * 9**($i - 1));\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n\
    \    return $count;\n}", "    return $n == 1 ? 2 : starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count +=\
    \ 10**($i-1);\n    }\n    return $count;\n}", "    my $count = 0;\n    for my\
    \ $i (1 .. $n) {\n        $count += starts_one_ends_rec($i);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count\
    \ += 10 ** ($i - 1);\n    }\n    return $count;\n}", "    if ($n == 1) {\n   \
    \     return 2;\n    }\n    return starts_one_ends($n - 1) + 9 * starts_one_ends($n\
    \ - 2);\n}", "    my $count = 0;\n    my $start = '1' . '0' x ($n - 1);\n    my\
    \ $end = '0' x ($n - 1) . '1';\n    while ($start <= $end) {\n        $count++\
    \ if $start =~ /^1/ || $start =~ /1$/;\n        $start++;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $start = 10**($n-1);\n    my $end = 10**$n - 1;\n\
    \    for my $i ($start .. $end) {\n        if ($i =~ /^1|1$/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i\
    \ = 1; $i <= $n; $i++) {\n        $count += starts_one_ends_helper($i);\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my $start = 10**($n-1);\n  \
    \  my $end = 10**$n;\n    for my $i ($start..$end-1) {\n        my $s = $i;\n\
    \        my $e = $i;\n        if ($s % 10 == 1) {\n            $count++;\n   \
    \     }\n        while ($e >= 10) {\n            $e = int($e / 10);\n        \
    \    if ($e % 10 == 1) {\n                $count++;\n                last;\n \
    \           }\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1 .. $n) {\n\
    \        $count += starts_one_ends_helper($i);\n    }\n    return $count;\n}",
  "    return 0 if $n < 1;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n\
    \ - 1) + 10 ** ($n - 1);\n}", "    return 0 if $n < 1;\n    return 1 if $n ==\
    \ 1;\n    return 9 if $n == 2;\n    return 9 + 9 * 10**($n-2);\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. 9) {\n        $count +=\
    \ starts_one_ends_helper($n - 1, $i);\n    }\n    return $count;\n}", "    return\
    \ 0 if $n == 0;\n    return 9 if $n == 1;\n    return 9 + 9 * 10**($n-2);\n}",
  "    my $count = 0;\n    my $start = 10**($n-1);\n    my $end = 10**$n;\n    for\
    \ my $i ($start .. $end) {\n        $count++ if $i =~ /^1|1$/;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    if ($n == 1) {\n        $count = 2;\n\
    \    }\n    elsif ($n == 2) {\n        $count = 9;\n    }\n    else {\n      \
    \  $count = 9 * 9 * ($n - 2);\n    }\n    return $count;\n}", "    my $count =\
    \ 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $i (1 .. 9) {\n        $count +=\
    \ starts_one_ends_helper($n - 1, $i);\n    }\n    return $count;\n}", "    return\
    \ 0 if $n < 1;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n -\
    \ 1) + 10**($n - 1);\n}", "    my $count = 0;\n    foreach my $i (1 .. $n) {\n\
    \        $count += 10**($i-1);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for my $i (1 .. $n) {\n        $count += 10**($i-1);\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n  \
    \      $count += starts_one_ends_helper($i, 1);\n    }\n    return $count;\n}",
  "    my $count = 0;\n    my $i = 10**($n-1);\n    while ($i < 10**$n) {\n      \
    \  if ($i % 10 == 1) {\n            $count++;\n        }\n        $i++;\n    }\n\
    \    return $count;\n}", "    return 0 if $n < 1;\n    return 1 if $n == 1;\n\
    \    return 9 if $n == 2;\n    return 9 + 9 * 10**($n-2);\n}", "    my $count\
    \ = 0;\n    my $i;\n    for ($i = 1; $i < $n; $i++) {\n        $count += 9 * 10\
    \ ** ($i - 1);\n    }\n    $count += 10 ** ($n - 1);\n    return $count;\n}",
  "    my $count = 0;\n    my $start = 10**($n-1);\n    my $end = 10**$n - 1;\n  \
    \  for my $i ($start .. $end) {\n        $count++ if $i =~ /^1|1$/;\n    }\n \
    \   return $count;\n}", "    return 0 if $n == 0;\n    return 1 if $n == 1;\n\
    \    return 10 if $n == 2;\n    return 9 + starts_one_ends($n - 1);\n}", "   \
    \ return 0 if $n == 0;\n    return 1 if $n == 1;\n    return 10 * starts_one_ends($n\
    \ - 1) + 10**($n - 1);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
