name: HumanEval_149_sorted_list_sum
language: pl
prompt: "# Write a function that accepts an array of strings as a parameter,\n# deletes\
  \ the strings that have odd lengths from it,\n# and returns the resulted array with\
  \ a sorted order,\n# The array is always an array of strings and never an array\
  \ of numbers,\n# and it may contain duplicates.\n# The order of the array should\
  \ be ascending by length of each word, and you\n# should return the array sorted\
  \ by that rule.\n# If two words have the same length, sort the array alphabetically.\n\
  # The function should return an array of strings in sorted order.\n# You may assume\
  \ that all words will have the same length.\n# For example:\n# >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n# [\"ab\", \"cd\"]\nsub sorted_list_sum {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sorted_list_sum;\n\
  \        if(eq_deeply($candidate->([\"aa\", \"a\", \"aaa\"]),[\"aa\"])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  d\", \"b\", \"c\", \"a\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"d\", \"dcba\", \"abcd\", \"a\"\
  ]),[\"abcd\", \"dcba\"])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([\"AI\", \"ai\", \"au\"]),[\"AI\", \"\
  ai\", \"au\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted_list = sort {length($a) <=> length($b) || $a cmp $b}\
    \ @$lst;\n    my @result = ();\n    my $prev_len = -1;\n    foreach my $word (@sorted_list)\
    \ {\n        my $len = length($word);\n        if ($len != $prev_len) {\n    \
    \        push @result, $word;\n            $prev_len = $len;\n        }\n    }\n\
    \    return \\@result;\n}", "    my @sorted = sort { length($a) <=> length($b)\
    \ } @$lst;\n    return \\@sorted;\n}", "    my @sorted_list = sort { length($a)\
    \ <=> length($b) } @$lst;\n    my @result;\n    my $prev_len = -1;\n    foreach\
    \ my $item (@sorted_list) {\n        my $len = length($item);\n        if ($len\
    \ != $prev_len) {\n            push @result, $item;\n            $prev_len = $len;\n\
    \        }\n    }\n    return @result;\n}", "    my @sorted_list = sort { length($a)\
    \ <=> length($b) || $a cmp $b } @$lst;\n    my @result = ();\n    my $prev_len\
    \ = 0;\n    for my $word (@sorted_list) {\n        my $len = length($word);\n\
    \        if ($len != $prev_len) {\n            push @result, $word;\n        \
    \    $prev_len = $len;\n        }\n    }\n    return \\@result;\n}", "    my @sorted\
    \ = sort { length($a) <=> length($b) } @$lst;\n    my $prev_len = 0;\n    my @result\
    \ = ();\n    for my $word (@sorted) {\n        my $len = length($word);\n    \
    \    if ($len != $prev_len) {\n            push @result, $word;\n            $prev_len\
    \ = $len;\n        }\n    }\n    return \\@result;\n}", "    my @lst = @$lst;\n\
    \    my @res = ();\n    for my $i (0..$#lst) {\n        my $len = length($lst[$i]);\n\
    \        if ($len % 2 == 0) {\n            push @res, $lst[$i];\n        }\n \
    \   }\n    return sort {length($a) <=> length($b) || $a cmp $b} @res;\n}", " \
    \   my @sorted = sort {length($a) <=> length($b) || $a cmp $b} @$lst;\n    return\
    \ [grep {length($_) % 2 == 0} @sorted];\n}", "    my @lst = @$lst;\n    my @sorted\
    \ = sort { length($a) <=> length($b) } @lst;\n    my @result = ();\n    my $prev_len\
    \ = -1;\n    foreach my $s (@sorted) {\n        my $len = length($s);\n      \
    \  if ($len != $prev_len) {\n            push @result, $s;\n            $prev_len\
    \ = $len;\n        }\n    }\n    return \\@result;\n}", "    my @lst = @$lst;\n\
    \    my @res = ();\n    my $i = 0;\n    foreach my $str (@lst) {\n        if (length($str)\
    \ % 2 == 0) {\n            $res[$i] = $str;\n            $i++;\n        }\n  \
    \  }\n    return @res;\n}", "    my @sorted_list = sort { length($a) <=> length($b)\
    \ } @$lst;\n    my @result = ();\n    my $prev_len = 0;\n    for my $word (@sorted_list)\
    \ {\n        my $len = length($word);\n        if ($len != $prev_len) {\n    \
    \        push @result, $word;\n            $prev_len = $len;\n        }\n    }\n\
    \    return \\@result;\n}", "    my @sorted_list = sort { length($a) <=> length($b)\
    \ || $a cmp $b } @$lst;\n    my @odd_length_list = grep { length($_) % 2 == 1\
    \ } @sorted_list;\n    return @odd_length_list;\n}", "    my @sorted = sort {\
    \ length($a) <=> length($b) || $a cmp $b } @$lst;\n    my $prev_len = 0;\n   \
    \ my @result;\n    for my $word (@sorted) {\n        my $len = length($word);\n\
    \        if ($len != $prev_len) {\n            push @result, $word;\n        \
    \    $prev_len = $len;\n        }\n    }\n    return \\@result;\n}", "    my @sorted_list\
    \ = sort { length($a) <=> length($b) } @$lst;\n    my @result = ();\n    my $prev_length\
    \ = 0;\n    for my $item (@sorted_list) {\n        my $length = length($item);\n\
    \        if ($length != $prev_length) {\n            push @result, $item;\n  \
    \          $prev_length = $length;\n        }\n    }\n    return \\@result;\n}",
  "    my @sorted_lst = sort {length($a) <=> length($b) || $a cmp $b} @$lst;\n   \
    \ my @res = ();\n    my $prev_len = -1;\n    for my $s (@sorted_lst) {\n     \
    \   my $len = length($s);\n        if ($len != $prev_len) {\n            push\
    \ @res, $s;\n            $prev_len = $len;\n        }\n    }\n    return \\@res;\n\
    }", "    my @sorted_list = sort {length($a) <=> length($b) || $a cmp $b} @$lst;\n\
    \    my @result = ();\n    my $prev_length = 0;\n    foreach my $item (@sorted_list)\
    \ {\n        my $length = length($item);\n        if ($length != $prev_length)\
    \ {\n            push @result, $item;\n            $prev_length = $length;\n \
    \       }\n    }\n    return \\@result;\n}", "    my @lst = @$lst;\n    my @result\
    \ = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $sum = 0;\n  \
    \  my $len = scalar @lst;\n    for ($i = 0; $i < $len; $i++) {\n        for ($j\
    \ = $i + 1; $j < $len; $j++) {\n            if ($lst[$i] > $lst[$j]) {\n     \
    \           $sum = $lst[$i];\n                $lst[$i] = $lst[$j];\n         \
    \       $lst[$j] = $sum;\n            }\n        }\n    }\n    for ($k = 0; $k\
    \ < $len; $k++) {\n        if ($lst[$k] % 2 == 0) {\n            push(@result,\
    \ $lst[$k]);\n        }\n    }\n    return @result;\n}", "    my @sorted = sort\
    \ { length($a) <=> length($b) } @$lst;\n    my @result = ();\n    my $prev_len\
    \ = 0;\n    for my $s (@sorted) {\n        my $len = length($s);\n        if ($len\
    \ != $prev_len) {\n            push @result, $s;\n            $prev_len = $len;\n\
    \        }\n    }\n    return \\@result;\n}", "    my @lst = @$lst;\n    my @lst_sorted\
    \ = sort { length($a) <=> length($b) } @lst;\n    my @lst_sorted_2 = sort { $a\
    \ cmp $b } @lst_sorted;\n    return @lst_sorted_2;\n}", "    my @sorted = sort\
    \ { length($a) <=> length($b) || $a cmp $b } @$lst;\n    my @result = ();\n  \
    \  my $prev_len = -1;\n    for my $s (@sorted) {\n        if (length($s) != $prev_len)\
    \ {\n            push @result, $s;\n            $prev_len = length($s);\n    \
    \    }\n    }\n    return \\@result;\n}", "    my @sorted_list = sort {length($a)\
    \ <=> length($b) || $a cmp $b} @$lst;\n    my @result = ();\n    my $prev_len\
    \ = 0;\n    foreach my $word (@sorted_list) {\n        if (length($word) != $prev_len)\
    \ {\n            push @result, $word;\n            $prev_len = length($word);\n\
    \        }\n    }\n    return \\@result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
