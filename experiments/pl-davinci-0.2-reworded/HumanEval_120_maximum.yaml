name: HumanEval_120_maximum
language: pl
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
  \ maximum([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum([4, -4, 4],\
  \ 2)\n# [4, 4]\n# Example 3:\n# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n\
  # Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The\
  \ elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n\
  sub maximum {\n    my($arr, $k) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
  \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
  \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
  \ 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
  \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n\
    }", "    my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max =\
    \ $arr->[0];\n        my $max_index = 0;\n        for (my $j = 1; $j < @$arr;\
    \ $j++) {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        push @result,\
    \ $max;\n        splice @$arr, $max_index, 1;\n        $i++;\n    }\n    return\
    \ @result;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}",
  "    my @max = sort {$b <=> $a} @$arr[0..$k-1];\n    for my $i ($k..$#$arr) {\n\
    \        for my $j (0..$k-1) {\n            if ($arr->[$i] > $max[$j]) {\n   \
    \             splice @max, $j, 0, $arr->[$i];\n                pop @max;\n   \
    \             last;\n            }\n        }\n    }\n    return \\@max;\n}",
  "    my $n = @$arr;\n    return [] if $k == 0;\n    return $arr if $k == $n;\n \
    \   my $max = $arr->[0];\n    my $max_index = 0;\n    for my $i (1..$k-1) {\n\
    \        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n          \
    \  $max_index = $i;\n        }\n    }\n    my $result = [$max];\n    for my $i\
    \ ($k..$n-1) {\n        if ($arr->[$i] > $max) {\n            $result->[$max_index]\
    \ = $arr->[$i];\n            $max = $arr->[$i];\n            for my $j (0..$k-1)\
    \ {\n                if ($result->[$j] > $max) {\n                    $max = $result->[$j];\n\
    \                    $max_index = $j;\n                }\n            }\n    \
    \    }\n    }\n    return $result;\n}", "    my @result;\n    my $i = 0;\n   \
    \ my $j = 0;\n    my $n = scalar @$arr;\n    while ($i < $n) {\n        if ($j\
    \ < $k) {\n            push @result, $arr->[$i];\n            $j++;\n        }\
    \ else {\n            my $min = $result[0];\n            my $min_index = 0;\n\
    \            for (my $i = 1; $i < $k; $i++) {\n                if ($result[$i]\
    \ < $min) {\n                    $min = $result[$i];\n                    $min_index\
    \ = $i;\n                }\n            }\n            if ($arr->[$i] > $min)\
    \ {\n                $result[$min_index] = $arr->[$i];\n            }\n      \
    \  }\n        $i++;\n    }\n    return \\@result;\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @max = sort {$b\
    \ <=> $a} @$arr[0..$k-1];\n    for my $i ($k..@$arr-1) {\n        if ($arr->[$i]\
    \ > $max[-1]) {\n            $max[-1] = $arr->[$i];\n            @max = sort {$b\
    \ <=> $a} @max;\n        }\n    }\n    return @max;\n}", "    my @max;\n    for\
    \ my $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n  \
    \              $max = $arr->[$j];\n                $max_idx = $j;\n          \
    \  }\n        }\n        $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return @max;\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my $n = @$arr;\n\
    \    return [] if $k == 0;\n    return $arr if $k == $n;\n    my $i = 0;\n   \
    \ my $j = $n - 1;\n    while ($i < $j) {\n        my $p = partition($arr, $i,\
    \ $j);\n        if ($p == $k - 1) {\n            last;\n        } elsif ($p <\
    \ $k - 1) {\n            $i = $p + 1;\n        } else {\n            $j = $p -\
    \ 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort\
    \ {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @arr = sort {$b\
    \ <=> $a} @$arr;\n    return @arr[0..$k-1];\n}", "    my @result;\n    foreach\
    \ my $num (@$arr) {\n        if (@result < $k) {\n            push @result, $num;\n\
    \            @result = sort {$b <=> $a} @result;\n        } else {\n         \
    \   if ($num > $result[-1]) {\n                pop @result;\n                push\
    \ @result, $num;\n                @result = sort {$b <=> $a} @result;\n      \
    \      }\n        }\n    }\n    return @result;\n}", "    my @sorted = sort {$b\
    \ <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @max;\n    for my\
    \ $i (0..$k-1) {\n        $max[$i] = $arr->[$i];\n    }\n    @max = sort {$b <=>\
    \ $a} @max;\n    for my $i ($k..$#$arr) {\n        if ($arr->[$i] > $max[0]) {\n\
    \            $max[0] = $arr->[$i];\n            @max = sort {$b <=> $a} @max;\n\
    \        }\n    }\n    return @max;\n}", "    my @max;\n    for my $n (@$arr)\
    \ {\n        if (@max < $k) {\n            push @max, $n;\n            @max =\
    \ sort { $b <=> $a } @max;\n        }\n        elsif ($n > $max[-1]) {\n     \
    \       pop @max;\n            push @max, $n;\n            @max = sort { $b <=>\
    \ $a } @max;\n        }\n    }\n    return \\@max;\n}", "    my @result;\n   \
    \ my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[0];\n        my\
    \ $max_i = 0;\n        for (my $j = 1; $j < @$arr; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_i = $j;\n\
    \            }\n        }\n        push @result, $max;\n        splice @$arr,\
    \ $max_i, 1;\n        $i++;\n    }\n    return @result;\n}", "    my @sorted =\
    \ sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted =\
    \ sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @result;\n\
    \    my $len = scalar @$arr;\n    if ($k > $len) {\n        return @$arr;\n  \
    \  }\n    for (my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n  \
    \      my $max_index = $i;\n        for (my $j = $i + 1; $j < $len; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $result[$i]\
    \ = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \    }\n    return @result;\n}", "    my @max;\n    my $i = 0;\n    while ($i\
    \ < $k) {\n        my $max = $arr->[0];\n        my $max_index = 0;\n        for\
    \ (my $j = 1; $j < @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n    \
    \            $max = $arr->[$j];\n                $max_index = $j;\n          \
    \  }\n        }\n        push @max, $max;\n        splice @$arr, $max_index, 1;\n\
    \        $i++;\n    }\n    return @max;\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted = sort {$b <=> $a}\
    \ @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my $n = scalar @$arr;\n   \
    \ my @max = sort {$b <=> $a} @$arr[0..$k-1];\n    for my $i ($k..$n-1) {\n   \
    \     my $j = 0;\n        while ($j < $k && $arr->[$i] < $max[$j]) {\n       \
    \     $j++;\n        }\n        if ($j < $k) {\n            splice @max, $j, 0,\
    \ $arr->[$i];\n            pop @max;\n        }\n    }\n    return @max;\n}",
  "    my $n = scalar @$arr;\n    my @result;\n    my $i = 0;\n    while ($i < $k)\
    \ {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        $result[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n\
    \        $i++;\n    }\n    return @result;\n}", "    return [] if $k == 0;\n \
    \   my $n = scalar @$arr;\n    return $arr if $k >= $n;\n    my @res = sort {$b\
    \ <=> $a} @$arr[0..$k-1];\n    for my $i ($k..$n-1) {\n        if ($arr->[$i]\
    \ > $res[-1]) {\n            for my $j (0..$k-1) {\n                if ($arr->[$i]\
    \ > $res[$j]) {\n                    splice @res, $j, 0, $arr->[$i];\n       \
    \             pop @res;\n                    last;\n                }\n      \
    \      }\n        }\n    }\n    return \\@res;\n}", "    my @sorted = sort {$b\
    \ <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b\
    \ <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b\
    \ <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @max;\n    my $i =\
    \ 0;\n    my $j = 0;\n    while ($i < $k) {\n        if ($arr->[$j] > $arr->[$i])\
    \ {\n            $i = $j;\n        }\n        $j++;\n    }\n    push @max, $arr->[$i];\n\
    \    for (my $j = $i + 1; $j < @$arr; $j++) {\n        if ($arr->[$j] > $max[-1])\
    \ {\n            push @max, $arr->[$j];\n            @max = sort {$b <=> $a} @max;\n\
    \            pop @max if @max > $k;\n        }\n    }\n    return \\@max;\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @max;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n     \
    \   my $max_i = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_i = $j;\n\
    \            }\n        }\n        $max[$i] = $max;\n        $arr->[$max_i] =\
    \ $arr->[$i];\n        $arr->[$i] = $max;\n    }\n    return \\@max;\n}", "  \
    \  my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = @$arr;\n    while\
    \ ($i < $n) {\n        if ($arr->[$i] > $arr->[$j]) {\n            $j = $i;\n\
    \        }\n        if ($i - $j == $k) {\n            push @result, $arr->[$j];\n\
    \            $j++;\n        }\n        $i++;\n    }\n    return @result;\n}",
  "    my @result;\n    foreach my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        foreach my $j ($i+1..$#{$arr}) {\n     \
    \       if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n       \
    \         $max_index = $j;\n            }\n        }\n        $result[$i] = $max;\n\
    \        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n    }\n\
    \    return \\@result;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return\
    \ @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return\
    \ [@sorted[0..$k-1]];\n}", "    my @res = ();\n    for my $i (0..$k-1) {\n   \
    \     my $max = $arr->[$i];\n        my $max_idx = $i;\n        for my $j ($i+1..$#{$arr})\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        $res[$i] =\
    \ $max;\n        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n\
    \    }\n    return @res;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return\
    \ @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return\
    \ [@sorted[0..$k-1]];\n}", "    my @result;\n    my $i = 0;\n    while ($i < $k)\
    \ {\n        my $max = $arr->[0];\n        my $max_index = 0;\n        for (my\
    \ $j = 1; $j < @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n        \
    \        $max = $arr->[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        push @result, $max;\n        splice @$arr, $max_index, 1;\n\
    \        $i++;\n    }\n    return @result;\n}", "    my @sorted = sort {$b <=>\
    \ $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=>\
    \ $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted = sort {$b <=>\
    \ $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @res = ();\n    my $len\
    \ = scalar @$arr;\n    if ($k == 0) {\n        return @res;\n    }\n    if ($k\
    \ == $len) {\n        return @$arr;\n    }\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n        for (my\
    \ $j = $i + 1; $j < $len; $j++) {\n            if ($arr->[$j] > $max) {\n    \
    \            $max = $arr->[$j];\n                $max_index = $j;\n          \
    \  }\n        }\n        my $temp = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $arr->[$max_index] = $temp;\n        push @res, $max;\n    }\n    return\
    \ @res;\n}", "    my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "    my $n = scalar @$arr;\n    my @res;\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_index])\
    \ = ($arr->[$max_index], $arr->[$i]);\n    }\n    return @res;\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", "    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}", "    my @result;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[0];\n       \
    \ my $index = 0;\n        for (my $j = 1; $j < scalar @$arr; $j++) {\n       \
    \     if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n         \
    \       $index = $j;\n            }\n        }\n        push @result, $max;\n\
    \        splice @$arr, $index, 1;\n        $i++;\n    }\n    return @result;\n\
    }", "    my @max;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_i = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_i = $j;\n\
    \            }\n        }\n        $max[$i] = $max;\n        $arr->[$max_i] =\
    \ $arr->[$i];\n        $arr->[$i] = $max;\n    }\n    return \\@max;\n}", "  \
    \  my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return @sorted[0..$k-1];\n}", " \
    \   my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "    my @sorted = sort {$b <=> $a} @$arr;\n    return [@sorted[0..$k-1]];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
