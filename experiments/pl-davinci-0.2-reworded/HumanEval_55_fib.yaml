name: HumanEval_55_fib
language: pl
prompt: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n\
  # >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n  \
  \      if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    if ($n < 2) {\n        return $n;\n    } else {\n        return\
    \ fib($n-1) + fib($n-2);\n    }\n}", "    if ($n <= 1) {\n        return $n;\n\
    \    } else {\n        return fib($n-1) + fib($n-2);\n    }\n}", "    my($a, $b)\
    \ = (0, 1);\n    for (1..$n) {\n        ($a, $b) = ($b, $a + $b);\n    }\n   \
    \ return $a;\n}", "    if ($n < 2) {\n        return $n;\n    } else {\n     \
    \   return fib($n-1) + fib($n-2);\n    }\n}", "    return $n if $n < 2;\n    return\
    \ fib($n-1) + fib($n-2);\n}", "    return $n if $n < 2;\n    return fib($n-1)\
    \ + fib($n-2);\n}", "    if ($n == 0) {\n        return 0;\n    } elsif ($n ==\
    \ 1) {\n        return 1;\n    } else {\n        return fib($n-1) + fib($n-2);\n\
    \    }\n}", "    if ($n < 2) {\n        return $n;\n    } else {\n        return\
    \ fib($n-1) + fib($n-2);\n    }\n}", "    return $n if $n < 2;\n    return fib($n-1)\
    \ + fib($n-2);\n}", "    return $n if $n < 2;\n    return fib($n-1) + fib($n-2);\n\
    }", "    return 1 if $n <= 2;\n    return fib($n-1) + fib($n-2);\n}", "    my($a,\
    \ $b) = (0, 1);\n    while ($n-- > 0) {\n        ($a, $b) = ($b, $a + $b);\n \
    \   }\n    return $a;\n}", "    return 1 if $n <= 2;\n    return fib($n-1) + fib($n-2);\n\
    }", "    return $n if $n < 2;\n    return fib($n-1) + fib($n-2);\n}", "    return\
    \ $n if $n < 2;\n    return fib($n-1) + fib($n-2);\n}", "    if ($n < 2) {\n \
    \       return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }", "    return $n if $n < 2;\n    return fib($n-1) + fib($n-2);\n}", "    if\
    \ ($n == 0) {\n        return 0;\n    } elsif ($n == 1) {\n        return 1;\n\
    \    } else {\n        return fib($n-1) + fib($n-2);\n    }\n}", "    my($a, $b)\
    \ = (0, 1);\n    while ($n-- > 0) {\n        ($a, $b) = ($b, $a + $b);\n    }\n\
    \    return $a;\n}", "    if ($n < 2) {\n        return $n;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
