name: HumanEval_41_car_race_collision
language: pl
prompt: "# Imagine a road that's a perfectly straight infinitely long line.\n# n cars\
  \ are driving left to right;  simultaneously, a different set of n cars\n# are driving\
  \ right to left.   The two sets of cars start out being very far from\n# each other.\
  \  All cars move in the same speed.  Two cars are said to collide\n# when a car\
  \ that's moving left to right hits a car that's moving right to left.\n# However,\
  \ the cars are infinitely sturdy and strong; as a result, they continue moving\n\
  # in their trajectory as if they did not collide.\n# This function outputs the number\
  \ of such collisions.\nsub car_race_collision {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&car_race_collision;\n\
  \        if(eq_deeply($candidate->(2),4)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(3),9)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),64))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),100))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    my $i = 0;\n    my $j = $n - 1;\n    while\
    \ ($i < $n && $j >= 0) {\n        if ($i < $j) {\n            $count += $j - $i;\n\
    \            $i++;\n        } else {\n            $j--;\n        }\n    }\n  \
    \  return $count;\n}", "    my $collision = 0;\n    my $left_to_right = 0;\n \
    \   my $right_to_left = $n - 1;\n    while ($left_to_right < $right_to_left) {\n\
    \        if ($left_to_right < $right_to_left) {\n            $left_to_right++;\n\
    \        }\n        if ($right_to_left > $left_to_right) {\n            $right_to_left--;\n\
    \        }\n        if ($left_to_right == $right_to_left) {\n            $collision++;\n\
    \        }\n    }\n    return $collision;\n}", "    my $collisions = 0;\n    my\
    \ $left_to_right_cars = 0;\n    my $right_to_left_cars = 0;\n    for (my $i =\
    \ 0; $i < $n; $i++) {\n        $left_to_right_cars++;\n        $right_to_left_cars++;\n\
    \        $collisions += $left_to_right_cars * $right_to_left_cars;\n    }\n  \
    \  return $collisions;\n}", "    my $collisions = 0;\n    my $left_to_right_cars\
    \ = {};\n    my $right_to_left_cars = {};\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        $left_to_right_cars->{$i} = 1;\n        $right_to_left_cars->{$n\
    \ - $i - 1} = 1;\n    }\n    my $left_to_right_car_positions = [0 .. $n - 1];\n\
    \    my $right_to_left_car_positions = [reverse(0 .. $n - 1)];\n    my $left_to_right_car_index\
    \ = 0;\n    my $right_to_left_car_index = 0;\n    while ($left_to_right_car_index\
    \ < $n && $right_to_left_car_index < $n) {\n        my $left_to_right_car_position\
    \ = $left_to_right_car_positions->[$left_to_right_car_index];\n        my $right_to_left_car_position\
    \ = $right_to_left_car_positions->[$right_to_left_car_index];\n        if ($left_to_right_car_position\
    \ < $right_to_left_car_position) {\n            $left_to_right_car_positions->[$left_to_right_car_index]++;\n\
    \            $left_to_right_car_index++;\n        } else {\n            $right_to_left_car_positions->[$right_to_left_car_index]--;\n\
    \            $right_to_left_car_index++;\n        }\n        if ($left_to_right_cars->{$left_to_right_car_position}\
    \ && $right_to_left_cars->{$right_to_left_car_position}) {\n            $collisions++;\n\
    \        }\n    }\n    return $collisions;\n}", "    my $collisions = 0;\n   \
    \ my $i = 0;\n    my $j = $n - 1;\n    while ($i < $n && $j >= 0) {\n        if\
    \ ($i == $j) {\n            $collisions++;\n            $i++;\n            $j--;\n\
    \        } elsif ($i < $j) {\n            $i++;\n            $j--;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $collisions;\n}", " \
    \   my $collisions = 0;\n    my $left_to_right_cars = 0;\n    my $right_to_left_cars\
    \ = 0;\n    my $left_to_right_pos = 0;\n    my $right_to_left_pos = 0;\n    while\
    \ ($left_to_right_cars < $n || $right_to_left_cars < $n) {\n        if ($left_to_right_cars\
    \ < $n && $left_to_right_pos <= $right_to_left_pos) {\n            $left_to_right_cars++;\n\
    \            $left_to_right_pos += $left_to_right_cars;\n        }\n        if\
    \ ($right_to_left_cars < $n && $right_to_left_pos <= $left_to_right_pos) {\n \
    \           $right_to_left_cars++;\n            $right_to_left_pos += $right_to_left_cars;\n\
    \        }\n        if ($left_to_right_pos == $right_to_left_pos) {\n        \
    \    $collisions++;\n        }\n    }\n    return $collisions;\n}", "    my($collision)\
    \ = 0;\n    my($i);\n    for($i = 0; $i < $n; $i++) {\n        $collision += $i;\n\
    \    }\n    return $collision;\n}", "    my $collisions = 0;\n    my @left_to_right\
    \ = (1..$n);\n    my @right_to_left = reverse(1..$n);\n    while(@left_to_right\
    \ && @right_to_left) {\n        my $left = shift @left_to_right;\n        my $right\
    \ = shift @right_to_left;\n        if($left == $right) {\n            $collisions++;\n\
    \        }\n        else {\n            unshift @left_to_right, $left;\n     \
    \       unshift @right_to_left, $right;\n        }\n    }\n    return $collisions;\n\
    }", "    my $collisions = 0;\n    my $left_to_right_cars = {};\n    my $right_to_left_cars\
    \ = {};\n    for (my $i = 0; $i < $n; $i++) {\n        $left_to_right_cars->{$i}\
    \ = 1;\n        $right_to_left_cars->{$n - $i - 1} = 1;\n    }\n    my $left_to_right_car_index\
    \ = 0;\n    my $right_to_left_car_index = 0;\n    while ($left_to_right_car_index\
    \ < $n && $right_to_left_car_index < $n) {\n        if (exists $left_to_right_cars->{$left_to_right_car_index}\
    \ &&\n            exists $right_to_left_cars->{$right_to_left_car_index}) {\n\
    \            $collisions++;\n        }\n        $left_to_right_car_index++;\n\
    \        $right_to_left_car_index++;\n    }\n    return $collisions;\n}", "  \
    \  my $collision = 0;\n    my $left_to_right = 0;\n    my $right_to_left = 0;\n\
    \    my $left_to_right_cars = {};\n    my $right_to_left_cars = {};\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        $left_to_right_cars->{$i} = $left_to_right;\n\
    \        $right_to_left_cars->{$i} = $right_to_left;\n        $left_to_right++;\n\
    \        $right_to_left--;\n    }\n    for (my $i = 0; $i < $n; $i++) {\n    \
    \    for (my $j = 0; $j < $n; $j++) {\n            if ($left_to_right_cars->{$i}\
    \ == $right_to_left_cars->{$j}) {\n                $collision++;\n           \
    \ }\n        }\n    }\n    return $collision;\n}", "    my $collisions = 0;\n\
    \    my $i = 0;\n    while ($i < $n) {\n        $collisions += $i;\n        $i++;\n\
    \    }\n    return $collisions;\n}", "    my $collisions = 0;\n    my $left_to_right_cars\
    \ = 0;\n    my $right_to_left_cars = 0;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        if ($left_to_right_cars == $right_to_left_cars) {\n            $collisions++;\n\
    \        }\n        $left_to_right_cars++;\n        $right_to_left_cars++;\n \
    \   }\n    return $collisions;\n}", "    my $collision = 0;\n    for (my $i =\
    \ 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n            if\
    \ ($i < $j) {\n                $collision++;\n            }\n        }\n    }\n\
    \    return $collision;\n}", "    my $collisions = 0;\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n            if ($i\
    \ < $j) {\n                $collisions++;\n            }\n        }\n    }\n \
    \   return $collisions;\n}", "    my $num_collisions = 0;\n    my $left_to_right_cars\
    \ = {};\n    my $right_to_left_cars = {};\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        $left_to_right_cars->{$i} = 0;\n        $right_to_left_cars->{$i}\
    \ = 0;\n    }\n    while (1) {\n        my $num_left_to_right_cars_at_end = 0;\n\
    \        my $num_right_to_left_cars_at_end = 0;\n        foreach my $car (keys\
    \ %$left_to_right_cars) {\n            if ($left_to_right_cars->{$car} == 0) {\n\
    \                $num_left_to_right_cars_at_end++;\n            }\n          \
    \  $left_to_right_cars->{$car}++;\n        }\n        foreach my $car (keys %$right_to_left_cars)\
    \ {\n            if ($right_to_left_cars->{$car} == 0) {\n                $num_right_to_left_cars_at_end++;\n\
    \            }\n            $right_to_left_cars->{$car}++;\n        }\n      \
    \  if ($num_left_to_right_cars_at_end == $n && $num_right_to_left_cars_at_end\
    \ == $n) {\n            last;\n        }\n        foreach my $car (keys %$left_to_right_cars)\
    \ {\n            if ($left_to_right_cars->{$car} == $right_to_left_cars->{$car})\
    \ {\n                $num_collisions++;\n            }\n        }\n    }\n   \
    \ return $num_collisions;\n}", "    my $collisions = 0;\n    my $left_to_right_cars\
    \ = 0;\n    my $right_to_left_cars = 0;\n    while ($left_to_right_cars < $n)\
    \ {\n        $left_to_right_cars++;\n        $right_to_left_cars++;\n        $collisions\
    \ += $left_to_right_cars * $right_to_left_cars;\n    }\n    return $collisions;\n\
    }", "    my $collisions = 0;\n    my $left_to_right_cars = 0;\n    my $right_to_left_cars\
    \ = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         $left_to_right_cars++;\n        } else {\n            $right_to_left_cars++;\n\
    \        }\n        $collisions += $left_to_right_cars * $right_to_left_cars;\n\
    \    }\n    return $collisions;\n}", "    my $collisions = 0;\n    my $left_to_right_cars\
    \ = 0;\n    my $right_to_left_cars = 0;\n    while ($left_to_right_cars < $n &&\
    \ $right_to_left_cars < $n) {\n        if ($left_to_right_cars < $right_to_left_cars)\
    \ {\n            $left_to_right_cars++;\n        } else {\n            $right_to_left_cars++;\n\
    \        }\n        $collisions++;\n    }\n    return $collisions;\n}", "    my\
    \ $collisions = 0;\n    my $i = 0;\n    my $j = 0;\n    while ($i < $n && $j <\
    \ $n) {\n        if ($i == $j) {\n            $collisions++;\n            $i++;\n\
    \            $j++;\n        } elsif ($i < $j) {\n            $i++;\n        }\
    \ else {\n            $j++;\n        }\n    }\n    return $collisions;\n}", " \
    \   my $collisions = 0;\n    my $left_to_right_cars = {};\n    my $right_to_left_cars\
    \ = {};\n    for (my $i = 0; $i < $n; $i++) {\n        $left_to_right_cars->{$i}\
    \ = 0;\n        $right_to_left_cars->{$i} = 0;\n    }\n    my $time = 0;\n   \
    \ while (1) {\n        $time++;\n        for (my $i = 0; $i < $n; $i++) {\n  \
    \          $left_to_right_cars->{$i} += $time;\n            $right_to_left_cars->{$i}\
    \ -= $time;\n        }\n        my $collision = 0;\n        for (my $i = 0; $i\
    \ < $n; $i++) {\n            for (my $j = 0; $j < $n; $j++) {\n              \
    \  if ($left_to_right_cars->{$i} == $right_to_left_cars->{$j}) {\n           \
    \         $collision = 1;\n                    $collisions++;\n              \
    \  }\n            }\n        }\n        last if (!$collision);\n    }\n    return\
    \ $collisions;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
