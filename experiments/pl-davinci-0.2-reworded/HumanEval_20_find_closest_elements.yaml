name: HumanEval_20_find_closest_elements
language: pl
prompt: "# From a supplied array of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # [2.0, 2.2]\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0,\
  \ 2.0]\nsub find_closest_elements {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0,\
  \ 2.2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my @closest_elements = ($numbers->[0], $numbers->[1]);\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              @closest_elements = ($numbers->[$i], $numbers->[$j]);\n       \
    \     }\n        }\n    }\n    return @closest_elements;\n}", "    my @numbers\
    \ = @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n    my @min_diff_numbers\
    \ = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < scalar(@numbers) - 1;\
    \ $i++) {\n        for (my $j = $i + 1; $j < scalar(@numbers); $j++) {\n     \
    \       my $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff <\
    \ $min_diff) {\n                $min_diff = $diff;\n                @min_diff_numbers\
    \ = ($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ @min_diff_numbers;\n}", "    my($min_diff, $min_pair) = (undef, undef);\n  \
    \  for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i] -\
    \ $numbers->[$i + 1]);\n        if (!defined($min_diff) || $diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_pair = [$numbers->[$i],\
    \ $numbers->[$i + 1]];\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n  \
    \      }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my($min_distance) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_index) = 0;\n    for my $i (1 .. $#$numbers -\
    \ 1) {\n        my($distance) = abs($numbers->[$i] - $numbers->[$i + 1]);\n  \
    \      if ($distance < $min_distance) {\n            $min_distance = $distance;\n\
    \            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_diff_index = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < scalar(@$numbers)\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my($min_distance) = abs($numbers->[0] - $numbers->[1]);\n    my($min_distance_index)\
    \ = 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($distance) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($distance < $min_distance) {\n         \
    \   $min_distance = $distance;\n            $min_distance_index = $i;\n      \
    \  }\n    }\n    return [$numbers->[$min_distance_index], $numbers->[$min_distance_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff =\
    \ abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my @numbers = @$numbers;\n\
    \    my $min_diff = abs($numbers[0] - $numbers[1]);\n    my @closest_elements\
    \ = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers; $i++) {\n\
    \        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @closest_elements = ($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return @closest_elements;\n}", "    my $min_distance\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n    for my $i\
    \ (1 .. $#$numbers - 1) {\n        my $distance = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($distance < $min_distance) {\n            $min_distance\
    \ = $distance;\n            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_diff_index = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ @closest = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0; $i < scalar(@$numbers)\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                @closest\
    \ = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ @closest;\n}", "    my @numbers = @$numbers;\n    my $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    my @min_pair = ($numbers[0], $numbers[1]);\n    for (my\
    \ $i = 0; $i < @numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @numbers;\
    \ $j++) {\n            my $diff = abs($numbers[$i] - $numbers[$j]);\n        \
    \    if ($diff < $min_diff) {\n                $min_diff = $diff;\n          \
    \      @min_pair = ($numbers[$i], $numbers[$j]);\n            }\n        }\n \
    \   }\n    return @min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index+1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index+1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my @closest_elements = ($numbers->[0], $numbers->[1]);\n    for (my $i =\
    \ 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    @closest_elements = ($numbers->[$i], $numbers->[$j]);\n            }\n  \
    \      }\n    }\n    return @closest_elements;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index+1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_idx = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_idx = $i;\n        }\n    }\n    return [$numbers->[$min_idx],\
    \ $numbers->[$min_idx+1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_diff_index = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff =\
    \ abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_diff_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_diff_pair;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for (my $i = 1; $i < @$numbers\
    \ - 1; $i++) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my @sorted = sort {$a <=> $b} @$numbers;\n    my $min_diff = abs($sorted[0]\
    \ - $sorted[1]);\n    my $min_pair = [$sorted[0], $sorted[1]];\n    for (my $i\
    \ = 0; $i < @sorted - 1; $i++) {\n        my $diff = abs($sorted[$i] - $sorted[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           $min_pair = [$sorted[$i], $sorted[$i + 1]];\n        }\n    }\n  \
    \  return $min_pair;\n}", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my @closest_elements = ($numbers->[0], $numbers->[1]);\n    for (my $i =\
    \ 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers);\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                @closest_elements = ($numbers->[$i], $numbers->[$j]);\n     \
    \       }\n        }\n    }\n    return sort {$a <=> $b} @closest_elements;\n}",
  "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $closest_pair;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = $numbers->[1] - $numbers->[0];\n    my $min_diff_index = 0;\n\
    \    for my $i (1..$#$numbers-1) {\n        my $diff = $numbers->[$i+1] - $numbers->[$i];\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my\
    \ $i (0..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my @sorted = sort {$a <=> $b} @$numbers;\n\
    \    my $diff = abs($sorted[0] - $sorted[1]);\n    my @closest = ($sorted[0],\
    \ $sorted[1]);\n    for (my $i = 1; $i < @sorted - 1; $i++) {\n        my $new_diff\
    \ = abs($sorted[$i] - $sorted[$i + 1]);\n        if ($new_diff < $diff) {\n  \
    \          $diff = $new_diff;\n            @closest = ($sorted[$i], $sorted[$i\
    \ + 1]);\n        }\n    }\n    return @closest;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my($smallest_difference, $closest_elements) = (1e99, []);\n    for (my $i =\
    \ 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++)\
    \ {\n            my $difference = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($difference < $smallest_difference) {\n                $smallest_difference\
    \ = $difference;\n                $closest_elements = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_elements;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_distance = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1 .. $#$numbers -\
    \ 1) {\n        my $distance = abs($numbers->[$i] - $numbers->[$i + 1]);\n   \
    \     if ($distance < $min_distance) {\n            $min_distance = $distance;\n\
    \            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index + 1]];\n}", "    my($min_diff, $min_pair) = (1e99, []);\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n  \
    \      }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for (my $i = 1; $i < scalar(@$numbers)\
    \ - 1; $i++) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", '    my $closest
  "    my @sorted = sort {$a <=> $b} @$numbers;\n    my $min_diff = abs($sorted[0]\
    \ - $sorted[1]);\n    my $min_pair = [$sorted[0], $sorted[1]];\n    for my $i\
    \ (1..$#sorted-1) {\n        my $diff = abs($sorted[$i] - $sorted[$i+1]);\n  \
    \      if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_pair\
    \ = [$sorted[$i], $sorted[$i+1]];\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my($smallest_difference) = abs($numbers->[0] - $numbers->[1]);\n    my($smallest_difference_index)\
    \ = 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($difference) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($difference < $smallest_difference) {\n\
    \            $smallest_difference = $difference;\n            $smallest_difference_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$smallest_difference_index],\
    \ $numbers->[$smallest_difference_index + 1]];\n}", "    my @numbers = @$numbers;\n\
    \    my $min_diff = abs($numbers[0] - $numbers[1]);\n    my @closest_elements\
    \ = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers; $i++) {\n\
    \        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @closest_elements = ($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return @closest_elements;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $closest_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n         \
    \   }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my @min_elements\
    \ = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                @min_elements = ($numbers->[$i],\
    \ $numbers->[$j]);\n            }\n        }\n    }\n    return \\@min_elements;\n\
    }", "    my @sorted = sort {$a <=> $b} @$numbers;\n    my $min_diff = abs($sorted[0]\
    \ - $sorted[1]);\n    my @min_pair = ($sorted[0], $sorted[1]);\n    for (my $i\
    \ = 1; $i < @sorted - 1; $i++) {\n        my $diff = abs($sorted[$i] - $sorted[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           @min_pair = ($sorted[$i], $sorted[$i + 1]);\n        }\n    }\n  \
    \  return @min_pair;\n}", "    my @numbers = @$numbers;\n    my $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    my @min_diff_pair = ($numbers[0], $numbers[1]);\n    for\
    \ (my $i = 0; $i < @numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @numbers;\
    \ $j++) {\n            my $diff = abs($numbers[$i] - $numbers[$j]);\n        \
    \    if ($diff < $min_diff) {\n                $min_diff = $diff;\n          \
    \      @min_diff_pair = ($numbers[$i], $numbers[$j]);\n            }\n       \
    \ }\n    }\n    return @min_diff_pair;\n}", "    my($min_diff, $min_pair) = (1e99,\
    \ []);\n    for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n  \
    \      }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my @sorted = sort {$a <=> $b} @$numbers;\n    my $min_diff = abs($sorted[0]\
    \ - $sorted[1]);\n    my @min_pair = ($sorted[0], $sorted[1]);\n    for (my $i\
    \ = 1; $i < @sorted - 1; $i++) {\n        my $diff = abs($sorted[$i] - $sorted[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           @min_pair = ($sorted[$i], $sorted[$i + 1]);\n        }\n    }\n  \
    \  return @min_pair;\n}", "    my @numbers = @$numbers;\n    my $min_distance\
    \ = abs($numbers[0] - $numbers[1]);\n    my @closest_elements = ($numbers[0],\
    \ $numbers[1]);\n    for (my $i = 0; $i < @numbers; $i++) {\n        for (my $j\
    \ = $i + 1; $j < @numbers; $j++) {\n            my $distance = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($distance < $min_distance) {\n           \
    \     $min_distance = $distance;\n                @closest_elements = ($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return @closest_elements;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($min_distance) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_index) = 0;\n    for my $i (1 .. $#$numbers -\
    \ 1) {\n        my($distance) = abs($numbers->[$i] - $numbers->[$i + 1]);\n  \
    \      if ($distance < $min_distance) {\n            $min_distance = $distance;\n\
    \            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index + 1]];\n}", "    my $closest = $numbers->[0] - $numbers->[1];\n\
    \    my $closest_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i\
    \ < scalar(@$numbers) - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers);\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $closest) {\n                $closest = $diff;\n        \
    \        $closest_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n  \
    \      }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n    for (my $i\
    \ = 1; $i < @$numbers - 1; $i++) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n \
    \           my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my($smallest_difference) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($smallest_difference_index) = 0;\n    for (my($i)\
    \ = 1; $i < scalar(@$numbers) - 1; $i++) {\n        my($difference) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($difference < $smallest_difference) {\n\
    \            $smallest_difference = $difference;\n            $smallest_difference_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$smallest_difference_index],\
    \ $numbers->[$smallest_difference_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for (my $i = 1; $i < @$numbers\
    \ - 1; $i++) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $closest_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n         \
    \   }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my @numbers = @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \    my $min_index = 0;\n    for (my $i = 1; $i < @numbers - 1; $i++) {\n    \
    \    my $diff = abs($numbers[$i] - $numbers[$i + 1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_index = $i;\n        }\n\
    \    }\n    return [$numbers[$min_index], $numbers[$min_index + 1]];\n}", "  \
    \  my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n\
    \    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($min_diff, $closest_elements);\n\
    \    for my $i (0 .. $#$numbers) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ (!defined($min_diff) || $diff < $min_diff) {\n                $min_diff = $diff;\n\
    \                $closest_elements = [$numbers->[$i], $numbers->[$j]];\n     \
    \       }\n        }\n    }\n    return $closest_elements;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j =\
    \ $i + 1; $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest_diff) {\n             \
    \   $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my $closest\
    \ = $numbers->[0] - $numbers->[1];\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j =\
    \ $i + 1; $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest) {\n                $closest\
    \ = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_distance\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_distance_index = 0;\n   \
    \ for (my $i = 0; $i < @$numbers - 1; $i++) {\n        my $distance = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($distance < $min_distance) {\n         \
    \   $min_distance = $distance;\n            $min_distance_index = $i;\n      \
    \  }\n    }\n    return [$numbers->[$min_distance_index], $numbers->[$min_distance_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_index = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n        my\
    \ $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_index], $numbers->[$min_index + 1]];\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. @$numbers - 2) {\n        for my $j ($i + 1 .. @$numbers - 1) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = $numbers->[1] - $numbers->[0];\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = $numbers->[$i+1]\
    \ - $numbers->[$i];\n        if ($diff < $min_diff) {\n            $min_diff =\
    \ $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_diff_index = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index+1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my @numbers = @$numbers;\n    my $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \    my @min_diff_numbers = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i\
    \ < @numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @numbers; $j++) {\n\
    \            my $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                @min_diff_numbers\
    \ = ($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ @min_diff_numbers;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my @closest_elements = ($numbers->[0], $numbers->[1]);\n    for (my $i =\
    \ 0; $i < scalar(@$numbers) - 1; $i++) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            @closest_elements = ($numbers->[$i], $numbers->[$i + 1]);\n\
    \        }\n    }\n    return @closest_elements;\n}", "    my($min_diff, $min_index)\
    \ = (1e99, -1);\n    for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ scalar(@$numbers); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers);\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($smallest_difference, $closest_elements)\
    \ = (undef, undef);\n    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n\
    \        my($difference) = abs($numbers->[$i] - $numbers->[$i + 1]);\n       \
    \ if (!defined($smallest_difference) || $difference < $smallest_difference) {\n\
    \            $smallest_difference = $difference;\n            $closest_elements\
    \ = [$numbers->[$i], $numbers->[$i + 1]];\n        }\n    }\n    return $closest_elements;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index+1]];\n}", "    my($min_diff, $min_pair) = (1e99, [0, 0]);\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my @closest_elements = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0;\
    \ $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers);\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          @closest_elements = ($numbers->[$i], $numbers->[$j]);\n           \
    \ }\n        }\n    }\n    return @closest_elements;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my($min_diff, $min_pair) = (undef, undef);\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if (!defined($min_diff) || $diff < $min_diff) {\n               \
    \ $min_diff = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $min_pair;\n}", "    my($min_diff,\
    \ $min_diff_pair) = (1e99, []);\n    for my $i (0 .. $#$numbers-1) {\n       \
    \ my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_diff_pair = [$numbers->[$i],\
    \ $numbers->[$i+1]];\n        }\n    }\n    return $min_diff_pair;\n}", "    my\
    \ $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n\
    \    for (my $i = 1; $i < scalar(@$numbers) - 1; $i++) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index],\
    \ $numbers->[$min_index + 1]];\n}", "    my $min = $numbers->[0];\n    my $max\
    \ = $numbers->[0];\n    my $min_index = 0;\n    my $max_index = 0;\n    for (my\
    \ $i = 1; $i < scalar(@$numbers); $i++) {\n        if ($numbers->[$i] < $min)\
    \ {\n            $min = $numbers->[$i];\n            $min_index = $i;\n      \
    \  }\n        if ($numbers->[$i] > $max) {\n            $max = $numbers->[$i];\n\
    \            $max_index = $i;\n        }\n    }\n    my $min_diff = $max - $min;\n\
    \    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n        for (my $j = $i\
    \ + 1; $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_index = $i;\n                $max_index = $j;\n\
    \            }\n        }\n    }\n    return [$numbers->[$min_index], $numbers->[$max_index]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my($min_diff, $min_pair) = (1e99,\
    \ []);\n    for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n  \
    \      }\n    }\n    return $min_pair;\n}", "    my @numbers = @$numbers;\n  \
    \  my $min_diff = abs($numbers[0] - $numbers[1]);\n    my $min_index = 0;\n  \
    \  for (my $i = 1; $i < @numbers - 1; $i++) {\n        my $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return [$numbers[$min_index],\
    \ $numbers[$min_index + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_index = 0;\n    for my $i (1..$#$numbers - 1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_index], $numbers->[$min_index + 1]];\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for (my $i = 1; $i < scalar(@$numbers)\
    \ - 1; $i++) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_index = $i;\n        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index\
    \ + 1]];\n}", "    my($min_diff, $min_pair) = (1e99, []);\n    for my $i (0 ..\
    \ $#$numbers - 1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my @sorted = sort {$a <=> $b} @$numbers;\n\
    \    my $min_diff = $sorted[1] - $sorted[0];\n    my @closest = ($sorted[0], $sorted[1]);\n\
    \    for (my $i = 1; $i < @sorted - 1; $i++) {\n        my $diff = $sorted[$i\
    \ + 1] - $sorted[$i];\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            @closest = ($sorted[$i], $sorted[$i + 1]);\n        }\n\
    \    }\n    return @closest;\n}", "    my @numbers = @$numbers;\n    my $min_diff\
    \ = abs($numbers[0] - $numbers[1]);\n    my @min_numbers = ($numbers[0], $numbers[1]);\n\
    \    for (my $i = 0; $i < @numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              @min_numbers = ($numbers[$i], $numbers[$j]);\n            }\n \
    \       }\n    }\n    return @min_numbers;\n}", "    my($min_diff, $min_pair)\
    \ = (1e100, []);\n    for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n  \
    \      }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n  \
    \      }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $closest_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n         \
    \   }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $closest_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n         \
    \   }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for (my $i = 1; $i < @$numbers\
    \ - 1; $i++) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my($min_diff, $min_pair) = (1e99, []);\n    for my $i (0\
    \ .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n        }\n   \
    \ }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my @closest =\
    \ ($numbers->[0], $numbers->[1]);\n    for my $i (0 .. $#$numbers - 1) {\n   \
    \     for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @closest = ($numbers->[$i], $numbers->[$j]);\n   \
    \         }\n        }\n    }\n    return @closest;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index+1]];\n\
    }", "    my($min_diff, $min_pair) = (1e100, []);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n     \
    \   if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_pair\
    \ = [$numbers->[$i], $numbers->[$i + 1]];\n        }\n    }\n    return $min_pair;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for (my $i = 1; $i < scalar(@$numbers) - 1; $i++) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_diff_index = $i;\n     \
    \   }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_diff_index = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n    \
    \    my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff <\
    \ $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index =\
    \ $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my($closest_diff, $closest_elements) = (1e100, []);\n \
    \   for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i] -\
    \ $numbers->[$i + 1]);\n        if ($diff < $closest_diff) {\n            $closest_diff\
    \ = $diff;\n            $closest_elements = [$numbers->[$i], $numbers->[$i + 1]];\n\
    \        }\n    }\n    return $closest_elements;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my @closest = ($numbers->[0], $numbers->[1]);\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          @closest = ($numbers->[$i], $numbers->[$j]);\n            }\n     \
    \   }\n    }\n    return @closest;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my @closest = ($numbers->[0], $numbers->[1]);\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          @closest = ($numbers->[$i], $numbers->[$j]);\n            }\n     \
    \   }\n    }\n    return @closest;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my $min = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_index = 0;\n    for (my $i = 1; $i < @$numbers - 1; $i++) {\n   \
    \     my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff\
    \ < $min) {\n            $min = $diff;\n            $min_index = $i;\n       \
    \ }\n    }\n    return [$numbers->[$min_index], $numbers->[$min_index + 1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]];\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return $min_pair;\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for my $i (1 .. $#$numbers\
    \ - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n    \
    \    if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]];\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_diff_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff =\
    \ abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_diff_index = $i;\n        }\n\
    \    }\n    return [$numbers->[$min_diff_index], $numbers->[$min_diff_index+1]];\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [];\n    for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_pair = [$numbers->[$i], $numbers->[$i + 1]];\n  \
    \      }\n    }\n    return $min_pair;\n}", "    my @numbers = @$numbers;\n  \
    \  my $min_diff = abs($numbers[0] - $numbers[1]);\n    my @min_diff_elements =\
    \ ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers - 1; $i++) {\n\
    \        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @min_diff_elements = ($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return @min_diff_elements;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
