name: HumanEval_70_strange_sort_list
language: pl
prompt: "# Given array of integers, return array in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list([1, 2, 3, 4])\n\
  # [1, 4, 2, 3]\n# >>> strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list([])\n\
  # []\nsub strange_sort_list {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5,\
  \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5,\
  \ -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @lst = @$lst;\n    my @res;\n    my $i = 0;\n    my $j = $#lst;\n\
    \    while ($i <= $j) {\n        if ($i == $j) {\n            push @res, $lst[$i];\n\
    \            last;\n        }\n        push @res, $lst[$i];\n        push @res,\
    \ $lst[$j];\n        $i++;\n        $j--;\n    }\n    return \\@res;\n}", "  \
    \  my @res = ();\n    my $len = scalar(@$lst);\n    my $i = 0;\n    my $j = $len\
    \ - 1;\n    while ($i <= $j) {\n        push @res, $lst->[$i];\n        $i++;\n\
    \        if ($i <= $j) {\n            push @res, $lst->[$j];\n            $j--;\n\
    \        }\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n\
    \    while (@lst) {\n        my $min = min(@lst);\n        my $max = max(@lst);\n\
    \        push @res, $min;\n        push @res, $max;\n        @lst = grep { $_\
    \ != $min && $_ != $max } @lst;\n    }\n    return \\@res;\n}", "    my @lst =\
    \ @$lst;\n    my @res;\n    while (@lst) {\n        push @res, shift @lst;\n \
    \       push @res, pop @lst if @lst;\n    }\n    return \\@res;\n}", "    my @result\
    \ = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n    my $i = 0;\n    my $j\
    \ = $#sorted;\n    while ($i <= $j) {\n        push @result, $sorted[$i];\n  \
    \      $i++;\n        if ($i <= $j) {\n            push @result, $sorted[$j];\n\
    \            $j--;\n        }\n    }\n    return \\@result;\n}", "    my @lst\
    \ = @$lst;\n    my @res;\n    while(@lst) {\n        push @res, shift @lst;\n\
    \        push @res, pop @lst if @lst;\n    }\n    return @res;\n}", "    my @lst\
    \ = @$lst;\n    my @res;\n    while (@lst) {\n        push @res, shift @lst;\n\
    \        push @res, pop @lst;\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n\
    \    my @res;\n    my @sorted = sort { $a <=> $b } @lst;\n    my $i = 0;\n   \
    \ while (@sorted) {\n        push @res, splice(@sorted, $i, 1);\n        $i =\
    \ $i ? 0 : -1;\n    }\n    return \\@res;\n}", "    my $len = scalar @$lst;\n\
    \    my @res = ();\n    my $i = 0;\n    while($i < $len) {\n        my $min =\
    \ $lst->[$i];\n        my $max = $lst->[$i];\n        for(my $j = $i; $j < $len;\
    \ $j++) {\n            $min = $lst->[$j] if $lst->[$j] < $min;\n            $max\
    \ = $lst->[$j] if $lst->[$j] > $max;\n        }\n        push @res, $min;\n  \
    \      push @res, $max;\n        $i += 2;\n    }\n    return \\@res;\n}", "  \
    \  my @lst = @$lst;\n    my @res;\n    while (@lst) {\n        my $min = min @lst;\n\
    \        my $max = max @lst;\n        push @res, $min;\n        push @res, $max;\n\
    \        @lst = grep { $_ != $min && $_ != $max } @lst;\n    }\n    return \\\
    @res;\n}", "    my @lst = @$lst;\n    my @res;\n    while (@lst) {\n        my\
    \ $min = min @lst;\n        my $max = max @lst;\n        push @res, $min;\n  \
    \      push @res, $max;\n        @lst = grep { $_ != $min && $_ != $max } @lst;\n\
    \    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    while(@lst)\
    \ {\n        push @res, shift @lst;\n        push @res, pop @lst;\n    }\n   \
    \ return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    while (@lst) {\n\
    \        push @res, shift @lst;\n        push @res, pop @lst;\n    }\n    return\
    \ \\@res;\n}", "    my @result = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n\
    \    my $i = 0;\n    while (@sorted) {\n        push @result, splice(@sorted,\
    \ $i, 1);\n        $i = $i ? 0 : -1;\n    }\n    return \\@result;\n}", "    my\
    \ @lst = @$lst;\n    my @res;\n    while (@lst) {\n        my $min = min @lst;\n\
    \        my $max = max @lst;\n        push @res, $min;\n        push @res, $max;\n\
    \        @lst = grep { $_ != $min && $_ != $max } @lst;\n    }\n    return @res;\n\
    }", "    my @lst = @$lst;\n    my @res;\n    my $min = min(@lst);\n    my $max\
    \ = max(@lst);\n    my $i = 0;\n    while(@lst) {\n        if($i % 2 == 0) {\n\
    \            push @res, $min;\n            @lst = grep { $_ != $min } @lst;\n\
    \            $min = min(@lst);\n        } else {\n            push @res, $max;\n\
    \            @lst = grep { $_ != $max } @lst;\n            $max = max(@lst);\n\
    \        }\n        $i++;\n    }\n    return \\@res;\n}", "    my $len = scalar\
    \ @$lst;\n    my $i = 0;\n    my $j = $len - 1;\n    my @res;\n    while ($i <=\
    \ $j) {\n        push @res, $lst->[$i];\n        if ($i != $j) {\n           \
    \ push @res, $lst->[$j];\n        }\n        $i++;\n        $j--;\n    }\n   \
    \ return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    while (@lst) {\n\
    \        push @res, shift @lst;\n        push @res, pop @lst;\n    }\n    return\
    \ @res;\n}", "    my @lst = @$lst;\n    my @res;\n    my $i = 0;\n    my $j =\
    \ scalar(@lst) - 1;\n    while ($i <= $j) {\n        push @res, $lst[$i];\n  \
    \      $i++;\n        if ($i <= $j) {\n            push @res, $lst[$j];\n    \
    \        $j--;\n        }\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n\
    \    my $len = @lst;\n    my @res;\n    my $i = 0;\n    while($i < $len) {\n \
    \       my $min = min(@lst);\n        push @res, $min;\n        @lst = grep {\
    \ $_ != $min } @lst;\n        $i++;\n        if($i < $len) {\n            my $max\
    \ = max(@lst);\n            push @res, $max;\n            @lst = grep { $_ !=\
    \ $max } @lst;\n            $i++;\n        }\n    }\n    return @res;\n}", " \
    \   my @result = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n    my $i =\
    \ 0;\n    my $j = $#sorted;\n    while ($i <= $j) {\n        push @result, $sorted[$i];\n\
    \        $i++;\n        if ($i <= $j) {\n            push @result, $sorted[$j];\n\
    \            $j--;\n        }\n    }\n    return \\@result;\n}", "    my @lst\
    \ = @$lst;\n    my @res;\n    my $min = min(@lst);\n    my $max = max(@lst);\n\
    \    my $min_idx = first_index { $_ == $min } @lst;\n    my $max_idx = first_index\
    \ { $_ == $max } @lst;\n    push @res, $min;\n    push @res, $max;\n    splice\
    \ @lst, $min_idx, 1;\n    splice @lst, $max_idx, 1;\n    while (@lst) {\n    \
    \    $min = min(@lst);\n        $max = max(@lst);\n        $min_idx = first_index\
    \ { $_ == $min } @lst;\n        $max_idx = first_index { $_ == $max } @lst;\n\
    \        push @res, $min;\n        push @res, $max;\n        splice @lst, $min_idx,\
    \ 1;\n        splice @lst, $max_idx, 1;\n    }\n    return \\@res;\n}", "    my\
    \ @sorted = sort { $a <=> $b } @$lst;\n    my @res = ();\n    my $i = 0;\n   \
    \ while (@sorted) {\n        if ($i % 2 == 0) {\n            push @res, shift\
    \ @sorted;\n        } else {\n            push @res, pop @sorted;\n        }\n\
    \        $i++;\n    }\n    return \\@res;\n}", "    my @sorted = sort { $a <=>\
    \ $b } @$lst;\n    my @result;\n    my $i = 0;\n    my $j = $#sorted;\n    while\
    \ ($i <= $j) {\n        push @result, $sorted[$i];\n        $i++;\n        if\
    \ ($i <= $j) {\n            push @result, $sorted[$j];\n            $j--;\n  \
    \      }\n    }\n    return \\@result;\n}", "    my @lst = @$lst;\n    my @res;\n\
    \    my $i = 0;\n    my $j = @lst - 1;\n    while ($i <= $j) {\n        push @res,\
    \ $lst[$i];\n        $i++;\n        if ($i <= $j) {\n            push @res, $lst[$j];\n\
    \            $j--;\n        }\n    }\n    return \\@res;\n}", "    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    my @result;\n    while (@sorted) {\n      \
    \  push @result, shift @sorted;\n        push @result, pop @sorted;\n    }\n \
    \   return \\@result;\n}", "    my @lst = @$lst;\n    my @res;\n    my $i = 0;\n\
    \    while (@lst) {\n        my $min = min(@lst);\n        my $max = max(@lst);\n\
    \        if ($i % 2 == 0) {\n            push @res, $min;\n            @lst =\
    \ grep { $_ != $min } @lst;\n        } else {\n            push @res, $max;\n\
    \            @lst = grep { $_ != $max } @lst;\n        }\n        $i++;\n    }\n\
    \    return \\@res;\n}", "    my @sorted = sort { $a <=> $b } @$lst;\n    my @result;\n\
    \    while (@sorted) {\n        push @result, shift @sorted;\n        push @result,\
    \ pop @sorted;\n    }\n    return \\@result;\n}", "    my @sorted = sort {$a <=>\
    \ $b} @$lst;\n    my @result;\n    my $i = 0;\n    my $j = $#sorted;\n    while\
    \ ($i <= $j) {\n        push @result, $sorted[$i];\n        $i++;\n        if\
    \ ($i <= $j) {\n            push @result, $sorted[$j];\n            $j--;\n  \
    \      }\n    }\n    return \\@result;\n}", "    my @sorted = sort { $a <=> $b\
    \ } @$lst;\n    my @res = ();\n    while (@sorted) {\n        push @res, shift\
    \ @sorted;\n        push @res, pop @sorted if @sorted;\n    }\n    return \\@res;\n\
    }", "    my @lst = @$lst;\n    my @res;\n    while (@lst) {\n        my $min =\
    \ min(@lst);\n        push @res, $min;\n        @lst = grep { $_ != $min } @lst;\n\
    \        my $max = max(@lst);\n        push @res, $max if defined $max;\n    \
    \    @lst = grep { $_ != $max } @lst;\n    }\n    return \\@res;\n}", "    my\
    \ @res = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n    my $i = 0;\n   \
    \ my $j = @sorted - 1;\n    while ($i <= $j) {\n        push @res, $sorted[$i];\n\
    \        $i++;\n        if ($i <= $j) {\n            push @res, $sorted[$j];\n\
    \            $j--;\n        }\n    }\n    return \\@res;\n}", "    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    my @result;\n    my $i = 0;\n    my $j = $#sorted;\n\
    \    while ($i <= $j) {\n        push @result, $sorted[$i];\n        $i++;\n \
    \       if ($i <= $j) {\n            push @result, $sorted[$j];\n            $j--;\n\
    \        }\n    }\n    return \\@result;\n}", "    my @result = ();\n    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    while (@sorted) {\n        push @result, shift\
    \ @sorted;\n        push @result, pop @sorted;\n    }\n    return \\@result;\n\
    }", "    my @lst = @$lst;\n    my @res;\n    while (@lst) {\n        my $min =\
    \ min @lst;\n        push @res, $min;\n        @lst = grep {$_ != $min} @lst;\n\
    \        my $max = max @lst;\n        push @res, $max;\n        @lst = grep {$_\
    \ != $max} @lst;\n    }\n    return \\@res;\n}", "    my @sorted = sort { $a <=>\
    \ $b } @$lst;\n    my @result;\n    while (@sorted) {\n        push @result, shift\
    \ @sorted;\n        push @result, pop @sorted if @sorted;\n    }\n    return \\\
    @result;\n}", "    my @res = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n\
    \    my $i = 0;\n    while (@sorted) {\n        push @res, shift @sorted;\n  \
    \      if (@sorted) {\n            push @res, pop @sorted;\n        }\n    }\n\
    \    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    my $i = 0;\n\
    \    while (@lst) {\n        my $min = min(@lst);\n        my $max = max(@lst);\n\
    \        if ($i % 2 == 0) {\n            push @res, $min;\n            @lst =\
    \ grep { $_ != $min } @lst;\n        } else {\n            push @res, $max;\n\
    \            @lst = grep { $_ != $max } @lst;\n        }\n        $i++;\n    }\n\
    \    return \\@res;\n}", "    my @sorted = sort { $a <=> $b } @$lst;\n    my @result;\n\
    \    while (@sorted) {\n        push @result, shift @sorted;\n        push @result,\
    \ pop @sorted if @sorted;\n    }\n    return \\@result;\n}", "    my @sorted =\
    \ sort { $a <=> $b } @$lst;\n    my @result;\n    while (@sorted) {\n        push\
    \ @result, shift @sorted;\n        push @result, pop @sorted if @sorted;\n   \
    \ }\n    return \\@result;\n}", "    my @lst = @$lst;\n    my @res;\n    my $i\
    \ = 0;\n    while (@lst) {\n        my $min = min @lst;\n        my $max = max\
    \ @lst;\n        if ($i % 2 == 0) {\n            push @res, $min;\n          \
    \  @lst = grep { $_ != $min } @lst;\n        } else {\n            push @res,\
    \ $max;\n            @lst = grep { $_ != $max } @lst;\n        }\n        $i++;\n\
    \    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    my $i\
    \ = 0;\n    my $j = scalar(@lst) - 1;\n    while ($i <= $j) {\n        push @res,\
    \ $lst[$i];\n        $i++;\n        if ($i <= $j) {\n            push @res, $lst[$j];\n\
    \            $j--;\n        }\n    }\n    return \\@res;\n}", "    my @sorted\
    \ = sort {$a <=> $b} @$lst;\n    my @res = ();\n    my $i = 0;\n    my $j = $#sorted;\n\
    \    while ($i <= $j) {\n        push @res, $sorted[$i];\n        $i++;\n    \
    \    if ($i <= $j) {\n            push @res, $sorted[$j];\n            $j--;\n\
    \        }\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n\
    \    my $min = min @lst;\n    my $max = max @lst;\n    my $i = 0;\n    while (@lst)\
    \ {\n        if ($i % 2 == 0) {\n            push @res, $min;\n            @lst\
    \ = grep { $_ != $min } @lst;\n            $min = min @lst;\n        } else {\n\
    \            push @res, $max;\n            @lst = grep { $_ != $max } @lst;\n\
    \            $max = max @lst;\n        }\n        $i++;\n    }\n    return \\\
    @res;\n}", "    my @lst = @$lst;\n    my @res;\n    while (@lst) {\n        push\
    \ @res, shift @lst;\n        push @res, pop @lst;\n    }\n    return \\@res;\n\
    }", "    my @lst = @$lst;\n    my @res;\n    my $i = 0;\n    my $j = @lst - 1;\n\
    \    while ($i <= $j) {\n        push @res, $lst[$i];\n        $i++;\n       \
    \ if ($i <= $j) {\n            push @res, $lst[$j];\n            $j--;\n     \
    \   }\n    }\n    return \\@res;\n}", "    my @res = ();\n    my @sorted = sort\
    \ { $a <=> $b } @$lst;\n    my $i = 0;\n    my $j = $#sorted;\n    while ($i <=\
    \ $j) {\n        push @res, $sorted[$i];\n        $i++;\n        if ($i <= $j)\
    \ {\n            push @res, $sorted[$j];\n            $j--;\n        }\n    }\n\
    \    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    while (@lst)\
    \ {\n        my $min = min @lst;\n        my $max = max @lst;\n        push @res,\
    \ $min;\n        push @res, $max;\n        @lst = grep { $_ != $min && $_ != $max\
    \ } @lst;\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n\
    \    while (@lst) {\n        my $min = min @lst;\n        push @res, $min;\n \
    \       @lst = grep { $_ != $min } @lst;\n        my $max = max @lst;\n      \
    \  push @res, $max;\n        @lst = grep { $_ != $max } @lst;\n    }\n    return\
    \ \\@res;\n}", "    my @result = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n\
    \    my $i = 0;\n    while(@sorted) {\n        push @result, shift @sorted;\n\
    \        if(@sorted) {\n            push @result, pop @sorted;\n        }\n  \
    \  }\n    return \\@result;\n}", "    my $n = scalar @$lst;\n    my @res = ();\n\
    \    my $i = 0;\n    while ($i < $n) {\n        my $min = $lst->[$i];\n      \
    \  my $min_idx = $i;\n        my $max = $lst->[$i];\n        my $max_idx = $i;\n\
    \        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($lst->[$j] < $min)\
    \ {\n                $min = $lst->[$j];\n                $min_idx = $j;\n    \
    \        }\n            if ($lst->[$j] > $max) {\n                $max = $lst->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        if ($i % 2\
    \ == 0) {\n            push @res, $min;\n            $i = $min_idx + 1;\n    \
    \    } else {\n            push @res, $max;\n            $i = $max_idx + 1;\n\
    \        }\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n\
    \    while(@lst) {\n        push @res, shift @lst;\n        push @res, pop @lst;\n\
    \    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    my $min\
    \ = min(@lst);\n    my $max = max(@lst);\n    my $min_idx = first_index { $_ ==\
    \ $min } @lst;\n    my $max_idx = first_index { $_ == $max } @lst;\n    push @res,\
    \ $min;\n    push @res, $max;\n    splice @lst, $min_idx, 1;\n    splice @lst,\
    \ $max_idx, 1;\n    while (@lst) {\n        $min = min(@lst);\n        $max =\
    \ max(@lst);\n        $min_idx = first_index { $_ == $min } @lst;\n        $max_idx\
    \ = first_index { $_ == $max } @lst;\n        push @res, $min;\n        push @res,\
    \ $max;\n        splice @lst, $min_idx, 1;\n        splice @lst, $max_idx, 1;\n\
    \    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    while(@lst)\
    \ {\n        my $min = min @lst;\n        my $max = max @lst;\n        push @res,\
    \ $min;\n        push @res, $max;\n        @lst = grep { $_ != $min && $_ != $max\
    \ } @lst;\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n\
    \    my $i = 0;\n    my $j = @lst - 1;\n    while ($i <= $j) {\n        push @res,\
    \ $lst[$i++];\n        push @res, $lst[$j--] if $i <= $j;\n    }\n    return \\\
    @res;\n}", "    my @lst = @$lst;\n    my @res;\n    while (@lst) {\n        my\
    \ $min = min(@lst);\n        my $max = max(@lst);\n        push @res, $min;\n\
    \        push @res, $max;\n        @lst = grep { $_ != $min && $_ != $max } @lst;\n\
    \    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    while(@lst)\
    \ {\n        my $min = min(@lst);\n        push @res, $min;\n        @lst = grep\
    \ { $_ != $min } @lst;\n        my $max = max(@lst);\n        push @res, $max\
    \ if defined $max;\n        @lst = grep { $_ != $max } @lst;\n    }\n    return\
    \ @res;\n}", "    my @lst = @$lst;\n    my @res;\n    while (@lst) {\n       \
    \ my $min = min(@lst);\n        push @res, $min;\n        @lst = grep { $_ !=\
    \ $min } @lst;\n        my $max = max(@lst);\n        push @res, $max if defined\
    \ $max;\n        @lst = grep { $_ != $max } @lst;\n    }\n    return @res;\n}",
  "    my @lst = @$lst;\n    my @res;\n    while (@lst) {\n        push @res, shift\
    \ @lst;\n        push @res, pop @lst;\n    }\n    return \\@res;\n}", "    my\
    \ @lst = @$lst;\n    my @res;\n    my @sorted = sort { $a <=> $b } @lst;\n   \
    \ my $i = 0;\n    while (@sorted) {\n        push @res, $sorted[$i];\n       \
    \ splice @sorted, $i, 1;\n        $i = $i == $#sorted ? 0 : $#sorted;\n    }\n\
    \    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    while (@lst)\
    \ {\n        my $min = min(@lst);\n        my $max = max(@lst);\n        push\
    \ @res, $min;\n        push @res, $max;\n        @lst = grep { $_ != $min && $_\
    \ != $max } @lst;\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my\
    \ @res;\n    while(@lst) {\n        my $min = min @lst;\n        my $max = max\
    \ @lst;\n        push @res, $min;\n        push @res, $max;\n        @lst = grep\
    \ { $_ != $min && $_ != $max } @lst;\n    }\n    return @res;\n}", "    my @lst\
    \ = @$lst;\n    my @res;\n    while (@lst) {\n        my $min = min(@lst);\n \
    \       push @res, $min;\n        @lst = grep { $_ != $min } @lst;\n        my\
    \ $max = max(@lst);\n        push @res, $max if defined $max;\n        @lst =\
    \ grep { $_ != $max } @lst;\n    }\n    return \\@res;\n}", "    my @result =\
    \ ();\n    my @sorted = sort { $a <=> $b } @$lst;\n    my $i = 0;\n    my $j =\
    \ $#sorted;\n    while ($i <= $j) {\n        push @result, $sorted[$i];\n    \
    \    $i++;\n        if ($i <= $j) {\n            push @result, $sorted[$j];\n\
    \            $j--;\n        }\n    }\n    return \\@result;\n}", "    my @res\
    \ = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n    my $i = 0;\n    my $j\
    \ = $#sorted;\n    while ($i <= $j) {\n        push @res, $sorted[$i];\n     \
    \   $i++;\n        if ($i <= $j) {\n            push @res, $sorted[$j];\n    \
    \        $j--;\n        }\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n\
    \    my @res;\n    my $min = min(@lst);\n    while(@lst) {\n        push @res,\
    \ $min;\n        @lst = grep { $_ != $min } @lst;\n        $min = min(@lst);\n\
    \        my $max = max(@lst);\n        push @res, $max;\n        @lst = grep {\
    \ $_ != $max } @lst;\n    }\n    return @res;\n}", "    my $len = scalar @$lst;\n\
    \    my @sorted = sort { $a <=> $b } @$lst;\n    my @res = ();\n    my $min =\
    \ 0;\n    my $max = $len - 1;\n    while ($min <= $max) {\n        push @res,\
    \ $sorted[$min];\n        $min++;\n        if ($min <= $max) {\n            push\
    \ @res, $sorted[$max];\n            $max--;\n        }\n    }\n    return \\@res;\n\
    }", "    my @lst = @$lst;\n    my @res;\n    my $i = 0;\n    while (@lst) {\n\
    \        my $min = min @lst;\n        my $max = max @lst;\n        if ($i % 2\
    \ == 0) {\n            push @res, $min;\n            @lst = grep { $_ != $min\
    \ } @lst;\n        } else {\n            push @res, $max;\n            @lst =\
    \ grep { $_ != $max } @lst;\n        }\n        $i++;\n    }\n    return \\@res;\n\
    }", "    my @result = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n    my\
    \ $i = 0;\n    while (@sorted) {\n        push @result, shift @sorted;\n     \
    \   if (@sorted) {\n            push @result, pop @sorted;\n        }\n    }\n\
    \    return \\@result;\n}", "    my @lst = @$lst;\n    my @res;\n    while (@lst)\
    \ {\n        my $min = min @lst;\n        my $max = max @lst;\n        push @res,\
    \ $min;\n        push @res, $max;\n        @lst = grep { $_ != $min && $_ != $max\
    \ } @lst;\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n\
    \    while (@lst) {\n        my $min = min(@lst);\n        push @res, $min;\n\
    \        @lst = grep { $_ != $min } @lst;\n        my $max = max(@lst);\n    \
    \    push @res, $max if defined $max;\n        @lst = grep { $_ != $max } @lst;\n\
    \    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    my $min\
    \ = min(@lst);\n    my $max = max(@lst);\n    my $min_idx = first_index { $_ ==\
    \ $min } @lst;\n    my $max_idx = first_index { $_ == $max } @lst;\n    while\
    \ (@lst) {\n        push @res, $min;\n        splice @lst, $min_idx, 1;\n    \
    \    $min = min(@lst);\n        $min_idx = first_index { $_ == $min } @lst;\n\
    \        if (@lst) {\n            push @res, $max;\n            splice @lst, $max_idx,\
    \ 1;\n            $max = max(@lst);\n            $max_idx = first_index { $_ ==\
    \ $max } @lst;\n        }\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n\
    \    my @res;\n    while(@lst) {\n        push @res, shift @lst;\n        push\
    \ @res, pop @lst;\n    }\n    return \\@res;\n}", "    my @res = ();\n    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    my $i = 0;\n    while (scalar @sorted > 0)\
    \ {\n        if ($i % 2 == 0) {\n            push @res, shift @sorted;\n     \
    \   } else {\n            push @res, pop @sorted;\n        }\n        $i++;\n\
    \    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @res;\n    while\
    \ (@lst) {\n        my $min = min @lst;\n        my $max = max @lst;\n       \
    \ push @res, $min;\n        push @res, $max;\n        @lst = grep { $_ != $min\
    \ && $_ != $max } @lst;\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n\
    \    my @res;\n    my $len = scalar @lst;\n    my $i = 0;\n    while ($i < $len)\
    \ {\n        my $min = min @lst;\n        push @res, $min;\n        @lst = grep\
    \ { $_ != $min } @lst;\n        my $max = max @lst;\n        push @res, $max;\n\
    \        @lst = grep { $_ != $max } @lst;\n        $i += 2;\n    }\n    return\
    \ \\@res;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
