name: HumanEval_157_right_angle_triangle
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return 1 if the three\n\
  # sides form a right-angled triangle,  otherwise.\n# A right-angled triangle is\
  \ a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n#\
  \ >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
  # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n  \
    \  my $mid = $a + $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n\
    }", "    my $hypotenuse = max($a, $b, $c);\n    my $cathetus1 = min($a, $b, $c);\n\
    \    my $cathetus2 = ($a + $b + $c) - $hypotenuse - $cathetus1;\n    return ($hypotenuse\
    \ ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2) ? 1 : \"\";\n}", "    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = sum($a, $b, $c) - $max\
    \ - $min;\n    return $max**2 == $min**2 + $mid**2;\n}", "    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}", "    my $max\
    \ = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b +\
    \ $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n}",
  "    my $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a\
    \ + $b + $c) - $max - $min;\n    return ($max * $max == $min * $min + $mid * $mid)\
    \ ? 1 : \"\";\n}", "    my $max = max($a, $b, $c);\n    my $min = min($a, $b,\
    \ $c);\n    my $mid = $a + $b + $c - $max - $min;\n    return $max**2 == $min**2\
    \ + $mid**2;\n}", "    my $r = 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n   \
    \     if ($a * $a + $b * $b == $c * $c) {\n            $r = 1;\n        }\n  \
    \      elsif ($a * $a + $c * $c == $b * $b) {\n            $r = 1;\n        }\n\
    \        elsif ($b * $b + $c * $c == $a * $a) {\n            $r = 1;\n       \
    \ }\n    }\n    return $r;\n}", "    my $max = max($a, $b, $c);\n    my $min =\
    \ min($a, $b, $c);\n    my $mid = $a + $b + $c - $max - $min;\n    return $max\
    \ * $max == $min * $min + $mid * $mid;\n}", "    my $hypotenuse = max($a, $b,\
    \ $c);\n    my $cathetus1 = min($a, $b, $c);\n    my $cathetus2 = ($a + $b + $c)\
    \ - $hypotenuse - $cathetus1;\n    return ($hypotenuse ** 2 == $cathetus1 ** 2\
    \ + $cathetus2 ** 2) ? 1 : \"\";\n}", "    my $max = max($a, $b, $c);\n    my\
    \ $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max - $min;\n    return\
    \ ($max**2 == $min**2 + $mid**2) ? 1 : \"\";\n}", "    my $max = max($a, $b, $c);\n\
    \    my $sum = $a + $b + $c;\n    my $min = min($a, $b, $c);\n    my $mid = $sum\
    \ - $max - $min;\n    if ($max * $max == $mid * $mid + $min * $min) {\n      \
    \  return 1;\n    }\n    return \"\";\n}", "    my $r = 0;\n    if (($a**2 + $b**2\
    \ == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n     \
    \   $r = 1;\n    }\n    return $r;\n}", "    my $r = 0;\n    if ($a > 0 && $b\
    \ > 0 && $c > 0) {\n        if ($a ** 2 + $b ** 2 == $c ** 2) {\n            $r\
    \ = 1;\n        }\n        elsif ($a ** 2 + $c ** 2 == $b ** 2) {\n          \
    \  $r = 1;\n        }\n        elsif ($b ** 2 + $c ** 2 == $a ** 2) {\n      \
    \      $r = 1;\n        }\n    }\n    return $r;\n}", "    my $max = max($a, $b,\
    \ $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max - $min;\n\
    \    return $max * $max == $min * $min + $mid * $mid;\n}", "    my $max = max($a,\
    \ $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max\
    \ - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}", "    my $s = ($a\
    \ + $b + $c) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    my $p = $a + $b + $c;\n    my $r = $p / 2;\n    my $r_area = pi * $r * $r;\n\
    \    return $area == $r_area ? 1 : '';\n}", "    my $result = 0;\n    if ($a >\
    \ 0 && $b > 0 && $c > 0) {\n        my $max = max($a, $b, $c);\n        my $min\
    \ = min($a, $b, $c);\n        my $mid = $a + $b + $c - $max - $min;\n        if\
    \ ($max * $max == $min * $min + $mid * $mid) {\n            $result = 1;\n   \
    \     }\n    }\n    return $result;\n}", "    my $max = max($a, $b, $c);\n   \
    \ my $min = min($a, $b, $c);\n    my $mid = ($a + $b + $c) - $max - $min;\n  \
    \  return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1 : \"\";\n}", "    my $max =\
    \ max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a + $b + $c\
    \ - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n      \
    \  return 1;\n    }\n    return \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
