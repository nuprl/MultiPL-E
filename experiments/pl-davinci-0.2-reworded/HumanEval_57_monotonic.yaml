name: HumanEval_57_monotonic
language: pl
prompt: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
  # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n#\
  \ >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
  \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 20, 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1,\
  \ 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $i;\n    my $inc = 0;\n    my $dec = 0;\n    for ($i = 1; $i\
    \ < @$l; $i++) {\n\tif ($l->[$i] > $l->[$i-1]) {\n\t    $inc = 1;\n\t} elsif ($l->[$i]\
    \ < $l->[$i-1]) {\n\t    $dec = 1;\n\t}\n\tif ($inc && $dec) {\n\t    return \"\
    \";\n\t}\n    }\n    return 1;\n}", "    my($i, $n, $d);\n    $n = @$l;\n    for($i\
    \ = 1; $i < $n; $i++) {\n\t$d = $l->[$i] - $l->[$i-1];\n\tif($d == 0) {\n\t  \
    \  return \"\";\n\t}\n\tif($i == 1) {\n\t    $d = ($d > 0) ? 1 : -1;\n\t}\n\t\
    if($d != ($l->[$i] - $l->[$i-1])) {\n\t    return \"\";\n\t}\n    }\n    return\
    \ 1;\n}", "    my $i;\n    my $d;\n    for ($i = 1; $i < @$l; $i++) {\n\tif ($l->[$i]\
    \ > $l->[$i-1]) {\n\t    if (defined $d && $d < 0) {\n\t\treturn \"\";\n\t   \
    \ }\n\t    $d = 1;\n\t} elsif ($l->[$i] < $l->[$i-1]) {\n\t    if (defined $d\
    \ && $d > 0) {\n\t\treturn \"\";\n\t    }\n\t    $d = -1;\n\t}\n    }\n    return\
    \ 1;\n}", "    my $i;\n    my $j;\n    my $k;\n    my $n = scalar(@$l);\n    my\
    \ $inc = 1;\n    my $dec = 1;\n    for ($i = 0; $i < $n - 1; $i++) {\n       \
    \ $j = $l->[$i];\n        $k = $l->[$i + 1];\n        if ($j > $k) {\n       \
    \     $inc = 0;\n        }\n        if ($j < $k) {\n            $dec = 0;\n  \
    \      }\n    }\n    return $inc || $dec;\n}", "    my($i, $j, $k);\n    $i =\
    \ $l->[0];\n    for $j (@$l) {\n        if ($i < $j) {\n            $k = 1;\n\
    \            last;\n        }\n        if ($i > $j) {\n            $k = -1;\n\
    \            last;\n        }\n        $i = $j;\n    }\n    $k;\n}", "    my($i,\
    \ $d);\n    for ($i = 1; $i < @$l; $i++) {\n        $d = $l->[$i] - $l->[$i-1];\n\
    \        return \"\" if $d == 0;\n        return \"\" if $i > 1 && $d * ($l->[$i-1]\
    \ - $l->[$i-2]) < 0;\n    }\n    return 1;\n}", "    my($i, $j);\n    for ($i\
    \ = 0; $i < @$l - 1; $i++) {\n\t$j = $i + 1;\n\treturn \"\" if ($l->[$i] > $l->[$j]\
    \ && $l->[$i] - $l->[$j] != 1);\n\treturn \"\" if ($l->[$i] < $l->[$j] && $l->[$j]\
    \ - $l->[$i] != 1);\n    }\n    return 1;\n}", "    my($i, $j, $k);\n    my($n)\
    \ = scalar(@$l);\n    if ($n <= 1) {\n\treturn 1;\n    }\n    $i = $l->[0];\n\
    \    $j = $l->[1];\n    if ($i < $j) {\n\tfor ($k = 2; $k < $n; $k++) {\n\t  \
    \  if ($l->[$k] < $l->[$k - 1]) {\n\t\treturn \"\";\n\t    }\n\t}\n    }\n   \
    \ elsif ($i > $j) {\n\tfor ($k = 2; $k < $n; $k++) {\n\t    if ($l->[$k] > $l->[$k\
    \ - 1]) {\n\t\treturn \"\";\n\t    }\n\t}\n    }\n    else {\n\treturn \"\";\n\
    \    }\n    return 1;\n}", "    my($i, $n, $r);\n    $n = scalar(@$l);\n    $r\
    \ = 0;\n    for ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i] > $l->[$i-1]) {\n\t\
    \    if ($r == -1) {\n\t\treturn \"\";\n\t    }\n\t    $r = 1;\n\t} elsif ($l->[$i]\
    \ < $l->[$i-1]) {\n\t    if ($r == 1) {\n\t\treturn \"\";\n\t    }\n\t    $r =\
    \ -1;\n\t}\n    }\n    return $r;\n}", "    my($i, $j);\n    my($n) = scalar(@$l);\n\
    \    for ($i = 0; $i < $n - 1; $i++) {\n\t$j = $i + 1;\n\tif ($l->[$i] < $l->[$j])\
    \ {\n\t    last;\n\t}\n    }\n    if ($i == $n - 1) {\n\treturn 1;\n    }\n  \
    \  for ($i = 0; $i < $n - 1; $i++) {\n\t$j = $i + 1;\n\tif ($l->[$i] > $l->[$j])\
    \ {\n\t    last;\n\t}\n    }\n    if ($i == $n - 1) {\n\treturn 1;\n    }\n  \
    \  return \"\";\n}", "    my $i;\n    my $j;\n    my $k;\n    my $n = scalar(@$l);\n\
    \    my $m = 0;\n    my $d = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n",
  "    my($i, $j);\n    my($n) = @$l;\n    my($s) = 0;\n    for ($i = 1; $i < $n;\
    \ $i++) {\n\t$j = $i - 1;\n\tif ($l->[$i] > $l->[$j]) {\n\t    if ($s == -1) {\n\
    \t\treturn \"\";\n\t    }\n\t    $s = 1;\n\t} elsif ($l->[$i] < $l->[$j]) {\n\t\
    \    if ($s == 1) {\n\t\treturn \"\";\n\t    }\n\t    $s = -1;\n\t}\n    }\n \
    \   return 1;\n}", "    my $i;\n    my $prev = $l->[0];\n    my $inc = 0;\n  \
    \  my $dec = 0;\n    for ($i = 1; $i < @$l; $i++) {\n        if ($l->[$i] > $prev)\
    \ {\n            $inc = 1;\n        } elsif ($l->[$i] < $prev) {\n           \
    \ $dec = 1;\n        }\n        $prev = $l->[$i];\n    }\n    return ($inc &&\
    \ $dec) ? \"\" : 1;\n}", "    my($i, $j);\n    my($n) = @$l;\n    for($i = 1;\
    \ $i < $n; $i++) {\n\t$j = $i - 1;\n\tif($l->[$i] < $l->[$j]) {\n\t    for(; $i\
    \ < $n; $i++) {\n\t\t$j = $i - 1;\n\t\treturn \"\" if($l->[$i] > $l->[$j]);\n\t\
    \    }\n\t    return 1;\n\t}\n\tif($l->[$i] > $l->[$j]) {\n\t    for(; $i < $n;\
    \ $i++) {\n\t\t$j = $i - 1;\n\t\treturn \"\" if($l->[$i] < $l->[$j]);\n\t    }\n\
    \t    return 1;\n\t}\n    }\n    return 1;\n}", "    my($i, $j, $k);\n    my($n)\
    \ = scalar(@$l);\n    my($mono) = 1;\n    for($i = 0; $i < $n - 1; $i++) {\n\t\
    $j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif($j < $k) {\n\t    if($mono == -1) {\n\
    \t\treturn \"\";\n\t    }\n\t    $mono = 1;\n\t}\n\telsif($j > $k) {\n\t    if($mono\
    \ == 1) {\n\t\treturn \"\";\n\t    }\n\t    $mono = -1;\n\t}\n    }\n    return\
    \ $mono;\n}", "    my($i, $j);\n    my($n) = scalar(@$l);\n    for($i = 0; $i\
    \ < $n - 1; $i++) {\n\t$j = $i + 1;\n\tif($l->[$i] < $l->[$j]) {\n\t    last;\n\
    \t}\n    }\n    if($i == $n - 1) {\n\treturn 1;\n    }\n    for($i = 0; $i < $n\
    \ - 1; $i++) {\n\t$j = $i + 1;\n\tif($l->[$i] > $l->[$j]) {\n\t    last;\n\t}\n\
    \    }\n    if($i == $n - 1) {\n\treturn 1;\n    }\n    return \"\";\n}", "  \
    \  my $i;\n    my $n = @$l;\n    my $inc = 0;\n    my $dec = 0;\n    for ($i =\
    \ 1; $i < $n; $i++) {\n\tif ($l->[$i] > $l->[$i-1]) {\n\t    $inc = 1;\n\t}\n\t\
    if ($l->[$i] < $l->[$i-1]) {\n\t    $dec = 1;\n\t}\n    }\n    return $inc + $dec;\n\
    }", "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    my($d) = 0;\n    for\
    \ ($i = 1; $i < $n; $i++) {\n\t$j = $l->[$i-1];\n\t$k = $l->[$i];\n\tif ($j <\
    \ $k) {\n\t    if ($d == -1) {\n\t\treturn \"\";\n\t    }\n\t    $d = 1;\n\t}\
    \ elsif ($j > $k) {\n\t    if ($d == 1) {\n\t\treturn \"\";\n\t    }\n\t    $d\
    \ = -1;\n\t}\n    }\n    return $d;\n}", "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n\
    \    my($inc) = 0;\n    my($dec) = 0;\n    for($i = 0; $i < $n - 1; $i++) {\n\t\
    $j = $l->[$i];\n\t$k = $l->[$i + 1];\n\tif($j < $k) {\n\t    $inc = 1;\n\t}\n\t\
    if($j > $k) {\n\t    $dec = 1;\n\t}\n\tif($inc && $dec) {\n\t    return \"\";\n\
    \t}\n    }\n    return 1;\n}", "    my $i;\n    my $d;\n    for ($i = 1; $i <\
    \ @$l; $i++) {\n\tif ($l->[$i] != $l->[$i-1]) {\n\t    if (!defined($d)) {\n\t\
    \t$d = $l->[$i] > $l->[$i-1] ? 1 : -1;\n\t    } else {\n\t\tif ($d * ($l->[$i]\
    \ - $l->[$i-1]) < 0) {\n\t\t    return \"\";\n\t\t}\n\t    }\n\t}\n    }\n   \
    \ return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
