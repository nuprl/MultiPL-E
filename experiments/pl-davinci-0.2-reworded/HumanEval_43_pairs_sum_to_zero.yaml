name: HumanEval_43_pairs_sum_to_zero
language: pl
prompt: "# pairs_sum_to_zero takes an array of integers as an input.\n# it returns\
  \ 1 if there are two distinct elements in the array that\n# sum to zero, and  otherwise.\n\
  # >>> pairs_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> pairs_sum_to_zero([1, 3, -2,\
  \ 1])\n# \"\"\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> pairs_sum_to_zero([2,\
  \ 4, -5, 3, 5, 7])\n# 1\n# >>> pairs_sum_to_zero([1])\n# \"\"\nsub pairs_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2,\
  \ 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5,\
  \ 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 3, 2, 30]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 4, 2, 30]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\")) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %h;\n    foreach my $i (@$l) {\n        if (exists $h{-$i})\
    \ {\n            return 1;\n        }\n        $h{$i} = 1;\n    }\n    return\
    \ 0;\n}", "    my $n = @$l;\n    my $i;\n    my $j;\n    my $k;\n    my $m;\n\
    \    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my\
    \ $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my $b;\n\
    \    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $m;\n    my $p;\n    my $q;\n    my $r;\n\
    \    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my\
    \ $y;\n    my $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n\
    \    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $m;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $m;\n    my $p;\n    my $q;\n    my\
    \ $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n\
    \    my $y;\n    my $", "    my %hash;\n    foreach my $i (@$l) {\n        if\
    \ (exists $hash{-$i}) {\n            return 1;\n        }\n        $hash{$i} =\
    \ 1;\n    }\n    return 0;\n}", "    my %h;\n    for my $i (@$l) {\n        if\
    \ (exists $h{-$i}) {\n            return 1;\n        }\n        $h{$i} = 1;\n\
    \    }\n    return 0;\n}", "    my @list = @$l;\n    my $len = scalar @list;\n\
    \    my $i;\n    my $j;\n    for ($i = 0; $i < $len; $i++) {\n        for ($j\
    \ = $i + 1; $j < $len; $j++) {\n            if ($list[$i] + $list[$j] == 0) {\n\
    \                return 1;\n            }\n        }\n    }\n    return 0;\n}",
  "    my %hash;\n    foreach my $i (@$l) {\n        if (exists $hash{$i}) {\n   \
    \         return 1;\n        } else {\n            $hash{-1 * $i} = 1;\n     \
    \   }\n    }\n    return 0;\n}", "    my @a = @$l;\n    my %h;\n    foreach my\
    \ $i (@a) {\n        if (defined $h{-$i}) {\n            return 1;\n        }\n\
    \        $h{$i} = 1;\n    }\n    return 0;\n}", "    my $i;\n    my $j;\n    my\
    \ $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n; $j++) {\n            if ($l->[$i] + $l->[$j] == 0) {\n         \
    \       return 1;\n            }\n        }\n    }\n    return \"\";\n}", "  \
    \  my $i;\n    my $j;\n    my $k;\n    my $n = scalar(@$l);\n    my $found = 0;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            if ($l->[$i] + $l->[$j] == 0) {\n                $found = 1;\n  \
    \              last;\n            }\n        }\n    }\n    return $found;\n}",
  "    my %hash;\n    foreach my $i (@$l) {\n        if (exists $hash{-$i}) {\n  \
    \          return 1;\n        }\n        $hash{$i} = 1;\n    }\n    return 0;\n\
    }", "    my $n = scalar(@$l);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $m = 0;\n    my $sum = 0;\n    my $flag = 0;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            $sum = $l->[$i]\
    \ + $l->[$j];\n            if ($sum == 0) {\n                $flag = 1;\n    \
    \        }\n        }\n    }\n    return $flag;\n}", "    my $n = scalar(@$l);\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $sum = 0;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n        \
    \    $sum = $l->[$i] + $l->[$j];\n            if ($sum == 0) {\n             \
    \   return 1;\n            }\n        }\n    }\n    return 0;\n}", "    my @list\
    \ = @$l;\n    my $i = 0;\n    my $j = 0;\n    my $sum = 0;\n    my $result = 0;\n\
    \    for($i = 0; $i < scalar(@list); $i++) {\n        for($j = $i + 1; $j < scalar(@list);\
    \ $j++) {\n            $sum = $list[$i] + $list[$j];\n            if($sum == 0)\
    \ {\n                $result = 1;\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my %h;\n    foreach my $i (@$l) {\n        if (defined $h{-$i})\
    \ {\n            return 1;\n        }\n        $h{$i} = 1;\n    }\n    return\
    \ \"\";\n}", "    my %h;\n    my $i;\n    foreach $i (@$l) {\n        if (defined($h{-$i}))\
    \ {\n            return 1;\n        }\n        $h{$i} = 1;\n    }\n    return\
    \ 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if\
    \ ($l->[$i] + $l->[$j] == 0) {\n                return 1;\n            }\n   \
    \     }\n    }\n    return 0;\n}", "    my %h;\n    foreach my $i (@$l) {\n  \
    \      if (exists $h{-$i}) {\n            return 1;\n        }\n        $h{$i}\
    \ = 1;\n    }\n    return 0;\n}", "    my %h;\n    foreach my $i (@$l) {\n   \
    \     if (exists $h{-$i}) {\n            return 1;\n        }\n        $h{$i}\
    \ = 1;\n    }\n    return 0;\n}", "    my %h = ();\n    foreach my $i (@$l) {\n\
    \        if (exists $h{-$i}) {\n            return 1;\n        }\n        $h{$i}\
    \ = 1;\n    }\n    return 0;\n}", "    my $i;\n    my $j;\n    my $n = scalar(@$l);\n\
    \    for($i = 0; $i < $n; $i++) {\n        for($j = $i + 1; $j < $n; $j++) {\n\
    \            if($l->[$i] + $l->[$j] == 0) {\n                return 1;\n     \
    \       }\n        }\n    }\n    return 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
