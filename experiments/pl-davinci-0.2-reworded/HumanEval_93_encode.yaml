name: HumanEval_93_encode
language: pl
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n#\
  \ >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n   \
  \ my($message) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
  \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
  ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
  ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT\
  \ kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $encoded = \"\";\n    my @vowels = (\"a\",\"e\",\"i\",\"o\"\
    ,\"u\");\n    foreach my $char (split //, $message) {\n        if (grep {$_ eq\
    \ lc($char)} @vowels) {\n            my $index = (grep {$_ eq lc($char)} @vowels)[0];\n\
    \            my $new_index = ($index + 2) % 5;\n            $encoded .= uc($vowels[$new_index]);\n\
    \        } else {\n            $encoded .= uc($char);\n        }\n    }\n    return\
    \ $encoded;\n}", "    my @message = split(//, $message);\n    my $encoded = \"\
    \";\n    my $vowels = \"aeiou\";\n    my $vowels_hash = {};\n    my @vowels =\
    \ split(//, $vowels);\n    for(my $i = 0; $i < scalar(@vowels); $i++) {\n    \
    \    $vowels_hash->{$vowels[$i]} = $vowels[($i + 2) % 5];\n    }\n    for(my $i\
    \ = 0; $i < scalar(@message); $i++) {\n        if(exists($vowels_hash->{lc($message[$i])}))\
    \ {\n            $encoded .= $vowels_hash->{lc($message[$i])};\n        }\n  \
    \      elsif(lc($message[$i]) eq $message[$i]) {\n            $encoded .= uc($message[$i]);\n\
    \        }\n        else {\n            $encoded .= lc($message[$i]);\n      \
    \  }\n    }\n    return $encoded;\n}", "    my @message = split //, $message;\n\
    \    my $encoded_message = '';\n    my %vowels = (\n        'a' => 'c',\n    \
    \    'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n\
    \    );\n    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            if ($letter =~ /[a-z]/) {\n                $letter = uc $letter;\n\
    \            }\n            else {\n                $letter = lc $letter;\n  \
    \          }\n        }\n        if ($letter =~ /[aeiou]/i) {\n            $letter\
    \ = $vowels{lc $letter};\n        }\n        $encoded_message .= $letter;\n  \
    \  }\n    return $encoded_message;\n}", "    my @message = split(//, $message);\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @encoded_message;\n    foreach\
    \ my $char (@message) {\n        if (is_vowel($char)) {\n            push(@encoded_message,\
    \ next_vowel($char));\n        } else {\n            push(@encoded_message, $char);\n\
    \        }\n    }\n    return join(\"\", @encoded_message);\n}", "    my $encoded_message\
    \ = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    for my $letter (split //, $message) {\n\
    \        if (grep {$_ eq $letter} @vowels) {\n            $encoded_message .=\
    \ $vowel_map{$letter};\n        } else {\n            $encoded_message .= $letter;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 }\
    \ @vowels;\n    my %letters = map { $_ => 1 } ('a'..'z');\n    my %letters_upper\
    \ = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_upper_lower = map { $_ => 1 } ('A'..'Z', 'a'..'z');\n    my %letters_lower_upper\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z');\n    my %letters_lower_upper_lower =\
    \ map { $_ => 1 } ('a'..'z', 'A'..'Z', 'a'..'z');\n    my %letters_upper_lower_upper\
    \ = map { $_ => 1 } ('A'..'Z', 'a'..'z', 'A'..'Z');\n    my %letters_upper_lower_upper_lower\
    \ = map { $_ => 1 } ('A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z');\n    my %letters_lower_upper_lower_upper\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', 'a'..'z', 'A'..'Z');\n    my %letters_lower_upper_lower_upper_lower\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z');\n    my\
    \ %letters_upper_lower_upper_lower_upper = map { $_ => 1 } ('A'..'Z', 'a'..'z',\
    \ 'A'..'Z', 'a'..'z', 'A'..'Z');\n    my %letters_upper_lower_upper_lower_upper_lower\
    \ = map { $_ => 1 } ('A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z',", "    my $encoded_message\
    \ = \"\";\n    my @message_array = split(//, $message);\n    my $vowels = \"aeiou\"\
    ;\n    my @vowels_array = split(//, $vowels);\n    my %vowels_hash = (\n     \
    \   \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n      \
    \  \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n    foreach my $letter (@message_array)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n\
    \            $encoded_message .= $letter;\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            $letter =~ tr/A-Z/a-z/;\n            $encoded_message .= $letter;\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    foreach my $vowel (@vowels_array) {\n        $encoded_message =~ s/$vowel/$vowels_hash{$vowel}/g;\n\
    \    }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u');\n    foreach my $char (split //, $message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char =~ tr/a-z/A-Z/;\n            } else {\n                $char\
    \ =~ tr/A-Z/a-z/;\n            }\n            if (grep {$_ eq lc($char)} @vowels)\
    \ {\n                my $index = 0;\n                foreach my $vowel (@vowels)\
    \ {\n                    if ($vowel eq lc($char)) {\n                        $index\
    \ = $index + 2;\n                        if ($index > 4) {\n                 \
    \           $index = $index - 5;\n                        }\n                \
    \        $char = $vowels[$index];\n                        last;\n           \
    \         }\n                }\n            }\n        }\n        $encoded = $encoded\
    \ . $char;\n    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n\
    \    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_hash = map\
    \ { $_ => 1 } @vowels;\n    my %letter_hash = (\n        \"a\" => \"c\",\n   \
    \     \"b\" => \"d\",\n        \"c\" => \"e\",\n        \"d\" => \"f\",\n    \
    \    \"e\" => \"g\",\n        \"f\" => \"h\",\n        \"g\" => \"i\",\n     \
    \   \"h\" => \"j\",\n        \"i\" => \"k\",\n        \"j\" => \"l\",\n      \
    \  \"k\" => \"m\",\n        \"l\" => \"n\",\n        \"m\" => \"o\",\n       \
    \ \"n\" => \"p\",\n        \"o\" => \"q\",\n        \"p\" => \"r\",\n        \"\
    q\" => \"s\",\n        \"r\" => \"t\",\n        \"s\" => \"u\",\n        \"t\"\
    \ => \"v\",\n        \"u\" => \"w\",\n        \"v\" => \"x\",\n        \"w\" =>\
    \ \"y\",\n        \"x\" => \"z\",\n        \"y\" => \"a\",\n        \"z\" => \"\
    b\",\n    );\n    for my $letter (split //, $message) {\n        if ($vowel_hash{$letter})\
    \ {\n            $encoded_message .= $letter_hash{$letter};\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc($letter);\n        } elsif\
    \ ($letter =~ /[a-z]/) {\n            $encoded_message .= uc($letter);\n     \
    \   } else {\n            $encoded_message .= $letter;\n        }\n    }\n   \
    \ return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } ('a'..'z');\n    my %alphabet_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my $alphabet_size = scalar keys %alphabet;\n    my $alphabet_upper_size =\
    \ scalar keys %alphabet_upper;\n    foreach my $char (split //, $message) {\n\
    \        if (exists $alphabet{$char}) {\n            $encoded .= chr(ord('a')\
    \ + (ord($char) - ord('a') + 2) % $alphabet_size);\n        } elsif (exists $alphabet_upper{$char})\
    \ {\n            $encoded .= chr(ord('A') + (ord($char) - ord('A') + 2) % $alphabet_upper_size);\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if (exists $vowels{$char}) {\n\
    \            $encoded .= $alphabet{$char};\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return uc($encoded);\n}", "    my $encoded_message\
    \ = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map\
    \ = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\"\
    ,\n        \"o\" => \"q\",\n        \"u\" => \"s\",\n    );\n    my @message_array\
    \ = split(\"\", $message);\n    foreach my $char (@message_array) {\n        if\
    \ (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n\
    \        } elsif ($char =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}", "    my $encoded_message = \"\";\n    my $vowels\
    \ = \"aeiou\";\n    my $vowels_index = 0;\n    my $vowel = \"\";\n    my $vowel_index\
    \ = 0;\n    my $vowel_index_plus_two = 0;\n    my $vowel_index_plus_two_letter\
    \ = \"\";\n    my $vowel_index_plus_two_letter_upper = \"\";\n    my $vowel_index_plus_two_letter_lower\
    \ = \"\";\n    my $letter = \"\";\n    my $letter_upper = \"\";\n    my $letter_lower\
    \ = \"\";\n    my $letter_index = 0;\n    my $letter_index_plus_two = 0;\n   \
    \ my $letter_index_plus_two_letter = \"\";\n    my $letter_index_plus_two_letter_upper\
    \ = \"\";\n    my $letter_index_plus_two_letter_lower = \"\";\n    my $message_length\
    \ = length($message);\n    my $message_index = 0;\n    my $message_letter = \"\
    \";\n    my $message_letter_upper = \"\";\n    my $message_letter_lower = \"\"\
    ;\n    my $message_letter_is_vowel = 0;\n    my $message_letter_is_letter = 0;\n\
    \    my $message_letter_is_upper = 0;\n    my $message_letter_is_lower = 0;\n\
    \    my $message_letter_is_not_letter = 0;\n    my $message_letter_is_not_vowel\
    \ = 0;\n    my $message_letter_is_not_upper = 0;\n    my $message_letter_is_not_lower\
    \ = 0;\n    my $message_letter_is_not_letter_or_vowel = 0;\n    my $message_letter_is_not_letter_or_upper\
    \ = 0;\n    my $message_letter_is_not_letter_or_lower = 0;\n    my $message_letter_is_not_vowel_or_upper\
    \ = 0;\n    my $message_letter_is_not_", "    my @letters = split(//, $message);\n\
    \    my @encoded_letters;\n    foreach my $letter (@letters) {\n        if ($letter\
    \ =~ /[a-z]/i) {\n            my $encoded_letter = $letter;\n            if ($letter\
    \ =~ /[a-z]/) {\n                $encoded_letter =~ tr/a-z/b-za/;\n          \
    \  } else {\n                $encoded_letter =~ tr/A-Z/B-ZA/;\n            }\n\
    \            if ($encoded_letter =~ /[aeiou]/i) {\n                $encoded_letter\
    \ =~ tr/aeiou/eioua/;\n            }\n            push(@encoded_letters, $encoded_letter);\n\
    \        } else {\n            push(@encoded_letters, $letter);\n        }\n \
    \   }\n    return join('', @encoded_letters);\n}", "    my @vowels = qw(a e i\
    \ o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my @letters = split //,\
    \ $message;\n    my @encoded;\n    for my $letter (@letters) {\n        if ($vowels{lc\
    \ $letter}) {\n            my $index = ord($letter) - ord('a');\n            $index\
    \ = ($index + 2) % 26;\n            push @encoded, chr($index + ord('a'));\n \
    \       } else {\n            push @encoded, $letter;\n        }\n    }\n    return\
    \ join '', @encoded;\n}", "    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_hash = map { $_ => 1 } @vowels;\n\
    \    my %alphabet_hash = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n\
    \        \"c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n \
    \       \"f\" => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n  \
    \      \"i\" => \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n   \
    \     \"l\" => \"n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n    \
    \    \"o\" => \"q\",\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n     \
    \   \"r\" => \"t\",\n        \"s\" => \"u\",\n        \"t\" => \"v\",\n      \
    \  \"u\" => \"w\",\n        \"v\" => \"x\",\n        \"w\" => \"y\",\n       \
    \ \"x\" => \"z\",\n        \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowel_hash{$char}) {\n\
    \            $encoded_message .= $alphabet_hash{$char};\n        } else {\n  \
    \          $encoded_message .= $char;\n        }\n    }\n    return uc($encoded_message);\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded\
    \ = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my $vowels_hash = {};\n\
    \    my $i = 0;\n    foreach my $vowel (split(//, $vowels)) {\n        $vowels_hash->{$vowel}\
    \ = 1;\n        $vowels_encoded_hash->{$vowel} = substr($vowels_encoded, $i, 1);\n\
    \        $i++;\n    }\n    foreach my $char (split(//, $message)) {\n        if\
    \ ($vowels_hash->{$char}) {\n            $encoded .= $vowels_encoded_hash->{$char};\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc($char);\n  \
    \      } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc($char);\n    \
    \    } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }", "    my @letters = split(//, $message);\n    my @encoded;\n    for my $letter\
    \ (@letters) {\n        if ($letter =~ /[a-z]/i) {\n            my $encoded =\
    \ encode_letter($letter);\n            push @encoded, $encoded;\n        } else\
    \ {\n            push @encoded, $letter;\n        }\n    }\n    return join(\"\
    \", @encoded);\n}", "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found\
    \ = 0;\n    my $vowel_next = 0;\n    my $vowel_next_next = 0;\n    my $vowel_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next = 0;\n\
    \    my $vowel_next_next_next_next_next_next_next_next_next_next_next = 0;\n \
    \   my $vowel_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n\
    \    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_", "    my $encoded = \"\";\n    my @vowels =\
    \ qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_encoded\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 's',\n    );\n    for my $char (split //, $message)\
    \ {\n        if ($vowels{lc $char}) {\n            $encoded .= $vowels_encoded{lc\
    \ $char};\n        } else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return uc $encoded;\n}", "    my $result = \"\";\n    my @vowels = (\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n  \
    \  my %alphabet = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n      \
    \  \"c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n       \
    \ \"f\" => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"\
    i\" => \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\"\
    \ => \"n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" =>\
    \ \"q\",\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"\
    t\",\n        \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\"\
    ,\n        \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n\
    \        \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $char (split\
    \ //, $message) {\n        if ($vowels{lc($char)}) {\n            $result .= $alphabet{lc($char)};\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    return\
    \ $result;\n}", "    my $encoded_message = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowel_index = (\n        \"a\" => 0,\n   \
    \     \"e\" => 1,\n        \"i\" => 2,\n        \"o\" => 3,\n        \"u\" =>\
    \ 4\n    );\n    my @letters = split(//, $message);\n    foreach my $letter (@letters)\
    \ {\n        if (grep {$_ eq $letter} @vowels) {\n            my $index = $vowel_index{$letter};\n\
    \            $index = ($index + 2) % 5;\n            $letter = $vowels[$index];\n\
    \        }\n        $encoded_message .= uc($letter);\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = \"\";\n    my @letters = split(//, $message);\n    foreach\
    \ my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n            $encoded\
    \ .= encode_letter($letter);\n        } else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_hash = map { $_ =>\
    \ 1 } @vowels;\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length\
    \ = scalar @vowels;\n    my $vowel_hash_length = scalar keys %vowel_hash;\n  \
    \  my $message_length = length $message;\n    my $message_index = 0;\n    my $message_char\
    \ = \"\";\n    my $message_char_lower = \"\";\n    my $message_char_upper = \"\
    \";\n    my $message_char_is_vowel = 0;\n    my $message_char_is_upper = 0;\n\
    \    my $message_char_is_lower = 0;\n    my $message_char_is_alpha = 0;\n    my\
    \ $message_char_is_digit = 0;\n    my $message_char_is_space = 0;\n    my $message_char_is_punct\
    \ = 0;\n    my $message_char_is_other = 0;\n    my $message_char_is_vowel_hash\
    \ = 0;\n    my $message_char_is_vowel_array = 0;\n    my $message_char_is_vowel_count\
    \ = 0;\n    my $message_char_is_vowel_index = 0;\n    my $message_char_is_vowel_length\
    \ = 0;\n    my $message_char_is_vowel_hash_length = 0;\n    my $message_char_is_message_length\
    \ = 0;\n    my $message_char_is_message_index = 0;\n    my $message_char_is_encoded_message\
    \ = 0;\n    my $message_char_is_vowel_hash_key = 0;\n    my $message_char_is_vowel_hash_value\
    \ = 0;\n    my $message_char_is_vowel_hash_key_index = 0;\n   ", "    my $encoded_message\
    \ = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_\
    \ => 1 } @vowels;\n    my %alphabet = (\n        'a' => 'c',\n        'b' => 'd',\n\
    \        'c' => 'e',\n        'd' => 'f',\n        'e' => 'g',\n        'f' =>\
    \ 'h',\n        'g' => 'i',\n        'h' => 'j',\n        'i' => 'k',\n      \
    \  'j' => 'l',\n        'k' => 'm',\n        'l' => 'n',\n        'm' => 'o',\n\
    \        'n' => 'p',\n        'o' => 'q',\n        'p' => 'r',\n        'q' =>\
    \ 's',\n        'r' => 't',\n        's' => 'u',\n        't' => 'v',\n      \
    \  'u' => 'w',\n        'v' => 'x',\n        'w' => 'y',\n        'x' => 'z',\n\
    \        'y' => 'a',\n        'z' => 'b',\n    );\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{$char}) {\n            $encoded_message .=\
    \ $alphabet{$char};\n        }\n        elsif ($char =~ /[A-Z]/) {\n         \
    \   $encoded_message .= lc($char);\n        }\n        elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded_message .= uc($char);\n        }\n        else {\n \
    \           $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n     \
    \   \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\",\n      \
    \  \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n       \
    \ \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n        \"\
    j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n        \"m\"\
    \ => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n        \"p\" =>\
    \ \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n        \"s\" => \"\
    u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n        \"v\" => \"x\"\
    ,\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n        \"y\" => \"a\",\n\
    \        \"z\" => \"b\",\n    );\n    my @letters = split(\"\", $message);\n \
    \   foreach my $letter (@letters) {\n        if ($vowels{$letter}) {\n       \
    \     $encoded .= $alphabet{$letter};\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    return $encoded;\n}", "    my $encoded =\
    \ \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_\
    \ => 1 } @vowels;\n    my %alphabet = (\n        'a' => 'c',\n        'b' => 'd',\n\
    \        'c' => 'e',\n        'd' => 'f',\n        'e' => 'g',\n        'f' =>\
    \ 'h',\n        'g' => 'i',\n        'h' => 'j',\n        'i' => 'k',\n      \
    \  'j' => 'l',\n        'k' => 'm',\n        'l' => 'n',\n        'm' => 'o',\n\
    \        'n' => 'p',\n        'o' => 'q',\n        'p' => 'r',\n        'q' =>\
    \ 's',\n        'r' => 't',\n        's' => 'u',\n        't' => 'v',\n      \
    \  'u' => 'w',\n        'v' => 'x',\n        'w' => 'y',\n        'x' => 'z',\n\
    \        'y' => 'a',\n        'z' => 'b',\n    );\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{lc($char)}) {\n            $encoded .= $alphabet{lc($char)};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my @message = split(//, $message);\n    my @encoded;\n \
    \   my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter (@message)\
    \ {\n        if (exists $vowels{$letter}) {\n            push @encoded, $vowels{$letter};\n\
    \        } elsif ($letter =~ /[A-Z]/) {\n            push @encoded, lc($letter);\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            push @encoded, uc($letter);\n\
    \        } else {\n            push @encoded, $letter;\n        }\n    }\n   \
    \ return join('', @encoded);\n}", "    my $encoded_message = \"\";\n    my @vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\"\
    \ => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" =>\
    \ \"q\",\n        \"u\" => \"s\",\n    );\n    foreach my $char (split(\"\", $message))\
    \ {\n        if (grep {$_ eq $char} @vowels) {\n            $encoded_message .=\
    \ $vowel_map{$char};\n        } else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my @message = split\
    \ //, $message;\n    my @encoded;\n    my %vowels = (\n        'a' => 'c',\n \
    \       'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            if ($letter =~ /[aeiou]/) {\n                push @encoded, $vowels{$letter};\n\
    \            } else {\n                push @encoded, $letter;\n            }\n\
    \        } elsif ($letter =~ /[A-Z]/) {\n            if ($letter =~ /[AEIOU]/)\
    \ {\n                push @encoded, uc($vowels{lc($letter)});\n            } else\
    \ {\n                push @encoded, lc($letter);\n            }\n        } else\
    \ {\n            push @encoded, $letter;\n        }\n    }\n    return join '',\
    \ @encoded;\n}", "    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n   \
    \         my $new_letter = $letter;\n            if ($letter =~ /[a-z]/) {\n \
    \               $new_letter = chr(ord($letter) - 32);\n            }\n       \
    \     if ($letter =~ /[aeiou]/) {\n                $new_letter = chr(ord($new_letter)\
    \ + 2);\n            }\n            $encoded .= $new_letter;\n        }\n    }\n\
    \    return $encoded;\n}", "    my $encoded = \"\";\n    my @alphabet = ('a'..'z');\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split\
    \ //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~\
    \ /[a-z]/) {\n                $char = uc($char);\n            } else {\n     \
    \           $char = lc($char);\n            }\n            if ($char =~ /[aeiou]/)\
    \ {\n                $char = $vowels{lc($char)};\n            }\n        }\n \
    \       $encoded .= $char;\n    }\n    return $encoded;\n}", "    my @message\
    \ = split(//, $message);\n    my @encoded_message;\n    my %vowels = (\n     \
    \   'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 'y',\n    );\n    foreach my $letter (@message) {\n        if\
    \ ($letter =~ /[A-Z]/) {\n            $letter = lc($letter);\n        } elsif\
    \ ($letter =~ /[a-z]/) {\n            $letter = uc($letter);\n        }\n    \
    \    if (exists $vowels{$letter}) {\n            $letter = $vowels{$letter};\n\
    \        }\n        push @encoded_message, $letter;\n    }\n    return join('',\
    \ @encoded_message);\n}", "    my $encoded = \"\";\n    my @alphabet = ('a'..'z');\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    my $i = 0;\n   \
    \ foreach my $letter (split //, $message) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            if ($letter =~ /[a-z]/) {\n                $letter = uc($letter);\n\
    \            } else {\n                $letter = lc($letter);\n            }\n\
    \            if ($letter =~ /[aeiou]/) {\n                $letter = $vowels{$letter};\n\
    \            }\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my @vowels = split(//,\
    \ $vowels);\n    my $vowels_len = scalar @vowels;\n    my $vowels_index = 0;\n\
    \    my $vowel_found = 0;\n    my $char = \"\";\n    my $char_ascii = 0;\n   \
    \ my $char_ascii_new = 0;\n    my $char_new = \"\";\n    my $message_len = length($message);\n\
    \    my $i = 0;\n    for ($i = 0; $i < $message_len; $i++) {\n        $char =\
    \ substr($message, $i, 1);\n        $char_ascii = ord($char);\n        $vowel_found\
    \ = 0;\n        for ($vowels_index = 0; $vowels_index < $vowels_len; $vowels_index++)\
    \ {\n            if ($char eq $vowels[$vowels_index]) {\n                $vowel_found\
    \ = 1;\n                last;\n            }\n        }\n        if ($vowel_found)\
    \ {\n            $char_ascii_new = $char_ascii + 2;\n            if ($char_ascii_new\
    \ > 122) {\n                $char_ascii_new = $char_ascii_new - 26;\n        \
    \    }\n            $char_new = chr($char_ascii_new);\n        } else {\n    \
    \        if ($char_ascii >= 65 && $char_ascii <= 90) {\n                $char_ascii_new\
    \ = $char_ascii + 32;\n                $char_new = chr($char_ascii_new);\n   \
    \         } elsif ($char_ascii >= 97 && $char_ascii <= 122) {\n              \
    \  $char_ascii_new = $char_ascii - 32;\n                $char_new = chr($char_ascii_new);\n\
    \            } else {\n                $char_new = $char;\n            }\n", " \
    \   my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 } ('a'..'z');\n\
    \    for my $char (split //, $message) {\n        if ($alphabet{$char}) {\n  \
    \          if ($vowels{$char}) {\n                $char = chr(ord($char) + 2);\n\
    \            }\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my @letters = split(//, $message);\n    foreach\
    \ my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n            if\
    \ ($letter =~ /[a-z]/) {\n                $letter =~ tr/a-z/A-Z/;\n          \
    \  } else {\n                $letter =~ tr/A-Z/a-z/;\n            }\n        \
    \    if ($letter =~ /[aeiou]/i) {\n                $letter =~ tr/aeiou/eioua/;\n\
    \            }\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded\
    \ = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my $vowels_hash = {};\n\
    \    my $i = 0;\n    foreach my $vowel (split(//, $vowels)) {\n        $vowels_hash->{$vowel}\
    \ = 1;\n        $vowels_encoded_hash->{$vowel} = substr($vowels_encoded, $i, 1);\n\
    \        $i++;\n    }\n    foreach my $char (split(//, $message)) {\n        if\
    \ ($vowels_hash->{$char}) {\n            $encoded .= $vowels_encoded_hash->{$char};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my @message = split //, $message;\n    my @encoded;\n  \
    \  my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $char (@message)\
    \ {\n        if ($char =~ /[a-z]/) {\n            if ($char =~ /[aeiou]/) {\n\
    \                push @encoded, $vowels{$char};\n            }\n            else\
    \ {\n                push @encoded, $char;\n            }\n        }\n       \
    \ elsif ($char =~ /[A-Z]/) {\n            if ($char =~ /[AEIOU]/) {\n        \
    \        push @encoded, uc($vowels{lc($char)});\n            }\n            else\
    \ {\n                push @encoded, lc($char);\n            }\n        }\n   \
    \     else {\n            push @encoded, $char;\n        }\n    }\n    return\
    \ join '', @encoded;\n}", "    my $encoded_message = \"\";\n    my @vowels = qw(a\
    \ e i o u);\n    my %vowel_map = (\n        a => \"c\",\n        e => \"g\",\n\
    \        i => \"k\",\n        o => \"s\",\n        u => \"y\",\n    );\n    my\
    \ @letters = split(\"\", $message);\n    foreach my $letter (@letters) {\n   \
    \     if (grep {$_ eq $letter} @vowels) {\n            $encoded_message .= $vowel_map{$letter};\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return uc($encoded_message);\n}", "    my $encoded_message = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index\
    \ = 0;\n    my $vowels_index = 0;\n    my $vowel_found = 0;\n    my $vowel_encoded_found\
    \ = 0;\n    my $vowel_encoded_index = 0;\n    my $vowel_index = 0;\n    my $char\
    \ = \"\";\n    my $char_encoded = \"\";\n    my $char_encoded_index = 0;\n   \
    \ my $char_index = 0;\n    my $char_found = 0;\n    my $char_encoded_found = 0;\n\
    \    my $message_length = length($message);\n    my $vowels_length = length($vowels);\n\
    \    my $vowels_encoded_length = length($vowels_encoded);\n    my $char_encoded_length\
    \ = 0;\n    my $char_length = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p\
    \ = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my\
    \ $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n  \
    \  my $z = 0;\n    my $aa = 0;\n    my $bb = 0;\n    my $cc = 0;\n    my $dd =\
    \ 0;\n    my $ee = 0;\n    my $ff = 0;\n    my $gg = 0;\n    my $hh = 0;\n   \
    \ my $ii = 0;\n    my $jj = 0;\n    my $kk = 0;\n    my $ll = 0;\n    my $mm =\
    \ 0;\n    my $", "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    foreach my $char (split\
    \ //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~\
    \ /[a-z]/) {\n                $char = uc($char);\n            } else {\n     \
    \           $char = lc($char);\n            }\n            if (exists $vowels{$char})\
    \ {\n                $char = chr(ord($char) + 2);\n            }\n        }\n\
    \        $encoded .= $char;\n    }\n    return $encoded;\n}", "    my $encoded_message\
    \ = \"\";\n    my @vowels = qw(a e i o u);\n    my %vowel_map = (\n        'a'\
    \ => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n   \
    \     'u' => 'y',\n    );\n    for my $char (split //, $message) {\n        if\
    \ (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}", "    my @chars = split //, $message;\n    my\
    \ @encoded_chars;\n    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n\
    \            if ($char =~ /[aeiou]/i) {\n                $char =~ tr/aeiou/eioua/;\n\
    \            }\n        }\n        push @encoded_chars, $char;\n    }\n    return\
    \ join '', @encoded_chars;\n}", "    my $encoded = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_2 = \"cgjkqsxyz\";\n    my $vowels_3 = \"bdfhjlnprtvxz\"\
    ;\n    my $vowels_4 = \"aeiou\";\n    my $vowels_5 = \"cgjkqsxyz\";\n    my $vowels_6\
    \ = \"bdfhjlnprtvxz\";\n    my $vowels_7 = \"aeiou\";\n    my $vowels_8 = \"cgjkqsxyz\"\
    ;\n    my $vowels_9 = \"bdfhjlnprtvxz\";\n    my $vowels_10 = \"aeiou\";\n   \
    \ my $vowels_11 = \"cgjkqsxyz\";\n    my $vowels_12 = \"bdfhjlnprtvxz\";\n   \
    \ my $vowels_13 = \"aeiou\";\n    my $vowels_14 = \"cgjkqsxyz\";\n    my $vowels_15\
    \ = \"bdfhjlnprtvxz\";\n    my $vowels_16 = \"aeiou\";\n    my $vowels_17 = \"\
    cgjkqsxyz\";\n    my $vowels_18 = \"bdfhjlnprtvxz\";\n    my $vowels_19 = \"aeiou\"\
    ;\n    my $vowels_20 = \"cgjkqsxyz\";\n    my $vowels_21 = \"bdfhjlnprtvxz\";\n\
    \    my $vowels_22 = \"aeiou\";\n    my $vowels_23 = \"cgjkqsxyz\";\n    my $vowels_24\
    \ = \"bdfhjlnprtvxz\";\n    my $vowels_25 = \"aeiou\";\n    my $vowels_26 = \"\
    cgjkqsxyz\";\n    my $vowels_27 = \"bdfhjlnprtvxz\";\n    my $vowels_28 =", " \
    \   my $encoded_message = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n    my %vowel_map = (\n        \"a\" => \"c\",\n        \"e\" => \"\
    g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"s\"\
    ,\n    );\n    for my $char (split //, $message) {\n        if (grep {$_ eq $char}\
    \ @vowels) {\n            $encoded_message .= $vowel_map{$char};\n        } else\
    \ {\n            $encoded_message .= $char;\n        }\n    }\n    return uc($encoded_message);\n\
    }", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n    my %vowels = map {$_ => 1} @vowels;\n    my %alphabet = (\n       \
    \ \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\",\n        \"\
    d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n        \"g\"\
    \ => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n        \"j\" =>\
    \ \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n        \"m\" => \"\
    o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n        \"p\" => \"r\"\
    ,\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n        \"s\" => \"u\",\n\
    \        \"t\" => \"v\",\n        \"u\" => \"w\",\n        \"v\" => \"x\",\n \
    \       \"w\" => \"y\",\n        \"x\" => \"z\",\n        \"y\" => \"a\",\n  \
    \      \"z\" => \"b\",\n    );\n    foreach my $char (split(//, $message)) {\n\
    \        if ($vowels{lc($char)}) {\n            $encoded .= $alphabet{lc($char)};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my\
    \ $vowels_encoded = \"cgjkq\";\n    my $vowels_encoded_index = 0;\n    my $vowels_index\
    \ = 0;\n    my $vowel_found = 0;\n    my $char = \"\";\n    my $char_encoded =\
    \ \"\";\n    my $char_index = 0;\n    my $char_encoded_index = 0;\n    my $char_encoded_index_2\
    \ = 0;\n    my $char_encoded_index_3 = 0;\n    my $char_encoded_index_4 = 0;\n\
    \    my $char_encoded_index_5 = 0;\n    my $char_encoded_index_6 = 0;\n    my\
    \ $char_encoded_index_7 = 0;\n    my $char_encoded_index_8 = 0;\n    my $char_encoded_index_9\
    \ = 0;\n    my $char_encoded_index_10 = 0;\n    my $char_encoded_index_11 = 0;\n\
    \    my $char_encoded_index_12 = 0;\n    my $char_encoded_index_13 = 0;\n    my\
    \ $char_encoded_index_14 = 0;\n    my $char_encoded_index_15 = 0;\n    my $char_encoded_index_16\
    \ = 0;\n    my $char_encoded_index_17 = 0;\n    my $char_encoded_index_18 = 0;\n\
    \    my $char_encoded_index_19 = 0;\n    my $char_encoded_index_20 = 0;\n    my\
    \ $char_encoded_index_21 = 0;\n    my $char_encoded_index_22 = 0;\n    my $char_encoded_index_23\
    \ = 0;\n    my $char_encoded_index_24 = 0;\n    my $char_encoded_index_25 = 0;\n\
    \    my $char_encoded_index_26 = 0;\n    my $char_encoded_index_27 = 0;\n", " \
    \   my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    foreach my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc($char);\n            } else {\n                $char\
    \ = lc($char);\n            }\n            if (exists $vowels{$char}) {\n    \
    \            $char = chr(ord($char) + 2);\n            }\n        }\n        $encoded\
    \ .= $char;\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n \
    \   my $vowel_length = @vowels;\n    my $vowel_found = 0;\n    my $vowel_position\
    \ = 0;\n    my $vowel_new_position = 0;\n    my $vowel_new_index = 0;\n    my\
    \ $vowel_new = \"\";\n    my $vowel_char = \"\";\n    my $vowel_char_upper = \"\
    \";\n    my $vowel_char_lower = \"\";\n    my $vowel_char_new = \"\";\n    my\
    \ $vowel_char_new_upper = \"\";\n    my $vowel_char_new_lower = \"\";\n    my\
    \ $char = \"\";\n    my $char_upper = \"\";\n    my $char_lower = \"\";\n    my\
    \ $char_new = \"\";\n    my $char_new_upper = \"\";\n    my $char_new_lower =\
    \ \"\";\n    my $message_length = length($message);\n    my $message_index = 0;\n\
    \    my $message_char = \"\";\n    my $message_char_upper = \"\";\n    my $message_char_lower\
    \ = \"\";\n    my $message_char_new = \"\";\n    my $message_char_new_upper =\
    \ \"\";\n    my $message_char_new_lower = \"\";\n    my $message_char_new_index\
    \ = 0;\n    my $message_char_new_length = 0;\n    my $message_char_new_position\
    \ = 0;\n    my $message_char_new_found = 0;\n    my $message_char_new_vowel_found\
    \ = 0;\n    my $message_char_new_vowel_index = 0;\n    my $message_char_new_vowel_length\
    \ = 0;\n    my $message_char_new_vowel_position = 0;\n    my $message_char_new_vowel_new_position",
  "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded =\
    \ \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    for (my $i = 0; $i < length($vowels);\
    \ $i++) {\n        $vowels_encoded_hash->{substr($vowels, $i, 1)} = substr($vowels_encoded,\
    \ $i, 1);\n    }\n    for (my $i = 0; $i < length($message); $i++) {\n       \
    \ my $char = substr($message, $i, 1);\n        if (index($vowels, $char) >= 0)\
    \ {\n            $encoded .= $vowels_encoded_hash->{$char};\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", " \
    \   my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"cgjkqsxyz\"\
    ;\n    my $vowels_3 = \"bdfhjlnprtvxz\";\n    my $vowels_4 = \"aeiou\";\n    my\
    \ $vowels_5 = \"aeiou\";\n    my $vowels_6 = \"aeiou\";\n    my $vowels_7 = \"\
    aeiou\";\n    my $vowels_8 = \"aeiou\";\n    my $vowels_9 = \"aeiou\";\n    my\
    \ $vowels_10 = \"aeiou\";\n    my $vowels_11 = \"aeiou\";\n    my $vowels_12 =\
    \ \"aeiou\";\n    my $vowels_13 = \"aeiou\";\n    my $vowels_14 = \"aeiou\";\n\
    \    my $vowels_15 = \"aeiou\";\n    my $vowels_16 = \"aeiou\";\n    my $vowels_17\
    \ = \"aeiou\";\n    my $vowels_18 = \"aeiou\";\n    my $vowels_19 = \"aeiou\"\
    ;\n    my $vowels_20 = \"aeiou\";\n    my $vowels_21 = \"aeiou\";\n    my $vowels_22\
    \ = \"aeiou\";\n    my $vowels_23 = \"aeiou\";\n    my $vowels_24 = \"aeiou\"\
    ;\n    my $vowels_25 = \"aeiou\";\n    my $vowels_26 = \"aeiou\";\n    my $vowels_27\
    \ = \"aeiou\";\n    my $vowels_28 = \"aeiou\";\n    my $vowels_29 = \"aeiou\"\
    ;\n    my $vowels_30 = \"aeiou\";\n    my $vowels_31 = \"aeiou\";\n    my $vowels_32\
    \ = \"aeiou\";\n    my $vowels_33 = \"aeiou\";", "    my $encoded = \"\";\n  \
    \  my @vowels = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my $vowel_index = 0;\n \
    \   my $vowel_count = 0;\n    my $vowel_count_max = scalar(@vowels);\n    my $vowel_found\
    \ = 0;\n    my $char = \"\";\n    my $char_ascii = 0;\n    my $char_ascii_lower\
    \ = 0;\n    my $char_ascii_upper = 0;\n    my $char_ascii_lower_new = 0;\n   \
    \ my $char_ascii_upper_new = 0;\n    my $char_ascii_new = 0;\n    my $char_new\
    \ = \"\";\n    my $i = 0;\n    my $message_length = length($message);\n    for\
    \ ($i = 0; $i < $message_length; $i++) {\n        $char = substr($message, $i,\
    \ 1);\n        $char_ascii = ord($char);\n        $char_ascii_lower = $char_ascii\
    \ | 32;\n        $char_ascii_upper = $char_ascii & 223;\n        $vowel_found\
    \ = 0;\n        $vowel_index = 0;\n        $vowel_count = 0;\n        while ($vowel_count\
    \ < $vowel_count_max) {\n            if (ord($vowels[$vowel_index]) == $char_ascii_lower)\
    \ {\n                $vowel_found = 1;\n                last;\n            }\n\
    \            $vowel_index++;\n            $vowel_count++;\n        }\n       \
    \ if ($vowel_found) {\n            $char_ascii_lower_new = ord($vowels[($vowel_index\
    \ + 2) % $vowel_count_max]);\n            $char_ascii_upper_new = $char_ascii_lower_new\
    \ & 223;\n            $char_ascii_new = $char_ascii_lower_new;", "    my $encoded\
    \ = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %vowels_encoded = map { $_ => 1 } (\"c\"\
    , \"g\", \"k\", \"o\", \"s\");\n    for my $char (split //, $message) {\n    \
    \    if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n         \
    \       $char = uc($char);\n            } else {\n                $char = lc($char);\n\
    \            }\n            if ($vowels{lc($char)}) {\n                $char =\
    \ chr(ord($char) + 2);\n                if ($vowels_encoded{lc($char)}) {\n  \
    \                  $char = chr(ord($char) + 1);\n                }\n         \
    \   }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}",
  "    my @message = split(//, $message);\n    my @encoded;\n    my %vowels = (\n\
    \        a => 'c',\n        e => 'g',\n        i => 'k',\n        o => 'q',\n\
    \        u => 'y',\n    );\n    foreach my $letter (@message) {\n        if ($letter\
    \ =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n                $letter\
    \ = uc($letter);\n            } else {\n                $letter = lc($letter);\n\
    \            }\n        }\n        if ($letter =~ /[aeiou]/i) {\n            $letter\
    \ = $vowels{lc($letter)};\n        }\n        push(@encoded, $letter);\n    }\n\
    \    return join('', @encoded);\n}", "    my $encoded = \"\";\n    my @vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my $i = 0;\n    while ($i < length($message)) {\n        my $char = substr($message,\
    \ $i, 1);\n        if ($vowels{$char}) {\n            $encoded .= $vowels[($vowels{$char}\
    \ + 2) % 5];\n        } else {\n            $encoded .= $char;\n        }\n  \
    \      $i++;\n    }\n    return $encoded;\n}", "    my @message = split //, $message;\n\
    \    my @encoded;\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach\
    \ my $letter (@message) {\n        if ($letter =~ /[a-z]/i) {\n            if\
    \ ($letter =~ /[a-z]/) {\n                $letter = uc $letter;\n            }\
    \ else {\n                $letter = lc $letter;\n            }\n        }\n  \
    \      if ($letter =~ /[aeiou]/i) {\n            $letter = $vowels{lc $letter};\n\
    \        }\n        push @encoded, $letter;\n    }\n    return join '', @encoded;\n\
    }", "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n  \
    \  my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 } ('a'..'z');\n\
    \    my @alphabet = ('a'..'z');\n    my $alphabet_size = scalar(@alphabet);\n\
    \    for (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        my $lower_char = lc($char);\n        if ($alphabet{$lower_char})\
    \ {\n            if ($vowels{$lower_char}) {\n                my $index = 0;\n\
    \                for (my $j = 0; $j < $alphabet_size; $j++) {\n              \
    \      if ($alphabet[$j] eq $lower_char) {\n                        $index = $j;\n\
    \                        last;\n                    }\n                }\n   \
    \             my $new_index = ($index + 2) % $alphabet_size;\n               \
    \ $char = $alphabet[$new_index];\n            }\n            if ($char eq $lower_char)\
    \ {\n                $char = uc($char);\n            } else {\n              \
    \  $char = lc($char);\n            }\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}", "    my @message = split //, $message;\n   \
    \ my @encoded = ();\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach\
    \ my $char (@message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                push @encoded, uc $char;\n            }\n   \
    \         else {\n                push @encoded, lc $char;\n            }\n  \
    \      }\n        elsif ($char =~ /[aeiou]/i) {\n            if ($char =~ /[aeiou]/)\
    \ {\n                push @encoded, uc $vowels{lc $char};\n            }\n   \
    \         else {\n                push @encoded, lc $vowels{uc $char};\n     \
    \       }\n        }\n        else {\n            push @encoded, $char;\n    \
    \    }\n    }\n    return join '', @encoded;\n}", "    my @message = split //,\
    \ $message;\n    my @vowels = qw(a e i o u);\n    my @encoded;\n    foreach my\
    \ $letter (@message) {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter\
    \ =~ /[a-z]/) {\n                $letter = uc $letter;\n            }\n      \
    \      else {\n                $letter = lc $letter;\n            }\n        }\n\
    \        if (grep {$_ eq lc $letter} @vowels) {\n            my $index = 0;\n\
    \            foreach my $vowel (@vowels) {\n                if ($vowel eq lc $letter)\
    \ {\n                    last;\n                }\n                $index++;\n\
    \            }\n            if ($index == 4) {\n                $letter = uc $vowels[0];\n\
    \            }\n            else {\n                $letter = uc $vowels[$index\
    \ + 1];\n            }\n        }\n        push @encoded, $letter;\n    }\n  \
    \  return join '', @encoded;\n}", "    my @chars = split(//, $message);\n    my\
    \ @encoded = ();\n    my %vowels = (\n        \"a\" => \"c\",\n        \"e\" =>\
    \ \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"\
    y\",\n    );\n    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n\
    \            if ($char =~ /[A-Z]/) {\n                push(@encoded, lc($char));\n\
    \            } else {\n                push(@encoded, uc($char));\n          \
    \  }\n        } elsif ($char =~ /[aeiou]/) {\n            push(@encoded, $vowels{$char});\n\
    \        } else {\n            push(@encoded, $char);\n        }\n    }\n    return\
    \ join(\"\", @encoded);\n}", "    my @letters = split(//, $message);\n    my $encoded_message\
    \ = \"\";\n    my $letter;\n    my $vowel_index;\n    my $vowel_index_plus_two;\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    foreach $letter (@letters) {\n\
    \        if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n    \
    \    }\n        elsif ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/a-z/;\n\
    \        }\n        $vowel_index = 0;\n        foreach (@vowels) {\n         \
    \   if ($letter eq $_) {\n                $vowel_index_plus_two = $vowel_index\
    \ + 2;\n                if ($vowel_index_plus_two > 4) {\n                   \
    \ $vowel_index_plus_two = $vowel_index_plus_two - 5;\n                }\n    \
    \            $letter = $vowels[$vowel_index_plus_two];\n            }\n      \
    \      $vowel_index++;\n        }\n        $encoded_message = $encoded_message\
    \ . $letter;\n    }\n    return $encoded_message;\n}", "    my $encoded = \"\"\
    ;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    foreach my $char (split //,\
    \ $message) {\n        if (lc($char) ~~ @vowels) {\n            $encoded .= $vowels[($_\
    \ + 2) % 5] for grep { $vowels[$_] eq lc($char) } 0..$#vowels;\n        } else\
    \ {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}",
  "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    foreach my $char (split //, $message) {\n        if (lc($char) ~~ @vowels)\
    \ {\n            my $index = index(lc($char), @vowels);\n            $encoded\
    \ .= @vowels[($index + 2) % 5];\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n\
    \    my @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my %alphabet = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    my $i = 0;\n\
    \    foreach my $char (split //, $message) {\n        if ($vowels{lc $char}) {\n\
    \            $i = ($alphabet{lc $char} + 2) % 26;\n            $encoded_message\
    \ .= $alphabet[$i];\n        } else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n\
    \    my $vowels_encoded_index = 0;\n    my $vowels_index = 0;\n    my $vowel_found\
    \ = 0;\n    my $letter = \"\";\n    my $letter_index = 0;\n    my $letter_encoded\
    \ = \"\";\n    my $letter_encoded_index = 0;\n    my $letter_encoded_case = \"\
    \";\n    my $letter_encoded_case_index = 0;\n    my $letter_encoded_case_encoded\
    \ = \"\";\n    my $letter_encoded_case_encoded_index = 0;\n    my $letter_encoded_case_encoded_final\
    \ = \"\";\n    my $letter_encoded_case_encoded_final_index = 0;\n    my $message_length\
    \ = length($message);\n    my $message_index = 0;\n    my $message_encoded = \"\
    \";\n    my $message_encoded_index = 0;\n    my $message_encoded_final = \"\"\
    ;\n    my $message_encoded_final_index = 0;\n    my $message_encoded_final_length\
    \ = 0;\n    my $message_encoded_final_length_index = 0;\n    my $message_encoded_final_length_letter\
    \ = \"\";\n    my $message_encoded_final_length_letter_index = 0;\n    my $message_encoded_final_length_letter_encoded\
    \ = \"\";\n    my $message_encoded_final_length_letter_encoded_index = 0;\n  \
    \  my $message_encoded_final_length_letter_encoded_case = \"\";\n    my $message_encoded_final_length_letter_encoded_case_index\
    \ = 0;\n    my $message_encoded_final_length_letter_encoded_case_encoded = \"\"\
    ;\n    my $message_encoded_final_length_letter_encoded_case_encoded_index = 0;\n\
    \    my $message_encoded", "    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index = 0;\n  \
    \  my $vowels_index = 0;\n    my $char;\n    my $char_index;\n    my $char_encoded;\n\
    \    my $char_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel;\n    my $vowel_encoded;\n    my $vowel_encoded_index;\n    my\
    \ $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n  \
    \  my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n  \
    \  my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n  \
    \  my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n  \
    \  my $vowel_encoded_index;\n    my $vowel_index;\n    my $vowel_encoded_index;\n\
    \    my $vowel_index;\n    my $vowel_encoded_index;\n    my $vowel_index;\n   ",
  "    my $encoded_message = \"\";\n    my @message_array = split(//, $message);\n\
    \    my $vowels = \"aeiou\";\n    my @vowels_array = split(//, $vowels);\n   \
    \ my $vowels_length = length($vowels);\n    my $vowel_index = 0;\n    my $vowel_position\
    \ = 0;\n    my $vowel_position_plus_two = 0;\n    my $vowel_position_plus_two_char\
    \ = \"\";\n    my $vowel_position_plus_two_char_upper = \"\";\n    my $vowel_position_plus_two_char_lower\
    \ = \"\";\n    my $message_length = length($message);\n    my $message_char =\
    \ \"\";\n    my $message_char_upper = \"\";\n    my $message_char_lower = \"\"\
    ;\n    my $message_char_is_vowel = 0;\n    my $message_char_is_vowel_upper = 0;\n\
    \    my $message_char_is_vowel_lower = 0;\n    for (my $i = 0; $i < $message_length;\
    \ $i++) {\n        $message_char = $message_array[$i];\n        $message_char_upper\
    \ = uc($message_char);\n        $message_char_lower = lc($message_char);\n   \
    \     $message_char_is_vowel = 0;\n        $message_char_is_vowel_upper = 0;\n\
    \        $message_char_is_vowel_lower = 0;\n        for ($vowel_index = 0; $vowel_index\
    \ < $vowels_length; $vowel_index++) {\n            if ($message_char_upper eq\
    \ $vowels_array[$vowel_index]) {\n                $message_char_is_vowel_upper\
    \ = 1;\n            }\n            if ($message_char_lower eq $vowels_array[$vowel_index])\
    \ {\n                $message_char_is_vowel_lower = 1;\n            }", "    my\
    \ $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my\
    \ %vowel_hash = map { $_ => 1 } @vowels;\n    my %alphabet_hash = map { $_ =>\
    \ 1 } ('a'..'z');\n    my @alphabet = ('a'..'z');\n    my $alphabet_size = scalar\
    \ @alphabet;\n    my $vowel_size = scalar @vowels;\n    my $index = 0;\n    my\
    \ $vowel_index = 0;\n    my $letter = \"\";\n    my $vowel = \"\";\n    my $next_vowel\
    \ = \"\";\n    my $next_letter = \"\";\n    my $next_next_letter = \"\";\n   \
    \ my $next_next_vowel = \"\";\n    my $next_next_index = 0;\n    my $next_index\
    \ = 0;\n    my $vowel_next_index = 0;\n    my $vowel_next_next_index = 0;\n  \
    \  my $vowel_next_letter = \"\";\n    my $vowel_next_next_letter = \"\";\n   \
    \ my $vowel_next_next_vowel = \"\";\n    my $vowel_next_vowel = \"\";\n    my\
    \ $vowel_next_next_vowel = \"\";\n    my $vowel_next_next_letter = \"\";\n   \
    \ my $vowel_next_letter = \"\";\n    my $vowel_next_vowel = \"\";\n    my $vowel_next_next_vowel\
    \ = \"\";\n    my $vowel_next_next_letter = \"\";\n    my $vowel_next_letter =\
    \ \"\";\n    my $vowel_next_vowel = \"\";\n    my $vowel_next_next_vowel = \"\"\
    ;\n    my $vowel_next_next_letter = \"\";\n    my $vowel_next_letter = \"\";\n\
    \    my $vowel_next_v", "    my $encoded_message = \"\";\n    my @vowels = qw(a\
    \ e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my @alphabet = qw(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %alphabet = map\
    \ { $alphabet[$_] => $_ } 0..$#alphabet;\n    my $next_vowel = \"\";\n    my $next_vowel_index\
    \ = 0;\n    my $next_vowel_index_plus_two = 0;\n    my $next_vowel_plus_two =\
    \ \"\";\n    my $next_vowel_plus_two_index = 0;\n    my $next_vowel_plus_two_index_plus_two\
    \ = 0;\n    my $next_vowel_plus_two_plus_two = \"\";\n    my $next_vowel_plus_two_plus_two_index\
    \ = 0;\n    my $next_vowel_plus_two_plus_two_index_plus_two = 0;\n    my $next_vowel_plus_two_plus_two_plus_two\
    \ = \"\";\n    my $next_vowel_plus_two_plus_two_plus_two_index = 0;\n    my $next_vowel_plus_two_plus_two_plus_two_index_plus_two\
    \ = 0;\n    my $next_vowel_plus_two_plus_two_plus_two_plus_two = \"\";\n    my\
    \ $next_vowel_plus_two_plus_two_plus_two_plus_two_index = 0;\n    my $next_vowel_plus_two_plus_two_plus_two_plus_two_index_plus_two\
    \ = 0;\n    my $next_vowel_plus_two_plus_two_plus_two_plus_two_plus_two = \"\"\
    ;\n    my $next_vowel_plus_two_plus_two_plus_two_plus_two_plus_two_", "    my\
    \ $encoded_message = '';\n    my @message_array = split(//, $message);\n    my\
    \ $vowels = 'aeiou';\n    my $vowels_array = split(//, $vowels);\n    my $vowels_length\
    \ = length($vowels);\n    my $vowels_index = 0;\n    my $vowel_found = 0;\n  \
    \  my $vowel_index = 0;\n    my $vowel_index_plus_two = 0;\n    my $vowel_index_plus_two_char\
    \ = '';\n    my $vowel_index_plus_two_char_upper = '';\n    my $vowel_index_plus_two_char_lower\
    \ = '';\n    my $vowel_index_plus_two_char_upper_lower = '';\n    my $vowel_index_plus_two_char_lower_upper\
    \ = '';\n    my $message_array_length = length($message);\n    my $message_array_index\
    \ = 0;\n    my $message_array_char = '';\n    my $message_array_char_upper = '';\n\
    \    my $message_array_char_lower = '';\n    my $message_array_char_upper_lower\
    \ = '';\n    my $message_array_char_lower_upper = '';\n    for ($message_array_index\
    \ = 0; $message_array_index < $message_array_length; $message_array_index++) {\n\
    \        $message_array_char = $message_array[$message_array_index];\n       \
    \ $message_array_char_upper = uc($message_array_char);\n        $message_array_char_lower\
    \ = lc($message_array_char);\n        $message_array_char_upper_lower = $message_array_char_upper\
    \ . $message_array_char_lower;\n        $message_array_char_lower_upper = $message_array_char_lower\
    \ . $message_array_char_upper;\n        $vowel_found = 0;\n        for ($vowels_index\
    \ = 0; $vowels_index", "    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n   \
    \         if ($letter =~ /[a-z]/) {\n                $letter =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $letter =~ tr/A-Z/a-z/;\n            }\n\
    \            if ($letter =~ /[aeiou]/i) {\n                $letter =~ tr/aeiou/eioua/i;\n\
    \            }\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }", "    my $encoded_message = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash\
    \ = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\"\
    ,\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n    };\n    for my $char\
    \ (split //, $message) {\n        if ($vowels =~ /$char/) {\n            $encoded_message\
    \ .= $vowels_hash->{$char};\n        } elsif ($char =~ /[A-Z]/) {\n          \
    \  $encoded_message .= lc($char);\n        } elsif ($char =~ /[a-z]/) {\n    \
    \        $encoded_message .= uc($char);\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}", "    my @letters\
    \ = split //, $message;\n    my @encoded_letters;\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            my $encoded_letter = $letter;\n\
    \            if ($letter =~ /[a-z]/) {\n                $encoded_letter = uc $letter;\n\
    \            } else {\n                $encoded_letter = lc $letter;\n       \
    \     }\n            if ($encoded_letter =~ /[AEIOU]/) {\n                my $index\
    \ = index(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", $encoded_letter);\n                $index\
    \ += 2;\n                $index = $index % 26;\n                $encoded_letter\
    \ = substr(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", $index, 1);\n            }\n      \
    \      push @encoded_letters, $encoded_letter;\n        } else {\n           \
    \ push @encoded_letters, $letter;\n        }\n    }\n    return join \"\", @encoded_letters;\n\
    }", "    my @message = split(//, $message);\n    my @encoded_message;\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_hash = {\n        'a' => 'c',\n       \
    \ 'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y'\n\
    \    };\n    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            if ($letter =~ /[a-z]/) {\n                $letter = uc($letter);\n\
    \            }\n            if ($letter =~ /[aeiou]/i) {\n                $letter\
    \ = $vowels_hash->{lc($letter)};\n            }\n        }\n        push(@encoded_message,\
    \ $letter);\n    }\n    return join('', @encoded_message);\n}", "    my $encoded_message\
    \ = \"\";\n    my @message_array = split(//, $message);\n    foreach my $letter\
    \ (@message_array) {\n        if ($letter =~ /[a-z]/) {\n            $letter =~\
    \ tr/a-z/A-Z/;\n            $letter =~ tr/A-Z/N-ZA-M/;\n            $encoded_message\
    \ .= $letter;\n        } elsif ($letter =~ /[A-Z]/) {\n            $letter =~\
    \ tr/A-Z/a-z/;\n            $letter =~ tr/a-z/n-za-m/;\n            $encoded_message\
    \ .= $letter;\n        } else {\n            $encoded_message .= $letter;\n  \
    \      }\n    }\n    return $encoded_message;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
