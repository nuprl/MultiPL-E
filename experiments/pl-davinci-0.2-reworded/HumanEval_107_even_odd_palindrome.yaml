name: HumanEval_107_even_odd_palindrome
language: pl
prompt: "# Given a positive integer n, return an array that has the number of even\
  \ and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n\
  # Example 1:\n# >>> even_odd_palindrome(3)\n# [1, 2]\n# Explanation:\n# Integer\
  \ palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example\
  \ 2:\n# >>> even_odd_palindrome(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  # Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd\
  \ integer palindromes respectively.\nsub even_odd_palindrome {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_palindrome;\n\
  \        if(eq_deeply($candidate->(123),[8, 13])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[4, 6])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1,\
  \ 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),[6,\
  \ 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[5,\
  \ 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),[4,\
  \ 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[4,\
  \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[0,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $even = 0;\n    my $odd = 0;\n    for (my $i = 1; $i <= $n;\
    \ $i++) {\n        if ($i < 10) {\n            $odd++;\n        } elsif ($i <\
    \ 100) {\n            if ($i % 11 == 0) {\n                $odd++;\n         \
    \   } else {\n                $even++;\n            }\n        } elsif ($i < 1000)\
    \ {\n            if ($i % 11 == 0) {\n                $odd++;\n            } elsif\
    \ ($i % 10 == $i / 100) {\n                $odd++;\n            } else {\n   \
    \             $even++;\n            }\n        }\n    }\n    return [$even, $odd];\n\
    }", "    my @result = (0, 0);\n    for (my $i = 1; $i <= $n; $i++) {\n       \
    \ if ($i == reverse($i)) {\n            if ($i % 2 == 0) {\n                $result[0]++;\n\
    \            } else {\n                $result[1]++;\n            }\n        }\n\
    \    }\n    return @result;\n}", "    my $even = 0;\n    my $odd = 0;\n    for(my\
    \ $i = 1; $i <= $n; $i++) {\n        if($i < 10) {\n            $odd++;\n    \
    \    } elsif($i < 100) {\n            if($i % 11 == 0) {\n                $odd++;\n\
    \            } else {\n                $even++;\n            }\n        } elsif($i\
    \ < 1000) {\n            if($i % 11 == 0) {\n                $odd++;\n       \
    \     } elsif($i % 100 == 0) {\n                $even++;\n            } else {\n\
    \                my $first = int($i / 100);\n                my $last = $i % 10;\n\
    \                if($first == $last) {\n                    $odd++;\n        \
    \        } else {\n                    $even++;\n                }\n         \
    \   }\n        }\n    }\n    return [$even, $odd];\n}", "    my $even = 0;\n \
    \   my $odd = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($i < 10)\
    \ {\n            $odd++;\n        } elsif ($i < 100) {\n            $even++;\n\
    \        } elsif ($i < 1000) {\n            $odd++;\n        }\n    }\n    return\
    \ [$even, $odd];\n}", "    my $even = 0;\n    my $odd = 0;\n    for (my $i = 1;\
    \ $i <= $n; $i++) {\n        if ($i < 10) {\n            $odd++;\n        } elsif\
    \ ($i < 100) {\n            $even++;\n        } elsif ($i < 1000) {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "    my $even =\
    \ 0;\n    my $odd = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if(is_palindrome($i))\
    \ {\n            if($i % 2 == 0) {\n                $even++;\n            } else\
    \ {\n                $odd++;\n            }\n        }\n    }\n    return [$even,\
    \ $odd];\n}", "    my $even = 0;\n    my $odd = 0;\n    for (my $i = 1; $i <=\
    \ $n; $i++) {\n        if ($i < 10) {\n            $odd++;\n        } elsif ($i\
    \ % 10 == 0) {\n            next;\n        } elsif ($i < 100) {\n            $even++;\n\
    \        } elsif ($i % 100 == 11) {\n            $odd++;\n        } elsif ($i\
    \ % 100 == 22) {\n            $even++;\n        } elsif ($i % 100 == 33) {\n \
    \           $odd++;\n        } elsif ($i % 100 == 44) {\n            $even++;\n\
    \        } elsif ($i % 100 == 55) {\n            $odd++;\n        } elsif ($i\
    \ % 100 == 66) {\n            $even++;\n        } elsif ($i % 100 == 77) {\n \
    \           $odd++;\n        } elsif ($i % 100 == 88) {\n            $even++;\n\
    \        } elsif ($i % 100 == 99) {\n            $odd++;\n        } elsif ($i\
    \ < 1000) {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "    my $even = 0;\n    my $odd = 0;\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        if (is_palindrome($i)) {\n            if ($i % 2 == 0) {\n      \
    \          $even++;\n            } else {\n                $odd++;\n         \
    \   }\n        }\n    }\n    return [$even, $odd];\n}", "    my @result = (0,\
    \ 0);\n    for (my $i = 1; $i <= $n; $i++) {\n        if (is_palindrome($i)) {\n\
    \            if ($i % 2 == 0) {\n                $result[0]++;\n            }\
    \ else {\n                $result[1]++;\n            }\n        }\n    }\n   \
    \ return @result;\n}", "    my $even = 0;\n    my $odd = 0;\n    for (my $i =\
    \ 1; $i <= $n; $i++) {\n        my $str = $i;\n        my $rev = reverse $str;\n\
    \        if ($str eq $rev) {\n            if ($i % 2 == 0) {\n               \
    \ $even++;\n            } else {\n                $odd++;\n            }\n   \
    \     }\n    }\n    return [$even, $odd];\n}", "    my $even = 0;\n    my $odd\
    \ = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($i < 10) {\n        \
    \    $odd++;\n        }\n        elsif($i % 10 == 0) {\n            next;\n  \
    \      }\n        else {\n            my $num = $i;\n            my $rev = 0;\n\
    \            while($num > 0) {\n                $rev = $rev * 10 + $num % 10;\n\
    \                $num /= 10;\n            }\n            if($rev == $i) {\n  \
    \              if($i % 2 == 0) {\n                    $even++;\n             \
    \   }\n                else {\n                    $odd++;\n                }\n\
    \            }\n        }\n    }\n    return [$even, $odd];\n}", "    my $even\
    \ = 0;\n    my $odd = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if(is_palindrome($i))\
    \ {\n            if($i % 2 == 0) {\n                $even++;\n            } else\
    \ {\n                $odd++;\n            }\n        }\n    }\n    return [$even,\
    \ $odd];\n}", "    my @result = (0, 0);\n    for my $i (1..$n) {\n        if ($i\
    \ == reverse $i) {\n            $result[$i % 2]++;\n        }\n    }\n    return\
    \ @result;\n}", "    my $even = 0;\n    my $odd = 0;\n    for (my $i = 1; $i <=\
    \ $n; $i++) {\n        if ($i == reverse($i)) {\n            if ($i % 2 == 0)\
    \ {\n                $even++;\n            } else {\n                $odd++;\n\
    \            }\n        }\n    }\n    return [$even, $odd];\n}", "    my $even\
    \ = 0;\n    my $odd = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($i\
    \ < 10) {\n            $odd++;\n        } elsif ($i < 100) {\n            $even++;\n\
    \        } elsif ($i < 1000) {\n            if ($i % 11 == 0) {\n            \
    \    $odd++;\n            } else {\n                $even++;\n            }\n\
    \        }\n    }\n    return [$even, $odd];\n}", "    my @result = (0, 0);\n\
    \    for (my $i = 1; $i <= $n; $i++) {\n        if (is_palindrome($i)) {\n   \
    \         if ($i % 2 == 0) {\n                $result[0]++;\n            } else\
    \ {\n                $result[1]++;\n            }\n        }\n    }\n    return\
    \ @result;\n}", "    my @result = (0, 0);\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        if (is_palindrome($i)) {\n            if ($i % 2 == 0) {\n      \
    \          $result[0]++;\n            } else {\n                $result[1]++;\n\
    \            }\n        }\n    }\n    return @result;\n}", "    my @ret = (0,\
    \ 0);\n    for my $i (1..$n) {\n        my $s = $i;\n        my $r = 0;\n    \
    \    while ($s) {\n            $r = $r * 10 + $s % 10;\n            $s /= 10;\n\
    \        }\n        if ($r == $i) {\n            if ($i % 2 == 0) {\n        \
    \        $ret[0]++;\n            } else {\n                $ret[1]++;\n      \
    \      }\n        }\n    }\n    return @ret;\n}", "    my @result = (0, 0);\n\
    \    for (my $i = 1; $i <= $n; $i++) {\n        if ($i == reverse($i)) {\n   \
    \         if ($i % 2 == 0) {\n                $result[0]++;\n            } else\
    \ {\n                $result[1]++;\n            }\n        }\n    }\n    return\
    \ @result;\n}", "    my $even = 0;\n    my $odd = 0;\n    for(my $i = 1; $i <=\
    \ $n; $i++) {\n        if(is_palindrome($i)) {\n            if($i % 2 == 0) {\n\
    \                $even++;\n            } else {\n                $odd++;\n   \
    \         }\n        }\n    }\n    return [$even, $odd];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
