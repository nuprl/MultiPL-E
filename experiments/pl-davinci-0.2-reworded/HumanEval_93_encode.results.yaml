language: pl
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map\
    \ { $_ => 1 } ('a'..'z');\n    for my $char (split //, $message) {\n        if\
    \ ($letters{$char}) {\n            if ($vowels{$char}) {\n                $encoded\
    \ .= next_vowel($char);\n            } else {\n                $encoded .= uc\
    \ $char;\n            }\n        } else {\n            $encoded .= $char;\n  \
    \      }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @message = split //, $message;\n\
    \    foreach my $char (@message) {\n        if ($char =~ /[a-z]/i) {\n       \
    \     my $new_char = $char;\n            if ($char =~ /[a-z]/) {\n           \
    \     $new_char =~ tr/a-z/b-za/;\n            } else {\n                $new_char\
    \ =~ tr/A-Z/B-ZA/;\n            }\n            if ($new_char =~ /[aeiou]/i) {\n\
    \                $new_char =~ tr/a-z/c-za-b/;\n            }\n            $encoded\
    \ .= $new_char;\n        } else {\n            $encoded .= $char;\n        }\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\"\
    ,\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n\
    \        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n \
    \       \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n  \
    \      \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n   \
    \     \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n    \
    \    \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n     \
    \   \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n      \
    \  \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $letter (split\
    \ //, $message) {\n        if ($vowels{$letter}) {\n            $encoded .= $alphabet{$letter};\n\
    \        } else {\n            $encoded .= $letter;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    for\
    \ (my $i = 0; $i < length($vowels); $i++) {\n        $vowels_encoded_hash->{substr($vowels,\
    \ $i, 1)} = substr($vowels_encoded, $i, 1);\n    }\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if (index($vowels,\
    \ $char) != -1) {\n            $encoded .= $vowels_encoded_hash->{$char};\n  \
    \      } elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc($char);\n    \
    \    } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc($char);\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    for (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if (index($vowels, $char) >= 0) {\n            my $index =\
    \ index($vowels, $char);\n            $index = ($index + 2) % 5;\n           \
    \ $char = substr($vowels, $index, 1);\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_length = @vowels;\n    my $message_length = length($message);\n\
    \    my $message_index = 0;\n    my $message_char = \"\";\n    my $message_char_lower\
    \ = \"\";\n    my $message_char_upper = \"\";\n    my $message_char_is_vowel =\
    \ 0;\n    my $message_char_is_upper = 0;\n    my $message_char_is_lower = 0;\n\
    \    my $message_char_is_letter = 0;\n    my $message_char_is_vowel_upper = 0;\n\
    \    my $message_char_is_vowel_lower = 0;\n    my $message_char_is_vowel_upper_index\
    \ = 0;\n    my $message_char_is_vowel_lower_index = 0;\n    my $message_char_is_vowel_upper_index_plus_two\
    \ = 0;\n    my $message_char_is_vowel_lower_index_plus_two = 0;\n    my $message_char_is_vowel_upper_index_plus_two_mod\
    \ = 0;\n    my $message_char_is_vowel_lower_index_plus_two_mod = 0;\n    my $message_char_is_vowel_upper_index_plus_two_mod_vowel_length\
    \ = 0;\n    my $message_char_is_vowel_lower_index_plus_two_mod_vowel_length =\
    \ 0;\n    my $message_char_is_vowel_upper_index_plus_two_mod_vowel_length_vowel\
    \ = \"\";\n    my $message_char_is_vowel_lower_index_plus_two_mod_vowel_length_vowel\
    \ = \"\";\n    my $message_char_is_vowel_upper\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu7os7irq.pl line 40, at end
    of line

    syntax error at /tmp/tmpu7os7irq.pl line 40, near "$message_char_is_vowel_upper

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu7os7irq.pl line 67, at end of
    line

    syntax error at /tmp/tmpu7os7irq.pl line 67, at EOF

    Execution of /tmp/tmpu7os7irq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076944
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map\
    \ { $_ => 1 } ('a'..'z');\n    my %alphabet_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my %alphabet_lower = map { $_ => 1 } ('a'..'z');\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n  \
    \  my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpmmphykct.pl line 69, at end
    of line

    syntax error at /tmp/tmpmmphykct.pl line 69, near "$f

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpmmphykct.pl line 96, at end of
    line

    syntax error at /tmp/tmpmmphykct.pl line 96, at EOF

    Execution of /tmp/tmpmmphykct.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076944
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @encoded_message;\n\
    \    my $vowels = \"aeiou\";\n    my $vowels_index = 0;\n    my $vowels_length\
    \ = length($vowels);\n    foreach my $char (@message) {\n        if (index($vowels,\
    \ $char) != -1) {\n            $vowels_index = index($vowels, $char);\n      \
    \      $vowels_index += 2;\n            if ($vowels_index >= $vowels_length) {\n\
    \                $vowels_index -= $vowels_length;\n            }\n           \
    \ push @encoded_message, substr($vowels, $vowels_index, 1);\n        } else {\n\
    \            push @encoded_message, $char;\n        }\n    }\n    return join\
    \ \"\", @encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n\
    \        'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' =>\
    \ 'f',\n        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n      \
    \  'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n\
    \        'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' =>\
    \ 'q',\n        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n      \
    \  's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n\
    \        'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' =>\
    \ 'b',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc($char)})\
    \ {\n            $encoded .= $alphabet{lc($char)};\n        } else {\n       \
    \     $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = qw(a\
    \ e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n\
    \        a => 'c',\n        e => 'g',\n        i => 'k',\n        o => 's',\n\
    \        u => 'y',\n    );\n    for my $char (split //, $message) {\n        if\
    \ ($vowels{lc $char}) {\n            $encoded_message .= $vowels_map{lc $char};\n\
    \        }\n        elsif ($char =~ /[a-z]/) {\n            $encoded_message .=\
    \ uc $char;\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $encoded_message\
    \ .= lc $char;\n        }\n        else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map\
    \ { $_ => 1 } ('a'..'z');\n    my %alphabet_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my $vowel_index = 0;\n    my $vowel_index_upper = 0;\n    my $vowel_index_lower\
    \ = 0;\n    my $vowel_index_upper_lower = 0;\n    my $vowel_index_lower_upper\
    \ = 0;\n    my $vowel_index_upper_upper = 0;\n    my $vowel_index_lower_lower\
    \ = 0;\n    my $vowel_index_upper_lower_upper = 0;\n    my $vowel_index_lower_upper_lower\
    \ = 0;\n    my $vowel_index_upper_upper_upper = 0;\n    my $vowel_index_lower_lower_lower\
    \ = 0;\n    my $vowel_index_upper_lower_upper_lower = 0;\n    my $vowel_index_lower_upper_lower_upper\
    \ = 0;\n    my $vowel_index_upper_upper_upper_upper = 0;\n    my $vowel_index_lower_lower_lower_lower\
    \ = 0;\n    my $vowel_index_upper_lower_upper_lower_upper = 0;\n    my $vowel_index_lower_upper_lower_upper_lower\
    \ = 0;\n    my $vowel_index_upper_upper_upper_upper_upper = 0;\n    my $vowel_index_lower_lower_lower_lower_lower\
    \ = 0;\n    my $vowel_index_upper_lower_upper_lower_upper_lower = 0;\n    my $vowel_index_lower_upper_lower_upper_lower_upper\
    \ = 0;\n    my $vowel_index_upper_upper_upper_upper_upper_upper = 0;\n    my\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'No such class use at /tmp/tmppvnn69cm.pl line 41, near "my

    use"

    syntax error at /tmp/tmppvnn69cm.pl line 41, near "my

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmppvnn69cm.pl line 68, at end of
    line

    syntax error at /tmp/tmppvnn69cm.pl line 68, at EOF

    Execution of /tmp/tmppvnn69cm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076944
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n   \
    \         if ($letter =~ /[a-z]/) {\n                $letter =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $letter =~ tr/A-Z/a-z/;\n            }\n\
    \            if ($letter =~ /[aeiou]/i) {\n                $letter =~ tr/aeiou/EIOUA/;\n\
    \            }\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter\
    \ (@message) {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~\
    \ /[a-z]/) {\n                $letter = uc $letter;\n            }\n         \
    \   elsif ($letter =~ /[A-Z]/) {\n                $letter = lc $letter;\n    \
    \        }\n            if ($letter =~ /[aeiou]/i) {\n                $letter\
    \ = $vowels{lc $letter};\n            }\n        }\n        push @encoded, $letter;\n\
    \    }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076944
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\"\
    ,\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n\
    \        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n \
    \       \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n  \
    \      \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n   \
    \     \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n    \
    \    \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n     \
    \   \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n      \
    \  \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{$char}) {\n            $encoded .= $alphabet{$char};\n\
    \        } else {\n            $encoded .= uc($char);\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_hash = {\n        'a' => 'c',\n        'e' => 'g',\n        'i'\
    \ => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    };\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[A-Z]/) {\n            $encoded\
    \ .= lc($char);\n        } elsif ($char =~ /[a-z]/) {\n            $encoded .=\
    \ uc($char);\n        } else {\n            $encoded .= $char;\n        }\n  \
    \  }\n    for my $char (split //, $encoded) {\n        if ($vowels =~ /$char/)\
    \ {\n            $encoded =~ s/$char/$vowels_hash->{$char}/g;\n        }\n   \
    \ }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_length = scalar\
    \ @vowels;\n    my $vowel_found = 0;\n    my $vowel_count = 0;\n    my $vowel_index_found\
    \ = 0;\n    my $vowel_index_to_use = 0;\n    my $vowel_to_use = \"\";\n    my\
    \ $vowel_to_use_index = 0;\n    my $vowel_to_use_index_found = 0;\n    my $vowel_to_use_index_found_count\
    \ = 0;\n    my $vowel_to_use_index_found_count_found = 0;\n    my $vowel_to_use_index_found_count_found_index\
    \ = 0;\n    my $vowel_to_use_index_found_count_found_index_found = 0;\n    my\
    \ $vowel_to_use_index_found_count_found_index_found_count = 0;\n    my $vowel_to_use_index_found_count_found_index_found_count_found\
    \ = 0;\n    my $vowel_to_use_index_found_count_found_index_found_count_found_index\
    \ = 0;\n    my $vowel_to_use_index_found_count_found_index_found_count_found_index_found\
    \ = 0;\n    my $vowel_to_use_index_found_count_found_index_found_count_found_index_found_count\
    \ = 0;\n    my $vowel_to_use_index_found_count_found_index_found_count_found_index_found_count_found\
    \ = 0;\n    my $vowel_to_use_index_found_count_found_index_found_count_found_index_found_count_found_index\
    \ = 0;\n    my $vowel_to_use_index_found_count_found\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvd2s2tyq.pl line 36, at end
    of line

    syntax error at /tmp/tmpvd2s2tyq.pl line 36, near "$vowel_to_use_index_found_count_found

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvd2s2tyq.pl line 63, at end of
    line

    syntax error at /tmp/tmpvd2s2tyq.pl line 63, at EOF

    Execution of /tmp/tmpvd2s2tyq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076944
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = qw(a\
    \ e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my @alphabet = qw(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %alphabet = map\
    \ { $alphabet[$_] => $_ } 0..$#alphabet;\n    for my $letter (split //, $message)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            my $new_letter = $letter;\n\
    \            if ($letter =~ /[a-z]/) {\n                $new_letter = uc $letter;\n\
    \            } else {\n                $new_letter = lc $letter;\n           \
    \ }\n            if ($vowels{$new_letter}) {\n                my $index = $alphabet{$new_letter};\n\
    \                $index += 2;\n                $index -= 26 if $index > 25;\n\
    \                $new_letter = $alphabet[$index];\n            }\n           \
    \ $encoded_message .= $new_letter;\n        } else {\n            $encoded_message\
    \ .= $letter;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @letters = split(//,\
    \ $message);\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $encoded_message .= chr(ord($letter) - 32);\n        } elsif\
    \ ($letter =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($letter) + 32);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @chars = split(//, $message);\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n         \
    \   if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n         \
    \   } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n         \
    \   if ($char =~ /[aeiou]/i) {\n                if ($char =~ /[aeiou]/) {\n  \
    \                  $char =~ tr/aeiou/EIOUA/;\n                } else {\n     \
    \               $char =~ tr/AEIOU/eioua/;\n                }\n            }\n\
    \        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        'a' => 'c',\n        'e' => 'g',\n       \
    \ 'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    };\n    my $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_hash = {};\n    my $index\
    \ = 0;\n    foreach my $letter (split(//, $alphabet)) {\n        $alphabet_hash->{$letter}\
    \ = $index;\n        $index++;\n    }\n    foreach my $letter (split(//, $message))\
    \ {\n        if ($letter =~ /[A-Z]/) {\n            $encoded_message .= lc($letter);\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            $encoded_message .= uc($letter);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    foreach my $letter (split(//, $encoded_message)) {\n        if ($letter =~\
    \ /[a-z]/) {\n            if (exists $vowels_hash->{$letter}) {\n            \
    \    $encoded_message =~ s/$letter/$vowels_hash->{$letter}/;\n            } else\
    \ {\n                my $index = $alphabet_hash->{$letter};\n                $index\
    \ += 2;\n                if ($index > 25) {\n                    $index -= 26;\n\
    \                }\n                my $new_letter = $alphabet[$index];\n    \
    \            $encoded_message =~ s/$letter/$new_letter/;\n            }\n    \
    \    }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\"\
    ,\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n\
    \        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n \
    \       \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n  \
    \      \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n   \
    \     \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n    \
    \    \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n     \
    \   \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n      \
    \  \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{$char}) {\n            $encoded .= $alphabet{$char};\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc($char);\n  \
    \      } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc($char);\n    \
    \    } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $i;\n    my $j;\n    my $char;\n    my $is_vowel;\n\
    \    my $vowel_index;\n    my $char_index;\n    my $new_char_index;\n    my $new_char;\n\
    \    for ($i = 0; $i < $message_length; $i++) {\n        $char = substr($message,\
    \ $i, 1);\n        $is_vowel = 0;\n        for ($j = 0; $j < $vowels_length; $j++)\
    \ {\n            if ($char eq substr($vowels, $j, 1)) {\n                $is_vowel\
    \ = 1;\n                $vowel_index = $j;\n                last;\n          \
    \  }\n        }\n        if ($is_vowel) {\n            $char_index = index($alphabet,\
    \ $char);\n            $new_char_index = ($char_index + 2) % $alphabet_length;\n\
    \            $new_char = substr($alphabet, $new_char_index, 1);\n            $encoded_message\
    \ .= $new_char;\n        } else {\n            if ($char eq uc($char)) {\n   \
    \             $encoded_message .= lc($char);\n            } else {\n         \
    \       $encoded_message .= uc($char);\n            }\n        }\n    }\n    return\
    \ $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $i = 0;\n    while ($i < length($message))\
    \ {\n        my $char = substr($message, $i, 1);\n        my $vowel_index = index($vowels,\
    \ $char);\n        if ($vowel_index != -1) {\n            $char = substr($vowels_encoded,\
    \ $vowel_index, 1);\n        }\n        if ($char =~ /[a-z]/) {\n            $char\
    \ =~ tr/a-z/b-za/;\n        } elsif ($char =~ /[A-Z]/) {\n            $char =~\
    \ tr/A-Z/B-ZA/;\n        }\n        $encoded .= $char;\n        $i++;\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_hash\
    \ = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\"\
    ,\n        \"o\" => \"s\",\n        \"u\" => \"y\",\n    );\n    my @message_array\
    \ = split(//, $message);\n    foreach my $char (@message_array) {\n        if\
    \ ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n               \
    \ $char = uc($char);\n            } else {\n                $char = lc($char);\n\
    \            }\n            if (exists $vowels{$char}) {\n                $char\
    \ = $vowels_hash{$char};\n            }\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"y\",\n    );\n    for my $char (split //, $message) {\n\
    \        if (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n\
    \        } elsif ($char =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"y\",\n    );\n    foreach my $letter (split(//, $message))\
    \ {\n        if (grep {$_ eq $letter} @vowels) {\n            $encoded_message\
    \ .= $vowel_map{$letter};\n        } elsif ($letter =~ /[A-Z]/) {\n          \
    \  $encoded_message .= lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n\
    \            $encoded_message .= uc($letter);\n        } else {\n            $encoded_message\
    \ .= $letter;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %letters_upper = map { $_ => 1 } (\"\
    A\"..\"Z\");\n    my %letters_lower = map { $_ => 1 } (\"a\"..\"z\");\n    my\
    \ %letters_lower_upper = map { $_ => 1 } (\"a\"..\"z\", \"A\"..\"Z\");\n    my\
    \ %letters_lower_upper_numbers = map { $_ => 1 } (\"a\"..\"z\", \"A\"..\"Z\",\
    \ \"0\"..\"9\");\n    my %letters_lower_upper_numbers_space = map { $_ => 1 }\
    \ (\"a\"..\"z\", \"A\"..\"Z\", \"0\"..\"9\", \" \");\n    my %letters_lower_upper_numbers_space_punctuation\
    \ = map { $_ => 1 } (\"a\"..\"z\", \"A\"..\"Z\", \"0\"..\"9\", \" \", \".\", \"\
    ,\", \";\", \":\", \"!\", \"?\", \"\\\"\", \"\\'\");\n    my %letters_lower_upper_numbers_space_punctuation_special\
    \ = map { $_ => 1 } (\"a\"..\"z\", \"A\"..\"Z\", \"0\"..\"9\", \" \", \".\", \"\
    ,\", \";\", \":\", \"!\", \"?\", \"\\\"\", \"\\'\", \"\\$\", \"\\%\", \"\\&\"\
    , \"\\*\", \"\\(\", \"\\)\", \"\\-\", \"\\+\", \"\\=\", \"\\[\", \"\\]\", \"\\\
    {\", \"\\}\", \"\\<\", \"\\>\", \"\\#\", \"\\@\", \"\\^\", \"\\_\", \"\\|\", \"\
    \\~\", \"\\\\\", \"\\`\");\n    my %letters_lower_upper_numbers_space_punctuation_special_newline\
    \ = map { $_ => 1 } (\"a\"..\"z\", \"A\"..\"Z\", \"0\"..\"9\", \" \", \".\", \"\
    ,\", \";\", \":\", \"!\", \"?\", \"\\\"\", \"\\'\", \"\\$\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp2lgajwdc.pl line 30,\
    \ near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line\
    \ \"\" string starting on line 24)\nString found where operator expected at /tmp/tmp2lgajwdc.pl\
    \ line 30, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp2lgajwdc.pl\
    \ line 30, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found\
    \ where operator expected at /tmp/tmp2lgajwdc.pl line 30, near \"print \"\"\n\t\
    (Missing semicolon on previous line?)\nBareword found where operator expected\
    \ at /tmp/tmp2lgajwdc.pl line 31, near \"print \"ok\"\n  (Might be a runaway multi-line\
    \ \"\" string starting on line 30)\n\t(Do you need to predeclare print?)\nString\
    \ found where operator expected at /tmp/tmp2lgajwdc.pl line 31, near \"Mudasir\"\
    ),\"\"\nBareword found where operator expected at /tmp/tmp2lgajwdc.pl line 31,\
    \ near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where\
    \ operator expected at /tmp/tmp2lgajwdc.pl line 31, near \"print \"\"\n\t(Missing\
    \ semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp2lgajwdc.pl\
    \ line 32, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting\
    \ on line 31)\n\t(Do you need to predeclare print?)\nString found where operator\
    \ expected at /tmp/tmp2lgajwdc.pl line 32, near \"YES\"),\"\"\nBareword found\
    \ where operator expected at /tmp/tmp2lgajwdc.pl line 32, near \"\"),\"ygs\"\n\
    \t(Missing operator before ygs?)\nString found where operator expected at /tmp/tmp2lgajwdc.pl\
    \ line 32, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword\
    \ found where operator expected at /tmp/tmp2lgajwdc.pl line 33, near \"print \"\
    ok\"\n  (Might be a runaway multi-line \"\" string starting on line 32)\n\t(Do\
    \ you need to predeclare print?)\nBareword found where operator expected at /tmp/tmp2lgajwdc.pl\
    \ line 33, near \"\"),\"tHKS\"\n\t(Missing operator before tHKS?)\nBareword found\
    \ where operator expected at /tmp/tmp2lgajwdc.pl line 34, near \"print \"ok\"\n\
    \  (Might be a runaway multi-line \"\" string starting on line 33)\n\t(Do you\
    \ need to predeclare print?)\nBareword fou"
  stdout: ''
  timestamp: 1660076944
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\"\
    ,\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n\
    \        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n \
    \       \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n  \
    \      \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n   \
    \     \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n    \
    \    \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n     \
    \   \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n      \
    \  \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{lc($char)}) {\n            $encoded .= $alphabet{lc($char)};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n   \
    \ );\n    my @message_array = split(//, $message);\n    foreach my $letter (@message_array)\
    \ {\n        if (grep {$_ eq $letter} @vowels) {\n            $encoded_message\
    \ .= $vowel_map{$letter};\n        } else {\n            $encoded_message .= $letter;\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 0
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @chars = split(//, $message);\n    my @encoded_chars\
    \ = ();\n    my $i = 0;\n    foreach my $char (@chars) {\n        if ($char =~\
    \ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            } else {\n                $char = lc($char);\n            }\n   \
    \     }\n        if ($char =~ /[aeiou]/i) {\n            my $char_num = ord($char);\n\
    \            $char_num += 2;\n            if ($char_num > ord('z')) {\n      \
    \          $char_num -= 26;\n            }\n            $char = chr($char_num);\n\
    \        }\n        push(@encoded_chars, $char);\n    }\n    return join('', @encoded_chars);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @message = split(//, $message);\n\
    \    foreach my $char (@message) {\n        if ($char =~ /[a-z]/i) {\n       \
    \     my $ascii = ord($char);\n            if ($ascii >= 65 && $ascii <= 90) {\n\
    \                $ascii += 2;\n                if ($ascii > 90) {\n          \
    \          $ascii -= 26;\n                }\n            } elsif ($ascii >= 97\
    \ && $ascii <= 122) {\n                $ascii += 2;\n                if ($ascii\
    \ > 122) {\n                    $ascii -= 26;\n                }\n           \
    \ }\n            $char = chr($ascii);\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my $encoded_message\
    \ = \"\";\n    my %vowels = (\n        \"a\" => \"c\",\n        \"e\" => \"g\"\
    ,\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n\
    \    );\n    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            if ($letter =~ /[a-z]/) {\n                $letter = uc($letter);\n\
    \            } else {\n                $letter = lc($letter);\n            }\n\
    \        }\n        if ($letter =~ /[aeiou]/i) {\n            $letter = $vowels{lc($letter)};\n\
    \        }\n        $encoded_message .= $letter;\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length =\
    \ length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for(my $i = 0; $i < $message_length; $i++) {\n    \
    \    my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if($char_index == -1) {\n            $encoded .= $char;\n \
    \       } else {\n            my $vowel_index = index($vowels, $char);\n     \
    \       if($vowel_index == -1) {\n                $encoded .= uc($char);\n   \
    \         } else {\n                my $new_vowel_index = ($vowel_index + 2) %\
    \ $vowels_length;\n                $encoded .= substr($vowels, $new_vowel_index,\
    \ 1);\n            }\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowel_hash = map { $_ => 1 } @vowels;\n    my\
    \ $vowel_index = 0;\n    for my $char (split //, $message) {\n        if ($char\
    \ =~ /[a-zA-Z]/) {\n            if ($char =~ /[a-z]/) {\n                $char\
    \ =~ tr/a-z/A-Z/;\n            } else {\n                $char =~ tr/A-Z/a-z/;\n\
    \            }\n            if (exists $vowel_hash{lc($char)}) {\n           \
    \     $char = $vowels[($vowel_index + 2) % 5];\n                $vowel_index =\
    \ ($vowel_index + 1) % 5;\n            }\n        }\n        $encoded_message\
    \ .= $char;\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @message_array\
    \ = split(//, $message);\n    foreach my $char (@message_array) {\n        if\
    \ ($char =~ /[a-z]/) {\n            $encoded_message .= chr(ord($char) - 32);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($char)\
    \ + 32);\n        } else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z);\n    my $vowel_index = 0;\n    my $alphabet_index = 0;\n \
    \   my $encoded_message = \"\";\n    foreach my $letter (@message) {\n       \
    \ if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n           \
    \ $encoded_message .= $letter;\n        } elsif ($letter =~ /[A-Z]/) {\n     \
    \       $letter =~ tr/A-Z/a-z/;\n            $encoded_message .= $letter;\n  \
    \      } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    @message = split //, $encoded_message;\n    $encoded_message = \"\";\n  \
    \  foreach my $letter (@message) {\n        foreach my $vowel (@vowels) {\n  \
    \          if ($letter eq $vowels[$vowel_index]) {\n                $alphabet_index\
    \ = 0;\n                foreach my $alphabet_letter (@alphabet) {\n          \
    \          if ($letter eq $alphabet_letter) {\n                        $encoded_message\
    \ .= $alphabet[$alphabet_index + 2];\n                    }\n                \
    \    $alphabet_index++;\n                }\n            }\n            $vowel_index++;\n\
    \        }\n        $vowel_index = 0;\n        if ($letter !~ /[aeiou]/) {\n \
    \           $encoded_message .= $letter;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash = {};\n    my @vowels\
    \ = split(//, $vowels);\n    for(my $i = 0; $i < scalar(@vowels); $i++) {\n  \
    \      $vowels_hash->{$vowels[$i]} = $vowels[($i + 2) % 5];\n    }\n    for(my\
    \ $i = 0; $i < scalar(@message); $i++) {\n        if(exists($vowels_hash->{lc($message[$i])}))\
    \ {\n            $encoded .= $vowels_hash->{lc($message[$i])};\n        }\n  \
    \      elsif(lc($message[$i]) eq $message[$i]) {\n            $encoded .= uc($message[$i]);\n\
    \        }\n        else {\n            $encoded .= lc($message[$i]);\n      \
    \  }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"y\",\n    );\n    for my $char (split //, $message) {\n\
    \        if (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index = 0;\n    my\
    \ $vowels_index = 0;\n    my $vowel_found = 0;\n    my $vowel_encoded_found =\
    \ 0;\n    my $vowel_encoded = \"\";\n    my $vowel = \"\";\n    my $char = \"\"\
    ;\n    my $char_index = 0;\n    my $char_encoded = \"\";\n    my $message_length\
    \ = length($message);\n    my $vowels_length = length($vowels);\n    my $vowels_encoded_length\
    \ = length($vowels_encoded);\n    my $char_ascii = 0;\n    my $char_encoded_ascii\
    \ = 0;\n    for($char_index = 0; $char_index < $message_length; $char_index++)\
    \ {\n        $char = substr($message, $char_index, 1);\n        $char_ascii =\
    \ ord($char);\n        $vowel_found = 0;\n        $vowel_encoded_found = 0;\n\
    \        for($vowels_index = 0; $vowels_index < $vowels_length; $vowels_index++)\
    \ {\n            $vowel = substr($vowels, $vowels_index, 1);\n            if($char\
    \ eq $vowel) {\n                $vowel_found = 1;\n                $vowel_encoded\
    \ = substr($vowels_encoded, $vowels_index, 1);\n                $char_encoded\
    \ = $vowel_encoded;\n                $char_encoded_ascii = ord($char_encoded);\n\
    \                if($char_encoded_ascii >= 65 && $char_encoded_ascii <= 90) {\n\
    \                    $char_encoded = chr($char_encoded_ascii + 32);\n        \
    \        }\n                $encoded = $encoded . $char_encoded\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpxvxf65ea.pl line 46, at end
    of line

    syntax error at /tmp/tmpxvxf65ea.pl line 46, near "$char_encoded

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpxvxf65ea.pl line 73, at end of
    line

    syntax error at /tmp/tmpxvxf65ea.pl line 73, at EOF

    Execution of /tmp/tmpxvxf65ea.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length\
    \ = scalar @vowels;\n    my $vowel_found = 0;\n    my $vowel_next = 0;\n    my\
    \ $vowel_next_next = 0;\n    my $vowel_next_next_next = 0;\n    my $vowel_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next = 0;\n    my\
    \ $vowel_next_next_next_next_next_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpp_yeugzo.pl line 35, at end
    of line

    syntax error at /tmp/tmpp_yeugzo.pl line 35, near "$vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpp_yeugzo.pl line 62, at end of
    line

    syntax error at /tmp/tmpp_yeugzo.pl line 62, at EOF

    Execution of /tmp/tmpp_yeugzo.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my\
    \ $i = 0;\n    foreach my $vowel (split(//, $vowels)) {\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split(//, $message)) {\n        if ($char =~ /[A-Z]/) {\n            $encoded\
    \ .= lc($char);\n        } elsif ($char =~ /[a-z]/) {\n            $encoded .=\
    \ uc($char);\n        } else {\n            $encoded .= $char;\n        }\n  \
    \  }\n    foreach my $vowel (split(//, $vowels)) {\n        $encoded =~ s/$vowel/$vowels_encoded_hash->{$vowel}/g;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $letter = substr($message, $i, 1);\n        my $letter_index = index($alphabet,\
    \ $letter);\n        if ($letter_index != -1) {\n            my $letter_index_in_vowels\
    \ = index($vowels, $letter);\n            if ($letter_index_in_vowels != -1) {\n\
    \                $letter_index_in_vowels += 2;\n                if ($letter_index_in_vowels\
    \ >= $vowels_length) {\n                    $letter_index_in_vowels -= $vowels_length;\n\
    \                }\n                $letter = substr($vowels, $letter_index_in_vowels,\
    \ 1);\n            } else {\n                $letter_index += $alphabet_length\
    \ / 2;\n                if ($letter_index >= $alphabet_length) {\n           \
    \         $letter_index -= $alphabet_length;\n                }\n            \
    \    $letter = substr($alphabet, $letter_index, 1);\n            }\n        }\n\
    \        $encoded_message .= $letter;\n    }\n    return $encoded_message;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my\
    \ $vowels_hash = {};\n    my $i = 0;\n    foreach my $vowel (split(//, $vowels))\
    \ {\n        $vowels_hash->{$vowel} = 1;\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split(//, $message)) {\n        if ($vowels_hash->{$char}) {\n            $encoded\
    \ .= $vowels_encoded_hash->{$char};\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my\
    \ $i = 0;\n    foreach my $vowel (split(//, $vowels)) {\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split(//, $message)) {\n        if ($char =~ /[a-zA-Z]/) {\n            if\
    \ ($char =~ /[a-z]/) {\n                $char = uc($char);\n            } else\
    \ {\n                $char = lc($char);\n            }\n            if ($char\
    \ =~ /[aeiou]/) {\n                $char = $vowels_encoded_hash->{$char};\n  \
    \          }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n   \
    \ );\n    for my $char (split(//, $message)) {\n        if (grep {$_ eq $char}\
    \ @vowels) {\n            $encoded_message .= $vowel_map{$char};\n        } else\
    \ {\n            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_index = 0;\n    my $vowel_index = 0;\n    my $vowel_index_plus_two\
    \ = 0;\n    my $vowel_index_plus_two_char = \"\";\n    my $vowel_index_plus_two_char_upper\
    \ = \"\";\n    my $vowel_index_plus_two_char_lower = \"\";\n    my $vowel_index_plus_two_char_upper_ord\
    \ = 0;\n    my $vowel_index_plus_two_char_lower_ord = 0;\n    my $vowel_index_plus_two_char_upper_ord_plus_two\
    \ = 0;\n    my $vowel_index_plus_two_char_lower_ord_plus_two = 0;\n    my $vowel_index_plus_two_char_upper_ord_plus_two_char\
    \ = \"\";\n    my $vowel_index_plus_two_char_lower_ord_plus_two_char = \"\";\n\
    \    my $vowel_index_plus_two_char_upper_ord_plus_two_char_upper = \"\";\n   \
    \ my $vowel_index_plus_two_char_lower_ord_plus_two_char_lower = \"\";\n    my\
    \ $vowel_index_plus_two_char_upper_ord_plus_two_char_upper_ord = 0;\n    my $vowel_index_plus_two_char_lower_ord_plus_two_char_lower_ord\
    \ = 0;\n    my $vowel_index_plus_two_char_upper_ord_plus_two_char_upper_ord_plus_two\
    \ = 0;\n    my $vowel_index_plus_two_char_lower_ord_plus_two_char_lower_ord_plus_two\
    \ = 0;\n    my $vowel_index_plus_two_char_upper_ord_plus_two_char_upper_ord_plus_two_char\
    \ = \"\";\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp4cr1e64j.pl line 35,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp4cr1e64j.pl line 35, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp4cr1e64j.pl line 62, at end of line\nsyntax\
    \ error at /tmp/tmp4cr1e64j.pl line 62, at EOF\nExecution of /tmp/tmp4cr1e64j.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my @encoded;\n\
    \    my $vowels = \"aeiou\";\n    foreach my $letter (@message) {\n        if\
    \ ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n           \
    \     $letter =~ tr/a-z/A-Z/;\n            } else {\n                $letter =~\
    \ tr/A-Z/a-z/;\n            }\n            if ($vowels =~ /$letter/i) {\n    \
    \            my $index = index($vowels, $letter);\n                $index += 2;\n\
    \                if ($index > 4) {\n                    $index -= 5;\n       \
    \         }\n                $letter = substr($vowels, $index, 1);\n         \
    \   }\n        }\n        push(@encoded, $letter);\n    }\n    return join(\"\"\
    , @encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n        a\
    \ => 'c',\n        e => 'g',\n        i => 'k',\n        o => 's',\n        u\
    \ => 'y',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc\
    \ $char}) {\n            $encoded .= $vowels_map{lc $char};\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $char (split\
    \ //, $message) {\n        if ($vowels{lc $char}) {\n            $encoded .= chr(ord($char)\
    \ + 2);\n        } else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjln\";\n    my $vowels_encoded_index = 0;\n    my\
    \ $vowels_index = 0;\n    my $message_index = 0;\n    my $message_length = length($message);\n\
    \    while ($message_index < $message_length) {\n        my $char = substr($message,\
    \ $message_index, 1);\n        if ($char =~ /[A-Z]/) {\n            $char = lc($char);\n\
    \        } elsif ($char =~ /[a-z]/) {\n            $char = uc($char);\n      \
    \  }\n        $vowels_index = index($vowels, $char);\n        if ($vowels_index\
    \ != -1) {\n            $char = substr($vowels_encoded, $vowels_encoded_index,\
    \ 1);\n            $vowels_encoded_index = ($vowels_encoded_index + 1) % 5;\n\
    \        }\n        $encoded .= $char;\n        $message_index++;\n    }\n   \
    \ return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my @encoded_message;\n\
    \    my $vowels = \"aeiou\";\n    my $vowels_hash = {\n        'a' => 'c',\n \
    \       'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    };\n    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            if ($letter =~ /[a-z]/) {\n                $letter = uc($letter);\n\
    \            }\n            if ($letter =~ /[aeiou]/i) {\n                $letter\
    \ = $vowels_hash->{lc($letter)};\n            }\n        }\n        push @encoded_message,\
    \ $letter;\n    }\n    return join('', @encoded_message);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\",\"e\"\
    ,\"i\",\"o\",\"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index\
    \ = 0;\n    my $vowel_count = 0;\n    my $vowel_length = scalar @vowels;\n   \
    \ my $message_length = length $message;\n    my $i = 0;\n    while ($i < $message_length)\
    \ {\n        my $char = substr($message, $i, 1);\n        if ($char =~ /[a-zA-Z]/)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n\
    \            if (exists $vowels{$char}) {\n                $vowel_index = $vowel_count\
    \ % $vowel_length;\n                $char = $vowels[$vowel_index];\n         \
    \       $vowel_count++;\n            }\n        }\n        $encoded .= $char;\n\
    \        $i++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @letters = split(//, $message);\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u');\n    my @encoded_letters = ();\n    foreach my\
    \ $letter (@letters) {\n        if (grep {$_ eq lc($letter)} @vowels) {\n    \
    \        my $vowel_index = first_index {$_ eq lc($letter)} @vowels;\n        \
    \    my $new_vowel_index = ($vowel_index + 2) % 5;\n            push(@encoded_letters,\
    \ uc($vowels[$new_vowel_index]));\n        } else {\n            push(@encoded_letters,\
    \ uc($letter));\n        }\n    }\n    return join('', @encoded_letters);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "first_index" without a package or object reference
    at /tmp/tmplcwwbi1q.pl line 18.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index = 0;\n    my\
    \ $vowels_index = 0;\n    my $vowel_found = 0;\n    my $char;\n    my $char_index;\n\
    \    my $char_encoded;\n    my $char_encoded_index;\n    my $char_encoded_index_mod;\n\
    \    my $char_encoded_index_mod_mod;\n    my $char_encoded_index_mod_mod_mod;\n\
    \    my $char_encoded_index_mod_mod_mod_mod;\n    my $char_encoded_index_mod_mod_mod_mod_mod;\n\
    \    my $char_encoded_index_mod_mod_mod_mod_mod_mod;\n    my $char_encoded_index_mod_mod_mod_mod_mod_mod_mod;\n\
    \    my $char_encoded_index_mod_mod_mod_mod_mod_mod_mod_mod;\n    my $char_encoded_index_mod_mod_mod_mod_mod_mod_mod_mod_mod;\n\
    \    my $char_encoded_index_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod;\n    my $char_encoded_index_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod;\n\
    \    my $char_encoded_index_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod;\n\
    \    my $char_encoded_index_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod;\n\
    \    my $char_encoded_index_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod;\n\
    \    my $char_encoded_index_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9u1m0oid.pl line 38, at end
    of line

    syntax error at /tmp/tmp9u1m0oid.pl line 38, near "$char_encoded_index_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9u1m0oid.pl line 65, at end of
    line

    syntax error at /tmp/tmp9u1m0oid.pl line 65, at EOF

    Execution of /tmp/tmp9u1m0oid.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_hash = map { $_ => 1 } @vowels;\n\
    \    my %alphabet_hash = map { $_ => 1 } ('a'..'z');\n    my $alphabet_hash_size\
    \ = scalar keys %alphabet_hash;\n    my $vowel_hash_size = scalar keys %vowel_hash;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $e = 0;\n\
    \    my $i = 0;\n    my $o = 0;\n    my $u = 0;\n    my $message_length = length($message);\n\
    \    my $message_char = \"\";\n    my $message_char_upper = \"\";\n    my $message_char_lower\
    \ = \"\";\n    my $message_char_next = \"\";\n    my $message_char_next_upper\
    \ = \"\";\n    my $message_char_next_lower = \"\";\n    my $message_char_next_next\
    \ = \"\";\n    my $message_char_next_next_upper = \"\";\n    my $message_char_next_next_lower\
    \ = \"\";\n    my $message_char_next_next_next = \"\";\n    my $message_char_next_next_next_upper\
    \ = \"\";\n    my $message_char_next_next_next_lower = \"\";\n    my $message_char_next_next_next_next\
    \ = \"\";\n    my $message_char\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpsk8j81zs.pl line 57, at end
    of line

    syntax error at /tmp/tmpsk8j81zs.pl line 57, near "$message_char

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpsk8j81zs.pl line 84, at end of
    line

    syntax error at /tmp/tmpsk8j81zs.pl line 84, at EOF

    Execution of /tmp/tmpsk8j81zs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n \
    \   my $vowel_length = @vowels;\n    my $message_length = length($message);\n\
    \    my $message_char = \"\";\n    my $message_char_upper = \"\";\n    my $message_char_lower\
    \ = \"\";\n    my $message_char_index = 0;\n    my $message_char_upper_index =\
    \ 0;\n    my $message_char_lower_index = 0;\n    my $message_char_upper_index_plus_2\
    \ = 0;\n    my $message_char_lower_index_plus_2 = 0;\n    my $message_char_upper_index_plus_2_mod_26\
    \ = 0;\n    my $message_char_lower_index_plus_2_mod_26 = 0;\n    my $message_char_upper_index_plus_2_mod_26_plus_97\
    \ = 0;\n    my $message_char_lower_index_plus_2_mod_26_plus_97 = 0;\n    my $message_char_upper_index_plus_2_mod_26_plus_65\
    \ = 0;\n    my $message_char_lower_index_plus_2_mod_26_plus_65 = 0;\n    my $message_char_upper_index_plus_2_mod_26_plus_65_chr\
    \ = \"\";\n    my $message_char_lower_index_plus_2_mod_26_plus_97_chr = \"\";\n\
    \    my $message_char_upper_index_plus_2_mod_26_plus_97_chr = \"\";\n    my $message_char_lower_index_plus_2_mod_26_plus_65_chr\
    \ = \"\";\n    for (my $i = 0; $i < $message_length; $i++) {\n        $message_char\
    \ = substr($message, $i, 1);\n        $message_char_upper = uc($message_char\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpfsf1n5mm.pl line 40, at end
    of line

    syntax error at /tmp/tmpfsf1n5mm.pl line 40, near "$message_char

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpfsf1n5mm.pl line 67, at end of
    line

    syntax error at /tmp/tmpfsf1n5mm.pl line 67, at EOF

    Execution of /tmp/tmpfsf1n5mm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @letters = split(//, $message);\n    my $encoded\
    \ = \"\";\n    foreach my $letter (@letters) {\n        if ($letter =~ /[A-Z]/)\
    \ {\n            $encoded .= lc($letter);\n        } elsif ($letter =~ /[a-z]/)\
    \ {\n            $encoded .= uc($letter);\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_found = 0;\n    my $vowel_found_index = 0;\n    my $vowel_found_count\
    \ = 0;\n    my $vowel_found_count_index = 0;\n    my $vowel_found_count_index_count\
    \ = 0;\n    my $vowel_found_count_index_count_index = 0;\n    my $vowel_found_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index = 0;\n    my $vowel_found_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index =\
    \ 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    my $vowel_found_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    my $vowel_found_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpzu9tslam.pl line 35, at end
    of line

    syntax error at /tmp/tmpzu9tslam.pl line 35, near "$vowel_found_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpzu9tslam.pl line 62, at end of
    line

    syntax error at /tmp/tmpzu9tslam.pl line 62, at EOF

    Execution of /tmp/tmpzu9tslam.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @letters = split //, $message;\n    my @encoded_letters;\n\
    \    my $encoded_message;\n    my %vowels = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n   \
    \ );\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n\
    \            if ($letter =~ /[a-z]/) {\n                $letter = uc $letter;\n\
    \            }\n            else {\n                $letter = lc $letter;\n  \
    \          }\n        }\n        if ($letter =~ /[aeiou]/i) {\n            $letter\
    \ = $vowels{lc $letter};\n        }\n        push @encoded_letters, $letter;\n\
    \    }\n    $encoded_message = join '', @encoded_letters;\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    foreach my $letter (split //, $message) {\n     \
    \   if (lc($letter) ~~ @vowels) {\n            my $index = first_index { $_ eq\
    \ lc($letter) } @vowels;\n            $index = ($index + 2) % 5;\n           \
    \ $encoded .= uc($vowels[$index]);\n        }\n        else {\n            $encoded\
    \ .= uc($letter);\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmpodl5559h.pl line 16.

    Can''t call method "first_index" without a package or object reference at /tmp/tmpodl5559h.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_hash = map { $_ => 1 } @vowels;\n\
    \    my %encoded_vowels = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n\
    \        \"i\" => \"k\",\n        \"o\" => \"s\",\n        \"u\" => \"y\",\n \
    \   );\n    for my $char (split //, $message) {\n        if ($vowel_hash{lc($char)})\
    \ {\n            $encoded_message .= $encoded_vowels{lc($char)};\n        } elsif\
    \ ($char =~ /[a-z]/) {\n            $encoded_message .= chr(ord($char) + 2);\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n  \
    \  my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpy2__cbhr.pl line 72, at end
    of line

    syntax error at /tmp/tmpy2__cbhr.pl line 72, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpy2__cbhr.pl line 99, at end of
    line

    syntax error at /tmp/tmpy2__cbhr.pl line 99, at EOF

    Execution of /tmp/tmpy2__cbhr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @alphabet = ('a'..'z');\n\
    \    my %vowels = map { $_ => 1 } ('a', 'e', 'i', 'o', 'u');\n    my %encoding\
    \ = map { $alphabet[$_] => $alphabet[($_ + 2) % 26] } (0..25);\n    foreach my\
    \ $char (split //, $message) {\n        if ($vowels{lc($char)}) {\n          \
    \  $encoded .= uc($encoding{lc($char)});\n        } elsif ($char =~ /[a-z]/) {\n\
    \            $encoded .= uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n  \
    \          $encoded .= lc($char);\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %alphabet_index = map { $_ => 1 }\
    \ (0..25);\n    my @alphabet = (\"a\"..\"z\");\n    my $alphabet_length = scalar\
    \ @alphabet;\n    for my $letter (split //, $message) {\n        if ($alphabet{$letter})\
    \ {\n            my $index = 0;\n            for (my $i = 0; $i < $alphabet_length;\
    \ $i++) {\n                if ($alphabet[$i] eq $letter) {\n                 \
    \   $index = $i;\n                    last;\n                }\n            }\n\
    \            if ($vowels{$letter}) {\n                $index += 2;\n         \
    \       $index = $index % $alphabet_length;\n            }\n            $letter\
    \ = $alphabet[$index];\n        }\n        $encoded .= $letter;\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {};\n    my $i = 0;\n    foreach my $vowel (split(\"\"\
    , $vowels)) {\n        $vowels_hash->{$vowel} = substr($vowels, $i, 1);\n    \
    \    $i++;\n    }\n    foreach my $char (split(\"\", $message)) {\n        if\
    \ ($char =~ /[a-zA-Z]/) {\n            if ($char =~ /[a-z]/) {\n             \
    \   $char =~ tr/a-z/A-Z/;\n            }\n            if ($char =~ /[aeiou]/)\
    \ {\n                $char = $vowels_hash->{$char};\n            }\n        }\n\
    \        $encoded_message .= $char;\n    }\n    return $encoded_message;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjln\";\n    my $vowels_encoded_index = 0;\n    for\
    \ (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if (index($vowels, $char) >= 0) {\n            $encoded .=\
    \ substr($vowels_encoded, $vowels_encoded_index, 1);\n            $vowels_encoded_index++;\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjln\";\n    my $vowels_hash = {};\n    my $i = 0;\n\
    \    foreach my $vowel (split //, $vowels) {\n        $vowels_hash->{$vowel} =\
    \ substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split //, $message) {\n        if ($char =~ /[A-Z]/) {\n            $encoded\
    \ .= lc($char);\n        } elsif ($char =~ /[a-z]/) {\n            $encoded .=\
    \ uc($char);\n        } else {\n            $encoded .= $char;\n        }\n  \
    \  }\n    foreach my $char (split //, $encoded) {\n        if (exists $vowels_hash->{$char})\
    \ {\n            $encoded =~ s/$char/$vowels_hash->{$char}/g;\n        }\n   \
    \ }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n\
    \        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n \
    \   };\n    foreach my $char (split(//, $message)) {\n        if ($vowels =~ /$char/)\
    \ {\n            $encoded_message .= $vowels_hash->{$char};\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n        } else {\n\
    \            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n \
    \       \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n  \
    \  };\n    for my $char (split //, $message) {\n        if ($vowels =~ /$char/)\
    \ {\n            $encoded .= $vowels_hash->{$char};\n        } else {\n      \
    \      $encoded .= uc $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_length = @vowels;\n    my $message_length = length($message);\n\
    \    my $message_index = 0;\n    my $message_char = \"\";\n    my $message_char_upper\
    \ = \"\";\n    my $message_char_lower = \"\";\n    my $message_char_is_vowel =\
    \ 0;\n    my $message_char_is_upper = 0;\n    my $message_char_is_lower = 0;\n\
    \    my $message_char_is_letter = 0;\n    my $message_char_is_vowel_upper = 0;\n\
    \    my $message_char_is_vowel_lower = 0;\n    my $message_char_is_vowel_upper_index\
    \ = 0;\n    my $message_char_is_vowel_lower_index = 0;\n    my $message_char_is_vowel_upper_next\
    \ = \"\";\n    my $message_char_is_vowel_lower_next = \"\";\n    my $message_char_is_vowel_upper_next_index\
    \ = 0;\n    my $message_char_is_vowel_lower_next_index = 0;\n    my $message_char_is_vowel_upper_next_next\
    \ = \"\";\n    my $message_char_is_vowel_lower_next_next = \"\";\n    my $message_char_is_vowel_upper_next_next_index\
    \ = 0;\n    my $message_char_is_vowel_lower_next_next_index = 0;\n    my $message_char_is_vowel_upper_next_next_next\
    \ = \"\";\n    my $message_char_is_vowel_lower_next_next_next = \"\";\n    my\
    \ $message_char_is_vowel_upper_next_next_next_index = 0;\n\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_uctw0al.pl line 70, at
    end of line

    syntax error at /tmp/tmp_uctw0al.pl line 70, at EOF

    Execution of /tmp/tmp_uctw0al.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"s\"\
    ,\n        \"u\" => \"y\",\n    );\n    my $letter;\n    foreach $letter (split\
    \ //, $message) {\n        if (grep {$_ eq $letter} @vowels) {\n            $encoded_message\
    \ .= $vowel_map{$letter};\n        } else {\n            $encoded_message .= $letter;\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    foreach my $char (split\
    \ //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~\
    \ /[A-Z]/) {\n                $encoded .= lc($char);\n            } else {\n \
    \               $encoded .= uc($char);\n            }\n            if ($vowels\
    \ =~ /$char/i) {\n                my $index = index($alphabet, lc($char));\n \
    \               $encoded .= substr($alphabet, $index + 2, 1);\n            }\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index\
    \ = 0;\n    my $vowel_count = scalar @vowels;\n    my $vowel_offset = 2;\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl2i_vbwe.pl line 46, at
    end of line

    syntax error at /tmp/tmpl2i_vbwe.pl line 46, at EOF

    Execution of /tmp/tmpl2i_vbwe.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length =\
    \ length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if ($char_index != -1) {\n            my $char_is_vowel = index($vowels,\
    \ $char) != -1;\n            my $new_char_index = ($char_index + 2) % $alphabet_length;\n\
    \            my $new_char = substr($alphabet, $new_char_index, 1);\n         \
    \   if ($char_is_vowel) {\n                $new_char = uc($new_char);\n      \
    \      } else {\n                $new_char = lc($new_char);\n            }\n \
    \           $encoded .= $new_char;\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_upper =\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $alphabet_upper_encoded = \"CDEFGHIJKLMNOPQRSTUVWXYZAB\"\
    ;\n    my $alphabet_encoded = \"cdefghijklmnopqrstuvwxyzab\";\n    my $vowels_encoded\
    \ = \"cgikmoqsuwy\";\n    for (my $i = 0; $i < length($message); $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        if (index($vowels, $char) !=\
    \ -1) {\n            $encoded .= substr($vowels_encoded, index($vowels, $char),\
    \ 1);\n        } elsif (index($alphabet, $char) != -1) {\n            $encoded\
    \ .= substr($alphabet_encoded, index($alphabet, $char), 1);\n        } elsif (index($alphabet_upper,\
    \ $char) != -1) {\n            $encoded .= substr($alphabet_upper_encoded, index($alphabet_upper,\
    \ $char), 1);\n        } else {\n            $encoded .= $char;\n        }\n \
    \   }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_upper =\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $alphabet_lower = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $vowels_upper = \"AEIOU\";\n    my $vowels_lower = \"aeiou\";\n    my\
    \ $vowels_upper_encoded = \"CGFKP\";\n    my $vowels_lower_encoded = \"cgfkp\"\
    ;\n    my $alphabet_upper_encoded = \"BCDEFGHIJKLMNOPQRSTUVWXYZA\";\n    my $alphabet_lower_encoded\
    \ = \"bcdefghijklmnopqrstuvwxyza\";\n    my $message_upper = uc($message);\n \
    \   my $message_lower = lc($message);\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        if (index($vowels_upper, substr($message_upper, $i, 1)) !=\
    \ -1) {\n            $encoded .= substr($vowels_upper_encoded, index($vowels_upper,\
    \ substr($message_upper, $i, 1)), 1);\n        } elsif (index($vowels_lower, substr($message_lower,\
    \ $i, 1)) != -1) {\n            $encoded .= substr($vowels_lower_encoded, index($vowels_lower,\
    \ substr($message_lower, $i, 1)), 1);\n        } elsif (index($alphabet_upper,\
    \ substr($message_upper, $i, 1)) != -1) {\n            $encoded .= substr($alphabet_upper_encoded,\
    \ index($alphabet_upper, substr($message_upper, $i, 1)), 1);\n        } elsif\
    \ (index($alphabet_lower, substr($message_lower, $i, 1)) != -1) {\n          \
    \  $encoded .= substr($\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpy8ou7p2k.pl line 35, near "Test::Deep;"

    Missing right curly or square bracket at /tmp/tmpy8ou7p2k.pl line 62, at end of
    line

    syntax error at /tmp/tmpy8ou7p2k.pl line 62, at EOF

    Execution of /tmp/tmpy8ou7p2k.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"y\",\n    );\n    for my $letter (split(//, $message)) {\n\
    \        if (grep {$_ eq $letter} @vowels) {\n            $encoded_message .=\
    \ $vowel_map{$letter};\n        } else {\n            $encoded_message .= $letter;\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n\
    \    my $vowels_hash = {\n        'a' => 'c',\n        'e' => 'g',\n        'i'\
    \ => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    };\n    my $letters =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    my $letters_hash = {};\n    my $letters_array\
    \ = split(//, $letters);\n    for (my $i = 0; $i < scalar(@$letters_array); $i++)\
    \ {\n        my $letter = $letters_array->[$i];\n        my $next_letter = $letters_array->[($i\
    \ + 1) % scalar(@$letters_array)];\n        $letters_hash->{$letter} = $next_letter;\n\
    \    }\n    my $message_array = split(//, $message);\n    for (my $i = 0; $i <\
    \ scalar(@$message_array); $i++) {\n        my $letter = $message_array->[$i];\n\
    \        if ($vowels =~ /$letter/) {\n            $encoded_message .= $vowels_hash->{$letter};\n\
    \        } elsif ($letters =~ /$letter/) {\n            $encoded_message .= $letters_hash->{$letter};\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[A-Z]/) {\n    \
    \        $encoded .= lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n  \
    \          $encoded .= uc($letter);\n        } else {\n            $encoded .=\
    \ $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n      \
    \  \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n\
    \    for my $letter (@message) {\n        if ($letter =~ /[a-z]/) {\n        \
    \    push @encoded, uc $letter;\n        } elsif ($letter =~ /[A-Z]/) {\n    \
    \        push @encoded, lc $letter;\n        } else {\n            push @encoded,\
    \ $letter;\n        }\n    }\n    for my $i (0..$#encoded) {\n        if (exists\
    \ $vowels{lc $encoded[$i]}) {\n            $encoded[$i] = $vowels{lc $encoded[$i]};\n\
    \        }\n    }\n    return join \"\", @encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    foreach my $char (split //, $message) {\n        if (lc($char)\
    \ eq $char) {\n            $encoded .= uc($char);\n        } else {\n        \
    \    $encoded .= lc($char);\n        }\n        if (grep {$_ eq lc($char)} @vowels)\
    \ {\n            $encoded =~ s/$char/$vowels[(array_index($char, @vowels) + 2)\
    \ % 5]/e;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{lc($char)}) {\n\
    \            $encoded .= $alphabet{lc($char)};\n        } else {\n           \
    \ $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @chars = split(//, $message);\n    my @encoded;\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n         \
    \   my $encoded_char = $char;\n            if ($char =~ /[a-z]/) {\n         \
    \       $encoded_char =~ tr/a-z/b-za/;\n            } else {\n               \
    \ $encoded_char =~ tr/A-Z/B-ZA/;\n            }\n            if ($encoded_char\
    \ =~ /[aeiou]/i) {\n                $encoded_char =~ tr/aeiou/eioua/;\n      \
    \      }\n            push(@encoded, $encoded_char);\n        } else {\n     \
    \       push(@encoded, $char);\n        }\n    }\n    return join('', @encoded);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n\
    \        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n \
    \   };\n    for my $char (split //, $message) {\n        if ($vowels =~ /$char/)\
    \ {\n            $encoded_message .= $vowels_hash->{$char};\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n        } else {\n\
    \            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_upper =\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $alphabet_lower = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $vowels_upper = \"AEIOU\";\n    my $vowels_lower = \"aeiou\";\n    my\
    \ $vowels_upper_encoded = \"CGFKP\";\n    my $vowels_lower_encoded = \"cgfkp\"\
    ;\n    my $alphabet_upper_encoded = \"BCDEFGHIJKLMNOPQRSTUVWXYZA\";\n    my $alphabet_lower_encoded\
    \ = \"bcdefghijklmnopqrstuvwxyza\";\n    my $message_encoded = \"\";\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my\
    \ $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n  \
    \  my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1b2iq79b.pl line 60, at end
    of line

    syntax error at /tmp/tmp1b2iq79b.pl line 60, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1b2iq79b.pl line 87, at end of
    line

    syntax error at /tmp/tmp1b2iq79b.pl line 87, at EOF

    Execution of /tmp/tmp1b2iq79b.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n   \
    \         $encoded .= encode_letter($letter);\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::encode_letter called at /tmp/tmpjyfj6kbr.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_2 = \"cgjkqsxyz\";\n    my $vowels_3 = \"bdfhjlnprtvxz\";\n  \
    \  my $vowels_4 = \"aeiou\";\n    my $vowels_5 = \"aeiou\";\n    my $vowels_6\
    \ = \"aeiou\";\n    my $vowels_7 = \"aeiou\";\n    my $vowels_8 = \"aeiou\";\n\
    \    my $vowels_9 = \"aeiou\";\n    my $vowels_10 = \"aeiou\";\n    my $vowels_11\
    \ = \"aeiou\";\n    my $vowels_12 = \"aeiou\";\n    my $vowels_13 = \"aeiou\"\
    ;\n    my $vowels_14 = \"aeiou\";\n    my $vowels_15 = \"aeiou\";\n    my $vowels_16\
    \ = \"aeiou\";\n    my $vowels_17 = \"aeiou\";\n    my $vowels_18 = \"aeiou\"\
    ;\n    my $vowels_19 = \"aeiou\";\n    my $vowels_20 = \"aeiou\";\n    my $vowels_21\
    \ = \"aeiou\";\n    my $vowels_22 = \"aeiou\";\n    my $vowels_23 = \"aeiou\"\
    ;\n    my $vowels_24 = \"aeiou\";\n    my $vowels_25 = \"aeiou\";\n    my $vowels_26\
    \ = \"aeiou\";\n    my $vowels_27 = \"aeiou\";\n    my $vowels_28 = \"aeiou\"\
    ;\n    my $vowels_29 = \"aeiou\";\n    my $vowels_30 = \"aeiou\";\n    my $vowels_31\
    \ = \"aeiou\";\n    my $vowels_32 = \"aeiou\";\n    my $vowels_33 = \"aeiou\"\
    ;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpilmps4y5.pl line 74, at
    end of line

    syntax error at /tmp/tmpilmps4y5.pl line 74, at EOF

    Execution of /tmp/tmpilmps4y5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my $vowel_index = 0;\n    my $vowel_found = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_position = 0;\n    my $vowel_position_found = 0;\n    my $vowel_position_count\
    \ = 0;\n    my $vowel_position_index = 0;\n    my $vowel_position_index_found\
    \ = 0;\n    my $vowel_position_index_count = 0;\n    my $vowel_position_index_index\
    \ = 0;\n    my $vowel_position_index_index_found = 0;\n    my $vowel_position_index_index_count\
    \ = 0;\n    my $vowel_position_index_index_index = 0;\n    my $vowel_position_index_index_index_found\
    \ = 0;\n    my $vowel_position_index_index_index_count = 0;\n    my $vowel_position_index_index_index_index\
    \ = 0;\n    my $vowel_position_index_index_index_index_found = 0;\n    my $vowel_position_index_index_index_index_count\
    \ = 0;\n    my $vowel_position_index_index_index_index_index = 0;\n    my $vowel_position_index_index_index_index_index_found\
    \ = 0;\n    my $vowel_position_index_index_index_index_index_count = 0;\n    my\
    \ $vowel_position_index_index_index_index_index_index = 0;\n    my $vowel_position_index_index_index_index_index_index_found\
    \ = 0;\n    my $vowel_position_index_index_index_index_index_index_count = 0;\n\
    \    my $vowel_position_index_index_index_index_index_index_index = 0;\n    my\
    \ $vowel_position_index_index_index_\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmposvmngvi.pl line 41, at end
    of line

    syntax error at /tmp/tmposvmngvi.pl line 41, near "$vowel_position_index_index_index_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmposvmngvi.pl line 68, at end of
    line

    syntax error at /tmp/tmposvmngvi.pl line 68, at EOF

    Execution of /tmp/tmposvmngvi.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_found = 0;\n    my $vowel_position = 0;\n    my $vowel_length =\
    \ 0;\n    my $vowel_string = \"\";\n    my $vowel_string_length = 0;\n    my $vowel_string_index\
    \ = 0;\n    my $vowel_string_position = 0;\n    my $vowel_string_found = 0;\n\
    \    my $vowel_string_count = 0;\n    my $vowel_string_next = 0;\n    my $vowel_string_next_index\
    \ = 0;\n    my $vowel_string_next_position = 0;\n    my $vowel_string_next_found\
    \ = 0;\n    my $vowel_string_next_count = 0;\n    my $vowel_string_next_length\
    \ = 0;\n    my $vowel_string_next_string = \"\";\n    my $vowel_string_next_string_length\
    \ = 0;\n    my $vowel_string_next_string_index = 0;\n    my $vowel_string_next_string_position\
    \ = 0;\n    my $vowel_string_next_string_found = 0;\n    my $vowel_string_next_string_count\
    \ = 0;\n    my $vowel_string_next_string_next = 0;\n    my $vowel_string_next_string_next_index\
    \ = 0;\n    my $vowel_string_next_string_next_position = 0;\n    my $vowel_string_next_string_next_found\
    \ = 0;\n    my $vowel_string_next_string_next_count = 0;\n    my $vowel_string_next_string_next_length\
    \ = 0;\n    my $vowel_string_next_string_next_string = \"\";\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp098x4t7i.pl line 72, at
    end of line

    syntax error at /tmp/tmp098x4t7i.pl line 72, at EOF

    Execution of /tmp/tmp098x4t7i.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $result = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my $index = 0;\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my\
    \ $vowel_flag = 0;\n    my $letter = \"\";\n    my $vowel = \"\";\n    my $new_letter\
    \ = \"\";\n    my $new_vowel = \"\";\n    my $new_vowel_index = 0;\n    my $new_vowel_count\
    \ = 0;\n    my $new_vowel_flag = 0;\n    my $new_index = 0;\n    my $new_letter_index\
    \ = 0;\n    my $new_letter_count = 0;\n    my $new_letter_flag = 0;\n    my $new_letter\
    \ = \"\";\n    my $new_letter_index = 0;\n    my $new_letter_count = 0;\n    my\
    \ $new_letter_flag = 0;\n    my $new_letter = \"\";\n    my $new_letter_index\
    \ = 0;\n    my $new_letter_count = 0;\n    my $new_letter_flag = 0;\n    my $new_letter\
    \ = \"\";\n    my $new_letter_index = 0;\n    my $new_letter_count = 0;\n    my\
    \ $new_letter_flag = 0;\n    my $new_letter = \"\";\n    my $new_letter_index\
    \ = 0;\n    my $new_letter_count = 0;\n    my $new_letter_flag = 0;\n    my $new_letter\
    \ = \"\";\n    my $new_letter_index = 0;\n    my $new_letter_count = 0;\n    my\
    \ $new_letter_flag = 0;\n    my $new_letter = \"\";\n    my $new_letter_index\
    \ = 0;\n    my $new_letter_count = 0;\n    my $new_letter_flag = 0;\n   \nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_wnmasiq.pl line 83, at
    end of line

    syntax error at /tmp/tmp_wnmasiq.pl line 83, at EOF

    Execution of /tmp/tmp_wnmasiq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n   \
    \         if ($letter =~ /[a-z]/) {\n                $letter =~ tr/a-z/A-Z/;\n\
    \            }\n            else {\n                $letter =~ tr/A-Z/a-z/;\n\
    \            }\n            if ($letter =~ /[aeiou]/i) {\n                $letter\
    \ =~ tr/aeiou/EIOUA/;\n            }\n        }\n        $encoded .= $letter;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index = 0;\n  \
    \  my $vowels_index = 0;\n    my $vowel_found = 0;\n    my $vowel_encoded_found\
    \ = 0;\n    my $vowel_encoded_index = 0;\n    my $vowel_index = 0;\n    my $char\
    \ = \"\";\n    my $char_encoded = \"\";\n    my $char_encoded_index = 0;\n   \
    \ my $char_index = 0;\n    my $char_found = 0;\n    my $char_encoded_found = 0;\n\
    \    my $message_length = length($message);\n    my $vowels_length = length($vowels);\n\
    \    my $vowels_encoded_length = length($vowels_encoded);\n    for (my $i = 0;\
    \ $i < $message_length; $i++) {\n        $char = substr($message, $i, 1);\n  \
    \      $char_index = index($char, $vowels);\n        $char_encoded_index = index($char,\
    \ $vowels_encoded);\n        if ($char_index != -1) {\n            $char_encoded\
    \ = substr($vowels_encoded, $char_index, 1);\n            $encoded_message .=\
    \ $char_encoded;\n        } elsif ($char_encoded_index != -1) {\n            $char_encoded\
    \ = substr($vowels, $char_encoded_index, 1);\n            $encoded_message .=\
    \ $char_encoded;\n        } else {\n            $encoded_message .= $char;\n \
    \       }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n\
    \        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n \
    \   };\n    foreach my $char (split(//, $message)) {\n        if ($vowels =~ /$char/)\
    \ {\n            $encoded_message .= $vowels_hash->{$char};\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n        } else {\n\
    \            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_hash = map { $_ => 1 } @vowels;\n\
    \    my %letter_hash = map { $_ => 1 } (\"a\"..\"z\");\n    my %letter_hash_upper\
    \ = map { $_ => 1 } (\"A\"..\"Z\");\n    my %letter_hash_all = (%letter_hash,\
    \ %letter_hash_upper);\n    my %letter_hash_upper_all = map { $_ => 1 } (\"B\"\
    ..\"Z\", \"A\");\n    my %letter_hash_lower_all = map { $_ => 1 } (\"b\"..\"z\"\
    , \"a\");\n    my %letter_hash_all_upper = map { $_ => 1 } (\"B\"..\"Z\", \"A\"\
    );\n    my %letter_hash_all_lower = map { $_ => 1 } (\"b\"..\"z\", \"a\");\n \
    \   my $letter_hash_all_upper_ref = \\%letter_hash_all_upper;\n    my $letter_hash_all_lower_ref\
    \ = \\%letter_hash_all_lower;\n    my $letter_hash_upper_all_ref = \\%letter_hash_upper_all;\n\
    \    my $letter_hash_lower_all_ref = \\%letter_hash_lower_all;\n    my $letter_hash_all_ref\
    \ = \\%letter_hash_all;\n    my $letter_hash_ref = \\%letter_hash;\n    my $letter_hash_upper_ref\
    \ = \\%letter_hash_upper;\n    my $vowel_hash_ref = \\%vowel_hash;\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $letter = substr($message, $i, 1);\n        if (exists $letter_hash_all_ref->{$letter})\
    \ {\n            if (exists $letter_hash_ref->{$letter}) {\n                $encoded_message\
    \ .= $letter_hash_all_upper_ref->\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpohhtstc7.pl line 37,\
    \ near \"->\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpohhtstc7.pl line 37, near \"->\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpohhtstc7.pl line 64, at end of line\nsyntax\
    \ error at /tmp/tmpohhtstc7.pl line 64, at EOF\nExecution of /tmp/tmpohhtstc7.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n\
    \        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n \
    \   };\n    for my $c (split //, $message) {\n        if ($vowels =~ /$c/) {\n\
    \            $encoded_message .= $vowels_hash->{$c};\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $encoded_message .= lc($c);\n        } elsif ($c =~ /[a-z]/)\
    \ {\n            $encoded_message .= uc($c);\n        } else {\n            $encoded_message\
    \ .= $c;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split('', $message);\n    my @encoded_message;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 's',\n    );\n    foreach my $letter\
    \ (@message) {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~\
    \ /[a-z]/) {\n                $letter = uc($letter);\n            } else {\n \
    \               $letter = lc($letter);\n            }\n            if ($letter\
    \ =~ /[aeiou]/) {\n                $letter = $vowels{$letter};\n            }\n\
    \        }\n        push(@encoded_message, $letter);\n    }\n    return join('',\
    \ @encoded_message);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            } else {\n                $char = lc($char);\n            }\n   \
    \         my $index = index($vowels, lc($char));\n            if ($index > -1)\
    \ {\n                $char = substr($vowels_encoded, $index, 1);\n           \
    \ }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ (a..z);\n    my %alphabet_upper = map { $_ => 1 } (A..Z);\n    my %alphabet_lower\
    \ = map { $_ => 1 } (a..z);\n    my %alphabet_lower_vowels = map { $_ => 1 } (a..z);\n\
    \    my %alphabet_upper_vowels = map { $_ => 1 } (A..Z);\n    my %alphabet_lower_consonants\
    \ = map { $_ => 1 } (a..z);\n    my %alphabet_upper_consonants = map { $_ => 1\
    \ } (A..Z);\n    my %alphabet_lower_vowels_2 = map { $_ => 1 } (a..z);\n    my\
    \ %alphabet_upper_vowels_2 = map { $_ => 1 } (A..Z);\n    my %alphabet_lower_consonants_2\
    \ = map { $_ => 1 } (a..z);\n    my %alphabet_upper_consonants_2 = map { $_ =>\
    \ 1 } (A..Z);\n    my %alphabet_lower_vowels_3 = map { $_ => 1 } (a..z);\n   \
    \ my %alphabet_upper_vowels_3 = map { $_ => 1 } (A..Z);\n    my %alphabet_lower_consonants_3\
    \ = map { $_ => 1 } (a..z);\n    my %alphabet_upper_consonants_3 = map { $_ =>\
    \ 1 } (A..Z);\n    my %alphabet_lower_vowels_4 = map { $_ => 1 } (a..z);\n   \
    \ my %alphabet_upper_vowels_4 = map { $_ => 1 } (A..Z);\n    my %alphabet_lower_consonants_4\
    \ = map { $_ => 1 } (a..z);\n    my %alphabet_upper_consonants_4 = map { $_ =>\
    \ 1 } (A..Z);\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqjirv57p.pl line 63, at
    end of line

    syntax error at /tmp/tmpqjirv57p.pl line 63, at EOF

    Execution of /tmp/tmpqjirv57p.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{$char}) {\n    \
    \        $encoded .= $alphabet{$char};\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @message_array\
    \ = split //, $message;\n    foreach my $letter (@message_array) {\n        if\
    \ ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/b-za/;\n        } elsif\
    \ ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/B-ZA/;\n        }\n  \
    \      if ($letter =~ /[aeiou]/) {\n            $letter =~ tr/aeiou/cegik/;\n\
    \        } elsif ($letter =~ /[AEIOU]/) {\n            $letter =~ tr/AEIOU/CEGIK/;\n\
    \        }\n        $encoded_message .= $letter;\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %alphabet_upper = map { $_ => 1 }\
    \ (\"A\"..\"Z\");\n    my $i = 0;\n    while ($i < length($message)) {\n     \
    \   my $char = substr($message, $i, 1);\n        if (exists $alphabet{$char})\
    \ {\n            $char = chr(ord($char) + 2);\n            if (exists $alphabet{$char})\
    \ {\n                $encoded .= $char;\n            } else {\n              \
    \  $encoded .= chr(ord($char) - 26);\n            }\n        } elsif (exists $alphabet_upper{$char})\
    \ {\n            $char = chr(ord($char) + 2);\n            if (exists $alphabet_upper{$char})\
    \ {\n                $encoded .= $char;\n            } else {\n              \
    \  $encoded .= chr(ord($char) - 26);\n            }\n        } else {\n      \
    \      $encoded .= $char;\n        }\n        $i++;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n   \
    \         $encoded .= encode_letter($letter);\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::encode_letter called at /tmp/tmpjyfj6kbr.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\"\
    ,\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n\
    \        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n \
    \       \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n  \
    \      \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n   \
    \     \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n    \
    \    \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n     \
    \   \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n      \
    \  \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    my @message = split(//,\
    \ $message);\n    foreach my $letter (@message) {\n        if ($vowels{$letter})\
    \ {\n            $encoded .= $alphabet{$letter};\n        } else {\n         \
    \   $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my @result;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter\
    \ (@message) {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~\
    \ /[a-z]/) {\n                $letter = uc($letter);\n            } else {\n \
    \               $letter = lc($letter);\n            }\n        }\n        if ($letter\
    \ =~ /[aeiou]/i) {\n            $letter = $vowels{lc($letter)};\n        }\n \
    \       push(@result, $letter);\n    }\n    return join('', @result);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n\
    \    my $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    my $alphabet_length = length($alphabet);\n\
    \    my $vowels_length = length($vowels);\n    my $vowel_index = 0;\n    my $alphabet_index\
    \ = 0;\n    my $vowel_position = 0;\n    my $alphabet_position = 0;\n    my $character\
    \ = '';\n    my $character_position = 0;\n    my $character_index = 0;\n    my\
    \ $encoded_character = '';\n    my $message_length = length($message);\n    for\
    \ (my $i = 0; $i < $message_length; $i++) {\n        $character = substr($message,\
    \ $i, 1);\n        $character_position = index($alphabet, $character);\n     \
    \   if ($character_position == -1) {\n            $encoded_character = $character;\n\
    \        } else {\n            $character_index = $character_position % $alphabet_length;\n\
    \            $vowel_position = index($vowels, $character);\n            if ($vowel_position\
    \ == -1) {\n                $encoded_character = substr($alphabet, $character_index,\
    \ 1);\n            } else {\n                $vowel_index = $vowel_position %\
    \ $vowels_length;\n                $alphabet_index = ($vowel_index + 2) % $alphabet_length;\n\
    \                $encoded_character = substr($alphabet, $alphabet_index, 1);\n\
    \            }\n        }\n        $encoded_message .= $encoded_character;\n \
    \   }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_found = 0;\n    my $vowel_char = \"\";\n    my $vowel_char_index\
    \ = 0;\n    my $vowel_char_count = 0;\n    my $vowel_char_found = 0;\n    my $vowel_char_next\
    \ = \"\";\n    my $vowel_char_next_index = 0;\n    my $vowel_char_next_count =\
    \ 0;\n    my $vowel_char_next_found = 0;\n    my $vowel_char_next_next = \"\"\
    ;\n    my $vowel_char_next_next_index = 0;\n    my $vowel_char_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_found = 0;\n    my $vowel_char_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_index = 0;\n    my $vowel_char_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_found = 0;\n    my $vowel_char_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_index = 0;\n    my $vowel_char_next_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_next_found = 0;\n    my $vowel_char_next_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_index = 0;\n    my $vowel_char_next_next_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_next_next_found = 0;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzwiiw0s9.pl line 69, at
    end of line

    syntax error at /tmp/tmpzwiiw0s9.pl line 69, at EOF

    Execution of /tmp/tmpzwiiw0s9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        my $index = index($vowels,\
    \ $char);\n        if ($index != -1) {\n            $char = substr($vowels_encoded,\
    \ $index, 1);\n        }\n        if ($char =~ /[a-z]/) {\n            $char =~\
    \ tr/a-z/A-Z/;\n        } else {\n            $char =~ tr/A-Z/a-z/;\n        }\n\
    \        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my\
    \ $vowels_hash = {};\n    my $i = 0;\n    foreach my $vowel (split(//, $vowels))\
    \ {\n        $vowels_hash->{$vowel} = 1;\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split(//, $message)) {\n        if ($vowels_hash->{$char}) {\n            $encoded\
    \ .= $vowels_encoded_hash->{$char};\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @chars = split(//, $message);\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n         \
    \   $encoded .= encode_char($char);\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::encode_char called at /tmp/tmpgt11kz75.pl line
    17.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my %vowel_hash = ();\n\
    \    my %alphabet_hash = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n =\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpwzoe1akp.pl line 74, at end
    of line

    syntax error at /tmp/tmpwzoe1akp.pl line 74, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpwzoe1akp.pl line 101, at end
    of line

    syntax error at /tmp/tmpwzoe1akp.pl line 101, at EOF

    Execution of /tmp/tmpwzoe1akp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded_message;\n    foreach my $letter (@message)\
    \ {\n        if (lc($letter) ~~ @vowels) {\n            my $index = first_index\
    \ { $_ eq lc($letter) } @vowels;\n            push @encoded_message, $vowels[($index\
    \ + 2) % 5];\n        } else {\n            push @encoded_message, $letter;\n\
    \        }\n    }\n    return join('', @encoded_message);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmpwf9dx0p_.pl line 17.

    Can''t call method "first_index" without a package or object reference at /tmp/tmpwf9dx0p_.pl
    line 18.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter\
    \ (@message) {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~\
    \ /[aeiou]/) {\n                $letter = $vowels{$letter};\n            }\n \
    \           $letter =~ tr/a-z/A-Z/;\n        }\n        push @encoded, $letter;\n\
    \    }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map {$_ => 1} @vowels;\n    my %encoded_vowels = (\n       \
    \ 'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n      \
    \  if ($vowels{lc($char)}) {\n            $encoded .= $encoded_vowels{lc($char)};\n\
    \        } else {\n            $encoded .= uc($char);\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n        a\
    \ => 'c',\n        e => 'g',\n        i => 'k',\n        o => 's',\n        u\
    \ => 'y',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc\
    \ $char}) {\n            $encoded .= $vowels_map{lc $char};\n        }\n     \
    \   elsif ($char =~ /[a-z]/) {\n            $encoded .= uc $char;\n        }\n\
    \        elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc $char;\n     \
    \   }\n        else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjln\";\n    my $vowels_encoded_index = 0;\n    my\
    \ $vowels_index = 0;\n    my $char;\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        $char = substr($message, $i, 1);\n        if ($char =~ /[A-Z]/)\
    \ {\n            $char = lc($char);\n        } elsif ($char =~ /[a-z]/) {\n  \
    \          $char = uc($char);\n        }\n        if ($char =~ /[aeiou]/) {\n\
    \            $vowels_index = index($vowels, $char);\n            $vowels_encoded_index\
    \ = ($vowels_index + 2) % 5;\n            $char = substr($vowels_encoded, $vowels_encoded_index,\
    \ 1);\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_2 = \"cgjkqsxyz\";\n    my $vowels_3 = \"bdfhmnprtvw\";\n    my\
    \ $vowels_4 = \"l\";\n    my $vowels_5 = \"\";\n    my $vowels_6 = \"\";\n   \
    \ my $vowels_7 = \"\";\n    my $vowels_8 = \"\";\n    my $vowels_9 = \"\";\n \
    \   my $vowels_10 = \"\";\n    my $vowels_11 = \"\";\n    my $vowels_12 = \"\"\
    ;\n    my $vowels_13 = \"\";\n    my $vowels_14 = \"\";\n    my $vowels_15 = \"\
    \";\n    my $vowels_16 = \"\";\n    my $vowels_17 = \"\";\n    my $vowels_18 =\
    \ \"\";\n    my $vowels_19 = \"\";\n    my $vowels_20 = \"\";\n    my $vowels_21\
    \ = \"\";\n    my $vowels_22 = \"\";\n    my $vowels_23 = \"\";\n    my $vowels_24\
    \ = \"\";\n    my $vowels_25 = \"\";\n    my $vowels_26 = \"\";\n    my $vowels_27\
    \ = \"\";\n    my $vowels_28 = \"\";\n    my $vowels_29 = \"\";\n    my $vowels_30\
    \ = \"\";\n    my $vowels_31 = \"\";\n    my $vowels_32 = \"\";\n    my $vowels_33\
    \ = \"\";\n    my $vowels_34 = \"\";\n    my $vowels_35 = \"\";\n    my $vowels_36\
    \ = \"\";\n    my $vowels_37 = \"\";\n    my $vowels_38 = \"\";\n    my $vowels_39\
    \ = \"\";\n    my $vowels_40 = \"\";\n    my $vowels\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpcefs3u70.pl line 55, at end
    of line

    syntax error at /tmp/tmpcefs3u70.pl line 55, near "$vowels

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpcefs3u70.pl line 82, at end of
    line

    syntax error at /tmp/tmpcefs3u70.pl line 82, at EOF

    Execution of /tmp/tmpcefs3u70.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_map = \"cdfghjklmnpqrstvwxyz\";\n    my $vowels_map_2 = \"defghjklmnpqrstvwxyzab\"\
    ;\n    my $vowels_map_3 = \"efghjklmnpqrstvwxyzabc\";\n    my $vowels_map_4 =\
    \ \"fghjklmnpqrstvwxyzabcd\";\n    my $vowels_map_5 = \"ghjklmnpqrstvwxyzabcde\"\
    ;\n    my $vowels_map_6 = \"hjklmnpqrstvwxyzabcdef\";\n    my $vowels_map_7 =\
    \ \"jklmnpqrstvwxyzabcdefg\";\n    my $vowels_map_8 = \"klmnpqrstvwxyzabcdefgh\"\
    ;\n    my $vowels_map_9 = \"lmnpqrstvwxyzabcdefghj\";\n    my $vowels_map_10 =\
    \ \"mnpqrstvwxyzabcdefghjk\";\n    my $vowels_map_11 = \"npqrstvwxyzabcdefghjkl\"\
    ;\n    my $vowels_map_12 = \"pqrstvwxyzabcdefghjklm\";\n    my $vowels_map_13\
    \ = \"qrstvwxyzabcdefghjklmn\";\n    my $vowels_map_14 = \"rstvwxyzabcdefghjklmnp\"\
    ;\n    my $vowels_map_15 = \"stvwxyzabcdefghjklmnpq\";\n    my $vowels_map_16\
    \ = \"tvwxyzabcdefghjklmnpqr\";\n    my $vowels_map_17 = \"vwxyzabcdefghjklmnpqrs\"\
    ;\n    my $vowels_map_18 = \"wxyzabcdefghjklmn\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpbx_2syth.pl line 38,\
    \ near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line\
    \ \"\" string starting on line 32)\nString found where operator expected at /tmp/tmpbx_2syth.pl\
    \ line 38, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmpbx_2syth.pl\
    \ line 38, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found\
    \ where operator expected at /tmp/tmpbx_2syth.pl line 38, near \"print \"\"\n\t\
    (Missing semicolon on previous line?)\nBareword found where operator expected\
    \ at /tmp/tmpbx_2syth.pl line 39, near \"print \"ok\"\n  (Might be a runaway multi-line\
    \ \"\" string starting on line 38)\n\t(Do you need to predeclare print?)\nString\
    \ found where operator expected at /tmp/tmpbx_2syth.pl line 39, near \"Mudasir\"\
    ),\"\"\nBareword found where operator expected at /tmp/tmpbx_2syth.pl line 39,\
    \ near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where\
    \ operator expected at /tmp/tmpbx_2syth.pl line 39, near \"print \"\"\n\t(Missing\
    \ semicolon on previous line?)\nBareword found where operator expected at /tmp/tmpbx_2syth.pl\
    \ line 40, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting\
    \ on line 39)\n\t(Do you need to predeclare print?)\nString found where operator\
    \ expected at /tmp/tmpbx_2syth.pl line 40, near \"YES\"),\"\"\nBareword found\
    \ where operator expected at /tmp/tmpbx_2syth.pl line 40, near \"\"),\"ygs\"\n\
    \t(Missing operator before ygs?)\nString found where operator expected at /tmp/tmpbx_2syth.pl\
    \ line 40, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword\
    \ found where operator expected at /tmp/tmpbx_2syth.pl line 41, near \"print \"\
    ok\"\n  (Might be a runaway multi-line \"\" string starting on line 40)\n\t(Do\
    \ you need to predeclare print?)\nBareword found where operator expected at /tmp/tmpbx_2syth.pl\
    \ line 41, near \"\"),\"tHKS\"\n\t(Missing operator before tHKS?)\nBareword found\
    \ where operator expected at /tmp/tmpbx_2syth.pl line 42, near \"print \"ok\"\n\
    \  (Might be a runaway multi-line \"\" string starting on line 41)\n\t(Do you\
    \ need to predeclare print?)\nBareword fou"
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $i = 0;\n    my $char;\n    my $index;\n\
    \    while ($i < length($message)) {\n        $char = substr($message, $i, 1);\n\
    \        $index = index($vowels, $char);\n        if ($index >= 0) {\n       \
    \     $char = substr($vowels_encoded, $index, 1);\n        }\n        if ($char\
    \ =~ /[a-z]/) {\n            $char =~ tr/a-z/A-Z/;\n        }\n        else {\n\
    \            $char =~ tr/A-Z/a-z/;\n        }\n        $encoded .= $char;\n  \
    \      $i++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    for\
    \ (my $i = 0; $i < length($vowels); $i++) {\n        $vowels_encoded_hash->{substr($vowels,\
    \ $i, 1)} = substr($vowels_encoded, $i, 1);\n    }\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if (index($vowels,\
    \ $char) != -1) {\n            $encoded .= $vowels_encoded_hash->{$char};\n  \
    \      } elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc($char);\n    \
    \    } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc($char);\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if ($char_index != -1) {\n            my $char_is_vowel = index($vowels,\
    \ $char) != -1;\n            my $char_is_upper = $char eq uc($char);\n       \
    \     my $new_char_index = ($char_index + 2) % $alphabet_length;\n           \
    \ my $new_char = substr($alphabet, $new_char_index, 1);\n            if ($char_is_vowel)\
    \ {\n                $new_char = uc($new_char);\n            }\n            if\
    \ ($char_is_upper) {\n                $new_char = uc($new_char);\n           \
    \ }\n            $encoded_message .= $new_char;\n        } else {\n          \
    \  $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded_message;\n    foreach my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n\
    \                $letter = uc $letter;\n            } else {\n               \
    \ $letter = lc $letter;\n            }\n            if (grep {$_ eq lc $letter}\
    \ @vowels) {\n                my $index = first_index {$_ eq lc $letter} @vowels;\n\
    \                $index += 2;\n                $index = $index % 5;\n        \
    \        $letter = $vowels[$index];\n            }\n        }\n        push @encoded_message,\
    \ $letter;\n    }\n    return join '', @encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "first_index" without a package or object reference
    at /tmp/tmpgjd9297d.pl line 24.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"y\",\n    );\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-zA-Z]/) {\n            if ($char =~ /[a-z]/) {\n   \
    \             $char = uc($char);\n            } else {\n                $char\
    \ = lc($char);\n            }\n            if (grep {$_ eq lc($char)} @vowels)\
    \ {\n                $char = $vowel_map{lc($char)};\n            }\n        }\n\
    \        $encoded_message .= $char;\n    }\n    return $encoded_message;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my\
    \ $vowels_hash = {};\n    my $i = 0;\n    foreach my $v (split(//, $vowels)) {\n\
    \        $vowels_hash->{$v} = 1;\n    }\n    foreach my $v (split(//, $vowels_encoded))\
    \ {\n        $vowels_encoded_hash->{$v} = 1;\n    }\n    foreach my $c (split(//,\
    \ $message)) {\n        if ($vowels_hash->{$c}) {\n            $c = $vowels_encoded[$i];\n\
    \            $i++;\n        }\n        if ($vowels_encoded_hash->{$c}) {\n   \
    \         $i = 0;\n        }\n        $encoded .= $c;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my $i\
    \ = 0;\n    my $length = length($message);\n    while ($i < $length) {\n     \
    \   my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i) {\n  \
    \          if ($char =~ /[a-z]/) {\n                $char = uc($char);\n     \
    \       } else {\n                $char = lc($char);\n            }\n        \
    \    if (exists $vowels{$char}) {\n                $char = chr(ord($char) + 2);\n\
    \            }\n        }\n        $encoded .= $char;\n        $i++;\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n   \
    \         $encoded .= encode_letter($letter);\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::encode_letter called at /tmp/tmpjyfj6kbr.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $char\
    \ (@message) {\n        if ($char =~ /[a-z]/) {\n            if ($char =~ /[aeiou]/)\
    \ {\n                push @encoded, $vowels{$char};\n            } else {\n  \
    \              push @encoded, uc $char;\n            }\n        } else {\n   \
    \         push @encoded, lc $char;\n        }\n    }\n    return join '', @encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @letters = split(//,\
    \ $message);\n    foreach my $letter (@letters) {\n        if (is_vowel($letter))\
    \ {\n            $encoded_message .= get_next_vowel($letter);\n        } else\
    \ {\n            $encoded_message .= $letter;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_vowel called at /tmp/tmpabol9_sg.pl line
    16.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u');\n    my @encoded_message;\n    foreach my $letter\
    \ (@message) {\n        if ($letter =~ /[a-z]/) {\n            if (grep {$_ eq\
    \ $letter} @vowels) {\n                my $index = first_index {$_ eq $letter}\
    \ @vowels;\n                if ($index == $#vowels) {\n                    $index\
    \ = -1;\n                }\n                push(@encoded_message, $vowels[$index\
    \ + 2]);\n            } else {\n                push(@encoded_message, $letter);\n\
    \            }\n        } else {\n            push(@encoded_message, $letter);\n\
    \        }\n    }\n    return join('', @encoded_message);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    for my $char (split //, $message) {\n\
    \        my $index = index($vowels, $char);\n        if ($index != -1) {\n   \
    \         $encoded .= substr($vowels_encoded, $index, 1);\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n        a\
    \ => 'c',\n        e => 'g',\n        i => 'k',\n        o => 's',\n        u\
    \ => 'y',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc\
    \ $char}) {\n            $encoded .= $vowels_map{lc $char};\n        }\n     \
    \   elsif ($char =~ /[a-z]/) {\n            $encoded .= uc $char;\n        }\n\
    \        elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc $char;\n     \
    \   }\n        else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my @vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my @encoded_message;\n    foreach\
    \ my $letter (@message) {\n        if (lc($letter) ~~ @vowels) {\n           \
    \ my $index = first_index { $_ eq lc($letter) } @vowels;\n            $index =\
    \ ($index + 2) % 5;\n            push(@encoded_message, uc($vowels[$index]));\n\
    \        } else {\n            push(@encoded_message, uc($letter));\n        }\n\
    \    }\n    return join(\"\", @encoded_message);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmp98a53e1l.pl line 17.

    Can''t call method "first_index" without a package or object reference at /tmp/tmp98a53e1l.pl
    line 18.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length =\
    \ length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $i;\n    my $j;\n    my $char;\n    my $char_index;\n\
    \    my $char_index_plus_two;\n    my $char_is_vowel;\n    my $char_is_upper;\n\
    \    my $char_is_lower;\n    my $char_is_letter;\n    my $char_is_vowel_index;\n\
    \    my $char_is_vowel_index_plus_two;\n    my $char_is_vowel_index_plus_two_char;\n\
    \    for ($i = 0; $i < $message_length; $i++) {\n        $char = substr($message,\
    \ $i, 1);\n        $char_is_upper = uc($char) eq $char;\n        $char_is_lower\
    \ = lc($char) eq $char;\n        $char_is_letter = $char_is_upper || $char_is_lower;\n\
    \        if ($char_is_letter) {\n            $char_index = index($alphabet, lc($char));\n\
    \            $char_index_plus_two = ($char_index + 2) % $alphabet_length;\n  \
    \          $char_is_vowel = index($vowels, lc($char)) != -1;\n            if ($char_is_vowel)\
    \ {\n                $char_is_vowel_index = index($vowels, lc($char));\n     \
    \           $char_is_vowel_index_plus_two = ($char_is_vowel_index + 2) % $vowels_length;\n\
    \                $char_is_vowel_index_plus_two_char = substr($vowels, $char_is_vowel_index_plus_two,\
    \ 1);\n                $char\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprw0jxq2i.pl line 45, at end
    of line

    syntax error at /tmp/tmprw0jxq2i.pl line 45, near "$char

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprw0jxq2i.pl line 72, at end of
    line

    syntax error at /tmp/tmprw0jxq2i.pl line 72, at EOF

    Execution of /tmp/tmprw0jxq2i.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index\
    \ = 0;\n    my $vowel_count = 0;\n    my $vowel_length = scalar @vowels;\n   \
    \ my $char;\n    my $char_index;\n    my $char_count = 0;\n    my $char_length\
    \ = length $message;\n    while ($char_count < $char_length) {\n        $char\
    \ = substr($message, $char_count, 1);\n        if ($char =~ /[a-z]/i) {\n    \
    \        $char_index = ord($char);\n            if ($char =~ /[a-z]/) {\n    \
    \            $char_index += 13;\n                if ($char_index > ord(\"z\"))\
    \ {\n                    $char_index -= 26;\n                }\n            }\n\
    \            elsif ($char =~ /[A-Z]/) {\n                $char_index += 13;\n\
    \                if ($char_index > ord(\"Z\")) {\n                    $char_index\
    \ -= 26;\n                }\n            }\n            $char = chr($char_index);\n\
    \            if ($vowels{lc($char)}) {\n                $vowel_index = 0;\n  \
    \              while ($vowel_index < $vowel_length) {\n                    if\
    \ ($vowels[$vowel_index] eq lc($char)) {\n                        $vowel_count\
    \ = $vowel_index + 2;\n                        if ($vowel_count >= $vowel_length)\
    \ {\n                            $vowel_count -= $vowel_length;\n            \
    \            }\n                        $char = $vowels[$vowel_count];\n     \
    \                   last;\n                    }\n                    $vowel_index++;\n\
    \                }\n            }\n        }\n        $encoded .= $char;\n   \
    \     $char_count++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    for (my $i = 0; $i < length($message); $i++) {\n \
    \       my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if ($char_index != -1) {\n            if (index($vowels, $char)\
    \ != -1) {\n                $char_index += 2;\n                $char_index %=\
    \ $alphabet_length;\n                $char = substr($alphabet, $char_index, 1);\n\
    \            }\n            if ($char eq uc($char)) {\n                $char =\
    \ lc($char);\n            } else {\n                $char = uc($char);\n     \
    \       }\n        }\n        $encoded_message .= $char;\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @letters = split\
    \ //, $message;\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $encoded_message .= chr(ord($letter) - 32);\n        } elsif\
    \ ($letter =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($letter) + 32);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_length = scalar @vowels;\n    my $message_length = length\
    \ $message;\n    my $message_index = 0;\n    my $message_char = \"\";\n    my\
    \ $message_char_upper = \"\";\n    my $message_char_lower = \"\";\n    my $message_char_is_vowel\
    \ = 0;\n    my $message_char_is_upper = 0;\n    my $message_char_is_lower = 0;\n\
    \    my $message_char_is_letter = 0;\n    my $message_char_is_vowel_upper = 0;\n\
    \    my $message_char_is_vowel_lower = 0;\n    my $message_char_is_vowel_upper_index\
    \ = 0;\n    my $message_char_is_vowel_lower_index = 0;\n    my $message_char_is_vowel_upper_next_index\
    \ = 0;\n    my $message_char_is_vowel_lower_next_index = 0;\n    my $message_char_is_vowel_upper_next_char\
    \ = \"\";\n    my $message_char_is_vowel_lower_next_char = \"\";\n    my $message_char_is_vowel_upper_next_next_char\
    \ = \"\";\n    my $message_char_is_vowel_lower_next_next_char = \"\";\n    my\
    \ $message_char_is_vowel_upper_next_next_index = 0;\n    my $message_char_is_vowel_lower_next_next_index\
    \ = 0;\n    my $message_char_is_vowel_upper_next_next_next_char = \"\";\n    my\
    \ $message_char_is_vowel_lower_next_next_next_char = \"\";\n    my $message_char_is_v\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp5_wi_mo5.pl line 42, at end
    of line

    syntax error at /tmp/tmp5_wi_mo5.pl line 42, near "$message_char_is_v

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp5_wi_mo5.pl line 69, at end of
    line

    syntax error at /tmp/tmp5_wi_mo5.pl line 69, at EOF

    Execution of /tmp/tmp5_wi_mo5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my $vowel_index = 0;\n    my $alphabet_index = 0;\n    my $vowel_found =\
    \ 0;\n    my $vowel_found_index = 0;\n    my $vowel_found_index_plus_two = 0;\n\
    \    my $vowel_found_index_plus_two_letter = \"\";\n    my $vowel_found_index_plus_two_letter_index\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_index_plus_two = 0;\n    my\
    \ $vowel_found_index_plus_two_letter_index_plus_two_letter = \"\";\n    my $vowel_found_index_plus_two_letter_index_plus_two_letter_index\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_index_plus_two_letter_index_plus_two\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_index_plus_two_letter_index_plus_two_letter\
    \ = \"\";\n    my $vowel_found_index_plus_two_letter_index_plus_two_letter_index_plus_two_letter_index\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_index_plus_two_letter_index_plus_two_letter_index_plus_two\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_index_plus_two_letter_index_plus_two_letter_index_plus_two_letter\
    \ = \"\";\n    my $vowel_found_index_plus_two_letter_index_plus_two_letter_index_plus_two_letter_index_plus_two_letter_index\
    \ = 0;\n    my $vowel_found_index_plus_two_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpolkdtp0q.pl line 33, at end
    of line

    syntax error at /tmp/tmpolkdtp0q.pl line 33, near "$vowel_found_index_plus_two_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpolkdtp0q.pl line 60, at end of
    line

    syntax error at /tmp/tmpolkdtp0q.pl line 60, at EOF

    Execution of /tmp/tmpolkdtp0q.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %alphabet_caps = map { $_ => 1 } (\"\
    A\"..\"Z\");\n    my $alphabet_length = scalar(keys %alphabet);\n    my $alphabet_caps_length\
    \ = scalar(keys %alphabet_caps);\n    my @message_array = split(//, $message);\n\
    \    foreach my $letter (@message_array) {\n        if (exists $alphabet{$letter})\
    \ {\n            my $new_letter = chr(ord($letter) + 2);\n            if (exists\
    \ $alphabet{$new_letter}) {\n                $encoded .= $new_letter;\n      \
    \      } else {\n                $encoded .= chr(ord($new_letter) - $alphabet_length);\n\
    \            }\n        } elsif (exists $alphabet_caps{$letter}) {\n         \
    \   my $new_letter = chr(ord($letter) + 2);\n            if (exists $alphabet_caps{$new_letter})\
    \ {\n                $encoded .= $new_letter;\n            } else {\n        \
    \        $encoded .= chr(ord($new_letter) - $alphabet_caps_length);\n        \
    \    }\n        } else {\n            $encoded .= $letter;\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i) {\n   \
    \         my $encoded_letter = encode_letter($letter);\n            $encoded .=\
    \ $encoded_letter;\n        } else {\n            $encoded .= $letter;\n     \
    \   }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::encode_letter called at /tmp/tmp0vol4vez.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded_message;\n    foreach my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[A-Z]/) {\n\
    \                $letter = lc($letter);\n            }\n            else {\n \
    \               $letter = uc($letter);\n            }\n            if (grep {$_\
    \ eq $letter} @vowels) {\n                my $index = firstidx {$_ eq $letter}\
    \ @vowels;\n                $index += 2;\n                $index = $index % 5;\n\
    \                $letter = $vowels[$index];\n            }\n        }\n      \
    \  push @encoded_message, $letter;\n    }\n    return join '', @encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "firstidx" without a package or object reference at
    /tmp/tmpe6xj6zvq.pl line 25.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    for\
    \ (my $i = 0; $i < length($vowels); $i++) {\n        $vowels_encoded_hash->{substr($vowels,\
    \ $i, 1)} = substr($vowels_encoded, $i, 1);\n    }\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $encoded .= lc($char);\n\
    \            } else {\n                $encoded .= uc($char);\n            }\n\
    \        } elsif ($char =~ /[aeiou]/i) {\n            $encoded .= $vowels_encoded_hash->{lc($char)};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index =\
    \ 0;\n    my $vowel_count = 0;\n    my $char;\n    my $char_index = 0;\n    my\
    \ $char_count = 0;\n    my $char_case = 0;\n    my $char_case_index = 0;\n   \
    \ my $char_case_count = 0;\n    my $char_case_value = 0;\n    my $char_case_value_index\
    \ = 0;\n    my $char_case_value_count = 0;\n    my $char_case_value_value = 0;\n\
    \    my $char_case_value_value_index = 0;\n    my $char_case_value_value_count\
    \ = 0;\n    my $char_case_value_value_value = 0;\n    my $char_case_value_value_value_index\
    \ = 0;\n    my $char_case_value_value_value_count = 0;\n    my $char_case_value_value_value_value\
    \ = 0;\n    my $char_case_value_value_value_value_index = 0;\n    my $char_case_value_value_value_value_count\
    \ = 0;\n    my $char_case_value_value_value_value_value = 0;\n    my $char_case_value_value_value_value_value_index\
    \ = 0;\n    my $char_case_value_value_value_value_value_count = 0;\n    my $char_case_value_value_value_value_value_value\
    \ = 0;\n    my $char_case_value_value_value_value_value_value_index = 0;\n   \
    \ my $char_case_value_value_value_value_value_value_count = 0;\n    my $char_case_value_value_value_value_value_value_value\
    \ = 0;\n    my $char_case_value_value_value_value_value_value_value_index\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpgzinq33d.pl line 44, at end
    of line

    syntax error at /tmp/tmpgzinq33d.pl line 44, near "$char_case_value_value_value_value_value_value_value_index

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpgzinq33d.pl line 71, at end of
    line

    syntax error at /tmp/tmpgzinq33d.pl line 71, at EOF

    Execution of /tmp/tmpgzinq33d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_found = 0;\n    my $vowel_next = 0;\n    my $vowel_next_next =\
    \ 0;\n    my $vowel_next_next_next = 0;\n    my $vowel_next_next_next_next = 0;\n\
    \    my $vowel_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next = 0;\n    my\
    \ $vowel_next_next_next_next_next_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp60g4yaaw.pl line 35, at end
    of line

    syntax error at /tmp/tmp60g4yaaw.pl line 35, near "$vowel_next_next_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp60g4yaaw.pl line 62, at end of
    line

    syntax error at /tmp/tmp60g4yaaw.pl line 62, at EOF

    Execution of /tmp/tmp60g4yaaw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    foreach my $letter (split(//, $message)) {\n    \
    \    if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n     \
    \           $letter =~ tr/a-z/A-Z/;\n            } else {\n                $letter\
    \ =~ tr/A-Z/a-z/;\n            }\n            if (grep {$_ eq lc($letter)} @vowels)\
    \ {\n                my $index = 0;\n                for (my $i = 0; $i < @vowels;\
    \ $i++) {\n                    if ($vowels[$i] eq lc($letter)) {\n           \
    \             $index = $i;\n                        last;\n                  \
    \  }\n                }\n                if ($index == @vowels - 1) {\n      \
    \              $letter = $vowels[0];\n                } else {\n             \
    \       $letter = $vowels[$index + 1];\n                }\n            }\n   \
    \     }\n        $encoded .= $letter;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_encoded = \"cdefghijklmnopqrstuvwxyzb\";\n    my $alphabet_encoded_upper\
    \ = \"CDEFGHIJKLMNOPQRSTUVWXYZB\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        my $index = index($vowels,\
    \ $char);\n        if ($index != -1) {\n            $encoded .= substr($vowels_encoded,\
    \ $index, 1);\n        } else {\n            $index = index($alphabet, $char);\n\
    \            if ($index != -1) {\n                $encoded .= substr($alphabet_encoded,\
    \ $index, 1);\n            } else {\n                $index = index($alphabet,\
    \ lc($char));\n                if ($index != -1) {\n                    $encoded\
    \ .= substr($alphabet_encoded_upper, $index, 1);\n                } else {\n \
    \                   $encoded .= $char;\n                }\n            }\n   \
    \     }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded_message;\n    foreach my $char (@message)\
    \ {\n        if ($char =~ /[a-zA-Z]/) {\n            if ($char =~ /[a-z]/) {\n\
    \                $char =~ tr/a-z/A-Z/;\n            }\n            else {\n  \
    \              $char =~ tr/A-Z/a-z/;\n            }\n            if (grep /$char/,\
    \ @vowels) {\n                my $index = 0;\n                foreach my $vowel\
    \ (@vowels) {\n                    if ($char eq $vowel) {\n                  \
    \      $index = $index + 2;\n                        if ($index > 4) {\n     \
    \                       $index = $index - 5;\n                        }\n    \
    \                    $char = $vowels[$index];\n                    }\n       \
    \         }\n            }\n        }\n        push @encoded_message, $char;\n\
    \    }\n    return join '', @encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n \
    \   my $vowel_found = 0;\n    my $vowel_char = \"\";\n    my $vowel_char_index\
    \ = 0;\n    my $vowel_char_count = 0;\n    my $vowel_char_found = 0;\n    my $vowel_char_next\
    \ = \"\";\n    my $vowel_char_next_index = 0;\n    my $vowel_char_next_count =\
    \ 0;\n    my $vowel_char_next_found = 0;\n    my $vowel_char_next_next = \"\"\
    ;\n    my $vowel_char_next_next_index = 0;\n    my $vowel_char_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_found = 0;\n    my $vowel_char_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_index = 0;\n    my $vowel_char_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_found = 0;\n    my $vowel_char_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_index = 0;\n    my $vowel_char_next_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_next_found = 0;\n    my $vowel_char_next_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_index = 0;\n    my $vowel_char_next_next_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_next_next_found =\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpjylbu8sm.pl line 42, at end
    of line

    syntax error at /tmp/tmpjylbu8sm.pl line 42, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpjylbu8sm.pl line 69, at end of
    line

    syntax error at /tmp/tmpjylbu8sm.pl line 69, at EOF

    Execution of /tmp/tmpjylbu8sm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"s\",\n    );\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-zA-Z]/) {\n            if ($char =~ /[a-z]/) {\n   \
    \             $char = uc($char);\n            } else {\n                $char\
    \ = lc($char);\n            }\n            if (grep {$_ eq lc($char)} @vowels)\
    \ {\n                $char = $vowel_map{lc($char)};\n            }\n        }\n\
    \        $encoded_message .= $char;\n    }\n    return $encoded_message;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_length = @vowels;\n\
    \    my $vowel_found = 0;\n    my $vowel_position = 0;\n    my $vowel_next = \"\
    \";\n    my $vowel_next_next = \"\";\n    my $vowel_next_next_index = 0;\n   \
    \ my $vowel_next_index = 0;\n    my $vowel_next_next_found = 0;\n    my $vowel_next_found\
    \ = 0;\n    my $vowel_next_next_position = 0;\n    my $vowel_next_position = 0;\n\
    \    my $vowel_position = 0;\n    my $vowel_found = 0;\n    my $vowel_index =\
    \ 0;\n    my $vowel_length = @vowels;\n    my $vowel_found = 0;\n    my $vowel_position\
    \ = 0;\n    my $vowel_next = \"\";\n    my $vowel_next_next = \"\";\n    my $vowel_next_next_index\
    \ = 0;\n    my $vowel_next_index = 0;\n    my $vowel_next_next_found = 0;\n  \
    \  my $vowel_next_found = 0;\n    my $vowel_next_next_position = 0;\n    my $vowel_next_position\
    \ = 0;\n    my $vowel_position = 0;\n    my $vowel_found = 0;\n    my $vowel_index\
    \ = 0;\n    my $vowel_length = @vowels;\n    my $vowel_found = 0;\n    my $vowel_position\
    \ = 0;\n    my $vowel_next = \"\";\n    my $vowel_next_next = \"\";\n    my $vowel_next_next_index\
    \ = 0;\n    my $v\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpymzznxf5.pl line 51, at end
    of line

    syntax error at /tmp/tmpymzznxf5.pl line 51, near "$v

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpymzznxf5.pl line 78, at end of
    line

    syntax error at /tmp/tmpymzznxf5.pl line 78, at EOF

    Execution of /tmp/tmpymzznxf5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n\
    \        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n \
    \   };\n    for my $letter (split //, $message) {\n        if ($vowels =~ /$letter/i)\
    \ {\n            $encoded_message .= $vowels_hash->{lc $letter};\n        } else\
    \ {\n            $encoded_message .= $letter;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my @alphabet = (\"a\"..\"z\");\n    my\
    \ %alphabet_hash = map { $alphabet[$_] => $_ } (0..$#alphabet);\n    my $alphabet_length\
    \ = scalar @alphabet;\n    my $vowel_length = scalar @vowels;\n    my $message_length\
    \ = length $message;\n    for (my $i = 0; $i < $message_length; $i++) {\n    \
    \    my $char = substr($message, $i, 1);\n        if (exists $alphabet{$char})\
    \ {\n            my $char_index = $alphabet_hash{$char};\n            if (exists\
    \ $vowels{$char}) {\n                my $new_char_index = ($char_index + 2) %\
    \ $vowel_length;\n                $encoded .= $vowels[$new_char_index];\n    \
    \        } else {\n                my $new_char_index = ($char_index + 2) % $alphabet_length;\n\
    \                $encoded .= $alphabet[$new_char_index];\n            }\n    \
    \    } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my %vowel_hash = map { $vowels[$_] => $vowels[($_ + 2) % 5] } (0..4);\n \
    \   my %alphabet_hash = map { $alphabet[$_] => $_ } (0..25);\n    for my $char\
    \ (split //, $message) {\n        if (exists $vowel_hash{lc $char}) {\n      \
    \      $encoded .= uc $vowel_hash{lc $char};\n        } elsif (exists $alphabet_hash{lc\
    \ $char}) {\n            $encoded .= uc $alphabet[($alphabet_hash{lc $char} +\
    \ 1) % 26];\n        } else {\n            $encoded .= $char;\n        }\n   \
    \ }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my @encoded\
    \ = ();\n    my %vowels = (\n        a => 'c',\n        e => 'g',\n        i =>\
    \ 'k',\n        o => 'q',\n        u => 'y',\n    );\n    foreach my $char (@message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc($char);\n            } else {\n                $char\
    \ = lc($char);\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n\
    \            $char = $vowels{lc($char)};\n        }\n        push(@encoded, $char);\n\
    \    }\n    return join('', @encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my\
    \ $vowels_hash = {};\n    for (my $i = 0; $i < length($vowels); $i++) {\n    \
    \    $vowels_hash->{substr($vowels, $i, 1)} = 1;\n        $vowels_encoded_hash->{substr($vowels_encoded,\
    \ $i, 1)} = 1;\n    }\n    for (my $i = 0; $i < length($message); $i++) {\n  \
    \      my $char = substr($message, $i, 1);\n        if ($vowels_hash->{$char})\
    \ {\n            $encoded .= $vowels_encoded_hash->{$char};\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash = {};\n    my $vowels_array\
    \ = split(//, $vowels);\n    my $vowels_array_length = scalar @vowels_array;\n\
    \    for (my $i = 0; $i < $vowels_array_length; $i++) {\n        $vowels_hash->{$vowels_array[$i]}\
    \ = $vowels_array[($i + 2) % $vowels_array_length];\n    }\n    foreach my $char\
    \ (@message) {\n        if (exists $vowels_hash->{lc($char)}) {\n            $encoded_message\
    \ .= uc($vowels_hash->{lc($char)});\n        } elsif (exists $vowels_hash->{uc($char)})\
    \ {\n            $encoded_message .= lc($vowels_hash->{uc($char)});\n        }\
    \ else {\n            $encoded_message .= $char;\n        }\n    }\n    return\
    \ $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my %vowel_map = (\n \
    \       'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 's',\n    );\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char = uc($char);\n            }\n            if ($char =~ /[A-Z]/)\
    \ {\n                $char = lc($char);\n            }\n            if ($vowels\
    \ =~ /$char/) {\n                $char = $vowel_map{$char};\n            }\n \
    \       }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %encoding\
    \ = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\"\
    ,\n        \"o\" => \"s\",\n        \"u\" => \"y\",\n    );\n    for my $char\
    \ (split //, $message) {\n        if ($vowels{lc $char}) {\n            $encoded\
    \ .= $encoding{lc $char};\n        } elsif ($char =~ /[a-z]/) {\n            $encoded\
    \ .= uc $char;\n        } elsif ($char =~ /[A-Z]/) {\n            $encoded .=\
    \ lc $char;\n        } else {\n            $encoded .= $char;\n        }\n   \
    \ }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 0
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @chars = split(//, $message);\n    my @encoded;\n\
    \    for my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n            my\
    \ $encoded_char = $char;\n            if ($char =~ /[a-z]/) {\n              \
    \  $encoded_char = chr(ord($char) - 32);\n            } else {\n             \
    \   $encoded_char = chr(ord($char) + 32);\n            }\n            if ($encoded_char\
    \ =~ /[aeiou]/i) {\n                my $next_char = chr(ord($encoded_char) + 2);\n\
    \                if ($next_char =~ /[aeiou]/i) {\n                    $encoded_char\
    \ = chr(ord($next_char) + 1);\n                } else {\n                    $encoded_char\
    \ = $next_char;\n                }\n            }\n            push(@encoded,\
    \ $encoded_char);\n        } else {\n            push(@encoded, $char);\n    \
    \    }\n    }\n    return join('', @encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = '';\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } ('a'..'z');\n    my @alphabet = ('a'..'z');\n    my %alphabet_index\
    \ = map { $alphabet[$_] => $_ } (0..$#alphabet);\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{lc $char}) {\n            my $index = $alphabet_index{lc\
    \ $char};\n            $index += 2;\n            $index -= 26 if $index > 25;\n\
    \            $char = $alphabet[$index];\n        }\n        $char = uc $char if\
    \ $alphabet{lc $char};\n        $encoded_message .= $char;\n    }\n    return\
    \ $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    for my $char (split //, $message) {\n        if (lc($char)\
    \ ~~ @vowels) {\n            my $index = first_index { $_ eq lc($char) } @vowels;\n\
    \            $index = ($index + 2) % 5;\n            $encoded_message .= $vowels[$index];\n\
    \        }\n        else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmp11q0l_1h.pl line 16.

    Can''t call method "first_index" without a package or object reference at /tmp/tmp11q0l_1h.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = '';\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } ('a'..'z');\n    foreach my $letter (split(//, $message))\
    \ {\n        if ($alphabet{$letter}) {\n            if ($vowels{$letter}) {\n\
    \                $encoded_message .= $vowels[($vowels{$letter} + 2) % 5];\n  \
    \          } else {\n                $encoded_message .= $letter;\n          \
    \  }\n        } else {\n            $encoded_message .= $letter;\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    for\
    \ (my $i = 0; $i < length($vowels); $i++) {\n        $vowels_encoded_hash->{substr($vowels,\
    \ $i, 1)} = substr($vowels_encoded, $i, 1);\n    }\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $letter = substr($message, $i, 1);\n        if ($vowels_encoded_hash->{$letter})\
    \ {\n            $encoded .= $vowels_encoded_hash->{$letter};\n        } elsif\
    \ ($letter =~ /[a-z]/) {\n            $encoded .= chr(ord($letter) - 32);\n  \
    \      } elsif ($letter =~ /[A-Z]/) {\n            $encoded .= chr(ord($letter)\
    \ + 32);\n        } else {\n            $encoded .= $letter;\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[A-Z]/) {\n    \
    \        $encoded .= lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n  \
    \          $encoded .= uc($letter);\n        } else {\n            $encoded .=\
    \ $letter;\n        }\n    }\n    $encoded =~ s/[aeiou]/shift_vowel($&)/ge;\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::shift_vowel called at /tmp/tmphm2_7idu.pl line
    24.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @letters = split(//, $message);\n    my @encoded;\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        push(@encoded, chr(ord($letter) + 2));\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            push(@encoded, chr(ord($letter) - 2));\n        } else {\n  \
    \          push(@encoded, $letter);\n        }\n    }\n    return join('', @encoded);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my\
    \ @vowels_encoded_array = split(//, $vowels_encoded);\n    my @vowels_array =\
    \ split(//, $vowels);\n    for (my $i = 0; $i < scalar(@vowels_array); $i++) {\n\
    \        $vowels_encoded_hash->{$vowels_array[$i]} = $vowels_encoded_array[$i];\n\
    \    }\n    my @message_array = split(//, $message);\n    for (my $i = 0; $i <\
    \ scalar(@message_array); $i++) {\n        if ($vowels =~ /$message_array[$i]/)\
    \ {\n            $encoded .= $vowels_encoded_hash->{$message_array[$i]};\n   \
    \     } else {\n            $encoded .= $message_array[$i];\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if ($char_index == -1) {\n            $encoded_message .= $char;\n\
    \        } else {\n            my $vowel_index = index($vowels, $char);\n    \
    \        if ($vowel_index == -1) {\n                my $new_char_index = $char_index\
    \ + 2;\n                if ($new_char_index >= $alphabet_length) {\n         \
    \           $new_char_index -= $alphabet_length;\n                }\n        \
    \        $encoded_message .= substr($alphabet, $new_char_index, 1);\n        \
    \    } else {\n                my $new_vowel_index = $vowel_index + 2;\n     \
    \           if ($new_vowel_index >= $vowels_length) {\n                    $new_vowel_index\
    \ -= $vowels_length;\n                }\n                $encoded_message .= substr($vowels,\
    \ $new_vowel_index, 1);\n            }\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @letters = split(\"\
    \", $message);\n    foreach my $letter (@letters) {\n        my $encoded_letter\
    \ = $letter;\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/)\
    \ {\n                $encoded_letter = uc($letter);\n            } else {\n  \
    \              $encoded_letter = lc($letter);\n            }\n            if ($letter\
    \ =~ /[aeiou]/i) {\n                my $index = index(\"abcdefghijklmnopqrstuvwxyz\"\
    , lc($letter));\n                $index += 2;\n                if ($index > 25)\
    \ {\n                    $index -= 26;\n                }\n                $encoded_letter\
    \ = substr(\"abcdefghijklmnopqrstuvwxyz\", $index, 1);\n            }\n      \
    \  }\n        $encoded_message .= $encoded_letter;\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"c\" => \"e\"\
    ,\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\" => \"h\",\n\
    \        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" => \"k\",\n \
    \       \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"n\",\n  \
    \      \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\",\n   \
    \     \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n    \
    \    \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n     \
    \   \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n      \
    \  \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{lc($char)}) {\n            $encoded .= $alphabet{lc($char)};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_index = 0;\n    my $vowel_index = 0;\n    my $vowel_found =\
    \ 0;\n    my $char = \"\";\n    my $char_index = 0;\n    my $char_ascii = 0;\n\
    \    my $char_ascii_swap = 0;\n    my $char_swap = \"\";\n    my $char_swap_index\
    \ = 0;\n    my $char_swap_ascii = 0;\n    my $char_swap_ascii_swap = 0;\n    my\
    \ $char_swap_swap = \"\";\n    my $message_length = length($message);\n    my\
    \ $vowels_length = length($vowels);\n    my $vowel_length = 0;\n    my $vowel\
    \ = \"\";\n    my $vowel_ascii = 0;\n    my $vowel_ascii_swap = 0;\n    my $vowel_swap\
    \ = \"\";\n    my $vowel_swap_index = 0;\n    my $vowel_swap_ascii = 0;\n    my\
    \ $vowel_swap_ascii_swap = 0;\n    my $vowel_swap_swap = \"\";\n    my $vowel_swap_swap_index\
    \ = 0;\n    my $vowel_swap_swap_ascii = 0;\n    my $vowel_swap_swap_ascii_swap\
    \ = 0;\n    my $vowel_swap_swap_swap = \"\";\n    my $vowel_swap_swap_swap_index\
    \ = 0;\n    my $vowel_swap_swap_swap_ascii = 0;\n    my $vowel_swap_swap_swap_ascii_swap\
    \ = 0;\n    my $vowel_swap_swap_swap_swap = \"\";\n   \nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpdtzczumc.pl line 74, at
    end of line

    syntax error at /tmp/tmpdtzczumc.pl line 74, at EOF

    Execution of /tmp/tmpdtzczumc.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        'a' => 'c',\n        'e' => 'g',\n       \
    \ 'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    };\n    for my $char\
    \ (split //, $message) {\n        if ($vowels =~ /$char/) {\n            $encoded_message\
    \ .= $vowels_hash->{$char};\n        } else {\n            $encoded_message .=\
    \ $char;\n        }\n    }\n    return uc $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %alphabet_upper = map { $_ => 1 }\
    \ (\"A\"..\"Z\");\n    my %alphabet_lower = map { $_ => 1 } (\"a\"..\"z\");\n\
    \    my %alphabet_lower_index = map { $_ => 1 } (0..25);\n    my %alphabet_upper_index\
    \ = map { $_ => 1 } (0..25);\n    my $i = 0;\n    foreach my $letter (keys %alphabet)\
    \ {\n        $alphabet_lower{$letter} = $i;\n        $i++;\n    }\n    $i = 0;\n\
    \    foreach my $letter (keys %alphabet) {\n        $alphabet_lower_index{$i}\
    \ = $letter;\n        $i++;\n    }\n    $i = 0;\n    foreach my $letter (keys\
    \ %alphabet) {\n        $alphabet_upper{uc($letter)} = $i;\n        $i++;\n  \
    \  }\n    $i = 0;\n    foreach my $letter (keys %alphabet) {\n        $alphabet_upper_index{$i}\
    \ = uc($letter);\n        $i++;\n    }\n    my @letters = split(\"\", $message);\n\
    \    foreach my $letter (@letters) {\n        if (exists $alphabet_lower{$letter})\
    \ {\n            my $index = $alphabet_lower{$letter};\n            if (exists\
    \ $vowels{$letter}) {\n                $index += 2;\n                if ($index\
    \ > 25) {\n                    $index -= 26;\n                }\n            \
    \    $encoded .= $alphabet_lower_index{$index};\n            } else {\n      \
    \          $encoded .= uc($letter);\n            }\n        } elsif (exists $alphabet_upper{$letter})\
    \ {\n            my $index = $alphabet_upper{$letter};\n           \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpo9r77gak.pl line 84, at
    end of line

    syntax error at /tmp/tmpo9r77gak.pl line 84, at EOF

    Execution of /tmp/tmpo9r77gak.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my $encoded\
    \ = \"\";\n    foreach my $char (@message) {\n        if ($char =~ /[a-z]/i) {\n\
    \            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n\
    \            if ($char =~ /[aeiou]/i) {\n                $char =~ tr/aeiou/EIOUA/;\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    for\
    \ (my $i = 0; $i < length($vowels); $i++) {\n        $vowels_encoded_hash->{substr($vowels,\
    \ $i, 1)} = substr($vowels_encoded, $i, 1);\n    }\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if (index($vowels,\
    \ $char) != -1) {\n            $encoded .= $vowels_encoded_hash->{$char};\n  \
    \      } elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc($char);\n    \
    \    } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc($char);\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my @encoded_message;\n\
    \    my $vowels = 'aeiou';\n    my $vowels_index = 0;\n    for my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[A-Z]/) {\n\
    \                push(@encoded_message, lc($letter));\n            } else {\n\
    \                push(@encoded_message, uc($letter));\n            }\n       \
    \ }\n        if ($letter =~ /[$vowels]/i) {\n            if ($vowels_index ==\
    \ 4) {\n                $vowels_index = 0;\n            }\n            push(@encoded_message,\
    \ substr($vowels, $vowels_index + 2, 1));\n            $vowels_index++;\n    \
    \    }\n    }\n    return join('', @encoded_message);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"y\",\n    );\n    my @message_chars = split(//, $message);\n\
    \    foreach my $char (@message_chars) {\n        if (grep {$_ eq $char} @vowels)\
    \ {\n            $encoded_message .= $vowel_map{$char};\n        } else {\n  \
    \          $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split(//, $message);\n    my @encoded_message;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter\
    \ (@message) {\n        if (exists $vowels{$letter}) {\n            push @encoded_message,\
    \ $vowels{$letter};\n        } elsif ($letter =~ /[A-Z]/) {\n            push\
    \ @encoded_message, lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n   \
    \         push @encoded_message, uc($letter);\n        } else {\n            push\
    \ @encoded_message, $letter;\n        }\n    }\n    return join('', @encoded_message);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @letters = split(//, $message);\n    my @new_letters;\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        $letter =~ tr/a-z/b-za/;\n        }\n        if ($letter =~ /[A-Z]/)\
    \ {\n            $letter =~ tr/A-Z/B-ZA/;\n        }\n        if ($letter =~ /[aeiou]/)\
    \ {\n            $letter =~ tr/aeiou/cgkos/;\n        }\n        if ($letter =~\
    \ /[AEIOU]/) {\n            $letter =~ tr/AEIOU/CGKOS/;\n        }\n        push(@new_letters,\
    \ $letter);\n    }\n    return join('', @new_letters);\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        a =>\
    \ \"c\",\n        b => \"d\",\n        c => \"e\",\n        d => \"f\",\n    \
    \    e => \"g\",\n        f => \"h\",\n        g => \"i\",\n        h => \"j\"\
    ,\n        i => \"k\",\n        j => \"l\",\n        k => \"m\",\n        l =>\
    \ \"n\",\n        m => \"o\",\n        n => \"p\",\n        o => \"q\",\n    \
    \    p => \"r\",\n        q => \"s\",\n        r => \"t\",\n        s => \"u\"\
    ,\n        t => \"v\",\n        u => \"w\",\n        v => \"x\",\n        w =>\
    \ \"y\",\n        x => \"z\",\n        y => \"a\",\n        z => \"b\",\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{lc $char}) {\n \
    \           $encoded .= $alphabet{lc $char};\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return uc $encoded;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        'a' => 'c',\n        'e' => 'g',\n       \
    \ 'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    };\n    for my $char\
    \ (split(//, $message)) {\n        if (index($vowels, $char) != -1) {\n      \
    \      $encoded_message .= $vowels_hash->{$char};\n        } else {\n        \
    \    $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_length = @vowels;\n\
    \    my $vowel_found = 0;\n    my $vowel_position = 0;\n    my $vowel_to_add =\
    \ \"\";\n    my $char_to_add = \"\";\n    my $char_ascii = 0;\n    my $char_ascii_upper\
    \ = 0;\n    my $char_ascii_lower = 0;\n    my $char_ascii_diff = 0;\n    my $char_ascii_new\
    \ = 0;\n    my $char_ascii_new_upper = 0;\n    my $char_ascii_new_lower = 0;\n\
    \    my $char_ascii_new_diff = 0;\n    my $char_ascii_new_upper_diff = 0;\n  \
    \  my $char_ascii_new_lower_diff = 0;\n    my $char_ascii_new_upper_diff_mod =\
    \ 0;\n    my $char_ascii_new_lower_diff_mod = 0;\n    my $char_ascii_new_upper_diff_mod_add\
    \ = 0;\n    my $char_ascii_new_lower_diff_mod_add = 0;\n    my $char_ascii_new_upper_diff_mod_add_mod\
    \ = 0;\n    my $char_ascii_new_lower_diff_mod_add_mod = 0;\n    my $char_ascii_new_upper_diff_mod_add_mod_add\
    \ = 0;\n    my $char_ascii_new_lower_diff_mod_add_mod_add = 0;\n    my $char_ascii_new_upper_diff_mod_add_mod_add_mod\
    \ = 0;\n    my $char_ascii_new_lower_diff_mod_add_mod_add_mod = 0;\n    my $char_ascii_new\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp_aadi13d.pl line 42, at end
    of line

    syntax error at /tmp/tmp_aadi13d.pl line 42, near "$char_ascii_new

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp_aadi13d.pl line 69, at end of
    line

    syntax error at /tmp/tmp_aadi13d.pl line 69, at EOF

    Execution of /tmp/tmp_aadi13d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map\
    \ { $_ => 1 } ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my %letters_lower = map { $_ => 1 } ('a'..'z');\n    my %letters_upper_lower\
    \ = map { $_ => 1 } ('A'..'Z', 'a'..'z');\n    my %letters_lower_upper = map {\
    \ $_ => 1 } ('a'..'z', 'A'..'Z');\n    my %letters_upper_lower_upper = map { $_\
    \ => 1 } ('A'..'Z', 'a'..'z', 'A'..'Z');\n    my %letters_lower_upper_lower =\
    \ map { $_ => 1 } ('a'..'z', 'A'..'Z', 'a'..'z');\n    my %letters_upper_lower_upper_lower\
    \ = map { $_ => 1 } ('A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z');\n    my %letters_lower_upper_lower_upper\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', 'a'..'z', 'A'..'Z');\n    my %letters_upper_lower_upper_lower_upper\
    \ = map { $_ => 1 } ('A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z', 'A'..'Z');\n    my\
    \ %letters_lower_upper_lower_upper_lower = map { $_ => 1 } ('a'..'z', 'A'..'Z',\
    \ 'a'..'z', 'A'..'Z', 'a'..'z');\n    my %letters_upper_lower_upper_lower_upper_lower\
    \ = map { $_ => 1 } ('A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z',\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpcj2vijkf.pl line 28, at end
    of line

    syntax error at /tmp/tmpcj2vijkf.pl line 28, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpcj2vijkf.pl line 55, at end of
    line

    syntax error at /tmp/tmpcj2vijkf.pl line 55, at EOF

    Execution of /tmp/tmpcj2vijkf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index\
    \ = 0;\n    my $vowel_count = 0;\n    my $vowel_length = scalar @vowels;\n   \
    \ my $vowel_offset = 2;\n    my $vowel_offset_index = 0;\n    my $vowel_offset_count\
    \ = 0;\n    my $vowel_offset_length = $vowel_length - $vowel_offset;\n    my $vowel_offset_index_reset\
    \ = $vowel_offset_length;\n    my $vowel_offset_index_reset_count = 0;\n    my\
    \ $vowel_offset_index_reset_length = $vowel_length - $vowel_offset_index_reset;\n\
    \    my $vowel_offset_index_reset_length_count = 0;\n    my $vowel_offset_index_reset_length_length\
    \ = $vowel_length - $vowel_offset_index_reset_length;\n    my $vowel_offset_index_reset_length_length_count\
    \ = 0;\n    my $vowel_offset_index_reset_length_length_length = $vowel_length\
    \ - $vowel_offset_index_reset_length_length;\n    my $vowel_offset_index_reset_length_length_length_count\
    \ = 0;\n    my $vowel_offset_index_reset_length_length_length_length = $vowel_length\
    \ - $vowel_offset_index_reset_length_length_length;\n    my $vowel_offset_index_reset_length_length_length_length_count\
    \ = 0;\n    my $vowel_offset_index_reset_length_length_length_length_length =\
    \ $vowel_length - $vowel_offset_index_reset_length_length_length_length;\n   \
    \ my $vowel_offset_index\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpeaysnkk1.pl line 35, at end
    of line

    syntax error at /tmp/tmpeaysnkk1.pl line 35, near "$vowel_offset_index

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpeaysnkk1.pl line 62, at end of
    line

    syntax error at /tmp/tmpeaysnkk1.pl line 62, at EOF

    Execution of /tmp/tmpeaysnkk1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n\
    \        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n \
    \   };\n    for my $letter (split //, $message) {\n        if ($vowels =~ /$letter/i)\
    \ {\n            $encoded_message .= $vowels_hash->{lc $letter};\n        } else\
    \ {\n            $encoded_message .= $letter;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my $vowel_count = 0;\n    my $vowel_index = 0;\n    my $vowel_offset\
    \ = 2;\n    my $vowel_length = scalar @vowels;\n    my $vowel_index_offset = 0;\n\
    \    my $vowel_index_offset_mod = 0;\n    my $vowel_index_offset_mod_index = 0;\n\
    \    my $vowel_index_offset_mod_index_offset = 0;\n    my $vowel_index_offset_mod_index_offset_mod\
    \ = 0;\n    my $vowel_index_offset_mod_index_offset_mod_index = 0;\n    my $vowel_index_offset_mod_index_offset_mod_index_offset\
    \ = 0;\n    my $vowel_index_offset_mod_index_offset_mod_index_offset_mod = 0;\n\
    \    my $vowel_index_offset_mod_index_offset_mod_index_offset_mod_index = 0;\n\
    \    my $vowel_index_offset_mod_index_offset_mod_index_offset_mod_index_offset\
    \ = 0;\n    my $vowel_index_offset_mod_index_offset_mod_index_offset_mod_index_offset_mod\
    \ = 0;\n    my $vowel_index_offset_mod_index_offset_mod_index_offset_mod_index_offset_mod_index\
    \ = 0;\n    my $vowel_index_offset_mod_index_offset_mod_index_offset_mod_index_offset_mod_index_offset\
    \ = 0;\n    my $vowel_index_offset_mod_index_offset_mod_index_offset_mod_index_offset_mod_index_offset_mod\
    \ = 0;\n    my $vowel_index_offset_mod_index_offset_mod_index_offset_mod_index_offset_mod_index_offset_mod_index\
    \ = 0;\n    my $vowel\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprr5a6wqg.pl line 35, at end
    of line

    syntax error at /tmp/tmprr5a6wqg.pl line 35, near "$vowel

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprr5a6wqg.pl line 62, at end of
    line

    syntax error at /tmp/tmprr5a6wqg.pl line 62, at EOF

    Execution of /tmp/tmprr5a6wqg.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_found\
    \ = 0;\n    my $vowel_count = 0;\n    my $vowel_position = 0;\n    my $vowel_position_in_alphabet\
    \ = 0;\n    my $vowel_position_in_alphabet_plus_two = 0;\n    my $vowel_position_in_alphabet_plus_two_mod_26\
    \ = 0;\n    my $vowel_position_in_alphabet_plus_two_mod_26_plus_97 = 0;\n    my\
    \ $vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char = \"\";\n    my\
    \ $vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char_upper = \"\";\n\
    \    my $vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char_lower = \"\
    \";\n    my $vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char_lower_upper\
    \ = \"\";\n    my $vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char_lower_upper_lower\
    \ = \"\";\n    my $vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char_lower_upper_lower_upper\
    \ = \"\";\n    my $vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char_lower_upper_lower_upper_lower\
    \ = \"\";\n    my $vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char_lower_upper_lower_upper_lower_upper\
    \ = \"\";\n    my $vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpt99n9vx7.pl line 32, at end
    of line

    syntax error at /tmp/tmpt99n9vx7.pl line 32, near "$vowel_position_in_alphabet_plus_two_mod_26_plus_97_as_char

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpt99n9vx7.pl line 59, at end of
    line

    syntax error at /tmp/tmpt99n9vx7.pl line 59, at EOF

    Execution of /tmp/tmpt99n9vx7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjln\";\n    my $i = 0;\n    while($i < length($message))\
    \ {\n        my $char = substr($message, $i, 1);\n        if(index($vowels, $char)\
    \ != -1) {\n            my $index = index($vowels, $char);\n            $encoded\
    \ .= substr($vowels_encoded, $index, 1);\n        } else {\n            $encoded\
    \ .= $char;\n        }\n        $i++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my @message = split //, $message;\n    my @encoded_message;\n\
    \    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my @alphabet = split //, $alphabet;\n    my @vowels = split //, $vowels;\n\
    \    my $i = 0;\n    foreach my $letter (@message) {\n        if (index($vowels,\
    \ $letter) != -1) {\n            my $index = index($alphabet, $letter);\n    \
    \        my $new_index = ($index + 2) % 26;\n            $encoded_message[$i]\
    \ = $alphabet[$new_index];\n        } else {\n            $encoded_message[$i]\
    \ = $letter;\n        }\n        $i++;\n    }\n    return join \"\", @encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $result = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ ('a'..'z');\n    my $i = 0;\n    for my $char (split //, $message) {\n     \
    \   if ($vowels{lc $char}) {\n            for (1..2) {\n                $i++;\n\
    \                $i = 0 if $i > 25;\n            }\n            $result .= $char\
    \ eq lc $char ? lc chr(ord('a') + $i) : uc chr(ord('a') + $i);\n        }\n  \
    \      elsif ($alphabet{lc $char}) {\n            $result .= $char eq lc $char\
    \ ? uc $char : lc $char;\n        }\n        else {\n            $result .= $char;\n\
    \        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n\
    \        'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' =>\
    \ 'f',\n        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n      \
    \  'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n\
    \        'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' =>\
    \ 'q',\n        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n      \
    \  's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n\
    \        'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' =>\
    \ 'b',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc($char)})\
    \ {\n            $encoded .= $alphabet{lc($char)};\n        } else {\n       \
    \     $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @alphabet = ('a'..'z');\n\
    \    my %vowels = map { $_ => 1 } ('a', 'e', 'i', 'o', 'u');\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n            my $index\
    \ = lc($char) eq $char ? ord($char) - ord('a') : ord($char) - ord('A');\n    \
    \        if ($vowels{$alphabet[$index]}) {\n                $index = ($index +\
    \ 2) % 26;\n            }\n            $char = $alphabet[$index];\n        }\n\
    \        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_found = 0;\n\
    \    my $vowel_count = 0;\n    my $vowel_length = @vowels;\n    my $message_length\
    \ = length($message);\n    my $message_index = 0;\n    my $message_letter = \"\
    \";\n    my $message_letter_upper = \"\";\n    my $message_letter_lower = \"\"\
    ;\n    my $message_letter_encoded = \"\";\n    my $message_letter_encoded_upper\
    \ = \"\";\n    my $message_letter_encoded_lower = \"\";\n    my $message_letter_encoded_upper_index\
    \ = 0;\n    my $message_letter_encoded_lower_index = 0;\n    my $message_letter_encoded_upper_index_next\
    \ = 0;\n    my $message_letter_encoded_lower_index_next = 0;\n    my $message_letter_encoded_upper_index_next_next\
    \ = 0;\n    my $message_letter_encoded_lower_index_next_next = 0;\n    my $message_letter_encoded_upper_index_next_next_next\
    \ = 0;\n    my $message_letter_encoded_lower_index_next_next_next = 0;\n    my\
    \ $message_letter_encoded_upper_index_next_next_next_next = 0;\n    my $message_letter_encoded_lower_index_next_next_next_next\
    \ = 0;\n    my $message_letter_encoded_upper_index_next_next_next_next_next =\
    \ 0;\n    my $message_letter_encoded_lower_index_next_next_next_next_next = 0;\n\
    \    my $message_letter_encoded_upper_index_next_next_next_next_next_next = 0;\n\
    \    my $message_letter_encoded_lower_index_next_next_next_next_next_next = 0;\n\
    \    my $message_letter_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9r6c5iul.pl line 42, at end
    of line

    syntax error at /tmp/tmp9r6c5iul.pl line 42, near "$message_letter_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9r6c5iul.pl line 69, at end of
    line

    syntax error at /tmp/tmp9r6c5iul.pl line 69, at EOF

    Execution of /tmp/tmp9r6c5iul.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_length = @vowels;\n    my $message_length = length($message);\n\
    \    my $message_index = 0;\n    my $message_char = \"\";\n    my $message_char_upper\
    \ = \"\";\n    my $message_char_lower = \"\";\n    my $message_char_is_vowel =\
    \ 0;\n    my $message_char_is_upper = 0;\n    my $message_char_is_lower = 0;\n\
    \    my $message_char_is_letter = 0;\n    my $message_char_is_vowel_upper = 0;\n\
    \    my $message_char_is_vowel_lower = 0;\n    my $message_char_is_vowel_upper_index\
    \ = 0;\n    my $message_char_is_vowel_lower_index = 0;\n    my $message_char_is_vowel_upper_index_plus_two\
    \ = 0;\n    my $message_char_is_vowel_lower_index_plus_two = 0;\n    my $message_char_is_vowel_upper_index_plus_two_char\
    \ = \"\";\n    my $message_char_is_vowel_lower_index_plus_two_char = \"\";\n \
    \   my $message_char_is_vowel_upper_index_plus_two_char_upper = \"\";\n    my\
    \ $message_char_is_vowel_lower_index_plus_two_char_lower = \"\";\n    my $message_char_is_vowel_upper_index_plus_two_char_upper_index\
    \ = 0;\n    my $message_char_is_vowel_lower_index_plus_two_char_lower_index =\
    \ 0;\n    my $message_char_is_vowel_upper_index_plus_two_char_upper_index_plus_two\
    \ = 0\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpzr2f2e2h.pl line 40, at end
    of line

    syntax error at /tmp/tmpzr2f2e2h.pl line 40, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpzr2f2e2h.pl line 67, at end of
    line

    syntax error at /tmp/tmpzr2f2e2h.pl line 67, at EOF

    Execution of /tmp/tmpzr2f2e2h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = qw(a\
    \ e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my @alphabet = qw(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %alphabet = map\
    \ { $_ => 1 } @alphabet;\n    my $alphabet_length = scalar @alphabet;\n    my\
    \ $vowel_length = scalar @vowels;\n    my $message_length = length $message;\n\
    \    for (my $i = 0; $i < $message_length; $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if (exists $vowels{$char}) {\n            my $vowel_index =\
    \ 0;\n            for (my $j = 0; $j < $vowel_length; $j++) {\n              \
    \  if ($char eq $vowels[$j]) {\n                    $vowel_index = $j;\n     \
    \               last;\n                }\n            }\n            my $new_vowel_index\
    \ = ($vowel_index + 2) % $vowel_length;\n            $char = $vowels[$new_vowel_index];\n\
    \        } elsif (exists $alphabet{$char}) {\n            my $alphabet_index =\
    \ 0;\n            for (my $j = 0; $j < $alphabet_length; $j++) {\n           \
    \     if ($char eq $alphabet[$j]) {\n                    $alphabet_index = $j;\n\
    \                    last;\n                }\n            }\n            my $new_alphabet_index\
    \ = ($alphabet_index + 2) % $alphabet_length;\n            $char = $alphabet[$new_alphabet_index];\n\
    \        }\n        $encoded_message .= $char;\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"y\",\n    );\n    for my $char (split(//, $message)) {\n\
    \        if (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_found = 0;\n    my $vowel_char = \"\";\n    my $vowel_char_index\
    \ = 0;\n    my $vowel_char_count = 0;\n    my $vowel_char_found = 0;\n    my $vowel_char_next\
    \ = \"\";\n    my $vowel_char_next_index = 0;\n    my $vowel_char_next_count =\
    \ 0;\n    my $vowel_char_next_found = 0;\n    my $vowel_char_next_next = \"\"\
    ;\n    my $vowel_char_next_next_index = 0;\n    my $vowel_char_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_found = 0;\n    my $vowel_char_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_index = 0;\n    my $vowel_char_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_found = 0;\n    my $vowel_char_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_index = 0;\n    my $vowel_char_next_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_next_found = 0;\n    my $vowel_char_next_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_next_index = 0;\n    my $vowel_char_next_next_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_next_next_found =\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpv2c_p6v0.pl line 42, at end
    of line

    syntax error at /tmp/tmpv2c_p6v0.pl line 42, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpv2c_p6v0.pl line 69, at end of
    line

    syntax error at /tmp/tmpv2c_p6v0.pl line 69, at EOF

    Execution of /tmp/tmpv2c_p6v0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $letter (split //, $message) {\n        if (exists $vowels{$letter})\
    \ {\n            $encoded_message .= $alphabet{$letter};\n        } else {\n \
    \           $encoded_message .= $letter;\n        }\n    }\n    return uc($encoded_message);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_ahead = \"cgkmoqsuwy\";\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc($char);\n            } else {\n                $char\
    \ = lc($char);\n            }\n            if ($vowels =~ /$char/i) {\n      \
    \          $char = substr($vowels_ahead, index($vowels, $char), 1);\n        \
    \    }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded_message = \"\";\n    my $char;\n    my\
    \ $i;\n    my $vowels = \"aeiou\";\n    my $vowel_index;\n    my $vowel_index_plus_two;\n\
    \    my $vowel_index_plus_two_char;\n    my $vowel_index_plus_two_char_upper;\n\
    \    my $vowel_index_plus_two_char_lower;\n    my $vowel_index_plus_two_char_upper_index;\n\
    \    my $vowel_index_plus_two_char_lower_index;\n    my $vowel_index_plus_two_char_upper_index_plus_two;\n\
    \    my $vowel_index_plus_two_char_lower_index_plus_two;\n    my $vowel_index_plus_two_char_upper_index_plus_two_char;\n\
    \    my $vowel_index_plus_two_char_lower_index_plus_two_char;\n    my $vowel_index_plus_two_char_upper_index_plus_two_char_upper;\n\
    \    my $vowel_index_plus_two_char_lower_index_plus_two_char_lower;\n    my $vowel_index_plus_two_char_upper_index_plus_two_char_upper_index;\n\
    \    my $vowel_index_plus_two_char_lower_index_plus_two_char_lower_index;\n  \
    \  my $vowel_index_plus_two_char_upper_index_plus_two_char_upper_index_plus_two;\n\
    \    my $vowel_index_plus_two_char_lower_index_plus_two_char_lower_index_plus_two;\n\
    \    my $vowel_index_plus_two_char_upper_index_plus_two_char_upper_index_plus_two_char;\n\
    \    my $vowel_index_plus_two_char_lower_index_plus_two_char_lower_index_plus_two_char;\n\
    \    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpiibwfnz6.pl line 37,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpiibwfnz6.pl line 37, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpiibwfnz6.pl line 64, at end of line\nsyntax\
    \ error at /tmp/tmpiibwfnz6.pl line 64, at EOF\nExecution of /tmp/tmpiibwfnz6.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660076945
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map\
    \ { $_ => 1 } ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my %letters_lower = map { $_ => 1 } ('a'..'z');\n    my %letters_all = (%letters_upper,\
    \ %letters_lower);\n    my %letters_all_lower = map { lc($_) => 1 } keys %letters_all;\n\
    \    my %letters_all_upper = map { uc($_) => 1 } keys %letters_all;\n    my %letters_all_upper_lower\
    \ = (%letters_all_upper, %letters_all_lower);\n    my %letters_all_lower_upper\
    \ = (%letters_all_lower, %letters_all_upper);\n    my %letters_all_upper_lower_upper\
    \ = (%letters_all_upper, %letters_all_lower, %letters_all_upper);\n    my %letters_all_lower_upper_lower\
    \ = (%letters_all_lower, %letters_all_upper, %letters_all_lower);\n    my %letters_all_upper_lower_upper_lower\
    \ = (%letters_all_upper, %letters_all_lower, %letters_all_upper, %letters_all_lower);\n\
    \    my %letters_all_lower_upper_lower_upper = (%letters_all_lower, %letters_all_upper,\
    \ %letters_all_lower, %letters_all_upper);\n    my %letters_all_upper_lower_upper_lower_upper\
    \ = (%letters_all_upper, %letters_all_lower, %letters_all_upper, %letters_all_lower,\
    \ %letters_all_upper);\n    my %letters_all_lower_upper_lower_upper_lower = (%letters_all_lower,\
    \ %letters_all_upper, %letters_all_lower, %letters_all_upper, %letters_all_lower);\n\
    \    my %letters_all_upper_lower_upper_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4fbaalif.pl line 31, at end
    of line

    syntax error at /tmp/tmp4fbaalif.pl line 31, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4fbaalif.pl line 58, at end of
    line

    syntax error at /tmp/tmp4fbaalif.pl line 58, at EOF

    Execution of /tmp/tmp4fbaalif.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660076945
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my\
    \ $vowels_hash = {};\n    for (my $i = 0; $i < length($vowels); $i++) {\n    \
    \    $vowels_hash->{substr($vowels, $i, 1)} = 1;\n        $vowels_encoded_hash->{substr($vowels_encoded,\
    \ $i, 1)} = 1;\n    }\n    for (my $i = 0; $i < length($message); $i++) {\n  \
    \      my $char = substr($message, $i, 1);\n        if ($vowels_hash->{$char})\
    \ {\n            $encoded .= $vowels_encoded_hash->{$char};\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded .= chr(ord($char) - 32);\n        } elsif\
    \ ($char =~ /[A-Z]/) {\n            $encoded .= chr(ord($char) + 32);\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660076945
