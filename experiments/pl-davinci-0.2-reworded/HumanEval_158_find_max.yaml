name: HumanEval_158_find_max
language: pl
prompt: "# Write a function that accepts an array of strings.\n# The array contains\
  \ different words. Return the word with maximum number\n# of unique characters.\
  \ If multiple strings have maximum number of unique\n# characters, return the one\
  \ which comes first in lexicographical order.\n# >>> find_max([\"name\", \"of\"\
  , \"string\"])\n# \"string\"\n# >>> find_max([\"name\", \"enam\", \"game\"])\n#\
  \ \"enam\"\n# >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\nsub find_max\
  \ {\n    my($words) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n\
  \        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"\
  cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\"\
  , \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\",\
  \ \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max_word = $words->[0];\n    my $max_unique = 0;\n    for my\
    \ $word (@$words) {\n        my $unique = 0;\n        my %seen;\n        for my\
    \ $char (split(//, $word)) {\n            $unique++ unless $seen{$char}++;\n \
    \       }\n        if ($unique > $max_unique) {\n            $max_unique = $unique;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max_word = \"\";\n    my $max_count = 0;\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n   \
    \ my $max_count = count_unique_chars($max_word);\n    for my $word (@$words) {\n\
    \        my $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n   \
    \ my $max_count = 0;\n    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_word = $words->[0];\n    my $max_unique = unique_chars($max_word);\n  \
    \  for my $word (@$words) {\n        my $unique = unique_chars($word);\n     \
    \   if ($unique > $max_unique) {\n            $max_unique = $unique;\n       \
    \     $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_word = \"\";\n    my $max_count = 0;\n    foreach my $word (@$words) {\n\
    \        my %chars = ();\n        foreach my $char (split(//, $word)) {\n    \
    \        $chars{$char} = 1;\n        }\n        my $count = scalar(keys %chars);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words) {\n    \
    \    my $count = 0;\n        my %seen;\n        foreach my $char (split //, $word)\
    \ {\n            $count++ unless $seen{$char}++;\n        }\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_word = $word;\n    \
    \    }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n \
    \   my $max_count = count_unique_chars($max_word);\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n   \
    \ my $max_count = count_unique_chars($max_word);\n    for my $word (@$words) {\n\
    \        my $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}", "    my $max = 0;\n    my $max_word =\
    \ \"\";\n    foreach my $word (@$words) {\n        my %seen;\n        my $count\
    \ = 0;\n        foreach my $char (split(//, $word)) {\n            if (!$seen{$char})\
    \ {\n                $count++;\n                $seen{$char} = 1;\n          \
    \  }\n        }\n        if ($count > $max) {\n            $max = $count;\n  \
    \          $max_word = $word;\n        }\n    }\n    return $max_word;\n}", " \
    \   my $max_word = $words->[0];\n    my $max_count = count_unique($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique($word);\n    \
    \    if ($count > $max_count) {\n            $max_count = $count;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my $max_word\
    \ = $words->[0];\n    my $max_count = 0;\n    for my $word (@$words) {\n     \
    \   my $count = count_unique_chars($word);\n        if ($count > $max_count) {\n\
    \            $max_count = $count;\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}", "    my $max_word = \"\";\n    my $max_count\
    \ = 0;\n    for my $word (@$words) {\n        my %seen;\n        my $count = 0;\n\
    \        for my $c (split //, $word) {\n            $count++ if !$seen{$c}++;\n\
    \        }\n        if ($count > $max_count) {\n            $max_count = $count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max_word = $words->[0];\n    my $max_count = count_unique_chars($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_word = $words->[0];\n    my $max_count = count_unique_chars($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_word = $words->[0];\n    my $max_count = count_unique_chars($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_word = \"\";\n    my $max_count = 0;\n    for my $word (@$words) {\n  \
    \      my %chars;\n        for my $char (split //, $word) {\n            $chars{$char}\
    \ = 1;\n        }\n        my $count = scalar keys %chars;\n        if ($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n\
    \    my $max_count = count_unique($max_word);\n    for my $word (@$words) {\n\
    \        my $count = count_unique($word);\n        if ($count > $max_count) {\n\
    \            $max_count = $count;\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}", "    my $max_word = \"\";\n    my $max_count\
    \ = 0;\n    foreach my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_word = $words->[0];\n    my $max_count = count_unique_chars($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
