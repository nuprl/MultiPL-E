name: HumanEval_132_is_nested
language: pl
prompt: "# Create a function that takes a string as input which contains only square\
  \ brackets.\n# The function should return 1 if and only if there is a valid subsequence\
  \ of brackets \n# where at least one bracket in the subsequence is nested.\n# >>>\
  \ is_nested(\"[[]]\")\n# 1\n# >>> is_nested(\"[]]]]]]][[[[[]\")\n# \"\"\n# >>> is_nested(\"\
  [][]\")\n# \"\"\n# >>> is_nested(\"[]\")\n# \"\"\n# >>> is_nested(\"[[][]]\")\n\
  # 1\n# >>> is_nested(\"[[]][[\")\n# 1\nsub is_nested {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n\
  \        if(eq_deeply($candidate->(\"[[]]\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  [][]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"[]\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"[[]][[\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    my\
    \ $last = \"\";\n    for my $char (split //, $string) {\n        if ($char eq\
    \ \"[\") {\n            $open++;\n            if ($last eq \"]\") {\n        \
    \        $nested = 1;\n            }\n        } elsif ($char eq \"]\") {\n   \
    \         $close++;\n        }\n        $last = $char;\n    }\n    if ($open ==\
    \ $close && $nested) {\n        return 1;\n    } else {\n        return \"\";\n\
    \    }\n}", "    my $count = 0;\n    my $flag = 0;\n    for my $char (split //,\
    \ $string) {\n        if ($char eq '[') {\n            $count++;\n        }\n\
    \        elsif ($char eq ']') {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            $flag = 1;\n        }\n    }\n    if ($count ==\
    \ 0 && $flag == 1) {\n        return 1;\n    }\n    else {\n        return \"\"\
    ;\n    }\n}", "    my @stack;\n    my $result = 0;\n    for my $char (split //,\
    \ $string) {\n        if ($char eq '[') {\n            push @stack, $char;\n \
    \       }\n        elsif ($char eq ']') {\n            if (@stack) {\n       \
    \         pop @stack;\n                $result = 1;\n            }\n         \
    \   else {\n                return \"\";\n            }\n        }\n    }\n  \
    \  return $result;\n}", "    my $count = 0;\n    my $nested = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            $nested = 1;\n        }\n    }\n    return\
    \ $nested;\n}", "    my $count = 0;\n    my $nested = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $count++;\n       \
    \ }\n        elsif ($char eq ']') {\n            $count--;\n        }\n      \
    \  if ($count < 0) {\n            $nested = 1;\n        }\n    }\n    return $nested;\n\
    }", "    my $count = 0;\n    my $nested = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        }\n        elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            $nested = 1;\n        }\n    }\n    return $nested;\n}", "  \
    \  my @stack;\n    for my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            push @stack, $char;\n        }\n        elsif ($char eq ']')\
    \ {\n            if (@stack) {\n                pop @stack;\n            }\n \
    \           else {\n                return '';\n            }\n        }\n   \
    \ }\n    return @stack ? '' : 1;\n}", "    my $count = 0;\n    my $is_nested =\
    \ 0;\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n  \
    \          $count++;\n        } elsif ($char eq ']') {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            $is_nested = 1;\n        }\n\
    \    }\n    return $is_nested;\n}", "    my $count = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $count++;\n       \
    \ }\n        elsif ($char eq ']') {\n            $count--;\n        }\n      \
    \  if ($count < 0) {\n            return '';\n        }\n    }\n    return $count\
    \ == 0 ? 1 : '';\n}", "    my $count = 0;\n    my $nested = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            $nested = 1;\n        }\n    }\n    return\
    \ $nested;\n}", "    my @stack;\n    my $nested = 0;\n    my $open = 0;\n    my\
    \ $close = 0;\n    my $i = 0;\n    while($i < length($string)) {\n        my $char\
    \ = substr($string, $i, 1);\n        if($char eq \"[\") {\n            push(@stack,\
    \ $char);\n            $open++;\n        } elsif($char eq \"]\") {\n         \
    \   if(scalar(@stack) > 0) {\n                pop(@stack);\n                $nested\
    \ = 1;\n            }\n            $close++;\n        }\n        $i++;\n    }\n\
    \    if($nested == 1 && $open == $close) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    my @stack;\n    for my $char (split //,\
    \ $string) {\n        if ($char eq '[') {\n            push @stack, $char;\n \
    \       }\n        elsif ($char eq ']') {\n            if (@stack == 0) {\n  \
    \              return '';\n            }\n            else {\n               \
    \ pop @stack;\n            }\n        }\n    }\n    return @stack == 0 ? 1 : '';\n\
    }", "    my $count = 0;\n    my $nested = 0;\n    foreach my $char (split //,\
    \ $string) {\n        if ($char eq '[') {\n            $count++;\n        }\n\
    \        elsif ($char eq ']') {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            $nested = 1;\n        }\n    }\n    return $nested;\n\
    }", "    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $open++;\n \
    \       } elsif ($char eq ']') {\n            $close++;\n        }\n        if\
    \ ($close > $open) {\n            $nested = 1;\n        }\n    }\n    return $nested;\n\
    }", "    my $count = 0;\n    my $nested = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        }\n        elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            $nested = 1;\n        }\n    }\n    return $nested;\n}", "  \
    \  my $count = 0;\n    my $nested = 0;\n    for my $char (split //, $string) {\n\
    \        if ($char eq '[') {\n            $count++;\n        }\n        elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            $nested = 1;\n        }\n    }\n    return $nested;\n}", "  \
    \  my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $open++;\n        }\n\
    \        elsif ($char eq ']') {\n            $close++;\n        }\n        if\
    \ ($open > 0 && $close > 0) {\n            $nested = 1;\n        }\n    }\n  \
    \  return $nested;\n}", "    my $count = 0;\n    my $nested = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            $nested = 1;\n        }\n    }\n    return\
    \ $nested;\n}", "    my $count = 0;\n    for my $char (split //, $string) {\n\
    \        if ($char eq '[') {\n            $count++;\n        }\n        elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            return \"\";\n        }\n    }\n    return $count ? \"\" : 1;\n\
    }", "    my $count = 0;\n    my $nested = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        }\n        elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            $nested = 1;\n        }\n    }\n    return $nested;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
