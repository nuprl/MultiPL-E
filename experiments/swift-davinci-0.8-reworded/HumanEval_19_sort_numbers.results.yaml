language: swift
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // put your code\
    \ here\n    let numStr = numbers.components(separatedBy: \" \")\n    let numArr\
    \ = numStr.map { Int(numToInt[$0]!) }\n    let sortedNumArr = numArr.sorted()\n\
    \    let sortedNumStr = sortedNumArr.map {intToNum[String($0)]!}\n    return sortedNumStr.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0iw_ve06.swift:9:26: error: value of type 'String' has no member\
    \ 'components'\n    let numStr = numbers.components(separatedBy: \" \")\n    \
    \             ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp0iw_ve06.swift:10:35: error: cannot\
    \ find 'numToInt' in scope\n    let numArr = numStr.map { Int(numToInt[$0]!) }\n\
    \                                  ^~~~~~~~\n/tmp/tmp0iw_ve06.swift:12:42: error:\
    \ cannot find 'intToNum' in scope\n    let sortedNumStr = sortedNumArr.map {intToNum[String($0)]!}\n\
    \                                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let valid = [\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"]\n    let num = numbers.split(separator: \" \").map{String($0)}\n\
    \    let nums = num.map{valid.firstIndex(of: $0)!}\n    let sorted = nums.sorted()\n\
    \    return sorted.map{valid[$0]}.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numArr = numbers.components(separatedBy:\
    \ \" \")\n    let numDict = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3,\
    \ \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\":\
    \ 9]\n    var numDictSorted: [String: Int] = [:]\n    for each in numArr {\n \
    \       numDictSorted[each] = numDict[each]\n    }\n    return \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpj4820pvm.swift:8:26: error: value of type 'String' has no member\
    \ 'components'\n    var numArr = numbers.components(separatedBy: \" \")\n    \
    \             ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return numbers.split(separator:\
    \ \" \").sorted(by: {\n        let n1 = Int(String($0)) ?? 0\n        let n2 =\
    \ Int(String($1)) ?? 0\n        return n1 < n2\n    }).joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpm1urv1pl/tmpm1urv1pl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf83a11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf83708b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf83708988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf837077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm1urv1pl                        0x0000562f90d84a6f <unavailable> + 6767

    5    libc.so.6                          0x00002abf83bfd460 __libc_start_main +
    245

    6    tmpm1urv1pl                        0x0000562f90d84389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"]\n    let numbers = numbers.split(separator: \" \")\n    var answer\
    \ = [String]()\n    var dict = [String: Int]()\n    var isValid = true\n    for\
    \ num in numbers {\n        let word = String(num)\n        if let index = nums.firstIndex(of:\
    \ word) {\n            dict[word] = index\n        } else {\n            isValid\
    \ = false\n            break\n        }\n    }\n    if isValid {\n        for\
    \ word in nums {\n            if let index = dict[word] {\n                answer.append(nums[index])\n\
    \            }\n        }\n    }\n    return answer.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = numbers.split(separator:\
    \ \" \")\n    var result = \"\"\n    var map: [String:Int] = [\"zero\":0, \"one\"\
    :1, \"two\":2, \"three\":3, \"four\":4, \"five\":5, \"six\":6, \"seven\":7, \"\
    eight\":8, \"nine\":9]\n    nums.sort { map[String($0)]! < map[String($1)]! }\n\
    \    for n in nums {\n        result.append(n + \" \")\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Convert each\
    \ numerical word to a number (int)\n    let words = numbers.components(separatedBy:\
    \ \" \")\n    let numbersFromWords = words.map{getNumberFromWord(word: $0)}\n\
    \    \n    // Sort and then convert back to a sorted string\n    let sortedNumbers\
    \ = numbersFromWords.sorted()\n    let sortedWords = sortedNumbers.map{getWordFromNumber(number:\
    \ $0)}\n    return sortedWords.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpd7deray2.swift:9:25: error: value of type 'String' has no member\
    \ 'components'\n    let words = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpd7deray2.swift:10:38: error: cannot find\
    \ 'getNumberFromWord' in scope\n    let numbersFromWords = words.map{getNumberFromWord(word:\
    \ $0)}\n                                     ^~~~~~~~~~~~~~~~~\n/tmp/tmpd7deray2.swift:14:41:\
    \ error: cannot find 'getWordFromNumber' in scope\n    let sortedWords = sortedNumbers.map{getWordFromNumber(number:\
    \ $0)}\n                                        ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let intToWord: [Int:\
    \ String] = [0: \"zero\", 1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5:\
    \ \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"]\n    let wordToInt:\
    \ [String: Int] = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\"\
    : 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let\
    \ words = numbers.split(separator: \" \")\n    let nums = words.map { wordToInt[String(describing:\
    \ $0)]! }\n    let sortedNums = nums.sorted()\n    let sortedWords = sortedNums.map\
    \ { intToWord[$0]! }\n    return sortedWords.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numStrings =\
    \ numbers.split(separator: \" \")\n    let sortNumbers = numStrings.sorted(by:\
    \ { return number_to_numeral(number: String($0)) < number_to_numeral(number: String($1))\
    \ })\n    return sortNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwlkkgy5f.swift:9:54: error: cannot find 'number_to_numeral' in\
    \ scope\n    let sortNumbers = numStrings.sorted(by: { return number_to_numeral(number:\
    \ String($0)) < number_to_numeral(number: String($1)) })\n                   \
    \                                  ^~~~~~~~~~~~~~~~~\n/tmp/tmpwlkkgy5f.swift:9:94:\
    \ error: cannot find 'number_to_numeral' in scope\n    let sortNumbers = numStrings.sorted(by:\
    \ { return number_to_numeral(number: String($0)) < number_to_numeral(number: String($1))\
    \ })\n                                                                       \
    \                      ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let dict: [String:\
    \ Int] = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let array = numbers.components(separatedBy:\
    \ \" \")\n    var arrayInt = [Int]()\n    for number in array {\n        arrayInt.append(dict[number]!)\n\
    \    }\n    arrayInt.sort()\n    var string = \"\"\n    for number in arrayInt\
    \ {\n        let numberString = String(number)\n        string += numberString\
    \ + \" \"\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpdw_0cp5e.swift:9:25: error: value of type 'String' has no member\
    \ 'components'\n    let array = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbersAsArray\
    \ = numbers.split(separator: \" \")\n    let sortedNumbersAsArray = numbersAsArray.sorted\
    \ { Int($0)! < Int($1)! }\n    return sortedNumbersAsArray.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpgfo0muxi/tmpgfo0muxi.swift:9: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ef4f1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ef4c14561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ef4c14286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ef4c1413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ef4c13bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpgfo0muxi                        0x00005646f5f2d09c <unavailable> + 8348

    6    libswiftCore.so                    0x00002b2ef4d35c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b2ef4d36110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b2ef4d34d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b2ef4d34d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b2ef4e5a65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b2ef4c49720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b2ef4c4970f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b2ef4d34460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b2ef4d34370 Sequence.sorted(by:)
    + 193

    15   tmpgfo0muxi                        0x00005646f5f2cdc3 <unavailable> + 7619

    16   tmpgfo0muxi                        0x00005646f5f2c911 <unavailable> + 6417

    17   libc.so.6                          0x00002b2ef5109460 __libc_start_main +
    245

    18   tmpgfo0muxi                        0x00005646f5f2c439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let number_list =\
    \ numbers.split(separator: \" \")\n    var nums: [Int] = []\n    for num in number_list\
    \ {\n        nums.append(number_map[String(num)]!)\n    }\n    nums.sort()\n \
    \   var res = \"\"\n    for num in nums {\n        for key in number_map.keys\
    \ {\n            if number_map[key] == num {\n                res += \" \" + key\n\
    \            }\n        }\n    }\n    return String(res.dropFirst())\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number = numbers.components(separatedBy:\
    \ \" \")\n    var intArray = [Int]()\n    for i in number {\n        intArray.append(Int(i)!)\n\
    \    }\n    let sortArray = intArray.sorted()\n    var StringArray = [String]()\n\
    \    for i in sortArray {\n        StringArray.append(String(i))\n    }\n    return\
    \ StringArray.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpxkoq3m7d.swift:8:26: error: value of type 'String' has no member\
    \ 'components'\n    let number = numbers.components(separatedBy: \" \")\n    \
    \             ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(separator:\
    \ \" \")\n    var numeralDict: [String: Int] = [:]\n    var result = \"\"\n  \
    \  \n    numeralDict[\"zero\"] = 0\n    numeralDict[\"one\"] = 1\n    numeralDict[\"\
    two\"] = 2\n    numeralDict[\"three\"] = 3\n    numeralDict[\"four\"] = 4\n  \
    \  numeralDict[\"five\"] = 5\n    numeralDict[\"six\"] = 6\n    numeralDict[\"\
    seven\"] = 7\n    numeralDict[\"eight\"] = 8\n    numeralDict[\"nine\"] = 9\n\
    \    \n    for i in 0..<numbers.count {\n        let num = String(numbers[i])\n\
    \        let numeral = numeralDict[num]\n        numbers[i] = String(numeral!)\n\
    \    }\n    \n    for num in numbers.sorted() {\n        if result == \"\" {\n\
    \            result += num\n        } else {\n            result += \" \" + num\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdc6afyt2.swift:26:22: error: cannot assign value of type 'String'\
    \ to subscript of type 'String.SubSequence' (aka 'Substring')\n        numbers[i]\
    \ = String(numeral!)\n                     ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // TODO: Write your\
    \ implementation here\n    var numbersArray = numbers.components(separatedBy:\
    \ \" \")\n    numbersArray.sort { (first, second) -> Bool in\n        var num1\
    \ = first\n        var num2 = second\n        let dict = [\"zero\": 0, \"one\"\
    : 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\"\
    : 7, \"eight\": 8, \"nine\": 9]\n        var result1 = 0\n        var result2\
    \ = 0\n        var i = 0\n        while i < num1.count {\n            let word\
    \ = String(num1[num1.index(num1.startIndex, offsetBy: i)..<num1.index(num1.startIndex,\
    \ offsetBy: i+4)])\n            if dict[word] != nil {\n                result1\
    \ = dict[word]!\n                num1.removeSubrange(num1.index(num1.startIndex,\
    \ offsetBy: i)..<num1.index(num1.startIndex, offsetBy: i+4))\n               \
    \ i = 0\n            } else {\n                i += 1\n            }\n       \
    \ }\n        i = 0\n        while i < num2.count {\n            let word = String(num2[num2.index(num2.startIndex,\
    \ offsetBy: i)..<num2.index(num2.startIndex, offsetBy: i+4)])\n            if\
    \ dict[word] != nil {\n                result2 = dict[word]!\n               \
    \ num2.removeSubrange(num2.index(num2.startIndex, offsetBy: i)..<num2.index(num2.startIndex,\
    \ offsetBy: i+4))\n                i = 0\n            } else {\n             \
    \   i += 1\n            }\n        }\n        return result1 < result2\n    }\n\
    \    return numbersArray.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm_txk3uv.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    var numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberList =\
    \ numbers.components(separatedBy: \" \")\n    var output = \"\"\n    let numbers\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let stringToInt = [\n        \"zero\": 0,\n      \
    \  \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\":\
    \ 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9\n    ]\n    var integers: [Int] = []\n\
    \    for word in numberList {\n        if numbers.contains(word) {\n         \
    \   let number = stringToInt[word]\n            integers.append(number!)\n   \
    \     }\n    }\n    integers.sort()\n    for number in integers {\n        let\
    \ intToString = [\n            0: \"zero\",\n            1: \"one\",\n       \
    \     2: \"two\",\n            3: \"three\",\n            4: \"four\",\n     \
    \       5: \"five\",\n            6: \"six\",\n            7: \"seven\",\n   \
    \         8: \"eight\",\n            9: \"nine\"\n        ]\n        output +=\
    \ intToString[number]! + \" \"\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdr_xp18d.swift:8:30: error: value of type 'String' has no member\
    \ 'components'\n    let numberList = numbers.components(separatedBy: \" \")\n\
    \                     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numStrings =\
    \ numbers.components(separatedBy: \" \")\n    numStrings.sort(by: { return numberFromString(number:\
    \ $0) < numberFromString(number: $1) })\n    return numStrings.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl2u_cmx6.swift:8:30: error: value of type 'String' has no member\
    \ 'components'\n    var numStrings = numbers.components(separatedBy: \" \")\n\
    \                     ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpl2u_cmx6.swift:9:34: error:\
    \ cannot find 'numberFromString' in scope\n    numStrings.sort(by: { return numberFromString(number:\
    \ $0) < numberFromString(number: $1) })\n                                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpl2u_cmx6.swift:9:65: error: cannot find 'numberFromString' in scope\n\
    \    numStrings.sort(by: { return numberFromString(number: $0) < numberFromString(number:\
    \ $1) })\n                                                                ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let num_map: [String:\
    \ Int] = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let sorted_numbers\
    \ = numbers.split(separator: \" \").map{num_map[String($0)]!}.sorted()\n    return\
    \ sorted_numbers.map{String($0)}.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp4k3r82vo/tmp4k3r82vo.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab948e11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab948b08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab948b08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab948b077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4k3r82vo                        0x000055ed29e72b85 <unavailable> + 7045

    5    libc.so.6                          0x00002ab948ffd460 __libc_start_main +
    245

    6    tmp4k3r82vo                        0x000055ed29e726d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let num_dict = [\"\
    zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"\
    six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (num1, num2) -> Bool in\n        num_dict[String(num1)]!\
    \ < num_dict[String(num2)]!\n    }\n    return sorted.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { number_to_int($0) < number_to_int($1)\
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpugkv_dsr.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpugkv_dsr.swift:9:42: error: cannot\
    \ find 'number_to_int' in scope\n    let sortedNumbers = numbers.sorted { number_to_int($0)\
    \ < number_to_int($1) }\n                                         ^~~~~~~~~~~~~\n\
    /tmp/tmpugkv_dsr.swift:9:62: error: cannot find 'number_to_int' in scope\n   \
    \ let sortedNumbers = numbers.sorted { number_to_int($0) < number_to_int($1) }\n\
    \                                                             ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // your code here\n\
    \    let nums = numbers.split(separator: \" \")\n    let orderedNumbers = nums.sorted{numberOrder[String($0)]!\
    \ < numberOrder[String($1)]!}\n    let orderedString = orderedNumbers.joined(separator:\
    \ \" \")\n    return orderedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp4t_x1go2.swift:10:38: error: cannot find 'numberOrder' in scope\n\
    \    let orderedNumbers = nums.sorted{numberOrder[String($0)]! < numberOrder[String($1)]!}\n\
    \                                     ^~~~~~~~~~~\n/tmp/tmp4t_x1go2.swift:10:65:\
    \ error: cannot find 'numberOrder' in scope\n    let orderedNumbers = nums.sorted{numberOrder[String($0)]!\
    \ < numberOrder[String($1)]!}\n                                              \
    \                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberMap =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let sorted = numbers.split(separator:\
    \ \" \").map{ String($0) }.sorted { numberMap[$0]! < numberMap[$1]! }\n    return\
    \ sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    let numWords\
    \ = numbers.components(separatedBy: \" \")\n    let nums = numWords.map({$0.toNumber()})\n\
    \    let sorted = nums.sorted()\n    let numWords2 = sorted.map({$0.toWord()})\n\
    \    return numWords2.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchgqaius.swift:9:28: error: value of type 'String' has no member\
    \ 'components'\n    let numWords = numbers.components(separatedBy: \" \")\n  \
    \                 ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  // Your code here\n\
    \  return \"one two three\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpl_t0vngw/tmpl_t0vngw.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b708bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b705b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b705b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b705b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_t0vngw                        0x0000561e56989305 <unavailable> + 4869

    5    libc.so.6                          0x00002b9b70aa7460 __libc_start_main +
    245

    6    tmpl_t0vngw                        0x0000561e56988f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let numbersDict =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n  let numbersArray = numbers.components(separatedBy:\
    \ \" \")\n  var sortedArray = numbersArray.map { (string) -> Int in\n    return\
    \ numbersDict[string]!\n  }\n  sortedArray.sort()\n  let finalArray = sortedArray.map\
    \ { (int) -> String in\n    return numbersDict.first(where: { $0.value == int\
    \ })!.key\n  }\n  return finalArray.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp19wioltp.swift:9:30: error: value of type 'String' has no member\
    \ 'components'\n  let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberStrings\
    \ = numbers.components(separatedBy: \" \")\n    let numberInts = numberStrings.map\
    \ { (number) -> Int in\n        let names = [\"zero\": 0, \"one\": 1, \"two\"\
    : 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\"\
    : 8, \"nine\": 9]\n        return names[number]!\n    }\n    let sortedNumberInts\
    \ = numberInts.sorted()\n    let sortedNumbers = sortedNumberInts.map { (number)\
    \ -> String in\n        let names = [0: \"zero\", 1: \"one\", 2: \"two\", 3: \"\
    three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9:\
    \ \"nine\"]\n        return names[number]!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv75rcomr.swift:8:33: error: value of type 'String' has no member\
    \ 'components'\n    let numberStrings = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    let nums =\
    \ numbers.components(separatedBy: \" \")\n    var num = [Int]()\n    \n    for\
    \ n in nums {\n        switch n {\n        case \"zero\":\n            num.append(0)\n\
    \        case \"one\":\n            num.append(1)\n        case \"two\":\n   \
    \         num.append(2)\n        case \"three\":\n            num.append(3)\n\
    \        case \"four\":\n            num.append(4)\n        case \"five\":\n \
    \           num.append(5)\n        case \"six\":\n            num.append(6)\n\
    \        case \"seven\":\n            num.append(7)\n        case \"eight\":\n\
    \            num.append(8)\n        case \"nine\":\n            num.append(9)\n\
    \        default:\n            break\n        }\n    }\n    \n    num.sort()\n\
    \    \n    var words = [String]()\n    \n    for n in num {\n        switch n\
    \ {\n        case 0:\n            words.append(\"zero\")\n        case 1:\n  \
    \          words.append(\"one\")\n        case 2:\n            words.append(\"\
    two\")\n        case 3:\n            words.append(\"three\")\n        case 4:\n\
    \            words.append(\"four\")\n        case 5:\n            words.append(\"\
    five\")\n        case 6:\n            words.append(\"six\")\n        case 7:\n\
    \            words.append(\"seven\")\n        case 8:\n            words.append(\"\
    eight\")\n        case 9:\n            words.append(\"nine\")\n        default:\n\
    \            break\n        }\n    }\n    \n    return words.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6e8w40uo.swift:9:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"\
    three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n\
    \        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n  \
    \  let sorted = numbers.split(separator: \" \").sorted { (first, second) -> Bool\
    \ in\n        return number_map[String(first)]! < number_map[String(second)]!\n\
    \    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let map = [\"zero\"\
    : 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\":\
    \ 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let input = numbers.split(separator:\
    \ \" \").map { map[String($0)]! }\n    let sort = input.sorted()\n    let output\
    \ = sort.map { String($0) }.joined(separator: \" \")\n    return output\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpmcaz09wk/tmpmcaz09wk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62b7e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62b7b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62b7b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62b7b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcaz09wk                        0x000055c21cb4bb85 <unavailable> + 7045

    5    libc.so.6                          0x00002b62b8051460 __libc_start_main +
    245

    6    tmpmcaz09wk                        0x000055c21cb4b6d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    var output = \"\"\n    let dict = [\n        \"zero\": 0,\n    \
    \    \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\"\
    : 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9\n    ]\n    for number in numbers.sorted(by:\
    \ { dict[$0]! < dict[$1]! }) {\n        output += \"\\(number) \"\n    }\n   \
    \ return String(output.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpevj7xdgd.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\";\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpb0lye13_/tmpb0lye13_.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abecd65ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abecd351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abecd351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abecd3507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0lye13_                        0x0000560cc2add3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002abecd846460 __libc_start_main +
    245

    6    tmpb0lye13_                        0x0000560cc2adcf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberMapping\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let digits = numbers.split(separator:\
    \ \" \").map({ numberMapping[String($0)]! })\n    return digits.sorted().map({\
    \ String($0) }).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: Exception
  stderr: 'tmphtmu566r/tmphtmu566r.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3382b71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3382868b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3382868988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33828677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphtmu566r                        0x000055ca5fa9db85 <unavailable> + 7045

    5    libc.so.6                          0x00002b3382d5d460 __libc_start_main +
    245

    6    tmphtmu566r                        0x000055ca5fa9d6d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let dictionary =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let orderedDictionary\
    \ = dictionary.sorted(by: {$0.value < $1.value})\n    var finalString = \"\"\n\
    \    var words = numbers.components(separatedBy: \" \")\n    for key in orderedDictionary\
    \ {\n        for word in words {\n            if (word == key.key) {\n       \
    \         finalString += word + \" \"\n            }\n        }\n    }\n    return\
    \ finalString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa8jbeect.swift:11:25: error: value of type 'String' has no member\
    \ 'components'\n    var words = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    var numbersIntArray = [Int]()\n\
    \    var returnString = \"\"\n    \n    for number in numbersArray {\n       \
    \ switch number {\n        case \"zero\":\n            numbersIntArray.append(0)\n\
    \        case \"one\":\n            numbersIntArray.append(1)\n        case \"\
    two\":\n            numbersIntArray.append(2)\n        case \"three\":\n     \
    \       numbersIntArray.append(3)\n        case \"four\":\n            numbersIntArray.append(4)\n\
    \        case \"five\":\n            numbersIntArray.append(5)\n        case \"\
    six\":\n            numbersIntArray.append(6)\n        case \"seven\":\n     \
    \       numbersIntArray.append(7)\n        case \"eight\":\n            numbersIntArray.append(8)\n\
    \        case \"nine\":\n            numbersIntArray.append(9)\n        default:\n\
    \            print(\"Error: Invalid input for Numbers\")\n        }\n    }\n \
    \   \n    numbersIntArray.sort()\n    \n    for number in numbersIntArray {\n\
    \        switch number {\n        case 0:\n            returnString += \"zero\
    \ \"\n        case 1:\n            returnString += \"one \"\n        case 2:\n\
    \            returnString += \"two \"\n        case 3:\n            returnString\
    \ += \"three \"\n        case 4:\n            returnString += \"four \"\n    \
    \    case 5:\n            returnString += \"five \"\n        case 6:\n       \
    \     returnString += \"six \"\n        case 7:\n            returnString += \"\
    seven \"\n        case 8:\n            returnString += \"eight \"\n        case\
    \ 9:\n            returnString += \"nine \"\n        default:\n            print(\"\
    Error: Invalid input for Numbers\")\n        }\n    }\n    \n    return returnString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplabvq7ls.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    let sortedNumbers = numbersArray.sorted(by:\
    \ {$0 < $1})\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfnr65gpd.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sortedNums = nums.sorted { nums.firstIndex(of: $0)! < nums.firstIndex(of:\
    \ $1)! }\n    return sortedNums.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp2ylbyrnm/tmp2ylbyrnm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab04686ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab046561b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab046561988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0465607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ylbyrnm                        0x0000563776c5fb3f <unavailable> + 6975

    5    libc.so.6                          0x00002ab046a56460 __libc_start_main +
    245

    6    tmp2ylbyrnm                        0x0000563776c5f459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let words = numbers.split(separator:\
    \ \" \")\n    let wordToNumber = words.map { word -> Int in\n        switch word\
    \ {\n        case \"zero\":\n            return 0\n        case \"one\":\n   \
    \         return 1\n        case \"two\":\n            return 2\n        case\
    \ \"three\":\n            return 3\n        case \"four\":\n            return\
    \ 4\n        case \"five\":\n            return 5\n        case \"six\":\n   \
    \         return 6\n        case \"seven\":\n            return 7\n        case\
    \ \"eight\":\n            return 8\n        case \"nine\":\n            return\
    \ 9\n        default:\n            fatalError(\"Invalid argument\")\n        }\n\
    \    }\n    let sorted = wordToNumber.sorted()\n    let numberToWord = sorted.map\
    \ { number -> String in\n        switch number {\n        case 0:\n          \
    \  return \"zero\"\n        case 1:\n            return \"one\"\n        case\
    \ 2:\n            return \"two\"\n        case 3:\n            return \"three\"\
    \n        case 4:\n            return \"four\"\n        case 5:\n            return\
    \ \"five\"\n        case 6:\n            return \"six\"\n        case 7:\n   \
    \         return \"seven\"\n        case 8:\n            return \"eight\"\n  \
    \      case 9:\n            return \"nine\"\n        default:\n            fatalError(\"\
    Invalid argument\")\n        }\n    }\n    return numberToWord.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  return \"\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpwujnbez8/tmpwujnbez8.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7e43dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d7e134b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d7e134988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d7e1337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwujnbez8                        0x00005616f04763f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b3d7e629460 __libc_start_main +
    245

    6    tmpwujnbez8                        0x00005616f0475f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sortedNumbers\
    \ = numbers.split(separator: \" \").sorted()\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpisym4411/tmpisym4411.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac806b4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac806843b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac806843988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8068427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpisym4411                        0x000056382b2d1882 <unavailable> + 6274

    5    libc.so.6                          0x00002ac806d38460 __libc_start_main +
    245

    6    tmpisym4411                        0x000056382b2d12b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let unsortedNumbers\
    \ = numbers.split(separator: \" \")\n    let convert = [\"zero\" : 0, \"one\"\
    \ : 1, \"two\" : 2, \"three\" : 3, \"four\" : 4, \"five\" : 5, \"six\" : 6, \"\
    seven\" : 7, \"eight\" : 8, \"nine\" : 9]\n    var returnString = \"\"\n    var\
    \ sortedArray: [Int] = []\n    for i in unsortedNumbers {\n        sortedArray.append(convert[String(i)]!)\n\
    \    }\n    sortedArray.sort()\n    for i in sortedArray {\n        returnString\
    \ += convert.first(where: {$0.value == i})!.key + \" \"\n    }\n    return returnString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9wmd4vg_/tmp9wmd4vg_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c9d23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c9a1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c9a1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c9a197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9wmd4vg_                        0x00005590f2534d05 <unavailable> + 7429

    5    libc.so.6                          0x00002b51c9f0f460 __libc_start_main +
    245

    6    tmp9wmd4vg_                        0x00005590f2534859 <unavailable> + 6233

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let nums = numbers.map({ numeral_to_num(numeral: String($0)) }).sorted()\n\
    \    return nums.map({ num_to_numeral(num: $0) }).joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjy43wywe.swift:9:30: error: cannot find 'numeral_to_num' in scope\n\
    \    let nums = numbers.map({ numeral_to_num(numeral: String($0)) }).sorted()\n\
    \                             ^~~~~~~~~~~~~~\n/tmp/tmpjy43wywe.swift:10:23: error:\
    \ cannot find 'num_to_numeral' in scope\n    return nums.map({ num_to_numeral(num:\
    \ $0) }).joined(separator: \" \")\n                      ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // split on spaces\n\
    \    let nums = numbers.split(separator: \" \")\n    // convert strings to ints\n\
    \    let ints = nums.map({ Int(String($0))! })\n    // sort the numbers\n    let\
    \ sorted = ints.sorted()\n    // return the numbers as strings\n    return sorted.map({\
    \ String($0) }).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: Exception
  stderr: 'tmpqrqttmzn/tmpqrqttmzn.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aba3e72cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba3e423561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aba3e423286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aba3e42313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aba3e422bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqrqttmzn                        0x000055e8b86d31dc <unavailable> + 8668

    6    libswiftCore.so                    0x00002aba3e40b820 Collection.map<A>(_:)
    + 426

    7    tmpqrqttmzn                        0x000055e8b86d2f15 <unavailable> + 7957

    8    tmpqrqttmzn                        0x000055e8b86d296e <unavailable> + 6510

    9    libc.so.6                          0x00002aba3e918460 __libc_start_main +
    245

    10   tmpqrqttmzn                        0x000055e8b86d2589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return String(numbers.components(separatedBy:\
    \ \" \").sorted { numberal_value($0) < numberal_value($1) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp18ts6u0b.swift:8:65: error: cannot find 'numberal_value' in scope\n\
    \    return String(numbers.components(separatedBy: \" \").sorted { numberal_value($0)\
    \ < numberal_value($1) })\n                                                  \
    \              ^~~~~~~~~~~~~~\n/tmp/tmp18ts6u0b.swift:8:86: error: cannot find\
    \ 'numberal_value' in scope\n    return String(numbers.components(separatedBy:\
    \ \" \").sorted { numberal_value($0) < numberal_value($1) })\n               \
    \                                                                      ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var sorted_numbers:\
    \ [Int] = []\n    for number in numbers.split(separator: \" \") {\n        let\
    \ numeral = number.lowercased()\n        if numeral == \"zero\" {\n          \
    \  sorted_numbers.append(0)\n        } else if numeral == \"one\" {\n        \
    \    sorted_numbers.append(1)\n        } else if numeral == \"two\" {\n      \
    \      sorted_numbers.append(2)\n        } else if numeral == \"three\" {\n  \
    \          sorted_numbers.append(3)\n        } else if numeral == \"four\" {\n\
    \            sorted_numbers.append(4)\n        } else if numeral == \"five\" {\n\
    \            sorted_numbers.append(5)\n        } else if numeral == \"six\" {\n\
    \            sorted_numbers.append(6)\n        } else if numeral == \"seven\"\
    \ {\n            sorted_numbers.append(7)\n        } else if numeral == \"eight\"\
    \ {\n            sorted_numbers.append(8)\n        } else if numeral == \"nine\"\
    \ {\n            sorted_numbers.append(9)\n        }\n    }\n    let sorted =\
    \ sorted_numbers.sorted()\n    var result = \"\"\n    for number in sorted {\n\
    \        if number == 0 {\n            result.append(\"zero \")\n        } else\
    \ if number == 1 {\n            result.append(\"one \")\n        } else if number\
    \ == 2 {\n            result.append(\"two \")\n        } else if number == 3 {\n\
    \            result.append(\"three \")\n        } else if number == 4 {\n    \
    \        result.append(\"four \")\n        } else if number == 5 {\n         \
    \   result.append(\"five \")\n        } else if number == 6 {\n            result.append(\"\
    six \")\n        } else if number == 7 {\n            result.append(\"seven \"\
    )\n        } else if number == 8 {\n            result.append(\"eight \")\n  \
    \      } else if number == 9 {\n            result.append(\"nine \")\n       \
    \ }\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_mapping\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let number_array\
    \ = numbers.components(separatedBy: \" \")\n    let number_value_array = number_array.map({\
    \ number_mapping[$0]! }).sorted(by: <)\n    let number_name_array = number_value_array.map({\
    \ n in number_mapping.first { $0.value == n }!.key })\n    return number_name_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyhqihvur.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let number_array = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberChoices\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let numbersArr = numbers.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for num in numbersArr {\n        let numIndex\
    \ = numberChoices.index(of: num)\n        result.append(numIndex!)\n    }\n  \
    \  let sorted = result.sorted()\n    var final = [String]()\n    for num in sorted\
    \ {\n        final.append(numberChoices[num])\n    }\n    return final.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp69tyvmik.swift:9:30: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArr = numbers.components(separatedBy: \" \")\n\
    \                     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var splitNumbers\
    \ = numbers.split(separator: \" \")\n    let nums = [\"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n  \
    \  for i in 0..<splitNumbers.count {\n        for j in 0..<nums.count {\n    \
    \        if(splitNumbers[i] == nums[j]) {\n                splitNumbers[i] = String(j)\n\
    \            }\n        }\n    }\n    splitNumbers.sort()\n    for i in 0..<splitNumbers.count\
    \ {\n        splitNumbers[i] = nums[Int(splitNumbers[i])!]\n    }\n    var sortedNumbers\
    \ = \"\"\n    for i in 0..<splitNumbers.count {\n        sortedNumbers += splitNumbers[i]\
    \ + \" \"\n    }\n    return sortedNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkqah3g5x.swift:13:35: error: cannot assign value of type 'String'\
    \ to subscript of type 'String.SubSequence' (aka 'Substring')\n              \
    \  splitNumbers[i] = String(j)\n                                  ^~~~~~~~~\n\
    /tmp/tmpkqah3g5x.swift:19:31: error: cannot assign value of type 'String' to subscript\
    \ of type 'String.SubSequence' (aka 'Substring')\n        splitNumbers[i] = nums[Int(splitNumbers[i])!]\n\
    \                          ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    return (nums.sorted(by: { Int($0)! < Int($1)! })).joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbr3hkfnn.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"]\n    let strings = numbers.split(separator: \" \")\n    let sorted\
    \ = strings.sorted { nums.firstIndex(of: String($0))! < nums.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Create array\
    \ of ints\n    var ints: [Int] = []\n    // Split string\n    let split = numbers.split(separator:\
    \ \" \")\n    // Run through and append the number to the ints array\n    for\
    \ item in split {\n        switch item {\n        case \"zero\":\n           \
    \ ints.append(0)\n        case \"one\":\n            ints.append(1)\n        case\
    \ \"two\":\n            ints.append(2)\n        case \"three\":\n            ints.append(3)\n\
    \        case \"four\":\n            ints.append(4)\n        case \"five\":\n\
    \            ints.append(5)\n        case \"six\":\n            ints.append(6)\n\
    \        case \"seven\":\n            ints.append(7)\n        case \"eight\":\n\
    \            ints.append(8)\n        case \"nine\":\n            ints.append(9)\n\
    \        default:\n            ints.append(0)\n        }\n    }\n    // Sort ints\n\
    \    ints.sort()\n    // Create a new String\n    var final = \"\"\n    // Run\
    \ through the ints array\n    for i in ints {\n        // Append number to string\n\
    \        switch i {\n        case 0:\n            final += \"zero \"\n       \
    \ case 1:\n            final += \"one \"\n        case 2:\n            final +=\
    \ \"two \"\n        case 3:\n            final += \"three \"\n        case 4:\n\
    \            final += \"four \"\n        case 5:\n            final += \"five\
    \ \"\n        case 6:\n            final += \"six \"\n        case 7:\n      \
    \      final += \"seven \"\n        case 8:\n            final += \"eight \"\n\
    \        case 9:\n            final += \"nine \"\n        default:\n         \
    \   final += \"zero \"\n        }\n    }\n    // Remove last space\n    let index\
    \ = final.index(final.endIndex, offsetBy: -1)\n    final = String(final[..<index])\n\
    \    // Return\n    return final\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:158: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5e915bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5e8e52561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5e8e52286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5e8e5213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5e8e51bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ae5e8f85b0d <unavailable> + 2693901

    6    tmprdzvag5r                        0x00005626bb4fbf66 <unavailable> + 12134

    7    tmprdzvag5r                        0x00005626bb4fabc5 <unavailable> + 7109

    8    libc.so.6                          0x00002ae5e9347460 __libc_start_main +
    245

    9    tmprdzvag5r                        0x00005626bb4fa8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let words = numbers.split(separator: \" \")\n    let\
    \ indexes = words.map { numberals.firstIndex(of: String($0)) }\n    return zip(indexes,\
    \ words).sorted { $0.0! < $1.0! }.map { String($0.1) }.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let number_mapping\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n  let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n  var result_array = [Int]()\n  for\
    \ number in numbers_array {\n    if let converted_number = number_mapping[number]\
    \ {\n      result_array.append(converted_number)\n    }\n  }\n  result_array.sort(by:\
    \ <)\n  var result_string = \"\"\n  for number in result_array {\n    for (number_string,\
    \ number_int) in number_mapping {\n      if number_int == number {\n        result_string.append(number_string)\n\
    \        result_string.append(\" \")\n      }\n    }\n  }\n  return result_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1lhgbb66.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n  let numbers_array = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_table:\
    \ [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9\n    ]\n    var sorted_numbers: [Int] = []\n    for n in numbers.split(separator:\
    \ \" \") {\n        sorted_numbers.append(number_table[String(n)]!)\n    }\n \
    \   sorted_numbers.sort()\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp3rjejstr/tmp3rjejstr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bdf518c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bdf20fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bdf20f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bdf20e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3rjejstr                        0x0000557ad0f7fddf <unavailable> + 7647

    5    libc.so.6                          0x00002b1bdf704460 __libc_start_main +
    245

    6    tmp3rjejstr                        0x0000557ad0f7f6f9 <unavailable> + 5881

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    //TODO: write your\
    \ implementation of this method here.\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpufnlgvvx/tmpufnlgvvx.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfebe68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfebb5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfebb5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfebb5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpufnlgvvx                        0x000055d023b043f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adfec054460 __libc_start_main +
    245

    6    tmpufnlgvvx                        0x000055d023b03f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  var num_dict = [String:\
    \ Int]()\n  let str_number_array = numbers.split(separator: \" \")\n  for number\
    \ in str_number_array {\n    switch number {\n    case \"zero\":\n      num_dict[String(number)]\
    \ = 0\n    case \"one\":\n      num_dict[String(number)] = 1\n    case \"two\"\
    :\n      num_dict[String(number)] = 2\n    case \"three\":\n      num_dict[String(number)]\
    \ = 3\n    case \"four\":\n      num_dict[String(number)] = 4\n    case \"five\"\
    :\n      num_dict[String(number)] = 5\n    case \"six\":\n      num_dict[String(number)]\
    \ = 6\n    case \"seven\":\n      num_dict[String(number)] = 7\n    case \"eight\"\
    :\n      num_dict[String(number)] = 8\n    case \"nine\":\n      num_dict[String(number)]\
    \ = 9\n    default:\n      break\n    }\n  }\n  let sorted_numbers = num_dict.sorted\
    \ { $0.value < $1.value }\n  return sorted_numbers.map { String($0.key) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var digits: [Int]\
    \ = []\n    for number in numbers.split(separator: \" \") {\n        switch number\
    \ {\n        case \"zero\":\n            digits.append(0)\n        case \"one\"\
    :\n            digits.append(1)\n        case \"two\":\n            digits.append(2)\n\
    \        case \"three\":\n            digits.append(3)\n        case \"four\"\
    :\n            digits.append(4)\n        case \"five\":\n            digits.append(5)\n\
    \        case \"six\":\n            digits.append(6)\n        case \"seven\":\n\
    \            digits.append(7)\n        case \"eight\":\n            digits.append(8)\n\
    \        case \"nine\":\n            digits.append(9)\n        default:\n    \
    \        fatalError(\"Invalid digits!\")\n        }\n    }\n    return digits.sorted().map\
    \ { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpvm5nvoda/tmpvm5nvoda.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba76f933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76f62ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76f62a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76f6297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvm5nvoda                        0x000055965deb9b85 <unavailable> + 7045

    5    libc.so.6                          0x00002ba76fb1f460 __libc_start_main +
    245

    6    tmpvm5nvoda                        0x000055965deb96d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    let number\
    \ = numbers.split(separator: \" \")\n    let sortedNumbers = number.sorted {\n\
    \        let pre = makeInt(words: String($0))\n        let next = makeInt(words:\
    \ String($1))\n        return pre < next\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0y4fz3bn.swift:11:19: error: cannot find 'makeInt' in scope\n \
    \       let pre = makeInt(words: String($0))\n                  ^~~~~~~\n/tmp/tmp0y4fz3bn.swift:12:20:\
    \ error: cannot find 'makeInt' in scope\n        let next = makeInt(words: String($1))\n\
    \                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  var numberMap: [String:\
    \ Int] = [:]\n  numberMap[\"zero\"] = 0\n  numberMap[\"one\"] = 1\n  numberMap[\"\
    two\"] = 2\n  numberMap[\"three\"] = 3\n  numberMap[\"four\"] = 4\n  numberMap[\"\
    five\"] = 5\n  numberMap[\"six\"] = 6\n  numberMap[\"seven\"] = 7\n  numberMap[\"\
    eight\"] = 8\n  numberMap[\"nine\"] = 9\n  \n  var sorted = numbers.split(separator:\
    \ \" \").sorted { (string1, string2) -> Bool in\n    guard let num1 = numberMap[String(string1)],\
    \ let num2 = numberMap[String(string2)] else {\n      fatalError(\"Number text\
    \ not valid\")\n    }\n    return num1 < num2\n  }\n  \n  return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbersList\
    \ = numbers.components(separatedBy: \" \")\n    numbersList.sort { (num1, num2)\
    \ -> Bool in\n        return num1 < num2\n    }\n    return numbersList.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_h5sdphe.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    var numbersList = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let words = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = words.sorted(by: { numbersToWord[String($0)]!\
    \ < numbersToWord[String($1)]! })\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppxu2e2ic.swift:9:44: error: cannot find 'numbersToWord' in scope\n\
    \    let sortedNumbers = words.sorted(by: { numbersToWord[String($0)]! < numbersToWord[String($1)]!\
    \ })\n                                           ^~~~~~~~~~~~~\n/tmp/tmppxu2e2ic.swift:9:73:\
    \ error: cannot find 'numbersToWord' in scope\n    let sortedNumbers = words.sorted(by:\
    \ { numbersToWord[String($0)]! < numbersToWord[String($1)]! })\n             \
    \                                                           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    let numbersDictionary:\
    \ [String: Int] = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\"\
    : 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    \n\
    \    let digits = numbers.components(separatedBy: \" \")\n    \n    var numberArray:\
    \ [Int] = []\n    \n    for digit in digits {\n        if let number = numbersDictionary[digit]\
    \ {\n            numberArray.append(number)\n        }\n    }\n    \n    let sortedArray\
    \ = numberArray.sorted()\n    \n    let sortedString = sortedArray.map { String($0)\
    \ }.joined(separator: \" \")\n    \n    return sortedString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2vrk0xaf.swift:11:26: error: value of type 'String' has no member\
    \ 'components'\n    let digits = numbers.components(separatedBy: \" \")\n    \
    \             ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    var numbersArray: [Int] = []\n    for number\
    \ in numbers {\n        switch number {\n        case \"zero\":\n            numbersArray.append(0)\n\
    \        case \"one\":\n            numbersArray.append(1)\n        case \"two\"\
    :\n            numbersArray.append(2)\n        case \"three\":\n            numbersArray.append(3)\n\
    \        case \"four\":\n            numbersArray.append(4)\n        case \"five\"\
    :\n            numbersArray.append(5)\n        case \"six\":\n            numbersArray.append(6)\n\
    \        case \"seven\":\n            numbersArray.append(7)\n        case \"\
    eight\":\n            numbersArray.append(8)\n        case \"nine\":\n       \
    \     numbersArray.append(9)\n        default:\n            print(\"Error!\")\n\
    \        }\n    }\n    var sortedArray = numbersArray.sorted()\n    for number\
    \ in sortedArray {\n        switch number {\n        case 0:\n            result\
    \ += \"zero \"\n        case 1:\n            result += \"one \"\n        case\
    \ 2:\n            result += \"two \"\n        case 3:\n            result += \"\
    three \"\n        case 4:\n            result += \"four \"\n        case 5:\n\
    \            result += \"five \"\n        case 6:\n            result += \"six\
    \ \"\n        case 7:\n            result += \"seven \"\n        case 8:\n   \
    \         result += \"eight \"\n        case 9:\n            result += \"nine\
    \ \"\n        default:\n            print(\"Error!\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5mm02g7x.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numArray = numbers.components(separatedBy:\
    \ \" \")\n    let numDict = numArray.reduce(into: [:]) { (result, item) in\n \
    \       let lowercase = item.lowercased()\n        if result[lowercase] == nil\
    \ {\n            result[lowercase] = 1\n        } else {\n            result[lowercase]!\
    \ += 1\n        }\n    }\n    let totalNumbers = numDict.values.reduce(0, +)\n\
    \    var resultArray = Array(repeating: 0, count: totalNumbers)\n    for key in\
    \ numDict.keys {\n        let num = numDict[key]!\n        switch key {\n    \
    \    case \"zero\":\n            for i in 0..<num {\n                resultArray[i]\
    \ = 0\n            }\n        case \"one\":\n            for i in 0..<num {\n\
    \                resultArray[i] = 1\n            }\n        case \"two\":\n  \
    \          for i in 0..<num {\n                resultArray[i] = 2\n          \
    \  }\n        case \"three\":\n            for i in 0..<num {\n              \
    \  resultArray[i] = 3\n            }\n        case \"four\":\n            for\
    \ i in 0..<num {\n                resultArray[i] = 4\n            }\n        case\
    \ \"five\":\n            for i in 0..<num {\n                resultArray[i] =\
    \ 5\n            }\n        case \"six\":\n            for i in 0..<num {\n  \
    \              resultArray[i] = 6\n            }\n        case \"seven\":\n  \
    \          for i in 0..<num {\n                resultArray[i] = 7\n          \
    \  }\n        case \"eight\":\n            for i in 0..<num {\n              \
    \  resultArray[i] = 8\n            }\n        case \"nine\":\n            for\
    \ i in 0..<num {\n                resultArray[i] = 9\n            }\n        default:\n\
    \            break\n        }\n    }\n    resultArray.sort()\n    var result =\
    \ \"\"\n    for num in resultArray {\n        switch num {\n        case 0:\n\
    \            result += \"zero \"\n        case 1:\n            result += \"one\
    \ \"\n        case 2:\n            result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvhobm94a.swift:95:104: error: expected '}' at end of brace statement\n\
    assert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one\
    \ two three four five six\")\n                                               \
    \                                                        ^\n/tmp/tmpvhobm94a.swift:68:28:\
    \ note: to match this opening '{'\n    for num in resultArray {\n            \
    \               ^\n/tmp/tmpvhobm94a.swift:95:104: error: expected '}' at end of\
    \ brace statement\nassert(sort_numbers(numbers: \"six five four three two one\
    \ zero\") == \"zero one two three four five six\")\n                         \
    \                                                                            \
    \  ^\n/tmp/tmpvhobm94a.swift:7:46: note: to match this opening '{'\nfunc sort_numbers(numbers:\
    \ String) -> String {\n                                             ^\n/tmp/tmpvhobm94a.swift:8:28:\
    \ error: value of type 'String' has no member 'components'\n    let numArray =\
    \ numbers.components(separatedBy: \" \")\n                   ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpvhobm94a.swift:14:30: error: cannot assign through '!': 'result' is a\
    \ 'let' constant\n            result[lowercase]! += 1\n            ~~~~~~    \
    \       ^\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if numbers.isEmpty\
    \ {\n        return \"\"\n    }\n    return numbers.split(separator: \" \").map\
    \ {sort_order[String($0)]}.sorted().map {sort_order.inverted[$0]}.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3nellen0.swift:11:47: error: cannot find 'sort_order' in scope\n\
    \    return numbers.split(separator: \" \").map {sort_order[String($0)]}.sorted().map\
    \ {sort_order.inverted[$0]}.joined(separator: \" \")\n                       \
    \                       ^~~~~~~~~~\n/tmp/tmp3nellen0.swift:11:85: error: cannot\
    \ find 'sort_order' in scope\n    return numbers.split(separator: \" \").map {sort_order[String($0)]}.sorted().map\
    \ {sort_order.inverted[$0]}.joined(separator: \" \")\n                       \
    \                                                             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sorted = numbers.split(separator:\
    \ \" \").sorted { (first, second) -> Bool in\n        numeral_value(numeral: String(first))\
    \ < numeral_value(numeral: String(second))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17wohz7o.swift:9:9: error: cannot find 'numeral_value' in scope\n\
    \        numeral_value(numeral: String(first)) < numeral_value(numeral: String(second))\n\
    \        ^~~~~~~~~~~~~\n/tmp/tmp17wohz7o.swift:9:49: error: cannot find 'numeral_value'\
    \ in scope\n        numeral_value(numeral: String(first)) < numeral_value(numeral:\
    \ String(second))\n                                                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let dict: [String:\
    \ Int] = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numeralArray\
    \ = numbers.components(separatedBy: \" \")\n    let numArray = numeralArray.map\
    \ { dict[$0]! }\n    let sortedArray = numArray.sorted()\n    var result: String\
    \ = \"\"\n    for num in sortedArray {\n        for (key, value) in dict {\n \
    \           if value == num {\n                result += key + \" \"\n       \
    \     }\n        }\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1t4jx_n2.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let numeralArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp1t4jx_n2.swift:20:19: error:\
    \ value of type 'String' has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1t4jx_n2.swift:20:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var result: String\
    \ = \"\"\n    var numberStrings: [String] = []\n    var sortedNumbers: [Int] =\
    \ []\n    // fill the array with the string values\n    numberStrings = numbers.components(separatedBy:\
    \ \" \")\n    for number in numberStrings {\n        // convert strings to numbers\
    \ and add to the array\n        switch number {\n        case \"zero\":\n    \
    \        sortedNumbers.append(0)\n        case \"one\":\n            sortedNumbers.append(1)\n\
    \        case \"two\":\n            sortedNumbers.append(2)\n        case \"three\"\
    :\n            sortedNumbers.append(3)\n        case \"four\":\n            sortedNumbers.append(4)\n\
    \        case \"five\":\n            sortedNumbers.append(5)\n        case \"\
    six\":\n            sortedNumbers.append(6)\n        case \"seven\":\n       \
    \     sortedNumbers.append(7)\n        case \"eight\":\n            sortedNumbers.append(8)\n\
    \        case \"nine\":\n            sortedNumbers.append(9)\n        default:\n\
    \            sortedNumbers.append(0)\n        }\n    }\n    // sort the number\
    \ array\n    sortedNumbers.sort()\n    // now convert back to string and return\
    \ the array\n    for number in sortedNumbers {\n        switch number {\n    \
    \    case 0:\n            result += \"zero \"\n        case 1:\n            result\
    \ += \"one \"\n        case 2:\n            result += \"two \"\n        case 3:\n\
    \            result += \"three \"\n        case 4:\n            result += \"four\
    \ \"\n        case 5:\n            result += \"five \"\n        case 6:\n    \
    \        result += \"six \"\n        case 7:\n            result += \"seven \"\
    \n        case 8:\n            result += \"eight \"\n        case 9:\n       \
    \     result += \"nine \"\n        default:\n            result += \"zero \"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpvzqu70zy.swift:12:29: error: value of type 'String' has no member\
    \ 'components'\n    numberStrings = numbers.components(separatedBy: \" \")\n \
    \                   ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sorted = Array(numbers.split(separator:\
    \ \" \")).sorted(by: { wordToInt(String($0)) < wordToInt(String($1)) })\n    return\
    \ sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9fpexmwo.swift:8:68: error: cannot find 'wordToInt' in scope\n\
    \    let sorted = Array(numbers.split(separator: \" \")).sorted(by: { wordToInt(String($0))\
    \ < wordToInt(String($1)) })\n                                               \
    \                    ^~~~~~~~~\n/tmp/tmp9fpexmwo.swift:8:92: error: cannot find\
    \ 'wordToInt' in scope\n    let sorted = Array(numbers.split(separator: \" \"\
    )).sorted(by: { wordToInt(String($0)) < wordToInt(String($1)) })\n           \
    \                                                                            \
    \    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    var number_list\
    \ = numbers.components(separatedBy: \" \")\n    let number_dict: [String: Int]\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    \n    number_list.sort(by:\
    \ { number_dict[$0]! < number_dict[$1]! })\n    \n    return number_list.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpslrllo4t.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    var number_list = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numbers = nums.map({ num -> Int in\n        switch num {\n \
    \       case \"zero\":\n            return 0\n        case \"one\":\n        \
    \    return 1\n        case \"two\":\n            return 2\n        case \"three\"\
    :\n            return 3\n        case \"four\":\n            return 4\n      \
    \  case \"five\":\n            return 5\n        case \"six\":\n            return\
    \ 6\n        case \"seven\":\n            return 7\n        case \"eight\":\n\
    \            return 8\n        case \"nine\":\n            return 9\n        default:\n\
    \            return -1\n        }\n    })\n    let sorted = numbers.sorted()\n\
    \    let string = sorted.map({ num -> String in\n        switch num {\n      \
    \  case 0:\n            return \"zero\"\n        case 1:\n            return \"\
    one\"\n        case 2:\n            return \"two\"\n        case 3:\n        \
    \    return \"three\"\n        case 4:\n            return \"four\"\n        case\
    \ 5:\n            return \"five\"\n        case 6:\n            return \"six\"\
    \n        case 7:\n            return \"seven\"\n        case 8:\n           \
    \ return \"eight\"\n        case 9:\n            return \"nine\"\n        default:\n\
    \            return \"\"\n        }\n    })\n    return string.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let nums = numbers.map { numeral_to_int(numeral: $0) }\n    let\
    \ sortedNums = nums.sorted { (x, y) -> Bool in\n        x < y\n    }\n    return\
    \ sortedNums.map {\n        int_to_numeral(int: $0)\n    }.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprv7_zluq.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmprv7_zluq.swift:9:30: error: cannot\
    \ find 'numeral_to_int' in scope\n    let nums = numbers.map { numeral_to_int(numeral:\
    \ $0) }\n                             ^~~~~~~~~~~~~~\n/tmp/tmprv7_zluq.swift:14:9:\
    \ error: cannot find 'int_to_numeral' in scope\n        int_to_numeral(int: $0)\n\
    \        ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // TODO\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpudhz9ym8/tmpudhz9ym8.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b927cb80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b927c877b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b927c877988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b927c8767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudhz9ym8                        0x000055a9441183f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b927cd6c460 __libc_start_main +
    245

    6    tmpudhz9ym8                        0x000055a944117f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numberToSort\
    \ = numbers.split(separator: \" \")\n    numberToSort.sort(by: {numberToString(number:\
    \ String($0)) < numberToString(number: String($1))})\n    return numberToSort.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8osamldt.swift:9:28: error: cannot find 'numberToString' in scope\n\
    \    numberToSort.sort(by: {numberToString(number: String($0)) < numberToString(number:\
    \ String($1))})\n                           ^~~~~~~~~~~~~~\n/tmp/tmp8osamldt.swift:9:65:\
    \ error: cannot find 'numberToString' in scope\n    numberToSort.sort(by: {numberToString(number:\
    \ String($0)) < numberToString(number: String($1))})\n                       \
    \                                         ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"not yet\
    \ implemented\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8fuk6e83/tmp8fuk6e83.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab51235c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab50f2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab50f2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab50f2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fuk6e83                        0x000055bc2d57b305 <unavailable> + 4869

    5    libc.so.6                          0x00002aab51421460 __libc_start_main +
    245

    6    tmp8fuk6e83                        0x000055bc2d57af49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeralDict:\
    \ [String: Int] = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\"\
    : 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let\
    \ numbers = numbers.split(separator: \" \")\n    let numbersArray = numbers.map\
    \ { numeralDict[String($0)]! }\n    let sortedArray = numbersArray.sorted()\n\
    \    let result = sortedArray.map { numeralDict.first(where: { $0.value == $1\
    \ })!.key }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppu0ja3z3.swift:12:34: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    let result\
    \ = sortedArray.map { numeralDict.first(where: { $0.value == $1 })!.key }\n  \
    \                               ^\n                                   _ in\n/tmp/tmppu0ja3z3.swift:12:66:\
    \ error: value of type 'String' has no member 'value'\n    let result = sortedArray.map\
    \ { numeralDict.first(where: { $0.value == $1 })!.key }\n                    \
    \                                          ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    var numMapped: [Int] = []\n  \
    \  for number in numbersArray {\n        switch number {\n        case \"zero\"\
    :\n            numMapped.append(0)\n        case \"one\":\n            numMapped.append(1)\n\
    \        case \"two\":\n            numMapped.append(2)\n        case \"three\"\
    :\n            numMapped.append(3)\n        case \"four\":\n            numMapped.append(4)\n\
    \        case \"five\":\n            numMapped.append(5)\n        case \"six\"\
    :\n            numMapped.append(6)\n        case \"seven\":\n            numMapped.append(7)\n\
    \        case \"eight\":\n            numMapped.append(8)\n        case \"nine\"\
    :\n            numMapped.append(9)\n        default:\n            return \"Error\"\
    \n        }\n    }\n    numMapped.sort()\n    print(numMapped)\n    var sortedString:\
    \ String = \"\"\n    for num in numMapped {\n        switch num {\n        case\
    \ 0:\n            sortedString += \"zero \"\n        case 1:\n            sortedString\
    \ += \"one \"\n        case 2:\n            sortedString += \"two \"\n       \
    \ case 3:\n            sortedString += \"three \"\n        case 4:\n         \
    \   sortedString += \"four \"\n        case 5:\n            sortedString += \"\
    five \"\n        case 6:\n            sortedString += \"six \"\n        case 7:\n\
    \            sortedString += \"seven \"\n        case 8:\n            sortedString\
    \ += \"eight \"\n        case 9:\n            sortedString += \"nine \"\n    \
    \    default:\n            return \"Error\"\n        }\n    }\n    return sortedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp58o1pyc7.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var word_map = [String:\
    \ Int]()\n    word_map[\"zero\"] = 0\n    word_map[\"one\"] = 1\n    word_map[\"\
    two\"] = 2\n    word_map[\"three\"] = 3\n    word_map[\"four\"] = 4\n    word_map[\"\
    five\"] = 5\n    word_map[\"six\"] = 6\n    word_map[\"seven\"] = 7\n    word_map[\"\
    eight\"] = 8\n    word_map[\"nine\"] = 9\n    \n    var num_list = [Int]()\n \
    \   for num in numbers.split(separator: \" \") {\n        if let number = word_map[String(num)]\
    \ {\n            num_list.append(number)\n        }\n    }\n    \n    var sorted_list\
    \ = num_list.sorted()\n    var sorted_str = String()\n    for num in sorted_list\
    \ {\n        if let word = word_map.first(where: { $0.value == num })?.key {\n\
    \            sorted_str.append(word)\n            sorted_str.append(\" \")\n \
    \       }\n    }\n    \n    return sorted_str\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpbrh4nifn/tmpbrh4nifn.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7bf9e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7bf6d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7bf6d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7bf6d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrh4nifn                        0x0000559318398bb5 <unavailable> + 7093

    5    libc.so.6                          0x00002ad7bfbce460 __libc_start_main +
    245

    6    tmpbrh4nifn                        0x0000559318398709 <unavailable> + 5897

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var indexArray =\
    \ [Int]()\n    let numberArray = numbers.components(separatedBy: \" \")\n    for\
    \ number in numberArray {\n        switch number {\n        case \"zero\":\n \
    \           indexArray.append(0)\n        case \"one\":\n            indexArray.append(1)\n\
    \        case \"two\":\n            indexArray.append(2)\n        case \"three\"\
    :\n            indexArray.append(3)\n        case \"four\":\n            indexArray.append(4)\n\
    \        case \"five\":\n            indexArray.append(5)\n        case \"six\"\
    :\n            indexArray.append(6)\n        case \"seven\":\n            indexArray.append(7)\n\
    \        case \"eight\":\n            indexArray.append(8)\n        case \"nine\"\
    :\n            indexArray.append(9)\n        default:\n            return \"wrong\
    \ input\"\n        }\n    }\n    indexArray.sort()\n    var resultArray = [String]()\n\
    \    for index in indexArray {\n        switch index {\n        case 0:\n    \
    \        resultArray.append(\"zero\")\n        case 1:\n            resultArray.append(\"\
    one\")\n        case 2:\n            resultArray.append(\"two\")\n        case\
    \ 3:\n            resultArray.append(\"three\")\n        case 4:\n           \
    \ resultArray.append(\"four\")\n        case 5:\n            resultArray.append(\"\
    five\")\n        case 6:\n            resultArray.append(\"six\")\n        case\
    \ 7:\n            resultArray.append(\"seven\")\n        case 8:\n           \
    \ resultArray.append(\"eight\")\n        case 9:\n            resultArray.append(\"\
    nine\")\n        default:\n            return \"wrong input\"\n        }\n   \
    \ }\n    return resultArray.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxg38yg1f.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let numberArray = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_dict\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_as_strings\
    \ = numbers.split(separator: \" \")\n    let numbers_as_ints = numbers_as_strings.map\
    \ { number_dict[String($0)]! }\n    let sorted_numbers = numbers_as_ints.sorted\
    \ { $0 < $1 }\n    let sorted_numbers_as_string = sorted_numbers.map { String($0)\
    \ }\n    return sorted_numbers_as_string.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpfjiz7kav/tmpfjiz7kav.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc324c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc321b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc321b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc321b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjiz7kav                        0x000055c37226bb55 <unavailable> + 6997

    5    libc.so.6                          0x00002adc326ac460 __libc_start_main +
    245

    6    tmpfjiz7kav                        0x000055c37226b6a9 <unavailable> + 5801

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let error = \"Please\
    \ enter valid string of numberals from 'zero' to 'nine'.\"\n    guard let sortedNumbers\
    \ = numbers.components(separatedBy: \" \").map({ Int($0) }).sorted(by: {$0 < $1}).compactMap({$0})\
    \ as? [Int] else {\n        return error\n    }\n    let integerToStringDictionary\
    \ = [0: \"zero\", 1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\"\
    , 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"]\n    let sortedNumbersAsStrings\
    \ = sortedNumbers.map({ integerToStringDictionary[$0]! })\n    return sortedNumbersAsStrings.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpz4_4myll.swift:9:39: error: value of type 'String' has no member\
    \ 'components'\n    guard let sortedNumbers = numbers.components(separatedBy:\
    \ \" \").map({ Int($0) }).sorted(by: {$0 < $1}).compactMap({$0}) as? [Int] else\
    \ {\n                              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013416
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  var words = numbers.split(separator:\
    \ \" \")\n  let dictionary = [\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\"\
    : 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n\
    \    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  ]\n  let sort = words.sorted\
    \ { dictionary[String($0)]! < dictionary[String($1)]! }\n  return sort.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let dict = [\"zero\"\
    : 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\":\
    \ 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbersArray = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbersArray.sorted { dict[$0]! < dict[$1]!\
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpsd55ni19.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    // TODO: Implement\
    \ this function.\n    let numbersArray = numbers.components(separatedBy: \" \"\
    )\n    let sortedNumbersArray = numbersArray.sorted(by: {numberToEnglish($0) <\
    \ numberToEnglish($1)})\n    let result = sortedNumbersArray.joined(separator:\
    \ \" \")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_k596bp0.swift:10:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_k596bp0.swift:11:55: error:\
    \ cannot find 'numberToEnglish' in scope\n    let sortedNumbersArray = numbersArray.sorted(by:\
    \ {numberToEnglish($0) < numberToEnglish($1)})\n                             \
    \                         ^~~~~~~~~~~~~~~\n/tmp/tmp_k596bp0.swift:11:77: error:\
    \ cannot find 'numberToEnglish' in scope\n    let sortedNumbersArray = numbersArray.sorted(by:\
    \ {numberToEnglish($0) < numberToEnglish($1)})\n                             \
    \                                               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  // convert to an array,\
    \ sort ascending and convert back to a string\n  return numbers.split(separator:\
    \ \" \").sorted(by: {\n    numeral_mapping[String($0)]! < numeral_mapping[String($1)]!\n\
    \  }).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9hksx_3_.swift:10:5: error: cannot find 'numeral_mapping' in scope\n\
    \    numeral_mapping[String($0)]! < numeral_mapping[String($1)]!\n    ^~~~~~~~~~~~~~~\n\
    /tmp/tmp9hksx_3_.swift:10:36: error: cannot find 'numeral_mapping' in scope\n\
    \    numeral_mapping[String($0)]! < numeral_mapping[String($1)]!\n           \
    \                        ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let mapped: [Int]\
    \ = numbers.split(separator: \" \").map {\n        switch String($0) {\n     \
    \   case \"zero\":\n            return 0\n        case \"one\":\n            return\
    \ 1\n        case \"two\":\n            return 2\n        case \"three\":\n  \
    \          return 3\n        case \"four\":\n            return 4\n        case\
    \ \"five\":\n            return 5\n        case \"six\":\n            return 6\n\
    \        case \"seven\":\n            return 7\n        case \"eight\":\n    \
    \        return 8\n        case \"nine\":\n            return 9\n        default:\n\
    \            return -1\n        }\n    }\n    let sorted = mapped.sorted()\n \
    \   let numbers = sorted.map {\n        switch $0 {\n        case 0:\n       \
    \     return \"zero\"\n        case 1:\n            return \"one\"\n        case\
    \ 2:\n            return \"two\"\n        case 3:\n            return \"three\"\
    \n        case 4:\n            return \"four\"\n        case 5:\n            return\
    \ \"five\"\n        case 6:\n            return \"six\"\n        case 7:\n   \
    \         return \"seven\"\n        case 8:\n            return \"eight\"\n  \
    \      case 9:\n            return \"nine\"\n        default:\n            return\
    \ \"error\"\n        }\n    }\n    return numbers.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var sortedNumbers\
    \ = numbers.split(separator: \" \").map { Int($0) }.sorted { $0! < $1! }\n   \
    \ return sortedNumbers.map { String($0!) }.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9klnof1p/tmp9klnof1p.swift:9: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eb6980c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eb6677561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1eb6677286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1eb667713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1eb6676bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9klnof1p                        0x000055c9405d349c <unavailable> + 9372

    6    libswiftCore.so                    0x00002b1eb665f820 Collection.map<A>(_:)
    + 426

    7    tmp9klnof1p                        0x000055c9405d304a <unavailable> + 8266

    8    tmp9klnof1p                        0x000055c9405d29be <unavailable> + 6590

    9    libc.so.6                          0x00002b1eb6b6c460 __libc_start_main +
    245

    10   tmp9klnof1p                        0x000055c9405d25d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbersDict\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    var numbersInts: [Int] = []\n\
    \    for i in numbersArray {\n        numbersInts.append(numbersDict[i]!)\n  \
    \  }\n    numbersInts.sort()\n    var sortedNumbers = \"\"\n    for i in numbersInts\
    \ {\n        for (k, v) in numbersDict {\n            if i == v {\n          \
    \      sortedNumbers += k + \" \"\n            }\n        }\n    }\n    return\
    \ sortedNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3fha9clp.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberStrings\
    \ = numbers.components(separatedBy: \" \")\n    var numbers = [Int]()\n    for\
    \ numberString in numberStrings {\n        switch numberString {\n        case\
    \ \"zero\":\n            numbers.append(0)\n        case \"one\":\n          \
    \  numbers.append(1)\n        case \"two\":\n            numbers.append(2)\n \
    \       case \"three\":\n            numbers.append(3)\n        case \"four\"\
    :\n            numbers.append(4)\n        case \"five\":\n            numbers.append(5)\n\
    \        case \"six\":\n            numbers.append(6)\n        case \"seven\"\
    :\n            numbers.append(7)\n        case \"eight\":\n            numbers.append(8)\n\
    \        case \"nine\":\n            numbers.append(9)\n        default:\n   \
    \         break\n        }\n    }\n    let sortedNumbers = numbers.sorted()\n\
    \    var sortedNumberStrings = [String]()\n    for number in sortedNumbers {\n\
    \        switch number {\n        case 0:\n            sortedNumberStrings.append(\"\
    zero\")\n        case 1:\n            sortedNumberStrings.append(\"one\")\n  \
    \      case 2:\n            sortedNumberStrings.append(\"two\")\n        case\
    \ 3:\n            sortedNumberStrings.append(\"three\")\n        case 4:\n   \
    \         sortedNumberStrings.append(\"four\")\n        case 5:\n            sortedNumberStrings.append(\"\
    five\")\n        case 6:\n            sortedNumberStrings.append(\"six\")\n  \
    \      case 7:\n            sortedNumberStrings.append(\"seven\")\n        case\
    \ 8:\n            sortedNumberStrings.append(\"eight\")\n        case 9:\n   \
    \         sortedNumberStrings.append(\"nine\")\n        default:\n           \
    \ break\n        }\n    }\n    return sortedNumberStrings.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp978crqto.swift:8:33: error: value of type 'String' has no member\
    \ 'components'\n    let numberStrings = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numArray = numbers.components(separatedBy:\
    \ \" \")\n    let word2num = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\":\
    \ 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9]\n    numArray = numArray.sorted { return word2num[$0]! < word2num[$1]! }\n\
    \    return numArray.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa5r5rewv.swift:8:28: error: value of type 'String' has no member\
    \ 'components'\n    var numArray = numbers.components(separatedBy: \" \")\n  \
    \                 ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  var array = [Int]()\n\
    \  var newArray = [Int]()\n  let splitNumbers = numbers.split(separator: \" \"\
    )\n  for i in splitNumbers {\n    switch i {\n    case \"zero\":\n      array.append(0)\n\
    \    case \"one\":\n      array.append(1)\n    case \"two\":\n      array.append(2)\n\
    \    case \"three\":\n      array.append(3)\n    case \"four\":\n      array.append(4)\n\
    \    case \"five\":\n      array.append(5)\n    case \"six\":\n      array.append(6)\n\
    \    case \"seven\":\n      array.append(7)\n    case \"eight\":\n      array.append(8)\n\
    \    case \"nine\":\n      array.append(9)\n    default:\n      break\n    }\n\
    \  }\n  array.sort()\n  var newWord = \"\"\n  for i in array {\n    switch i {\n\
    \    case 0:\n      newWord.append(\"zero \")\n    case 1:\n      newWord.append(\"\
    one \")\n    case 2:\n      newWord.append(\"two \")\n    case 3:\n      newWord.append(\"\
    three \")\n    case 4:\n      newWord.append(\"four \")\n    case 5:\n      newWord.append(\"\
    five \")\n    case 6:\n      newWord.append(\"six \")\n    case 7:\n      newWord.append(\"\
    seven \")\n    case 8:\n      newWord.append(\"eight \")\n    case 9:\n      newWord.append(\"\
    nine \")\n    default:\n      break\n    }\n  }\n  return newWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpsaziajm8/tmpsaziajm8.swift:82: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae32f2aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae32efa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae32efa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae32efa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaziajm8                        0x000056313b980a55 <unavailable> + 6741

    5    libc.so.6                          0x00002ae32f49a460 __libc_start_main +
    245

    6    tmpsaziajm8                        0x000056313b9805a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let myNumbersArray\
    \ = numbers.components(separatedBy: \" \")\n    let myNumbers = myNumbersArray.map\
    \ { String($0) }\n    return myNumbers.sorted().joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnh3jlcpr.swift:8:34: error: value of type 'String' has no member\
    \ 'components'\n    let myNumbersArray = numbers.components(separatedBy: \" \"\
    )\n                         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // your code here\n\
    \    let str = numbers.split(separator: \" \")\n    var sort_str:[String] = []\n\
    \    for i in str {\n        sort_str.append(String(i))\n    }\n    sort_str.sort()\n\
    \    var str1 = \"\"\n    for i in sort_str {\n        str1 = str1 + i + \" \"\
    \n    }\n    return str1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmph4vjsct4/tmph4vjsct4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af357b9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af357892b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af357892988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3578917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4vjsct4                        0x0000564695756a25 <unavailable> + 6693

    5    libc.so.6                          0x00002af357d87460 __libc_start_main +
    245

    6    tmph4vjsct4                        0x0000564695756579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sortedStr =\
    \ numbers.split(separator: \" \").sorted { (num1, num2) -> Bool in\n        convertNumberToInt(string:\
    \ String(num1)) < convertNumberToInt(string: String(num2))\n    }\n    return\
    \ sortedStr.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp45iwkury.swift:9:9: error: cannot find 'convertNumberToInt' in\
    \ scope\n        convertNumberToInt(string: String(num1)) < convertNumberToInt(string:\
    \ String(num2))\n        ^~~~~~~~~~~~~~~~~~\n/tmp/tmp45iwkury.swift:9:52: error:\
    \ cannot find 'convertNumberToInt' in scope\n        convertNumberToInt(string:\
    \ String(num1)) < convertNumberToInt(string: String(num2))\n                 \
    \                                  ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let ints = nums.map { convertToInt(word: $0) }\n    let sorted =\
    \ ints.sorted { $0 < $1 }\n    let words = sorted.map { convertToWord(int: $0)\
    \ }\n    return words.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn2r55ohm.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpn2r55ohm.swift:9:27: error: cannot find\
    \ 'convertToInt' in scope\n    let ints = nums.map { convertToInt(word: $0) }\n\
    \                          ^~~~~~~~~~~~\n/tmp/tmpn2r55ohm.swift:11:30: error:\
    \ cannot find 'convertToWord' in scope\n    let words = sorted.map { convertToWord(int:\
    \ $0) }\n                             ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted(by: { englishNumberValue(of: $0) < englishNumberValue(of:\
    \ $1) })\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpavx_cqcc.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpavx_cqcc.swift:9:36: error: cannot find\
    \ 'englishNumberValue' in scope\n    let sorted = nums.sorted(by: { englishNumberValue(of:\
    \ $0) < englishNumberValue(of: $1) })\n                                   ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpavx_cqcc.swift:9:65: error: cannot find 'englishNumberValue' in scope\n\
    \    let sorted = nums.sorted(by: { englishNumberValue(of: $0) < englishNumberValue(of:\
    \ $1) })\n                                                                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var parse = numbers.components(separatedBy:\
    \ \" \")\n    parse.sort()\n    return parse.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpj05rpygu.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    var parse = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Good luck!\n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp7uyzzsyo/tmp7uyzzsyo.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4539c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4536b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4536b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4536b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uyzzsyo                        0x000055ef801563f5 <unavailable> + 5109

    5    libc.so.6                          0x00002af453bac460 __libc_start_main +
    245

    6    tmp7uyzzsyo                        0x000055ef80155f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberValues\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let unsortedStringArr\
    \ = numbers.components(separatedBy: \" \")\n    let numbersToSort = unsortedStringArr.map\
    \ {(numberValues[$0]!)}\n    let sortedNumbers = numbersToSort.sorted()\n    let\
    \ wordNumbers = sortedNumbers.map { (num: Int) -> String in\n        switch num\
    \ {\n        case 0:\n            return \"zero\"\n        case 1:\n         \
    \   return \"one\"\n        case 2:\n            return \"two\"\n        case\
    \ 3:\n            return \"three\"\n        case 4:\n            return \"four\"\
    \n        case 5:\n            return \"five\"\n        case 6:\n            return\
    \ \"six\"\n        case 7:\n            return \"seven\"\n        case 8:\n  \
    \          return \"eight\"\n        case 9:\n            return \"nine\"\n  \
    \      default:\n            return \"zero\"\n        }\n    }\n    return wordNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprruqaq4p.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let unsortedStringArr = numbers.components(separatedBy: \"\
    \ \")\n                            ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var wordDict = [String:\
    \ Int]()\n    let words = numbers.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if let num = wordDict[word] {\n            wordDict[word]\
    \ = num + 1\n        } else {\n            wordDict[word] = 1\n        }\n   \
    \ }\n    let sortedKeys = wordDict.keys.sorted(by: { (a, b) -> Bool in\n     \
    \   return wordDict[a]! < wordDict[b]!\n    })\n    var result = \"\"\n    for\
    \ key in sortedKeys {\n        for _ in 0..<wordDict[key]! {\n            result\
    \ += \" \\(key)\"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ CharacterSet.whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgtep6oee.swift:9:25: error: value of type 'String' has no member\
    \ 'components'\n    let words = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgtep6oee.swift:26:42: error: cannot find\
    \ 'CharacterSet' in scope\n    return result.trimmingCharacters(in: CharacterSet.whitespaces)\n\
    \                                         ^~~~~~~~~~~~\n/tmp/tmpgtep6oee.swift:26:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: CharacterSet.whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sort = numbers.split(separator:\
    \ \" \").sorted {\n        let wordToNumeral: [String: Int] = [\"zero\": 0, \"\
    one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\"\
    : 7, \"eight\": 8, \"nine\": 9]\n        guard let left = wordToNumeral[String($0)],\
    \ let right = wordToNumeral[String($1)] else {\n            return String($0)\
    \ < String($1)\n        }\n        return left < right\n    }\n    return sort.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let nums = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"]\n  let sort = numbers.split(separator: \" \").map{String($0)}.sorted(by:\
    \ {nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!})\n  return sort.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Init array to\
    \ count number of times a word occurs in the string\n    var number_count = Array(repeating:\
    \ 0, count: 9)\n    // Init an array of number words\n    let number_words = [\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"]\n    // Init array of ordered number words\n    var ordered_numbers\
    \ = [String]()\n    // Separate string into array of words\n    let input_numbers\
    \ = numbers.components(separatedBy: \" \")\n    // Increment the number of times\
    \ a number word occurs in the string\n    for number in input_numbers {\n    \
    \    number_count[number_words.firstIndex(of: number)!] += 1\n    }\n    // Append\
    \ words to ordered numbers based on the number of times the word occurs\n    for\
    \ (index, number) in number_count.enumerated() {\n        ordered_numbers.append(contentsOf:\
    \ Array(repeating: number_words[index], count: number))\n    }\n    // Return\
    \ a space-delimited string of ordered numbers\n    return ordered_numbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf0wfbzqi.swift:15:33: error: value of type 'String' has no member\
    \ 'components'\n    let input_numbers = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let nums = numbers.components(separatedBy:\
    \ \" \")\n  let sorted = nums.sorted {\n    let d = numeral_to_number(numeral:\
    \ $0) - numeral_to_number(numeral: $1)\n    return d < 0\n  }\n  return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdbaj9ot0.swift:8:22: error: value of type 'String' has no member\
    \ 'components'\n  let nums = numbers.components(separatedBy: \" \")\n        \
    \     ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpdbaj9ot0.swift:10:13: error: cannot find 'numeral_to_number'\
    \ in scope\n    let d = numeral_to_number(numeral: $0) - numeral_to_number(numeral:\
    \ $1)\n            ^~~~~~~~~~~~~~~~~\n/tmp/tmpdbaj9ot0.swift:10:46: error: cannot\
    \ find 'numeral_to_number' in scope\n    let d = numeral_to_number(numeral: $0)\
    \ - numeral_to_number(numeral: $1)\n                                         \
    \    ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // complete the\
    \ function\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: '/tmp/tmpcv9h5iht.swift:9:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sorted = numbers.components(separatedBy:\
    \ \" \").sorted { convert(number: $0) < convert(number: $1) }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpncqdkoep.swift:8:64: error: cannot find 'convert' in scope\n  \
    \  let sorted = numbers.components(separatedBy: \" \").sorted { convert(number:\
    \ $0) < convert(number: $1) }\n                                              \
    \                 ^~~~~~~\n/tmp/tmpncqdkoep.swift:8:86: error: cannot find 'convert'\
    \ in scope\n    let sorted = numbers.components(separatedBy: \" \").sorted { convert(number:\
    \ $0) < convert(number: $1) }\n                                              \
    \                                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var output = \"\"\
    \n    var digits = [Int]()\n    var numberToChar = [\n        \"zero\": 0,\n \
    \       \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\"\
    : 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9,\n    ]\n    var charToNumber = [\n   \
    \     0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\"\
    ,\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7:\
    \ \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    ]\n    var array\
    \ = numbers.components(separatedBy: \" \")\n    for num in array {\n        digits.append(numberToChar[num]!)\n\
    \    }\n    digits.sort()\n    for num in digits {\n        output += charToNumber[num]!\
    \ + \" \"\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpn5_ju3r2.swift:34:25: error: value of type 'String' has no member\
    \ 'components'\n    var array = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let dict_numbers\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let str_numbers\
    \ = numbers.split(separator: \" \")\n    var int_numbers = [Int]()\n    for number\
    \ in str_numbers {\n        int_numbers.append(dict_numbers[String(number)]!)\n\
    \    }\n    int_numbers.sort()\n    var final_str = \"\"\n    for i in int_numbers\
    \ {\n        for (key, value) in dict_numbers {\n            if i == value {\n\
    \                final_str += \"\\(key) \"\n            }\n        }\n    }\n\
    \    return String(final_str.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let input = numbers.components(separatedBy:\
    \ \" \")\n    let digits = input.map { (number) -> Int in\n        if number ==\
    \ \"zero\" {\n            return 0\n        } else if number == \"one\" {\n  \
    \          return 1\n        } else if number == \"two\" {\n            return\
    \ 2\n        } else if number == \"three\" {\n            return 3\n        }\
    \ else if number == \"four\" {\n            return 4\n        } else if number\
    \ == \"five\" {\n            return 5\n        } else if number == \"six\" {\n\
    \            return 6\n        } else if number == \"seven\" {\n            return\
    \ 7\n        } else if number == \"eight\" {\n            return 8\n        }\
    \ else if number == \"nine\" {\n            return 9\n        } else {\n     \
    \       return 0\n        }\n    }\n    let sorted = digits.sorted()\n    let\
    \ result = sorted.map { (number) -> String in\n        if number == 0 {\n    \
    \        return \"zero\"\n        } else if number == 1 {\n            return\
    \ \"one\"\n        } else if number == 2 {\n            return \"two\"\n     \
    \   } else if number == 3 {\n            return \"three\"\n        } else if number\
    \ == 4 {\n            return \"four\"\n        } else if number == 5 {\n     \
    \       return \"five\"\n        } else if number == 6 {\n            return \"\
    six\"\n        } else if number == 7 {\n            return \"seven\"\n       \
    \ } else if number == 8 {\n            return \"eight\"\n        } else if number\
    \ == 9 {\n            return \"nine\"\n        } else {\n            return \"\
    zero\"\n        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvhj8_1p7.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    let input = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeralArray\
    \ = numbers.components(separatedBy: \" \")\n    var sortedNumeralArray = [String]()\n\
    \    var numeralDictionary = [String: Int]()\n    var numeralString = \"\"\n \
    \   \n    for numeral in numeralArray {\n        switch numeral {\n        case\
    \ \"zero\":\n            numeralDictionary[\"zero\"] = 0\n        case \"one\"\
    :\n            numeralDictionary[\"one\"] = 1\n        case \"two\":\n       \
    \     numeralDictionary[\"two\"] = 2\n        case \"three\":\n            numeralDictionary[\"\
    three\"] = 3\n        case \"four\":\n            numeralDictionary[\"four\"]\
    \ = 4\n        case \"five\":\n            numeralDictionary[\"five\"] = 5\n \
    \       case \"six\":\n            numeralDictionary[\"six\"] = 6\n        case\
    \ \"seven\":\n            numeralDictionary[\"seven\"] = 7\n        case \"eight\"\
    :\n            numeralDictionary[\"eight\"] = 8\n        case \"nine\":\n    \
    \        numeralDictionary[\"nine\"] = 9\n        default:\n            numeralDictionary[\"\
    error\"] = -1\n        }\n    }\n    \n    for numeral in numeralDictionary.sorted(by:\
    \ {$0.value < $1.value}) {\n        sortedNumeralArray.append(numeral.key)\n \
    \   }\n    \n    for numeral in sortedNumeralArray {\n        numeralString +=\
    \ \"\\(numeral) \"\n    }\n    \n    numeralString.removeLast()\n    \n    return\
    \ numeralString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm08g7skn.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    let numeralArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if numbers.isEmpty\
    \ {\n        return numbers\n    }\n\n    let dict: [String: Int] = [\"zero\"\
    : 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\":\
    \ 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let words = numbers.split(separator:\
    \ \" \")\n    let result = words.map({ dict[String($0)]! }).sorted().map({ \"\\\
    ($0)\" }).joined(separator: \" \")\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpyfn56_v6/tmpyfn56_v6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae630e25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae630b1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae630b1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae630b1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfn56_v6                        0x000055f2182f9d75 <unavailable> + 7541

    5    libc.so.6                          0x00002ae631011460 __libc_start_main +
    245

    6    tmpyfn56_v6                        0x000055f2182f98c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberArray\
    \ = numbers.components(separatedBy: \" \")\n    let numberAlphabet = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"]\n    let sortedNumbers = numberArray.sorted(by: {numberAlphabet.index(of:\
    \ $0)! < numberAlphabet.index(of: $1)!})\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpu07q0p02.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let numberArray = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numStrings =\
    \ numbers.split(separator: \" \")\n    let ints = numStrings.map({ return numbersToInts[String($0)]!\
    \ })\n    let sorted = ints.sorted()\n    return sorted.map({ return intsToNumbers[$0]!\
    \ }).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzln_0ir7.swift:9:40: error: cannot find 'numbersToInts' in scope\n\
    \    let ints = numStrings.map({ return numbersToInts[String($0)]! })\n      \
    \                                 ^~~~~~~~~~~~~\n/tmp/tmpzln_0ir7.swift:11:32:\
    \ error: cannot find 'intsToNumbers' in scope\n    return sorted.map({ return\
    \ intsToNumbers[$0]! }).joined(separator: \" \")\n                           \
    \    ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let strNumbers:[String]\
    \ = numbers.split(separator: \" \").map {String($0)}\n    let numNumbers:[Int]\
    \ = strNumbers.map {numbersToDigits[$0]!}\n    let sortedNumbers:[Int] = numNumbers.sorted()\n\
    \    let sortedStrNumbers:[String] = sortedNumbers.map {digitsToNumbers[$0]!}\n\
    \    return sortedStrNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp14gzxz77.swift:9:44: error: cannot find 'numbersToDigits' in scope\n\
    \    let numNumbers:[Int] = strNumbers.map {numbersToDigits[$0]!}\n          \
    \                                 ^~~~~~~~~~~~~~~\n/tmp/tmp14gzxz77.swift:11:56:\
    \ error: cannot find 'digitsToNumbers' in scope\n    let sortedStrNumbers:[String]\
    \ = sortedNumbers.map {digitsToNumbers[$0]!}\n                               \
    \                        ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return numbers.split(separator:\
    \ \" \").sorted(by: {$0 < $1}).joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpli_irurj/tmpli_irurj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af933bffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9338f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9338f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9338f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpli_irurj                        0x00005597201628b2 <unavailable> + 6322

    5    libc.so.6                          0x00002af933deb460 __libc_start_main +
    245

    6    tmpli_irurj                        0x00005597201622e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    // Number\
    \ to Digit Dictionary\n    let numberToDigit: [String: Int] = [\n        \"zero\"\
    : 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n      \
    \  \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n    \n    // Validate\
    \ input\n    let inputNumbers = numbers.split(separator: \" \")\n    for inputNumber\
    \ in inputNumbers {\n        guard let _ = numberToDigit[String(inputNumber)]\
    \ else {\n            return \"Invalid input\"\n        }\n    }\n    \n    //\
    \ Convert string to int array\n    var intArray: [Int] = []\n    for inputNumber\
    \ in inputNumbers {\n        intArray.append(numberToDigit[String(inputNumber)]!)\n\
    \    }\n    \n    // Sort numbers\n    intArray.sort()\n    \n    // Convert int\
    \ array to string\n    var output = \"\"\n    for inputNumber in intArray {\n\
    \        output += \"\\(inputNumber) \"\n    }\n    \n    return output\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp40pfzv5r/tmp40pfzv5r.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5b5d12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5b5a09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5b5a09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5b5a087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40pfzv5r                        0x00005619d9903e65 <unavailable> + 7781

    5    libc.so.6                          0x00002ac5b5efe460 __libc_start_main +
    245

    6    tmp40pfzv5r                        0x00005619d99039b9 <unavailable> + 6585

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = numbers.split(separator:\
    \ \" \")\n    nums.sort()\n    var output = \"\"\n    for num in nums {\n    \
    \    output += num + \" \"\n    }\n    return String(output.dropLast())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp03sc2gv_/tmp03sc2gv_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b531279ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5312495b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5312495988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53124947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp03sc2gv_                        0x0000556023c07c02 <unavailable> + 7170

    5    libc.so.6                          0x00002b531298a460 __libc_start_main +
    245

    6    tmp03sc2gv_                        0x0000556023c07639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sortedNums =\
    \ numbers.lowercased().components(separatedBy: \" \").map { stringToNumeral(numeral:\
    \ $0) }.sorted()\n    let sortedWords = sortedNums.map { numeralToString(numeral:\
    \ $0) }\n    return sortedWords.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxx8_44l4.swift:8:78: error: cannot find 'stringToNumeral' in scope\n\
    \    let sortedNums = numbers.lowercased().components(separatedBy: \" \").map\
    \ { stringToNumeral(numeral: $0) }.sorted()\n                                \
    \                                             ^~~~~~~~~~~~~~~\n/tmp/tmpxx8_44l4.swift:9:40:\
    \ error: cannot find 'numeralToString' in scope\n    let sortedWords = sortedNums.map\
    \ { numeralToString(numeral: $0) }\n                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var parsedNumberStrings\
    \ = numbers.components(separatedBy: \" \")\n    var parsedNumbers = [Int]()\n\
    \    for numberString in parsedNumberStrings {\n        parsedNumbers.append(numberToInt(number:\
    \ numberString))\n    }\n    parsedNumbers.sort()\n    parsedNumberStrings = []\n\
    \    for number in parsedNumbers {\n        parsedNumberStrings.append(intToNumber(number:\
    \ number))\n    }\n    return parsedNumberStrings.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppa5j0o5i.swift:8:39: error: value of type 'String' has no member\
    \ 'components'\n    var parsedNumberStrings = numbers.components(separatedBy:\
    \ \" \")\n                              ~~~~~~~ ^~~~~~~~~~\n/tmp/tmppa5j0o5i.swift:16:36:\
    \ error: cannot find 'intToNumber' in scope\n        parsedNumberStrings.append(intToNumber(number:\
    \ number))\n                                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let lowercased =\
    \ numbers.lowercased()\n    let split = lowercased.split(separator: \" \")\n \
    \   let words = split.map { String($0) }\n    let numbers = words.map { number_to_int(number:\
    \ $0) }\n    let sorted = numbers.sorted()\n    let result = sorted.map { int_to_number(number:\
    \ $0) }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpd1c31t9s.swift:11:31: error: cannot find 'number_to_int' in scope\n\
    \    let numbers = words.map { number_to_int(number: $0) }\n                 \
    \             ^~~~~~~~~~~~~\n/tmp/tmpd1c31t9s.swift:13:31: error: cannot find\
    \ 'int_to_number' in scope\n    let result = sorted.map { int_to_number(number:\
    \ $0) }\n                              ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    let sortedArray = numbersArray.sorted\
    \ {\n        numberToInt(number: $0) < numberToInt(number: $1)\n    }\n    return\
    \ sortedArray.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpu6qnkmn7.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpu6qnkmn7.swift:10:9: error:\
    \ cannot find 'numberToInt' in scope\n        numberToInt(number: $0) < numberToInt(number:\
    \ $1)\n        ^~~~~~~~~~~\n/tmp/tmpu6qnkmn7.swift:10:35: error: cannot find 'numberToInt'\
    \ in scope\n        numberToInt(number: $0) < numberToInt(number: $1)\n      \
    \                            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let dict: [String:\
    \ Int] = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let inputArray\
    \ = numbers.components(separatedBy: \" \")\n    var result = \"\"\n    let sortedArray\
    \ = inputArray.sorted { dict[$0]! < dict[$1]! }\n    for number in sortedArray\
    \ {\n        result += number + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyoqhl_w2.swift:9:30: error: value of type 'String' has no member\
    \ 'components'\n    let inputArray = numbers.components(separatedBy: \" \")\n\
    \                     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(separator:\
    \ \" \")\n  let sortedNumbers = numbers.sorted(by: { return Int(String($0))! <\
    \ Int(String($1))! })\n  return sortedNumbers.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpcjnb_v8i/tmpcjnb_v8i.swift:9: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b32dbd19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32dba10561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b32dba10286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b32dba1013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b32dba0fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpcjnb_v8i                        0x000055e83f8ad00d <unavailable> + 8205

    6    libswiftCore.so                    0x00002b32dbb31c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b32dbb32110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b32dbb30d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b32dbb30d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b32dbc5665a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b32dba45720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b32dba4570f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b32dbb30460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b32dbb30370 Sequence.sorted(by:)
    + 193

    15   tmpcjnb_v8i                        0x000055e83f8acdae <unavailable> + 7598

    16   tmpcjnb_v8i                        0x000055e83f8ac901 <unavailable> + 6401

    17   libc.so.6                          0x00002b32dbf05460 __libc_start_main +
    245

    18   tmpcjnb_v8i                        0x000055e83f8ac429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberWords\
    \ = numbers.split(separator: \" \")\n    let nums = numberWords.map { Int(word_to_number($0))\
    \ }\n    let sortedNums = nums.sorted()\n    let sortedWords = sortedNums.map\
    \ { number_to_word($0) }\n    return sortedWords.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxwtp61ex.swift:9:38: error: cannot find 'word_to_number' in scope\n\
    \    let nums = numberWords.map { Int(word_to_number($0)) }\n                \
    \                     ^~~~~~~~~~~~~~\n/tmp/tmpxwtp61ex.swift:11:40: error: cannot\
    \ find 'number_to_word' in scope\n    let sortedWords = sortedNums.map { number_to_word($0)\
    \ }\n                                       ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let input = numbers.split(separator:\
    \ \" \")\n    let sorted = input.sorted(by: {Int(String($0))! < Int(String($1))!})\n\
    \    let sorted_string = sorted.joined(separator: \" \")\n    return sorted_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpxm98qmim/tmpxm98qmim.swift:9: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e99cd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e999cb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4e999cb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4e999cb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4e999cabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxm98qmim                        0x0000556dbe28a04d <unavailable> + 8269

    6    libswiftCore.so                    0x00002b4e99aecc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b4e99aed110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b4e99aebd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b4e99aebd15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b4e99c1165a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b4e99a00720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b4e99a0070f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b4e99aeb460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b4e99aeb370 Sequence.sorted(by:)
    + 193

    15   tmpxm98qmim                        0x0000556dbe289dbb <unavailable> + 7611

    16   tmpxm98qmim                        0x0000556dbe289901 <unavailable> + 6401

    17   libc.so.6                          0x00002b4e99ec0460 __libc_start_main +
    245

    18   tmpxm98qmim                        0x0000556dbe289429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // split string\
    \ by \" \"\n    let nums = numbers.split(separator: \" \")\n    // convert to\
    \ numbers\n    let nums = nums.map { convert($0) }\n    // sort by value\n   \
    \ let sortedNums = nums.sorted { $0.value < $1.value }\n    // convert back to\
    \ strings\n    let output = sortedNums.map { $0.string }\n    // return joined\
    \ by \" \"\n    return output.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4h8twaeo.swift:11:27: error: cannot find 'convert' in scope\n \
    \   let nums = nums.map { convert($0) }\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if numbers.count\
    \ == 0 {\n        return \"\"\n    }\n    let numbers = numbers.replacingOccurrences(of:\
    \ \"zero\", with: \"0\")\n    let numbers = numbers.replacingOccurrences(of: \"\
    one\", with: \"1\")\n    let numbers = numbers.replacingOccurrences(of: \"two\"\
    , with: \"2\")\n    let numbers = numbers.replacingOccurrences(of: \"three\",\
    \ with: \"3\")\n    let numbers = numbers.replacingOccurrences(of: \"four\", with:\
    \ \"4\")\n    let numbers = numbers.replacingOccurrences(of: \"five\", with: \"\
    5\")\n    let numbers = numbers.replacingOccurrences(of: \"six\", with: \"6\"\
    )\n    let numbers = numbers.replacingOccurrences(of: \"seven\", with: \"7\")\n\
    \    let numbers = numbers.replacingOccurrences(of: \"eight\", with: \"8\")\n\
    \    let numbers = numbers.replacingOccurrences(of: \"nine\", with: \"9\")\n \
    \   let numbers = numbers.split(separator: \" \")\n    let sorted = numbers.sorted()\n\
    \    var result = \"\"\n    for i in sorted {\n        result += \" \" + i\n \
    \   }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpz8pnm8gl.swift:11:27: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let numbers = numbers.replacingOccurrences(of: \"\
    zero\", with: \"0\")\n                  ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz8pnm8gl.swift:27:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz8pnm8gl.swift:27:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let allNumbers =\
    \ numbers.components(separatedBy: \" \")\n    let numberWords = [\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"]\n    let newAllNumbers = allNumbers.map{ numberWords.index(of: $0)!\
    \ }.sorted().map{ numberWords[$0] }\n    return newAllNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl23kg0tu.swift:8:30: error: value of type 'String' has no member\
    \ 'components'\n    let allNumbers = numbers.components(separatedBy: \" \")\n\
    \                     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let map: [String:Int]\
    \ = [\"zero\":0, \"one\":1, \"two\":2, \"three\":3, \"four\":4, \"five\":5, \"\
    six\":6, \"seven\":7, \"eight\":8, \"nine\":9]\n    let temp = numbers.split(separator:\
    \ \" \")\n    var result: [Int] = []\n    for word in temp {\n        let key\
    \ = String(word)\n        if let value = map[key] {\n            result.append(value)\n\
    \        }\n    }\n    result.sort()\n    var res = \"\"\n    for num in result\
    \ {\n        res += map.first(where: {$0.value == num})!.key + \" \"\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmph23z4vgx/tmph23z4vgx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436dcccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436d9c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436d9c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436d9c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph23z4vgx                        0x0000564ac1213d05 <unavailable> + 7429

    5    libc.so.6                          0x00002b436deb8460 __libc_start_main +
    245

    6    tmph23z4vgx                        0x0000564ac1213859 <unavailable> + 6233

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let input_numbers\
    \ = numbers.components(separatedBy: \" \")\n    let number_map: [String: Int]\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    var output_numbers:\
    \ [Int] = []\n    for number in input_numbers {\n        if let numeric_value\
    \ = number_map[number] {\n            output_numbers.append(numeric_value)\n \
    \       }\n    }\n    output_numbers.sort()\n    var output = \"\"\n    for number\
    \ in output_numbers {\n        output.append(\"\\(number) \")\n    }\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpin0tave3.swift:8:33: error: value of type 'String' has no member\
    \ 'components'\n    let input_numbers = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let numeral_to_num:\
    \ [String: Int] = [\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"\
    three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\"\
    : 7,\n    \"eight\": 8,\n    \"nine\": 9\n  ]\n  let words = numbers.split(separator:\
    \ \" \")\n  let nums = words.map { numeral_to_num[String($0)]! }\n  let sorted\
    \ = nums.sorted()\n  let num_to_numeral: [Int: String] = [\n    0: \"zero\",\n\
    \    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5:\
    \ \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"\
    nine\"\n  ]\n  let sorted_numerals = sorted.map { num_to_numeral[$0]! }\n  return\
    \ sorted_numerals.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberStrings\
    \ = numbers.components(separatedBy: \" \")\n    let numberValues = numberStrings.map\
    \ { (str) -> Int in\n        return convert_number_name_to_value(number_name:\
    \ str)\n    }\n    let sortedNumbers = numberValues.sorted()\n    let sortedStrings\
    \ = sortedNumbers.map { (value) -> String in\n        return convert_number_value_to_name(number_value:\
    \ value)\n    }\n    return sortedStrings.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfx1kqqgp.swift:8:33: error: value of type 'String' has no member\
    \ 'components'\n    let numberStrings = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfx1kqqgp.swift:10:16: error:\
    \ cannot find 'convert_number_name_to_value' in scope\n        return convert_number_name_to_value(number_name:\
    \ str)\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfx1kqqgp.swift:14:16:\
    \ error: cannot find 'convert_number_value_to_name' in scope\n        return convert_number_value_to_name(number_value:\
    \ value)\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sort_string\
    \ = numbers.components(separatedBy: \" \").map({\n        $0.components(separatedBy:\
    \ \" \").map({\n            let numeral = 0\n            switch $0 {\n       \
    \     case \"zero\":\n                numeral = 0\n            case \"one\":\n\
    \                numeral = 1\n            case \"two\":\n                numeral\
    \ = 2\n            case \"three\":\n                numeral = 3\n            case\
    \ \"four\":\n                numeral = 4\n            case \"five\":\n       \
    \         numeral = 5\n            case \"six\":\n                numeral = 6\n\
    \            case \"seven\":\n                numeral = 7\n            case \"\
    eight\":\n                numeral = 8\n            case \"nine\":\n          \
    \      numeral = 9\n            default:\n                numeral = 0\n      \
    \      }\n            return numeral\n        })\n    }).sorted(by: { $0 < $1\
    \ })\n    return sort_string.map({\n        var numeral = \"zero\"\n        switch\
    \ $0 {\n        case 0:\n            numeral = \"zero\"\n        case 1:\n   \
    \         numeral = \"one\"\n        case 2:\n            numeral = \"two\"\n\
    \        case 3:\n            numeral = \"three\"\n        case 4:\n         \
    \   numeral = \"four\"\n        case 5:\n            numeral = \"five\"\n    \
    \    case 6:\n            numeral = \"six\"\n        case 7:\n            numeral\
    \ = \"seven\"\n        case 8:\n            numeral = \"eight\"\n        case\
    \ 9:\n            numeral = \"nine\"\n        default:\n            numeral =\
    \ \"zero\"\n        }\n        return numeral\n    }).joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9wx90jlb.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let sort_string = numbers.components(separatedBy: \" \").map({\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9wx90jlb.swift:13:17: error:\
    \ cannot assign to value: 'numeral' is a 'let' constant\n                numeral\
    \ = 0\n                ^~~~~~~\n/tmp/tmp9wx90jlb.swift:10:13: note: change 'let'\
    \ to 'var' to make it mutable\n            let numeral = 0\n            ^~~\n\
    \            var\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // ???\n    let\
    \ nums = numbers.components(separatedBy: \" \")\n    let stringNums = nums.sorted(by:\
    \ {\n        numToInt(number: $0) < numToInt(number: $1)\n    })\n    return stringNums.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp62uxxg2l.swift:9:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp62uxxg2l.swift:11:9: error: cannot find\
    \ 'numToInt' in scope\n        numToInt(number: $0) < numToInt(number: $1)\n \
    \       ^~~~~~~~\n/tmp/tmp62uxxg2l.swift:11:32: error: cannot find 'numToInt'\
    \ in scope\n        numToInt(number: $0) < numToInt(number: $1)\n            \
    \                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"\
    three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n\
    \        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n  \
    \  let number_array = numbers.split(separator: \" \")\n    let sorted_array =\
    \ number_array.sorted { (left, right) -> Bool in\n        let left_num = number_map[String(left)]!\n\
    \        let right_num = number_map[String(right)]!\n        return left_num <\
    \ right_num\n    }\n    return sorted_array.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberNames\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let inputNumbers = numbers.split(separator: \" \"\
    )\n    var outputNumbers = [Int]()\n    for i in inputNumbers {\n        let number\
    \ = String(i)\n        if let index = numberNames.firstIndex(of: number) {\n \
    \           outputNumbers.append(index)\n        }\n    }\n    outputNumbers.sort()\n\
    \    var outputStr = \"\"\n    for i in outputNumbers {\n        outputStr.append(numberNames[i])\n\
    \        outputStr.append(\" \")\n    }\n    outputStr.removeLast()\n    return\
    \ outputStr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002aefde7ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefde4d4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aefde4d4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aefde4d413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aefde4d3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aefde5d5c1d <unavailable> + 2489373

    6    tmplfmw6s_q                        0x000055660dc047f5 <unavailable> + 10229

    7    tmplfmw6s_q                        0x000055660dc03af5 <unavailable> + 6901

    8    libc.so.6                          0x00002aefde9c9460 __libc_start_main +
    245

    9    tmplfmw6s_q                        0x000055660dc037f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let array = numbers.components(separatedBy:\
    \ \" \")\n    let sortedArray = array.sorted { (lhs, rhs) -> Bool in\n       \
    \ let lhsInt = getIntegerFromString(string: lhs)\n        let rhsInt = getIntegerFromString(string:\
    \ rhs)\n        return lhsInt < rhsInt\n    }\n    return sortedArray.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm5ujcs9n.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    let array = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm5ujcs9n.swift:10:22: error: cannot find\
    \ 'getIntegerFromString' in scope\n        let lhsInt = getIntegerFromString(string:\
    \ lhs)\n                     ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm5ujcs9n.swift:11:22:\
    \ error: cannot find 'getIntegerFromString' in scope\n        let rhsInt = getIntegerFromString(string:\
    \ rhs)\n                     ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    var sortedNumbersArray: [Int]\
    \ = []\n    \n    for word in numbersArray {\n        if word == \"zero\" {\n\
    \            sortedNumbersArray.append(0)\n        } else if word == \"one\" {\n\
    \            sortedNumbersArray.append(1)\n        } else if word == \"two\" {\n\
    \            sortedNumbersArray.append(2)\n        } else if word == \"three\"\
    \ {\n            sortedNumbersArray.append(3)\n        } else if word == \"four\"\
    \ {\n            sortedNumbersArray.append(4)\n        } else if word == \"five\"\
    \ {\n            sortedNumbersArray.append(5)\n        } else if word == \"six\"\
    \ {\n            sortedNumbersArray.append(6)\n        } else if word == \"seven\"\
    \ {\n            sortedNumbersArray.append(7)\n        } else if word == \"eight\"\
    \ {\n            sortedNumbersArray.append(8)\n        } else if word == \"nine\"\
    \ {\n            sortedNumbersArray.append(9)\n        }\n    }\n    \n    sortedNumbersArray.sort()\n\
    \    \n    let sortedStringsArray = sortedNumbersArray.map {\n        (number)\
    \ -> String in\n        return numeral(number: number)\n    }\n    \n    return\
    \ sortedStringsArray.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm2suo0bx.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm2suo0bx.swift:40:16: error:\
    \ cannot find 'numeral' in scope\n        return numeral(number: number)\n   \
    \            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var words = numbers.split(separator:\
    \ \" \")\n    var nums = [Int]()\n    let dict = [\"zero\": 0, \"one\": 1, \"\
    two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"\
    eight\": 8, \"nine\": 9]\n    for word in words {\n        nums.append(dict[String(word)]!)\n\
    \    }\n    nums.sort()\n    for i in 0..<nums.count {\n        if nums[i] ==\
    \ 0 {\n            words[i] = \"zero\"\n        } else if nums[i] == 1 {\n   \
    \         words[i] = \"one\"\n        } else if nums[i] == 2 {\n            words[i]\
    \ = \"two\"\n        } else if nums[i] == 3 {\n            words[i] = \"three\"\
    \n        } else if nums[i] == 4 {\n            words[i] = \"four\"\n        }\
    \ else if nums[i] == 5 {\n            words[i] = \"five\"\n        } else if nums[i]\
    \ == 6 {\n            words[i] = \"six\"\n        } else if nums[i] == 7 {\n \
    \           words[i] = \"seven\"\n        } else if nums[i] == 8 {\n         \
    \   words[i] = \"eight\"\n        } else if nums[i] == 9 {\n            words[i]\
    \ = \"nine\"\n        }\n    }\n    return words.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013415
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers2 = numbers.split(separator:\
    \ \" \")\n    numbers2.sort()\n    return numbers2.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpcudp16ek/tmpcudp16ek.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09ec383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09ec07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09ec07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09ec0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcudp16ek                        0x000055f5611a3952 <unavailable> + 6482

    5    libc.so.6                          0x00002b09ec56f460 __libc_start_main +
    245

    6    tmpcudp16ek                        0x000055f5611a3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\n        \"zero\" : 0,\n        \"one\" : 1,\n        \"two\" : 2,\n     \
    \   \"three\" : 3,\n        \"four\" : 4,\n        \"five\" : 5,\n        \"six\"\
    \ : 6,\n        \"seven\" : 7,\n        \"eight\" : 8,\n        \"nine\" : 9\n\
    \    ]\n    var array: [Int] = []\n    for number in numbers.split(separator:\
    \ \" \") {\n        if let value = numberals[String(number)] {\n            array.append(value)\n\
    \        }\n    }\n    array.sort(by: <)\n    var result = \"\"\n    for number\
    \ in array {\n        result += numberals.first(where: { $0.value == number })!.key\
    \ + \" \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013415
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let dict = [\"zero\"\
    : 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\":\
    \ 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let toReturn = numbers.split(separator:\
    \ \" \").sorted(by: {dict[String($0)]! < dict[String($1)]!})\n    return toReturn.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013415
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // TODO: Implement\n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpm8hooejm/tmpm8hooejm.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d87535c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d8722cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d8722c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d8722b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8hooejm                        0x0000556b40d513f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b5d87721460 __libc_start_main +
    245

    6    tmpm8hooejm                        0x0000556b40d50f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbs = numbers.split(separator:\
    \ \" \")\n    let numbers = numbs.map({ Int(translate(number: String($0))) })\n\
    \    let result = String(numbers.sorted().map({ translate(number: String($0))\
    \ }).joined(separator: \" \"))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2amg7eyd.swift:9:35: error: cannot find 'translate' in scope\n\
    \    let numbers = numbs.map({ Int(translate(number: String($0))) })\n       \
    \                           ^~~~~~~~~\n/tmp/tmp2amg7eyd.swift:10:48: error: cannot\
    \ find 'translate' in scope\n    let result = String(numbers.sorted().map({ translate(number:\
    \ String($0)) }).joined(separator: \" \"))\n                                 \
    \              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var words = numbers.components(separatedBy:\
    \ \" \")\n    let wordDictionary = [\n        \"zero\": 0,\n        \"one\": 1,\n\
    \        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"\
    five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n\
    \        \"nine\": 9\n    ]\n    var numberArray = [Int]()\n    for word in words\
    \ {\n        numberArray.append(wordDictionary[word]!)\n    }\n    numberArray.sort()\n\
    \    for index in 0..<numberArray.count {\n        words[index] = String(numberArray[index])\n\
    \    }\n    return words.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp83s_zs8u.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    var words = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    let validInput = [\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"]\n    let numberMap = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\"\
    : 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9]\n    \n    //Validate numbersArray\n    for num in numbersArray {\n     \
    \   if !validInput.contains(num) {\n            return \"Error: input must contain\
    \ numberals from 'zero' to 'nine'.\"\n        }\n    }\n    \n    //Create sorted\
    \ dictionary of numbers\n    var numberDict = [Int:String]()\n    for num in numbersArray\
    \ {\n        if let index = numberMap[num] {\n            numberDict[index] =\
    \ num\n        }\n    }\n    \n    //Convert sorted dictionary back to a string\n\
    \    var result = \"\"\n    for i in 0..<numberDict.count {\n        result +=\
    \ numberDict[i]! + \" \"\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpk13pfpos.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let dict:[String:Int]\
    \ = [\"zero\":0, \"one\":1, \"two\":2, \"three\":3, \"four\":4, \"five\":5, \"\
    six\":6, \"seven\":7, \"eight\":8, \"nine\":9]\n    let names = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = names.sorted { dict[String($0)]! < dict[String($1)]!\
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013415
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let words = numbers.split(separator:\
    \ \" \")\n    let sorted = words.sorted()\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpgsaha95u/tmpgsaha95u.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2a00cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29fdc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29fdc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29fdc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsaha95u                        0x0000555d852d3882 <unavailable> + 6274

    5    libc.so.6                          0x00002af2a02bb460 __libc_start_main +
    245

    6    tmpgsaha95u                        0x0000555d852d32b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // todo: sort the\
    \ provided numbers in ascending order and return the result as a string\n    let\
    \ numbersArray = numbers.components(separatedBy: \" \")\n    var sortedNumbersArray:\
    \ [Int] = []\n    var stringNumbersArray: [String] = []\n    var stringNumbers\
    \ = \"\"\n    \n    //MARK: - Find the words in the numbersArray and replace them\
    \ by digits.\n    for word in numbersArray {\n        switch word {\n        case\
    \ \"zero\":\n            sortedNumbersArray.append(0)\n        case \"one\":\n\
    \            sortedNumbersArray.append(1)\n        case \"two\":\n           \
    \ sortedNumbersArray.append(2)\n        case \"three\":\n            sortedNumbersArray.append(3)\n\
    \        case \"four\":\n            sortedNumbersArray.append(4)\n        case\
    \ \"five\":\n            sortedNumbersArray.append(5)\n        case \"six\":\n\
    \            sortedNumbersArray.append(6)\n        case \"seven\":\n         \
    \   sortedNumbersArray.append(7)\n        case \"eight\":\n            sortedNumbersArray.append(8)\n\
    \        case \"nine\":\n            sortedNumbersArray.append(9)\n        default:\n\
    \            print(\"Wrong input\")\n        }\n    }\n    \n    //MARK: - Sort\
    \ the numbers in the array\n    let sortedArray = sortedNumbersArray.sorted()\n\
    \    \n    //MARK: - Find numbers in the sortedArray and replace them by words.\n\
    \    for number in sortedArray {\n        switch number {\n        case 0:\n \
    \           stringNumbersArray.append(\"zero\")\n        case 1:\n           \
    \ stringNumbersArray.append(\"one\")\n        case 2:\n            stringNumbersArray.append(\"\
    two\")\n        case 3:\n            stringNumbersArray.append(\"three\")\n  \
    \      case 4:\n            stringNumbersArray.append(\"four\")\n        case\
    \ 5:\n            stringNumbersArray.append(\"five\")\n        case 6:\n     \
    \       stringNumbersArray.append(\"six\")\n        case 7:\n            stringNumbersArray.append(\"\
    seven\")\n        case 8:\n            stringNumbersArray.append(\"eight\")\n\
    \        case 9:\n            stringNumbersArray.append(\"nine\")\n        default:\n\
    \            print(\"Wrong input\")\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdqpm2cq0.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted: [Int] = nums.map { to_number($0) }.sorted()\n    return\
    \ sorted.map { to_string($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqhraopde.swift:9:36: error: cannot find 'to_number' in scope\n\
    \    let sorted: [Int] = nums.map { to_number($0) }.sorted()\n               \
    \                    ^~~~~~~~~\n/tmp/tmpqhraopde.swift:10:25: error: cannot find\
    \ 'to_string' in scope\n    return sorted.map { to_string($0) }.joined(separator:\
    \ \" \")\n                        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { numberals.firstIndex(of: String($0))!\
    \ < numberals.firstIndex(of: String($1))! }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjsaei2hw.swift:9:42: error: cannot find 'numberals' in scope\n\
    \    let sortedNumbers = numbers.sorted { numberals.firstIndex(of: String($0))!\
    \ < numberals.firstIndex(of: String($1))! }\n                                \
    \         ^~~~~~~~~\n/tmp/tmpjsaei2hw.swift:9:82: error: cannot find 'numberals'\
    \ in scope\n    let sortedNumbers = numbers.sorted { numberals.firstIndex(of:\
    \ String($0))! < numberals.firstIndex(of: String($1))! }\n                   \
    \                                                              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    return nums.sorted(by: {$0 < $1}).joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbpbtg56v.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    //let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    let numbersArray = numbers.split(separator:\
    \ \" \")\n    //var numbers2 = [Int]()\n    var sortedNumbersArray = numbersArray.sorted()\n\
    \    let sortedNumbers = sortedNumbersArray.joined(separator: \" \")\n    return\
    \ sortedNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp51ntu7nv/tmp51ntu7nv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbb0922c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbb0619b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbb0619988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbb06187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp51ntu7nv                        0x000055bca8ca68d2 <unavailable> + 6354

    5    libc.so.6                          0x00002afbb0b0e460 __libc_start_main +
    245

    6    tmp51ntu7nv                        0x000055bca8ca6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let myStrings =\
    \ numbers.components(separatedBy: \" \")\n    let myStringsNumbers = [Int]()\n\
    \    var result: String = \"\"\n    for string in myStrings {\n        switch\
    \ string {\n        case \"zero\":\n            myStringsNumbers.append(0)\n \
    \       case \"one\":\n            myStringsNumbers.append(1)\n        case \"\
    two\":\n            myStringsNumbers.append(2)\n        case \"three\":\n    \
    \        myStringsNumbers.append(3)\n        case \"four\":\n            myStringsNumbers.append(4)\n\
    \        case \"five\":\n            myStringsNumbers.append(5)\n        case\
    \ \"six\":\n            myStringsNumbers.append(6)\n        case \"seven\":\n\
    \            myStringsNumbers.append(7)\n        case \"eight\":\n           \
    \ myStringsNumbers.append(8)\n        case \"nine\":\n            myStringsNumbers.append(9)\n\
    \        default:\n            result = \"Error\"\n        }\n    }\n    let mySortedStringsNumbers\
    \ = myStringsNumbers.sorted()\n    for number in mySortedStringsNumbers {\n  \
    \      switch number {\n        case 0:\n            result += \"zero \"\n   \
    \     case 1:\n            result += \"one \"\n        case 2:\n            result\
    \ += \"two \"\n        case 3:\n            result += \"three \"\n        case\
    \ 4:\n            result += \"four \"\n        case 5:\n            result +=\
    \ \"five \"\n        case 6:\n            result += \"six \"\n        case 7:\n\
    \            result += \"seven \"\n        case 8:\n            result += \"eight\
    \ \"\n        case 9:\n            result += \"nine \"\n        default:\n   \
    \         result = \"Error\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgd7xgdbx.swift:8:29: error: value of type 'String' has no member\
    \ 'components'\n    let myStrings = numbers.components(separatedBy: \" \")\n \
    \                   ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let map = [\"zero\"\
    : 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\":\
    \ 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    var number_array = [Int]()\n\
    \    var output = \"\"\n    for number in numbers.split(separator: \" \") {\n\
    \        number_array.append(map[String(number)]!)\n    }\n    number_array.sort()\n\
    \    for i in number_array {\n        output.append(String(i) + \" \")\n    }\n\
    \    return String(output.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: Exception
  stderr: 'tmpy4pvzmn0/tmpy4pvzmn0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11fe711c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11fe408b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11fe408988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11fe4077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4pvzmn0                        0x000056191c991dd5 <unavailable> + 7637

    5    libc.so.6                          0x00002b11fe8fd460 __libc_start_main +
    245

    6    tmpy4pvzmn0                        0x000056191c991929 <unavailable> + 6441

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  // FIXME\n  return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpzvm0bxa7/tmpzvm0bxa7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b026dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b023d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b023d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b023d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzvm0bxa7                        0x0000564f42e5b3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b5b028c7460 __libc_start_main +
    245

    6    tmpzvm0bxa7                        0x0000564f42e5af49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberArray\
    \ = numbers.components(separatedBy: \" \")\n    let sortedArray = numberArray.sorted(by:\
    \ {$0 < $1})\n    let sortedNumbers = sortedArray.joined(separator: \" \")\n \
    \   return sortedNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgbse_n4y.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let numberArray = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"one three\
    \ five\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmprm34lruh/tmprm34lruh.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80afeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80ace1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80ace1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80ace07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprm34lruh                        0x000056347384a305 <unavailable> + 4869

    5    libc.so.6                          0x00002ba80b1d6460 __libc_start_main +
    245

    6    tmprm34lruh                        0x0000563473849f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // TODO: Implement\
    \ me!\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpxi4c_du4/tmpxi4c_du4.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81b4778c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81b446fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81b446f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81b446e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxi4c_du4                        0x00005574d2cd33f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b81b4964460 __libc_start_main +
    245

    6    tmpxi4c_du4                        0x00005574d2cd2f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = numbers.components(separatedBy:\
    \ \" \")\n    nums.sort()\n    return nums.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp29q9c4jy.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    var nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let strArray = numbers.components(separatedBy:\
    \ \" \")\n    var dict: [String: Int] = [:]\n    var result = \"\"\n    for str\
    \ in strArray {\n        dict[str] = Int(String(str.first!))\n    }\n    let sortedDict\
    \ = dict.sorted {$0.value < $1.value}\n    for pair in sortedDict {\n        result\
    \ += \"\\(pair.key) \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqwbh717k.swift:8:28: error: value of type 'String' has no member\
    \ 'components'\n    let strArray = numbers.components(separatedBy: \" \")\n  \
    \                 ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let numerals: [String:Int]\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n  var numbersList =\
    \ numbers.components(separatedBy: \" \")\n  numbersList.sort {\n    return numerals[$0]!\
    \ < numerals[$1]!\n  }\n  return numbersList.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpsflgsy5q.swift:9:29: error: value of type 'String' has no member\
    \ 'components'\n  var numbersList = numbers.components(separatedBy: \" \")\n \
    \                   ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = numbers.split(separator:\
    \ \" \")\n    nums.sort(by: {number_map[String($0)]! < number_map[String($1)]!})\n\
    \    return nums.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuz7ng2h8.swift:9:20: error: cannot find 'number_map' in scope\n\
    \    nums.sort(by: {number_map[String($0)]! < number_map[String($1)]!})\n    \
    \               ^~~~~~~~~~\n/tmp/tmpuz7ng2h8.swift:9:46: error: cannot find 'number_map'\
    \ in scope\n    nums.sort(by: {number_map[String($0)]! < number_map[String($1)]!})\n\
    \                                             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ \"zero one two three four five six seven eight nine\".split(separator: \" \"\
    )\n    return numbers.split(separator: \" \").sorted { numberals.firstIndex(of:\
    \ String($0))! < numberals.firstIndex(of: String($1))! }.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp43y03f8_.swift:9:76: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.SubSequence' (aka 'Substring')\n    return\
    \ numbers.split(separator: \" \").sorted { numberals.firstIndex(of: String($0))!\
    \ < numberals.firstIndex(of: String($1))! }.joined(separator: \" \")\n       \
    \                                                                    ^\n/tmp/tmp43y03f8_.swift:9:116:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.SubSequence'\
    \ (aka 'Substring')\n    return numbers.split(separator: \" \").sorted { numberals.firstIndex(of:\
    \ String($0))! < numberals.firstIndex(of: String($1))! }.joined(separator: \"\
    \ \")\n                                                                      \
    \                                             ^\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers: [Int]\
    \ = numbers.components(separatedBy: \" \").map({ Int(numberToInt($0)) })\n   \
    \ numbers.sort()\n    return numbers.map({ IntToNumber(num: $0) }).joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3ds6cffg.swift:8:73: error: cannot find 'numberToInt' in scope\n\
    \    var numbers: [Int] = numbers.components(separatedBy: \" \").map({ Int(numberToInt($0))\
    \ })\n                                                                       \
    \ ^~~~~~~~~~~\n/tmp/tmp3ds6cffg.swift:10:26: error: cannot find 'IntToNumber'\
    \ in scope\n    return numbers.map({ IntToNumber(num: $0) }).joined(separator:\
    \ \" \")\n                         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var returnedValue\
    \ = \"\"\n    let items = numbers.components(separatedBy: \" \")\n    let itemsInt\
    \ = items.map { Int(translate_to_integer(numeral: $0)) }\n    returnedValue =\
    \ itemsInt.sorted().map { translate_to_string(integer: $0) }.joined(separator:\
    \ \" \")\n    return returnedValue\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpp7mabbjv.swift:9:25: error: value of type 'String' has no member\
    \ 'components'\n    let items = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpp7mabbjv.swift:10:36: error: cannot find\
    \ 'translate_to_integer' in scope\n    let itemsInt = items.map { Int(translate_to_integer(numeral:\
    \ $0)) }\n                                   ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp7mabbjv.swift:11:45:\
    \ error: cannot find 'translate_to_string' in scope\n    returnedValue = itemsInt.sorted().map\
    \ { translate_to_string(integer: $0) }.joined(separator: \" \")\n            \
    \                                ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let valid_numbers\
    \ = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n      \
    \  \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\"\
    : 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n\
    \    let valid_number_keys = valid_numbers.keys.sorted()\n    let input_numbers\
    \ = numbers.split(separator: \" \")\n    var output_numbers = input_numbers.compactMap\
    \ { String($0) }.map { valid_numbers[$0]! }\n    output_numbers.sort()\n    let\
    \ sorted_number_names = output_numbers.map { valid_number_keys[$0] }\n    return\
    \ sorted_number_names.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmplkdtt60o/tmplkdtt60o.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fce9dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fce6d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fce6d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fce6d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplkdtt60o                        0x000055ff074f4d95 <unavailable> + 7573

    5    libc.so.6                          0x00002b8fcebca460 __libc_start_main +
    245

    6    tmplkdtt60o                        0x000055ff074f48e9 <unavailable> + 6377

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let words = numbers.split(separator:\
    \ \" \")\n    let nums = words.map{wordToInt(word: String($0))}\n    let sortedNums\
    \ = nums.sorted()\n    return sortedNums.map{intToWord(number: $0)}.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpntnnad60.swift:9:26: error: cannot find 'wordToInt' in scope\n\
    \    let nums = words.map{wordToInt(word: String($0))}\n                     \
    \    ^~~~~~~~~\n/tmp/tmpntnnad60.swift:11:27: error: cannot find 'intToWord' in\
    \ scope\n    return sortedNums.map{intToWord(number: $0)}.joined(separator: \"\
    \ \")\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let number_strings\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n  let numbers_list = numbers.split(separator: \" \")\n\
    \  let number_int = numbers_list.map { number_strings.firstIndex(of: String($0))\
    \ }\n  let sorted_numbers = number_int.sorted { $0 < $1 }\n  return sorted_numbers.map\
    \ { number_strings[$0!] }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpynzshzvv.swift:11:44: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n  let sorted_numbers = number_int.sorted { $0 < $1 }\n        \
    \                                   ^\n/tmp/tmpynzshzvv.swift:11:44: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n  let\
    \ sorted_numbers = number_int.sorted { $0 < $1 }\n                           \
    \                ^\n                                              ?? <#default\
    \ value#>\n/tmp/tmpynzshzvv.swift:11:44: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n  let sorted_numbers = number_int.sorted\
    \ { $0 < $1 }\n                                           ^\n                \
    \                             !\n/tmp/tmpynzshzvv.swift:11:49: error: value of\
    \ optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<String>.Index' (aka 'Int')\n  let sorted_numbers =\
    \ number_int.sorted { $0 < $1 }\n                                            \
    \    ^\n/tmp/tmpynzshzvv.swift:11:49: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n  let sorted_numbers = number_int.sorted\
    \ { $0 < $1 }\n                                                ^\n           \
    \                                        ?? <#default value#>\n/tmp/tmpynzshzvv.swift:11:49:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n  let sorted_numbers = number_int.sorted { $0 < $1 }\n              \
    \                                  ^\n                                       \
    \           !\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return numbers.words\n\
    \        .sorted { String(numbers: $0) < String(numbers: $1) }\n        .joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7maug5ia.swift:9:19: error: no exact matches in call to initializer\
    \ \n        .sorted { String(numbers: $0) < String(numbers: $1) }\n          \
    \        ^\n/tmp/tmp7maug5ia.swift:9:19: note: found candidate with type '(Character)\
    \ -> String'\n        .sorted { String(numbers: $0) < String(numbers: $1) }\n\
    \                  ^\n/tmp/tmp7maug5ia.swift:9:19: note: found candidate with\
    \ type '(Unicode.Scalar) -> String'\n        .sorted { String(numbers: $0) < String(numbers:\
    \ $1) }\n                  ^\n/tmp/tmp7maug5ia.swift:9:19: note: found candidate\
    \ with type '(String.UnicodeScalarView) -> String'\n        .sorted { String(numbers:\
    \ $0) < String(numbers: $1) }\n                  ^\n/tmp/tmp7maug5ia.swift:9:19:\
    \ note: found candidate with type '(String.UTF16View) -> String'\n        .sorted\
    \ { String(numbers: $0) < String(numbers: $1) }\n                  ^\n/tmp/tmp7maug5ia.swift:9:19:\
    \ note: found candidate with type '(String.UTF8View) -> String'\n        .sorted\
    \ { String(numbers: $0) < String(numbers: $1) }\n                  ^\n/tmp/tmp7maug5ia.swift:9:19:\
    \ note: found candidate with type '(__shared Substring) -> String'\n        .sorted\
    \ { String(numbers: $0) < String(numbers: $1) }\n                  ^\n/tmp/tmp7maug5ia.swift:9:19:\
    \ note: found candidate with type '(Substring.UnicodeScalarView) -> String'\n\
    \        .sorted { String(numbers: $0) < String(numbers: $1) }\n             \
    \     ^\n/tmp/tmp7maug5ia.swift:9:41: error: no exact matches in call to initializer\
    \ \n        .sorted { String(numbers: $0) < String(numbers: $1) }\n          \
    \                              ^\n/tmp/tmp7maug5ia.swift:9:41: note: found candidate\
    \ with type '(Character) -> String'\n        .sorted { String(numbers: $0) < String(numbers:\
    \ $1) }\n                                        ^\n/tmp/tmp7maug5ia.swift:9:41:\
    \ note: found candidate with type '(Unicode.Scalar) -> String'\n        .sorted\
    \ { String(numbers: $0) < String(numbers: $1) }\n                            \
    \            ^\n/tmp/tmp7maug5ia.swift:9:41: note: found candidate with type '(String.UnicodeScalarView)\
    \ -> Stri"
  stdout: ''
  timestamp: 1660013417
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let result = numbers.split(separator:\
    \ \" \").sorted { String($0) < String($1) }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpncomkl9d/tmpncomkl9d.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab02f5e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab02f2ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab02f2dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab02f2dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpncomkl9d                        0x000055a9c97e88f2 <unavailable> + 6386

    5    libc.so.6                          0x00002ab02f7d2460 __libc_start_main +
    245

    6    tmpncomkl9d                        0x000055a9c97e8329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8lcgp1cm/tmp8lcgp1cm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcgp1cm                        0x000055fa1e50e3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adf4a686460 __libc_start_main +
    245

    6    tmp8lcgp1cm                        0x000055fa1e50df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number = numbers.split(separator:\
    \ \" \")\n    var result: [String] = []\n    for num in number {\n        switch\
    \ num {\n        case \"zero\":\n            result.append(\"0\")\n        case\
    \ \"one\":\n            result.append(\"1\")\n        case \"two\":\n        \
    \    result.append(\"2\")\n        case \"three\":\n            result.append(\"\
    3\")\n        case \"four\":\n            result.append(\"4\")\n        case \"\
    five\":\n            result.append(\"5\")\n        case \"six\":\n           \
    \ result.append(\"6\")\n        case \"seven\":\n            result.append(\"\
    7\")\n        case \"eight\":\n            result.append(\"8\")\n        case\
    \ \"nine\":\n            result.append(\"9\")\n        default:\n            break\n\
    \        }\n    }\n    result.sort()\n    var answer = \"\"\n    for num in result\
    \ {\n        switch num {\n        case \"0\":\n            answer += \"zero \"\
    \n        case \"1\":\n            answer += \"one \"\n        case \"2\":\n \
    \           answer += \"two \"\n        case \"3\":\n            answer += \"\
    three \"\n        case \"4\":\n            answer += \"four \"\n        case \"\
    5\":\n            answer += \"five \"\n        case \"6\":\n            answer\
    \ += \"six \"\n        case \"7\":\n            answer += \"seven \"\n       \
    \ case \"8\":\n            answer += \"eight \"\n        case \"9\":\n       \
    \     answer += \"nine \"\n        default:\n            break\n        }\n  \
    \  }\n    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp4uxk9a32/tmp4uxk9a32.swift:81: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab1a803c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab1a4fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab1a4fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab1a4f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uxk9a32                        0x000055b45e793a75 <unavailable> + 6773

    5    libc.so.6                          0x00002aab1a9ef460 __libc_start_main +
    245

    6    tmp4uxk9a32                        0x000055b45e7935c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let values = [\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted(by:\
    \ { return values.firstIndex(of: String($0))! < values.firstIndex(of: String($1))!\
    \ })\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sortedNumbers\
    \ = numbers.components(separatedBy: \" \").sorted { numberToInt($0) < numberToInt($1)\
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpksml5c5d.swift:8:71: error: cannot find 'numberToInt' in scope\n\
    \    let sortedNumbers = numbers.components(separatedBy: \" \").sorted { numberToInt($0)\
    \ < numberToInt($1) }\n                                                      \
    \                ^~~~~~~~~~~\n/tmp/tmpksml5c5d.swift:8:89: error: cannot find\
    \ 'numberToInt' in scope\n    let sortedNumbers = numbers.components(separatedBy:\
    \ \" \").sorted { numberToInt($0) < numberToInt($1) }\n                      \
    \                                                                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let array = numbers.components(separatedBy:\
    \ \" \")\n    let enumDict: [String: Int] = [\"zero\": 0, \"one\": 1, \"two\"\
    : 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\"\
    : 8, \"nine\": 9]\n    let arrayInt: [Int] = array.map({ (number) -> Int in\n\
    \        return enumDict[number]!\n    })\n    return arrayInt.sorted().map({\"\
    \\($0)\"}).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpca2sctsz.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    let array = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let words = numbers.components(separatedBy:\
    \ \" \")\n  let numbers = words.map { Int(wordToNumber(word: $0)) }\n  let sortedNumbers\
    \ = numbers.sorted()\n  let sortedNumbersAsWords = sortedNumbers.map { numberToWord(number:\
    \ $0) }\n  return sortedNumbersAsWords.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqu102rh2.swift:8:23: error: value of type 'String' has no member\
    \ 'components'\n  let words = numbers.components(separatedBy: \" \")\n       \
    \       ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpqu102rh2.swift:9:33: error: cannot find 'wordToNumber'\
    \ in scope\n  let numbers = words.map { Int(wordToNumber(word: $0)) }\n      \
    \                          ^~~~~~~~~~~~\n/tmp/tmpqu102rh2.swift:11:50: error:\
    \ cannot find 'numberToWord' in scope\n  let sortedNumbersAsWords = sortedNumbers.map\
    \ { numberToWord(number: $0) }\n                                             \
    \    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sortedNums =\
    \ numbers.components(separatedBy: \" \").sorted {\n        switch $0 {\n     \
    \   case \"zero\":\n            return true\n        case \"one\":\n         \
    \   if $1 == \"zero\" {\n                return false\n            }\n       \
    \     return true\n        case \"two\":\n            if $1 == \"zero\" || $1\
    \ == \"one\" {\n                return false\n            }\n            return\
    \ true\n        case \"three\":\n            if $1 == \"zero\" || $1 == \"one\"\
    \ || $1 == \"two\" {\n                return false\n            }\n          \
    \  return true\n        case \"four\":\n            if $1 == \"zero\" || $1 ==\
    \ \"one\" || $1 == \"two\" || $1 == \"three\" {\n                return false\n\
    \            }\n            return true\n        case \"five\":\n            if\
    \ $1 == \"zero\" || $1 == \"one\" || $1 == \"two\" || $1 == \"three\" || $1 ==\
    \ \"four\" {\n                return false\n            }\n            return\
    \ true\n        case \"six\":\n            if $1 == \"zero\" || $1 == \"one\"\
    \ || $1 == \"two\" || $1 == \"three\" || $1 == \"four\" || $1 == \"five\" {\n\
    \                return false\n            }\n            return true\n      \
    \  case \"seven\":\n            if $1 == \"zero\" || $1 == \"one\" || $1 == \"\
    two\" || $1 == \"three\" || $1 == \"four\" || $1 == \"five\" || $1 == \"six\"\
    \ {\n                return false\n            }\n            return true\n  \
    \      case \"eight\":\n            if $1 == \"zero\" || $1 == \"one\" || $1 ==\
    \ \"two\" || $1 == \"three\" || $1 == \"four\" || $1 == \"five\" || $1 == \"six\"\
    \ || $1 == \"seven\" {\n                return false\n            }\n        \
    \    return true\n        case \"nine\":\n            if $1 == \"zero\" || $1\
    \ == \"one\" || $1 == \"two\" || $1 == \"three\" || $1 == \"four\" || $1 == \"\
    five\" || $1 == \"six\" || $1 == \"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp9s6b4ads.swift:53:132: error: unterminated string literal\n   \
    \         if $1 == \"zero\" || $1 == \"one\" || $1 == \"two\" || $1 == \"three\"\
    \ || $1 == \"four\" || $1 == \"five\" || $1 == \"six\" || $1 == \"\n         \
    \                                                                            \
    \                                              ^\n/tmp/tmp9s6b4ads.swift:73:104:\
    \ error: expected '}' at end of closure\nassert(sort_numbers(numbers: \"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\n      \
    \                                                                            \
    \                     ^\n/tmp/tmp9s6b4ads.swift:8:66: note: to match this opening\
    \ '{'\n    let sortedNums = numbers.components(separatedBy: \" \").sorted {\n\
    \                                                                 ^\n/tmp/tmp9s6b4ads.swift:73:104:\
    \ error: expected '}' at end of brace statement\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )\n                                                                          \
    \                             ^\n/tmp/tmp9s6b4ads.swift:7:46: note: to match this\
    \ opening '{'\nfunc sort_numbers(numbers: String) -> String {\n              \
    \                               ^\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbersDict\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numberArray\
    \ = numbers.components(separatedBy: \" \")\n    var numbers: [Int] = []\n    for\
    \ number in numberArray {\n        if let number = numbersDict[number] {\n   \
    \         numbers.append(number)\n        }\n    }\n    numbers.sort()\n    var\
    \ sortedNumbers: [String] = []\n    for number in numbers {\n        for (key,\
    \ value) in numbersDict {\n            if value == number {\n                sortedNumbers.append(key)\n\
    \            }\n        }\n    }\n    return sortedNumbers.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm5laxx__.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let numberArray = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numberals: [Int]\
    \ = []\n    var sortedNumberals: [Int] = []\n    var stringNumberals: [String]\
    \ = []\n    var sortedStringNumberals: [String] = []\n    let numberMap: [String:\
    \ Int] = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let sortedNumberMap:\
    \ [Int: String] = [0: \"zero\", 1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\"\
    , 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"]\n    var stringNumberalsArray:\
    \ [String] = numbers.components(separatedBy: \" \")\n    for stringNumberal in\
    \ stringNumberalsArray {\n        numberals.append(numberMap[stringNumberal]!)\n\
    \    }\n    sortedNumberals = numberals.sorted()\n    for sortedNumberal in sortedNumberals\
    \ {\n        sortedStringNumberals.append(sortedNumberMap[sortedNumberal]!)\n\
    \    }\n    return sortedStringNumberals.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpr8fbg8h1.swift:14:50: error: value of type 'String' has no member\
    \ 'components'\n    var stringNumberalsArray: [String] = numbers.components(separatedBy:\
    \ \" \")\n                                         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numsInOrder = nums.sorted {(a, b) in numeral(a) < numeral(b)}\n\
    \    return numsInOrder.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjbyzs8ev.swift:9:46: error: cannot find 'numeral' in scope\n  \
    \  let numsInOrder = nums.sorted {(a, b) in numeral(a) < numeral(b)}\n       \
    \                                      ^~~~~~~\n/tmp/tmpjbyzs8ev.swift:9:59: error:\
    \ cannot find 'numeral' in scope\n    let numsInOrder = nums.sorted {(a, b) in\
    \ numeral(a) < numeral(b)}\n                                                 \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberMap =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let stringNumber =\
    \ numbers.split(separator: \" \")\n    var arrayNum: [Int] = []\n    for n in\
    \ stringNumber {\n        arrayNum.append(numberMap[String(n)]!)\n    }\n    arrayNum.sort()\n\
    \    var result = \"\"\n    for n in arrayNum {\n        for (k, v) in numberMap\
    \ {\n            if n == v {\n                result.append(contentsOf: k)\n \
    \               result.append(contentsOf: \" \")\n            }\n        }\n \
    \   }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    //Your code goes\
    \ here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: '/tmp/tmpguyr7ds5.swift:9:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted {\n        return numbers.index(of:\
    \ $0)! < numbers.index(of: $1)!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpoa_tb77v.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var result = \"\"\
    \n    let parts = numbers.components(separatedBy: \" \")\n    let sorted = parts.sorted(by:\
    \ {return Int(numberals[$0]!) < Int(numberals[$1]!)})\n    for element in sorted\
    \ {\n        result += element + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4ao7jogw.swift:9:25: error: value of type 'String' has no member\
    \ 'components'\n    let parts = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4ao7jogw.swift:10:47: error: cannot find\
    \ 'numberals' in scope\n    let sorted = parts.sorted(by: {return Int(numberals[$0]!)\
    \ < Int(numberals[$1]!)})\n                                              ^~~~~~~~~\n\
    /tmp/tmp4ao7jogw.swift:10:69: error: cannot find 'numberals' in scope\n    let\
    \ sorted = parts.sorted(by: {return Int(numberals[$0]!) < Int(numberals[$1]!)})\n\
    \                                                                    ^~~~~~~~~\n\
    /tmp/tmp4ao7jogw.swift:14:19: error: value of type 'String' has no member 'trimmingCharacters'\n\
    \    return result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4ao7jogw.swift:14:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let array = numbers.components(separatedBy:\
    \ \" \")\n    let sortedArray = array.sorted { numberMapping[$0]! < numberMapping[$1]!\
    \ }\n    return sortedArray.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8j8h2hr1.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    let array = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp8j8h2hr1.swift:9:38: error: cannot find\
    \ 'numberMapping' in scope\n    let sortedArray = array.sorted { numberMapping[$0]!\
    \ < numberMapping[$1]! }\n                                     ^~~~~~~~~~~~~\n\
    /tmp/tmp8j8h2hr1.swift:9:59: error: cannot find 'numberMapping' in scope\n   \
    \ let sortedArray = array.sorted { numberMapping[$0]! < numberMapping[$1]! }\n\
    \                                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    \n    let nums =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted(by:\
    \ { nums.firstIndex(of: String($0))! < nums.firstIndex(of: String($1))! })\n \
    \   return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013415
