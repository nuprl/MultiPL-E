language: swift
name: HumanEval_0_has_close_elements
results:
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 1..<numbers.count {\n \
    \       if abs(numbers[i] - numbers[i - 1]) < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp9bcoc4qu/tmp9bcoc4qu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3986c7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3986973b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3986973988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39869727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9bcoc4qu                        0x000055dcce556894 <unavailable> + 6292

    5    libc.so.6                          0x00002b3986e68460 __libc_start_main +
    245

    6    tmp9bcoc4qu                        0x000055dcce5562c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var array = numbers\n    array.sort()\n\
    \    for index in 0..<array.count-1 {\n        if array[index+1] - array[index]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j {\n              \
    \  if abs(numbers[i] - numbers[j]) < threshold {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count <= 1 {\n      \
    \  return false\n    }\n    var closest_distance = Double.infinity\n    for i\
    \ in 0..<numbers.count - 1 {\n        for j in i+1..<numbers.count {\n       \
    \     let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n            }\n        }\n \
    \   }\n    return closest_distance < threshold\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var result = false\n    var smaller\
    \ = 0.0\n    var larger = 0.0\n    if numbers.count > 1 {\n        smaller = numbers[0]\n\
    \        larger = numbers[1]\n        if smaller > larger {\n            larger\
    \ = numbers[0]\n            smaller = numbers[1]\n        }\n        for i in\
    \ 2..<numbers.count {\n            if numbers[i] > larger {\n                larger\
    \ = numbers[i]\n            } else if numbers[i] < smaller {\n               \
    \ smaller = numbers[i]\n            }\n        }\n        if larger - smaller\
    \ < threshold {\n            result = true\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmph8gbimjd/tmph8gbimjd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67a2278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67a1f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67a1f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67a1f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph8gbimjd                        0x000055aee1ac35ae <unavailable> + 5550

    5    libc.so.6                          0x00002b67a2464460 __libc_start_main +
    245

    6    tmph8gbimjd                        0x000055aee1ac31d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if (numbers.count < 2) {\n     \
    \   return false\n    }\n    for i in 0...numbers.count - 2 {\n        for j in\
    \ i + 1...numbers.count - 1 {\n            if abs(numbers[i] - numbers[j]) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var last: Double? = nil\n    for\
    \ x in numbers {\n        if let last = last {\n            if x - last < threshold\
    \ {\n                return true\n            }\n        }\n        last = x\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmps5rp7cik/tmps5rp7cik.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2941b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae293eabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae293eab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae293eaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5rp7cik                        0x00005631706025e1 <unavailable> + 5601

    5    libc.so.6                          0x00002ae2943a0460 __libc_start_main +
    245

    6    tmps5rp7cik                        0x0000563170602109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var result = false\n    for currentIndex\
    \ in 0..<numbers.count {\n        for nextIndex in (currentIndex + 1)..<numbers.count\
    \ {\n            let currentNumber = numbers[currentIndex]\n            let nextNumber\
    \ = numbers[nextIndex]\n            let distance = abs(currentNumber - nextNumber)\n\
    \            if distance < threshold {\n                result = true\n      \
    \          break\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count == 0 {\n      \
    \  return false\n    }\n\n    if numbers.count == 1 {\n        return false\n\
    \    }\n\n    if numbers.count == 2 {\n        return abs(numbers[0] - numbers[1])\
    \ < threshold\n    }\n\n    for i in 0..<numbers.count {\n        for j in 0..<numbers.count\
    \ {\n            if i != j {\n                if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                    return true\n                }\n        \
    \    }\n        }\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // Your code here\n    for index\
    \ in 0..<numbers.count {\n        let j = index + 1\n        if j < numbers.count\
    \ && abs(numbers[index] - numbers[j]) < threshold {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp5ifr525u/tmp5ifr525u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b068f635c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b068f32cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b068f32c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b068f32b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ifr525u                        0x0000561509999894 <unavailable> + 6292

    5    libc.so.6                          0x00002b068f821460 __libc_start_main +
    245

    6    tmp5ifr525u                        0x00005615099992c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let numbers_to_check = numbers.sorted()\n\
    \    let numbers_count = numbers_to_check.count\n    for index in 0..<numbers_count\
    \ - 1 {\n        if abs(numbers_to_check[index] - numbers_to_check[index + 1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if (i != j) && (abs(numbers[i]\
    \ - numbers[j]) < threshold) {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // Sorting by distance to 0\n  \
    \  let sorted = numbers.sorted(by: {\n        abs($0) < abs($1)\n    })\n    \n\
    \    // Keeping track of the smallest distance\n    var smallest_distance = sorted[1]\
    \ - sorted[0]\n    \n    // Iterating through pairs and checking if any smaller\
    \ than the threshold\n    for i in 0...(sorted.count - 2) {\n        smallest_distance\
    \ = min(smallest_distance, sorted[i + 1] - sorted[i])\n        if smallest_distance\
    \ < threshold {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for (i, number) in numbers.enumerated()\
    \ {\n        for n in numbers[i + 1..<numbers.count] {\n            if abs(number\
    \ - n) < threshold {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var found = false\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ distance = numbers[i] - numbers[j]\n            if distance < 0 {\n        \
    \        distance *= -1\n            }\n            if distance < threshold {\n\
    \                found = true\n                break\n            }\n        }\n\
    \    }\n    return found\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2eiiycdf.swift:14:26: error: left side of mutating operator isn't\
    \ mutable: 'distance' is a 'let' constant\n                distance *= -1\n  \
    \              ~~~~~~~~ ^\n/tmp/tmp2eiiycdf.swift:12:13: note: change 'let' to\
    \ 'var' to make it mutable\n            let distance = numbers[i] - numbers[j]\n\
    \            ^~~\n            var\n"
  stdout: ''
  timestamp: 1660013481
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for (index, element) in numbers.enumerated()\
    \ {\n        for otherElement in numbers[index+1..<numbers.count] {\n        \
    \    if abs(element - otherElement) < threshold {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    if numbers.count == 2 {\n        return abs(numbers[0]\
    \ - numbers[1]) < threshold\n    }\n    let sorted = numbers.sorted()\n    for\
    \ i in 0...sorted.count - 2 {\n        if abs(sorted[i] - sorted[i + 1]) < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count-1 {\n        if sorted_numbers[i+1] - sorted_numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n\tlet sorted_numbers = numbers.sorted()\n\
    \tfor i in 0..<sorted_numbers.count-1 {\n\t\tif abs(sorted_numbers[i+1] - sorted_numbers[i])\
    \ < threshold {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n\tvar prev: Double?\n\tfor num in numbers\
    \ {\n\t\tif let p = prev {\n\t\t\tif num - p < threshold {\n\t\t\t\treturn true\n\
    \t\t\t}\n\t\t}\n\t\tprev = num\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpjoyc244u/tmpjoyc244u.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0860488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b086017fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b086017f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b086017e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjoyc244u                        0x000055eb40cdf5e1 <unavailable> + 5601

    5    libc.so.6                          0x00002b0860674460 __libc_start_main +
    245

    6    tmpjoyc244u                        0x000055eb40cdf109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for (i, n) in numbers.enumerated()\
    \ {\n        for (j, m) in numbers.enumerated() {\n            if i != j && abs(n\
    \ - m) < threshold {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // TODO: implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpzyj2s_gr/tmpzyj2s_gr.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e4b166c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e4ae5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e4ae5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e4ae5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyj2s_gr                        0x000055cc9492b37e <unavailable> + 4990

    5    libc.so.6                          0x00002b3e4b352460 __libc_start_main +
    245

    6    tmpzyj2s_gr                        0x000055cc9492afa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    for n in numbers {\n        for m in numbers {\n            if\
    \ n == m { continue }\n            let distance = abs(n - m)\n            if distance\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmplvs9mzsw/tmplvs9mzsw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3534b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3531abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3531ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3531aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvs9mzsw                        0x00005647c4392a4c <unavailable> + 6732

    5    libc.so.6                          0x00002ac3536a0460 __libc_start_main +
    245

    6    tmplvs9mzsw                        0x00005647c4392259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var close_numbers = [(Double, Double)]()\n\
    \    for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n\
    \            if abs(numbers[i] - numbers[j]) < threshold {\n                close_numbers.append((numbers[i],\
    \ numbers[j]))\n            }\n        }\n    }\n    return close_numbers.count\
    \ > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    \n    if (numbers.count < 2) {\n\
    \        return false\n    }\n    \n    // sort the numbers array\n    var sortedNumbers\
    \ = numbers.sorted()\n    \n    // iterate the sorted numbers array and check\
    \ if any two elements are closer than threshold\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    \n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if (i != j) && abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count <= 1 {\n      \
    \  return false\n    }\n    var sortedNumbers = numbers.sorted()\n    for i in\
    \ 0..<(sortedNumbers.count - 1) {\n        if abs(sortedNumbers[i] - sortedNumbers[i\
    \ + 1]) < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let _numbers = numbers.sorted()\n\
    \    for i in 0..<_numbers.count - 1 {\n        if _numbers[i+1] - _numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sortedNumbers = numbers.sorted()\n\
    \    var i = 0\n    while i < sortedNumbers.count - 1 {\n        if sortedNumbers[i\
    \ + 1] - sortedNumbers[i] < threshold {\n            return true\n        }\n\
    \        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0 ..< numbers.count {\n\
    \        for j in i+1 ..< numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard let sorted_numbers = sort(numbers:\
    \ numbers) else {\n        return false\n    }\n    for i in 0..<sorted_numbers.count-1\
    \ {\n        if abs(sorted_numbers[i] - sorted_numbers[i+1]) < threshold {\n \
    \           return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxngq2lik.swift:9:32: error: cannot find 'sort' in scope\n    guard\
    \ let sorted_numbers = sort(numbers: numbers) else {\n                       \
    \        ^~~~\n"
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count <= 1 {\n      \
    \  return false\n    }\n    var sorted_numbers = numbers.sorted(by: <)\n    for\
    \ i in 0...sorted_numbers.count - 2 {\n        if sorted_numbers[i + 1] - sorted_numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var closest: [Double] = [numbers[0]]\n\
    \    var arr = numbers\n    arr.remove(at: 0)\n    for i in arr {\n        closest.append(i)\n\
    \        closest.sort()\n        if(closest[0] != closest[1]) {\n            closest.remove(at:\
    \ 0)\n        }\n        if(closest[0] - closest[1] < threshold) {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b871f71dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b871f414561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b871f414286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b871f41413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b871f413bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b871f213f44 <unavailable> + 188228

    6    tmpfffsy38j                        0x000056270d5d201a <unavailable> + 8218

    7    tmpfffsy38j                        0x000056270d5d1699 <unavailable> + 5785

    8    libc.so.6                          0x00002b871f909460 __libc_start_main +
    245

    9    tmpfffsy38j                        0x000056270d5d1339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has = false\n    if numbers.count\
    \ > 1 {\n        for i in 0..<numbers.count {\n            for j in i+1..<numbers.count\
    \ {\n                if abs(numbers[i] - numbers[j]) < threshold {\n         \
    \           has = true\n                }\n            }\n        }\n    }\n \
    \   return has\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n  for i in 0..<numbers.count {\n   \
    \ for j in 0..<numbers.count {\n      if (i != j) && (abs(numbers[i] - numbers[j])\
    \ < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted: [Double] = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j && abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    var nn_index = 0\n    var next_index = 1\n    while\
    \ nn_index < numbers.count - 1 {\n        if abs(numbers[nn_index] - numbers[next_index])\
    \ < threshold {\n            return true\n        }\n        nn_index += 1\n \
    \       next_index += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp73zul0r1/tmp73zul0r1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adab54fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adab51f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adab51f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adab51f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73zul0r1                        0x000055b3ebae7704 <unavailable> + 5892

    5    libc.so.6                          0x00002adab56e6460 __libc_start_main +
    245

    6    tmp73zul0r1                        0x000055b3ebae7139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    for i in 0..<numbers.count {\n        for j in i..<numbers.count\
    \ {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n           \
    \     return true\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpfsi4enft/tmpfsi4enft.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab146fbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab146cb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab146cb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab146cb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsi4enft                        0x000055cf9d2b27a1 <unavailable> + 6049

    5    libc.so.6                          0x00002ab1471aa460 __libc_start_main +
    245

    6    tmpfsi4enft                        0x000055cf9d2b22c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var previous = Double.greatestFiniteMagnitude\n\
    \    for number in numbers {\n        if abs(number - previous) < threshold {\n\
    \            return true\n        }\n        previous = number\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpu51eoitx/tmpu51eoitx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7716257c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7715f4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7715f4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7715f4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu51eoitx                        0x00005572f2e70824 <unavailable> + 6180

    5    libc.so.6                          0x00002b7716443460 __libc_start_main +
    245

    6    tmpu51eoitx                        0x00005572f2e70259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var result = false\n    for first\
    \ in 0..<numbers.count {\n        for second in first+1..<numbers.count {\n  \
    \          if abs(numbers[first] - numbers[second]) < threshold {\n          \
    \      result = true\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var num = numbers.sorted()\n   \
    \ while num.count > 1 {\n        if num[1] - num[0] < threshold {\n          \
    \  return true\n        }\n        num.removeFirst()\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // Unlike in C/C++, we don't need\
    \ to check if 'i' is in bounds, because\n    // Swift arrays are bounds-checked\n\
    \    for i in 0..<numbers.count {\n        let diff = numbers[i] - numbers[i+1]\n\
    \        if abs(diff) < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b60f7ab0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60f77a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b60f77a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b60f77a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b60f77a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b60f75a6f44 <unavailable> + 188228

    6    tmpnhox8e3o                        0x000055a9d6635eb6 <unavailable> + 7862

    7    tmpnhox8e3o                        0x000055a9d663572a <unavailable> + 5930

    8    libc.so.6                          0x00002b60f7c9c460 __libc_start_main +
    245

    9    tmpnhox8e3o                        0x000055a9d66352c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    var minNumber: Double?\n    var maxNumber: Double?\n    for number\
    \ in numbers {\n        if minNumber == nil || number < minNumber! {\n       \
    \     minNumber = number\n        }\n        if maxNumber == nil || number > maxNumber!\
    \ {\n            maxNumber = number\n        }\n    }\n    let minToMaxDiff =\
    \ abs(maxNumber! - minNumber!)\n    if minToMaxDiff < threshold {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp27wvv6vi/tmp27wvv6vi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d7d44fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d7d146b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d7d146988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d7d1457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27wvv6vi                        0x000055aa6fdf36be <unavailable> + 5822

    5    libc.so.6                          0x00002b8d7d63b460 __libc_start_main +
    245

    6    tmp27wvv6vi                        0x000055aa6fdf32e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_diff = Double.infinity\n\
    \    for i in 0..<numbers.count - 1 {\n        for j in i + 1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n            }\n        }\n  \
    \  }\n    return min_diff < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sort_numbers = numbers.sorted()\n\
    \    for i in 0...(sort_numbers.count - 2) {\n        if (sort_numbers[i + 1]\
    \ - sort_numbers[i]) < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var closestPairDistance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closestPairDistance {\n                closestPairDistance = distance\n  \
    \          }\n        }\n    }\n    return closestPairDistance < threshold\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let test = numbers.sorted()\n  \
    \  var last = test[0]\n    for number in test[1...] {\n        if number - last\
    \ < threshold {\n            return true\n        }\n        last = number\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var i = 0\n    var j = 1\n    while\
    \ i < numbers.count - 1 {\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    assert(numbers.count > 1)\n    assert(threshold\
    \ > 0)\n    // TODO: implement\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp2j_8eeri/tmp2j_8eeri.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab596270c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab595f67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab595f67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab595f667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2j_8eeri                        0x00005579443c33ce <unavailable> + 5070

    5    libc.so.6                          0x00002ab59645c460 __libc_start_main +
    245

    6    tmp2j_8eeri                        0x00005579443c2ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var closest_distance: Double = 1e10\n\
    \    var min_index: Int = 0\n    var max_index: Int = 0\n    for i in 0 ..< numbers.count\
    \ {\n        for j in i+1 ..< numbers.count {\n            let distance = numbers[i]\
    \ - numbers[j]\n            if abs(distance) < closest_distance {\n          \
    \      closest_distance = abs(distance)\n                min_index = min(i, j)\n\
    \                max_index = max(i, j)\n            }\n        }\n    }\n    return\
    \ (closest_distance < threshold)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted = numbers.sorted()\n\
    \    var i = 0\n    while i < sorted.count - 1 {\n        let current = sorted[i]\n\
    \        let next = sorted[i + 1]\n        if abs(current - next) < threshold\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for index in 0..<numbers.count {\n\
    \        for element in numbers[index+1..<numbers.count] {\n            if abs(numbers[index]\
    \ - element) < threshold {\n                return true\n            }\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return numbers.has_close_elements(threshold:\
    \ threshold)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8i8cns1o.swift:9:20: error: value of type '[Double]' has no member\
    \ 'has_close_elements'\n    return numbers.has_close_elements(threshold: threshold)\n\
    \           ~~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n  // TODO: student implementation\n\
    \  let sortedNumbers = numbers.sorted()\n  var result = false\n  for i in 0..<sortedNumbers.count\
    \ - 1 {\n    if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n \
    \     result = true\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    if numbers.count == 2 {\n        return abs(numbers[0]\
    \ - numbers[1]) < threshold\n    }\n    for i in 0..<numbers.count {\n       \
    \ for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count-1 {\n        if sorted_numbers[i+1] - sorted_numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    while !sorted_numbers.isEmpty {\n        var last_number = sorted_numbers.removeLast()\n\
    \        while !sorted_numbers.isEmpty {\n            let curr_number = sorted_numbers.removeLast()\n\
    \            if abs(last_number - curr_number) < threshold {\n               \
    \ return true\n            }\n            last_number = curr_number\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var bool = false\n    for i in 0..<numbers.count\
    \ - 1 {\n        let value1 = numbers[i]\n        for j in i + 1..<numbers.count\
    \ {\n            let value2 = numbers[j]\n            if abs(value1 - value2)\
    \ < threshold {\n                bool = true\n            }\n        }\n    }\n\
    \    return bool\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    for i in 0..<numbers.count - 1 {\n        for j in i + 1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements: Bool = false\n\
    \    var numbers_sorted: [Double] = numbers.sorted()\n    var i: Int = 0\n   \
    \ var distance: Double = threshold\n\n    for _ in numbers_sorted {\n        if\
    \ (i + 1) < numbers_sorted.count {\n            distance = numbers_sorted[i +\
    \ 1] - numbers_sorted[i]\n            if distance < threshold {\n            \
    \    has_close_elements = true\n                break\n            }\n       \
    \ }\n        i += 1\n    }\n\n    return has_close_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    let sorted_numbers = numbers.sorted()\n    var previous\
    \ = sorted_numbers[0]\n    for number in sorted_numbers[1..<sorted_numbers.count]\
    \ {\n        if number - previous < threshold {\n            return true\n   \
    \     }\n        previous = number\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n  for i in 0..<numbers.count {\n   \
    \ for j in i+1..<numbers.count {\n      if abs(numbers[i] - numbers[j]) < threshold\
    \ {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let nums = numbers.sorted()\n  \
    \  for i in 0..<nums.count - 1 {\n        if nums[i + 1] - nums[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    var min_distance = Double.infinity\n    for i in 0..<numbers.count\
    \ {\n        for j in 0..<numbers.count {\n            if j == i {\n         \
    \       continue\n            }\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < min_distance {\n                min_distance = distance\n\
    \            }\n        }\n    }\n    return min_distance < threshold\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count - 1 {\n\
    \        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for index in 0..<numbers.count {\n\
    \        let number = numbers[index]\n        for otherIndex in (index + 1)..<numbers.count\
    \ {\n            let otherNumber = numbers[otherIndex]\n            if abs(number\
    \ - otherNumber) < threshold {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return sorted(numbers).has_close_elements(threshold)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpepvrh76o.swift:9:12: error: cannot find 'sorted' in scope\n   \
    \ return sorted(numbers).has_close_elements(threshold)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var closestDistance = numbers[0]\n\
    \    var closestIndex = 0\n    let sorted = numbers.sorted()\n    for i in 0..<sorted.count\
    \ - 1 {\n        if sorted[i+1] - sorted[i] < closestDistance {\n            closestDistance\
    \ = sorted[i+1] - sorted[i]\n            closestIndex = i\n        }\n    }\n\
    \    return sorted[closestIndex + 1] - sorted[closestIndex] < threshold\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if threshold <= 0 {\n        return\
    \ false\n    }\n    if numbers.count <= 1 {\n        return false\n    }\n   \
    \ for i in 0...numbers.count - 2 {\n        for j in i + 1...numbers.count - 1\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var minDiff = Double.infinity\n\
    \    for (index, number) in numbers.enumerated() {\n        var pairNumbers =\
    \ numbers\n        pairNumbers.remove(at: index)\n        for pairNumber in pairNumbers\
    \ {\n            let diff = abs(number - pairNumber)\n            if diff < minDiff\
    \ {\n                minDiff = diff\n            }\n        }\n    }\n    return\
    \ minDiff < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    let sorted = numbers.sorted()\n    var minDiff = Double.infinity\n\
    \    for i in 1..<sorted.count {\n        minDiff = min(minDiff, sorted[i] - sorted[i\
    \ - 1])\n    }\n    return minDiff < threshold\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var last = numbers[0]\n    for number\
    \ in numbers {\n        if number - last < threshold {\n            return true\n\
    \        }\n        last = number\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpe0tnlc1q/tmpe0tnlc1q.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b2b126c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2ae1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2ae1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2ae1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0tnlc1q                        0x0000557fb15bb641 <unavailable> + 5697

    5    libc.so.6                          0x00002b8b2b312460 __libc_start_main +
    245

    6    tmpe0tnlc1q                        0x0000557fb15bb169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n  var last = numbers[0]\n  for number\
    \ in numbers[1...] {\n    if abs(number - last) < threshold {\n      return true\n\
    \    }\n    last = number\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpm37wogij/tmpm37wogij.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b351c8adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b351c5a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b351c5a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b351c5a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm37wogij                        0x00005607d7aa29c4 <unavailable> + 6596

    5    libc.so.6                          0x00002b351ca99460 __libc_start_main +
    245

    6    tmpm37wogij                        0x00005607d7aa23f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for index1 in 0..<numbers.count\
    \ - 1 {\n        for index2 in index1 + 1..<numbers.count {\n            if abs(numbers[index1]\
    \ - numbers[index2]) < threshold {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var previous: Double? = nil\n  \
    \  for n in numbers {\n        if let p = previous {\n            if fabs(n -\
    \ p) < threshold {\n                return true\n            }\n        }\n  \
    \      previous = n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa25fml3p.swift:12:16: error: cannot find 'fabs' in scope\n    \
    \        if fabs(n - p) < threshold {\n               ^~~~\n"
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var minDistance = threshold\n  \
    \  for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n    \
    \        let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < minDistance {\n                minDistance = distance\n            }\n   \
    \     }\n    }\n    return minDistance < threshold\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers.sorted()\n\
    \    for i in 1..<numbers.count {\n        if abs(numbers[i] - numbers[i - 1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard !numbers.isEmpty else { return\
    \ false }\n    var checkedNumbers = [numbers[0]]\n    for number in numbers {\n\
    \        if checkedNumbers.isEmpty {\n            checkedNumbers.append(number)\n\
    \        } else {\n            for checkedNumber in checkedNumbers {\n       \
    \         if abs(number - checkedNumber) < threshold {\n                    return\
    \ true\n                }\n            }\n            checkedNumbers.append(number)\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp_ieyk2nx/tmp_ieyk2nx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9b218fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9b1e86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9b1e86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9b1e857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ieyk2nx                        0x0000561ab81db7e1 <unavailable> + 6113

    5    libc.so.6                          0x00002ab9b237b460 __libc_start_main +
    245

    6    tmp_ieyk2nx                        0x0000561ab81db309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    var sorted_numbers = numbers.sorted()\n    for (i,\
    \ value) in sorted_numbers.enumerated() {\n        let next_element = sorted_numbers[safe:\
    \ i + 1]\n        if next_element == nil {\n            break\n        }\n   \
    \     if value - next_element! <= threshold {\n            return true\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp34o72zwc.swift:14:42: error: extraneous argument label 'safe:'\
    \ in subscript\n        let next_element = sorted_numbers[safe: i + 1]\n     \
    \                                    ^~~~~~~\n                               \
    \           \n"
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let uniqueNumbers = Set(numbers)\n\
    \    let sortedNumbers = uniqueNumbers.sorted(by: <)\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if (sortedNumbers[i + 1] - sortedNumbers[i]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpjsnh3fpj/tmpjsnh3fpj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a1471cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a14413b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a14413988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a144127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsnh3fpj                        0x0000564c32535b1c <unavailable> + 6940

    5    libc.so.6                          0x00002b7a14908460 __libc_start_main +
    245

    6    tmpjsnh3fpj                        0x0000564c32535329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var new_threshold = Double(threshold)\n\
    \    var has_close_elements = false\n    var index = 0\n    while index < numbers.count\
    \ - 1 && !has_close_elements {\n        let a = numbers[index]\n        var new_index\
    \ = index + 1\n        while new_index < numbers.count && !has_close_elements\
    \ {\n            let b = numbers[new_index]\n            if a < b {\n        \
    \        let distance = b - a\n                if distance < new_threshold {\n\
    \                    has_close_elements = true\n                }\n          \
    \  } else {\n                let distance = a - b\n                if distance\
    \ < new_threshold {\n                    has_close_elements = true\n         \
    \       }\n            }\n            new_index += 1\n        }\n        index\
    \ += 1\n    }\n    return has_close_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var closeFound = false\n    for\
    \ (i, element1) in numbers.enumerated() {\n        for element2 in numbers[i +\
    \ 1..<numbers.count] {\n            if abs(element1 - element2) < threshold {\n\
    \                closeFound = true\n            }\n        }\n    }\n    return\
    \ closeFound\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    let sortedNumbers = numbers.sorted()\n    for i in 0 ..< sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var i = 0\n    var j = 1\n    while\
    \ j < numbers.count {\n        if abs(numbers[i] - numbers[j]) < threshold {\n\
    \            return true\n        }\n        i += 1\n        j += 1\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmps08hvkp_/tmps08hvkp_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4062accc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40627c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40627c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40627c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps08hvkp_                        0x000055a84eb70704 <unavailable> + 5892

    5    libc.so.6                          0x00002b4062cb8460 __libc_start_main +
    245

    6    tmps08hvkp_                        0x000055a84eb70139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var hasClose = false\n    for i\
    \ in 0..<numbers.count-1 {\n        for j in i+1..<numbers.count {\n         \
    \   if abs(numbers[i] - numbers[j]) < threshold {\n                hasClose =\
    \ true\n            }\n        }\n    }\n    return hasClose\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // Sort the array\n    let sortedNumbers\
    \ = numbers.sorted()\n    \n    // Go through all the numbers. If any is closer\
    \ to its next neighbor than given threshold,\n    // return true.\n    for i in\
    \ 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    \n    // If we\
    \ made it all the way through the array without finding any pairs that are close,\n\
    \    // return false.\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for number in numbers {\n      \
    \  for another_number in numbers {\n            if (number < another_number &&\
    \ another_number - number < threshold) {\n                return true\n      \
    \      }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp4ic1c25j/tmp4ic1c25j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7e7fe2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7e7cd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7e7cd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7e7cd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ic1c25j                        0x000055a864c898fc <unavailable> + 6396

    5    libc.so.6                          0x00002ae7e81ce460 __libc_start_main +
    245

    6    tmp4ic1c25j                        0x000055a864c89109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n\tvar numbers_ordered = numbers.sorted()\n\
    \t\n\twhile (numbers_ordered.count > 1) {\n\t\tif (numbers_ordered[0] - numbers_ordered[1]\
    \ < threshold) {\n\t\t\treturn true\n\t\t}\n\t\t\n\t\tnumbers_ordered.remove(at:\
    \ 0)\n\t}\n\t\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpl4vaa0cx/tmpl4vaa0cx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af606efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af606bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af606bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af606bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4vaa0cx                        0x0000558330809621 <unavailable> + 5665

    5    libc.so.6                          0x00002af6070ea460 __libc_start_main +
    245

    6    tmpl4vaa0cx                        0x0000558330809149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count -\
    \ 1 {\n        let diff = sorted[i+1] - sorted[i]\n        if diff < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return threshold > 0 && numbers.count\
    \ > 1 &&\n        numbers.enumerated().combinations(2).map { abs($0.1 - $1.1)\
    \ }.min()! < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcwh05xvr.swift:10:30: error: value of type 'EnumeratedSequence<[Double]>'\
    \ has no member 'combinations'\n        numbers.enumerated().combinations(2).map\
    \ { abs($0.1 - $1.1) }.min()! < threshold\n        ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // TODO: implement me!\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpfecvadt8/tmpfecvadt8.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ab1a2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ab1724b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ab1724988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ab17237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfecvadt8                        0x0000562c4b7bc37e <unavailable> + 4990

    5    libc.so.6                          0x00002b7ab1c19460 __libc_start_main +
    245

    6    tmpfecvadt8                        0x0000562c4b7bbfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var closestDist: Double = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let dist = abs(numbers[i] - numbers[j])\n\
    \                if dist < closestDist {\n                    closestDist = dist\n\
    \                }\n            }\n        }\n    }\n    return closestDist <\
    \ threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    var current: Double = sortedNumbers[0]\n    for i in 1..<sortedNumbers.count\
    \ {\n        if current - sortedNumbers[i] > threshold {\n            current\
    \ = sortedNumbers[i]\n        } else {\n            return true\n        }\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp517uru17/tmp517uru17.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cfeacec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cfe7c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cfe7c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cfe7c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp517uru17                        0x0000564d0a695751 <unavailable> + 5969

    5    libc.so.6                          0x00002b2cfecba460 __libc_start_main +
    245

    6    tmp517uru17                        0x0000564d0a695279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var pairExists = false\n    var\
    \ minDistance = Double.infinity\n    for i in 0..<numbers.count-1 {\n        for\
    \ j in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < minDistance {\n                minDistance = distance\n\
    \            }\n        }\n    }\n    if minDistance <= threshold {\n        pairExists\
    \ = true\n    }\n    return pairExists\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // TODO\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp3iy5hxl4/tmp3iy5hxl4.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b642c54dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b642c244b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b642c244988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b642c2437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3iy5hxl4                        0x0000560fed81f37e <unavailable> + 4990

    5    libc.so.6                          0x00002b642c739460 __libc_start_main +
    245

    6    tmp3iy5hxl4                        0x0000560fed81efa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sorted = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    for number in numbers {\n        for other in numbers\
    \ {\n            if abs(number - other) < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp6izt7fou/tmp6izt7fou.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dc1cabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dc19a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dc19a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dc19a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6izt7fou                        0x00005621be5b7731 <unavailable> + 5937

    5    libc.so.6                          0x00002b1dc1e97460 __libc_start_main +
    245

    6    tmp6izt7fou                        0x00005621be5b7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 1..<numbers.count {\n        if abs(numbers[i] - numbers[i-1]) <\
    \ threshold {\n            has_close_elements = true\n            break\n    \
    \    }\n    }\n    return has_close_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpbw9pc67d/tmpbw9pc67d.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c638b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c635a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c635a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c635a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbw9pc67d                        0x0000555d618af894 <unavailable> + 6292

    5    libc.so.6                          0x00002b4c63a9d460 __libc_start_main +
    245

    6    tmpbw9pc67d                        0x0000555d618af2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard !numbers.isEmpty else { return\
    \ false }\n    let sortedNumbers = numbers.sorted(by: <)\n    for i in 0 ..< sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count - 1 {\n\
    \        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    \n    guard numbers.count > 1 else\
    \ {\n        return false\n    }\n    \n    var sortedNumbers = numbers.sorted()\n\
    \    \n    // For example, array of [1.0, 2.0, 3.0, 4.0, 5.0]\n    // Step 1.\
    \ Iterate through array\n    // Step 2. Compare distance between 1.0 and 2.0,\
    \ which is greater than 1.0.\n    // Step 3. Compare distance between 2.0 and\
    \ 3.0, which is greater than 1.0.\n    // Step 4. Compare distance between 3.0\
    \ and 4.0, which is greater than 1.0.\n    // Step 5. Compare distance between\
    \ 4.0 and 5.0, which is greater than 1.0.\n    // If all distances are greater\
    \ than 1.0, it means no two elements are closer than\n    // threshold.\n    for\
    \ index in 0 ..< sortedNumbers.count - 1 {\n        let distance = sortedNumbers[index\
    \ + 1] - sortedNumbers[index]\n        if distance < threshold {\n           \
    \ return true\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    for i in 0..<numbers.count - 1 {\n        for j in i + 1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for x in numbers {\n        for\
    \ y in numbers {\n            if fabs(x - y) < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjvsje6gg.swift:11:16: error: cannot find 'fabs' in scope\n    \
    \        if fabs(x - y) < threshold {\n               ^~~~\n"
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    //1\n    var numbersCopy = numbers\n\
    \    //2\n    numbersCopy.sort()\n    //3\n    for index in 0..<numbersCopy.count\
    \ - 1 {\n        //4\n        if abs(numbersCopy[index] - numbersCopy[index +\
    \ 1]) < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    let sortedArray = numbers.sorted(by: <)\n    for i in 0..<(sortedArray.count\
    \ - 1) {\n        if sortedArray[i+1] - sortedArray[i] < threshold {\n       \
    \     return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count - 1 {\n\
    \        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 0 else { return\
    \ false }\n    guard numbers.count > 1 else { return false }\n    \n    let sortedNumbers\
    \ = numbers.sorted()\n    \n    for i in 0..<sortedNumbers.count-1 {\n       \
    \ let distance = abs(sortedNumbers[i] - sortedNumbers[i+1])\n        if distance\
    \ < threshold {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sorted = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // TODO: implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpzyj2s_gr/tmpzyj2s_gr.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e4b166c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e4ae5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e4ae5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e4ae5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyj2s_gr                        0x000055cc9492b37e <unavailable> + 4990

    5    libc.so.6                          0x00002b3e4b352460 __libc_start_main +
    245

    6    tmpzyj2s_gr                        0x000055cc9492afa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // Implement has_close_elements\
    \ here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmplns2rtpz/tmplns2rtpz.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b101373fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1013436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1013436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10134357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplns2rtpz                        0x000055d20fdab37e <unavailable> + 4990

    5    libc.so.6                          0x00002b101392b460 __libc_start_main +
    245

    6    tmplns2rtpz                        0x000055d20fdaafa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count -\
    \ 1 {\n        let currentNumber = sorted[i]\n        let nextNumber = sorted[i\
    \ + 1]\n        if nextNumber - currentNumber < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count <= 1 {\n      \
    \  return false\n    }\n    let sorted_numbers = numbers.sorted()\n    for i in\
    \ 0..<(sorted_numbers.count - 1) {\n        if abs(sorted_numbers[i] - sorted_numbers[i\
    \ + 1]) < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var isClose: Bool = false\n    for\
    \ i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n       \
    \     if abs(numbers[i] - numbers[j]) < threshold {\n                isClose =\
    \ true\n            }\n        }\n    }\n    return isClose\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for (i, x) in numbers.enumerated()\
    \ {\n        for (j, y) in numbers.enumerated() {\n            if i != j && abs(x\
    \ - y) < threshold {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // Naive algorithm: sort the array\
    \ and then look through it.\n    // Complexity: O(n log n).\n    let sorted =\
    \ numbers.sorted()\n    var last = sorted[0]\n    for next in sorted[1...] {\n\
    \        if next - last < threshold {\n            return true\n        }\n  \
    \      last = next\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    for i in 0..<numbers.count - 1 {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    var set: Set<Double> = Set(numbers)\n    var previous:\
    \ Double = set.popFirst()!\n    for element in set {\n        if abs(element -\
    \ previous) < threshold {\n            return true\n        }\n        previous\
    \ = element\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpy330unqf/tmpy330unqf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8326173c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8325e6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8325e6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8325e697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy330unqf                        0x00005568f44497ae <unavailable> + 6062

    5    libc.so.6                          0x00002b832635f460 __libc_start_main +
    245

    6    tmpy330unqf                        0x00005568f44493d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sorted = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j && abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard !numbers.isEmpty else { return\
    \ false }\n    var heap = MinHeap<Double>()\n    heap.push(numbers[0])\n    for\
    \ i in 1..<numbers.count {\n        let min_value = heap.peek()!\n        if abs(numbers[i]\
    \ - min_value) < threshold {\n            return true\n        }\n        heap.push(numbers[i])\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7sedqt46.swift:10:16: error: cannot find 'MinHeap' in scope\n \
    \   var heap = MinHeap<Double>()\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var result = false\n    var number_of_numbers\
    \ = numbers.count\n    while number_of_numbers > 0 {\n        let number = numbers[number_of_numbers\
    \ - 1]\n        for i in 0..<number_of_numbers - 1 {\n            let check =\
    \ numbers[i]\n            if abs(number - check) < threshold {\n             \
    \   result = true\n                break\n            }\n        }\n        number_of_numbers\
    \ -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard !numbers.isEmpty else { return\
    \ false }\n    var sortedNumbers = numbers.sorted()\n    var previous = sortedNumbers.removeFirst()\n\
    \    while !sortedNumbers.isEmpty {\n        let next = sortedNumbers.removeFirst()\n\
    \        if abs(previous - next) < threshold {\n            return true\n    \
    \    }\n        previous = next\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var current_min = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let diff = abs(numbers[i] - numbers[j])\n            if diff < current_min\
    \ {\n                current_min = diff\n            }\n        }\n    }\n   \
    \ return current_min < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    \n    var sortedNumbers = numbers.sorted()\n\
    \    \n    for i in 0..<sortedNumbers.count - 1 {\n        if abs(sortedNumbers[i]\
    \ - sortedNumbers[i + 1]) < threshold {\n            return true\n        }\n\
    \    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count <= 1 {\n      \
    \  return false\n    }\n\n    var min_diff = Double.infinity\n    for i in 0..<numbers.count\
    \ - 1 {\n        for j in i+1..<numbers.count {\n            min_diff = min(min_diff,\
    \ abs(numbers[i] - numbers[j]))\n        }\n    }\n\n    return min_diff < threshold\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count - 1 {\n\
    \        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    var lower_numbers = [Double]()\n    var upper_numbers\
    \ = [Double]()\n    var closest_lower = 0.0\n    var closest_upper = 0.0\n   \
    \ var current_value = numbers[0]\n    for (index, number) in numbers.enumerated()\
    \ {\n        if number > current_value {\n            upper_numbers.append(number)\n\
    \            current_value = number\n        } else {\n            lower_numbers.append(number)\n\
    \        }\n        if index > 0 {\n            if lower_numbers.last! - current_value\
    \ < closest_lower {\n                closest_lower = lower_numbers.last! - current_value\n\
    \            }\n            if current_value - upper_numbers.last! < closest_upper\
    \ {\n                closest_upper = current_value - upper_numbers.last!\n   \
    \         }\n        }\n    }\n    if threshold > closest_lower || threshold >\
    \ closest_upper {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpoznyq8f7/tmpoznyq8f7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3d8a8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3d8785b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3d8785988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3d87847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoznyq8f7                        0x0000562624ead921 <unavailable> + 6433

    5    libc.so.6                          0x00002ac3d8c7a460 __libc_start_main +
    245

    6    tmpoznyq8f7                        0x0000562624ead449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var t = numbers\n    t.sort()\n\
    \    for (index, _) in t.enumerated() {\n        if index > 0 {\n            if\
    \ abs(t[index - 1] - t[index]) < threshold {\n                return true\n  \
    \          }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var filteredArray: [Double] = []\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i == j {\n                continue\n            }\n            filteredArray.append(numbers[i]\
    \ - numbers[j])\n        }\n    }\n    let filteredThreshold = filteredArray.filter\
    \ { abs($0) < threshold }\n    return filteredThreshold.count > 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard let max = numbers.max(), let\
    \ min = numbers.min() else {\n        return false\n    }\n    if max - min <=\
    \ threshold {\n        return true\n    }\n    for i in 0..<numbers.count {\n\
    \        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ <= threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013483
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return Set(numbers.map { $0 }).count\
    \ < numbers.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpzz65jkh6/tmpzz65jkh6.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80b1e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80aedab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80aeda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80aed97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz65jkh6                        0x0000557c8617b57e <unavailable> + 5502

    5    libc.so.6                          0x00002ba80b3cf460 __libc_start_main +
    245

    6    tmpzz65jkh6                        0x0000557c8617b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013483
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var index = 0\n    while index <\
    \ numbers.count - 1 {\n        if abs(numbers[index] - numbers[index + 1]) < threshold\
    \ {\n            return true\n        }\n        index += 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp9kcks26t/tmp9kcks26t.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfedb06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfed7fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfed7fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfed7fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kcks26t                        0x000055665acd9704 <unavailable> + 5892

    5    libc.so.6                          0x00002acfedcf2460 __libc_start_main +
    245

    6    tmp9kcks26t                        0x000055665acd9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var smallest_difference = threshold\n\
    \    var is_any_close = false\n    for i in 0..<numbers.count {\n        for j\
    \ in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < smallest_difference {\n                smallest_difference\
    \ = diff\n                is_any_close = true\n            }\n        }\n    }\n\
    \    return is_any_close\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var curr = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] - curr < threshold {\n       \
    \     return true\n        }\n        curr = numbers[i]\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpanoaud2h/tmpanoaud2h.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5f140dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5f1104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5f1104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5f11037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanoaud2h                        0x000055abd91496b1 <unavailable> + 5809

    5    libc.so.6                          0x00002ac5f15f9460 __libc_start_main +
    245

    6    tmpanoaud2h                        0x000055abd91491d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n  for i in 0..<numbers.count {\n   \
    \ for j in i+1..<numbers.count {\n      if abs(numbers[i] - numbers[j]) < threshold\
    \ {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    var i = 0\n    while i < numbers.count - 1 {\n    \
    \    if abs(numbers[i] - numbers[i + 1]) < threshold {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpa1djc4kz/tmpa1djc4kz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9860f23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9860c1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9860c1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9860c197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1djc4kz                        0x0000561c7dcfc704 <unavailable> + 5892

    5    libc.so.6                          0x00002b986110f460 __libc_start_main +
    245

    6    tmpa1djc4kz                        0x0000561c7dcfc139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sorted_numbers = numbers.sorted(by:\
    \ <)\n    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i\
    \ + 1] - sorted_numbers[i] < threshold {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    guard let min = numbers.min(), let max = numbers.max() else { return\
    \ false }\n    guard max - min < threshold else { return false }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb4nbsjjt/tmpb4nbsjjt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b48c7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b48976b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b48976988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b489757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4nbsjjt                        0x0000564a3e7e34ce <unavailable> + 5326

    5    libc.so.6                          0x00002b8b48e6b460 __libc_start_main +
    245

    6    tmpb4nbsjjt                        0x0000564a3e7e30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    for (i, x) in numbers.enumerated() {\n        for y\
    \ in numbers[i+1..<numbers.count] {\n            if abs(x - y) < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n  guard numbers.count > 1 else { return\
    \ false }\n  guard threshold > 0 else { return false }\n  for i in 0..<numbers.count\
    \ - 1 {\n    for j in i + 1..<numbers.count {\n      let first = numbers[i]\n\
    \      let second = numbers[j]\n      let diff = abs(first - second)\n      if\
    \ diff < threshold {\n        return true\n      }\n    }\n  }\n  return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    var close = false\n    for i in 0..<numbers.count-1 {\n        if numbers[i+1]\
    \ - numbers[i] < threshold {\n            close = true\n        }\n    }\n   \
    \ return close\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    var sortedNumbers = numbers.sorted()\n    for index in 1..<sortedNumbers.count\
    \ {\n        if abs(sortedNumbers[index - 1] - sortedNumbers[index]) < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_diff = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i..<numbers.count {\n    \
    \        if i != j {\n                let diff = abs(numbers[i] - numbers[j])\n\
    \                if diff < min_diff {\n                    min_diff = diff\n \
    \               }\n            }\n        }\n    }\n    return min_diff < threshold\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // TODO: task-3: Implement this\
    \ function\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpu_bynoo4/tmpu_bynoo4.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefc554dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefc5244b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefc5244988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefc52437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_bynoo4                        0x0000555b512d737e <unavailable> + 4990

    5    libc.so.6                          0x00002aefc5739460 __libc_start_main +
    245

    6    tmpu_bynoo4                        0x0000555b512d6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count == 1 {\n      \
    \  return false\n    }\n    var sorted_numbers = numbers.sorted()\n    for i in\
    \ 0...(sorted_numbers.count - 2) {\n        if sorted_numbers[i + 1] - sorted_numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    assert(numbers.count > 1)\n    var\
    \ last_number = numbers[0]\n    for number in numbers {\n        if abs(number\
    \ - last_number) < threshold {\n            return true\n        }\n        last_number\
    \ = number\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpjf4pf4ow/tmpjf4pf4ow.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b557869ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5578395b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5578395988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55783947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf4pf4ow                        0x0000558432e1f781 <unavailable> + 6017

    5    libc.so.6                          0x00002b557888a460 __libc_start_main +
    245

    6    tmpjf4pf4ow                        0x0000558432e1f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sorted = numbers.sorted()\n\
    \    for index in 1..<sorted.count {\n        if abs(sorted[index] - sorted[index\
    \ - 1]) < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for number in numbers {\n      \
    \  if is_closer_than(numbers: numbers, number: number, threshold: threshold) {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7judse9a.swift:10:12: error: cannot find 'is_closer_than' in scope\n\
    \        if is_closer_than(numbers: numbers, number: number, threshold: threshold)\
    \ {\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for (i, a) in numbers.enumerated()\
    \ {\n        for b in numbers[(i + 1)..<numbers.count] {\n            if abs(a\
    \ - b) < threshold {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var hasClose = false\n    if numbers.count\
    \ > 1 {\n        for i in 0..<numbers.count - 1 {\n            if numbers[i] +\
    \ threshold > numbers[i + 1] && numbers[i] - threshold < numbers[i + 1] {\n  \
    \              hasClose = true\n            }\n        }\n    }\n    return hasClose\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmps6mb2gyo/tmps6mb2gyo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd8f49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd8c40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd8c40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd8c3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6mb2gyo                        0x000055d8bf1397a4 <unavailable> + 6052

    5    libc.so.6                          0x00002afdd9135460 __libc_start_main +
    245

    6    tmps6mb2gyo                        0x000055d8bf1391d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    \n    var closest = Double.infinity\n\
    \    \n    for (i, element1) in numbers.enumerated() {\n        for element2 in\
    \ numbers[i..<numbers.count] {\n            if abs(element1 - element2) < closest\
    \ {\n                closest = abs(element1 - element2)\n            }\n     \
    \   }\n    }\n    \n    return closest < threshold\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmphrlj0bg5/tmphrlj0bg5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b2b72ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b2b421b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b2b421988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b2b4207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphrlj0bg5                        0x0000556779562ad1 <unavailable> + 6865

    5    libc.so.6                          0x00002b6b2b916460 __libc_start_main +
    245

    6    tmphrlj0bg5                        0x00005567795625f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // TODO: Implement me!\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp22kt461f/tmp22kt461f.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b539bb1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b539b813b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b539b813988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b539b8127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp22kt461f                        0x000055c5c323f37e <unavailable> + 4990

    5    libc.so.6                          0x00002b539bd08460 __libc_start_main +
    245

    6    tmp22kt461f                        0x000055c5c323efa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n  // sort numbers first\n  let sorted_numbers\
    \ = numbers.sorted()\n  // now compare each pair of numbers that has exactly one\
    \ index between them\n  for i in 0..<sorted_numbers.count-2 {\n    let distance\
    \ = sorted_numbers[i+1] - sorted_numbers[i]\n    if distance < threshold {\n \
    \     return true\n    }\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpvci4df0f/tmpvci4df0f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7936b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7933a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7933a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7933a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvci4df0f                        0x000055e72a3ae844 <unavailable> + 6212

    5    libc.so.6                          0x00002ab79389e460 __libc_start_main +
    245

    6    tmpvci4df0f                        0x000055e72a3ae279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count == 0 {\n      \
    \  return false\n    }\n\n    let sortedNumbers = numbers.sorted()\n    for (i,\
    \ number) in sortedNumbers.enumerated() {\n        if i < sortedNumbers.count\
    \ - 1 {\n            let nextNumber = sortedNumbers[i + 1]\n            if nextNumber\
    \ - number < threshold {\n                return true\n            }\n       \
    \ }\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count-1 {\n        if numbers[i+1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpb09t4s8b/tmpb09t4s8b.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc1f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc1f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc1f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb09t4s8b                        0x000055eeb38a037e <unavailable> + 4990

    5    libc.so.6                          0x00002b1cc242a460 __libc_start_main +
    245

    6    tmpb09t4s8b                        0x000055eeb389ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sorted = numbers.sorted()\n\
    \    return sorted.indices.contains {\n        let left = sorted[$0]\n       \
    \ let right = sorted[safe: $0 + 1]\n        return (right - left) < threshold\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2z4at276.swift:12:27: error: extraneous argument label 'safe:'\
    \ in subscript\n        let right = sorted[safe: $0 + 1]\n                   \
    \       ^~~~~~~\n                           \n"
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var i = 0\n    var j = 1\n    while\
    \ i < numbers.count - 1 {\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    for (index, element) in numbers.enumerated() {\n        for other_element\
    \ in numbers[(index + 1)..<numbers.count] {\n            if abs(element - other_element)\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var distance = threshold\n    var\
    \ index = 0\n    while index < numbers.count {\n        var i = 0\n        while\
    \ i < numbers.count {\n            if i != index {\n                if abs(numbers[index]\
    \ - numbers[i]) < distance {\n                    return true\n              \
    \  }\n            }\n            i += 1\n        }\n        index += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // 1. Sort the input numbers in\
    \ ascending order\n    let sorted = numbers.sorted()\n    \n    // 2. Compare\
    \ pairs of numbers and check if the difference is smaller than given threshold\n\
    \    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] < threshold\
    \ {\n            return true\n        }\n    }\n    \n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j && abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min = 0.0\n    for i in 0...numbers.count-1\
    \ {\n        for j in 0...numbers.count-1 {\n            if i != j {\n       \
    \         let dist = abs(numbers[i] - numbers[j])\n                if dist < min\
    \ {\n                    min = dist\n                }\n            }\n      \
    \  }\n    }\n    return min < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpyh43itzf/tmpyh43itzf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b104fe71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b104fb68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b104fb68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b104fb677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh43itzf                        0x0000561a245e17a1 <unavailable> + 6049

    5    libc.so.6                          0x00002b105005d460 __libc_start_main +
    245

    6    tmpyh43itzf                        0x0000561a245e12c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var result = false\n    for i in\
    \ 0..<numbers.count {\n        for j in 0..<numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                result = true\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpa7huvqg7/tmpa7huvqg7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8570380c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8570077b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8570077988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85700767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa7huvqg7                        0x0000557826a477a1 <unavailable> + 6049

    5    libc.so.6                          0x00002b857056c460 __libc_start_main +
    245

    6    tmpa7huvqg7                        0x0000557826a472c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_diff = numbers[1] - numbers[0]\n\
    \    var sorted_numbers = numbers.sorted()\n    var closest_numbers: (Double,\
    \ Double) = (sorted_numbers[0], sorted_numbers[1])\n    if min_diff > threshold\
    \ {\n        return false\n    } else {\n        for i in 1..<sorted_numbers.count\
    \ {\n            let diff = sorted_numbers[i] - sorted_numbers[i-1]\n        \
    \    if diff < min_diff {\n                min_diff = diff\n                closest_numbers\
    \ = (sorted_numbers[i-1], sorted_numbers[i])\n            }\n        }\n     \
    \   if min_diff > threshold {\n            return false\n        } else {\n  \
    \          return true\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp11s6gt_c/tmp11s6gt_c.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab536549c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab536240b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab536240988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab53623f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11s6gt_c                        0x00005574f783264e <unavailable> + 5710

    5    libc.so.6                          0x00002ab536735460 __libc_start_main +
    245

    6    tmp11s6gt_c                        0x00005574f7832279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    let pairs = Array(zip(numbers[0..<numbers.count-1],\
    \ numbers[1..<numbers.count]))\n    for (f,s) in pairs {\n        if abs(f-s)\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpk6tab_lo/tmpk6tab_lo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4943eeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4943be5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4943be5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4943be47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk6tab_lo                        0x000056130b98aa64 <unavailable> + 6756

    5    libc.so.6                          0x00002b49440da460 __libc_start_main +
    245

    6    tmpk6tab_lo                        0x000056130b98a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 1 else { return\
    \ false }\n    let distances = zip(numbers, numbers.dropFirst()).map(-)\n    return\
    \ distances.contains(where: { abs($0) < threshold })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpxp8q610l/tmpxp8q610l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7299a5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7299754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7299754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72997537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxp8q610l                        0x00005631b5d98914 <unavailable> + 6420

    5    libc.so.6                          0x00002b7299c49460 __libc_start_main +
    245

    6    tmpxp8q610l                        0x00005631b5d98349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    \n    return numbers.contains(where:\
    \ { (value) -> Bool in\n        let difference = numbers.map { abs(value - $0)\
    \ }\n        return difference.contains(where: { $0 < threshold && $0 != 0 })\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpcotwkgeo/tmpcotwkgeo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace49fb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace49ca9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace49ca9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace49ca87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcotwkgeo                        0x000055dc4d71199c <unavailable> + 6556

    5    libc.so.6                          0x00002ace4a19e460 __libc_start_main +
    245

    6    tmpcotwkgeo                        0x000055dc4d7111a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var temp: Double\n    let sortedArray\
    \ = numbers.sorted()\n    for (index, num) in sortedArray.enumerated() {\n   \
    \     if index == 0 {\n            temp = num\n        } else {\n            if\
    \ num - temp < threshold {\n                return true\n            }\n     \
    \       temp = num\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9h6arulq.swift:15:22: error: variable 'temp' used before being\
    \ initialized\n            if num - temp < threshold {\n                     ^\n\
    /tmp/tmp9h6arulq.swift:9:9: note: variable defined here\n    var temp: Double\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count - 1 {\n\
    \        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // Given that the numbers are sorted,\
    \ we can just compare the\n    // current number with the next one to see if they\
    \ are close enough.\n    guard numbers.count > 1 else {\n        return false\n\
    \    }\n    for i in 0..<numbers.count - 1 {\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmppf6it1p0/tmppf6it1p0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ba3008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ba2cffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ba2cff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ba2cfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppf6it1p0                        0x0000559ccae60894 <unavailable> + 6292

    5    libc.so.6                          0x00002b0ba31f4460 __libc_start_main +
    245

    6    tmppf6it1p0                        0x0000559ccae602c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count - 1 {\n\
    \        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: -1
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // The numbers in the sorted array\
    \ are no longer close to each other.\n    return has_close_elements(numbers: numbers.sorted(),\
    \ threshold: threshold)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013489
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    guard numbers.count > 0 else { return\
    \ false }\n    var abs_diff: [Double] = []\n    for index in 0..<numbers.count\
    \ - 1 {\n        let diff = abs(numbers[index] - numbers[index + 1])\n       \
    \ abs_diff.append(diff)\n    }\n    return abs_diff.contains(threshold)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp4zwz1tve/tmp4zwz1tve.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7254ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7251d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7251d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7251d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4zwz1tve                        0x000055e0aa18379e <unavailable> + 6046

    5    libc.so.6                          0x00002ab7256c9460 __libc_start_main +
    245

    6    tmp4zwz1tve                        0x000055e0aa1833c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013484
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for index in 0..<numbers.count {\n\
    \        for second_index in index + 1..<numbers.count {\n            if abs(numbers[index]\
    \ - numbers[second_index]) < threshold {\n                return true\n      \
    \      }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013484
