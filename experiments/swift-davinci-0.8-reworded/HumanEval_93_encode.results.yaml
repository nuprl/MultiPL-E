language: swift
name: HumanEval_93_encode
results:
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = String()\n    for (index, letter) in message.enumerated() {\n        var c:\
    \ Character\n        switch letter {\n        case \"a\", \"e\", \"i\", \"o\"\
    , \"u\":\n            c = Character(String(message[message.index(message.startIndex,\
    \ offsetBy: index + 2)]).uppercased())\n        default:\n            c = Character(String(letter).uppercased())\n\
    \        }\n        encoded.append(c)\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpyzr_akl1/tmpyzr_akl1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb709d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb706ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb706ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb706cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzr_akl1                        0x00005625ba2c6927 <unavailable> + 6439

    5    libc.so.6                          0x00002acb70bc3460 __libc_start_main +
    245

    6    tmpyzr_akl1                        0x00005625ba2c6569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var arr\
    \ = Array(message)\n    for i in 0..<arr.count {\n        if let letter = arr[i].asciiValue\
    \ {\n            let code = letter < 97 ? letter + 32 : letter - 32\n        \
    \    arr[i] = String(UnicodeScalar(code)!)\n            if let letter = arr[i].asciiValue\
    \ {\n                if let newLetter = alpha(ascii: letter) {\n             \
    \       arr[i] = String(UnicodeScalar(newLetter)!)\n                }\n      \
    \      }\n        }\n    }\n    return String(arr)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvkz24lc_.swift:17:22: error: cannot assign value of type 'String'\
    \ to subscript of type 'String.Element' (aka 'Character')\n            arr[i]\
    \ = String(UnicodeScalar(code)!)\n                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvkz24lc_.swift:19:36: error: cannot find 'alpha' in scope\n          \
    \      if let newLetter = alpha(ascii: letter) {\n                           \
    \        ^~~~~\n/tmp/tmpvkz24lc_.swift:20:30: error: cannot assign value of type\
    \ 'String' to subscript of type 'String.Element' (aka 'Character')\n         \
    \           arr[i] = String(UnicodeScalar(newLetter)!)\n                     \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let alphabet = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    for character\
    \ in message {\n        if character.isUppercase {\n            if character ==\
    \ \"Z\" {\n                result.append(\"B\")\n            } else {\n      \
    \          result.append(String(alphabet[alphabet.firstIndex(of: character)! +\
    \ 1]).lowercased())\n            }\n        } else if character.isLowercase {\n\
    \            if character == \"z\" {\n                result.append(\"b\")\n \
    \           } else {\n                result.append(String(alphabet[alphabet.firstIndex(of:\
    \ String(character).uppercased())! + 1]))\n            }\n        } else {\n \
    \           result.append(character)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxi7e910y.swift:26:89: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n             \
    \   result.append(String(alphabet[alphabet.firstIndex(of: String(character).uppercased())!\
    \ + 1]))\n                                                                   \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.lowercased().map {\n        let char = $0\n        if let vowel = englishVowels.firstIndex(of:\
    \ char) {\n            return englishVowels[(vowel + 2) % 5]\n        } else {\n\
    \            return char\n        }\n    }.map {\n        switch $0 {\n      \
    \  case \"a\":\n            return \"A\"\n        case \"e\":\n            return\
    \ \"E\"\n        case \"i\":\n            return \"I\"\n        case \"o\":\n\
    \            return \"O\"\n        case \"u\":\n            return \"U\"\n   \
    \     default:\n            return $0\n        }\n    }.joined()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprmu92zrw.swift:15:24: error: cannot find 'englishVowels' in scope\n\
    \        if let vowel = englishVowels.firstIndex(of: char) {\n               \
    \        ^~~~~~~~~~~~~\n/tmp/tmprmu92zrw.swift:16:20: error: cannot find 'englishVowels'\
    \ in scope\n            return englishVowels[(vowel + 2) % 5]\n              \
    \     ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let dictionary: [Character: Character] = [\"a\": \"c\", \"e\": \"g\", \"\
    i\": \"k\", \"o\": \"q\", \"u\": \"y\"]\n    for letter in message {\n       \
    \ if let letter = letter.lowercased().first {\n            if vowels.contains(letter)\
    \ {\n                encodedMessage.append(dictionary[letter]!)\n            }\
    \ else {\n                encodedMessage.append(letter)\n            }\n     \
    \   }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpc7nmop96/tmpc7nmop96.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab80bd6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab80ba65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab80ba65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab80ba647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7nmop96                        0x00005573c8c05a37 <unavailable> + 6711

    5    libc.so.6                          0x00002ab80bf5a460 __libc_start_main +
    245

    6    tmpc7nmop96                        0x00005573c8c05589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var output = \"\"\n \
    \   for char in message {\n        if let vowelIndex = vowels.firstIndex(of: char)\
    \ {\n            let newVowelIndex = (vowelIndex + 2) % vowels.count\n       \
    \     output.append(vowels[newVowelIndex])\n        } else {\n            output.append(char)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpg4v7ysd9/tmpg4v7ysd9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3d82d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3d7fcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3d7fcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3d7fce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4v7ysd9                        0x000055eff8551817 <unavailable> + 6167

    5    libc.so.6                          0x00002af3d84c4460 __libc_start_main +
    245

    6    tmpg4v7ysd9                        0x000055eff8551459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var output\
    \ = \"\"\n    for letter in message {\n        if letter.isUppercase {\n     \
    \       output.append(letter.lowercased())\n        } else {\n            output.append(letter.uppercased())\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpih_rnfwi/tmpih_rnfwi.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4abc68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4ab95fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4ab95f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4ab95e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpih_rnfwi                        0x000055ca79dac517 <unavailable> + 5399

    5    libc.so.6                          0x00002ab4abe54460 __libc_start_main +
    245

    6    tmpih_rnfwi                        0x000055ca79dac159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // Write\
    \ your code here\n    let lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n    let\
    \ uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let vowels = \"aeiou\"\n   \
    \ var result = \"\"\n    for letter in message {\n        let index = lowercase.index(of:\
    \ letter)\n        let uppercaseIndex = uppercase.index(of: letter)\n        let\
    \ vowelIndex = vowels.index(of: letter)\n        if vowelIndex != nil {\n    \
    \        result.append(vowels[index(index: index(index: vowelIndex))])\n     \
    \   } else if uppercaseIndex != nil {\n            result.append(uppercase[index(index:\
    \ uppercaseIndex)])\n        } else if index != nil {\n            result.append(lowercase[index(index:\
    \ index)])\n        } else {\n            result.append(letter)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprh4cwanr.swift:19:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = lowercase.index(of: letter)\n    \
    \                          ^\n/tmp/tmprh4cwanr.swift:19:31: note: use 'firstIndex(of:)'\
    \ instead\n        let index = lowercase.index(of: letter)\n                 \
    \             ^~~~~\n                              firstIndex\n/tmp/tmprh4cwanr.swift:20:40:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ uppercaseIndex = uppercase.index(of: letter)\n                             \
    \          ^\n/tmp/tmprh4cwanr.swift:20:40: note: use 'firstIndex(of:)' instead\n\
    \        let uppercaseIndex = uppercase.index(of: letter)\n                  \
    \                     ^~~~~\n                                       firstIndex\n\
    /tmp/tmprh4cwanr.swift:21:33: warning: 'index(of:)' is deprecated: renamed to\
    \ 'firstIndex(of:)'\n        let vowelIndex = vowels.index(of: letter)\n     \
    \                           ^\n/tmp/tmprh4cwanr.swift:21:33: note: use 'firstIndex(of:)'\
    \ instead\n        let vowelIndex = vowels.index(of: letter)\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmprh4cwanr.swift:23:34:\
    \ error: cannot call value of non-function type 'String.Index?'\n            result.append(vowels[index(index:\
    \ index(index: vowelIndex))])\n                                 ^\n/tmp/tmprh4cwanr.swift:23:47:\
    \ error: cannot call value of non-function type 'String.Index?'\n            result.append(vowels[index(index:\
    \ index(index: vowelIndex))])\n                                              ^\n\
    /tmp/tmprh4cwanr.swift:25:37: error: cannot call value of non-function type 'String.Index?'\n\
    \            result.append(uppercase[index(index: uppercaseIndex)])\n        \
    \                            ^\n/tmp/tmprh4cwanr.swift:27:37: error: cannot call\
    \ value of non-function type 'String.Index?'\n            result.append(lowercase[index(index:\
    \ index)])\n                                    ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  var finalString\
    \ = \"\"\n  let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let\
    \ alpha = \"abcdefghijklmnopqrstuvwxyz\"\n  let upperAlpha = alpha.uppercased()\n\
    \  var alphaArray = Array(alpha)\n  var upperAlphaArray = Array(upperAlpha)\n\
    \  for char in message {\n    if vowels.contains(char) {\n      if let index =\
    \ alphaArray.firstIndex(of: char) {\n        finalString.append(alphaArray[(index\
    \ + 2) % 26])\n      } else if let index = upperAlphaArray.firstIndex(of: char)\
    \ {\n        finalString.append(upperAlphaArray[(index + 2) % 26])\n      }\n\
    \    } else {\n      if let index = alphaArray.firstIndex(of: char) {\n      \
    \  finalString.append(upperAlphaArray[index])\n      } else if let index = upperAlphaArray.firstIndex(of:\
    \ char) {\n        finalString.append(alphaArray[index])\n      }\n    }\n  }\n\
    \  return finalString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp0a_lnr8q/tmp0a_lnr8q.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec864b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec861afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec861af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec861ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0a_lnr8q                        0x000056057adc5957 <unavailable> + 6487

    5    libc.so.6                          0x00002aec866a4460 __libc_start_main +
    245

    6    tmp0a_lnr8q                        0x000056057adc5599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\".uppercased()\n    let newVowels = \"cdfghjklmnpqrstvwxyz\".uppercased()\n\
    \    var newMessage = \"\"\n    for char in message {\n        let charStr = String(char)\n\
    \        if vowels.contains(charStr) {\n            if charStr == \"U\" {\n  \
    \              newMessage += \"A\"\n            } else {\n                let\
    \ index = vowels.index(of: charStr)!\n                let newIndex = vowels.index(index,\
    \ offsetBy: 2)\n                newMessage += String(newVowels[newIndex])\n  \
    \          }\n        } else {\n            if charStr == charStr.uppercased()\
    \ {\n                newMessage += charStr.lowercased()\n            } else {\n\
    \                newMessage += charStr.uppercased()\n            }\n        }\n\
    \    }\n    return newMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4kj8rj1t.swift:22:46: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n             \
    \   let index = vowels.index(of: charStr)!\n                                 \
    \            ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = String()\n\
    \    for letter in message {\n        if let index = vowels.firstIndex(of: letter)\
    \ {\n            encoded.append(vowels[(index + 2) % vowels.count])\n        }\
    \ else {\n            encoded.append(letter)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbm7byepn/tmpbm7byepn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1db07fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1dad76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1dad76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1dad757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm7byepn                        0x00005642cf953867 <unavailable> + 6247

    5    libc.so.6                          0x00002ba1db26b460 __libc_start_main +
    245

    6    tmpbm7byepn                        0x00005642cf9534a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var output: String =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      var index = vowels.firstIndex(of: char)!\n            index = (index +\
    \ 2) % 5\n            output.append(vowels[index])\n        } else {\n       \
    \     output.append(char)\n        }\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxx8njusn/tmpxx8njusn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aceffde9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aceffae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aceffae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aceffadf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxx8njusn                        0x00005613bd4b8827 <unavailable> + 6183

    5    libc.so.6                          0x00002acefffd5460 __libc_start_main +
    245

    6    tmpxx8njusn                        0x00005613bd4b8469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    /// Write\
    \ code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpz0kcpeuc/tmpz0kcpeuc.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3693364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b369305bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b369305b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b369305a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0kcpeuc                        0x000056252a091307 <unavailable> + 4871

    5    libc.so.6                          0x00002b3693550460 __libc_start_main +
    245

    6    tmpz0kcpeuc                        0x000056252a090f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        let asciiCharacter = character.asciiValue\n\
    \        if asciiCharacter! >= 65 && asciiCharacter! <= 90 {\n            encodedMessage.append(Character(UnicodeScalar(asciiCharacter!\
    \ + 32)!))\n        } else if asciiCharacter! >= 97 && asciiCharacter! <= 122\
    \ {\n            encodedMessage.append(Character(UnicodeScalar(asciiCharacter!\
    \ - 32)!))\n        } else {\n            encodedMessage.append(character)\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1m6cdeb2.swift:17:80: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encodedMessage.append(Character(UnicodeScalar(asciiCharacter!\
    \ + 32)!))\n                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \   \n/tmp/tmp1m6cdeb2.swift:19:80: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encodedMessage.append(Character(UnicodeScalar(asciiCharacter!\
    \ - 32)!))\n                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \   \n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let alphabetArray = Array(alphabet)\n    for c in message {\n        let\
    \ character = String(c)\n        if character.lowercased() == character {\n  \
    \          if let index = alphabetArray.firstIndex(of: character.lowercased())\
    \ {\n                result += alphabetArray[(index + 2) % alphabetArray.count].uppercased()\n\
    \            } else {\n                result += character\n            }\n  \
    \      } else {\n            if let index = alphabetArray.firstIndex(of: character.lowercased())\
    \ {\n                result += alphabetArray[(index + 2) % alphabetArray.count]\n\
    \            } else {\n                result += character\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzlmd6k2x.swift:20:67: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            if\
    \ let index = alphabetArray.firstIndex(of: character.lowercased()) {\n       \
    \                                                           ^\n/tmp/tmpzlmd6k2x.swift:26:67:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n            if let index = alphabetArray.firstIndex(of: character.lowercased())\
    \ {\n                                                                  ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // your\
    \ code here\n    let vowels = \"aeiou\"\n    let english = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var newMessage = \"\"\n    for word in message {\n        let char = \"\\\
    (word)\"\n        let newChar = char.lowercased()\n        if vowels.contains(newChar)\
    \ {\n            if english.contains(newChar) {\n                let index = english.firstIndex(of:\
    \ newChar)!\n                let charIndex = english.index(index, offsetBy: 2)\n\
    \                let nextChar = english[charIndex]\n                newMessage.append(nextChar)\n\
    \            }\n        } else {\n            if english.contains(newChar) {\n\
    \                let index = english.firstIndex(of: newChar)!\n              \
    \  let charIndex = english.index(index, offsetBy: 2)\n                let nextChar\
    \ = english[charIndex]\n                newMessage.append(nextChar)\n        \
    \    }\n        }\n    }\n    return newMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeablpmug.swift:22:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n             \
    \   let index = english.firstIndex(of: newChar)!\n                           \
    \                        ^\n/tmp/tmpeablpmug.swift:29:52: error: cannot convert\
    \ value of type 'String' to expected argument type 'String.Element' (aka 'Character')\n\
    \                let index = english.firstIndex(of: newChar)!\n              \
    \                                     ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for c in message\
    \ {\n        if c.isLetter {\n            if c.isUppercase {\n               \
    \ let index = alphabet.index(of: c.lowercased())!\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)].uppercased())\n            } else {\n                let index\
    \ = alphabet.index(of: c.lowercased())!\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            }\n        } else {\n            encoded.append(c)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphc7e3uf9.swift:18:50: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n             \
    \   let index = alphabet.index(of: c.lowercased())!\n                        \
    \                         ^\n/tmp/tmphc7e3uf9.swift:21:50: error: cannot convert\
    \ value of type 'String' to expected argument type 'String.Element' (aka 'Character')\n\
    \                let index = alphabet.index(of: c.lowercased())!\n           \
    \                                      ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var messageList = Array(message)\n\
    \    for i in 0..<messageList.count {\n        if vowels.contains(messageList[i])\
    \ {\n            var index = vowels.firstIndex(of: messageList[i])!\n        \
    \    if index == vowels.count - 1 {\n                index = -1\n            }\n\
    \            messageList[i] = vowels[index + 2]\n        } else {\n          \
    \  messageList[i] = messageList[i].uppercased()\n        }\n    }\n    return\
    \ String(messageList)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph55e4jgh.swift:23:45: error: cannot assign value of type 'String'\
    \ to subscript of type 'String.Element' (aka 'Character')\n            messageList[i]\
    \ = messageList[i].uppercased()\n                             ~~~~~~~~~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tlet vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tlet alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n\tvar translatedMessage = \"\"\n\t\n\tfor character in message {\n\t\tlet isUppercase\
    \ = character.isUppercase\n\t\tlet lowercaseCharacter = character.lowercased()\n\
    \t\tif vowels.contains(lowercaseCharacter) {\n\t\t\tlet index = alphabet.index(of:\
    \ lowercaseCharacter)!\n\t\t\tlet newIndex = alphabet.index(index, offsetBy: 2)\n\
    \t\t\tlet newCharacter = alphabet[newIndex]\n\t\t\tif isUppercase {\n\t\t\t\t\
    translatedMessage.append(newCharacter.uppercased())\n\t\t\t} else {\n\t\t\t\t\
    translatedMessage.append(newCharacter)\n\t\t\t}\n\t\t} else {\n\t\t\tif isUppercase\
    \ {\n\t\t\t\ttranslatedMessage.append(lowercaseCharacter.uppercased())\n\t\t\t\
    } else {\n\t\t\t\ttranslatedMessage.append(lowercaseCharacter)\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn translatedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpy8vj4ixg.swift:21:35: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n             \
    \           let index = alphabet.index(of: lowercaseCharacter)!\n            \
    \                                           ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\t// YOUR CODE\
    \ HERE\n\tlet chars = Array(message)\n\tvar result: [Character] = []\n\tfor index\
    \ in 0..<chars.count {\n\t\tlet character = chars[index]\n\t\tlet isUpper = CharacterSet.uppercaseLetters.contains(character.unicodeScalars.first!)\n\
    \t\tlet isLower = CharacterSet.lowercaseLetters.contains(character.unicodeScalars.first!)\n\
    \t\tif isUpper || isLower {\n\t\t\tlet unicode = character.unicodeScalars.first!.value\n\
    \t\t\tlet newUnicode = unicode + (isUpper ? -33 : 33)\n\t\t\tlet newChar = Character(UnicodeScalar(newUnicode)!)\n\
    \t\t\tswitch newChar {\n\t\t\tcase \"a\", \"e\", \"i\", \"o\", \"u\":\n\t\t\t\t\
    result.append(Character(UnicodeScalar(newUnicode + 2)!))\n\t\t\tdefault:\n\t\t\
    \t\tresult.append(newChar)\n\t\t\t}\n\t\t} else {\n\t\t\tresult.append(character)\n\
    \t\t}\n\t}\n\treturn String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjjxpj4lp.swift:18:17: error: cannot find 'CharacterSet' in scope\n\
    \                let isUpper = CharacterSet.uppercaseLetters.contains(character.unicodeScalars.first!)\n\
    \                              ^~~~~~~~~~~~\n/tmp/tmpjjxpj4lp.swift:19:17: error:\
    \ cannot find 'CharacterSet' in scope\n                let isLower = CharacterSet.lowercaseLetters.contains(character.unicodeScalars.first!)\n\
    \                              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let lowercaseVowels\
    \ = Set(\"aeiou\".characters)\n    var encodedMessage = \"\"\n    for scalar in\
    \ message.unicodeScalars {\n        let unicodeIndex = scalar.value\n        let\
    \ unicodeIsLower = scalar.isLowercase\n        let unicodeIsVowel = lowercaseVowels.contains(scalar)\n\
    \        var newUnicodeIndex = unicodeIndex\n        if unicodeIsVowel {\n   \
    \         newUnicodeIndex += 2\n        }\n        let newUnicodeScalar = UnicodeScalar(newUnicodeIndex)!\n\
    \        let newScalar = unicodeIsLower ? newUnicodeScalar.uppercased() : newUnicodeScalar.lowercased()\n\
    \        encodedMessage.append(newScalar)\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpei20gy4s.swift:13:39: error: 'characters' is unavailable: Please\
    \ use String directly\n    let lowercaseVowels = Set(\"aeiou\".characters)\n \
    \                                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpei20gy4s.swift:17:37: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLowercase'\n        let unicodeIsLower = scalar.isLowercase\n\
    \                             ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpei20gy4s.swift:18:30:\
    \ error: instance method 'contains' requires that 'Unicode.Scalar' conform to\
    \ 'Collection'\n        let unicodeIsVowel = lowercaseVowels.contains(scalar)\n\
    \                             ^\n_StringProcessing.Collection:3:17: note: where\
    \ 'C' = 'Unicode.Scalar'\n    public func contains<C>(_ other: C) -> Bool where\
    \ C : Collection, Self.Element == C.Element\n                ^\n/tmp/tmpei20gy4s.swift:24:59:\
    \ error: value of type 'UnicodeScalar' (aka 'Unicode.Scalar') has no member 'uppercased'\n\
    \        let newScalar = unicodeIsLower ? newUnicodeScalar.uppercased() : newUnicodeScalar.lowercased()\n\
    \                                         ~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpei20gy4s.swift:24:91:\
    \ error: value of type 'UnicodeScalar' (aka 'Unicode.Scalar') has no member 'lowercased'\n\
    \        let newScalar = unicodeIsLower ? newUnicodeScalar.uppercased() : newUnicodeScalar.lowercased()\n\
    \                                                                         ~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        encodedMessage += String(encodeChar(char:\
    \ char))\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfzz7ervu.swift:15:34: error: cannot find 'encodeChar' in scope\n\
    \        encodedMessage += String(encodeChar(char: char))\n                  \
    \               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let alphabet\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encoded = \"\"\n    for char in message\
    \ {\n        let charString = String(char)\n        if let index = alphabet.firstIndex(of:\
    \ charString.lowercased()) {\n            if charString == charString.lowercased()\
    \ {\n                encoded += alphabet[(index + 2) % alphabet.count].uppercased()\n\
    \            } else {\n                encoded += alphabet[(index + 2) % alphabet.count]\n\
    \            }\n        } else {\n            encoded += charString\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbynj28g9/tmpbynj28g9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96f73ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96f70f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96f70f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96f70f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbynj28g9                        0x000055e9267f8887 <unavailable> + 6279

    5    libc.so.6                          0x00002b96f75eb460 __libc_start_main +
    245

    6    tmpbynj28g9                        0x000055e9267f84c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = Set<Character>(\"aeiou\")\n    let nextVowels = Set<Character>(\"cfjkpq\"\
    )\n    let vowelsToNext = zip(vowels, nextVowels).reduce(into: [:]) { $0[$1.0]\
    \ = $1.1 }\n    let nextVowelsToVowels = zip(nextVowels, vowels).reduce(into:\
    \ [:]) { $0[$1.0] = $1.1 }\n    let vowelsToVowels = zip(vowels, vowels).reduce(into:\
    \ [:]) { $0[$1.0] = $1.1 }\n    return String(message.map {\n        let lower\
    \ = Character(\"a\").distance(to: $0) >= 0\n        let upper = Character(\"A\"\
    ).distance(to: $0) >= 0\n        let isVowel = (lower || upper) && vowels.contains($0.lowercased())\n\
    \        let mapped = isVowel ? (vowelsToNext[$0.lowercased()] ?? nextVowelsToVowels[$0.lowercased()]\
    \ ?? vowelsToVowels[$0.lowercased()])! : $0\n        return (lower ? mapped :\
    \ mapped.uppercased())\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpll1llyyc.swift:19:36: error: value of type 'Character' has no member\
    \ 'distance'\n        let lower = Character(\"a\").distance(to: $0) >= 0\n   \
    \                 ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    for char in message {\n        let lowercase\
    \ = String(char).lowercased()\n        if vowels.contains(lowercase) {\n     \
    \       if let index = alphabet.firstIndex(of: lowercase) {\n                encodedMessage\
    \ += alphabet[index + 2]\n            }\n        } else {\n            encodedMessage\
    \ += String(char).lowercased() == String(char) ? String(char).uppercased() : String(char).lowercased()\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpekjej47q/tmpekjej47q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bb10c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bb0dbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bb0dbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bb0dbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjej47q                        0x000055d0f04c48e7 <unavailable> + 6375

    5    libc.so.6                          0x00002b3bb12b1460 __libc_start_main +
    245

    6    tmpekjej47q                        0x000055d0f04c4439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.map { char in\n        switch char {\n        case \"a\", \"e\", \"\
    i\", \"o\", \"u\":\n            let idx = vowels.firstIndex(of: char)\n      \
    \      let next = vowels[(idx! + 2) % vowels.count]\n            return next\n\
    \        case \"A\", \"E\", \"I\", \"O\", \"U\":\n            let idx = vowels.firstIndex(of:\
    \ char.lowercased())\n            let next = vowels[(idx! + 2) % vowels.count]\n\
    \            return next.uppercased()\n        default:\n            return char\n\
    \        }\n    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplxybqc1_.swift:16:23: error: cannot find 'vowels' in scope\n  \
    \          let idx = vowels.firstIndex(of: char)\n                      ^~~~~~\n\
    /tmp/tmplxybqc1_.swift:17:24: error: cannot find 'vowels' in scope\n         \
    \   let next = vowels[(idx! + 2) % vowels.count]\n                       ^~~~~~\n\
    /tmp/tmplxybqc1_.swift:17:44: error: cannot find 'vowels' in scope\n         \
    \   let next = vowels[(idx! + 2) % vowels.count]\n                           \
    \                ^~~~~~\n/tmp/tmplxybqc1_.swift:20:23: error: cannot find 'vowels'\
    \ in scope\n            let idx = vowels.firstIndex(of: char.lowercased())\n \
    \                     ^~~~~~\n/tmp/tmplxybqc1_.swift:21:24: error: cannot find\
    \ 'vowels' in scope\n            let next = vowels[(idx! + 2) % vowels.count]\n\
    \                       ^~~~~~\n/tmp/tmplxybqc1_.swift:21:44: error: cannot find\
    \ 'vowels' in scope\n            let next = vowels[(idx! + 2) % vowels.count]\n\
    \                                           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if char.isLetter\
    \ == false {\n            encodedMessage.append(char)\n        } else if String(char).lowercased()\
    \ == String(char) {\n            encodedMessage.append(String(char).uppercased())\n\
    \        } else {\n            encodedMessage.append(String(char).lowercased())\n\
    \        }\n    }\n    for char in encodedMessage {\n        if vowels.contains(String(char))\
    \ {\n            let charIndex = alphabet.index(of: char)\n            let newVowelIndex\
    \ = charIndex! + 2\n            encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ String(char), with: String(alphabet[newVowelIndex]))\n        }\n    }\n   \
    \ return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp50n9grws.swift:27:38: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let charIndex = alphabet.index(of: char)\n\
    \                                     ^\n/tmp/tmp50n9grws.swift:27:38: note: use\
    \ 'firstIndex(of:)' instead\n            let charIndex = alphabet.index(of: char)\n\
    \                                     ^~~~~\n                                \
    \     firstIndex\n/tmp/tmp50n9grws.swift:28:42: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n            let newVowelIndex\
    \ = charIndex! + 2\n                                         ^\n/tmp/tmp50n9grws.swift:29:45:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \     encodedMessage = encodedMessage.replacingOccurrences(of: String(char), with:\
    \ String(alphabet[newVowelIndex]))\n                             ~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let messageChars\
    \ = message.map { $0 }\n    let vowels = \"aeiou\"\n    var encodedChars = [Character]()\n\
    \    for c in messageChars {\n        if vowels.contains(c) {\n            let\
    \ vowelIndex = vowels.firstIndex(of: c)!\n            let newVowelIndex = (vowelIndex\
    \ + 2) % vowels.count\n            encodedChars.append(vowels[newVowelIndex])\n\
    \        } else {\n            let lowerC = Character(String(c).lowercased())\n\
    \            let upperC = Character(String(c).uppercased())\n            encodedChars.append(c\
    \ == lowerC ? upperC : lowerC)\n        }\n    }\n    return String(encodedChars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpr2zm3fa_.swift:19:34: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newVowelIndex = (vowelIndex\
    \ + 2) % vowels.count\n                                 ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alpha: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    let alphaMapping: [Character: Character]\
    \ = [\"a\": \"c\", \"e\": \"g\", \"i\": \"k\", \"o\": \"q\", \"u\": \"y\"]\n \
    \   var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            encodedMessage.append(alphaMapping[char]!)\n        } else if\
    \ alpha.contains(char) {\n            let index = alpha.firstIndex(of: char)!\n\
    \            let newIndex = (index + 2) % alpha.count\n            encodedMessage.append(alpha[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp90ohelgy/tmp90ohelgy.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aead2b24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aead281bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aead281b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aead281a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90ohelgy                        0x000055a0ab83aa27 <unavailable> + 6695

    5    libc.so.6                          0x00002aead2d10460 __libc_start_main +
    245

    6    tmp90ohelgy                        0x000055a0ab83a669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let letters\
    \ = Array(message)\n    var result = [Character]()\n    let vowels = CharacterSet(charactersIn:\
    \ \"aeiou\")\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n \
    \   for letter in letters {\n        if String(letter).rangeOfCharacter(from:\
    \ vowels) != nil {\n            let idx = (alphabet.firstIndex(of: letter)! +\
    \ 2) % alphabet.count\n            result.append(alphabet[idx])\n        } else\
    \ {\n            result.append(letter)\n        }\n    }\n    return String(result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgea1a9qv.swift:15:18: error: cannot find 'CharacterSet' in scope\n\
    \    let vowels = CharacterSet(charactersIn: \"aeiou\")\n                 ^~~~~~~~~~~~\n\
    /tmp/tmpgea1a9qv.swift:18:27: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \        if String(letter).rangeOfCharacter(from: vowels) != nil {\n         \
    \  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // TODO:\
    \ Implement this function\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmps_ff_ldp/tmps_ff_ldp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64872ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6486ff6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6486ff6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6486ff57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_ff_ldp                        0x000055af88558307 <unavailable> + 4871

    5    libc.so.6                          0x00002b64874eb460 __libc_start_main +
    245

    6    tmps_ff_ldp                        0x000055af88557f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tlet vowels\
    \ = \"aeiou\"\n\tlet alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tvar encoded\
    \ = \"\"\n\tfor char in message {\n\t\tif vowels.contains(char) {\n\t\t\tlet index\
    \ = alphabet.index(of: char)\n\t\t\tlet nextIndex = alphabet.index(index!, offsetBy:\
    \ 2)\n\t\t\tencoded.append(alphabet[nextIndex])\n\t\t} else {\n\t\t\tencoded.append(char)\n\
    \t\t}\n\t}\n\treturn encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp0brl95cq/tmp0brl95cq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3b7c1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3b7913b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3b7913988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3b79127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0brl95cq                        0x0000563a8073a727 <unavailable> + 5927

    5    libc.so.6                          0x00002ab3b7e08460 __libc_start_main +
    245

    6    tmp0brl95cq                        0x0000563a8073a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // TODO:\
    \ Write some code to solve this coding challenge\n    return \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp6xq6cqv8/tmp6xq6cqv8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b988197dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9881674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9881674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98816737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xq6cqv8                        0x0000562b58f5a307 <unavailable> + 4871

    5    libc.so.6                          0x00002b9881b69460 __libc_start_main +
    245

    6    tmp6xq6cqv8                        0x0000562b58f59f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let characters\
    \ = message.characters.map { (character) -> Character in\n        if \"aeiou\"\
    .characters.contains(character) {\n            return \"eaiou\".characters[character.distance(to:\
    \ \"e\")]\n        } else if \"AEIOU\".characters.contains(character) {\n    \
    \        return \"EAIOU\".characters[character.distance(to: \"E\")]\n        }\
    \ else if \"abcdefghijklmnopqrstuvwxyz\".characters.contains(character) {\n  \
    \          return \"cdefghijklmnopqrstuvwxyzab\".characters[character.distance(to:\
    \ \"c\")]\n        } else if \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".characters.contains(character)\
    \ {\n            return \"CDEFGHIJKLMNOPQRSTUVWXYZAB\".characters[character.distance(to:\
    \ \"C\")]\n        } else {\n            return character\n        }\n    }\n\
    \    return String(characters)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjkq_tou1.swift:15:49: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'distance'\n            return \"eaiou\".characters[character.distance(to:\
    \ \"e\")]\n                                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let alphabetArray = Array(alphabet)\n\
    \    for i in message {\n        var letter = String(i)\n        if letter.lowercased()\
    \ == letter {\n            letter = letter.uppercased()\n        } else {\n  \
    \          letter = letter.lowercased()\n        }\n        if vowels.contains(letter.lowercased())\
    \ {\n            let vowelIndex = alphabetArray.firstIndex(of: letter.lowercased())\n\
    \            if vowelIndex! < alphabetArray.count - 2 {\n                letter\
    \ = alphabetArray[vowelIndex! + 2]\n            } else {\n                letter\
    \ = alphabetArray[vowelIndex! - 24]\n            }\n        }\n        result.append(letter)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9q2yqqc1.swift:25:66: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ vowelIndex = alphabetArray.firstIndex(of: letter.lowercased())\n           \
    \                                                      ^\n/tmp/tmp9q2yqqc1.swift:27:39:\
    \ error: cannot assign value of type 'String.Element' (aka 'Character') to type\
    \ 'String'\n                letter = alphabetArray[vowelIndex! + 2]\n        \
    \                 ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n/tmp/tmp9q2yqqc1.swift:29:39:\
    \ error: cannot assign value of type 'String.Element' (aka 'Character') to type\
    \ 'String'\n                letter = alphabetArray[vowelIndex! - 24]\n       \
    \                  ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.replacingOccurrences(of: \"[a-z]\", with: \"\", options: .regularExpression)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpj66qenwd.swift:13:20: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return message.replacingOccurrences(of: \"[a-z]\"\
    , with: \"\", options: .regularExpression)\n           ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpj66qenwd.swift:13:74: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    return message.replacingOccurrences(of: \"\
    [a-z]\", with: \"\", options: .regularExpression)\n                          \
    \                                              ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let upperVowels\
    \ = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let upperAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for i in message\
    \ {\n        if let index = alphabet.firstIndex(of: i) {\n            let shifted\
    \ = alphabet.index(index, offsetBy: 2)\n            result.append(alphabet[shifted])\n\
    \        } else if let index = upperAlphabet.firstIndex(of: i) {\n           \
    \ let shifted = upperAlphabet.index(index, offsetBy: 2)\n            result.append(upperAlphabet[shifted])\n\
    \        } else if vowels.contains(String(i)) {\n            result.append(upperVowels[vowels.firstIndex(of:\
    \ String(i))!])\n        } else {\n            result.append(i)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp5lutesnr/tmp5lutesnr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad618d14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad618a0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad618a0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad618a0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5lutesnr                        0x000055a9b1c3a967 <unavailable> + 6503

    5    libc.so.6                          0x00002ad618f00460 __libc_start_main +
    245

    6    tmp5lutesnr                        0x000055a9b1c3a5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.enumerated().map { (i, c) -> String in\n        if c.isUppercase {\n\
    \            return String(c.lowercased().next(forward: 2))\n        } else if\
    \ c.isLowercase {\n            return String(c.uppercased().next(forward: 2))\n\
    \        } else {\n            return String(c)\n        }\n    }.joined()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp04l6xh8f.swift:15:42: error: value of type 'String' has no member\
    \ 'next'\n            return String(c.lowercased().next(forward: 2))\n       \
    \                   ~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // TODO:\
    \ Implement me\n    var encodedString = \"\"\n    var offset = 0\n    var newChar\
    \ = \"\"\n    for char in message {\n        switch char {\n        case \"a\"\
    :\n            offset = 2\n            newChar = \"c\"\n        case \"A\":\n\
    \            offset = 2\n            newChar = \"C\"\n        case \"e\":\n  \
    \          offset = 2\n            newChar = \"g\"\n        case \"E\":\n    \
    \        offset = 2\n            newChar = \"G\"\n        case \"i\":\n      \
    \      offset = 2\n            newChar = \"k\"\n        case \"I\":\n        \
    \    offset = 2\n            newChar = \"K\"\n        case \"o\":\n          \
    \  offset = 2\n            newChar = \"q\"\n        case \"O\":\n            offset\
    \ = 2\n            newChar = \"Q\"\n        case \"u\":\n            offset =\
    \ 2\n            newChar = \"y\"\n        case \"U\":\n            offset = 2\n\
    \            newChar = \"Y\"\n        default:\n            offset = 0\n     \
    \       newChar = String(char)\n        }\n        encodedString.append(newChar)\n\
    \    }\n    return encodedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuaahi_z3/tmpuaahi_z3.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af31ce78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af31cb6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af31cb6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af31cb6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuaahi_z3                        0x0000558ffee8e547 <unavailable> + 5447

    5    libc.so.6                          0x00002af31d064460 __libc_start_main +
    245

    6    tmpuaahi_z3                        0x0000558ffee8e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.map {\n        if let index = \"AEIOU\".index(of: $0) {\n          \
    \  let value = \"AEIOU\".index(index, offsetBy: 2)\n            return \"AEIOU\"\
    [value]\n        } else if let index = \"aeiou\".index(of: $0) {\n           \
    \ let value = \"aeiou\".index(index, offsetBy: 2)\n            return \"aeiou\"\
    [value]\n        } else if let index = \"abcdefghijklmnopqrstuvwxyz\".index(of:\
    \ $0) {\n            let value = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".index(index, offsetBy:\
    \ 0)\n            return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[value]\n        } else\
    \ if let index = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".index(of: $0) {\n            let\
    \ value = \"abcdefghijklmnopqrstuvwxyz\".index(index, offsetBy: 0)\n         \
    \   return \"abcdefghijklmnopqrstuvwxyz\"[value]\n        } else {\n         \
    \   return $0\n        }\n    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4qb29vtg.swift:16:27: error: cannot convert return expression of\
    \ type 'Character' to return type 'String'\n            return \"AEIOU\"[value]\n\
    \                   ~~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let encodedChar = encode(char: char)\n\
    \        encodedMessage.append(encodedChar)\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpesiv_vg2.swift:15:33: error: incorrect argument label in call (have\
    \ 'char:', expected 'message:')\n        let encodedChar = encode(char: char)\n\
    \                                ^~~~~\n                                 message\n\
    /tmp/tmpesiv_vg2.swift:15:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        let encodedChar = encode(char: char)\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // To make\
    \ this much easier, I will set all letters to lowercase\n    let downcase = message.lowercased()\n\
    \    // Initiate a variable that will contain the new string\n    var new = \"\
    \"\n    // Loop through the string\n    for char in downcase {\n        // Check\
    \ each char to see if it is a vowel\n        if char == \"a\" || char == \"e\"\
    \ || char == \"i\" || char == \"o\" || char == \"u\" {\n            // Instead\
    \ of checking the character again, I will add the 2nd next character to the string.\n\
    \            switch char {\n            case \"a\":\n                new.append(\"\
    c\")\n            case \"e\":\n                new.append(\"g\")\n           \
    \ case \"i\":\n                new.append(\"k\")\n            case \"o\":\n  \
    \              new.append(\"s\")\n            case \"u\":\n                new.append(\"\
    y\")\n            default:\n                break\n            }\n        } else\
    \ {\n            // Else, if it's not a vowel, add it to the string\n        \
    \    new.append(char)\n        }\n    }\n    // Return the string\n    return\
    \ new\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqgj7t0hs/tmpqgj7t0hs.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c331bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c32eb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c32eb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c32eb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgj7t0hs                        0x000055ee4040f697 <unavailable> + 5783

    5    libc.so.6                          0x00002b0c333a7460 __libc_start_main +
    245

    6    tmpqgj7t0hs                        0x000055ee4040f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  var result\
    \ = \"\"\n  for char in message {\n    let encoded = encode(char: char)\n    result.append(encoded)\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpymyw4crj.swift:15:25: error: incorrect argument label in call (have\
    \ 'char:', expected 'message:')\n    let encoded = encode(char: char)\n      \
    \                  ^~~~~\n                         message\n/tmp/tmpymyw4crj.swift:15:32:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \    let encoded = encode(char: char)\n                               ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n\
    \    for letter in message {\n        if vowels.contains(letter) {\n         \
    \   encoded.append(vowels[(vowels.firstIndex(of: letter)! + 2) % vowels.count])\n\
    \        } else {\n            encoded.append(letter)\n        }\n    }\n    return\
    \ encoded.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpcokndjvx/tmpcokndjvx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad47462ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad474321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad474321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4743207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcokndjvx                        0x0000564e87f958d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ad474816460 __libc_start_main +
    245

    6    tmpcokndjvx                        0x0000564e87f95519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.map { char in\n        switch char {\n        case \"a\", \"e\", \"\
    i\", \"o\", \"u\":\n            return String(char).uppercased()\n        case\
    \ \"A\", \"E\", \"I\", \"O\", \"U\":\n            return String(char).lowercased()\n\
    \        default:\n            return String(char)\n        }\n    }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpeutvikvx/tmpeutvikvx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a885e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a882d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a882d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a882d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeutvikvx                        0x0000558a47001677 <unavailable> + 5751

    5    libc.so.6                          0x00002b1a887cc460 __libc_start_main +
    245

    6    tmpeutvikvx                        0x0000558a470012b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // Your\
    \ code here.\n    return \"\";\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphnwx_z6m/tmphnwx_z6m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12b31fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12b016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12b016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12b0157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphnwx_z6m                        0x000056480a2bc307 <unavailable> + 4871

    5    libc.so.6                          0x00002ab12b50b460 __libc_start_main +
    245

    6    tmphnwx_z6m                        0x000056480a2bbf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  return \"\
    \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(encode(message: \"TEST\") ==\
    \ \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphm7h5oz7/tmphm7h5oz7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a8962bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a89322b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a89322988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a893217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphm7h5oz7                        0x0000557f518dc307 <unavailable> + 4871

    5    libc.so.6                          0x00002b8a89817460 __libc_start_main +
    245

    6    tmphm7h5oz7                        0x0000557f518dbf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var newMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let letters: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for character\
    \ in message {\n        if let index = letters.firstIndex(of: character) {\n \
    \           if vowels.contains(character) {\n                newMessage.append(letters[(index\
    \ + 2) % 26])\n            } else {\n                newMessage.append(letters[(index\
    \ + 26) % 26])\n            }\n        } else {\n            newMessage.append(character)\n\
    \        }\n    }\n    return newMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpe6r5xrjb/tmpe6r5xrjb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace0ee36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace0eb2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace0eb2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace0eb2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6r5xrjb                        0x000055ceb2618827 <unavailable> + 6183

    5    libc.so.6                          0x00002ace0f022460 __libc_start_main +
    245

    6    tmpe6r5xrjb                        0x000055ceb2618469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let uppercase\
    \ = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    let lowercase = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    let vowels = Set(\"aeiou\")\n    var newMessage = \"\"\n    for character\
    \ in message {\n        if let index = uppercase.firstIndex(of: character) {\n\
    \            if let newIndex = uppercase.index(index, offsetBy: 2, limitedBy:\
    \ uppercase.count - 1) {\n                if vowels.contains(uppercase[newIndex])\
    \ {\n                    newMessage.append(uppercase[newIndex])\n            \
    \    } else {\n                    newMessage.append(uppercase[newIndex])\n  \
    \              }\n            } else {\n                newMessage.append(character)\n\
    \            }\n        } else if let index = lowercase.firstIndex(of: character)\
    \ {\n            if let newIndex = lowercase.index(index, offsetBy: 2, limitedBy:\
    \ lowercase.count - 1) {\n                if vowels.contains(lowercase[newIndex])\
    \ {\n                    newMessage.append(lowercase[newIndex])\n            \
    \    } else {\n                    newMessage.append(lowercase[newIndex])\n  \
    \              }\n            } else {\n                newMessage.append(character)\n\
    \            }\n        } else {\n            newMessage.append(character)\n \
    \       }\n    }\n    return newMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp7qxgicmt/tmp7qxgicmt.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2640ae4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26407dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26407db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26407da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7qxgicmt                        0x00005634beec3837 <unavailable> + 6199

    5    libc.so.6                          0x00002b2640cd0460 __libc_start_main +
    245

    6    tmp7qxgicmt                        0x00005634beec3479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let message = message.lowercased()\n    var encoded = \"\"\n\
    \    for letter in message {\n        if vowels.contains(letter) {\n         \
    \   let vowelIndex = vowels.firstIndex(of: letter)!\n            encoded.append(vowels[vowelIndex\
    \ + 2])\n        } else {\n            encoded.append(letter)\n        }\n   \
    \ }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpksgkj9yh.swift:19:35: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            encoded.append(vowels[vowelIndex\
    \ + 2])\n                                  ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ String()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpc44605kb/tmpc44605kb.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3795c2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3795923b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3795923988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37959227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc44605kb                        0x0000561f5cfaa357 <unavailable> + 4951

    5    libc.so.6                          0x00002b3795e18460 __libc_start_main +
    245

    6    tmpc44605kb                        0x0000561f5cfa9f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    /// First\
    \ we define a list of vowels that are used in english\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var message = message\n    for index in message.indices\
    \ {\n        let character = message[index]\n        /// Convert the string to\
    \ lowercase to be able to compare to vowels\n        let lowercaseCharacter =\
    \ String(character).lowercased()\n        /// Check if the character is a vowel\n\
    \        if vowels.contains(lowercaseCharacter) {\n            /// Index of the\
    \ character in the vowels array\n            let vowelIndex = vowels.firstIndex(of:\
    \ lowercaseCharacter)!\n            /// Determine the index of the letter that\
    \ appears 2 places after the vowel\n            let nextLetterIndex = (vowelIndex\
    \ + 2) % vowels.count\n            /// Remove the vowel and insert the letter\
    \ two places ahead\n            message.remove(at: index)\n            message.insert(contentsOf:\
    \ vowels[nextLetterIndex], at: index)\n        } else {\n            /// Convert\
    \ to uppercase the non-vowels characters\n            message.replaceSubrange(index...index,\
    \ with: String(character).uppercased())\n        }\n    }\n    return message\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3jo_84g5/tmp3jo_84g5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b243e041c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b243dd38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b243dd38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b243dd377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jo_84g5                        0x0000558d74d4cc77 <unavailable> + 7287

    5    libc.so.6                          0x00002b243e22d460 __libc_start_main +
    245

    6    tmp3jo_84g5                        0x0000558d74d4c8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = [Character](message)\n\
    \    var encoded = \"\"\n    for char in letters {\n        let isLower = char.isLowercase\n\
    \        let isUpper = char.isUppercase\n        var encodedChar = char\n    \
    \    if isLower || isUpper {\n            if isLower {\n                encodedChar\
    \ = Character(char.uppercased())\n            }\n            if vowels.contains(String(encodedChar))\
    \ {\n                var newIndex = letters.firstIndex(of: encodedChar)! + 2\n\
    \                if newIndex > 25 {\n                    newIndex -= 26\n    \
    \            }\n                encodedChar = letters[newIndex]\n            }\n\
    \            if isLower {\n                encodedChar = Character(encodedChar.lowercased())\n\
    \            }\n        }\n        encoded.append(encodedChar)\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpb661brgc/tmpb661brgc.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fa208cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fa1d83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fa1d83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fa1d827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb661brgc                        0x000055e9e03d9b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b2fa2278460 __libc_start_main +
    245

    6    tmpb661brgc                        0x000055e9e03d9759 <unavailable> + 5977

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let unicodeScalars = \"abcdefghijklmnopqrstuvwxyz\"\n    let scalars =\
    \ unicodeScalars.unicodeScalars\n    let values = scalars.map { $0.value }\n \
    \   for letter in message {\n        if let asciiValue = letter.asciiValue {\n\
    \            let index = Int(asciiValue)\n            var indexToAdd = 2\n   \
    \         if asciiValue.isUppercase {\n                indexToAdd = -2\n     \
    \       }\n            if vowels.contains(letter) {\n                let value\
    \ = values[(index + indexToAdd) % 26]\n                let character = Character(UnicodeScalar(value)!)\n\
    \                encodedMessage.append(character)\n            } else {\n    \
    \            let newLetter = Character(UnicodeScalar(index + indexToAdd)!)\n \
    \               encodedMessage.append(newLetter)\n            }\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdsdva_rq.swift:22:27: error: value of type 'UInt8' has no member\
    \ 'isUppercase'\n            if asciiValue.isUppercase {\n               ~~~~~~~~~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = [\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var encodedMessage = \"\"\n    var input = message.lowercased()\n\
    \    // guard let index = vowels.index(of: input) else { return input }\n    for\
    \ letter in input {\n        let temp = String(letter)\n        if vowels.contains(temp)\
    \ {\n            if let index = vowels.index(of: temp) {\n                if index\
    \ == 4 {\n                    encodedMessage.append(vowels[0])\n             \
    \   } else {\n                    encodedMessage.append(vowels[index + 2])\n \
    \               }\n            }\n        } else if letters.contains(temp) {\n\
    \            if let index = letters.index(of: temp) {\n                if index\
    \ == 25 {\n                    encodedMessage.append(letters[0])\n           \
    \     } else {\n                    encodedMessage.append(letters[index + 2])\n\
    \                }\n            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2uuh393g/tmp2uuh393g.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bda810c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bda507b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bda507988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bda5067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2uuh393g                        0x000055f2f3f2a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b7bda9fc460 __libc_start_main +
    245

    6    tmp2uuh393g                        0x000055f2f3f2a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(Character(ascii: char.asciiValue!\
    \ + 32))\n            } else {\n                encodedMessage.append(Character(ascii:\
    \ char.asciiValue! - 32))\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"A\", with: \"C\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"a\", with: \"c\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"E\", with: \"G\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"e\", with: \"g\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"I\", with: \"K\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"i\", with: \"k\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"O\", with: \"Q\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"o\", with: \"q\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"U\", with: \"S\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"u\", with: \"s\")\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjgdxciwf.swift:17:39: error: no exact matches in call to initializer\
    \ \n                encodedMessage.append(Character(ascii: char.asciiValue! +\
    \ 32))\n                                      ^\n/tmp/tmpjgdxciwf.swift:17:39:\
    \ note: candidate expects value of type 'Unicode.Scalar' for parameter #1 (got\
    \ 'UInt8')\n                encodedMessage.append(Character(ascii: char.asciiValue!\
    \ + 32))\n                                      ^\n/tmp/tmpjgdxciwf.swift:17:39:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'UInt8')\n\
    \                encodedMessage.append(Character(ascii: char.asciiValue! + 32))\n\
    \                                      ^\n/tmp/tmpjgdxciwf.swift:19:39: error:\
    \ no exact matches in call to initializer \n                encodedMessage.append(Character(ascii:\
    \ char.asciiValue! - 32))\n                                      ^\n/tmp/tmpjgdxciwf.swift:19:39:\
    \ note: candidate expects value of type 'Unicode.Scalar' for parameter #1 (got\
    \ 'UInt8')\n                encodedMessage.append(Character(ascii: char.asciiValue!\
    \ - 32))\n                                      ^\n/tmp/tmpjgdxciwf.swift:19:39:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'UInt8')\n\
    \                encodedMessage.append(Character(ascii: char.asciiValue! - 32))\n\
    \                                      ^\n/tmp/tmpjgdxciwf.swift:25:37: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n    encodedMessage\
    \ = encodedMessage.replacingOccurrences(of: \"A\", with: \"C\")\n            \
    \         ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjgdxciwf.swift:26:37: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n    encodedMessage\
    \ = encodedMessage.replacingOccurrences(of: \"a\", with: \"c\")\n            \
    \         ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjgdxciwf.swift:27:37: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n    encodedMessage\
    \ = encodedMessage.replacingOccurrences(of: \"E\", with: \"G\")\n            \
    \         ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjgdxciwf.swift:28:37: error: "
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let alphabet = [\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n  let encodedMessage = message.map { character -> String in\n    let\
    \ charString = String(character)\n    if vowels.contains(charString.lowercased())\
    \ {\n      if charString.lowercased() == \"u\" {\n        return \"a\"\n     \
    \ } else {\n        return alphabet[alphabet.firstIndex(of: charString.lowercased())!\
    \ + 2]\n      }\n    } else {\n      return charString\n    }\n  }\n  return encodedMessage.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmph7ng5jpm/tmph7ng5jpm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07c36fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07c33f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07c33f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07c33f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7ng5jpm                        0x0000560409365877 <unavailable> + 6263

    5    libc.so.6                          0x00002b07c38e9460 __libc_start_main +
    245

    6    tmph7ng5jpm                        0x00005604093654b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    var lowercasedMessage = message.lowercased()\n    var alphabet =\
    \ Array(\"abcdefghijklmnopqrstuvwxyz\")\n    for char in lowercasedMessage {\n\
    \        if char == \" \" {\n            encodedMessage.append(\" \")\n      \
    \  } else if alphabet.contains(char) {\n            let position = alphabet.firstIndex(of:\
    \ char)!\n            let newPosition = position + 2\n            encodedMessage.append(alphabet[newPosition])\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmppowh0nig/tmppowh0nig.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b554c69cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b554c393b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b554c393988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b554c3927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppowh0nig                        0x00005654c84ee947 <unavailable> + 6471

    5    libc.so.6                          0x00002b554c888460 __libc_start_main +
    245

    6    tmppowh0nig                        0x00005654c84ee589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if isVowel(character: char) {\n \
    \           let encodedChar = characterAfter(char: char, times: 2)\n         \
    \   encodedMessage.append(encodedChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpsiq4l_y9.swift:15:12: error: cannot find 'isVowel' in scope\n \
    \       if isVowel(character: char) {\n           ^~~~~~~\n/tmp/tmpsiq4l_y9.swift:16:31:\
    \ error: cannot find 'characterAfter' in scope\n            let encodedChar =\
    \ characterAfter(char: char, times: 2)\n                              ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"fgjlnprtv\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else if let index = vowels.firstIndex(of: char) {\n\
    \            encodedMessage.append(vowels2[vowels2.index(index, offsetBy: 2)])\n\
    \        } else if let index = vowels2.firstIndex(of: char) {\n            encodedMessage.append(vowels[vowels.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpgsb3hhys/tmpgsb3hhys.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11aaeebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11aabe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11aabe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11aabe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsb3hhys                        0x00005604aba195f7 <unavailable> + 5623

    5    libc.so.6                          0x00002b11ab0d7460 __libc_start_main +
    245

    6    tmpgsb3hhys                        0x00005604aba19239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let encoded\
    \ = message.map { letter -> Character in\n        let lowerLetter = letter.lowercased()\n\
    \        if \"aeiou\".contains(lowerLetter) {\n            var encodedLetter =\
    \ letter\n            encodedLetter.unicodeScalars.forEach {\n               \
    \ $0.value += 2\n            }\n            return encodedLetter\n        } else\
    \ {\n            return letter\n        }\n    }\n    return String(encoded).swapCase()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfyeiqhg2.swift:18:26: error: left side of mutating operator isn't\
    \ mutable: 'value' is a get-only property\n                $0.value += 2\n   \
    \             ~~~~~~~~ ^\n/tmp/tmpfyeiqhg2.swift:25:28: error: reference to member\
    \ 'swapCase' cannot be resolved without a contextual type\n    return String(encoded).swapCase()\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        switch char {\n        case \"A\"\
    , \"a\":\n            encoded += \"C\"\n        case \"E\", \"e\":\n         \
    \   encoded += \"G\"\n        case \"I\", \"i\":\n            encoded += \"K\"\
    \n        case \"O\", \"o\":\n            encoded += \"Q\"\n        case \"U\"\
    , \"u\":\n            encoded += \"S\"\n        case \"a\"...\"z\":\n        \
    \    encoded += String(Character(UnicodeScalar(UInt8(char.asciiValue! + 2))!))\n\
    \        case \"A\"...\"Z\":\n            encoded += String(Character(UnicodeScalar(UInt8(char.asciiValue!\
    \ + 2))!))\n        default:\n            encoded += String(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0t_zi7ws.swift:27:83: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encoded += String(Character(UnicodeScalar(UInt8(char.asciiValue!\
    \ + 2))!))\n                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \      \n/tmp/tmp0t_zi7ws.swift:29:83: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encoded += String(Character(UnicodeScalar(UInt8(char.asciiValue!\
    \ + 2))!))\n                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \      \n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let chars = Array(message)\n\
    \    var newChars: [Character] = []\n    for char in chars {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let nextVowel\
    \ = (index + 2) % vowels.count\n            newChars.append(vowels[nextVowel])\n\
    \        } else {\n            newChars.append(char)\n        }\n    }\n    return\
    \ String(newChars).uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp8i71h9x9/tmp8i71h9x9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5369356c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b536904db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b536904d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b536904c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8i71h9x9                        0x000056080cf6ca87 <unavailable> + 6791

    5    libc.so.6                          0x00002b5369542460 __libc_start_main +
    245

    6    tmp8i71h9x9                        0x000056080cf6c6c9 <unavailable> + 5833

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let dict = [\"a\"\
    :\"c\", \"e\":\"g\", \"i\":\"k\", \"o\":\"q\", \"u\":\"y\"]\n    var result =\
    \ \"\"\n    for letter in message {\n        let ascii = letter.asciiValue\n \
    \       if ascii != nil {\n            if let asciiInt = Int(ascii!) {\n     \
    \           if asciiInt >= 65 && asciiInt <= 90 {\n                    result.append(Character(UnicodeScalar(asciiInt\
    \ + 32)!))\n                } else if asciiInt >= 97 && asciiInt <= 122 {\n  \
    \                  result.append(Character(UnicodeScalar(asciiInt - 32)!))\n \
    \               } else {\n                    result.append(letter)\n        \
    \        }\n            }\n        }\n    }\n    var result2 = \"\"\n    for letter\
    \ in result {\n        if vowels.contains(letter) {\n            result2.append(dict[String(letter)]!)\n\
    \        } else {\n            result2.append(letter)\n        }\n    }\n    return\
    \ result2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpp05y94wm.swift:19:16: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n            if let asciiInt = Int(ascii!)\
    \ {\n               ^              ~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    for char in message {\n        if char.isLetter\
    \ {\n            let index = vowels.index(of: char.lowercased())\n           \
    \ if let index = index {\n                let newIndex = (index + 2) % vowels.count\n\
    \                encoded.append(vowels[newIndex].uppercased())\n            }\
    \ else {\n                encoded.append(char.uppercased())\n            }\n \
    \       } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5guvgbt6.swift:17:47: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = vowels.index(of: char.lowercased())\n                              \
    \                ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  var encodedMessage\
    \ = \"\"\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let nextTwoLetters\
    \ = \"fgijklmnopqrstuvwxyzabcd\"\n  for letter in message {\n    if vowels.contains(String(letter).lowercased())\
    \ {\n      let letterIndex = nextTwoLetters.index(nextTwoLetters.startIndex, offsetBy:\
    \ vowels.firstIndex(of: String(letter).lowercased())!)\n      encodedMessage.append(nextTwoLetters[letterIndex])\n\
    \    } else {\n      encodedMessage.append(letter)\n    }\n  }\n  return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpq0rni758/tmpq0rni758.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab413ae4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4137dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4137db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4137da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq0rni758                        0x00005584661878f7 <unavailable> + 6391

    5    libc.so.6                          0x00002ab413cd0460 __libc_start_main +
    245

    6    tmpq0rni758                        0x0000558466187539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let letters\
    \ = message.map { $0 }\n    var encoded = \"\"\n    for letter in letters {\n\
    \        var encodedLetter = letter\n        switch letter {\n        case \"\
    a\":\n            encodedLetter = \"c\"\n        case \"A\":\n            encodedLetter\
    \ = \"C\"\n        case \"e\":\n            encodedLetter = \"g\"\n        case\
    \ \"E\":\n            encodedLetter = \"G\"\n        case \"i\":\n           \
    \ encodedLetter = \"k\"\n        case \"I\":\n            encodedLetter = \"K\"\
    \n        case \"o\":\n            encodedLetter = \"q\"\n        case \"O\":\n\
    \            encodedLetter = \"Q\"\n        case \"u\":\n            encodedLetter\
    \ = \"s\"\n        case \"U\":\n            encodedLetter = \"S\"\n        default:\n\
    \            if let letter = UnicodeScalar(String(letter)), letter.isLetter {\n\
    \                let next = letter.next()\n                let nextNext = next?.next()\n\
    \                if let nextNext = nextNext {\n                    encodedLetter\
    \ = Character(nextNext)\n                }\n            }\n        }\n       \
    \ encoded.append(encodedLetter)\n    }\n    return encoded\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuyk9n1wr.swift:39:67: error: value of type 'Unicode.Scalar' has\
    \ no member 'isLetter'\n            if let letter = UnicodeScalar(String(letter)),\
    \ letter.isLetter {\n                                                        \
    \   ~~~~~~ ^~~~~~~~\n/tmp/tmpuyk9n1wr.swift:40:35: error: value of type 'Unicode.Scalar'\
    \ has no member 'next'\n                let next = letter.next()\n           \
    \                ~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for ch in message {\n        if vowels.contains(ch) {\n            let i\
    \ = vowels.firstIndex(of: ch)!\n            encoded.append(vowels[i+2 % vowels.count])\n\
    \        } else if letters.contains(ch) {\n            let i = letters.firstIndex(of:\
    \ ch)!\n            encoded.append(letters[i+2 % letters.count])\n        } else\
    \ {\n            encoded.append(ch)\n        }\n    }\n    return encoded\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdxwjkb80.swift:19:35: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            encoded.append(vowels[i+2 % vowels.count])\n\
    \                                  ^\n/tmp/tmpdxwjkb80.swift:22:36: error: cannot\
    \ convert value of type 'String.Index' to expected argument type 'Int'\n     \
    \       encoded.append(letters[i+2 % letters.count])\n                       \
    \            ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let asciiOffset =\
    \ Int((\"a\" as UnicodeScalar).value)\n    let encodedCharacters = message.map\
    \ { character -> Character in\n        var encodedCharacter = character\n    \
    \    if let characterAsciiValue = character.asciiValue {\n            if vowels.contains(character)\
    \ {\n                let encodedAsciiValue = (Int(characterAsciiValue) + 2) %\
    \ 26 + asciiOffset\n                let encodedUnicodeScalar = UnicodeScalar(encodedAsciiValue)!\n\
    \                encodedCharacter = Character(encodedUnicodeScalar)\n        \
    \    }\n            let isUppercase = characterAsciiValue >= 65 && characterAsciiValue\
    \ <= 90\n            if isUppercase {\n                let encodedAsciiValue =\
    \ Int(characterAsciiValue) + 32\n                let encodedUnicodeScalar = UnicodeScalar(encodedAsciiValue)!\n\
    \                encodedCharacter = Character(encodedUnicodeScalar)\n        \
    \    } else {\n                let encodedAsciiValue = Int(characterAsciiValue)\
    \ - 32\n                let encodedUnicodeScalar = UnicodeScalar(encodedAsciiValue)!\n\
    \                encodedCharacter = Character(encodedUnicodeScalar)\n        \
    \    }\n        }\n        return encodedCharacter\n    }\n    return String(encodedCharacters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxlnt3hpk/tmpxlnt3hpk.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b491c76bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b491c462b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b491c462988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b491c4617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlnt3hpk                        0x000056375ac85b27 <unavailable> + 6951

    5    libc.so.6                          0x00002b491c957460 __libc_start_main +
    245

    6    tmpxlnt3hpk                        0x000056375ac85769 <unavailable> + 5993

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // your\
    \ code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxjer2z_2/tmpxjer2z_2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4179befc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41798e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41798e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41798e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjer2z_2                        0x000055c17d958307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4179ddb460 __libc_start_main +
    245

    6    tmpxjer2z_2                        0x000055c17d957f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // Converts\
    \ a string to a character array\n    var characters = Array(message)\n    for\
    \ i in 0..<characters.count {\n        // Checks if the current character is uppercase\n\
    \        if characters[i].isUppercase {\n            // If so, convert it to lowercase\n\
    \            characters[i] = characters[i].lowercased()\n        } else {\n  \
    \          // Otherwise, convert it to uppercase\n            characters[i] =\
    \ characters[i].uppercased()\n        }\n        // Checks if the current character\
    \ is a vowel\n        if isVowel(character: characters[i]) {\n            // If\
    \ so, convert it to the character 2 places after it\n            characters[i]\
    \ = replaceVowel(character: characters[i])\n        }\n    }\n    // Returns the\
    \ modified string\n    return String(characters)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd_pvxn8e.swift:19:43: error: cannot assign value of type 'String'\
    \ to subscript of type 'String.Element' (aka 'Character')\n            characters[i]\
    \ = characters[i].lowercased()\n                            ~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmpd_pvxn8e.swift:22:43: error: cannot assign value of type 'String' to subscript\
    \ of type 'String.Element' (aka 'Character')\n            characters[i] = characters[i].uppercased()\n\
    \                            ~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpd_pvxn8e.swift:25:12:\
    \ error: cannot find 'isVowel' in scope\n        if isVowel(character: characters[i])\
    \ {\n           ^~~~~~~\n/tmp/tmpd_pvxn8e.swift:27:29: error: cannot find 'replaceVowel'\
    \ in scope\n            characters[i] = replaceVowel(character: characters[i])\n\
    \                            ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabets: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for letter in message {\n        var index = alphabets.firstIndex(of: letter)\n\
    \        if index != nil {\n            index = index! + 2\n            if index!\
    \ >= alphabets.count {\n                index = index! - alphabets.count\n   \
    \         }\n            encodedMessage.append(alphabets[index!])\n        } else\
    \ {\n            index = alphabets.firstIndex(of: Character(letter.lowercased()))\n\
    \            if index != nil {\n                index = index! + 2\n         \
    \       if index! >= alphabets.count {\n                    index = index! - alphabets.count\n\
    \                }\n                encodedMessage.append(alphabets[index!].uppercased())\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpyo0wnhp_/tmpyo0wnhp_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7bcfe1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7bccd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7bccd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7bccd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyo0wnhp_                        0x000055d09b9fca47 <unavailable> + 6727

    5    libc.so.6                          0x00002ac7bd1cd460 __libc_start_main +
    245

    6    tmpyo0wnhp_                        0x000055d09b9fc689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // your\
    \ code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxjer2z_2/tmpxjer2z_2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4179befc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41798e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41798e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41798e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjer2z_2                        0x000055c17d958307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4179ddb460 __libc_start_main +
    245

    6    tmpxjer2z_2                        0x000055c17d957f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.map { (letter) -> Character in\n        guard letter.isLetter else {\
    \ return letter }\n        switch letter {\n        case \"a\", \"A\":\n     \
    \       return letter.isUppercase ? \"C\" : \"c\"\n        case \"e\", \"E\":\n\
    \            return letter.isUppercase ? \"G\" : \"g\"\n        case \"i\", \"\
    I\":\n            return letter.isUppercase ? \"K\" : \"k\"\n        case \"o\"\
    , \"O\":\n            return letter.isUppercase ? \"M\" : \"m\"\n        case\
    \ \"u\", \"U\":\n            return letter.isUppercase ? \"Q\" : \"q\"\n     \
    \   default:\n            return letter.isUppercase ? Character(letter.lowercased())\
    \ : Character(letter.uppercased())\n        }\n    }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_s2kgdto.swift:13:38: error: declared closure result 'Character'\
    \ is incompatible with contextual type 'String'\n    return message.map { (letter)\
    \ -> Character in\n                                     ^~~~~~~~~\n          \
    \                           String\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tlet vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tlet letters: Set<Character>\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n\t\n\tvar encoded = \"\"\n\tvar a = \"a\"\n\t\
    var i = 1\n\twhile i < 26 {\n\t\tlet c = Character(a)\n\t\tif vowels.contains(c)\
    \ {\n\t\t\tif (letters.contains(Character(a.uppercased()))) {\n\t\t\t\tencoded.append(c.uppercased())\n\
    \t\t\t} else {\n\t\t\t\tencoded.append(c)\n\t\t\t}\n\t\t} else {\n\t\t\tif (letters.contains(Character(a.lowercased())))\
    \ {\n\t\t\t\tencoded.append(c.lowercased())\n\t\t\t} else {\n\t\t\t\tencoded.append(c)\n\
    \t\t\t}\n\t\t}\n\t\ta = String(UnicodeScalar(UInt8(a, radix: 16)! + 1)!)\n\t\t\
    i += 1\n\t}\n\t\n\tvar newMessage = \"\"\n\tfor c in message {\n\t\tif vowels.contains(c)\
    \ {\n\t\t\tlet index = encoded.index(encoded.startIndex, offsetBy: 3)\n\t\t\t\
    newMessage.append(encoded[index])\n\t\t} else {\n\t\t\tif let idx = encoded.index(of:\
    \ c) {\n\t\t\t\tnewMessage.append(c)\n\t\t\t}\n\t\t}\n\t}\n\treturn newMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8prye6zt.swift:34:53: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                a = String(UnicodeScalar(UInt8(a,\
    \ radix: 16)! + 1)!)\n                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                  \n/tmp/tmp8prye6zt.swift:44:25:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \                if let idx = encoded.index(of: c) {\n                       \
    \                      ^\n/tmp/tmp8prye6zt.swift:44:25: note: use 'firstIndex(of:)'\
    \ instead\n                        if let idx = encoded.index(of: c) {\n     \
    \                                        ^~~~~\n                             \
    \                firstIndex\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // open\
    \ a loop to iterate through the array and change the cases based on\n    // the\
    \ rules of the problem.\n    var newMessage = \"\"\n    for letter in message\
    \ {\n        if let char = letter.unicodeScalars.first {\n            if char.value\
    \ >= 65 && char.value <= 90 {\n                newMessage.append(Character(UnicodeScalar(char.value\
    \ + 32)!))\n            } else if char.value >= 97 && char.value <= 122 {\n  \
    \              newMessage.append(Character(UnicodeScalar(char.value - 32)!))\n\
    \            } else if char.value == 97 {\n                newMessage.append(\"\
    C\")\n            } else if char.value == 101 {\n                newMessage.append(\"\
    G\")\n            } else if char.value == 105 {\n                newMessage.append(\"\
    K\")\n            } else if char.value == 111 {\n                newMessage.append(\"\
    O\")\n            } else if char.value == 117 {\n                newMessage.append(\"\
    S\")\n            } else {\n                newMessage.append(letter)\n      \
    \      }\n        }\n    }\n    return newMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpzylvlxbu/tmpzylvlxbu.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b017dcc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b017d9bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b017d9bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b017d9ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzylvlxbu                        0x0000555f43666797 <unavailable> + 6039

    5    libc.so.6                          0x00002b017deb0460 __libc_start_main +
    245

    6    tmpzylvlxbu                        0x0000555f436663d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var array\
    \ = Array(message)\n    for (index, item) in array.enumerated() {\n        var\
    \ character = String(item)\n        if character.lowercased() == \"a\" {\n   \
    \         character = \"c\"\n        } else if character.lowercased() == \"e\"\
    \ {\n            character = \"g\"\n        } else if character.lowercased() ==\
    \ \"i\" {\n            character = \"k\"\n        } else if character.lowercased()\
    \ == \"o\" {\n            character = \"q\"\n        } else if character.lowercased()\
    \ == \"u\" {\n            character = \"y\"\n        } else if character.lowercased()\
    \ == \"y\" {\n            character = \"b\"\n        } else if character.lowercased()\
    \ == \"t\" {\n            character = \"v\"\n        } else if character.lowercased()\
    \ == \"r\" {\n            character = \"t\"\n        } else if character.lowercased()\
    \ == \"e\" {\n            character = \"g\"\n        } else if character.lowercased()\
    \ == \"w\" {\n            character = \"y\"\n        } else if character.lowercased()\
    \ == \"q\" {\n            character = \"s\"\n        } else if character.lowercased()\
    \ == \"d\" {\n            character = \"f\"\n        } else if character.lowercased()\
    \ == \"f\" {\n            character = \"h\"\n        } else if character.lowercased()\
    \ == \"g\" {\n            character = \"j\"\n        } else if character.lowercased()\
    \ == \"h\" {\n            character = \"l\"\n        } else if character.lowercased()\
    \ == \"j\" {\n            character = \"n\"\n        } else if character.lowercased()\
    \ == \"k\" {\n            character = \"p\"\n        } else if character.lowercased()\
    \ == \"z\" {\n            character = \"a\"\n        } else if character.lowercased()\
    \ == \"x\" {\n            character = \"z\"\n        } else if character.lowercased()\
    \ == \"c\" {\n            character = \"e\"\n        } else if character.lowercased()\
    \ == \"v\" {\n            character =\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1wet1kp8.swift:58:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmp1wet1kp8.swift:77:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmp1wet1kp8.swift:14:45: note: to match this opening\
    \ '{'\n    for (index, item) in array.enumerated() {\n                       \
    \                     ^\n/tmp/tmp1wet1kp8.swift:77:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmp1wet1kp8.swift:12:40: note:\
    \ to match this opening '{'\nfunc encode(message: String) -> String {\n      \
    \                                 ^\n/tmp/tmp1wet1kp8.swift:61:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let offsetVowels = \"cgkmps\"\n    let index: [Character:Int]\
    \ = [\"a\":0, \"e\":1, \"i\":2, \"o\":3, \"u\":4]\n    var result = \"\"\n   \
    \ for char in message {\n        if let i = index[char] {\n            result.append(offsetVowels[index[char]!])\n\
    \        } else if let j = vowels.index(of: char) {\n            result.append(offsetVowels[j])\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpem8tc6s5.swift:19:27: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            result.append(offsetVowels[index[char]!])\n\
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpem8tc6s5.swift:20:34: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        } else if\
    \ let j = vowels.index(of: char) {\n                                 ^\n/tmp/tmpem8tc6s5.swift:20:34:\
    \ note: use 'firstIndex(of:)' instead\n        } else if let j = vowels.index(of:\
    \ char) {\n                                 ^~~~~\n                          \
    \       firstIndex\n/tmp/tmpem8tc6s5.swift:18:16: warning: value 'i' was defined\
    \ but never used; consider replacing with boolean test\n        if let i = index[char]\
    \ {\n           ~~~~^~~~\n                               != nil\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let dictionary\
    \ = [\n        \"a\": \"c\",\n        \"e\": \"g\",\n        \"i\": \"k\",\n \
    \       \"o\": \"q\",\n        \"u\": \"w\",\n        \"A\": \"C\",\n        \"\
    E\": \"G\",\n        \"I\": \"K\",\n        \"O\": \"Q\",\n        \"U\": \"W\"\
    \n    ]\n    var encodedString = \"\"\n    for char in message {\n        if dictionary[String(char)]\
    \ != nil {\n            encodedString += dictionary[String(char)]!\n        }\
    \ else {\n            encodedString += String(char)\n        }\n    }\n    return\
    \ encodedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp1ey7q7a8/tmp1ey7q7a8.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e23761c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e23458b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e23458988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e234577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ey7q7a8                        0x0000564af53af737 <unavailable> + 5943

    5    libc.so.6                          0x00002b6e2394d460 __libc_start_main +
    245

    6    tmp1ey7q7a8                        0x0000564af53af379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let alphabetUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    for letter in message {\n        if alphabet.contains(letter) {\n      \
    \      let index = alphabet.firstIndex(of: letter)!\n            let letterUpper\
    \ = alphabetUpper[index]\n            if vowels.contains(letter) {\n         \
    \       let indexForVowel = alphabet.firstIndex(of: letter)!\n               \
    \ if indexForVowel <= 23 {\n                    let indexOfVowelTwoForward = alphabet.index(after:\
    \ indexForVowel)\n                    let indexOfVowelOneForward = alphabet.index(after:\
    \ indexOfVowelTwoForward)\n                    let vowelTwoForward = alphabet[indexOfVowelTwoForward]\n\
    \                    let vowelOneForward = alphabet[indexOfVowelOneForward]\n\
    \                    let vowelTwoForwardUpper = alphabetUpper[indexOfVowelTwoForward]\n\
    \                    let vowelOneForwardUpper = alphabetUpper[indexOfVowelOneForward]\n\
    \                    if alphabet.contains(letter) {\n                        result.append(vowelTwoForward)\n\
    \                    } else {\n                        result.append(vowelTwoForwardUpper)\n\
    \                    }\n                } else {\n                    let startIndex\
    \ = alphabet.startIndex\n                    let indexOfVowelTwoForward = alphabet.index(startIndex,\
    \ offsetBy: 1)\n                    let indexOfVowelOneForward = alphabet.index(startIndex,\
    \ offsetBy: 2)\n                    let vowelTwoForward = alphabet[indexOfVowelTwoForward]\n\
    \                    let vowelOneForward = alphabet[indexOfVowelOneForward]\n\
    \                    let vowelTwoForwardUpper = alphabetUpper[indexOfVowelTwoForward]\n\
    \                    let vowelOneForwardUpper = alphabetUpper[indexOfVowelOneForward]\n\
    \                    if alphabet.contains(letter) {\n                        result.append(vowelTwoForward)\n\
    \                    } else {\n                        result.append(vowelTwoForwardUpper)\n\
    \                    }\n                }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmply7nf0fm.swift:68:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmply7nf0fm.swift:18:38: note: to match this opening\
    \ '{'\n        if alphabet.contains(letter) {\n                              \
    \       ^\n/tmp/tmply7nf0fm.swift:68:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmply7nf0fm.swift:17:27: note: to match this opening\
    \ '{'\n    for letter in message {\n                          ^\n/tmp/tmply7nf0fm.swift:68:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmply7nf0fm.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmply7nf0fm.swift:21:32: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            if vowels.contains(letter) {\n                               ^\n\
    /tmp/tmply7nf0fm.swift:23:34: error: referencing operator function '<=' on 'BinaryInteger'\
    \ requires that 'String.Index' conform to 'BinaryInteger'\n                if\
    \ indexForVowel <= 23 {\n                                 ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n\
    /tmp/tmply7nf0fm.swift:52:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letterChanges: [Character:\
    \ Character] = [\n        \"b\": \"d\",\n        \"c\": \"f\",\n        \"d\"\
    : \"g\",\n        \"e\": \"h\",\n        \"f\": \"j\",\n        \"g\": \"k\",\n\
    \        \"h\": \"l\",\n        \"i\": \"m\",\n        \"j\": \"n\",\n       \
    \ \"k\": \"p\",\n        \"l\": \"q\",\n        \"m\": \"r\",\n        \"n\":\
    \ \"s\",\n        \"o\": \"t\",\n        \"p\": \"v\",\n        \"q\": \"w\",\n\
    \        \"r\": \"x\",\n        \"s\": \"y\",\n        \"t\": \"z\",\n       \
    \ \"u\": \"a\",\n        \"v\": \"b\",\n        \"w\": \"c\",\n        \"x\":\
    \ \"e\",\n        \"y\": \"f\",\n        \"z\": \"g\"\n    ]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let lowercaseChar = char.lowercased().first\
    \ {\n            if vowels.contains(lowercaseChar) {\n                if let encodedChar\
    \ = letterChanges[lowercaseChar] {\n                    encodedMessage.append(encodedChar)\n\
    \                }\n            } else {\n                if char.isUppercase\
    \ {\n                    encodedMessage.append(lowercaseChar.uppercased())\n \
    \               } else {\n                    encodedMessage.append(lowercaseChar)\n\
    \                }\n            }\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmplf82nk2z/tmplf82nk2z.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eeee15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eeeb0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eeeb0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eeeb0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplf82nk2z                        0x0000556844c729b7 <unavailable> + 6583

    5    libc.so.6                          0x00002b7eef001460 __libc_start_main +
    245

    6    tmplf82nk2z                        0x0000556844c725f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var message\
    \ = message\n    let vowelSet = CharacterSet(charactersIn: \"aeiou\")\n    let\
    \ vowels = \"aeiou\"\n    for i in 0..<message.count {\n        let index = message.index(message.startIndex,\
    \ offsetBy: i)\n        let character = message[index]\n        if character.isUppercase\
    \ {\n            message.replaceSubrange(index...index, with: String(character).lowercased())\n\
    \        } else if character.isLowercase {\n            message.replaceSubrange(index...index,\
    \ with: String(character).uppercased())\n        }\n        if vowelSet.contains(UnicodeScalar(String(character))!)\
    \ {\n            let character = message[index]\n            let vowelIndex =\
    \ vowels.index(of: character)!\n            let correctIndex = vowels.index(after:\
    \ vowelIndex)\n            let correctIndex2 = vowels.index(after: correctIndex)\n\
    \            message.replaceSubrange(index...index, with: String(vowels[correctIndex2]))\n\
    \        }\n    }\n    return message\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpscne9ujl.swift:14:20: error: cannot find 'CharacterSet' in scope\n\
    \    let vowelSet = CharacterSet(charactersIn: \"aeiou\")\n                  \
    \ ^~~~~~~~~~~~\n/tmp/tmpscne9ujl.swift:26:37: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let vowelIndex = vowels.index(of:\
    \ character)!\n                                    ^\n/tmp/tmpscne9ujl.swift:26:37:\
    \ note: use 'firstIndex(of:)' instead\n            let vowelIndex = vowels.index(of:\
    \ character)!\n                                    ^~~~~\n                   \
    \                 firstIndex\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // TODO:\
    \ Implement\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmplnchg83z/tmplnchg83z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3398d4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3398a43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3398a43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3398a427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnchg83z                        0x00005571d38a5307 <unavailable> + 4871

    5    libc.so.6                          0x00002b3398f38460 __libc_start_main +
    245

    6    tmplnchg83z                        0x00005571d38a4f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let vowelKeys: [Character:Character]\
    \ = [\"a\":\"c\", \"e\":\"g\", \"i\":\"k\", \"o\":\"q\", \"u\":\"y\"]\n    var\
    \ encodedMessage = \"\"\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            encodedMessage.append(vowelKeys[character]!)\n        } else\
    \ if character.isUppercase {\n            encodedMessage.append(character.lowercased())\n\
    \        } else {\n            encodedMessage.append(character.uppercased())\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp0mo0821w/tmp0mo0821w.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b064b00fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b064ad06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b064ad06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b064ad057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0mo0821w                        0x0000555fdd581987 <unavailable> + 6535

    5    libc.so.6                          0x00002b064b1fb460 __libc_start_main +
    245

    6    tmp0mo0821w                        0x0000555fdd5815c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        var letter = \"\"\n        switch\
    \ char {\n        case \"a\":\n            letter = \"c\"\n        case \"e\"\
    :\n            letter = \"g\"\n        case \"i\":\n            letter = \"k\"\
    \n        case \"o\":\n            letter = \"q\"\n        case \"u\":\n     \
    \       letter = \"y\"\n        default:\n            letter = \"\\(char)\"\n\
    \        }\n        let newChar = letter.uppercased() == letter ? letter.lowercased()\
    \ : letter.uppercased()\n        result += newChar\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpq_tcbyu3/tmpq_tcbyu3.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2892281c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2891f78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2891f78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2891f777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_tcbyu3                        0x00005633b32368b7 <unavailable> + 6327

    5    libc.so.6                          0x00002b289246d460 __libc_start_main +
    245

    6    tmpq_tcbyu3                        0x00005633b32364f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tlet vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tvar messageArray = Array(message)\n\
    \tvar encodedMessageArray = [String]()\n\tfor i in 0..<messageArray.count {\n\t\
    \tif messageArray[i] == \" \" {\n\t\t\tencodedMessageArray.append(\" \")\n\t\t\
    } else if vowels.contains(String(messageArray[i]).lowercased()) {\n\t\t\tif messageArray[i]\
    \ == \"u\" {\n\t\t\t\tencodedMessageArray.append(\"a\")\n\t\t\t} else if messageArray[i]\
    \ == \"U\" {\n\t\t\t\tencodedMessageArray.append(\"A\")\n\t\t\t} else {\n\t\t\t\
    \tvar letter = messageArray[i]\n\t\t\t\tletter = letter.successor().successor()\n\
    \t\t\t\tencodedMessageArray.append(String(letter))\n\t\t\t}\n\t\t} else {\n\t\t\
    \tencodedMessageArray.append(String(messageArray[i]).uppercased())\n\t\t}\n\t\
    }\n\tlet encodedMessage = encodedMessageArray.joined()\n\treturn encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7n4lg8a5.swift:26:21: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'successor'\n                                letter\
    \ = letter.successor().successor()\n                                         ~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let lookup:\
    \ [Character: Character] = [\n        \"a\": \"c\",\n        \"A\": \"C\",\n \
    \       \"e\": \"g\",\n        \"E\": \"G\",\n        \"i\": \"k\",\n        \"\
    I\": \"K\",\n        \"o\": \"q\",\n        \"O\": \"Q\",\n        \"u\": \"y\"\
    ,\n        \"U\": \"Y\"\n    ]\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let lookupChar = lookup[char] {\n            encoded.append(lookupChar)\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp5x5sz63w/tmp5x5sz63w.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac772a5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac772756b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac772756988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7727557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5x5sz63w                        0x000055cd0f94a6d7 <unavailable> + 5847

    5    libc.so.6                          0x00002ac772c4b460 __libc_start_main +
    245

    6    tmp5x5sz63w                        0x000055cd0f94a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  var encoded = \"\"\n  for character\
    \ in message {\n    if character.isLetter {\n      if character.isUppercase {\n\
    \        encoded.append(character.lowercased())\n      } else {\n        encoded.append(character.uppercased())\n\
    \      }\n    } else {\n      encoded.append(character)\n    }\n  }\n  return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpj_i9gngi/tmpj_i9gngi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba32fb94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba32f88bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba32f88b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba32f88a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_i9gngi                        0x00005575084b1707 <unavailable> + 5895

    5    libc.so.6                          0x00002ba32fd80460 __libc_start_main +
    245

    6    tmpj_i9gngi                        0x00005575084b1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if isVowel(character: character)\
    \ {\n            encodedMessage.append(getNextVowel(currentVowel: character))\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjlkfo76n.swift:15:12: error: cannot find 'isVowel' in scope\n \
    \       if isVowel(character: character) {\n           ^~~~~~~\n/tmp/tmpjlkfo76n.swift:16:35:\
    \ error: cannot find 'getNextVowel' in scope\n            encodedMessage.append(getNextVowel(currentVowel:\
    \ character))\n                                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        if let newChar = shift(char: char)\
    \ {\n            result.append(newChar)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc0egehzw.swift:15:26: error: cannot find 'shift' in scope\n   \
    \     if let newChar = shift(char: char) {\n                         ^~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabets\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    for character in message {\n        if vowels.contains(String(character).lowercased())\
    \ {\n            let index = alphabets.firstIndex(of: String(character).lowercased())\n\
    \            let tempIndex = index! + 2\n            if tempIndex < 26 {\n   \
    \             if String(character).lowercased() == String(character) {\n     \
    \               encodedMessage += alphabets[tempIndex]\n                } else\
    \ {\n                    encodedMessage += alphabets[tempIndex].uppercased()\n\
    \                }\n            } else {\n                let newIndex = tempIndex\
    \ - 26\n                if String(character).lowercased() == String(character)\
    \ {\n                    encodedMessage += alphabets[newIndex]\n             \
    \   } else {\n                    encodedMessage += alphabets[newIndex].uppercased()\n\
    \                }\n            }\n        } else {\n            if String(character).lowercased()\
    \ == String(character) {\n                encodedMessage += String(character).uppercased()\n\
    \            } else {\n                encodedMessage += String(character).lowercased()\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpst8iy41p/tmpst8iy41p.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dc3622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dc3319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dc3319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dc33187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpst8iy41p                        0x0000563a2edd0897 <unavailable> + 6295

    5    libc.so.6                          0x00002b4dc380e460 __libc_start_main +
    245

    6    tmpst8iy41p                        0x0000563a2edd04d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tvar returnValue\
    \ = \"\"\n\tfor character in message {\n\t\tif (character == \"a\") {\n\t\t\t\
    returnValue += \"c\"\n\t\t} else if (character == \"e\") {\n\t\t\treturnValue\
    \ += \"g\"\n\t\t} else if (character == \"i\") {\n\t\t\treturnValue += \"k\"\n\
    \t\t} else if (character == \"o\") {\n\t\t\treturnValue += \"q\"\n\t\t} else if\
    \ (character == \"u\") {\n\t\t\treturnValue += \"y\"\n\t\t} else if (character\
    \ == \"A\") {\n\t\t\treturnValue += \"C\"\n\t\t} else if (character == \"E\")\
    \ {\n\t\t\treturnValue += \"G\"\n\t\t} else if (character == \"I\") {\n\t\t\t\
    returnValue += \"K\"\n\t\t} else if (character == \"O\") {\n\t\t\treturnValue\
    \ += \"Q\"\n\t\t} else if (character == \"U\") {\n\t\t\treturnValue += \"Y\"\n\
    \t\t} else {\n\t\t\treturnValue += String(character)\n\t\t}\n\t}\n\treturn returnValue\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfjkng5_k/tmpfjkng5_k.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8231a84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b823177bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b823177b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b823177a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjkng5_k                        0x000055c22307b557 <unavailable> + 5463

    5    libc.so.6                          0x00002b8231c70460 __libc_start_main +
    245

    6    tmpfjkng5_k                        0x000055c22307b199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        let index = String(char).lowercased().firstIndex(of:\
    \ char)\n        if let index = index {\n            if vowels.contains(char)\
    \ {\n                let newIndex = (index < vowels.index(before: vowels.endIndex))\
    \ ? index : vowels.startIndex\n                let move = (newIndex < vowels.index(before:\
    \ vowels.endIndex)) ? 2 : 1\n                let changedChar = vowels[vowels.index(newIndex,\
    \ offsetBy: move)]\n                encodedMessage.append(String(changedChar).uppercased())\n\
    \            } else {\n                let newIndex = (index < letters.index(before:\
    \ letters.endIndex)) ? index : letters.startIndex\n                let move =\
    \ (newIndex < letters.index(before: letters.endIndex)) ? 2 : 1\n             \
    \   let changedChar = letters[letters.index(newIndex, offsetBy: move)]\n     \
    \           encodedMessage.append(String(changedChar).uppercased())\n        \
    \    }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp8n4x92ah/tmp8n4x92ah.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57872e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5786fd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5786fd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5786fd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8n4x92ah                        0x000055c273b27907 <unavailable> + 6407

    5    libc.so.6                          0x00002b57874cc460 __libc_start_main +
    245

    6    tmp8n4x92ah                        0x000055c273b27549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = \"abcdefghijklmnopqrstuvwxyz\".map{$0}\n    var messageArray = message.map{$0}\n\
    \    for i in 0..<messageArray.count {\n        if messageArray[i].isLetter {\n\
    \            let currentChar = messageArray[i]\n            if let index = alphabet.firstIndex(of:\
    \ currentChar.lowercased().first!) {\n                if index != 25 {\n     \
    \               if vowels.contains(currentChar.lowercased().first!) {\n      \
    \                  messageArray[i] = alphabet[index + 2]\n                   \
    \ } else {\n                        messageArray[i] = alphabet[index + 1]\n  \
    \                  }\n                } else {\n                    if vowels.contains(currentChar.lowercased().first!)\
    \ {\n                        messageArray[i] = alphabet[1]\n                 \
    \   } else {\n                        messageArray[i] = alphabet[0]\n        \
    \            }\n                }\n            }\n        }\n    }\n    var output\
    \ = String(messageArray)\n    output = output.uppercased()\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpgzdjme9_/tmpgzdjme9_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd60d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd5dccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd5dcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd5dcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzdjme9_                        0x0000557629ecbb57 <unavailable> + 6999

    5    libc.so.6                          0x00002b5cd62c1460 __libc_start_main +
    245

    6    tmpgzdjme9_                        0x0000557629ecb799 <unavailable> + 6041

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ letter in message {\n        let char = String(letter)\n        if let index\
    \ = vowels.firstIndex(of: char.lowercased()) {\n            let newIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage += vowels[newIndex].uppercased()\n\
    \        } else {\n            encodedMessage += char.uppercased()\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp7k9yu8pb/tmp7k9yu8pb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed4cb69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed4c860b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed4c860988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed4c85f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7k9yu8pb                        0x0000563042624887 <unavailable> + 6279

    5    libc.so.6                          0x00002aed4cd55460 __libc_start_main +
    245

    6    tmp7k9yu8pb                        0x00005630426244c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n\
    \    for letter in message {\n        var newLetter = letter\n        let aScalarValue\
    \ = \"a\".unicodeScalars.first!.value\n        if let asciiValue = letter.unicodeScalars.first?.value\
    \ {\n            if vowels.contains(letter) {\n                let newCharValue\
    \ = ((asciiValue - aScalarValue + 2) % 26) + aScalarValue\n                newLetter\
    \ = Character(UnicodeScalar(newCharValue)!)\n            }\n            newLetter\
    \ = newLetter.isUppercase ? newLetter.lowercased() : newLetter.uppercased()\n\
    \        }\n        encoded.append(newLetter)\n    }\n    return encoded\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgb5mm9o8.swift:23:47: error: cannot assign value of type 'String'\
    \ to type 'Character'\n            newLetter = newLetter.isUppercase ? newLetter.lowercased()\
    \ : newLetter.uppercased()\n                        ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let messageLowercased = message.lowercased()\n    let alphabets\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    for character in messageLowercased\
    \ {\n        if let index = alphabets.firstIndex(of: character) {\n          \
    \  encodedMessage += alphabets[(index + 2) % 26].uppercased()\n        } else\
    \ {\n            encodedMessage += character.uppercased()\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpel43st50/tmpel43st50.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49d0e63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49d0b5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49d0b5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49d0b597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpel43st50                        0x000055fc74a867a7 <unavailable> + 6055

    5    libc.so.6                          0x00002b49d104f460 __libc_start_main +
    245

    6    tmpel43st50                        0x000055fc74a863e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let letters:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encoded = \"\"\n    for letter\
    \ in message {\n        if (letter.isLetter) {\n            if (letter.isUppercase)\
    \ {\n                var index = letters.firstIndex(of: letter.lowercased())!\n\
    \                index = (index + 2) % 26\n                encoded.append(letters[index].uppercased())\n\
    \            } else {\n                var index = letters.firstIndex(of: letter)!\n\
    \                index = (index + 2) % 26\n                encoded.append(letters[index])\n\
    \            }\n        } else {\n            encoded.append(letter)\n       \
    \ }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpnsxc87ol.swift:18:59: error: cannot convert value of type 'String'\
    \ to expected argument type 'Character'\n                var index = letters.firstIndex(of:\
    \ letter.lowercased())!\n                                                    \
    \      ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // your\
    \ code here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: '/tmp/tmpwmm4vs1e.swift:14:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  let vowels\
    \ = \"AEIOUaeiou\"\n  let allLetters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n  var encoded = \"\"\n  var inVowel = false\n  for char in message {\n    if\
    \ allLetters.contains(char) {\n      if vowels.contains(char) {\n        inVowel\
    \ = true\n        encoded.append(char.advanced(by: 2))\n      } else {\n     \
    \   if inVowel {\n          encoded.append(char.advanced(by: -20))\n        }\
    \ else {\n          encoded.append(char.advanced(by: 2))\n        }\n      }\n\
    \    } else {\n      encoded.append(char)\n    }\n  }\n  return encoded\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3mcelhm_.swift:21:29: error: value of type 'Character' has no member\
    \ 'advanced'\n        encoded.append(char.advanced(by: 2))\n                 \
    \      ~~~~ ^~~~~~~~\n/tmp/tmp3mcelhm_.swift:24:31: error: value of type 'Character'\
    \ has no member 'advanced'\n          encoded.append(char.advanced(by: -20))\n\
    \                         ~~~~ ^~~~~~~~\n/tmp/tmp3mcelhm_.swift:26:31: error:\
    \ value of type 'Character' has no member 'advanced'\n          encoded.append(char.advanced(by:\
    \ 2))\n                         ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var myString\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let dict: [Character: Character] = [\"a\": \"c\", \"e\": \"g\", \"i\": \"\
    k\", \"o\": \"q\", \"u\": \"y\"]\n    for character in message {\n        if String(character).lowercased()\
    \ == String(character) {\n            if vowels.contains(character) {\n      \
    \          myString.append(dict[character]!)\n            } else {\n         \
    \       myString.append(character)\n            }\n        } else {\n        \
    \    if vowels.contains(character.lowercased().first!) {\n                myString.append(dict[character.lowercased().first!]!.uppercased())\n\
    \            } else {\n                myString.append(character.lowercased().first!)\n\
    \            }\n        }\n    }\n    return myString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpnrkcr5vz/tmpnrkcr5vz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0c8e28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0c8b1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0c8b1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0c8b1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnrkcr5vz                        0x000055f71485ba97 <unavailable> + 6807

    5    libc.so.6                          0x00002af0c9014460 __libc_start_main +
    245

    6    tmpnrkcr5vz                        0x000055f71485b6d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let mapping = [\"a\": \"c\", \"e\": \"g\", \"i\": \"k\", \"o\":\
    \ \"q\", \"u\": \"w\"]\n    for letter in message {\n        if let char = String(letter).lowercased().unicodeScalars.first\
    \ {\n            switch char {\n            case \"a\", \"e\", \"i\", \"o\", \"\
    u\":\n                encoded += mapping[String(letter).lowercased()] ?? \"\"\n\
    \            default:\n                encoded += String(letter).uppercased()\n\
    \            }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpop6_mhjv/tmpop6_mhjv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f339d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f336c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f336c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f336c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop6_mhjv                        0x0000564cb6eef8b7 <unavailable> + 6327

    5    libc.so.6                          0x00002b1f33bbc460 __libc_start_main +
    245

    6    tmpop6_mhjv                        0x0000564cb6eef4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let newVowels = \"cfilor\"\n    var result = message.lowercased()\n\
    \    result = result.map {\n        if vowels.contains($0) {\n            let\
    \ index = vowels.firstIndex(of: $0)!\n            return newVowels[index]\n  \
    \      } else {\n            return $0\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpkeg039bm.swift:16:21: error: cannot assign value of type '[Character]'\
    \ to type 'String'\n    result = result.map {\n             ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var results\
    \ = \"\"\n    for letter in message {\n        let lowercased = String(letter).lowercased()\n\
    \        if vowels.contains(lowercased) {\n            if let letterIndex = letters.firstIndex(of:\
    \ lowercased) {\n                let shiftedIndex = letterIndex.advanced(by: 2)\n\
    \                results.append(letters[shiftedIndex])\n            }\n      \
    \  } else {\n            results.append(letter)\n        }\n    }\n    return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp15wqknuf.swift:19:57: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            if\
    \ let letterIndex = letters.firstIndex(of: lowercased) {\n                   \
    \                                     ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let vowelsInAlphabet\
    \ = \"aeiou\"\n    let newVowelsInAlphabet = \"cdfghjklmnpqrstvwxyz\"\n    let\
    \ vowelsAndConsonants = message.map { char -> String in\n        let newChar =\
    \ String(char).lowercased()\n        if vowels.contains(Character(newChar)) {\n\
    \            guard let positionOfVowel = vowelsInAlphabet.firstIndex(of: Character(newChar))\
    \ else {\n                fatalError(\"Could not find vowel \\(newChar) in alphabet\"\
    )\n            }\n            let positionOfNewVowel = vowelsInAlphabet.index(positionOfVowel,\
    \ offsetBy: 2)\n            let newVowel = newVowelsInAlphabet[positionOfNewVowel]\n\
    \            return String(newVowel).uppercased()\n        } else {\n        \
    \    return String(char).uppercased()\n        }\n    }\n    return vowelsAndConsonants.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2r4brqbw/tmp2r4brqbw.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba8dc45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba8d93cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba8d93c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba8d93b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r4brqbw                        0x000055bd38403cd7 <unavailable> + 7383

    5    libc.so.6                          0x00002aba8de31460 __libc_start_main +
    245

    6    tmp2r4brqbw                        0x000055bd38403919 <unavailable> + 6425

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    //: Your\
    \ code goes here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpcgict4ti/tmpcgict4ti.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af83f9d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af83f6cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af83f6ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af83f6c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgict4ti                        0x000056456ab24307 <unavailable> + 4871

    5    libc.so.6                          0x00002af83fbbf460 __libc_start_main +
    245

    6    tmpcgict4ti                        0x000056456ab23f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var messageCopy\
    \ = message\n    messageCopy = messageCopy.lowercased()\n    var encoded = \"\"\
    \n    var index = 0\n    for char in messageCopy {\n        if char == \"a\" {\n\
    \            encoded.append(\"c\")\n        } else if char == \"e\" {\n      \
    \      encoded.append(\"g\")\n        } else if char == \"i\" {\n            encoded.append(\"\
    k\")\n        } else if char == \"o\" {\n            encoded.append(\"q\")\n \
    \       } else if char == \"u\" {\n            encoded.append(\"w\")\n       \
    \ } else {\n            encoded.append(message[message.index(message.startIndex,\
    \ offsetBy: index)])\n        }\n        index += 1\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp30pt1h3_/tmp30pt1h3_.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9baeb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9babb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9babb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9babaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp30pt1h3_                        0x00005628df7a06c7 <unavailable> + 5831

    5    libc.so.6                          0x00002ae9bb0a5460 __libc_start_main +
    245

    6    tmp30pt1h3_                        0x00005628df7a0309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // Convert\
    \ the message to lower case.\n    let lowercase = message.lowercased()\n    //\
    \ Convert the string to an array of characters.\n    let array = Array(lowercase)\n\
    \    // Create a variable to hold the encoded message.\n    var encoded = \"\"\
    \n    // For each character in the array\n    for char in array {\n        //\
    \ Check if the character is a consonant.\n        if char == \"a\" || char ==\
    \ \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            switch\
    \ char {\n            case \"a\":\n                encoded += \"c\"\n        \
    \    case \"e\":\n                encoded += \"g\"\n            case \"i\":\n\
    \                encoded += \"k\"\n            case \"o\":\n                encoded\
    \ += \"m\"\n            case \"u\":\n                encoded += \"s\"\n      \
    \      default:\n                encoded += char.uppercased()\n            }\n\
    \        } else {\n            encoded += char.uppercased()\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpowfo38b0/tmpowfo38b0.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99dd85ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99dd555b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99dd555988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99dd5547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowfo38b0                        0x00005586f1ee57c7 <unavailable> + 6087

    5    libc.so.6                          0x00002b99dda4a460 __libc_start_main +
    245

    6    tmpowfo38b0                        0x00005586f1ee5409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter\
    \ in message {\n        if let asciiValue = letter.asciiValue {\n            if\
    \ asciiValue >= 65 && asciiValue <= 90 {\n                if let newAsciiValue\
    \ = asciiValue + 33 {\n                    if let newLetter = UnicodeScalar(newAsciiValue)\
    \ {\n                        encodedMessage.append(Character(newLetter))\n   \
    \                 }\n                }\n            } else if asciiValue >= 97\
    \ && asciiValue <= 122 {\n                if let newAsciiValue = asciiValue -\
    \ 31 {\n                    if let newLetter = UnicodeScalar(newAsciiValue) {\n\
    \                        encodedMessage.append(Character(newLetter))\n       \
    \             }\n                }\n            } else {\n                encodedMessage.append(letter)\n\
    \            }\n        }\n    }\n    var returnValue = \"\"\n    for character\
    \ in encodedMessage {\n        if let letter = String(character).lowercased().first\
    \ {\n            if vowels.contains(String(letter)) {\n                if let\
    \ newLetter = UnicodeScalar(String(letter).asciiValue! + 2) {\n              \
    \      returnValue.append(Character(newLetter))\n                }\n         \
    \   } else {\n                returnValue.append(character)\n            }\n \
    \       }\n    }\n    return returnValue\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn4so0ie6.swift:19:24: error: initializer for conditional binding\
    \ must have Optional type, not 'UnicodeScalar' (aka 'Unicode.Scalar')\n      \
    \              if let newLetter = UnicodeScalar(newAsciiValue) {\n           \
    \            ^               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn4so0ie6.swift:18:20:\
    \ error: initializer for conditional binding must have Optional type, not 'UInt8'\n\
    \                if let newAsciiValue = asciiValue + 33 {\n                  \
    \ ^                   ~~~~~~~~~~~~~~~\n/tmp/tmpn4so0ie6.swift:25:24: error: initializer\
    \ for conditional binding must have Optional type, not 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \                    if let newLetter = UnicodeScalar(newAsciiValue) {\n     \
    \                  ^               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn4so0ie6.swift:24:20:\
    \ error: initializer for conditional binding must have Optional type, not 'UInt8'\n\
    \                if let newAsciiValue = asciiValue - 31 {\n                  \
    \ ^                   ~~~~~~~~~~~~~~~\n/tmp/tmpn4so0ie6.swift:38:65: error: value\
    \ of type 'String' has no member 'asciiValue'\n                if let newLetter\
    \ = UnicodeScalar(String(letter).asciiValue! + 2) {\n                        \
    \                         ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message {\n        if vowels.contains(letter) {\n        \
    \    let index = letters.firstIndex(of: letter)\n            let newIndex = letters.index(index!,\
    \ offsetBy: 2)\n            result.append(letters[newIndex])\n        } else {\n\
    \            result.append(letter)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp907i89_6/tmp907i89_6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2f59efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2f56e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2f56e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2f56e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp907i89_6                        0x00005574e8d49727 <unavailable> + 5927

    5    libc.so.6                          0x00002ac2f5bdb460 __libc_start_main +
    245

    6    tmp907i89_6                        0x00005574e8d49369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let letters\
    \ = message.lowercased().characters.map { String($0) }\n    let alphabets = \"\
    abcdefghijklmnopqrstuvwxyz\".characters.map { String($0) }\n    var result = \"\
    \"\n    var i = 0\n    while i < letters.count {\n        if letters[i] == \"\
    \ \" {\n            result += \" \"\n        } else if letters[i] == \"z\" {\n\
    \            result += \"b\"\n        } else if letters[i] == \"a\" {\n      \
    \      result += \"c\"\n        } else if letters[i] == \"e\" {\n            result\
    \ += \"g\"\n        } else if letters[i] == \"i\" {\n            result += \"\
    k\"\n        } else if letters[i] == \"o\" {\n            result += \"q\"\n  \
    \      } else if letters[i] == \"u\" {\n            result += \"y\"\n        }\
    \ else {\n            let index = alphabets.index(of: letters[i])!\n         \
    \   result += alphabets[index + 2]\n        }\n        i += 1\n    }\n    return\
    \ result.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpir1zbtq2.swift:13:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = message.lowercased().characters.map {\
    \ String($0) }\n                                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpir1zbtq2.swift:14:50: error: 'characters'\
    \ is unavailable: Please use String directly\n    let alphabets = \"abcdefghijklmnopqrstuvwxyz\"\
    .characters.map { String($0) }\n                                             \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpir1zbtq2.swift:33:35:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = alphabets.index(of: letters[i])!\n                          \
    \        ^\n/tmp/tmpir1zbtq2.swift:33:35: note: use 'firstIndex(of:)' instead\n\
    \            let index = alphabets.index(of: letters[i])!\n                  \
    \                ^~~~~\n                                  firstIndex\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let vowel_indexes: [Int]\
    \ = [0, 4, 8, 14, 20]\n    var encoded_message: String = \"\"\n    for char in\
    \ message {\n        if vowels.contains(char) {\n            let index = vowel_indexes.firstIndex(of:\
    \ char.asciiValue! - 97)!\n            if index == 4 {\n                encoded_message.append(vowels[0])\n\
    \            } else {\n                encoded_message.append(vowels[index + 1])\n\
    \            }\n        } else if char.isUppercase {\n            encoded_message.append(char.lowercased())\n\
    \        } else {\n            encoded_message.append(char.uppercased())\n   \
    \     }\n    }\n    return encoded_message\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpg2_6xtxv.swift:18:69: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n            let index = vowel_indexes.firstIndex(of:\
    \ char.asciiValue! - 97)!\n                                                  \
    \                  ^\n                                                     Int(\
    \            )\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let messageArray\
    \ = Array(message)\n    var encodedMessage = [Character]()\n    let upperCase:\
    \ [Character] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"\
    , \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    let lowerCase: [Character] =\
    \ [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n    let vowels: [Character] = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    for character in messageArray {\n        if upperCase.contains(character)\
    \ {\n            let index = upperCase.firstIndex(of: character)!\n          \
    \  encodedMessage.append(lowerCase[index])\n        } else if lowerCase.contains(character)\
    \ {\n            let index = lowerCase.firstIndex(of: character)!\n          \
    \  encodedMessage.append(upperCase[index])\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    for (index, character) in encodedMessage.enumerated() {\n\
    \        if vowels.contains(character) {\n            encodedMessage[index] =\
    \ vowels[(vowels.firstIndex(of: character)! + 2) % 5]\n        }\n    }\n    return\
    \ String(encodedMessage)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp32ky4qct/tmp32ky4qct.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46cd6dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46cd3d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46cd3d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46cd3d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32ky4qct                        0x000055cbd9903c97 <unavailable> + 7319

    5    libc.so.6                          0x00002b46cd8c6460 __libc_start_main +
    245

    6    tmp32ky4qct                        0x000055cbd99038d9 <unavailable> + 6361

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tlet vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tvar result = \"\"\n\tfor\
    \ letter in message {\n\t\tif vowels.contains(letter) {\n\t\t\tresult.append(vowels[(vowels.firstIndex(of:\
    \ letter)! + 2) % vowels.count])\n\t\t} else {\n\t\t\tif letter.isUppercase {\n\
    \t\t\t\tresult.append(letter.lowercased())\n\t\t\t} else {\n\t\t\t\tresult.append(letter.uppercased())\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpakss3s6j/tmpakss3s6j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c2ea0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c2e701b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c2e701988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c2e7007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpakss3s6j                        0x0000555d2a6589d7 <unavailable> + 6615

    5    libc.so.6                          0x00002b3c2ebf6460 __libc_start_main +
    245

    6    tmpakss3s6j                        0x0000555d2a658619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\".map { String($0) }\n    let vowelsReplaced = \"cdfghjklmnpqrstvwxyz\"\
    .map { String($0) }\n    var result = \"\"\n    for letter in message {\n    \
    \    if let index = vowels.firstIndex(of: String(letter).lowercased()) {\n   \
    \         result += vowelsReplaced[index]\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjlhcig4q.swift:20:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let encodedChar = encode(char: char)\n\
    \        encodedMessage.append(encodedChar)\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpesiv_vg2.swift:15:33: error: incorrect argument label in call (have\
    \ 'char:', expected 'message:')\n        let encodedChar = encode(char: char)\n\
    \                                ^~~~~\n                                 message\n\
    /tmp/tmpesiv_vg2.swift:15:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        let encodedChar = encode(char: char)\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.lowercased().map { char in\n        switch char {\n        case \"a\"\
    :\n            return \"c\"\n        case \"e\":\n            return \"g\"\n \
    \       case \"i\":\n            return \"k\"\n        case \"o\":\n         \
    \   return \"q\"\n        case \"u\":\n            return \"y\"\n        default:\n\
    \            return char\n        }\n    }.uppercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprm88356y.swift:26:20: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n          \
    \  return char\n                   ^~~~\n/tmp/tmprm88356y.swift:28:7: error: value\
    \ of type '[String]' has no member 'uppercased'\n    }.uppercased()\n~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for character in message {\n        let char = String(character)\n\
    \        let upperCase = char.uppercased()\n        if char == upperCase {\n \
    \           encoded += char.lowercased()\n        } else {\n            encoded\
    \ += upperCase\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbyswgchk/tmpbyswgchk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6080f51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6080c48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6080c48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6080c477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyswgchk                        0x0000561fa8f40517 <unavailable> + 5399

    5    libc.so.6                          0x00002b608113d460 __libc_start_main +
    245

    6    tmpbyswgchk                        0x0000561fa8f40159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    let letters = Array(message.lowercased())\n\
    \    let encodedLetters = letters.map {\n        if vowels.contains($0) {\n  \
    \          let index = alphabet.firstIndex(of: $0)!\n            return alphabet[index.advanced(by:\
    \ 2)]\n        } else {\n            return String($0).uppercased()\n        }\n\
    \    }\n    return encodedLetters.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppdgn6h6s.swift:19:35: error: value of type 'String.Index' has no\
    \ member 'advanced'\n            return alphabet[index.advanced(by: 2)]\n    \
    \                        ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\",\
    \ \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for\
    \ char in message {\n        if alphabet.contains(char) {\n            let isUpperCase\
    \ = char.isUpperCase\n            let lowerCaseChar = char.lowercased()\n    \
    \        let index = alphabet.firstIndex(of: lowerCaseChar)!\n            var\
    \ letter: Character\n            if index == 25 {\n                letter = alphabet[1]\n\
    \            } else if index == 24 {\n                letter = alphabet[0]\n \
    \           } else {\n                letter = alphabet[index + 2]\n         \
    \   }\n            if isUpperCase {\n                encoded.append(letter.uppercased())\n\
    \            } else {\n                encoded.append(letter)\n            }\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbdbd7dfg.swift:17:36: error: value of type 'Character' has no member\
    \ 'isUpperCase'\n            let isUpperCase = char.isUpperCase\n            \
    \                  ~~~~ ^~~~~~~~~~~\n/tmp/tmpbdbd7dfg.swift:19:49: error: cannot\
    \ convert value of type 'String' to expected argument type 'Character'\n     \
    \       let index = alphabet.firstIndex(of: lowerCaseChar)!\n                \
    \                                ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let lowercasedMessage = message.lowercased()\n\
    \    var result = \"\"\n    for letter in lowercasedMessage {\n        if vowels.contains(String(letter))\
    \ {\n            let newLetterIndex = ((vowels.firstIndex(of: String(letter))!\
    \ + 2) % 5)\n            result += vowels[newLetterIndex]\n        } else {\n\
    \            result += String(letter)\n        }\n    }\n    return result.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp1ztxpvwi/tmp1ztxpvwi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bb9449c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bb9140b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bb9140988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bb913f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ztxpvwi                        0x0000562f5a272897 <unavailable> + 6295

    5    libc.so.6                          0x00002b2bb9635460 __libc_start_main +
    245

    6    tmp1ztxpvwi                        0x0000562f5a2724d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var arr\
    \ = Array(message)\n    var new = String()\n    for char in arr {\n        let\
    \ lower = \"abcdefghijklmnopqrstuvwxyz\"\n        let upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        let index = lower.index(of: char)\n        let index2 = upper.index(of:\
    \ char)\n        if let idx = index {\n            if char == \"a\" {\n      \
    \          new.append(\"c\")\n            } else if char == \"e\" {\n        \
    \        new.append(\"g\")\n            } else if char == \"i\" {\n          \
    \      new.append(\"k\")\n            } else if char == \"o\" {\n            \
    \    new.append(\"q\")\n            } else if char == \"u\" {\n              \
    \  new.append(\"w\")\n            } else {\n                new.append(lower[lower.index(idx,\
    \ offsetBy: 2)])\n            }\n        } else if let idx2 = index2 {\n     \
    \       if char == \"A\" {\n                new.append(\"C\")\n            } else\
    \ if char == \"E\" {\n                new.append(\"G\")\n            } else if\
    \ char == \"I\" {\n                new.append(\"K\")\n            } else if char\
    \ == \"O\" {\n                new.append(\"Q\")\n            } else if char ==\
    \ \"U\" {\n                new.append(\"W\")\n            } else {\n         \
    \       new.append(upper[upper.index(idx2, offsetBy: 2)])\n            }\n   \
    \     } else {\n            new.append(char)\n        }\n    }\n    return new\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpc73cvaws/tmpc73cvaws.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba75bb4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba75b846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba75b846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba75b8457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc73cvaws                        0x0000558069bcd957 <unavailable> + 6487

    5    libc.so.6                          0x00002ba75bd3b460 __libc_start_main +
    245

    6    tmpc73cvaws                        0x0000558069bcd599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = Set(\"aeiou\")\n    let letters = message.lowercased().map({char in\n    \
    \    if vowels.contains(char) {\n            return char.advanced(by: 2)\n   \
    \     } else {\n            return char\n        }\n    })\n    return String(letters).uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpsmn9h5r5.swift:16:25: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'advanced'\n            return char.advanced(by:\
    \ 2)\n                   ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var res:\
    \ [Character] = []\n    let lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n    let\
    \ uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for c in message {\n       \
    \ if lowercase.contains(c) {\n            let index = lowercase.firstIndex(of:\
    \ c)!\n            if index == 25 {\n                res.append(lowercase[lowercase.startIndex])\n\
    \            } else if index == 24 {\n                res.append(lowercase[lowercase.index(after:\
    \ index)])\n            } else {\n                res.append(lowercase[lowercase.index(index,\
    \ offsetBy: 2)])\n            }\n        } else if uppercase.contains(c) {\n \
    \           let index = uppercase.firstIndex(of: c)!\n            if index ==\
    \ 25 {\n                res.append(uppercase[uppercase.startIndex])\n        \
    \    } else if index == 24 {\n                res.append(uppercase[uppercase.index(after:\
    \ index)])\n            } else {\n                res.append(uppercase[uppercase.index(index,\
    \ offsetBy: 2)])\n            }\n        } else {\n            res.append(c)\n\
    \        }\n    }\n    return String(res)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6eyofv5d.swift:19:22: error: referencing operator function '=='\
    \ on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \            if index == 25 {\n                     ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n\
    /tmp/tmp6eyofv5d.swift:21:29: error: referencing operator function '==' on 'BinaryInteger'\
    \ requires that 'String.Index' conform to 'BinaryInteger'\n            } else\
    \ if index == 24 {\n                            ^\nSwift.BinaryInteger:1:11: note:\
    \ where 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmp6eyofv5d.swift:28:22:\
    \ error: referencing operator function '==' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n            if index == 25 {\n                 \
    \    ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmp6eyofv5d.swift:30:29: error: referencing\
    \ operator function '==' on 'BinaryInteger' requires that 'String.Index' conform\
    \ to 'BinaryInteger'\n            } else if index == 24 {\n                  \
    \          ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\n\
    extension BinaryInteger {\n          ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  var encodedMessage\
    \ = \"\"\n  for character in message {\n    encodedMessage += encodeCharacter(character:\
    \ character)\n  }\n  return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpsvnena9s.swift:15:23: error: cannot find 'encodeCharacter' in scope\n\
    \    encodedMessage += encodeCharacter(character: character)\n               \
    \       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    var allLowercased = message.lowercased()\n    for letter in allLowercased\
    \ {\n        encodedMessage.append(swapCase(letter: letter))\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb_h0e7fd.swift:16:31: error: cannot find 'swapCase' in scope\n\
    \        encodedMessage.append(swapCase(letter: letter))\n                   \
    \           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"AEIOUaeiou\"\n    let letters = Array(message)\n    var encoded = [Character]()\n\
    \    for letter in letters {\n        if letter == \" \" {\n            encoded.append(\"\
    \ \")\n        } else if let vowelIndex = vowels.firstIndex(of: letter) {\n  \
    \          let index = vowels.index(vowelIndex, offsetBy: 2)\n            encoded.append(vowels[index])\n\
    \        } else {\n            encoded.append(letter.isUppercase ? letter.lowercased()\
    \ : letter.uppercased())\n        }\n    }\n    return String(encoded)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp91k3n4tb.swift:23:21: error: no exact matches in call to instance\
    \ method 'append'\n            encoded.append(letter.isUppercase ? letter.lowercased()\
    \ : letter.uppercased())\n                    ^\nSwift.Array:7:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable\
    \ public mutating func append<S>(contentsOf newElements: __owned S) where Element\
    \ == S.Element, S : Sequence\n                                    ^\nSwift.RangeReplaceableCollection:5:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where S : Sequence, Self.Element == S.Element\n                         \
    \           ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tvar result\
    \ = \"\"\n\tlet lowerMessage = message.lowercased()\n\tlet messageArray = Array(lowerMessage)\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tlet vowelIndices = [0, 4,\
    \ 8, 14, 20]\n\tlet vowelLetters = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n\tfor\
    \ index in 0..<messageArray.count {\n\t\tif messageArray[index] == \" \" {\n\t\
    \t\tresult += \" \"\n\t\t} else if messageArray[index] == \"z\" {\n\t\t\tresult\
    \ += \"b\"\n\t\t} else if messageArray[index] == \"x\" {\n\t\t\tresult += \"v\"\
    \n\t\t} else if messageArray[index] == \"c\" {\n\t\t\tresult += \"e\"\n\t\t} else\
    \ if messageArray[index] == \"v\" {\n\t\t\tresult += \"x\"\n\t\t} else if messageArray[index]\
    \ == \"b\" {\n\t\t\tresult += \"d\"\n\t\t} else if messageArray[index] == \"n\"\
    \ {\n\t\t\tresult += \"p\"\n\t\t} else if messageArray[index] == \"m\" {\n\t\t\
    \tresult += \"o\"\n\t\t} else if messageArray[index] == \"l\" {\n\t\t\tresult\
    \ += \"n\"\n\t\t} else if messageArray[index] == \"k\" {\n\t\t\tresult += \"m\"\
    \n\t\t} else if messageArray[index] == \"j\" {\n\t\t\tresult += \"l\"\n\t\t} else\
    \ if messageArray[index] == \"h\" {\n\t\t\tresult += \"j\"\n\t\t} else if messageArray[index]\
    \ == \"g\" {\n\t\t\tresult += \"i\"\n\t\t} else if messageArray[index] == \"f\"\
    \ {\n\t\t\tresult += \"h\"\n\t\t} else if messageArray[index] == \"d\" {\n\t\t\
    \tresult += \"f\"\n\t\t} else if messageArray[index] == \"s\" {\n\t\t\tresult\
    \ += \"u\"\n\t\t} else if messageArray[index] == \"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcvo87nc9.swift:52:36: error: unterminated string literal\n    \
    \            } else if messageArray[index] == \"\n                           \
    \                      ^\n/tmp/tmpcvo87nc9.swift:72:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmpcvo87nc9.swift:12:40: note:\
    \ to match this opening '{'\nfunc encode(message: String) -> String {\n      \
    \                                 ^\n/tmp/tmpcvo87nc9.swift:56:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char\
    \ in message {\n        switch char {\n        case \"a\", \"e\", \"i\", \"o\"\
    , \"u\":\n            if let nextIndex = vowels.firstIndex(of: String(char).lowercased())\
    \ {\n                let aheadIndex = nextIndex + 2 > 4 ? 0 : nextIndex + 2\n\
    \                encoded.append(vowels[aheadIndex].uppercased())\n           \
    \ }\n        case \"A\", \"E\", \"I\", \"O\", \"U\":\n            if let nextIndex\
    \ = vowels.firstIndex(of: String(char).lowercased()) {\n                let aheadIndex\
    \ = nextIndex + 2 > 4 ? 0 : nextIndex + 2\n                encoded.append(vowels[aheadIndex])\n\
    \            }\n        default:\n            encoded.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpksn0qm91/tmpksn0qm91.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affe8625c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affe831cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affe831c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affe831b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksn0qm91                        0x0000559f161f2987 <unavailable> + 6535

    5    libc.so.6                          0x00002affe8811460 __libc_start_main +
    245

    6    tmpksn0qm91                        0x0000559f161f25c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let lowerCase = Set(\"aeiou\")\n    let upperCase = Set(\"AEIOU\"\
    )\n    let alphabets = Set(\"abcdefghijklmnopqrstuvwxyz\")\n    let uppercaseAlphabets\
    \ = Set(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    for char in message {\n        if\
    \ lowerCase.contains(char) {\n            var newChar = char\n            var\
    \ index = newChar.asciiValue! - \"a\".asciiValue!\n            index = (index\
    \ + 2) % 26\n            newChar = Character(UnicodeScalar(index + \"a\".asciiValue!)!)\n\
    \            encoded.append(newChar)\n        } else if upperCase.contains(char)\
    \ {\n            var newChar = char\n            var index = newChar.asciiValue!\
    \ - \"A\".asciiValue!\n            index = (index + 2) % 26\n            newChar\
    \ = Character(UnicodeScalar(index + \"A\".asciiValue!)!)\n            encoded.append(newChar)\n\
    \        } else if alphabets.contains(char) {\n            var newChar = char\n\
    \            var index = newChar.asciiValue! - \"a\".asciiValue!\n           \
    \ index = (index + 2) % 26\n            newChar = Character(UnicodeScalar(index\
    \ + \"a\".asciiValue!)!)\n            encoded.append(newChar.uppercased())\n \
    \       } else if uppercaseAlphabets.contains(char) {\n            var newChar\
    \ = char\n            var index = newChar.asciiValue! - \"A\".asciiValue!\n  \
    \          index = (index + 2) % 26\n            newChar = Character(UnicodeScalar(index\
    \ + \"A\".asciiValue!)!)\n            encoded.append(newChar.lowercased())\n \
    \       } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_wulz5iq.swift:21:51: error: value of type 'String' has no member\
    \ 'asciiValue'\n            var index = newChar.asciiValue! - \"a\".asciiValue!\n\
    \                                              ~~~ ^~~~~~~~~~\n/tmp/tmp_wulz5iq.swift:23:59:\
    \ error: value of type 'String' has no member 'asciiValue'\n            newChar\
    \ = Character(UnicodeScalar(index + \"a\".asciiValue!)!)\n                   \
    \                                   ~~~ ^~~~~~~~~~\n/tmp/tmp_wulz5iq.swift:27:51:\
    \ error: value of type 'String' has no member 'asciiValue'\n            var index\
    \ = newChar.asciiValue! - \"A\".asciiValue!\n                                \
    \              ~~~ ^~~~~~~~~~\n/tmp/tmp_wulz5iq.swift:29:59: error: value of type\
    \ 'String' has no member 'asciiValue'\n            newChar = Character(UnicodeScalar(index\
    \ + \"A\".asciiValue!)!)\n                                                   \
    \   ~~~ ^~~~~~~~~~\n/tmp/tmp_wulz5iq.swift:33:51: error: value of type 'String'\
    \ has no member 'asciiValue'\n            var index = newChar.asciiValue! - \"\
    a\".asciiValue!\n                                              ~~~ ^~~~~~~~~~\n\
    /tmp/tmp_wulz5iq.swift:35:59: error: value of type 'String' has no member 'asciiValue'\n\
    \            newChar = Character(UnicodeScalar(index + \"a\".asciiValue!)!)\n\
    \                                                      ~~~ ^~~~~~~~~~\n/tmp/tmp_wulz5iq.swift:39:51:\
    \ error: value of type 'String' has no member 'asciiValue'\n            var index\
    \ = newChar.asciiValue! - \"A\".asciiValue!\n                                \
    \              ~~~ ^~~~~~~~~~\n/tmp/tmp_wulz5iq.swift:41:59: error: value of type\
    \ 'String' has no member 'asciiValue'\n            newChar = Character(UnicodeScalar(index\
    \ + \"A\".asciiValue!)!)\n                                                   \
    \   ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    var encodeMessage = \"\"\n    for char in message {\n     \
    \   if String(char).lowercased() == String(char) {\n            encodeMessage\
    \ += String(char).uppercased()\n        } else {\n            encodeMessage +=\
    \ String(char).lowercased()\n        }\n        if vowels.contains(char) {\n \
    \           if char == \"u\" {\n                encodeMessage.removeLast()\n \
    \               encodeMessage += \"a\"\n            } else {\n               \
    \ var ascii = char.asciiValue!\n                ascii += 2\n                let\
    \ newChar = Character(UnicodeScalar(ascii)!)\n                encodeMessage.removeLast()\n\
    \                encodeMessage += String(newChar)\n            }\n        }\n\
    \    }\n    return encodeMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0epht2tb.swift:28:61: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                let newChar = Character(UnicodeScalar(ascii)!)\n\
    \                                        ~~~~~~~~~~~~~~~~~~~~^\n             \
    \                                               \n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let lowerVowels\
    \ = \"aeiou\"\n    let lowerRange = Character(\"a\").asciiValue!...Character(\"\
    z\").asciiValue!\n    let upperRange = Character(\"A\").asciiValue!...Character(\"\
    Z\").asciiValue!\n    var encodedMessage = \"\"\n    for letter in message {\n\
    \        let asciiValue = letter.asciiValue!\n        if lowerRange.contains(asciiValue)\
    \ {\n            if let vowelIndex = lowerVowels.firstIndex(of: letter) {\n  \
    \              encodedMessage.append(lowerVowels[vowelIndex.advanced(by: 2)])\n\
    \            } else {\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n            }\n        } else if upperRange.contains(asciiValue) {\n\
    \            if let vowelIndex = lowerVowels.firstIndex(of: Character(UnicodeScalar(asciiValue\
    \ + 32)!)) {\n                encodedMessage.append(Character(UnicodeScalar(lowerVowels[vowelIndex.advanced(by:\
    \ 2)].asciiValue! - 32)!))\n            } else {\n                encodedMessage.append(Character(UnicodeScalar(asciiValue)!))\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn5zwxcn6.swift:21:62: error: value of type 'String.Index' has no\
    \ member 'advanced'\n                encodedMessage.append(lowerVowels[vowelIndex.advanced(by:\
    \ 2)])\n                                                  ~~~~~~~~~~ ^~~~~~~~\n\
    /tmp/tmpn5zwxcn6.swift:23:79: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \  \n/tmp/tmpn5zwxcn6.swift:26:100: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            if let vowelIndex =\
    \ lowerVowels.firstIndex(of: Character(UnicodeScalar(asciiValue + 32)!)) {\n \
    \                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \                       \n/tmp/tmpn5zwxcn6.swift:27:120: error: cannot force unwrap\
    \ value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        \
    \        encodedMessage.append(Character(UnicodeScalar(lowerVowels[vowelIndex.advanced(by:\
    \ 2)].asciiValue! - 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \                                           \n/tmp/tmpn5zwxcn6.swift:29:74: error:\
    \ cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \                encodedMessage.append(Character(UnicodeScalar(asciiValue)!))\n\
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let englishAlphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var mutableMessage = message\n\
    \    var encodedMessage = \"\"\n    for letter in mutableMessage {\n        if\
    \ let index = englishAlphabet.firstIndex(of: letter) {\n            if vowels.contains(letter)\
    \ {\n                encodedMessage.append(englishAlphabet[(index + 2) % englishAlphabet.count])\n\
    \            } else {\n                encodedMessage.append(englishAlphabet[(index\
    \ + englishAlphabet.count) % englishAlphabet.count])\n            }\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmptyutgvlp/tmptyutgvlp.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b306c49cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b306c193b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b306c193988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b306c1927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptyutgvlp                        0x00005596522f9877 <unavailable> + 6263

    5    libc.so.6                          0x00002b306c688460 __libc_start_main +
    245

    6    tmptyutgvlp                        0x00005596522f94b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  return \"\
    \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(encode(message: \"TEST\") ==\
    \ \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphm7h5oz7/tmphm7h5oz7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a8962bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a89322b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a89322988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a893217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphm7h5oz7                        0x0000557f518dc307 <unavailable> + 4871

    5    libc.so.6                          0x00002b8a89817460 __libc_start_main +
    245

    6    tmphm7h5oz7                        0x0000557f518dbf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let message = message.lowercased()\n\
    \    var encodedMessage = \"\"\n    for character in message {\n        if vowels.contains(String(character))\
    \ {\n            encodedMessage += vowelDictionary[String(character)]!\n     \
    \   } else {\n            encodedMessage += String(character)\n        }\n   \
    \ }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmqu6ly61.swift:18:31: error: cannot find 'vowelDictionary' in scope\n\
    \            encodedMessage += vowelDictionary[String(character)]!\n         \
    \                     ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // Your\
    \ code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpntrhrhu9/tmpntrhrhu9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb69478c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb6916fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb6916f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb6916e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntrhrhu9                        0x0000556a43a00307 <unavailable> + 4871

    5    libc.so.6                          0x00002aeb69664460 __libc_start_main +
    245

    6    tmpntrhrhu9                        0x0000556a439fff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  var newMessage\
    \ = \"\"\n  for letter in message {\n    switch letter {\n    case \"a\", \"A\"\
    :\n      newMessage += \"C\"\n    case \"e\", \"E\":\n      newMessage += \"G\"\
    \n    case \"i\", \"I\":\n      newMessage += \"K\"\n    case \"o\", \"O\":\n\
    \      newMessage += \"M\"\n    case \"u\", \"U\":\n      newMessage += \"Q\"\n\
    \    case \" \":\n      newMessage += \" \"\n    default:\n      newMessage +=\
    \ String(letter).uppercased()\n    }\n  }\n  return newMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpvzj89rxu/tmpvzj89rxu.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af923feac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af923ce1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af923ce1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af923ce07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvzj89rxu                        0x00005555bd1125a7 <unavailable> + 5543

    5    libc.so.6                          0x00002af9241d6460 __libc_start_main +
    245

    6    tmpvzj89rxu                        0x00005555bd1121e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // TODO:\
    \ Your solution here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp7w33x_vp/tmp7w33x_vp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e3baf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3b7edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e3b7ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e3b7ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w33x_vp                        0x0000561adf482307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6e3bce2460 __libc_start_main +
    245

    6    tmp7w33x_vp                        0x0000561adf481f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    //    let\
    \ input = message.uppercased()\n    //    var output = \"\"\n    //    for char\
    \ in input {\n    //        let unicode = char.unicodeScalars.first!.value\n \
    \   //        if unicode >= 65 && unicode <= 90 {\n    //            let rotatedUnicode\
    \ = unicode < 90 ? unicode + 1 : 65\n    //            let rotatedChar = Character(UnicodeScalar(rotatedUnicode)!)\n\
    \    //            output.append(rotatedChar)\n    //        } else {\n    //\
    \            output.append(char)\n    //        }\n    //    }\n    //    return\
    \ output\n    // YOUR CODE HERE\n    let vowels: [Character] = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    var output = \"\"\n    for letter in message {\n \
    \       if vowels.contains(letter) {\n            if letter == \"u\" {\n     \
    \           output.append(\"a\")\n            } else {\n                output.append(vowels[vowels.firstIndex(of:\
    \ letter)! + 1])\n            }\n        } else {\n            output.append(letter)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpvegeod9d/tmpvegeod9d.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1ed5cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1ed2c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1ed2c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1ed2c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvegeod9d                        0x0000561edf47d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ac1ed7ba460 __libc_start_main +
    245

    6    tmpvegeod9d                        0x0000561edf47d519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for c in message {\n        switch c {\n        case \"a\"...\"\
    z\":\n            let newLetter = c.next(2)\n            encodedMessage.append(vowels.contains(newLetter)\
    \ ? newLetter.next(2) : newLetter)\n        case \"A\"...\"Z\":\n            let\
    \ newLetter = c.next(2).uppercased()\n            encodedMessage.append(vowels.contains(newLetter.lowercased().first!)\
    \ ? newLetter.next(2) : newLetter)\n        default:\n            encodedMessage.append(c)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzs5wmbzf.swift:18:31: error: value of type 'Character' has no member\
    \ 'next'\n            let newLetter = c.next(2)\n                            ~\
    \ ^~~~\n/tmp/tmpzs5wmbzf.swift:21:31: error: value of type 'Character' has no\
    \ member 'next'\n            let newLetter = c.next(2).uppercased()\n        \
    \                    ~ ^~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var newString\
    \ = \"\"\n    for letter in message {\n        if letter.isUppercase {\n     \
    \       newString.append(letter.lowercased())\n        } else {\n            newString.append(letter.uppercased())\n\
    \        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4t_ifskv/tmp4t_ifskv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab102a79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab102770b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab102770988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab10276f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4t_ifskv                        0x00005583091ef517 <unavailable> + 5399

    5    libc.so.6                          0x00002ab102c65460 __libc_start_main +
    245

    6    tmp4t_ifskv                        0x00005583091ef159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let letters\
    \ = Array(message)\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ var result = \"\"\n    for letter in letters {\n        if let index = vowels.firstIndex(of:\
    \ letter.lowercased()) {\n            result += String(vowels[(index + 2) % vowels.count]).uppercased()\n\
    \        } else {\n            result += String(letter).uppercased()\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmplpm_cgmq/tmplpm_cgmq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9aec34ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aec045b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9aec045988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9aec0447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplpm_cgmq                        0x0000555ea2981aa7 <unavailable> + 6823

    5    libc.so.6                          0x00002b9aec53a460 __libc_start_main +
    245

    6    tmplpm_cgmq                        0x0000555ea29816e9 <unavailable> + 5865

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let encodedMessage\
    \ = message.map {\n        switch $0 {\n        case \"A\", \"a\":\n         \
    \   return \"C\"\n        case \"E\", \"e\":\n            return \"G\"\n     \
    \   case \"I\", \"i\":\n            return \"K\"\n        case \"O\", \"o\":\n\
    \            return \"Q\"\n        case \"U\", \"u\":\n            return \"S\"\
    \n        case \"Y\", \"y\":\n            return \"A\"\n        default:\n   \
    \         return String($0).lowercased() == String($0) ? String($0).uppercased()\
    \ : String($0).lowercased()\n        }\n    }\n    return encodedMessage.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp52vpjf6b/tmp52vpjf6b.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b057f371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b057f068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b057f068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b057f0677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52vpjf6b                        0x000055f5de4fc677 <unavailable> + 5751

    5    libc.so.6                          0x00002b057f55d460 __libc_start_main +
    245

    6    tmp52vpjf6b                        0x000055f5de4fc2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.map{encoder($0)}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpm3qb2dng.swift:13:24: error: cannot find 'encoder' in scope\n \
    \   return message.map{encoder($0)}\n                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // FIXME\n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpn17_wmac/tmpn17_wmac.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0490039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b048fd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b048fd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b048fd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17_wmac                        0x000056505a251307 <unavailable> + 4871

    5    libc.so.6                          0x00002b0490225460 __libc_start_main +
    245

    6    tmpn17_wmac                        0x000056505a250f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let vowels = \"AEIOU\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let uLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for char in message {\n\
    \        let index = letters.index(of: char)\n        let uIndex = uLetters.index(of:\
    \ char)\n        if let index = index {\n            if let uIndex = uIndex {\n\
    \                result.append(uLetters[letters.index(after: index)])\n      \
    \      } else {\n                result.append(letters[letters.index(after: index)])\n\
    \            }\n        } else {\n            result.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpof25ekyt/tmpof25ekyt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad73c9cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad73c6c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad73c6c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad73c6c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpof25ekyt                        0x0000557995ac75e7 <unavailable> + 5607

    5    libc.so.6                          0x00002ad73cbba460 __libc_start_main +
    245

    6    tmpof25ekyt                        0x0000557995ac7229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = message\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters\
    \ = Array(message)\n    for i in 0...letters.count - 1 {\n        if vowels.contains(String(letters[i]).lowercased())\
    \ {\n            encoded = encoded.replacingOccurrences(of: String(letters[i]),\
    \ with: String(letters[i + 2]))\n        }\n    }\n    encoded = encoded.lowercased()\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptit5gwuu.swift:18:31: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n            encoded = encoded.replacingOccurrences(of:\
    \ String(letters[i]), with: String(letters[i + 2]))\n                      ~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    var vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let uppercaseAlphabet:\
    \ [Character] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"\
    , \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    for letter in message {\n   \
    \     let isUppercase = uppercaseAlphabet.contains(letter)\n        if vowels.contains(letter)\
    \ {\n            var index = alphabet.firstIndex(of: letter)!\n            index\
    \ += 2\n            if isUppercase {\n                encodedMessage.append(uppercaseAlphabet[index])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else if uppercaseAlphabet.contains(letter) {\n     \
    \       encodedMessage.append(alphabet[uppercaseAlphabet.firstIndex(of: letter)!])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp57vdkn1g/tmp57vdkn1g.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fbf3e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fbf0d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fbf0d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fbf0d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57vdkn1g                        0x000056225ec34827 <unavailable> + 6183

    5    libc.so.6                          0x00002b9fbf5ce460 __libc_start_main +
    245

    6    tmp57vdkn1g                        0x000056225ec34469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.uppercased().map {\n        switch $0 {\n        case \"A\":\n     \
    \       return \"C\"\n        case \"E\":\n            return \"G\"\n        case\
    \ \"I\":\n            return \"K\"\n        case \"O\":\n            return \"\
    Q\"\n        case \"U\":\n            return \"Y\"\n        default:\n       \
    \     return $0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp50hz0gn8.swift:13:33: error: no 'map' candidates produce the expected\
    \ contextual result type 'String'\n    return message.uppercased().map {\n   \
    \                             ^\nSwift.Collection:2:28: note: 'map' produces '[String]',\
    \ not the expected contextual result type 'String'\n    @inlinable public func\
    \ map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n          \
    \                 ^\nSwift.Sequence:2:28: note: 'map' produces '[String]', not\
    \ the expected contextual result type 'String'\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                   \
    \        ^\n"
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tlet vowels\
    \ = \"aeiou\"\n\tlet alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n\tvar encodedString\
    \ = \"\"\n\t\n\tfor char in message {\n\t\tguard let charIndex = alphabet.firstIndex(of:\
    \ char.lowercased()) else {\n\t\t\tencodedString.append(char)\n\t\t\tcontinue\n\
    \t\t}\n\t\tlet newCharIndex = charIndex + 2\n\t\tlet newChar = (newCharIndex >=\
    \ alphabet.count) ? alphabet[newCharIndex - alphabet.count] : alphabet[newCharIndex]\n\
    \t\tlet newCharToAppend = vowels.contains(char.lowercased()) ? newChar : char\n\
    \t\tencodedString.append(newCharToAppend)\n\t}\n\treturn encodedString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwdg1uz93.swift:18:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n             \
    \   guard let charIndex = alphabet.firstIndex(of: char.lowercased()) else {\n\
    \                                                                   ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        switch char {\n        case \"a\"\
    :\n            encodedMessage += \"c\"\n        case \"e\":\n            encodedMessage\
    \ += \"g\"\n        case \"i\":\n            encodedMessage += \"k\"\n       \
    \ case \"o\":\n            encodedMessage += \"q\"\n        case \"u\":\n    \
    \        encodedMessage += \"y\"\n        case \"A\":\n            encodedMessage\
    \ += \"C\"\n        case \"E\":\n            encodedMessage += \"G\"\n       \
    \ case \"I\":\n            encodedMessage += \"K\"\n        case \"O\":\n    \
    \        encodedMessage += \"Q\"\n        case \"U\":\n            encodedMessage\
    \ += \"Y\"\n        default:\n            encodedMessage += String(char).uppercased()\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphjdj2t0t/tmphjdj2t0t.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b078ca13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b078c70ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b078c70a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b078c7097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphjdj2t0t                        0x0000556019d195a7 <unavailable> + 5543

    5    libc.so.6                          0x00002b078cbff460 __libc_start_main +
    245

    6    tmphjdj2t0t                        0x0000556019d191e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let englishAlphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let\
    \ twoLetterAhead: [Character: Character] = {\n        var dictionary = [Character:\
    \ Character]()\n        for (index, letter) in englishAlphabet.enumerated() {\n\
    \            let validIndices = englishAlphabet.indices\n            if let next\
    \ = validIndices.contains(index + 2) ? englishAlphabet[index + 2] : englishAlphabet.first\
    \ {\n                dictionary[letter] = next\n            }\n        }\n   \
    \     return dictionary\n    }()\n    \n    let encoded = message.map { char ->\
    \ Character in\n        if let index = englishAlphabet.firstIndex(of: char) {\n\
    \            let letter = englishAlphabet[index]\n            return vowels.contains(letter)\
    \ ? twoLetterAhead[letter]! : letter\n        }\n        return char\n    }\n\
    \    return String(encoded)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8n_3fx6v.swift:19:55: error: cannot convert value of type 'Int'\
    \ to expected argument type 'DefaultIndices<String>.Element' (aka 'String.Index')\n\
    \            if let next = validIndices.contains(index + 2) ? englishAlphabet[index\
    \ + 2] : englishAlphabet.first {\n                                           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\t\n\tvar encodedMessage\
    \ = \"\"\n\t\n\tfor i in message.characters {\n\t\t\n\t\tlet letter = String(i)\n\
    \t\tlet lowerCase = letter.lowercased()\n\t\tlet upperCase = letter.uppercased()\n\
    \t\t\n\t\tswitch lowerCase {\n\t\tcase \"a\":\n\t\t\tencodedMessage += upperCase\
    \ == letter ? \"C\" : \"c\"\n\t\tcase \"e\":\n\t\t\tencodedMessage += upperCase\
    \ == letter ? \"G\" : \"g\"\n\t\tcase \"i\":\n\t\t\tencodedMessage += upperCase\
    \ == letter ? \"K\" : \"k\"\n\t\tcase \"o\":\n\t\t\tencodedMessage += upperCase\
    \ == letter ? \"O\" : \"o\"\n\t\tcase \"u\":\n\t\t\tencodedMessage += upperCase\
    \ == letter ? \"S\" : \"s\"\n\t\tdefault:\n\t\t\tencodedMessage += lowerCase ==\
    \ letter ? upperCase : lowerCase\n\t\t}\n\t}\n\t\n\treturn encodedMessage\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp20w45a79.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        for i in message.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let asciiCode = char.asciiValue!\n\
    \        if asciiCode > 64 && asciiCode < 91 {\n            encodedMessage.append(String(Character(UnicodeScalar(asciiCode\
    \ + 32)!)))\n        } else if asciiCode > 96 && asciiCode < 123 {\n         \
    \   encodedMessage.append(String(Character(UnicodeScalar(asciiCode - 32)!)))\n\
    \        } else {\n            encodedMessage.append(String(char))\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpapclwbgw.swift:17:81: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encodedMessage.append(String(Character(UnicodeScalar(asciiCode\
    \ + 32)!)))\n                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \    \n/tmp/tmpapclwbgw.swift:19:81: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encodedMessage.append(String(Character(UnicodeScalar(asciiCode\
    \ - 32)!)))\n                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \    \n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if letter.isLetter\
    \ {\n            let lowercasedLetter = letter.lowercased()\n            if vowels.contains(lowercasedLetter)\
    \ {\n                let index = alphabet.index(of: lowercasedLetter)!\n     \
    \           let nextIndex = index.advanced(by: 2)\n                encodedMessage.append(alphabet[nextIndex])\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpiwjtg13a.swift:20:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n             \
    \   let index = alphabet.index(of: lowercasedLetter)!\n                      \
    \                         ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"AEIOUaeiou\"\n    var encoded = \"\"\n    for character in message {\n \
    \       if vowels.contains(character) {\n            var newChar = Array(vowels)[(vowels.firstIndex(of:\
    \ character)! + 2) % vowels.count]\n            newChar = newChar.isUppercase\
    \ ? newChar.lowercased() : newChar.uppercased()\n            encoded.append(newChar)\n\
    \        } else {\n            encoded.append(character.isUppercase ? character.lowercased()\
    \ : character.uppercased())\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqwyfhc_d.swift:17:74: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            var newChar = Array(vowels)[(vowels.firstIndex(of:\
    \ character)! + 2) % vowels.count]\n                                         \
    \                                ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let map = [\"a\": \"c\", \"e\": \"\
    g\", \"i\": \"k\", \"o\": \"q\", \"u\": \"y\"]\n    var str: String = \"\"\n \
    \   for i in message {\n        if vowels.contains(String(i).lowercased()) {\n\
    \            str += map[String(i).lowercased()] ?? \"\"\n        } else {\n  \
    \          str += String(i)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpydjuuhqf/tmpydjuuhqf.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2adb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2aaafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2aaaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2aaae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpydjuuhqf                        0x000055cd37bb9797 <unavailable> + 6039

    5    libc.so.6                          0x00002aee2afa4460 __libc_start_main +
    245

    6    tmpydjuuhqf                        0x000055cd37bb93d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        encodedMessage += encode(char: char)\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpr6j2463f.swift:15:33: error: incorrect argument label in call (have\
    \ 'char:', expected 'message:')\n        encodedMessage += encode(char: char)\n\
    \                                ^~~~~\n                                 message\n\
    /tmp/tmpr6j2463f.swift:15:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        encodedMessage += encode(char: char)\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let message = message.lowercased()\n \
    \   var result = \"\"\n    for char in message {\n        if alphabet.contains(char)\
    \ {\n            if alphabet.firstIndex(of: char)! == 24 {\n                result.append(alphabet[0])\n\
    \            } else if alphabet.firstIndex(of: char)! == 25 {\n              \
    \  result.append(alphabet[1])\n            } else {\n                result.append(alphabet[alphabet.firstIndex(of:\
    \ char)! + 2])\n            }\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjcr1fu3a.swift:18:47: error: referencing operator function '=='\
    \ on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \            if alphabet.firstIndex(of: char)! == 24 {\n                     \
    \                         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\n\
    extension BinaryInteger {\n          ^\n/tmp/tmpjcr1fu3a.swift:19:31: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                result.append(alphabet[0])\n                              ^~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjcr1fu3a.swift:20:54:\
    \ error: referencing operator function '==' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n            } else if alphabet.firstIndex(of: char)!\
    \ == 25 {\n                                                     ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n\
    /tmp/tmpjcr1fu3a.swift:21:31: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n                result.append(alphabet[1])\n\
    \                              ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjcr1fu3a.swift:23:69: error: cannot\
    \ convert value of type 'String.Index' to expected argument type 'Int'\n     \
    \           result.append(alphabet[alphabet.firstIndex(of: char)! + 2])\n    \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let mapping = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for letter in message {\n        if let index = mapping.firstIndex(of:\
    \ letter.lowercased()) {\n            encoded.append(mapping[index])\n       \
    \ } else {\n            encoded.append(letter)\n        }\n        if let index\
    \ = vowels.firstIndex(of: letter.lowercased()) {\n            encoded.append(vowels[index])\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvzc6gfa8.swift:17:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = mapping.firstIndex(of: letter.lowercased()) {\n                    \
    \                                 ^\n/tmp/tmpvzc6gfa8.swift:22:53: error: cannot\
    \ convert value of type 'String' to expected argument type 'String.Element' (aka\
    \ 'Character')\n        if let index = vowels.firstIndex(of: letter.lowercased())\
    \ {\n                                                    ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tvar encodedMessage\
    \ = \"\"\n\tlet vowels = CharacterSet(charactersIn: \"aeiou\")\n\t\n\tfor letter\
    \ in message {\n\t\tvar newLetter = letter\n\t\t// If character is a lowercase\
    \ vowel\n\t\tif letter.lowercased() == letter, vowels.contains(letter.unicodeScalars.first!)\
    \ {\n\t\t\tnewLetter = letter.unicodeScalars.first!.next(amount: 2)\n\t\t}\n\t\
    \t// If character is a uppercase vowel\n\t\telse if letter.uppercased() == letter,\
    \ vowels.contains(letter.unicodeScalars.first!) {\n\t\t\tnewLetter = letter.unicodeScalars.first!.next(amount:\
    \ 2).uppercased()\n\t\t}\n\t\t// If character is a letter\n\t\telse if letter.unicodeScalars.first!.isLetter\
    \ {\n\t\t\tnewLetter = letter.unicodeScalars.first!.toggleCase()\n\t\t}\n\t\t\n\
    \t\tencodedMessage.append(String(newLetter))\n\t}\n\t\n\treturn encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp74ujdzzz.swift:14:15: error: cannot find 'CharacterSet' in scope\n\
    \        let vowels = CharacterSet(charactersIn: \"aeiou\")\n                \
    \     ^~~~~~~~~~~~\n/tmp/tmp74ujdzzz.swift:19:26: error: binary operator '=='\
    \ cannot be applied to operands of type 'String' and 'Character'\n           \
    \     if letter.lowercased() == letter, vowels.contains(letter.unicodeScalars.first!)\
    \ {\n                   ~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~\n/tmp/tmp74ujdzzz.swift:19:26:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n                if letter.lowercased()\
    \ == letter, vowels.contains(letter.unicodeScalars.first!) {\n               \
    \                        ^\n/tmp/tmp74ujdzzz.swift:20:45: error: value of type\
    \ 'Unicode.Scalar' has no member 'next'\n                        newLetter = letter.unicodeScalars.first!.next(amount:\
    \ 2)\n                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n\
    /tmp/tmp74ujdzzz.swift:23:31: error: binary operator '==' cannot be applied to\
    \ operands of type 'String' and 'Character'\n                else if letter.uppercased()\
    \ == letter, vowels.contains(letter.unicodeScalars.first!) {\n               \
    \         ~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~\n/tmp/tmp74ujdzzz.swift:23:31: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n                else if letter.uppercased() == letter, vowels.contains(letter.unicodeScalars.first!)\
    \ {\n                                            ^\n/tmp/tmp74ujdzzz.swift:24:45:\
    \ error: value of type 'Unicode.Scalar' has no member 'next'\n               \
    \         newLetter = letter.unicodeScalars.first!.next(amount: 2).uppercased()\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n/tmp/tmp74ujdzzz.swift:27:40:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLetter'\n           \
    \     else if letter.unicodeScalars.first!.isLetter {\n                      \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp74ujdzzz.swift:28:45: error:\
    \ val"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var vowels\
    \ = \"aeiou\"\n    var encoded = \"\"\n    for char in message {\n        // first,\
    \ check if it's a vowel\n        if vowels.contains(char) {\n            if char\
    \ == \"u\" {\n                encoded.append(\"a\")\n            } else {\n  \
    \              encoded.append(vowels[vowels.index(vowels.firstIndex(of: char)!,\
    \ offsetBy: 2)])\n            }\n        } else {\n            // then check case\n\
    \            if char.isUppercase {\n                encoded.append(char.lowercased())\n\
    \            } else {\n                encoded.append(char.uppercased())\n   \
    \         }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp_f373xvt/tmp_f373xvt.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7e7ce0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7e79d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7e79d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7e79d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f373xvt                        0x00005565a2bbc967 <unavailable> + 6503

    5    libc.so.6                          0x00002ba7e7ecc460 __libc_start_main +
    245

    6    tmp_f373xvt                        0x00005565a2bbc5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\".characters)\n    var encodedMessage =\
    \ \"\"\n    for character in message.characters {\n        if let characterIndex\
    \ = letters.index(of: character) {\n            let encodedCharacter = letters[(characterIndex\
    \ + 2) % letters.count]\n            encodedMessage.append(encodedCharacter)\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbd4m1b09.swift:14:67: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    .characters)\n                                                               \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpbd4m1b09.swift:16:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for character\
    \ in message.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpbd4m1b09.swift:17:41: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n        if let characterIndex =\
    \ letters.index(of: character) {\n                                        ^\n\
    /tmp/tmpbd4m1b09.swift:17:41: note: use 'firstIndex(of:)' instead\n        if\
    \ let characterIndex = letters.index(of: character) {\n                      \
    \                  ^~~~~\n                                        firstIndex\n\
    /tmp/tmpbd4m1b09.swift:13:9: warning: immutable value 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = \"abcdefghijklmnopqrstuvwxyz\".characters.map{$0}\n    let alphabetUpper:\
    \ [Character] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".characters.map{$0}\n    var encodedMessage\
    \ = \"\"\n    for char in message.characters {\n        if alphabet.contains(char)\
    \ {\n            encodedMessage.append(alphabetUpper[(alphabet.index(of: char)!\
    \ + 2) % 26])\n        } else if alphabetUpper.contains(char) {\n            encodedMessage.append(alphabet[(alphabetUpper.index(of:\
    \ char)! + 2) % 26])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw5p552zk.swift:14:62: error: 'characters' is unavailable: Please\
    \ use String directly\n    let alphabet: [Character] = \"abcdefghijklmnopqrstuvwxyz\"\
    .characters.map{$0}\n                                                        \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpw5p552zk.swift:15:67:\
    \ error: 'characters' is unavailable: Please use String directly\n    let alphabetUpper:\
    \ [Character] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".characters.map{$0}\n          \
    \                                                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpw5p552zk.swift:17:25: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in message.characters\
    \ {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw5p552zk.swift:19:59: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            encodedMessage.append(alphabetUpper[(alphabet.index(of:\
    \ char)! + 2) % 26])\n                                                       \
    \   ^\n/tmp/tmpw5p552zk.swift:19:59: note: use 'firstIndex(of:)' instead\n   \
    \         encodedMessage.append(alphabetUpper[(alphabet.index(of: char)! + 2)\
    \ % 26])\n                                                          ^~~~~\n  \
    \                                                        firstIndex\n/tmp/tmpw5p552zk.swift:21:59:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    encodedMessage.append(alphabet[(alphabetUpper.index(of: char)! + 2) % 26])\n\
    \                                                          ^\n/tmp/tmpw5p552zk.swift:21:59:\
    \ note: use 'firstIndex(of:)' instead\n            encodedMessage.append(alphabet[(alphabetUpper.index(of:\
    \ char)! + 2) % 26])\n                                                       \
    \   ^~~~~\n          "
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let lowercaseLetters\
    \ = CharacterSet.lowercaseLetters\n    let uppercaseLetters = CharacterSet.uppercaseLetters\n\
    \    let vowels = CharacterSet(charactersIn: \"aeiou\")\n    var newString = \"\
    \"\n    for letter in message.characters {\n        if letter.isIn(set: vowels)\
    \ {\n            newString.append(letter.incrementBy(2))\n        } else if letter.isIn(set:\
    \ lowercaseLetters) {\n            newString.append(letter.isIn(set: vowels) ?\
    \ letter.incrementBy(2) : letter.uppercased())\n        } else if letter.isIn(set:\
    \ uppercaseLetters) {\n            newString.append(letter.isIn(set: vowels) ?\
    \ letter.incrementBy(2) : letter.lowercased())\n        } else {\n           \
    \ newString.append(letter)\n        }\n    }\n    return newString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmps9pjrmv_.swift:13:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lowercaseLetters = CharacterSet.lowercaseLetters\n                  \
    \         ^~~~~~~~~~~~\n/tmp/tmps9pjrmv_.swift:14:28: error: cannot find 'CharacterSet'\
    \ in scope\n    let uppercaseLetters = CharacterSet.uppercaseLetters\n       \
    \                    ^~~~~~~~~~~~\n/tmp/tmps9pjrmv_.swift:15:18: error: cannot\
    \ find 'CharacterSet' in scope\n    let vowels = CharacterSet(charactersIn: \"\
    aeiou\")\n                 ^~~~~~~~~~~~\n/tmp/tmps9pjrmv_.swift:17:27: error:\
    \ 'characters' is unavailable: Please use String directly\n    for letter in message.characters\
    \ {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps9pjrmv_.swift:18:19: error: value of type 'Character'\
    \ has no member 'isIn'\n        if letter.isIn(set: vowels) {\n           ~~~~~~\
    \ ^~~~\n/tmp/tmps9pjrmv_.swift:19:37: error: value of type 'Character' has no\
    \ member 'incrementBy'\n            newString.append(letter.incrementBy(2))\n\
    \                             ~~~~~~ ^~~~~~~~~~~\n/tmp/tmps9pjrmv_.swift:20:26:\
    \ error: value of type 'Character' has no member 'isIn'\n        } else if letter.isIn(set:\
    \ lowercaseLetters) {\n                  ~~~~~~ ^~~~\n/tmp/tmps9pjrmv_.swift:21:37:\
    \ error: value of type 'Character' has no member 'isIn'\n            newString.append(letter.isIn(set:\
    \ vowels) ? letter.incrementBy(2) : letter.uppercased())\n                   \
    \          ~~~~~~ ^~~~\n/tmp/tmps9pjrmv_.swift:21:64: error: value of type 'Character'\
    \ has no member 'incrementBy'\n            newString.append(letter.isIn(set: vowels)\
    \ ? letter.incrementBy(2) : letter.uppercased())\n                           \
    \                             ~~~~~~ ^~~~~~~~~~~\n/tmp/tmps9pjrmv_.swift:22:26:\
    \ error: value of type 'Character' has no member 'isIn'\n        } else if letter.isIn(set:\
    \ uppercaseLetters) {\n                  ~~~~~~ ^~~~\n/tmp/tmps9pjrmv_.swift:23:37:\
    \ error: value of type 'Character' has no member 'isIn'\n    "
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tlet vowels\
    \ = \"aeiou\"\n\tvar new_message = \"\"\n\tfor letter in message {\n\t\tif vowels.contains(letter)\
    \ {\n\t\t\tlet index = vowels.firstIndex(of: letter)!\n\t\t\tnew_message.append(vowels[vowels.index(index,\
    \ offsetBy: 2)])\n\t\t} else {\n\t\t\tnew_message.append(letter)\n\t\t}\n\t}\n\
    \treturn new_message.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp9v6zfkkj/tmp9v6zfkkj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0514fd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0514ccbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0514ccb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0514cca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9v6zfkkj                        0x000055bed5f4f777 <unavailable> + 6007

    5    libc.so.6                          0x00002b05151c0460 __libc_start_main +
    245

    6    tmp9v6zfkkj                        0x000055bed5f4f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.enumerated().map { (index, item) -> String in\n        let englishAlphabet\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        let englishAlphabetLower = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var output = \"\"\n        if englishAlphabet.contains(item) {\n   \
    \         output = String(englishAlphabet[englishAlphabet.index(englishAlphabet.startIndex,\
    \ offsetBy: (englishAlphabet.distance(from: englishAlphabet.startIndex, to: englishAlphabet.firstIndex(of:\
    \ item)!)) + 2) % englishAlphabet.count])\n        } else if englishAlphabetLower.contains(item)\
    \ {\n            output = String(englishAlphabetLower[englishAlphabetLower.index(englishAlphabetLower.startIndex,\
    \ offsetBy: (englishAlphabetLower.distance(from: englishAlphabetLower.startIndex,\
    \ to: englishAlphabetLower.firstIndex(of: item)!)) + 2) % englishAlphabetLower.count])\n\
    \        } else {\n            output = String(item)\n        }\n        return\
    \ output\n    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqdld0r_q.swift:18:61: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            output = String(englishAlphabet[englishAlphabet.index(englishAlphabet.startIndex,\
    \ offsetBy: (englishAlphabet.distance(from: englishAlphabet.startIndex, to: englishAlphabet.firstIndex(of:\
    \ item)!)) + 2) % englishAlphabet.count])\n                                  \
    \                          ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    ///\n \
    \   /// You can \"compose\" functions in Swift, just like in math:\n    ///\n\
    \    ///     f(g(x)) = f(x) <- g(x)\n    ///\n    return lowercase(message: message)\n\
    \        .map { swapCase(character: $0) }\n        .map { swapVowel(character:\
    \ $0) }\n        .joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpv_z_o3fb.swift:18:12: error: cannot find 'lowercase' in scope\n\
    \    return lowercase(message: message)\n           ^~~~~~~~~\n/tmp/tmpv_z_o3fb.swift:19:16:\
    \ error: cannot find 'swapCase' in scope\n        .map { swapCase(character: $0)\
    \ }\n               ^~~~~~~~\n/tmp/tmpv_z_o3fb.swift:20:16: error: cannot find\
    \ 'swapVowel' in scope\n        .map { swapVowel(character: $0) }\n          \
    \     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var newMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(String(char).lowercased()) {\n    \
    \        newMessage += String(char).next2()\n        } else {\n            newMessage\
    \ += String(char).swapCase()\n        }\n    }\n    return newMessage\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmps9fxais7.swift:17:40: error: value of type 'String' has no member\
    \ 'next2'\n            newMessage += String(char).next2()\n                  \
    \        ~~~~~~~~~~~~ ^~~~~\n/tmp/tmps9fxais7.swift:19:40: error: value of type\
    \ 'String' has no member 'swapCase'\n            newMessage += String(char).swapCase()\n\
    \                          ~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfxppth69/tmpfxppth69.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8e705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8e3fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8e3fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8e3fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxppth69                        0x0000555e977b0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b4e8e8f1460 __libc_start_main +
    245

    6    tmpfxppth69                        0x0000555e977aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    for ch in message {\n        let ascii = ch.asciiValue\n        if let\
    \ ascii = ascii {\n            let asciiValue = ascii + 2\n            let nextCharacter\
    \ = Character(UnicodeScalar(asciiValue)!)\n            encodedMessage.append(vowels.contains(ch)\
    \ ? nextCharacter : ch)\n        }\n    }\n    return encodedMessage\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph0ooz2nn.swift:19:68: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let nextCharacter =\
    \ Character(UnicodeScalar(asciiValue)!)\n                                    \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~^\n                                          \
    \                         \n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let newMessage = message.lowercased().map { (character) ->\
    \ Character in\n        if vowels.contains(character) {\n            return character.character(offset:\
    \ 2)\n        } else {\n            return character\n        }\n    }\n    return\
    \ String(newMessage).uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfgu999xf.swift:16:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'character'\n            return character.character(offset:\
    \ 2)\n                   ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // print(\"\
    -\\(message)-\")\n    let letters = Array(message)\n    var encoded = \"\"\n \
    \   for letter in letters {\n        // print(\"-\\(letter)-\")\n        let lower\
    \ = letter.lowercased()\n        let isLower = letter == lower\n        if \"\
    aeiou\".contains(lower) {\n            let newLetter = intToChar(int: charToInt(char:\
    \ lower) + 2)\n            encoded += isLower ? newLetter : newLetter.uppercased()\n\
    \        } else {\n            encoded += isLower ? letter.uppercased() : letter.lowercased()\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptn18qci4.swift:19:30: error: binary operator '==' cannot be applied\
    \ to operands of type 'String.Element' (aka 'Character') and 'String'\n      \
    \  let isLower = letter == lower\n                      ~~~~~~ ^  ~~~~~\n/tmp/tmptn18qci4.swift:19:30:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        let isLower = letter == lower\n\
    \                             ^\n/tmp/tmptn18qci4.swift:21:29: error: cannot find\
    \ 'intToChar' in scope\n            let newLetter = intToChar(int: charToInt(char:\
    \ lower) + 2)\n                            ^~~~~~~~~\n/tmp/tmptn18qci4.swift:21:44:\
    \ error: cannot find 'charToInt' in scope\n            let newLetter = intToChar(int:\
    \ charToInt(char: lower) + 2)\n                                           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        let letter = String(char).lowercased()\n        if vowels.contains(letter.first!)\
    \ {\n            let index = alphabet.index(of: letter.first!)\n            encoded\
    \ += String(alphabet[alphabet.index(index!, offsetBy: 2)])\n        } else {\n\
    \            encoded += String(char).uppercased()\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp530kaa39/tmp530kaa39.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0d1934c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0d162bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0d162b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0d162a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp530kaa39                        0x000056380854eaa7 <unavailable> + 6823

    5    libc.so.6                          0x00002af0d1b20460 __libc_start_main +
    245

    6    tmp530kaa39                        0x000056380854e6e9 <unavailable> + 5865

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  var output\
    \ = \"\"\n  for letter in message {\n    //check if its a vowel\n    if letter\
    \ == \"a\" || letter == \"e\" || letter == \"i\" || letter == \"o\" || letter\
    \ == \"u\" {\n      //check if its uppercase\n      if letter == \"a\" {\n   \
    \     output.append(\"c\")\n      } else if letter == \"e\" {\n        output.append(\"\
    g\")\n      } else if letter == \"i\" {\n        output.append(\"k\")\n      }\
    \ else if letter == \"o\" {\n        output.append(\"m\")\n      } else if letter\
    \ == \"u\" {\n        output.append(\"q\")\n      }\n    } else {\n      //check\
    \ if its uppercase\n      if letter == \"A\" {\n        output.append(\"C\")\n\
    \      } else if letter == \"E\" {\n        output.append(\"G\")\n      } else\
    \ if letter == \"I\" {\n        output.append(\"K\")\n      } else if letter ==\
    \ \"O\" {\n        output.append(\"M\")\n      } else if letter == \"U\" {\n \
    \       output.append(\"Q\")\n      } else {\n        //check if its lowercase\n\
    \        if letter == \"b\" {\n          output.append(\"D\")\n        } else\
    \ if letter == \"c\" {\n          output.append(\"F\")\n        } else if letter\
    \ == \"d\" {\n          output.append(\"H\")\n        } else if letter == \"f\"\
    \ {\n          output.append(\"J\")\n        } else if letter == \"g\" {\n   \
    \       output.append(\"L\")\n        } else if letter == \"h\" {\n          output.append(\"\
    N\")\n        } else if letter == \"j\" {\n          output.append(\"P\")\n  \
    \      } else if letter == \"k\" {\n          output.append(\"R\")\n        }\
    \ else if letter == \"l\" {\n          output.append(\"T\")\n        } else if\
    \ letter == \"m\" {\n          output.append(\"V\")\n        } else if letter\
    \ == \"n\" {\n          output.append(\"X\")\n        } else if letter == \"p\"\
    \ {\n          output.append(\"Z\")\n        } else if letter ==\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpv588y5vu.swift:68:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpv588y5vu.swift:87:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmpv588y5vu.swift:29:12: note: to match this opening\
    \ '{'\n    } else {\n           ^\n/tmp/tmpv588y5vu.swift:87:84: error: expected\
    \ '}' at end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO\
    \ WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                               \
    \                                                    ^\n/tmp/tmpv588y5vu.swift:14:25:\
    \ note: to match this opening '{'\n  for letter in message {\n               \
    \         ^\n/tmp/tmpv588y5vu.swift:87:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmpv588y5vu.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmpv588y5vu.swift:71:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        if char == \"e\" {\n            result\
    \ += \"g\"\n        } else if char == \"E\" {\n            result += \"G\"\n \
    \       } else if char == \"a\" {\n            result += \"c\"\n        } else\
    \ if char == \"A\" {\n            result += \"C\"\n        } else if char == \"\
    i\" {\n            result += \"k\"\n        } else if char == \"I\" {\n      \
    \      result += \"K\"\n        } else if char == \"o\" {\n            result\
    \ += \"q\"\n        } else if char == \"O\" {\n            result += \"Q\"\n \
    \       } else if char == \"u\" {\n            result += \"y\"\n        } else\
    \ if char == \"U\" {\n            result += \"Y\"\n        } else if char.isUppercase\
    \ {\n            result += String(char).lowercased()\n        } else {\n     \
    \       result += String(char).uppercased()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpc7nmi3e7/tmpc7nmi3e7.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bd41e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bd3ee0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bd3ee0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bd3edf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7nmi3e7                        0x000055f55f638657 <unavailable> + 5719

    5    libc.so.6                          0x00002b5bd43d5460 __libc_start_main +
    245

    6    tmpc7nmi3e7                        0x000055f55f638299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        let convertedCharacter = convertCharacter(character:\
    \ character)\n        encodedMessage.append(convertedCharacter)\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp817c4juu.swift:15:34: error: cannot find 'convertCharacter' in\
    \ scope\n        let convertedCharacter = convertCharacter(character: character)\n\
    \                                 ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\t\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: '/tmp/tmpm5q5odky.swift:14:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for letter in message {\n        let lowercased\
    \ = String(letter).lowercased()\n        if vowels.contains(lowercased) {\n  \
    \          if let vowelIndex = alphabet.firstIndex(of: lowercased) {\n       \
    \         let newVowelIndex = vowelIndex.advanced(by: 2)\n                let\
    \ newVowel = alphabet[newVowelIndex]\n                encoded.append(String(newVowel).uppercased())\n\
    \            }\n        } else {\n            encoded.append(String(letter).uppercased())\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9iz68s8x.swift:19:57: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            if\
    \ let vowelIndex = alphabet.firstIndex(of: lowercased) {\n                   \
    \                                     ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let shift = 2\n    let lowercasedVowels = vowels.lowercased()\n\
    \    let lowercasedMessage = message.lowercased()\n    let encoded: String = String(lowercasedMessage.map\
    \ { (letter) -> Character in\n        let index = lowercasedVowels.index(of: letter)\n\
    \        if index != nil {\n            let advancedIndex = lowercasedVowels.index(lowercasedVowels.startIndex,\
    \ offsetBy: (index! + shift).quotientAndRemainder(dividingBy: lowercasedVowels.count).remainder)\n\
    \            return Character(lowercasedVowels[advancedIndex])\n        } else\
    \ {\n            return letter\n        }\n    })\n    return encoded\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppc1vxpc9.swift:20:101: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let advancedIndex = lowercasedVowels.index(lowercasedVowels.startIndex,\
    \ offsetBy: (index! + shift).quotientAndRemainder(dividingBy: lowercasedVowels.count).remainder)\n\
    \                                                                            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var encoded = \"\"\n    for character in message {\n        switch character\
    \ {\n        case \"a\":\n            encoded.append(\"c\")\n        case \"e\"\
    :\n            encoded.append(\"g\")\n        case \"i\":\n            encoded.append(\"\
    k\")\n        case \"o\":\n            encoded.append(\"q\")\n        case \"\
    u\":\n            encoded.append(\"y\")\n        case \"A\":\n            encoded.append(\"\
    C\")\n        case \"E\":\n            encoded.append(\"G\")\n        case \"\
    I\":\n            encoded.append(\"K\")\n        case \"O\":\n            encoded.append(\"\
    Q\")\n        case \"U\":\n            encoded.append(\"Y\")\n        default:\n\
    \            encoded.append(character)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpr0x872ma/tmpr0x872ma.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b71f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b71c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b71c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b71c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0x872ma                        0x0000562002d32557 <unavailable> + 5463

    5    libc.so.6                          0x00002b2b72138460 __libc_start_main +
    245

    6    tmpr0x872ma                        0x0000562002d32199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    // Your\
    \ code here.\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpe0kuzywr/tmpe0kuzywr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97426a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b974239fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b974239f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b974239e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0kuzywr                        0x000055e3c04a0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b9742894460 __libc_start_main +
    245

    6    tmpe0kuzywr                        0x000055e3c049ff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var newMessage\
    \ = message\n    newMessage = newMessage.uppercased()\n    newMessage = newMessage.replacingOccurrences(of:\
    \ \"A\", with: \"C\")\n    newMessage = newMessage.replacingOccurrences(of: \"\
    E\", with: \"G\")\n    newMessage = newMessage.replacingOccurrences(of: \"I\"\
    , with: \"K\")\n    newMessage = newMessage.replacingOccurrences(of: \"O\", with:\
    \ \"Q\")\n    newMessage = newMessage.replacingOccurrences(of: \"U\", with: \"\
    Y\")\n    return newMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpq37ug8vs.swift:15:29: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    newMessage = newMessage.replacingOccurrences(of:\
    \ \"A\", with: \"C\")\n                 ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq37ug8vs.swift:16:29:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    newMessage\
    \ = newMessage.replacingOccurrences(of: \"E\", with: \"G\")\n                \
    \ ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq37ug8vs.swift:17:29: error: value\
    \ of type 'String' has no member 'replacingOccurrences'\n    newMessage = newMessage.replacingOccurrences(of:\
    \ \"I\", with: \"K\")\n                 ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq37ug8vs.swift:18:29:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    newMessage\
    \ = newMessage.replacingOccurrences(of: \"O\", with: \"Q\")\n                \
    \ ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq37ug8vs.swift:19:29: error: value\
    \ of type 'String' has no member 'replacingOccurrences'\n    newMessage = newMessage.replacingOccurrences(of:\
    \ \"U\", with: \"Y\")\n                 ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tlet vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tvar currentIndex = message.startIndex\n\
    \tvar encodedMessage = \"\"\n\tfor char in message {\n\t\tif vowels.contains(char)\
    \ {\n\t\t\tif char == \"u\" {\n\t\t\t\tencodedMessage.append(\"a\")\n\t\t\t} else\
    \ {\n\t\t\t\tlet nextIndex = message.index(after: currentIndex)\n\t\t\t\tlet secondNextIndex\
    \ = message.index(after: nextIndex)\n\t\t\t\tencodedMessage.append(message[secondNextIndex])\n\
    \t\t\t}\n\t\t} else {\n\t\t\tencodedMessage.append(char)\n\t\t}\n\t\tcurrentIndex\
    \ = message.index(after: currentIndex)\n\t}\n\treturn encodedMessage\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpam9bfd5m/tmpam9bfd5m.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49e9070c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49e8d67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49e8d67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49e8d667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam9bfd5m                        0x00005565c3866897 <unavailable> + 6295

    5    libc.so.6                          0x00002b49e925c460 __libc_start_main +
    245

    6    tmpam9bfd5m                        0x00005565c38664d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n\tvar encodedMessage\
    \ = \"\"\n\tlet vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\
    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\t\n\tfor char in message\
    \ {\n\t\tlet nextChar = String(char).uppercased() == String(char) ? Character(String(char).lowercased())\
    \ : Character(String(char).uppercased())\n\t\tlet nextVowelIndex = vowels.firstIndex(of:\
    \ char)! + 2\n\t\tlet nextVowel = nextVowelIndex >= vowels.count ? vowels[nextVowelIndex\
    \ - vowels.count] : vowels[nextVowelIndex]\n\t\t\n\t\tif vowels.contains(char)\
    \ {\n\t\t\tencodedMessage.append(nextVowel)\n\t\t} else {\n\t\t\tencodedMessage.append(nextChar)\n\
    \t\t}\n\t}\n\t\n\treturn encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp8tipvlny/tmp8tipvlny.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d73bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d70b4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b14d70b4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b14d70b413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b14d70b3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8tipvlny                        0x00005628dc9b8870 <unavailable> + 10352

    6    tmp8tipvlny                        0x00005628dc9b7906 <unavailable> + 6406

    7    libc.so.6                          0x00002b14d75a9460 __libc_start_main +
    245

    8    tmp8tipvlny                        0x00005628dc9b7609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1659978575
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let characters\
    \ = message.characters.map { String($0) }\n    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    var result = [String]()\n    for (i, character) in characters.enumerated()\
    \ {\n        if vowels.contains(character.lowercased()) {\n            let indexOfVowel\
    \ = vowels.index(of: character.lowercased())\n            var indexOfNextVowel\
    \ = indexOfVowel! + 2\n            if indexOfNextVowel >= vowels.count {\n   \
    \             indexOfNextVowel = indexOfNextVowel - vowels.count\n           \
    \ }\n            result.append(vowels[indexOfNextVowel])\n        } else {\n \
    \           result.append(character)\n        }\n    }\n    return result.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptr1i456c.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = message.characters.map { String($0)\
    \ }\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptr1i456c.swift:18:39: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let indexOfVowel = vowels.index(of:\
    \ character.lowercased())\n                                      ^\n/tmp/tmptr1i456c.swift:18:39:\
    \ note: use 'firstIndex(of:)' instead\n            let indexOfVowel = vowels.index(of:\
    \ character.lowercased())\n                                      ^~~~~\n     \
    \                                 firstIndex\n/tmp/tmptr1i456c.swift:16:10: warning:\
    \ immutable value 'i' was never used; consider replacing with '_' or removing\
    \ it\n    for (i, character) in characters.enumerated() {\n         ^\n      \
    \   _\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var myMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in\
    \ message {\n        if vowels.contains(letter) {\n            if let index =\
    \ alphabet.firstIndex(of: letter) {\n                myMessage.append(alphabet[index+2])\n\
    \            }\n        } else {\n            myMessage.append(letter)\n     \
    \   }\n    }\n    return myMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpytwhhwrw/tmpytwhhwrw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49767eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49764e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49764e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49764e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpytwhhwrw                        0x000055a1e3bce797 <unavailable> + 6039

    5    libc.so.6                          0x00002b49769da460 __libc_start_main +
    245

    6    tmpytwhhwrw                        0x000055a1e3bce3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659978575
