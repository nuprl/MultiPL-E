language: swift
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ let start = Date()\n    var f: Int = 0, g: Int = 1, i: Int = 0\n    while i\
    \ < n {\n        g = g + f\n        f = g - f\n        i = i + 1\n    }\n    print(\"\
    Done in \\(Date().timeIntervalSince(start)) sec.\")\n    return f\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpz7agc5na.swift:10:17: error: cannot find 'Date' in scope\n    let\
    \ start = Date()\n                ^~~~\n/tmp/tmpz7agc5na.swift:17:22: error: cannot\
    \ find 'Date' in scope\n    print(\"Done in \\(Date().timeIntervalSince(start))\
    \ sec.\")\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    var t = 0\n    for _ in 0..<n {\n        t = a\
    \ + b\n        a = b\n        b = t\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var n0 = 0\n    var n1 = 1\n    var n2 = 0\n    if n == 0 {\n        return\
    \ n0\n    }\n    if n == 1 {\n        return n1\n    }\n    for _ in 2...n {\n\
    \        n2 = n0 + n1\n        n0 = n1\n        n1 = n2\n    }\n    return n2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var n1 = 0\n    var n2 = 1\n    for _ in 0..<n {\n        let n3 = n1 + n2\n\
    \        n1 = n2\n        n2 = n3\n    }\n    return n1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    var fn1 = 1\n    var fn2 = 1\n   \
    \ var fn = 1\n    for _ in 2...n {\n        fn = fn1 + fn2\n        fn1 = fn2\n\
    \        fn2 = fn\n    }\n    return fn\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmp7b0duqfr/tmp7b0duqfr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed6e2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed6b22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed6b22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed6b217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b0duqfr                        0x0000562bb840b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4ed7017460 __libc_start_main +
    245

    6    tmp7b0duqfr                        0x0000562bb840afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ precondition(n >= 0, \"fib(n:) n must be non-negative\")\n    return n <= 1\
    \ ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var f = [0, 1]\n    if n <= 1 {\n        return n\n    }\n    for i in 2...n\
    \ {\n        f.append(f[i - 1] + f[i - 2])\n    }\n    return f[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 1, 2:\n        return 1\n    default:\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    var a = 1\n    var b = 1\n    for\
    \ _ in 3...n {\n        let tmp = a\n        a = b\n        b = tmp + b\n    }\n\
    \    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 0:\n        return 0\n    case 1:\n        return 1\n \
    \   default:\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    if n < 2 {\n        return 1\n    }\n    for _\
    \ in 1...n {\n        let t = a + b\n        a = b\n        b = t\n    }\n   \
    \ return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        let tmp = a\n      \
    \  a = b\n        b = tmp + b\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // TODO: Implement it!\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpyst3rizq/tmpyst3rizq.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace77cbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace779b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace779b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace779b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyst3rizq                        0x000055f2990a41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ace77ea7460 __libc_start_main +
    245

    6    tmpyst3rizq                        0x000055f2990a3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        let tmp = a\n      \
    \  a = b\n        b = tmp + b\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n <= 1 {\n    return n\n  }\n  return fib(n: n - 1) + fib(n: n - 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        (a, b) = (b, a + b)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var current = 0\n    var next = 1\n    var i = 0\n    while i < n {\n      \
    \  let tmp = current\n        current = next\n        next = tmp + next\n    \
    \    i += 1\n    }\n    return current\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = 0\n  var b = 1\n  var i = n\n  while i > 0 {\n    let tmp = a\n    a = b\n\
    \    b = tmp + b\n    i -= 1\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n  \
    \  }\n    var a = 0\n    var b = 1\n    for _ in 2...n {\n        let c = a +\
    \ b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ \n    var x = 0\n    var y = 1\n    for _ in 1...n {\n        x = x + y\n  \
    \      y = x - y\n    }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    if n == 0 {\n        return a\n    }\n    for\
    \ _ in 0...n-1 {\n        let temp = a\n        a = b\n        b = temp + b\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return\
    \ 1\n    }\n    \n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    var result = [0, 1]\n    for i in\
    \ 2..<n {\n        result.append(result[i - 1] + result[i - 2])\n    }\n    return\
    \ result[n - 1] + result[n - 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var (n0, n1) = (0, 1)\n    var i = 0\n    while i < n {\n        (n0, n1) =\
    \ (n1, n0 + n1)\n        i += 1\n    }\n    return n0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ \n    // fib(0) = 0\n    // fib(1) = 1\n    // fib(n) = fib(n-1) + fib(n-2)\n\
    \    \n    if n < 2 {\n        return n\n    }\n    \n    return fib(n: n-1) +\
    \ fib(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    var a = 0\n    var b = 1\n    for\
    \ _ in 1..<n {\n        let c = a + b\n        a = b\n        b = c\n    }\n \
    \   return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    var a = 1\n    var b = 1\n    for\
    \ _ in 3...n {\n        let c = a + b\n        a = b\n        b = c\n    }\n \
    \   return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return (n < 2) ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ \n    guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n   \
    \ \n    var n1 = 0\n    var n2 = 1\n    var n3 = 0\n    \n    for _ in 0...n {\n\
    \        n3 = n1 + n2\n        n1 = n2\n        n2 = n3\n    }\n    \n    return\
    \ n1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: Exception
  stderr: 'tmps4ufuebs/tmps4ufuebs.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b161c74dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b161c444b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b161c444988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b161c4437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4ufuebs                        0x000055f6e522c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b161c939460 __libc_start_main +
    245

    6    tmps4ufuebs                        0x000055f6e522bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    var c = 0\n    if n == 0 {\n        return 0\n\
    \    }\n    for _ in 1..<n {\n        c = a + b\n        a = b\n        b = c\n\
    \    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n <= 1 {\n    return n\n  } else {\n    return fib(n: n - 1) + fib(n: n - 2)\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    var a = 1\n    var b = 1\n    for\
    \ _ in 3...n {\n        (a, b) = (b, a + b)\n    }\n    return b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // TODO: Write some code to compute a result\n    if (n <= 1) {\n        return\
    \ n\n    }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: Exception
  stderr: 'tmpa96_sac6/tmpa96_sac6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b152c5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b152c2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b152c2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b152c2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa96_sac6                        0x000055ea61b4b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b152c7e5460 __libc_start_main +
    245

    6    tmpa96_sac6                        0x000055ea61b4ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  guard\
    \ n > 0 else { return 0 }\n  guard n > 1 else { return 1 }\n  return fib(n: n\
    \ - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        (a, b) = (b, a + b)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ f1 = 0\n  var f2 = 1\n  for _ in 1...n {\n    let f = f1 + f2\n    f1 = f2\n\
    \    f2 = f\n  }\n  return f1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        let sum = a + b\n  \
    \      a = b\n        b = sum\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // Put your code here.\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpihoe2brv/tmpihoe2brv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58339c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58336bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58336bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58336bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihoe2brv                        0x0000561bd60a01b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5833bb1460 __libc_start_main +
    245

    6    tmpihoe2brv                        0x0000561bd609fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        a = a + b\n        swap(&a,\
    \ &b)\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    var f1 = 0\n    var f2 = 1\n    for\
    \ _ in 1..<n {\n        let tmp = f1 + f2\n        f1 = f2\n        f2 = tmp\n\
    \    }\n    return f2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var fn1 = 0\n    var fn2 = 1\n    for _ in 1...n {\n        (fn1, fn2) = (fn2,\
    \ fn1 + fn2)\n    }\n    return fn1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var n0 = 0\n    var n1 = 1\n    if n < 2 {\n        return n\n    }\n    for\
    \ _ in 2...n {\n        let tmp = n0 + n1\n        n0 = n1\n        n1 = tmp\n\
    \    }\n    return n1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    var res = 0\n    var previous = 1\n\
    \    var current = 1\n    for _ in 2...n {\n        res = previous + current\n\
    \        previous = current\n        current = res\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmprl3vslbo/tmprl3vslbo.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b519f086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b519ed7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b519ed7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b519ed7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprl3vslbo                        0x000055c955391335 <unavailable> + 4917

    5    libc.so.6                          0x00002b519f272460 __libc_start_main +
    245

    6    tmprl3vslbo                        0x000055c955390fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: Exception
  stderr: 'tmpa96_sac6/tmpa96_sac6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b152c5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b152c2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b152c2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b152c2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa96_sac6                        0x000055ea61b4b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b152c7e5460 __libc_start_main +
    245

    6    tmpa96_sac6                        0x000055ea61b4ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n == 0 {\n    return 0\n  } else if n == 1 {\n    return 1\n  } else {\n   \
    \ return fib(n: n - 1) + fib(n: n - 2)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    var previous = 0\n    var current\
    \ = 1\n    for _ in 1..<n {\n        let temp = current\n        current = previous\
    \ + current\n        previous = temp\n    }\n    return current\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 0 else { return n }\n    var fib1 = 0\n    var fib2 = 1\n    for _\
    \ in 1..<n {\n        (fib1, fib2) = (fib2, fib1 + fib2)\n    }\n    return fib2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib_helper(n: n, a: 0, b: 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpvrr4azwc.swift:10:12: error: cannot find 'fib_helper' in scope\n\
    \    return fib_helper(n: n, a: 0, b: 1)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 1:\n        return 1\n    case 2:\n        return 1\n \
    \   default:\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // Code here\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n  \
    \      return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ precondition(n >= 0, \"n must be greater than or equal to 0\")\n    if n ==\
    \ 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else\
    \ {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = 0\n  var b = 1\n  for _ in 0..<n {\n    let temp = a\n    a = b\n    b =\
    \ temp + b\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n <= 1 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 0 else { return n }\n    var a = 0\n    var b = 1\n    for _ in 0..<n\
    \ {\n        let next = a + b\n        a = b\n        b = next\n    }\n    return\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: Exception
  stderr: 'tmpa96_sac6/tmpa96_sac6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b152c5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b152c2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b152c2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b152c2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa96_sac6                        0x000055ea61b4b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b152c7e5460 __libc_start_main +
    245

    6    tmpa96_sac6                        0x000055ea61b4ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 0:\n        return 0\n    case 1:\n        return 1\n \
    \   default:\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var (a, b) = (0, 1)\n    for _ in 0..<n {\n        (a, b) = (b, a + b)\n   \
    \ }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var current = 0\n    var next = 1\n    for _ in 0..<n {\n        (current, next)\
    \ = (next, current + next)\n    }\n    return current\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ n <= 1 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // get n-th Fibonacci number\n    var n1 = 0\n    var n2 = 1\n    var n3 = 1\n\
    \    for _ in 0..<n {\n        n3 = n1 + n2\n        n1 = n2\n        n2 = n3\n\
    \    }\n    return n3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpkfzi3y5b/tmpkfzi3y5b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b369b095c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b369ad8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b369ad8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b369ad8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfzi3y5b                        0x000055e757cef335 <unavailable> + 4917

    5    libc.so.6                          0x00002b369b281460 __libc_start_main +
    245

    6    tmpkfzi3y5b                        0x000055e757ceefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 0, 1:\n        return n\n    default:\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ num1 = 0\n  var num2 = 1\n  if n == 0 {\n    return num1\n  }\n  for _ in 1..<n\
    \ {\n    let num = num1 + num2\n    num1 = num2\n    num2 = num\n  }\n  return\
    \ num2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ (a, b) = (0, 1)\n  for _ in 0..<n {\n    (a, b) = (b, a + b)\n  }\n  return\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    var fib1 = 1\n    var fib2 = 1\n \
    \   var fib3 = 1\n    for _ in 3...n {\n        fib3 = fib1 + fib2\n        fib1\
    \ = fib2\n        fib2 = fib3\n    }\n    return fib3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    var c = 0\n    guard n > 1 else { return n }\n\
    \    for _ in 2...n {\n        c = a + b\n        a = b\n        b = c\n    }\n\
    \    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // TODO: Implement it!\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmp_2ekw6hl/tmp_2ekw6hl.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4fccdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4fc9d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4fc9d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4fc9d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2ekw6hl                        0x00005627430e91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ad4fcec8460 __libc_start_main +
    245

    6    tmp_2ekw6hl                        0x00005627430e8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var fib1 = 0\n    var fib2 = 1\n    var fib = fib1 + fib2\n    for _ in 2..<n\
    \ {\n        fib1 = fib2\n        fib2 = fib\n        fib = fib1 + fib2\n    }\n\
    \    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeee3022c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeee2d19561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeee2d19286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeee2d1913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeee2d18bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2kn7nals                        0x00005616084f6649 <unavailable> + 5705

    6    tmp2kn7nals                        0x00005616084f6343 <unavailable> + 4931

    7    libc.so.6                          0x00002aeee320e460 __libc_start_main +
    245

    8    tmp2kn7nals                        0x00005616084f5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    var i = 1\n    while i < n {\n        let temp\
    \ = a\n        a = b\n        b = temp + b\n        i += 1\n    }\n    return\
    \ b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 0:\n        return 0\n    case 1:\n        return 1\n \
    \   default:\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  guard\
    \ n > 0 else { return 0 }\n  guard n > 1 else { return 1 }\n  return fib(n: n\
    \ - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 0, 1:\n        return n\n    default:\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // TODO: implement\n    var fibNumber = [0, 1]\n    var index = 2\n    guard\
    \ n > 1 else {\n        return n\n    }\n    while index <= n {\n        fibNumber.append(fibNumber[index\
    \ - 1] + fibNumber[index - 2])\n        index += 1\n    }\n    return fibNumber[index\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        (a, b) = (b, a + b)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ \n    return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        (a, b) = (b, a + b)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 1...n {\n        (a, b) = (b, a + b)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // Base cases\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n \
    \       return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ \n    func fib1(n: Int, prev: Int, next: Int) -> Int {\n        if n == 0 {\n\
    \            return prev\n        }\n        return fib1(n: n - 1, prev: next,\
    \ next: prev + next)\n    }\n    \n    return fib1(n: n, prev: 0, next: 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // TODO: Implement this function\n    if n <= 1 {\n        return n\n    }\n\
    \    return fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 1..<n {\n        let t = a + b\n    \
    \    a = b\n        b = t\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n <= 1 ? n : fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    var first = 1\n    var second = 1\n\
    \    var result = 0\n    for _ in 2..<n {\n        result = first + second\n \
    \       first = second\n        second = result\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  guard\
    \ n >= 3 else { return 1 }\n  var i = 1\n  var j = 1\n  for _ in 3...n {\n   \
    \ (i, j) = (j, i + j)\n  }\n  return j\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: Exception
  stderr: 'tmpa9r1pae3/tmpa9r1pae3.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2b8265c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2b7f5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2b7f5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2b7f5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9r1pae3                        0x00005559a82191b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac2b8451460 __libc_start_main +
    245

    6    tmpa9r1pae3                        0x00005559a8218e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return\
    \ 1\n    }\n    \n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var fib = (0, 1)\n    for _ in 0..<n {\n        fib = (fib.1, fib.0 + fib.1)\n\
    \    }\n    return fib.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
