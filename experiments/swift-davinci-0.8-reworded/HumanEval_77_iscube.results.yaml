language: swift
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    var l: Int = 0\n    var r: Int = a\n    while l < r {\n        let\
    \ mid: Int = (l + r + 1) / 2\n        if mid * mid * mid > a {\n            r\
    \ = mid - 1\n        } else {\n            l = mid\n        }\n    }\n    return\
    \ l * l * l == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cubeRoot = pow(Double(a), 1/3)\n    let\
    \ cube = Int(cubeRoot)\n    return pow(Double(cube), 3) == Double(a)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9l_mh3oz.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = pow(Double(a), 1/3)\n                   ^~~\n/tmp/tmp9l_mh3oz.swift:21:12:\
    \ error: cannot find 'pow' in scope\n    return pow(Double(cube), 3) == Double(a)\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    for i in 1...a {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || (a < 0 && (-a) %\
    \ 3 == 0) || a % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpgdlcxjmd/tmpgdlcxjmd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0663a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af06609fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af06609f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af06609e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdlcxjmd                        0x000055c27edb832d <unavailable> + 4909

    5    libc.so.6                          0x00002af066594460 __libc_start_main +
    245

    6    tmpgdlcxjmd                        0x000055c27edb7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmwevz1zi.swift:19:25: error: cannot find 'pow' in scope\n    return\
    \ a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                        ^~~\n/tmp/tmpmwevz1zi.swift:19:56: error:\
    \ cannot find 'pow' in scope\n    return a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                ^~~\n/tmp/tmpmwevz1zi.swift:19:87:\
    \ error: cannot find 'pow' in scope\n    return a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                            \
    \   ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var i = 0\n    while i*i*i < a {\n        i\
    \ += 1\n    }\n    return i*i*i == a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpe5g286gk/tmpe5g286gk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04541efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0453ee6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0453ee6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0453ee57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5g286gk                        0x000055806568729d <unavailable> + 4765

    5    libc.so.6                          0x00002b04543db460 __libc_start_main +
    245

    6    tmpe5g286gk                        0x0000558065686e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let x = Int(pow(Double(a), 1.0/3.0))\n    if\
    \ x * x * x == a {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxs3gjsg6.swift:19:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let iscube = a == Int(pow(Double(a), 1/3))\n\
    \    return iscube\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptickkaei.swift:19:27: error: cannot find 'pow' in scope\n    let\
    \ iscube = a == Int(pow(Double(a), 1/3))\n                          ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let aDouble = Double(a)\n    let aSqrt = aDouble.squareRoot()\n\
    \    let aTruncated = aSqrt.rounded(.down)\n    let aCube = aTruncated * aTruncated\
    \ * aTruncated\n    if aCube == aDouble {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.zSImNz/tmpct3arr9e-1.o:tmpct3arr9e-1.o:function $s11tmpct3arr9e6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    /tmp/TemporaryDirectory.zSImNz/tmpct3arr9e-1.o:tmpct3arr9e-1.o:function $s11tmpct3arr9e6iscube1aSbSi_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.zSImNz/tmpct3arr9e-1.o:tmpct3arr9e-1.o:function $s11tmpct3arr9e6iscube1aSbSi_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.zSImNz/tmpct3arr9e-1.o:tmpct3arr9e-1.o:function $s11tmpct3arr9e6iscube1aSbSi_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.zSImNz/tmpct3arr9e-1.o:tmpct3arr9e-1.o:function $s11tmpct3arr9e6iscube1aSbSi_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.zSImNz/tmpct3arr9e-1.o:tmpct3arr9e-1.o:function $s11tmpct3arr9e6iscube1aSbSi_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.zSImNz/tmpct3arr9e-1.o:tmpct3arr9e-1.o:function $s11tmpct3arr9e6iscube1aSbSi_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.zSImNz/tmpct3arr9e-1.o:tmpct3arr9e-1.o:function $s11tmpct3arr9e6iscube1aSbSi_tF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var c = 1\n    if a == 1 {\n        return\
    \ true\n    }\n    while c * c * c < a && a > 0 {\n        c += 1\n    }\n   \
    \ if c * c * c == a {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmprglizc2f/tmprglizc2f.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9fdb83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9fd87ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9fd87a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9fd8797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprglizc2f                        0x00005650b7cbf29d <unavailable> + 4765

    5    libc.so.6                          0x00002ae9fdd6f460 __libc_start_main +
    245

    6    tmprglizc2f                        0x00005650b7cbee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == pow(Double(a), 1.0/3.0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdqsdwlxj.swift:19:17: error: cannot find 'pow' in scope\n    return\
    \ a == pow(Double(a), 1.0/3.0)\n                ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpd60m56b_/tmpd60m56b_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b288433bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2884032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2884032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28840317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd60m56b_                        0x00005558ccd84227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2884527460 __libc_start_main +
    245

    6    tmpd60m56b_                        0x00005558ccd83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let root = Int(pow(Double(a), 1/3))\n    return\
    \ root * root * root == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpor383ud3.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1/3))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: a * -1)\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    var low = 0\n    var\
    \ high = a\n    while low <= high {\n        let mid = (low + high) / 2\n    \
    \    let num = mid * mid * mid\n        if num == a {\n            return true\n\
    \        } else if num < a {\n            low = mid + 1\n        } else {\n  \
    \          high = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube_number = a * a * a\n    if a == cube_number\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg55azw4w/tmpg55azw4w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba28dfcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba28dcc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba28dcc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba28dcc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg55azw4w                        0x000055749615e311 <unavailable> + 4881

    5    libc.so.6                          0x00002ba28e1b9460 __libc_start_main +
    245

    6    tmpg55azw4w                        0x000055749615de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn a >= 0 && (cbrt(Double(a)) == Double(a\
    \ / a).rounded())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4_v9w66a.swift:19:20: error: cannot find 'cbrt' in scope\n    \
    \    return a >= 0 && (cbrt(Double(a)) == Double(a / a).rounded())\n         \
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % 2 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp0gphiypf/tmp0gphiypf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3df717ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3df6e75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3df6e75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3df6e747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gphiypf                        0x0000563fb86b4241 <unavailable> + 4673

    5    libc.so.6                          0x00002b3df736a460 __libc_start_main +
    245

    6    tmp0gphiypf                        0x0000563fb86b3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var cube = Int(pow(Double(a), 1/3))\n    let\
    \ cube2 = Int(pow(Double(a), 1/3))\n    return cube == cube2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc04j1djz.swift:19:20: error: cannot find 'pow' in scope\n    var\
    \ cube = Int(pow(Double(a), 1/3))\n                   ^~~\n/tmp/tmpc04j1djz.swift:20:21:\
    \ error: cannot find 'pow' in scope\n    let cube2 = Int(pow(Double(a), 1/3))\n\
    \                    ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a >= 0 {\n        for i in 0...a {\n   \
    \         if i * i * i == a {\n                return true\n            }\n  \
    \      }\n    } else {\n        for i in a...0 {\n            if i * i * i ==\
    \ a {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   for i in 1..<a {\n        if a == i * i * i {\n            return true\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp31_pq8lv/tmp31_pq8lv.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63e4efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63e4bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63e4bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63e4bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31_pq8lv                        0x0000560ecc826331 <unavailable> + 4913

    5    libc.so.6                          0x00002b63e50e8460 __libc_start_main +
    245

    6    tmp31_pq8lv                        0x0000560ecc825fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    var i = 0\n    while i * i * i <= a {\n        if i * i * i == a {\n\
    \            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var iscube = false\n    for i in 0...Int(sqrt(Double(a))){\n\
    \        if i*i*i == a {\n            iscube = true\n        }\n    }\n    return\
    \ iscube\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_c7ph98g.swift:20:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 0...Int(sqrt(Double(a))){\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cbrt = a.squareRoot()\n    if cbrt.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp66xqqlzn.swift:19:18: error: value of type 'Int' has no member\
    \ 'squareRoot'\n    let cbrt = a.squareRoot()\n               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn a == Int(pow(Double(a), 1/3))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqyy3y5.swift:19:18: error: cannot find 'pow' in scope\n     \
    \   return a == Int(pow(Double(a), 1/3))\n                        ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    for i in 1...a {\n        if i * i * i == a\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b27a108dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27a0d84561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27a0d84286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27a0d8413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27a0d83bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3htwx4ur                        0x000055896a724769 <unavailable> + 5993

    6    tmp3htwx4ur                        0x000055896a7243b7 <unavailable> + 5047

    7    libc.so.6                          0x00002b27a1279460 __libc_start_main +
    245

    8    tmp3htwx4ur                        0x000055896a723fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if (a % 2 == 0) {\n        var m = 1\n    \
    \    while a > m {\n            m = m + 2 * m + 1\n        }\n        return a\
    \ == m\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp89etwc_w/tmp89etwc_w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cacc31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cac928b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cac928988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cac9277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89etwc_w                        0x0000564d0b018241 <unavailable> + 4673

    5    libc.so.6                          0x00002b6cace1d460 __libc_start_main +
    245

    6    tmp89etwc_w                        0x0000564d0b017ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(Double(a).squareRoot().rounded(.down).power(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaimfs35q.swift:19:59: error: value of type 'Double' has no member\
    \ 'power'\n    return a == Int(Double(a).squareRoot().rounded(.down).power(3))\n\
    \                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   var _a = a\n    while _a > 0 {\n        if _a == 1 {\n            return true\n\
    \        }\n        if _a % 3 != 0 {\n            return false\n        }\n  \
    \      _a /= 3\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp850v_9ec/tmp850v_9ec.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3aa18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada3a70fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada3a70f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada3a70e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp850v_9ec                        0x000055bf9fa5b32d <unavailable> + 4909

    5    libc.so.6                          0x00002ada3ac04460 __libc_start_main +
    245

    6    tmp850v_9ec                        0x000055bf9fa5aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || (a > 0 && (Int(pow(Double(a),\
    \ 1/3.0)) == Int(pow(Double(a), 1/3.0))))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9njb6spa.swift:19:37: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || (a > 0 && (Int(pow(Double(a), 1/3.0)) == Int(pow(Double(a), 1/3.0))))\n\
    \                                    ^~~\n/tmp/tmp9njb6spa.swift:19:67: error:\
    \ cannot find 'pow' in scope\n    return a == 0 || (a > 0 && (Int(pow(Double(a),\
    \ 1/3.0)) == Int(pow(Double(a), 1/3.0))))\n                                  \
    \                                ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  if a < 0 {\n    return iscube(a: -a)\n  }\n \
    \ if a == 0 {\n    return true\n  }\n  for i in 1...a {\n    if i * i * i == a\
    \ {\n      return true\n    }\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || ((a < 0 && a % 3\
    \ == 0) || a % 3 == 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpn64q6q0z/tmpn64q6q0z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf0644dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf06144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf06144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf061437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn64q6q0z                        0x000055a3efa7832d <unavailable> + 4909

    5    libc.so.6                          0x00002adf06639460 __libc_start_main +
    245

    6    tmpn64q6q0z                        0x000055a3efa77ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || pow(Double(abs(a)), 1.0/3.0)\
    \ - floor(pow(Double(abs(a)), 1.0/3.0)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj93k3xjy.swift:19:22: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || pow(Double(abs(a)), 1.0/3.0) - floor(pow(Double(abs(a)), 1.0/3.0))\
    \ == 0\n                     ^~~\n/tmp/tmpj93k3xjy.swift:19:53: error: cannot\
    \ find 'floor' in scope\n    return a == 0 || pow(Double(abs(a)), 1.0/3.0) - floor(pow(Double(abs(a)),\
    \ 1.0/3.0)) == 0\n                                                    ^~~~~\n\
    /tmp/tmpj93k3xjy.swift:19:59: error: cannot find 'pow' in scope\n    return a\
    \ == 0 || pow(Double(abs(a)), 1.0/3.0) - floor(pow(Double(abs(a)), 1.0/3.0)) ==\
    \ 0\n                                                          ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a == -1 {\n        return true\n    }\n    if a > 0 {\n        let b =\
    \ floor(pow(Double(a), 1/3))\n        let c = b * b * b\n        return Int(c)\
    \ == a\n    }\n    let b = ceil(pow(Double(a), 1/3))\n    let c = b * b * b\n\
    \    return Int(c) == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4tfc_qe_.swift:26:17: error: cannot find 'floor' in scope\n   \
    \     let b = floor(pow(Double(a), 1/3))\n                ^~~~~\n/tmp/tmp4tfc_qe_.swift:26:23:\
    \ error: cannot find 'pow' in scope\n        let b = floor(pow(Double(a), 1/3))\n\
    \                      ^~~\n/tmp/tmp4tfc_qe_.swift:30:13: error: cannot find 'ceil'\
    \ in scope\n    let b = ceil(pow(Double(a), 1/3))\n            ^~~~\n/tmp/tmp4tfc_qe_.swift:30:18:\
    \ error: cannot find 'pow' in scope\n    let b = ceil(pow(Double(a), 1/3))\n \
    \                ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var cubeRoot = 0\n    var isCube = false\n\
    \    while cubeRoot * cubeRoot * cubeRoot < abs(a) {\n        cubeRoot += 1\n\
    \    }\n    if cubeRoot * cubeRoot * cubeRoot == abs(a) {\n        isCube = true\n\
    \    }\n    return isCube\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // \u2193\u2193\u2193\u2193 your code here\
    \ \u2193\u2193\u2193\u2193\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp347b0hwl/tmp347b0hwl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf93262c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf92f59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf92f59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf92f587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp347b0hwl                        0x000056144bd4b1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002adf9344e460 __libc_start_main +
    245

    6    tmp347b0hwl                        0x000056144bd4ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = Int(pow(Double(a), 1.0/3.0))\n \
    \   return cube * cube * cube == a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzavl6e32.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % Int(round(pow(Double(a), 1.0/3.0)))\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4bcxmkfi.swift:19:20: error: cannot find 'round' in scope\n   \
    \ return a % Int(round(pow(Double(a), 1.0/3.0))) == 0\n                   ^~~~~\n\
    /tmp/tmp4bcxmkfi.swift:19:26: error: cannot find 'pow' in scope\n    return a\
    \ % Int(round(pow(Double(a), 1.0/3.0))) == 0\n                         ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a >= 0 {\n        if a == 0 {\n        \
    \    return true\n        }\n        for i in 1...a {\n            if i * i *\
    \ i == a {\n                return true\n            }\n        }\n    } else\
    \ {\n        if a == -1 {\n            return true\n        }\n        for i in\
    \ (-1*a)...a {\n            if i * i * i == a {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var left = 0\n    var\
    \ right = a\n    while left < right {\n        let middle = (left + right) / 2\n\
    \        let middle3 = middle * middle * middle\n        if middle3 < a {\n  \
    \          left = middle + 1\n        } else if middle3 > a {\n            right\
    \ = middle\n        } else {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpnua26o6m/tmpnua26o6m.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd2213ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd21e35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd21e35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd21e347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnua26o6m                        0x000055d44513f241 <unavailable> + 4673

    5    libc.so.6                          0x00002acd2232a460 __libc_start_main +
    245

    6    tmpnua26o6m                        0x000055d44513eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var t = 1;\n    while t * t * t < a {\n   \
    \     t += 1;\n    }\n    return t * t * t == a;\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpujjlc5tx/tmpujjlc5tx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb1032ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb10025b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb10025988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb100247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpujjlc5tx                        0x000055b0a4aea29d <unavailable> + 4765

    5    libc.so.6                          0x00002aeb1051a460 __libc_start_main +
    245

    6    tmpujjlc5tx                        0x000055b0a4ae9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    var i = 0\n    while i * i * i <= a {\n        if i * i * i == a {\n\
    \            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let num = Int(pow(Double(a), 1.0/3.0))\n  \
    \  return a == num * num * num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjvezoq8j.swift:19:19: error: cannot find 'pow' in scope\n    let\
    \ num = Int(pow(Double(a), 1.0/3.0))\n                  ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (pow(Double(a),1.0/3.0)).isInteger\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplz2ew5ww.swift:19:13: error: cannot find 'pow' in scope\n    return\
    \ (pow(Double(a),1.0/3.0)).isInteger\n            ^~~\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 { return true }\n    if a < 0 { return\
    \ false }\n    var guess = a / 3\n    while guess * guess * guess > a {\n    \
    \    guess = (guess + a / (guess * guess)) / 3\n    }\n    return guess * guess\
    \ * guess == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp1tgf0imf/tmp1tgf0imf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b289a7f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b289a4ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b289a4eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b289a4ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tgf0imf                        0x000055fd19637241 <unavailable> + 4673

    5    libc.so.6                          0x00002b289a9e0460 __libc_start_main +
    245

    6    tmp1tgf0imf                        0x000055fd19636ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tif a >= 0 {\n\t\tfor i in 0...a {\n\t\t\tif i\
    \ * i * i == a {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor i in\
    \ a...0 {\n\t\t\tif i * i * i == a {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && (Int(pow(Double(a), 1.0/3.0))\
    \ == Int(pow(Double(a), 1.0/3.0)))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuh4ccpjn.swift:19:27: error: cannot find 'pow' in scope\n    return\
    \ a >= 0 && (Int(pow(Double(a), 1.0/3.0)) == Int(pow(Double(a), 1.0/3.0)))\n \
    \                         ^~~\n/tmp/tmpuh4ccpjn.swift:19:59: error: cannot find\
    \ 'pow' in scope\n    return a >= 0 && (Int(pow(Double(a), 1.0/3.0)) == Int(pow(Double(a),\
    \ 1.0/3.0)))\n                                                          ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return pow(Double(a), 1.0/3.0).truncatingRemainder(dividingBy:\
    \ 1) == 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0umgr4tf.swift:19:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(a), 1.0/3.0).truncatingRemainder(dividingBy: 1) == 0.0\n        \
    \   ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tlet x = a.squareRoot()\n\treturn x.isInteger\
    \ && x.square() == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbizasgjd.swift:19:12: error: value of type 'Int' has no member\
    \ 'squareRoot'\n        let x = a.squareRoot()\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // write your code here\n    if a < 0 {\n \
    \       return iscube(a: -a)\n    }\n    else if a == 0 {\n        return true\n\
    \    }\n    else {\n        for i in 1...a {\n            if i * i * i == a {\n\
    \                return true\n            }\n        }\n        return false\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let root = Double(a).squareRoot()\n    if root\
    \ == Double(Int(root)) {\n        return true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.1pGd2w/tmpndlw2gb3-1.o:tmpndlw2gb3-1.o:function $s11tmpndlw2gb36iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a >= 0 {\n        let b = Double(a).squareRoot()\n\
    \        let c = b.rounded()\n        if (b - c).isZero {\n            return\
    \ true\n        }\n    } else {\n        let b = Double(a).squareRoot()\n    \
    \    let c = b.rounded()\n        if -(b - c).isZero {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk2c2xepf.swift:28:12: error: unary operator '-' cannot be applied\
    \ to an operand of type 'Bool'\n        if -(b - c).isZero {\n           ^\n/tmp/tmpk2c2xepf.swift:28:12:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double), (Float), (Float16), (Float80)\n        if -(b - c).isZero {\n    \
    \       ^\n/tmp/tmpk2c2xepf.swift:28:12: error: no '-' candidates produce the\
    \ expected contextual result type 'Bool'\n        if -(b - c).isZero {\n     \
    \      ^\nSwift.Float16:3:31: note: '-' produces 'Float16', not the expected contextual\
    \ result type 'Bool'\n    prefix public static func - (x: Float16) -> Float16\n\
    \                              ^\nSwift.Float:2:31: note: '-' produces 'Float',\
    \ not the expected contextual result type 'Bool'\n    prefix public static func\
    \ - (x: Float) -> Float\n                              ^\nSwift.Double:2:31: note:\
    \ '-' produces 'Double', not the expected contextual result type 'Bool'\n    prefix\
    \ public static func - (x: Double) -> Double\n                              ^\n\
    Swift.Float80:2:31: note: '-' produces 'Float80', not the expected contextual\
    \ result type 'Bool'\n    prefix public static func - (x: Float80) -> Float80\n\
    \                              ^\nSwift.Float16:3:31: note: '-' produces 'Float16',\
    \ not the expected contextual result type 'Bool'\n    prefix public static func\
    \ - (x: Float16) -> Float16\n                              ^\nSwift.Float:2:31:\
    \ note: '-' produces 'Float', not the expected contextual result type 'Bool'\n\
    \    prefix public static func - (x: Float) -> Float\n                       \
    \       ^\nSwift.Double:2:31: note: '-' produces 'Double', not the expected contextual\
    \ result type 'Bool'\n    prefix public static func - (x: Double) -> Double\n\
    \                              ^\nSwift.Float80:2:31: note: '-' produces 'Float80',\
    \ not the expected contextual result type 'Bool'\n    prefix public static func\
    \ - (x: Float80) -> Float80\n                              ^\nSwift.Float16:3:31:\
    \ note: '-' produces 'Float16', not the expected contextual result type 'Bool'\n\
    \    prefix pu"
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 { return true }\n    var n = 1\n\
    \    while n * n * n < abs(a) {\n        n += 1\n    }\n    return n * n * n ==\
    \ abs(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || (a == 8) ||\
    \ (a == -1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp5cdv0qzw/tmp5cdv0qzw.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792162ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7921325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7921325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79213247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5cdv0qzw                        0x000055d67f001311 <unavailable> + 4881

    5    libc.so.6                          0x00002b792181a460 __libc_start_main +
    245

    6    tmp5cdv0qzw                        0x000055d67f000e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    } else\
    \ if a == 0 {\n        return true\n    } else {\n        for i in 1...a {\n \
    \           if i * i * i == a {\n                return true\n            }\n\
    \        }\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpixwxfqac/tmpixwxfqac.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b958dc42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b958d939b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b958d939988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b958d9387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixwxfqac                        0x000055575337841d <unavailable> + 5149

    5    libc.so.6                          0x00002b958de2e460 __libc_start_main +
    245

    6    tmpixwxfqac                        0x0000555753377fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  var i = 0\n  while i*i*i < a {\n    i += 1\n\
    \  }\n  return i*i*i == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp1j7ddq0x/tmp1j7ddq0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6f94bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6f91b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6f91b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6f91b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1j7ddq0x                        0x000056413330129d <unavailable> + 4765

    5    libc.so.6                          0x00002ac6f96ab460 __libc_start_main +
    245

    6    tmp1j7ddq0x                        0x0000564133300e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // write your code here.\n    var temp = 0\n\
    \    while temp * temp * temp < a {\n        temp += 1\n    }\n    return temp\
    \ * temp * temp == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppnso5q8p/tmppnso5q8p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada32acdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada327c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada327c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada327c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnso5q8p                        0x000055bea829e29d <unavailable> + 4765

    5    libc.so.6                          0x00002ada32cb9460 __libc_start_main +
    245

    6    tmppnso5q8p                        0x000055bea829de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    for i in 0...a {\n        if i * i * i == a {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let power = Double(a).power(3)\n    if (power\
    \ - Double(a)).isZero() {\n        return true\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9dyvv4kb.swift:19:27: error: value of type 'Double' has no member\
    \ 'power'\n    let power = Double(a).power(3)\n                ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    var i = 0\n    while i * i * i <= a {\n        if i * i * i == a {\n\
    \            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))\
    \ * Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0)))\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8tdi7wvd.swift:19:23: error: cannot find 'round' in scope\n   \
    \     return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \         ^~~~~\n/tmp/tmp8tdi7wvd.swift:19:29: error: cannot find 'pow' in scope\n\
    \        return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \               ^~~\n/tmp/tmp8tdi7wvd.swift:19:61: error: cannot find 'round'\
    \ in scope\n        return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                               ^~~~~\n/tmp/tmp8tdi7wvd.swift:19:67:\
    \ error: cannot find 'pow' in scope\n        return a >= 0 && Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) == a\n                                                          \
    \               ^~~\n/tmp/tmp8tdi7wvd.swift:19:99: error: cannot find 'round'\
    \ in scope\n        return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                                                            \
    \         ^~~~~\n/tmp/tmp8tdi7wvd.swift:19:105: error: cannot find 'pow' in scope\n\
    \        return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                                                            \
    \               ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   var temp = 1\n    while temp * temp * temp < abs(a) {\n        temp += 1\n\
    \    }\n    return temp * temp * temp == abs(a)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0avag09a.swift:19:31: error: cannot find 'pow' in scope\n    return\
    \ a >= 0 && a == Int(pow(Double(Int(pow(Double(a), 1.0/3.0))), 3))\n         \
    \                     ^~~\n/tmp/tmp0avag09a.swift:19:46: error: cannot find 'pow'\
    \ in scope\n    return a >= 0 && a == Int(pow(Double(Int(pow(Double(a), 1.0/3.0))),\
    \ 3))\n                                             ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // your code here\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpa00de1da/tmpa00de1da.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e6629c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e6320b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e6320988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e631f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa00de1da                        0x0000562b5c3cf1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b51e6815460 __libc_start_main +
    245

    6    tmpa00de1da                        0x0000562b5c3cee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // 1\n    // we cannot use the math.pow(a,\
    \ 1/3) because\n    // this gives a float number and thus is not the\n    // same\
    \ number as a cube.\n    // we need an integer number that is a cube of a.\n \
    \   // and the possible cubes are 1, -1, 0, 8, -8, 27, -27, 64, ...\n    // and\
    \ if we increase the int number we increase the cube.\n    // we can use the sqrt(a)\
    \ to get the upper bound of the cube \n    // of a\n    // if c * c * c == a,\
    \ then c is the cube root of a\n    // we initialize the cube number is c = 1\n\
    \    // then we have (1 * 1 * 1) == a\n    // if not, then we increase 1 by 1\
    \ to get the next cube\n    // (2 * 2 * 2) == a\n    // we continue to increase\
    \ the cube number until we find the\n    // cube of a or the cube number greater\
    \ than a.\n    let b = sqrt(Double(a))\n    var i = 1\n    var c = i * i * i\n\
    \    while c <= a {\n        if c == a {\n            return true\n        }\n\
    \        i += 1\n        c = i * i * i\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo72ejcas.swift:35:13: error: cannot find 'sqrt' in scope\n    let\
    \ b = sqrt(Double(a))\n            ^~~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a < 0 && Int(pow(Double(a.magnitude),\
    \ 1.0/3.0))*Int(pow(Double(a.magnitude), 1.0/3.0))*Int(pow(Double(a.magnitude),\
    \ 1.0/3.0)) == a.magnitude) || Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a),\
    \ 1.0/3.0))*Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplvfgh36u.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ (a < 0 && Int(pow(Double(a.magnitude), 1.0/3.0))*Int(pow(Double(a.magnitude),\
    \ 1.0/3.0))*Int(pow(Double(a.magnitude), 1.0/3.0)) == a.magnitude) || Int(pow(Double(a),\
    \ 1.0/3.0))*Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a), 1.0/3.0)) == a\n \
    \                        ^~~\n/tmp/tmplvfgh36u.swift:19:65: error: cannot find\
    \ 'pow' in scope\n    return (a < 0 && Int(pow(Double(a.magnitude), 1.0/3.0))*Int(pow(Double(a.magnitude),\
    \ 1.0/3.0))*Int(pow(Double(a.magnitude), 1.0/3.0)) == a.magnitude) || Int(pow(Double(a),\
    \ 1.0/3.0))*Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a), 1.0/3.0)) == a\n \
    \                                                               ^~~\n/tmp/tmplvfgh36u.swift:19:104:\
    \ error: cannot find 'pow' in scope\n    return (a < 0 && Int(pow(Double(a.magnitude),\
    \ 1.0/3.0))*Int(pow(Double(a.magnitude), 1.0/3.0))*Int(pow(Double(a.magnitude),\
    \ 1.0/3.0)) == a.magnitude) || Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a),\
    \ 1.0/3.0))*Int(pow(Double(a), 1.0/3.0)) == a\n                              \
    \                                                                         ^~~\n\
    /tmp/tmplvfgh36u.swift:19:162: error: cannot find 'pow' in scope\n    return (a\
    \ < 0 && Int(pow(Double(a.magnitude), 1.0/3.0))*Int(pow(Double(a.magnitude), 1.0/3.0))*Int(pow(Double(a.magnitude),\
    \ 1.0/3.0)) == a.magnitude) || Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a),\
    \ 1.0/3.0))*Int(pow(Double(a), 1.0/3.0)) == a\n                              \
    \                                                                            \
    \                                                       ^~~\n/tmp/tmplvfgh36u.swift:19:191:\
    \ error: cannot find 'pow' in scope\n    return (a < 0 && Int(pow(Double(a.magnitude),\
    \ 1.0/3.0))*Int(pow(Double(a.magnitude), 1.0/3.0))*Int(pow(Double(a.magnitude),\
    \ 1.0/3.0)) == a.magnitude) || Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a),\
    \ 1.0/3.0))*Int(pow(Double(a), 1.0/3.0)) == a\n                              \
    \                                                                            \
    \     "
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return sqrt(Double(a)).truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpolev79zd.swift:19:10: error: cannot find 'sqrt' in scope\n  return\
    \ sqrt(Double(a)).truncatingRemainder(dividingBy: 1) == 0\n         ^~~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var previous: Double = 0.0\n    var current:\
    \ Double = 1.0\n    while (current * current * current) < Double(a) {\n      \
    \  previous = current\n        current += 1\n    }\n    if current * current *\
    \ current == Double(a) {\n        return true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp16nooydv/tmp16nooydv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0176e9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0176b93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0176b93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0176b927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16nooydv                        0x0000555de565229d <unavailable> + 4765

    5    libc.so.6                          0x00002b0177088460 __libc_start_main +
    245

    6    tmp16nooydv                        0x0000555de5651e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn a == 0 || Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == Int(pow(Double(abs(a)), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgjtx452t.swift:19:23: error: cannot find 'pow' in scope\n     \
    \   return a == 0 || Int(pow(Double(abs(a)), 1.0/3.0)) == Int(pow(Double(abs(a)),\
    \ 1.0/3.0))\n                             ^~~\n/tmp/tmpgjtx452t.swift:19:60: error:\
    \ cannot find 'pow' in scope\n        return a == 0 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) == Int(pow(Double(abs(a)), 1.0/3.0))\n                           \
    \                                       ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % 2 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp0gphiypf/tmp0gphiypf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3df717ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3df6e75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3df6e75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3df6e747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gphiypf                        0x0000563fb86b4241 <unavailable> + 4673

    5    libc.so.6                          0x00002b3df736a460 __libc_start_main +
    245

    6    tmp0gphiypf                        0x0000563fb86b3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tvar i = 0\n\twhile i * i * i < a {\n\t\ti +=\
    \ 1\n\t}\n\treturn i * i * i == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp77z25z9k/tmp77z25z9k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03db6ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03db3d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03db3d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03db3d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77z25z9k                        0x000055f681fa729d <unavailable> + 4765

    5    libc.so.6                          0x00002b03db8c9460 __libc_start_main +
    245

    6    tmp77z25z9k                        0x000055f681fa6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(round(pow(Double(a), 1.0/3.0)))\
    \ * Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0)))\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ntzobvu.swift:19:26: error: cannot find 'round' in scope\n   \
    \ return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \     ^~~~~\n/tmp/tmp7ntzobvu.swift:19:32: error: cannot find 'pow' in scope\n\
    \    return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \           ^~~\n/tmp/tmp7ntzobvu.swift:19:64: error: cannot find 'round' in scope\n\
    \    return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                           ^~~~~\n/tmp/tmp7ntzobvu.swift:19:70:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) == a\n                                                          \
    \           ^~~\n/tmp/tmp7ntzobvu.swift:19:102: error: cannot find 'round' in\
    \ scope\n    return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                                                            \
    \     ^~~~~\n/tmp/tmp7ntzobvu.swift:19:108: error: cannot find 'pow' in scope\n\
    \    return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                                                            \
    \           ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let x = pow(Double(a), 0.33)\n    return x\
    \ == Double(Int(x))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpregoyh3r.swift:19:13: error: cannot find 'pow' in scope\n    let\
    \ x = pow(Double(a), 0.33)\n            ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpd60m56b_/tmpd60m56b_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b288433bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2884032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2884032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28840317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd60m56b_                        0x00005558ccd84227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2884527460 __libc_start_main +
    245

    6    tmpd60m56b_                        0x00005558ccd83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    for i in 0...a {\n        if i * i * i == a\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af8fd88ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8fd585561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af8fd585286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af8fd58513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af8fd584bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxhtj7zh0                        0x000055e5374a1769 <unavailable> + 5993

    6    tmpxhtj7zh0                        0x000055e5374a13b7 <unavailable> + 5047

    7    libc.so.6                          0x00002af8fda7a460 __libc_start_main +
    245

    8    tmpxhtj7zh0                        0x000055e5374a0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   let a = abs(a)\n    var i = 0\n    while i*i*i <= a {\n        if i*i*i ==\
    \ a {\n            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 { return true }\n    return Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcrsgpnqb.swift:20:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) == a\n               ^~~\n/tmp/tmpcrsgpnqb.swift:20:52: error: cannot\
    \ find 'pow' in scope\n    return Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                       \
    \                            ^~~\n/tmp/tmpcrsgpnqb.swift:20:88: error: cannot\
    \ find 'pow' in scope\n    return Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                       \
    \                                                                ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   var i = 1\n    while i * i * i <= abs(a) {\n        if i * i * i == abs(a)\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a >= 0) && (Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeauz9pvh.swift:19:29: error: cannot find 'pow' in scope\n    return\
    \ (a >= 0) && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a)\n                            ^~~\n/tmp/tmpeauz9pvh.swift:19:60:\
    \ error: cannot find 'pow' in scope\n    return (a >= 0) && (Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                           ^~~\n/tmp/tmpeauz9pvh.swift:19:91:\
    \ error: cannot find 'pow' in scope\n    return (a >= 0) && (Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                                            \
    \              ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    let root = Int(Double(a).squareRoot())\n\
    \    let result = root * root * root\n    return a == result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.zzZHtX/tmpte2dawn_-1.o:tmpte2dawn_-1.o:function $s11tmpte2dawn_6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // your code goes here\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp6o3xfjvq/tmp6o3xfjvq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7f8aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7f5a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7f5a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7f5a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6o3xfjvq                        0x000055a4eb593227 <unavailable> + 4647

    5    libc.so.6                          0x00002aee7fa9a460 __libc_start_main +
    245

    6    tmp6o3xfjvq                        0x000055a4eb592e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 { return true }\n    return ceil(pow(Double(a),\
    \ 1.0/3.0)) == floor(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcj_sahei.swift:20:12: error: cannot find 'ceil' in scope\n    return\
    \ ceil(pow(Double(a), 1.0/3.0)) == floor(pow(Double(a), 1.0/3.0))\n          \
    \ ^~~~\n/tmp/tmpcj_sahei.swift:20:17: error: cannot find 'pow' in scope\n    return\
    \ ceil(pow(Double(a), 1.0/3.0)) == floor(pow(Double(a), 1.0/3.0))\n          \
    \      ^~~\n/tmp/tmpcj_sahei.swift:20:45: error: cannot find 'floor' in scope\n\
    \    return ceil(pow(Double(a), 1.0/3.0)) == floor(pow(Double(a), 1.0/3.0))\n\
    \                                            ^~~~~\n/tmp/tmpcj_sahei.swift:20:51:\
    \ error: cannot find 'pow' in scope\n    return ceil(pow(Double(a), 1.0/3.0))\
    \ == floor(pow(Double(a), 1.0/3.0))\n                                        \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cubeRoot = Int(pow(Double(a), 1/3))\n \
    \   let cube = Int(pow(Double(cubeRoot), 3))\n    return a == cube\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplma5aaze.swift:19:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1/3))\n                       ^~~\n/tmp/tmplma5aaze.swift:20:20:\
    \ error: cannot find 'pow' in scope\n    let cube = Int(pow(Double(cubeRoot),\
    \ 3))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\t// write code here\n\treturn true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp2mh9h076/tmp2mh9h076.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c0477c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c016eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c016e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c016d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mh9h076                        0x0000556a085b9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b23c0663460 __libc_start_main +
    245

    6    tmp2mh9h076                        0x0000556a085b8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    var n = 0\n    while n * n * n <= a {\n        if n * n * n == a {\n\
    \            return true\n        }\n        n += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a != 0) && (Double(a).squareRoot().truncatingRemainder(dividingBy:\
    \ 1) == 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.eCPAr7/tmp11q15odm-1.o:tmp11q15odm-1.o:function $s11tmp11q15odm6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tlet r = a.squareRoot();\n\treturn r.isInt() &&\
    \ (r * r * r == a);\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28e_iyly.swift:19:12: error: value of type 'Int' has no member\
    \ 'squareRoot'\n        let r = a.squareRoot();\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var i = 0\n    while i * i * i <= a {\n   \
    \     if i * i * i == a {\n            return true\n        }\n        i += 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbatmoi57/tmpbatmoi57.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af07ae62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07ab59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07ab59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07ab587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbatmoi57                        0x000056467f87c29d <unavailable> + 4765

    5    libc.so.6                          0x00002af07b04e460 __libc_start_main +
    245

    6    tmpbatmoi57                        0x000056467f87be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return cbrt(Double(a)) == Double(Int(cbrt(Double(a))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi90ckrnj.swift:19:12: error: cannot find 'cbrt' in scope\n    return\
    \ cbrt(Double(a)) == Double(Int(cbrt(Double(a))))\n           ^~~~\n/tmp/tmpi90ckrnj.swift:19:42:\
    \ error: cannot find 'cbrt' in scope\n    return cbrt(Double(a)) == Double(Int(cbrt(Double(a))))\n\
    \                                         ^~~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == (Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0kuzmlrv.swift:19:22: error: cannot find 'pow' in scope\n    return\
    \ a == (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)))\n                     ^~~\n/tmp/tmp0kuzmlrv.swift:19:53: error: cannot\
    \ find 'pow' in scope\n    return a == (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)))\n                                \
    \                    ^~~\n/tmp/tmp0kuzmlrv.swift:19:84: error: cannot find 'pow'\
    \ in scope\n    return a == (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)))\n                                \
    \                                                   ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return Double(a).squareRoot().truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.vGJp6f/tmptin37fvq-1.o:tmptin37fvq-1.o:function $s11tmptin37fvq6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var temp : Double = Double(a)\n    if a <=\
    \ 0 {\n        return true\n    }\n    while temp > 1 {\n        temp = temp/3\n\
    \    }\n    if temp == 1 {\n        return true\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp3st1baat/tmp3st1baat.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ecc376c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ecc06db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ecc06d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ecc06c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3st1baat                        0x0000556142b42311 <unavailable> + 4881

    5    libc.so.6                          0x00002b5ecc562460 __libc_start_main +
    245

    6    tmp3st1baat                        0x0000556142b41e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || abs(a) == Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptgj6lr8p.swift:19:36: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || abs(a) == Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\n                            \
    \       ^~~\n/tmp/tmptgj6lr8p.swift:19:72: error: cannot find 'pow' in scope\n\
    \    return a == 0 || abs(a) == Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\n                            \
    \                                           ^~~\n/tmp/tmptgj6lr8p.swift:19:108:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || abs(a) == Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\n\
    \                                                                            \
    \                               ^~~\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a > 0 && a == pow(round(pow(Double(a),\
    \ 1.0/3.0)), 3)) || (a == 0 || a == 1 || a == -1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8reeemtz.swift:19:27: error: cannot find 'pow' in scope\n    return\
    \ (a > 0 && a == pow(round(pow(Double(a), 1.0/3.0)), 3)) || (a == 0 || a == 1\
    \ || a == -1)\n                          ^~~\n/tmp/tmp8reeemtz.swift:19:31: error:\
    \ cannot find 'round' in scope\n    return (a > 0 && a == pow(round(pow(Double(a),\
    \ 1.0/3.0)), 3)) || (a == 0 || a == 1 || a == -1)\n                          \
    \    ^~~~~\n/tmp/tmp8reeemtz.swift:19:37: error: cannot find 'pow' in scope\n\
    \    return (a > 0 && a == pow(round(pow(Double(a), 1.0/3.0)), 3)) || (a == 0\
    \ || a == 1 || a == -1)\n                                    ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return Int(pow(Float(a), (1.0/3.0))) * Int(pow(Float(a),\
    \ (1.0/3.0))) * Int(pow(Float(a), (1.0/3.0))) == a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3lo66q1d.swift:19:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Float(a), (1.0/3.0))) * Int(pow(Float(a), (1.0/3.0))) * Int(pow(Float(a),\
    \ (1.0/3.0))) == a\n               ^~~\n/tmp/tmp3lo66q1d.swift:19:48: error: cannot\
    \ find 'pow' in scope\n    return Int(pow(Float(a), (1.0/3.0))) * Int(pow(Float(a),\
    \ (1.0/3.0))) * Int(pow(Float(a), (1.0/3.0))) == a\n                         \
    \                      ^~~\n/tmp/tmp3lo66q1d.swift:19:80: error: cannot find 'pow'\
    \ in scope\n    return Int(pow(Float(a), (1.0/3.0))) * Int(pow(Float(a), (1.0/3.0)))\
    \ * Int(pow(Float(a), (1.0/3.0))) == a\n                                     \
    \                                          ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let exp = 1.0 / 3.0\n    let cbrt = cbrt(Double(a))\n\
    \    let cube = cbrt.rounded(.down)\n    return pow(cube, exp) == cbrt\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1rf9h682.swift:20:16: error: use of local variable 'cbrt' before\
    \ its declaration\n    let cbrt = cbrt(Double(a))\n               ^\n/tmp/tmp1rf9h682.swift:20:9:\
    \ note: 'cbrt' declared here\n    let cbrt = cbrt(Double(a))\n        ^\n/tmp/tmp1rf9h682.swift:21:30:\
    \ error: cannot infer contextual base in reference to member 'down'\n    let cube\
    \ = cbrt.rounded(.down)\n                            ~^~~~\n/tmp/tmp1rf9h682.swift:22:12:\
    \ error: cannot find 'pow' in scope\n    return pow(cube, exp) == cbrt\n     \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || (a == -1) ||\
    \ (a > 0 && Int(floor(pow(Double(a), (1.0/3.0)))) == Int(ceil(pow(Double(a), (1.0/3.0)))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphs908zgd.swift:19:63: error: cannot find 'floor' in scope\n   \
    \ return (a == 0) || (a == 1) || (a == -1) || (a > 0 && Int(floor(pow(Double(a),\
    \ (1.0/3.0)))) == Int(ceil(pow(Double(a), (1.0/3.0)))))\n                    \
    \                                          ^~~~~\n/tmp/tmphs908zgd.swift:19:69:\
    \ error: cannot find 'pow' in scope\n    return (a == 0) || (a == 1) || (a ==\
    \ -1) || (a > 0 && Int(floor(pow(Double(a), (1.0/3.0)))) == Int(ceil(pow(Double(a),\
    \ (1.0/3.0)))))\n                                                            \
    \        ^~~\n/tmp/tmphs908zgd.swift:19:104: error: cannot find 'ceil' in scope\n\
    \    return (a == 0) || (a == 1) || (a == -1) || (a > 0 && Int(floor(pow(Double(a),\
    \ (1.0/3.0)))) == Int(ceil(pow(Double(a), (1.0/3.0)))))\n                    \
    \                                                                            \
    \       ^~~~\n/tmp/tmphs908zgd.swift:19:109: error: cannot find 'pow' in scope\n\
    \    return (a == 0) || (a == 1) || (a == -1) || (a > 0 && Int(floor(pow(Double(a),\
    \ (1.0/3.0)))) == Int(ceil(pow(Double(a), (1.0/3.0)))))\n                    \
    \                                                                            \
    \            ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return Int(pow(Double(a), 1/3)) == pow(Double(a),\
    \ 1/3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnxjfonxk.swift:19:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(a), 1/3)) == pow(Double(a), 1/3)\n               ^~~\n/tmp/tmpnxjfonxk.swift:19:40:\
    \ error: cannot find 'pow' in scope\n    return Int(pow(Double(a), 1/3)) == pow(Double(a),\
    \ 1/3)\n                                       ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpn8_ucpdv/tmpn8_ucpdv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75a2b61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75a2858b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75a2858988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75a28577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8_ucpdv                        0x000055b008ed11b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b75a2d4d460 __libc_start_main +
    245

    6    tmpn8_ucpdv                        0x000055b008ed0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(round(pow(Double(a), 1.0/3.0)))\
    \ * Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0)))\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ntzobvu.swift:19:26: error: cannot find 'round' in scope\n   \
    \ return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \     ^~~~~\n/tmp/tmp7ntzobvu.swift:19:32: error: cannot find 'pow' in scope\n\
    \    return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \           ^~~\n/tmp/tmp7ntzobvu.swift:19:64: error: cannot find 'round' in scope\n\
    \    return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                           ^~~~~\n/tmp/tmp7ntzobvu.swift:19:70:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) == a\n                                                          \
    \           ^~~\n/tmp/tmp7ntzobvu.swift:19:102: error: cannot find 'round' in\
    \ scope\n    return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                                                            \
    \     ^~~~~\n/tmp/tmp7ntzobvu.swift:19:108: error: cannot find 'pow' in scope\n\
    \    return a == 0 || Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                                                            \
    \           ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || (a > 0 && (pow(Double(a),\
    \ 1.0/3.0) - Double(Int(pow(Double(a), 1.0/3.0)))).isZero)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1nqifrz7.swift:19:33: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || (a > 0 && (pow(Double(a), 1.0/3.0) - Double(Int(pow(Double(a), 1.0/3.0)))).isZero)\n\
    \                                ^~~\n/tmp/tmp1nqifrz7.swift:19:70: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || (a > 0 && (pow(Double(a), 1.0/3.0)\
    \ - Double(Int(pow(Double(a), 1.0/3.0)))).isZero)\n                          \
    \                                           ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let number = Double(a)\n    let number_root\
    \ = number.squareRoot()\n    if number.truncatingRemainder(dividingBy: number_root)\
    \ == 0 {\n        if number.truncatingRemainder(dividingBy: number_root) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.r5kwYu/tmpuccib17s-1.o:tmpuccib17s-1.o:function $s11tmpuccib17s6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpd60m56b_/tmpd60m56b_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b288433bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2884032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2884032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28840317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd60m56b_                        0x00005558ccd84227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2884527460 __libc_start_main +
    245

    6    tmpd60m56b_                        0x00005558ccd83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf0bmvlph.swift:22:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = Int(pow(Double(a), 1.0/3.0))\n \
    \   if a == Int(pow(Double(cube), 3)) {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnwoase1k.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n/tmp/tmpnwoase1k.swift:20:17:\
    \ error: cannot find 'pow' in scope\n    if a == Int(pow(Double(cube), 3)) {\n\
    \                ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var value = 0\n    var cube = 0\n    while\
    \ cube <= a {\n        cube = value * value * value\n        if cube == a {\n\
    \            return true\n        }\n        value += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbq5p2_11/tmpbq5p2_11.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabfe686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabfe37db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabfe37d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabfe37c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbq5p2_11                        0x000055676e2af29d <unavailable> + 4765

    5    libc.so.6                          0x00002aabfe872460 __libc_start_main +
    245

    6    tmpbq5p2_11                        0x000055676e2aee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return false\n    }\n    var i = 0\n    while true {\n\
    \        let temp = i * i * i\n        if temp == a {\n            return true\n\
    \        }\n        if temp > a {\n            return false\n        }\n     \
    \   i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpxo1phyrm/tmpxo1phyrm.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b684b21cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b684af13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b684af13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b684af127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxo1phyrm                        0x00005595d459229d <unavailable> + 4765

    5    libc.so.6                          0x00002b684b408460 __libc_start_main +
    245

    6    tmpxo1phyrm                        0x00005595d4591e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cubeRoot = cbrt(Double(a))\n    let roundCubeRoot\
    \ = Int(round(cubeRoot))\n    return Double(roundCubeRoot).isPower(of: 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpatunus_s.swift:19:20: error: cannot find 'cbrt' in scope\n    let\
    \ cubeRoot = cbrt(Double(a))\n                   ^~~~\n/tmp/tmpatunus_s.swift:20:29:\
    \ error: cannot find 'round' in scope\n    let roundCubeRoot = Int(round(cubeRoot))\n\
    \                            ^~~~~\n/tmp/tmpatunus_s.swift:21:34: error: reference\
    \ to member 'isPower' cannot be resolved without a contextual type\n    return\
    \ Double(roundCubeRoot).isPower(of: 3)\n                                 ^\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // Write your code here\n    if a == 1 || a\
    \ == 0 || a == -1 {\n        return true\n    }\n    var x = Int(pow(Double(a),\
    \ 1/3))\n    if x * x * x == a {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcudp8axc.swift:23:17: error: cannot find 'pow' in scope\n    var\
    \ x = Int(pow(Double(a), 1/3))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   var x = a\n    if x < 0 {\n        x = -x\n    }\n    var cnt = 0\n    var\
    \ m = 1\n    while x > 0 {\n        x = x - m\n        m = m + 2\n        cnt\
    \ = cnt + 1\n    }\n    return x == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp3wz1amw0/tmp3wz1amw0.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a86360c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a86057b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a86057988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a860567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3wz1amw0                        0x000055a3e43383fb <unavailable> + 5115

    5    libc.so.6                          0x00002b3a8654c460 __libc_start_main +
    245

    6    tmp3wz1amw0                        0x000055a3e4337e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let x = Double(a)\n    let y = pow(x, 1.0/3.0)\n\
    \    let z = Int(y)\n    if a == Int(pow(Double(z), 3.0)) {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5auhnewi.swift:20:13: error: cannot find 'pow' in scope\n    let\
    \ y = pow(x, 1.0/3.0)\n            ^~~\n/tmp/tmp5auhnewi.swift:22:17: error: cannot\
    \ find 'pow' in scope\n    if a == Int(pow(Double(z), 3.0)) {\n              \
    \  ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 0 {\n        return true\n    }\n    var product = 1\n    var i =\
    \ 1\n    while product < a {\n        product = i * i * i\n        i += 1\n  \
    \  }\n    if product == a {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbrs6t17k/tmpbrs6t17k.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accf64f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accf61ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accf61ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accf61eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrs6t17k                        0x0000559695e7529d <unavailable> + 4765

    5    libc.so.6                          0x00002accf66e1460 __libc_start_main +
    245

    6    tmpbrs6t17k                        0x0000559695e74e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a > 0 && Int(pow(Double(a),\
    \ (1/3))) * Int(pow(Double(a), (1/3))) * Int(pow(Double(a), (1/3))) == a || a\
    \ < 0 && Int(pow(Double(a), (1/3))) * Int(pow(Double(a), (1/3))) * Int(pow(Double(a),\
    \ (1/3))) == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0i60vu3e.swift:19:35: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a > 0 && Int(pow(Double(a), (1/3))) * Int(pow(Double(a), (1/3))) *\
    \ Int(pow(Double(a), (1/3))) == a || a < 0 && Int(pow(Double(a), (1/3))) * Int(pow(Double(a),\
    \ (1/3))) * Int(pow(Double(a), (1/3))) == a\n                                \
    \  ^~~\n/tmp/tmp0i60vu3e.swift:19:64: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a > 0 && Int(pow(Double(a), (1/3))) * Int(pow(Double(a), (1/3))) *\
    \ Int(pow(Double(a), (1/3))) == a || a < 0 && Int(pow(Double(a), (1/3))) * Int(pow(Double(a),\
    \ (1/3))) * Int(pow(Double(a), (1/3))) == a\n                                \
    \                               ^~~\n/tmp/tmp0i60vu3e.swift:19:93: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a > 0 && Int(pow(Double(a), (1/3)))\
    \ * Int(pow(Double(a), (1/3))) * Int(pow(Double(a), (1/3))) == a || a < 0 && Int(pow(Double(a),\
    \ (1/3))) * Int(pow(Double(a), (1/3))) * Int(pow(Double(a), (1/3))) == a\n   \
    \                                                                            \
    \             ^~~\n/tmp/tmp0i60vu3e.swift:19:137: error: cannot find 'pow' in\
    \ scope\n    return a == 0 || a > 0 && Int(pow(Double(a), (1/3))) * Int(pow(Double(a),\
    \ (1/3))) * Int(pow(Double(a), (1/3))) == a || a < 0 && Int(pow(Double(a), (1/3)))\
    \ * Int(pow(Double(a), (1/3))) * Int(pow(Double(a), (1/3))) == a\n           \
    \                                                                            \
    \                                                 ^~~\n/tmp/tmp0i60vu3e.swift:19:166:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a > 0 && Int(pow(Double(a),\
    \ (1/3))) * Int(pow(Double(a), (1/3))) * Int(pow(Double(a), (1/3))) == a || a\
    \ < 0 && Int(pow(Double(a), (1/3))) * Int(pow(Double(a), (1/3))) * Int(pow(Double(a),\
    \ (1/3))) == a\n                                                             \
    \                                                                            \
    \                            ^~~\n/tmp/tmp0i60vu3e.swift:19:195: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a > 0 && Int(pow(Dou"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   let t = Double(a).squareRoot()\n    let cube = Int(t.rounded())\n    return\
    \ cube * cube * cube == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.oBQ3HE/tmp_oo6bw0p-1.o:tmp_oo6bw0p-1.o:function $s11tmp_oo6bw0p6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    /tmp/TemporaryDirectory.oBQ3HE/tmp_oo6bw0p-1.o:tmp_oo6bw0p-1.o:function $s11tmp_oo6bw0p6iscube1aSbSi_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.oBQ3HE/tmp_oo6bw0p-1.o:tmp_oo6bw0p-1.o:function $s11tmp_oo6bw0p6iscube1aSbSi_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.oBQ3HE/tmp_oo6bw0p-1.o:tmp_oo6bw0p-1.o:function $s11tmp_oo6bw0p6iscube1aSbSi_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.oBQ3HE/tmp_oo6bw0p-1.o:tmp_oo6bw0p-1.o:function $s11tmp_oo6bw0p6iscube1aSbSi_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.oBQ3HE/tmp_oo6bw0p-1.o:tmp_oo6bw0p-1.o:function $s11tmp_oo6bw0p6iscube1aSbSi_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.oBQ3HE/tmp_oo6bw0p-1.o:tmp_oo6bw0p-1.o:function $s11tmp_oo6bw0p6iscube1aSbSi_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.oBQ3HE/tmp_oo6bw0p-1.o:tmp_oo6bw0p-1.o:function $s11tmp_oo6bw0p6iscube1aSbSi_tF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = a * a * a\n    if a == cube {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmplwd32qgf/tmplwd32qgf.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac112dd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac112ac7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac112ac7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac112ac67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplwd32qgf                        0x0000558c6e9cc311 <unavailable> + 4881

    5    libc.so.6                          0x00002ac112fbc460 __libc_start_main +
    245

    6    tmplwd32qgf                        0x0000558c6e9cbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let absA = abs(a)\n    if absA == 0 {\n   \
    \     return true\n    }\n    if absA == 1 {\n        return true\n    }\n   \
    \ var low = 0\n    var high = absA\n    while low < high {\n        let mid =\
    \ (low + high) / 2\n        let value = mid * mid * mid\n        if value == absA\
    \ {\n            return true\n        } else if value < absA {\n            low\
    \ = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmphkhyu1wq/tmphkhyu1wq.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08706e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08703deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08703de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08703dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphkhyu1wq                        0x0000565463290491 <unavailable> + 5265

    5    libc.so.6                          0x00002b08708d3460 __libc_start_main +
    245

    6    tmphkhyu1wq                        0x000056546328ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a != 0) && (a == (a / 2) * (a / 2)\
    \ * (a / 2));\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpjokdixzz/tmpjokdixzz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f4d6f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f4d3ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f4d3ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f4d3eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjokdixzz                        0x000055ab7107f241 <unavailable> + 4673

    5    libc.so.6                          0x00002b0f4d8e1460 __libc_start_main +
    245

    6    tmpjokdixzz                        0x000055ab7107eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var a = a\n    if a < 0 {\n        a = -a\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let num = Double(a)\n    let root = pow(num,\
    \ 1/3)\n    let cube = pow(root, 3)\n    if cube == num {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0nbayri1.swift:20:16: error: cannot find 'pow' in scope\n    let\
    \ root = pow(num, 1/3)\n               ^~~\n/tmp/tmp0nbayri1.swift:21:16: error:\
    \ cannot find 'pow' in scope\n    let cube = pow(root, 3)\n               ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tif a > -1 && a < 2 {\n\t\treturn true\n\t}\n\t\
    var i = 2\n\twhile i*i*i < a {\n\t\ti += 1\n\t}\n\treturn i*i*i == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmphnra9vaw/tmphnra9vaw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7201c99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7201990b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7201990988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b720198f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphnra9vaw                        0x0000564e6d40429d <unavailable> + 4765

    5    libc.so.6                          0x00002b7201e85460 __libc_start_main +
    245

    6    tmphnra9vaw                        0x0000564e6d403e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjk6ui395.swift:19:26: error: cannot find 'round' in scope\n   \
    \ return a == 0 || Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \   ^~~~~\n/tmp/tmpjk6ui395.swift:19:32: error: cannot find 'pow' in scope\n \
    \   return a == 0 || Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \         ^~~\n/tmp/tmpjk6ui395.swift:19:62: error: cannot find 'round' in scope\n\
    \    return a == 0 || Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \                                       ^~~~~\n/tmp/tmpjk6ui395.swift:19:68: error:\
    \ cannot find 'pow' in scope\n    return a == 0 || Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \                                             ^~~\n/tmp/tmpjk6ui395.swift:19:98:\
    \ error: cannot find 'round' in scope\n    return a == 0 || Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0)))\
    \ == a\n                                                                     \
    \                            ^~~~~\n/tmp/tmpjk6ui395.swift:19:104: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \                                                                            \
    \     ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || (a < 0 && abs(a) % 2 == 0)\
    \ || (a > 0 && abs(a) % 2 == 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmptkd9hm5u/tmptkd9hm5u.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e077cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e074c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e074c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e074c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptkd9hm5u                        0x00005610eabd141d <unavailable> + 5149

    5    libc.so.6                          0x00002b7e079b9460 __libc_start_main +
    245

    6    tmptkd9hm5u                        0x00005610eabd0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let number = sqrt(Double(a))\n    if a < 0\
    \ {\n        return number == round(number)\n    } else {\n        return Int(number)\
    \ * Int(number) * Int(number) == a\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu2z8mimr.swift:19:18: error: cannot find 'sqrt' in scope\n    let\
    \ number = sqrt(Double(a))\n                 ^~~~\n/tmp/tmpu2z8mimr.swift:21:26:\
    \ error: cannot find 'round' in scope\n        return number == round(number)\n\
    \                         ^~~~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a % (a / 3) == 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d0fb9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d0f894561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4d0f894286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4d0f89413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4d0f893bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm72p7low                        0x000056226948b6c6 <unavailable> + 5830

    6    tmpm72p7low                        0x000056226948b1db <unavailable> + 4571

    7    libc.so.6                          0x00002b4d0fd89460 __libc_start_main +
    245

    8    tmpm72p7low                        0x000056226948aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return root * root * root ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2ljrkkcr.swift:22:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // your code here\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpa00de1da/tmpa00de1da.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e6629c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e6320b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e6320988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e631f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa00de1da                        0x0000562b5c3cf1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b51e6815460 __libc_start_main +
    245

    6    tmpa00de1da                        0x0000562b5c3cee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || ((a > 0) && (round(pow(Double(a),\
    \ 1.0/3.0)) == pow(Double(a), 1.0/3.0)))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa9sk_mu1.swift:19:37: error: cannot find 'round' in scope\n   \
    \ return (a == 0) || ((a > 0) && (round(pow(Double(a), 1.0/3.0)) == pow(Double(a),\
    \ 1.0/3.0)))\n                                    ^~~~~\n/tmp/tmpa9sk_mu1.swift:19:43:\
    \ error: cannot find 'pow' in scope\n    return (a == 0) || ((a > 0) && (round(pow(Double(a),\
    \ 1.0/3.0)) == pow(Double(a), 1.0/3.0)))\n                                   \
    \       ^~~\n/tmp/tmpa9sk_mu1.swift:19:71: error: cannot find 'pow' in scope\n\
    \    return (a == 0) || ((a > 0) && (round(pow(Double(a), 1.0/3.0)) == pow(Double(a),\
    \ 1.0/3.0)))\n                                                               \
    \       ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cubeRoot = cbrt(Double(a))\n    let intcubeRoot\
    \ = Int(cubeRoot)\n    return pow(Double(intcubeRoot), 3) == Double(a)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpceifxr77.swift:19:20: error: cannot find 'cbrt' in scope\n    let\
    \ cubeRoot = cbrt(Double(a))\n                   ^~~~\n/tmp/tmpceifxr77.swift:21:12:\
    \ error: cannot find 'pow' in scope\n    return pow(Double(intcubeRoot), 3) ==\
    \ Double(a)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return Double(a).squareRoot().truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.vGJp6f/tmptin37fvq-1.o:tmptin37fvq-1.o:function $s11tmptin37fvq6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))**3\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprcaomndk.swift:19:26: error: cannot find 'round' in scope\n   \
    \ return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))**3 == a\n             \
    \            ^~~~~\n/tmp/tmprcaomndk.swift:19:32: error: cannot find 'pow' in\
    \ scope\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))**3 == a\n  \
    \                             ^~~\n/tmp/tmprcaomndk.swift:19:57: error: cannot\
    \ find operator '**' in scope\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))**3\
    \ == a\n                                                        ^~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfnobp2x3.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                         ^~~\n/tmp/tmpfnobp2x3.swift:19:57:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                 ^~~\n/tmp/tmpfnobp2x3.swift:19:88:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                            \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0avag09a.swift:19:31: error: cannot find 'pow' in scope\n    return\
    \ a >= 0 && a == Int(pow(Double(Int(pow(Double(a), 1.0/3.0))), 3))\n         \
    \                     ^~~\n/tmp/tmp0avag09a.swift:19:46: error: cannot find 'pow'\
    \ in scope\n    return a >= 0 && a == Int(pow(Double(Int(pow(Double(a), 1.0/3.0))),\
    \ 3))\n                                             ^~~\n"
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiwbm54pj.swift:19:26: error: cannot find 'round' in scope\n   \
    \ return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \   ^~~~~\n/tmp/tmpiwbm54pj.swift:19:32: error: cannot find 'pow' in scope\n \
    \   return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \         ^~~\n/tmp/tmpiwbm54pj.swift:19:62: error: cannot find 'round' in scope\n\
    \    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \                                       ^~~~~\n/tmp/tmpiwbm54pj.swift:19:68: error:\
    \ cannot find 'pow' in scope\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \                                             ^~~\n/tmp/tmpiwbm54pj.swift:19:98:\
    \ error: cannot find 'round' in scope\n    return a >= 0 && Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0)))\
    \ == a\n                                                                     \
    \                            ^~~~~\n/tmp/tmpiwbm54pj.swift:19:104: error: cannot\
    \ find 'pow' in scope\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \                                                                            \
    \     ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // Write your code here!\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp5m73swc4/tmp5m73swc4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ba1e40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ba1b37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ba1b37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ba1b367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5m73swc4                        0x000056484fdc61b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b0ba202c460 __libc_start_main +
    245

    6    tmp5m73swc4                        0x000056484fdc5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tvar i = 0\n\twhile i*i*i < a {\n\t\ti += 1\n\t\
    }\n\treturn i*i*i == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp3dyaxj2w/tmp3dyaxj2w.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5118470c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5118167b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5118167988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51181667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dyaxj2w                        0x00005626ef6fd29d <unavailable> + 4765

    5    libc.so.6                          0x00002b511865c460 __libc_start_main +
    245

    6    tmp3dyaxj2w                        0x00005626ef6fce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var cube = 1\n    while cube * cube * cube\
    \ < a {\n        cube += 1\n    }\n    return cube * cube * cube == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmph6u26hr1/tmph6u26hr1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b52e4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b52b44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b52b44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b52b437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6u26hr1                        0x000055a76f1c229d <unavailable> + 4765

    5    libc.so.6                          0x00002b3b53039460 __libc_start_main +
    245

    6    tmph6u26hr1                        0x000055a76f1c1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // Enter your code between the two comment\
    \ markers\n    let cube = a*a*a\n    if a == cube {\n        return true\n   \
    \ }\n    else {\n        return false\n    }\n    // End code\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpt2wte6mk/tmpt2wte6mk.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7800a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab77fd98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab77fd98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab77fd977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2wte6mk                        0x00005572f97c9311 <unavailable> + 4881

    5    libc.so.6                          0x00002ab78028d460 __libc_start_main +
    245

    6    tmpt2wte6mk                        0x00005572f97c8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == (a / 2) * (a / 2) * (a / 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpv6vg69db/tmpv6vg69db.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b913616cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9135e63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9135e63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9135e627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6vg69db                        0x0000564cf42bc241 <unavailable> + 4673

    5    libc.so.6                          0x00002b9136358460 __libc_start_main +
    245

    6    tmpv6vg69db                        0x0000564cf42bbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpybtnyei0.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpybtnyei0.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpybtnyei0.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var count = 0\n    for index in 1...a {\n \
    \       if index * index * index == a {\n            count += 1\n        }\n \
    \   }\n    if count > 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e00f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4dfde9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba4dfde9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba4dfde913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba4dfde8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpfgx1vyjs                        0x00005648ef745781 <unavailable> + 6017

    6    tmpfgx1vyjs                        0x00005648ef7453b7 <unavailable> + 5047

    7    libc.so.6                          0x00002ba4e02de460 __libc_start_main +
    245

    8    tmpfgx1vyjs                        0x00005648ef744fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var i = 0\n    var n = 0\n    while i*i*i <=\
    \ a {\n        n = i*i*i\n        if n == a {\n            return true\n     \
    \   }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmps9n56dzl/tmps9n56dzl.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dce191c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcde88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcde88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcde877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9n56dzl                        0x000055ae4a0ba29d <unavailable> + 4765

    5    libc.so.6                          0x00002b0dce37d460 __libc_start_main +
    245

    6    tmps9n56dzl                        0x000055ae4a0b9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var temp: Double = 1\n    while temp*temp*temp\
    \ < Double(a) {\n        temp += 1\n    }\n    return temp*temp*temp == Double(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmplmgno9xk/tmplmgno9xk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77d01edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77cfee4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77cfee4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77cfee37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmgno9xk                        0x0000555a5ab0a29d <unavailable> + 4765

    5    libc.so.6                          0x00002b77d03d9460 __libc_start_main +
    245

    6    tmplmgno9xk                        0x0000555a5ab09e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tlet x = a < 0 ? -a : a\n\tlet xd3 = pow(Double(x),\
    \ 1/3)\n\tlet y = Int(xd3)\n\treturn x == y * y * y\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr4koun81.swift:20:12: error: cannot find 'pow' in scope\n     \
    \   let xd3 = pow(Double(x), 1/3)\n                  ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if (a == 0) {\n        return true\n    }\n\
    \    if (a < 0) {\n        return false\n    }\n    var cube = 0\n    for i in\
    \ 1...a {\n        cube = i * i * i\n        if (cube == a) {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpy1iwizcm/tmpy1iwizcm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaccf73ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaccf431b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaccf431988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaccf4307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy1iwizcm                        0x000055cbf446941d <unavailable> + 5149

    5    libc.so.6                          0x00002aaccf926460 __libc_start_main +
    245

    6    tmpy1iwizcm                        0x000055cbf4468fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var cube: Int = 0\n    var cubeRoot: Int =\
    \ 0\n    while (cube < a) {\n        cubeRoot += 1\n        cube = cubeRoot *\
    \ cubeRoot * cubeRoot\n    }\n    if (cube == a) {\n        return true\n    }\
    \ else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmphnswodu0/tmphnswodu0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb74f49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb74c40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb74c40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb74c3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphnswodu0                        0x0000563a61c8d29d <unavailable> + 4765

    5    libc.so.6                          0x00002abb75135460 __libc_start_main +
    245

    6    tmphnswodu0                        0x0000563a61c8ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // Int.max = 2147483647\n    var i = 0\n  \
    \  while i*i*i <= a {\n        if i*i*i == a {\n            return true\n    \
    \    }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp1k275jcc/tmp1k275jcc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbe7c9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbe7995b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbe7995988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbe79947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1k275jcc                        0x000055c8510a229d <unavailable> + 4765

    5    libc.so.6                          0x00002afbe7e8a460 __libc_start_main +
    245

    6    tmp1k275jcc                        0x000055c8510a1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var i = 0\n    while i * i * i <= a {\n   \
    \     if i * i * i == a {\n            return true\n        }\n        i += 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbatmoi57/tmpbatmoi57.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af07ae62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07ab59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07ab59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07ab587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbatmoi57                        0x000056467f87c29d <unavailable> + 4765

    5    libc.so.6                          0x00002af07b04e460 __libc_start_main +
    245

    6    tmpbatmoi57                        0x000056467f87be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || (Int(pow(Double(a),\
    \ 0.33333)) * Int(pow(Double(a), 0.33333)) * Int(pow(Double(a), 0.33333)) == a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn2fixw59.swift:19:37: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || (Int(pow(Double(a), 0.33333)) * Int(pow(Double(a), 0.33333))\
    \ * Int(pow(Double(a), 0.33333)) == a)\n                                    ^~~\n\
    /tmp/tmpn2fixw59.swift:19:68: error: cannot find 'pow' in scope\n    return a\
    \ == 0 || a == 1 || (Int(pow(Double(a), 0.33333)) * Int(pow(Double(a), 0.33333))\
    \ * Int(pow(Double(a), 0.33333)) == a)\n                                     \
    \                              ^~~\n/tmp/tmpn2fixw59.swift:19:99: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || (Int(pow(Double(a), 0.33333))\
    \ * Int(pow(Double(a), 0.33333)) * Int(pow(Double(a), 0.33333)) == a)\n      \
    \                                                                            \
    \                ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   for i in 1...abs(a) {\n        if i * i * i == abs(a) {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let a = Double(a)\n    let x = pow(a, (1.0/3.0))\n\
    \    return floor(x) == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzy72sxvc.swift:20:13: error: cannot find 'pow' in scope\n    let\
    \ x = pow(a, (1.0/3.0))\n            ^~~\n/tmp/tmpzy72sxvc.swift:21:12: error:\
    \ cannot find 'floor' in scope\n    return floor(x) == x\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a.isPower(of: 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9nvj63wf.swift:19:14: error: value of type 'Int' has no member\
    \ 'isPower'\n    return a.isPower(of: 3)\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(pow(Double(abs(a)), 1/3.0))\
    \ ** 3 == abs(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbonpp2n2.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || Int(pow(Double(abs(a)), 1/3.0)) ** 3 == abs(a)\n                 \
    \        ^~~\n/tmp/tmpbonpp2n2.swift:19:54: error: cannot find operator '**' in\
    \ scope\n    return a == 0 || Int(pow(Double(abs(a)), 1/3.0)) ** 3 == abs(a)\n\
    \                                                     ^~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || (pow(Double(abs(a)),\
    \ 1.0/3.0) == ceil(pow(Double(abs(a)), 1.0/3.0)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbhdmz519.swift:19:33: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || (pow(Double(abs(a)), 1.0/3.0) == ceil(pow(Double(abs(a)),\
    \ 1.0/3.0)))\n                                ^~~\n/tmp/tmpbhdmz519.swift:19:65:\
    \ error: cannot find 'ceil' in scope\n    return a == 0 || a == 1 || (pow(Double(abs(a)),\
    \ 1.0/3.0) == ceil(pow(Double(abs(a)), 1.0/3.0)))\n                          \
    \                                      ^~~~\n/tmp/tmpbhdmz519.swift:19:70: error:\
    \ cannot find 'pow' in scope\n    return a == 0 || a == 1 || (pow(Double(abs(a)),\
    \ 1.0/3.0) == ceil(pow(Double(abs(a)), 1.0/3.0)))\n                          \
    \                                           ^~~\n"
  stdout: ''
  timestamp: 1659979718
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 { return true }\n    var c = abs(a)\n\
    \    while c % 3 == 0 {\n        c /= 3\n    }\n    return c == 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp1gjpmlzg/tmp1gjpmlzg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07fc100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07fbdf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07fbdf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07fbdf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1gjpmlzg                        0x00005598fa782491 <unavailable> + 5265

    5    libc.so.6                          0x00002b07fc2ec460 __libc_start_main +
    245

    6    tmp1gjpmlzg                        0x00005598fa781fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let n = Int(pow(Double(a), 1.0/3.0))\n    return\
    \ n * n * n == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8jsqsvez.swift:19:17: error: cannot find 'pow' in scope\n    let\
    \ n = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tfor x in 1...abs(a) {\n\t\tif x * x * x == abs(a)\
    \ {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b5987f3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5987c33561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5987c33286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5987c3313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5987c32bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb4ct1u7_                        0x0000559f74fa388d <unavailable> + 6285

    6    tmpb4ct1u7_                        0x0000559f74fa3678 <unavailable> + 5752

    7    libc.so.6                          0x00002b5988128460 __libc_start_main +
    245

    8    tmpb4ct1u7_                        0x0000559f74fa30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn a == 0 || a == -1 || a == 1 || (a > 0\
    \ && Int(pow(Double(a), 1.0/3.0)) == pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6127o6gr.swift:19:54: error: cannot find 'pow' in scope\n     \
    \   return a == 0 || a == -1 || a == 1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ == pow(Double(a), 1.0/3.0))\n                                              \
    \              ^~~\n/tmp/tmp6127o6gr.swift:19:82: error: cannot find 'pow' in\
    \ scope\n        return a == 0 || a == -1 || a == 1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) == pow(Double(a), 1.0/3.0))\n                                    \
    \                                                    ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // write your code here\n    var cube = a\n\
    \    var isCube = false\n    var x = 0\n    repeat {\n        x += 1\n       \
    \ cube = x * x * x\n        if a == cube {\n            isCube = true\n      \
    \  }\n    } while x < a\n    return isCube\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpbsove9b2/tmpbsove9b2.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e9ef70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9ec67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9ec67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9ec667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbsove9b2                        0x000055c43e34f29d <unavailable> + 4765

    5    libc.so.6                          0x00002b7e9f15c460 __libc_start_main +
    245

    6    tmpbsove9b2                        0x000055c43e34ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  let cube = Int(pow(Double(a), 1.0/3.0))\n  return\
    \ cube * cube * cube == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgex2xtmp.swift:19:18: error: cannot find 'pow' in scope\n  let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                 ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return sqr(a: cbrt(a: a)) == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgz_3owyk.swift:19:12: error: cannot find 'sqr' in scope\n    return\
    \ sqr(a: cbrt(a: a)) == a\n           ^~~\n/tmp/tmpgz_3owyk.swift:19:19: error:\
    \ cannot find 'cbrt' in scope\n    return sqr(a: cbrt(a: a)) == a\n          \
    \        ^~~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))\
    \ * Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0)))\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp__np1la5.swift:19:26: error: cannot find 'round' in scope\n   \
    \ return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \     ^~~~~\n/tmp/tmp__np1la5.swift:19:32: error: cannot find 'pow' in scope\n\
    \    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \           ^~~\n/tmp/tmp__np1la5.swift:19:64: error: cannot find 'round' in scope\n\
    \    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                           ^~~~~\n/tmp/tmp__np1la5.swift:19:70:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) == a\n                                                          \
    \           ^~~\n/tmp/tmp__np1la5.swift:19:102: error: cannot find 'round' in\
    \ scope\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                                                            \
    \     ^~~~~\n/tmp/tmp__np1la5.swift:19:108: error: cannot find 'pow' in scope\n\
    \    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0))) * Int(round(pow(Double(a),\
    \ 1.0/3.0))) * Int(round(pow(Double(a), 1.0/3.0))) == a\n                    \
    \                                                                            \
    \           ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var t = a\n    while\
    \ t > 0 {\n        if t % 3 == 2 {\n            return false\n        }\n    \
    \    t /= 3\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped7oprrx/tmped7oprrx.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fb94fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fb91f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fb91f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fb91f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped7oprrx                        0x000055987e6233a1 <unavailable> + 5025

    5    libc.so.6                          0x00002b0fb96e7460 __libc_start_main +
    245

    6    tmped7oprrx                        0x000055987e622ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // your code here\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpa00de1da/tmpa00de1da.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e6629c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e6320b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e6320988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e631f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa00de1da                        0x0000562b5c3cf1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b51e6815460 __libc_start_main +
    245

    6    tmpa00de1da                        0x0000562b5c3cee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // TODO: Implement your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp106me50m/tmp106me50m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaedcacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaed9a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaed9a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaed9a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp106me50m                        0x0000559b847431b1 <unavailable> + 4529

    5    libc.so.6                          0x00002abaede98460 __libc_start_main +
    245

    6    tmp106me50m                        0x0000559b84742e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tlet b = Double(a)\n\tif b < 0 {\n\t\treturn iscube(a:\
    \ -a)\n\t}\n\tif b == 0 {\n\t\treturn true\n\t}\n\tlet c = pow(b, 1.0/3.0)\n\t\
    let d = pow(c + 1, 3)\n\treturn fabs(d - b) < 1e-15\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzzfhom8n.swift:26:10: error: cannot find 'pow' in scope\n     \
    \   let c = pow(b, 1.0/3.0)\n                ^~~\n/tmp/tmpzzfhom8n.swift:27:10:\
    \ error: cannot find 'pow' in scope\n        let d = pow(c + 1, 3)\n         \
    \       ^~~\n/tmp/tmpzzfhom8n.swift:28:9: error: cannot find 'fabs' in scope\n\
    \        return fabs(d - b) < 1e-15\n               ^~~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let x = a > 0 ? a : -a\n    if x == 0 {\n \
    \       return true\n    }\n    var i = 0\n    while i*i*i <= x {\n        if\
    \ i*i*i == x {\n            return true\n        }\n        i += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return a == Int(pow(Double(an\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt_xd5ce5.swift:20:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpt_xd5ce5.swift:19:22: note: to match this opening '('\n  return a ==\
    \ Int(pow(Double(a
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return Double(a).squareRoot().truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.vGJp6f/tmptin37fvq-1.o:tmptin37fvq-1.o:function $s11tmptin37fvq6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var cube = 0\n    var i = 0\n    while cube\
    \ < a {\n        i += 1\n        cube = i * i * i\n    }\n    return cube == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpsgikbx7s/tmpsgikbx7s.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b319d5bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b319d2b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b319d2b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b319d2b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgikbx7s                        0x0000560be45a029d <unavailable> + 4765

    5    libc.so.6                          0x00002b319d7a9460 __libc_start_main +
    245

    6    tmpsgikbx7s                        0x0000560be459fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn a >= 0 && pow(Double(a), 1.0/3.0) - floor(pow(Double(a),\
    \ 1.0/3.0)) < Double.ulpOfOne\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_u2txy5g.swift:19:19: error: cannot find 'pow' in scope\n     \
    \   return a >= 0 && pow(Double(a), 1.0/3.0) - floor(pow(Double(a), 1.0/3.0))\
    \ < Double.ulpOfOne\n                         ^~~\n/tmp/tmp_u2txy5g.swift:19:45:\
    \ error: cannot find 'floor' in scope\n        return a >= 0 && pow(Double(a),\
    \ 1.0/3.0) - floor(pow(Double(a), 1.0/3.0)) < Double.ulpOfOne\n              \
    \                                     ^~~~~\n/tmp/tmp_u2txy5g.swift:19:51: error:\
    \ cannot find 'pow' in scope\n        return a >= 0 && pow(Double(a), 1.0/3.0)\
    \ - floor(pow(Double(a), 1.0/3.0)) < Double.ulpOfOne\n                       \
    \                                  ^~~\n"
  stdout: ''
  timestamp: 1659979718
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var res = false\n    let sqr = sqrt(Double(a))\n\
    \    if Int(sqr) == Int(sqr) {\n        res = true\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphij0lj_l.swift:20:15: error: cannot find 'sqrt' in scope\n    let\
    \ sqr = sqrt(Double(a))\n              ^~~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  var i = 1\n  while i*i*i < a {\n    i += 1\n\
    \  }\n  return i*i*i == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw7rx87fs/tmpw7rx87fs.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d85d47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d85a3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d85a3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d85a3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7rx87fs                        0x00005587bfeb329d <unavailable> + 4765

    5    libc.so.6                          0x00002b0d85f33460 __libc_start_main +
    245

    6    tmpw7rx87fs                        0x00005587bfeb2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // code here\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpib307rji/tmpib307rji.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdf3dfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdf3af5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdf3af5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdf3af47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpib307rji                        0x00005555ea6b61b1 <unavailable> + 4529

    5    libc.so.6                          0x00002afdf3fea460 __libc_start_main +
    245

    6    tmpib307rji                        0x00005555ea6b5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // your code here\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpnc6jhdin/tmpnc6jhdin.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c02f70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c02c67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c02c67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c02c667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnc6jhdin                        0x0000564895801227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2c0315c460 __libc_start_main +
    245

    6    tmpnc6jhdin                        0x0000564895800e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    for i in 1..<a {\n        if (i * i * i) ==\
    \ a {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp1257eeqv/tmp1257eeqv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba800d19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba800a10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba800a10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba800a0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1257eeqv                        0x000055ba79ec7331 <unavailable> + 4913

    5    libc.so.6                          0x00002ba800f05460 __libc_start_main +
    245

    6    tmp1257eeqv                        0x000055ba79ec6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    for i in 1...a {\n        if i * i * i == a\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b27a108dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27a0d84561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27a0d84286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27a0d8413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27a0d83bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3htwx4ur                        0x000055896a724769 <unavailable> + 5993

    6    tmp3htwx4ur                        0x000055896a7243b7 <unavailable> + 5047

    7    libc.so.6                          0x00002b27a1279460 __libc_start_main +
    245

    8    tmp3htwx4ur                        0x000055896a723fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmprpy0c9xi/tmprpy0c9xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c9a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c9765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c9765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c97647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpy0c9xi                        0x00005631e5d841b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad6c9c5a460 __libc_start_main +
    245

    6    tmprpy0c9xi                        0x00005631e5d83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979715
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var s: Double = 0\n    s = (pow(Double(a),\
    \ (1/3)))\n    if s == Double(Int(s)) {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoz3opem1.swift:20:10: error: cannot find 'pow' in scope\n    s\
    \ = (pow(Double(a), (1/3)))\n         ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  if a == 0 {\n    return true\n  } else if a ==\
    \ 1 {\n    return true\n  } else if a == -1 {\n    return true\n  }\n  let abs_a\
    \ = abs(a)\n  let cube = abs_a.squareRoot()\n  let is_int = cube == Int(cube)\n\
    \  return is_int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kpz6zsf.swift:27:20: error: value of type 'Int' has no member\
    \ 'squareRoot'\n  let cube = abs_a.squareRoot()\n             ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 0 {\n        return true\n    }\n    var a = a\n    var i = 0\n  \
    \  while a > 0 {\n        i += 1\n        a -= i * i * i\n    }\n    return a\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpge6tmqi9/tmpge6tmqi9.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c3132cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c31023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c31023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c310227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge6tmqi9                        0x000055d6a2a7029d <unavailable> + 4765

    5    libc.so.6                          0x00002b6c31518460 __libc_start_main +
    245

    6    tmpge6tmqi9                        0x000055d6a2a6fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return Double(a).squareRoot().truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.vGJp6f/tmptin37fvq-1.o:tmptin37fvq-1.o:function $s11tmptin37fvq6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // insert code here\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpl1kxgb9_/tmpl1kxgb9_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96ef6bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96ef3b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96ef3b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96ef3b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1kxgb9_                        0x000055b2331ab1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b96ef8aa460 __libc_start_main +
    245

    6    tmpl1kxgb9_                        0x000055b2331aae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979718
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return Double(a).squareRoot().truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.vGJp6f/tmptin37fvq-1.o:tmptin37fvq-1.o:function $s11tmptin37fvq6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % Int(pow(Double(a), (1.0 / 3.0)))\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp14611xts.swift:19:20: error: cannot find 'pow' in scope\n    return\
    \ a % Int(pow(Double(a), (1.0 / 3.0))) == 0\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn (a % 9 == 0) && (a != 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpzgut2_9k/tmpzgut2_9k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f2df4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f2dc44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f2dc44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f2dc437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzgut2_9k                        0x000055f60d30a241 <unavailable> + 4673

    5    libc.so.6                          0x00002b7f2e139460 __libc_start_main +
    245

    6    tmpzgut2_9k                        0x000055f60d309ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979718
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvd1zg1qq.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0))\n                    ^~~\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return Int(pow(Double(a), 1.0/3.0)) ** 3 ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps2zdcmwd.swift:19:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(a), 1.0/3.0)) ** 3 == a\n               ^~~\n/tmp/tmps2zdcmwd.swift:19:41:\
    \ error: cannot find operator '**' in scope\n    return Int(pow(Double(a), 1.0/3.0))\
    \ ** 3 == a\n                                        ^~\n"
  stdout: ''
  timestamp: 1659979717
