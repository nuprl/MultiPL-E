language: swift
name: HumanEval_41_car_race_collision
results:
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars_left = [Int](1...n)\n    var cars_right = [Int](1...n)\n\
    \    var collisions = 0\n    while !cars_left.isEmpty {\n        let car_left\
    \ = cars_left.removeFirst()\n        if let index = cars_right.index(of: car_left)\
    \ {\n            cars_right.remove(at: index)\n            collisions += 1\n \
    \       }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpkzbskj_5/tmpkzbskj_5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c88ffec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c88cf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c88cf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c88cf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkzbskj_5                        0x000055f6b6dd15c5 <unavailable> + 5573

    5    libc.so.6                          0x00002b4c891ea460 __libc_start_main +
    245

    6    tmpkzbskj_5                        0x000055f6b6dd1279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    var m = n\n    var sum = 0\n    while (m != 0) {\n\
    \        sum += m\n        m -= 1\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpqipfot46/tmpqipfot46.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53d7b00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53d77f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53d77f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53d77f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqipfot46                        0x000055bd0a70f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b53d7cec460 __libc_start_main +
    245

    6    tmpqipfot46                        0x000055bd0a70ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var car = [Int](0..<n)\n    var count = 0\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if car[i] > car[j] {\n            \
    \    swap(&car[i], &car[j])\n                count += 1\n            }\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpb89xmnsz.swift:16:22: error: overlapping accesses to 'car', but\
    \ modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \                swap(&car[i], &car[j])\n                ~~~~~^~~~~~~~~~~~~~~~~\n\
    \                car.swapAt(i, j)\n/tmp/tmpb89xmnsz.swift:16:31: note: conflicting\
    \ access is here\n                swap(&car[i], &car[j])\n                   \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n*(n-1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8or5dayb/tmp8or5dayb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad199836c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad19952db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad19952d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad19952c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8or5dayb                        0x000055bd81752245 <unavailable> + 4677

    5    libc.so.6                          0x00002ad199a22460 __libc_start_main +
    245

    6    tmp8or5dayb                        0x000055bd81751ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var road = Array(repeating: 0, count: n)\n    var cars =\
    \ Array(repeating: 0, count: n)\n    for i in 0..<n {\n        cars[i] = Int.random(in:\
    \ 1...100)\n    }\n    cars.sort()\n    var collisions = 0\n    var j = n - 1\n\
    \    for i in 0..<n {\n        while j >= 0 && cars[i] - cars[j] < 0 {\n     \
    \       collisions += 1\n            j -= 1\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpyy1enc_l/tmpyy1enc_l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e38180c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e37e77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e37e77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e37e767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyy1enc_l                        0x0000559274640625 <unavailable> + 5669

    5    libc.so.6                          0x00002b8e3836c460 __libc_start_main +
    245

    6    tmpyy1enc_l                        0x00005592746402d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // The answer is that there is a pattern.\n    //\n    //\
    \ When the first car in the right-to-left lane is closest to the median,\n   \
    \ // the first car in the left-to-right lane (i.e. the car that started first)\
    \ is the\n    // one that's going to collide with it.\n    //\n    // When the\
    \ second car in the right-to-left lane is closest to the median,\n    // the second\
    \ car in the left-to-right lane (i.e. the car that started second) is the\n  \
    \  // one that's going to collide with it.\n    //\n    // and so on.\n    //\n\
    \    // So, the answer is n.\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpqflbp9jt/tmpqflbp9jt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5751c4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5751942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5751942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57519417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqflbp9jt                        0x00005652e22561b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5751e37460 __libc_start_main +
    245

    6    tmpqflbp9jt                        0x00005652e2255e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    if n > 0 {\n        for i in 1...n\
    \ {\n            for j in i+1...n {\n                collisions += 1\n       \
    \     }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0324838c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b032452f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b032452f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b032452f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b032452ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizn_630e                        0x0000562fa0bc9781 <unavailable> + 6017

    6    tmpizn_630e                        0x0000562fa0bc92c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b0324a24460 __libc_start_main +
    245

    8    tmpizn_630e                        0x0000562fa0bc8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var i = 0\n    var j = n-1\n    var counter = 0\n    while\
    \ i < n-1 && j > 0 {\n        if i == j {\n            break\n        }\n    \
    \    if j < i {\n            counter += 1\n            j -= 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpoatn7r5z/tmpoatn7r5z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25aba90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25ab787b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25ab787988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25ab7867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoatn7r5z                        0x000056534b8e51b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b25abc7c460 __libc_start_main +
    245

    6    tmpoatn7r5z                        0x000056534b8e4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return (1..<n).reduce(0, { (acc: Int, curr: Int) -> Int in\n\
    \        return acc + curr\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpxenicct5/tmpxenicct5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7dafccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7dacc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7dacc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7dacc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxenicct5                        0x0000555b99c87385 <unavailable> + 4997

    5    libc.so.6                          0x00002ad7db1b8460 __libc_start_main +
    245

    6    tmpxenicct5                        0x0000555b99c87039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let n = n\n    var numCollisions = 0\n    let speed = Array(1...n)\n\
    \    var leftToRight: [Int] = []\n    var rightToLeft: [Int] = []\n    var stack:\
    \ [Int] = []\n    if n <= 1 {\n        return 0\n    }\n    if n == 2 {\n    \
    \    return 1\n    }\n    for index in 0..<n {\n        leftToRight.append(speed[index])\n\
    \        rightToLeft.append(speed[n - 1 - index])\n    }\n    while stack.count\
    \ < n {\n        if leftToRight.count > 0 && rightToLeft.count > 0 {\n       \
    \     if leftToRight[0] > rightToLeft[0] {\n                rightToLeft.remove(at:\
    \ 0)\n                stack.append(leftToRight[0])\n                leftToRight.remove(at:\
    \ 0)\n            } else {\n                numCollisions += 1\n             \
    \   leftToRight.remove(at: 0)\n                rightToLeft.remove(at: 0)\n   \
    \         }\n        } else if leftToRight.count > 0 {\n            stack.append(leftToRight[0])\n\
    \            leftToRight.remove(at: 0)\n        } else if rightToLeft.count >\
    \ 0 {\n            stack.append(rightToLeft[0])\n            rightToLeft.remove(at:\
    \ 0)\n        }\n    }\n    return numCollisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpk8p8d7qu/tmpk8p8d7qu.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5abc0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5ab904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5ab904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5ab9037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8p8d7qu                        0x000055daed14a685 <unavailable> + 5765

    5    libc.so.6                          0x00002ba5abdf9460 __libc_start_main +
    245

    6    tmpk8p8d7qu                        0x000055daed14a339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var matches = 0\n    var no_matches = 0\n    var left_cars\
    \ = Array(repeating: 0, count: n)\n    var right_cars = Array(repeating: 0, count:\
    \ n)\n    for i in 0..<n {\n        left_cars[i] = i\n        right_cars[i] =\
    \ i\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_cars[i]\
    \ == right_cars[j] {\n                matches += 1\n            } else {\n   \
    \             no_matches += 1\n            }\n        }\n    }\n    return matches\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpl8p_whxw/tmpl8p_whxw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad38661dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad386314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad386314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3863137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8p_whxw                        0x00005624829b7455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad386809460 __libc_start_main +
    245

    6    tmpl8p_whxw                        0x00005624829b7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var leftToRight: Array<Int> = Array(1...n)\n    var rightToLeft:\
    \ Array<Int> = Array(1...n)\n    leftToRight.sortInPlace({ _,_ in return arc4random()\
    \ % 2 == 0 })\n    rightToLeft.sortInPlace({ _,_ in return arc4random() % 2 ==\
    \ 0 })\n    var totalCollisions = 0\n    for left in leftToRight {\n        for\
    \ right in rightToLeft {\n            if left == right {\n                totalCollisions\
    \ += 1\n            }\n        }\n    }\n    return totalCollisions\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp6b5xryol.swift:13:45: error: cannot find 'arc4random' in scope\n\
    \    leftToRight.sortInPlace({ _,_ in return arc4random() % 2 == 0 })\n      \
    \                                      ^~~~~~~~~~\n/tmp/tmp6b5xryol.swift:14:45:\
    \ error: cannot find 'arc4random' in scope\n    rightToLeft.sortInPlace({ _,_\
    \ in return arc4random() % 2 == 0 })\n                                       \
    \     ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    var collision_number\
    \ = 0\n    var left_to_right = [Int](1...n)\n    var right_to_left = [Int](1...n)\n\
    \    while !right_to_left.isEmpty && !left_to_right.isEmpty {\n        var left_to_right_car\
    \ = left_to_right.removeLast()\n        var right_to_left_car = right_to_left.removeLast()\n\
    \        if left_to_right_car == right_to_left_car {\n            collision_number\
    \ += 1\n        } else {\n            if left_to_right_car > right_to_left_car\
    \ {\n                left_to_right.append(left_to_right_car)\n            } else\
    \ {\n                right_to_left.append(right_to_left_car)\n            }\n\
    \        }\n    }\n    return collision_number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp5r_7qwrj/tmp5r_7qwrj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba832f0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba832c01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba832c01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba832c007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5r_7qwrj                        0x00005605735805a5 <unavailable> + 5541

    5    libc.so.6                          0x00002ba8330f6460 __libc_start_main +
    245

    6    tmp5r_7qwrj                        0x0000560573580259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var array = Array(repeating: 0, count: n)\n    var array2\
    \ = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        array[i] = i\n\
    \        array2[i] = i + n\n    }\n    var collisions = 0\n    for (i,a) in array.enumerated()\
    \ {\n        for (j,b) in array2.enumerated() {\n            if a == b {\n   \
    \             collisions += 1\n                array2.remove(at: j)\n        \
    \        break\n            }\n        }\n    }\n    return collisions\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpgdvizn8_/tmpgdvizn8_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eb736dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eb7064b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2eb7064988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2eb70637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdvizn8_                        0x000055668deaa6b5 <unavailable> + 5813

    5    libc.so.6                          0x00002b2eb7559460 __libc_start_main +
    245

    6    tmpgdvizn8_                        0x000055668deaa369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var first_arr: [Int] = []\n    var second_arr: [Int] = []\n\
    \    var first_i = 0\n    var second_i = 0\n    var collision = 0\n    for _ in\
    \ 0..<n {\n        first_arr.append(Int.random(in: 1...100))\n        second_arr.append(Int.random(in:\
    \ 1...100))\n    }\n    first_arr.sort()\n    second_arr.sort()\n    while first_i\
    \ < n && second_i < n {\n        if first_arr[first_i] < second_arr[second_i]\
    \ {\n            collision += n - second_i\n            first_i += 1\n       \
    \ } else {\n            second_i += 1\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpgd3kktla/tmpgd3kktla.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb93fb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb93cacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb93cac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb93cab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgd3kktla                        0x0000563a42925635 <unavailable> + 5685

    5    libc.so.6                          0x00002adb941a1460 __libc_start_main +
    245

    6    tmpgd3kktla                        0x0000563a429252e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var carsLeft = (1...n).map{Car(id: $0, direction: .left)}\n\
    \    var carsRight = (1...n).map{Car(id: $0, direction: .right)}\n    var collisions\
    \ = 0\n    while !carsLeft.isEmpty {\n        let left = carsLeft.removeLast()\n\
    \        let right = carsRight.removeLast()\n        if left.id == right.id {\n\
    \            collisions += 1\n        }\n    }\n    return collisions\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpalgjgyue.swift:11:32: error: cannot find 'Car' in scope\n    var\
    \ carsLeft = (1...n).map{Car(id: $0, direction: .left)}\n                    \
    \           ^~~\n/tmp/tmpalgjgyue.swift:12:33: error: cannot find 'Car' in scope\n\
    \    var carsRight = (1...n).map{Car(id: $0, direction: .right)}\n           \
    \                     ^~~\n"
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var (leftToRightCollisions,rightToLeftCollisions) = (0,0)\n\
    \    // at any time, the number of collisions is the product of the number of\
    \ cars in the road\n    // we could also have a function that outputs the number\
    \ of cars in the road\n    // and a function that outputs the number of collisions\n\
    \    // this code here will be efficient enough to solve the problem\n    for\
    \ i in (1...n) {\n        leftToRightCollisions += i\n        rightToLeftCollisions\
    \ += n - i + 1\n    }\n    return leftToRightCollisions * rightToLeftCollisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpfnx0yxnv/tmpfnx0yxnv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5569354c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b556904bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b556904b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b556904a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnx0yxnv                        0x0000560157505335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5569540460 __libc_start_main +
    245

    6    tmpfnx0yxnv                        0x0000560157504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let x = Array(0..<n)\n    let y = Array(0..<n).reversed()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n    \
    \        if x[i] < y[j] {\n                collisions += 1\n            }\n  \
    \      }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpwvd4zoiz.swift:16:25: error: cannot convert value of type 'Int'\
    \ to expected argument type 'ReversedCollection<[Int]>.Index'\n            if\
    \ x[i] < y[j] {\n                        ^\n"
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return (n * (n - 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmcuqfh61/tmpmcuqfh61.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14cd0edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ccde4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ccde4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ccde37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcuqfh61                        0x0000558190705245 <unavailable> + 4677

    5    libc.so.6                          0x00002b14cd2d9460 __libc_start_main +
    245

    6    tmpmcuqfh61                        0x0000558190704ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: 0
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var c = 0\n    for _ in 1...n {\n        c += n\n    }\n\
    \    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var l = 0 // left to right\n    var r = n - 1 // right to\
    \ left\n    var count = 0\n    var car = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        car[i] = Int.random(in: 0..<n)\n    }\n    car.sort()\n\
    \    for i in 0..<n {\n        if car[i] > l {\n            count += 1\n     \
    \       l += 1\n        } else {\n            count += 1\n            r -= 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpg995vmw_/tmpg995vmw_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b310cc13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b310c90ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b310c90a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b310c9097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg995vmw_                        0x0000556e03c55625 <unavailable> + 5669

    5    libc.so.6                          0x00002b310cdff460 __libc_start_main +
    245

    6    tmpg995vmw_                        0x0000556e03c552d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  let n = n/2\n  //let n = n/2 + 1\n  var ret = 0\n  for i in\
    \ 1...n {\n    for j in i+1...n {\n      ret += 2 * i * j\n    }\n  }\n  return\
    \ ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(car_race_collision(n: 2)\
    \ == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4)\
    \ == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b75f4880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75f4577561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b75f4577286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b75f457713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b75f4576bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5m1864ow                        0x000055d0840cb841 <unavailable> + 6209

    6    tmp5m1864ow                        0x000055d0840cb2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b75f4a6c460 __libc_start_main +
    245

    8    tmp5m1864ow                        0x000055d0840cafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpe8u8jo34/tmpe8u8jo34.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad26169cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad261393b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad261393988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2613927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8u8jo34                        0x000055b0492b11b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ad261888460 __libc_start_main +
    245

    6    tmpe8u8jo34                        0x000055b0492b0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left  = [Int](1...n)\n    var right = [Int](1...n)\n\
    \    return left.reduce(0) { $0 + right.reduce(0) { $0 + ($1 == $2 ? 1 : 0) }\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(car_race_collision(n: 2) == 4)\n\
    assert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4) == 16)\n\
    assert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp_34dc5rd.swift:13:27: error: contextual closure type '(Int, Int)\
    \ throws -> Int' expects 2 arguments, but 1 was used in closure body\n    return\
    \ left.reduce(0) { $0 + right.reduce(0) { $0 + ($1 == $2 ? 1 : 0) } }\n      \
    \                    ^\n/tmp/tmp_34dc5rd.swift:13:50: error: contextual closure\
    \ type '(Int, Int) throws -> Int' expects 2 arguments, but 3 were used in closure\
    \ body\n    return left.reduce(0) { $0 + right.reduce(0) { $0 + ($1 == $2 ? 1\
    \ : 0) } }\n                                                 ^\n"
  stdout: ''
  timestamp: 1660012333
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    // If a car starts at x_0 and moves with speed v, then\
    \ after time t it's at x_0 + t * v.\n    // If two cars moving at different directions\
    \ collide, then their respective positions\n    // are equal at that time.  So\
    \ let's sort the cars by position, and for each pair\n    // (a, b) of cars that\
    \ are neighbors in the sorted list, if a is moving left to right and\n    // b\
    \ is moving right to left, and the cars haven't yet collided, then the time of\
    \ collision\n    // is given by (b.pos - a.pos) / (a.vel - b.vel).  We can now\
    \ compute the time of collision,\n    // and then advance the car positions to\
    \ that time.  If after advancing the cars,\n    // a car is still \"in front\"\
    \ of the other car, then there is another collision.\n    // We can detect that\
    \ case by checking whether the positions of a and b are now equal.\n    // And\
    \ so on, until there are no collisions.\n    \n    // In practice, it's simpler\
    \ and more efficient not to explicitly sort the cars\n    // by position, but\
    \ rather keep a min-heap on the left-to-right cars and\n    // a max-heap on the\
    \ right-to-left cars.  That way we can always easily find\n    // the next pair\
    \ of cars that may collide.\n    \n    // We can do this in O(n * log n) time\
    \ with O(n) space.\n    \n    // This is a little tricky to do:  left-to-right\
    \ cars will be inserted into the min-heap,\n    // and the min-heap's compare\
    \ predicate must take into account their position *and* their velocity.\n    //\
    \ The reason is that two different cars may have the same position at time 0,\
    \ and we must\n    // be able to distinguish between them.  Similarly, right-to-left\
    \ cars will be inserted into\n    // the max-heap, and the max-heap's compare\
    \ predicate must also take into account their position\n    // *and* their velocity.\n\
    \    \n    // It's possible to implement a min-heap that uses a compare predicate\
    \ that takes into account\n    // multiple fields in the element.  The compare\
    \ predicate would return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: '/tmp/tmpgwsclgw4.swift:39:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpcybcov4l/tmpcybcov4l.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5db2a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5daf9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5daf9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5daf9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcybcov4l                        0x000056532a27b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af5db491460 __libc_start_main +
    245

    6    tmpcybcov4l                        0x000056532a27ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var right = Array(0..<n).map {(x: $0, y: true)}\n    var\
    \ left = Array(0..<n).map {(x: $0, y: false)}\n    var output = 0\n    while !right.isEmpty\
    \ {\n        let cur = right.removeFirst()\n        while let idx = left.index(where:\
    \ {$0.x == cur.x}) {\n            left.remove(at: idx)\n            output +=\
    \ 1\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp9_vf7qoy/tmp9_vf7qoy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba39205cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba391d53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba391d53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba391d527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_vf7qoy                        0x000055dea0b89635 <unavailable> + 5685

    5    libc.so.6                          0x00002ba392248460 __libc_start_main +
    245

    6    tmp9_vf7qoy                        0x000055dea0b892e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // The trick is to imagine that each car takes up a range\
    \ of space.  Specifically,\n    // a car coming from the left starts at left_start,\
    \ and ends at left_end, where\n    // left_start is 0, and left_end is left_start\
    \ - n.  Similarly, a car coming from\n    // the right starts at right_start,\
    \ and ends at right_end, where right_start is \n    // n and right_end is right_start\
    \ + n.\n    //\n    // With this in mind, we can see that a collision happens\
    \ when left_start is \n    // in the range [right_start, right_end], or right_start\
    \ is in the range\n    // [left_start, left_end].  To compute the number of collisions,\
    \ we simply\n    // note that the number of collisions is the number of iterations\
    \ in which\n    // left_start is in the range [right_start, right_end].  Similarly,\
    \ we note\n    // that the number of collisions is the number of iterations in\
    \ which\n    // right_start is in the range [left_start, left_end].  So we add\
    \ both of these\n    // numbers together.  One could also simply note that the\
    \ number of collisions\n    // is the number of iterations in which left_start\
    \ = right_start.\n    var left_start = 0\n    var right_start = n\n    var collisions\
    \ = 0\n    // The first 2 for loops do the job of the 2 checks in the previous\
    \ paragraph.\n    for _ in 0..<n {\n        if left_start >= right_start && left_start\
    \ <= right_start + n {\n            collisions += 1\n        }\n        left_start\
    \ -= 1\n    }\n    for _ in 0..<n {\n        if right_start >= left_start && right_start\
    \ <= left_start + n {\n            collisions += 1\n        }\n        right_start\
    \ += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmppm57z3p0/tmppm57z3p0.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af791fb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af791caab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af791caa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af791ca97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppm57z3p0                        0x00005607e3055335 <unavailable> + 4917

    5    libc.so.6                          0x00002af79219f460 __libc_start_main +
    245

    6    tmppm57z3p0                        0x00005607e3054fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  // TODO\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmphs5vgdl6/tmphs5vgdl6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3892e9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3892b95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3892b95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3892b947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs5vgdl6                        0x000055b6e3b121b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b389308a460 __libc_start_main +
    245

    6    tmphs5vgdl6                        0x000055b6e3b11e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let l = Array(0..<n)\n    let r = Array(0..<n).reversed()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n    \
    \        if l[i] == r[j] {\n                collisions += 1\n            }\n \
    \       }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp4oy38m88.swift:16:26: error: cannot convert value of type 'Int'\
    \ to expected argument type 'ReversedCollection<[Int]>.Index'\n            if\
    \ l[i] == r[j] {\n                         ^\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_times: [Int] = []\n    var right_to_left_times:\
    \ [Int] = []\n    for i in 1 ... n {\n        left_to_right_times.append(i)\n\
    \        right_to_left_times.append(n + 1 - i)\n    }\n    return counting_sort(input:\
    \ left_to_right_times + right_to_left_times)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp5nirxr__.swift:17:12: error: cannot find 'counting_sort' in scope\n\
    \    return counting_sort(input: left_to_right_times + right_to_left_times)\n\
    \           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var car_positions: [Int] = []\n    var car_movements: [Int]\
    \ = []\n    var car_movement_indexes: [Int] = []\n    var collision_count = 0\n\
    \    \n    for i in 0..<n {\n        car_positions.append(i)\n        car_movements.append(1)\n\
    \        car_movement_indexes.append(i)\n    }\n    \n    for i in 0..<n {\n \
    \       car_positions.append(i)\n        car_movements.append(-1)\n        car_movement_indexes.append(i\
    \ + n)\n    }\n    \n    for i in 0..<car_positions.count {\n        for j in\
    \ 0..<car_positions.count {\n            if car_movements[i] != car_movements[j]\
    \ && car_positions[i] == car_positions[j] {\n                car_movement_indexes[i]\
    \ = j\n                car_movement_indexes[j] = i\n            }\n        }\n\
    \    }\n    \n    for i in 0..<car_positions.count {\n        let index = car_movement_indexes[i]\n\
    \        car_positions[index] += car_movements[index]\n        if car_positions[index]\
    \ == car_positions[i] {\n            collision_count += 1\n        }\n    }\n\
    \    \n    return collision_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpmg4lijbl/tmpmg4lijbl.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af922acfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9227c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9227c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9227c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg4lijbl                        0x000055cc8f613555 <unavailable> + 5461

    5    libc.so.6                          0x00002af922cbb460 __libc_start_main +
    245

    6    tmpmg4lijbl                        0x000055cc8f613209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let n = n\n    var n1:Int = 0\n    var n2:Int = 0\n    var\
    \ left:[Int] = []\n    var right:[Int] = []\n    let max1 = Int.random(in: 1..<n)\n\
    \    let max2 = Int.random(in: 1..<n)\n    for _ in 0..<max1 {\n        left.append(Int.random(in:\
    \ 0..<n))\n    }\n    for _ in 0..<max2 {\n        right.append(Int.random(in:\
    \ 0..<n))\n    }\n    for i in 0..<max1 {\n        for j in 0..<max2 {\n     \
    \       if(left[i]>right[j]){\n                n1 += 1\n            }\n      \
    \  }\n    }\n    for i in 0..<max1 {\n        for j in 0..<max2 {\n          \
    \  if(left[i]<right[j]){\n                n2 += 1\n            }\n        }\n\
    \    }\n    return n1+n2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpc2hoydxu/tmpc2hoydxu.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff34178c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff33e6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff33e6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff33e6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2hoydxu                        0x000055c535c6a515 <unavailable> + 5397

    5    libc.so.6                          0x00002aff34364460 __libc_start_main +
    245

    6    tmpc2hoydxu                        0x000055c535c6a1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let m = (1...n).map { (i: Int) -> [Int] in [i] }\n    return\
    \ rec_car_race_collision(l: m, r: m)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp01e6_xoh.swift:12:12: error: cannot find 'rec_car_race_collision'\
    \ in scope\n    return rec_car_race_collision(l: m, r: m)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // number of cars travelling from left to right\n    // number\
    \ of cars travelling from right to left\n    var num_left_right = n\n    var num_right_left\
    \ = n\n    var counter = 0\n    // We can use the n's as an index\n    while (num_left_right\
    \ > 0 && num_right_left > 0) {\n        if (num_left_right == num_right_left)\
    \ {\n            counter += num_left_right\n            num_left_right -= 1\n\
    \            num_right_left -= 1\n        } else if (num_left_right > num_right_left)\
    \ {\n            counter += num_right_left\n            num_left_right -= num_right_left\n\
    \        } else {\n            counter += num_left_right\n            num_right_left\
    \ -= num_left_right\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpt11bjmqy/tmpt11bjmqy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b42f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b3fecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b3fec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b3feb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt11bjmqy                        0x000055c5a3d9b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b04b44e1460 __libc_start_main +
    245

    6    tmpt11bjmqy                        0x000055c5a3d9ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  let leftToRightCars = getCars(direction: .leftToRight, count:\
    \ n)\n  let rightToLeftCars = getCars(direction: .rightToLeft, count: n)\n  var\
    \ collisions: Int = 0\n  for i in 0..<n {\n    let rtlCar = rightToLeftCars[i]\n\
    \    let ltrCar = leftToRightCars[i]\n    if rtlCar.hit(ltrCar) {\n      collisions\
    \ += 1\n    }\n  }\n  return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpgy27cb6p.swift:11:25: error: cannot find 'getCars' in scope\n \
    \ let leftToRightCars = getCars(direction: .leftToRight, count: n)\n         \
    \               ^~~~~~~\n/tmp/tmpgy27cb6p.swift:11:45: error: cannot infer contextual\
    \ base in reference to member 'leftToRight'\n  let leftToRightCars = getCars(direction:\
    \ .leftToRight, count: n)\n                                           ~^~~~~~~~~~~\n\
    /tmp/tmpgy27cb6p.swift:12:25: error: cannot find 'getCars' in scope\n  let rightToLeftCars\
    \ = getCars(direction: .rightToLeft, count: n)\n                        ^~~~~~~\n\
    /tmp/tmpgy27cb6p.swift:12:45: error: cannot infer contextual base in reference\
    \ to member 'rightToLeft'\n  let rightToLeftCars = getCars(direction: .rightToLeft,\
    \ count: n)\n                                           ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmprvj6rlr0/tmprvj6rlr0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05adeb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05adbb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05adbb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05adbaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvj6rlr0                        0x00005623dd6be1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b05ae0a5460 __libc_start_main +
    245

    6    tmprvj6rlr0                        0x00005623dd6bde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var collidingCars\
    \ = 0\n    // First, sort the left-to-right cars according to their starting position\n\
    \    var leftToRightCars: [Int] = (0..<n).map { _ in Int.random(in: 0..<100000)\
    \ }\n    leftToRightCars.sort()\n    // Second, sort the right-to-left cars according\
    \ to their starting position\n    var rightToLeftCars: [Int] = (0..<n).map { _\
    \ in Int.random(in: 0..<100000) }\n    rightToLeftCars.sort()\n    // Third, loop\
    \ through each pair of cars.  For each pair, find the collision time.\n    //\
    \ Increment the count of colliding cars by 1 if the collision time is positive.\n\
    \    for idx in 0..<n {\n        let collisionTime = (leftToRightCars[idx] - rightToLeftCars[idx])\
    \ / 2\n        if collisionTime > 0 {\n            collidingCars += 1\n      \
    \  }\n    }\n    return collidingCars\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp7d031ty_/tmp7d031ty_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95744cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95741c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95741c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95741c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d031ty_                        0x00005569e1f816a5 <unavailable> + 5797

    5    libc.so.6                          0x00002b95746b9460 __libc_start_main +
    245

    6    tmp7d031ty_                        0x00005569e1f81359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let y_coordinate = Array<Double>(repeating: 0, count: n)\n\
    \    let x_coordinate = Array<Double>(repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        y_coordinate[i] = Double(i)\n        x_coordinate[i] = pow(Double(i+1),\
    \ 2)\n    }\n    return collision(y_coordinate: y_coordinate, x_coordinate: x_coordinate)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp1yvhwv3s.swift:14:21: error: cannot assign through subscript: 'y_coordinate'\
    \ is a 'let' constant\n        y_coordinate[i] = Double(i)\n        ~~~~~~~~~~~~^\n\
    /tmp/tmp1yvhwv3s.swift:11:5: note: change 'let' to 'var' to make it mutable\n\
    \    let y_coordinate = Array<Double>(repeating: 0, count: n)\n    ^~~\n    var\n\
    /tmp/tmp1yvhwv3s.swift:15:27: error: cannot find 'pow' in scope\n        x_coordinate[i]\
    \ = pow(Double(i+1), 2)\n                          ^~~\n/tmp/tmp1yvhwv3s.swift:15:21:\
    \ error: cannot assign through subscript: 'x_coordinate' is a 'let' constant\n\
    \        x_coordinate[i] = pow(Double(i+1), 2)\n        ~~~~~~~~~~~~^\n/tmp/tmp1yvhwv3s.swift:12:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let x_coordinate = Array<Double>(repeating:\
    \ 0, count: n)\n    ^~~\n    var\n/tmp/tmp1yvhwv3s.swift:17:12: error: cannot\
    \ find 'collision' in scope\n    return collision(y_coordinate: y_coordinate,\
    \ x_coordinate: x_coordinate)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var first_car_positions = [Int]()\n    var second_car_positions\
    \ = [Int]()\n    for i in 0...n-1 {\n        first_car_positions.append(i)\n \
    \       second_car_positions.append(i+n)\n    }\n    var count = 0\n    var first_index\
    \ = 0\n    var second_index = n-1\n    while first_index < n && second_index >=\
    \ 0 {\n        if first_car_positions[first_index] < second_car_positions[second_index]\
    \ {\n            count += 1\n            first_index += 1\n        } else {\n\
    \            second_index -= 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2gixnqzq/tmp2gixnqzq.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68cadc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68caabab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68caaba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68caab97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gixnqzq                        0x000055c0e926f445 <unavailable> + 5189

    5    libc.so.6                          0x00002b68cafaf460 __libc_start_main +
    245

    6    tmp2gixnqzq                        0x000055c0e926f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return (n * (n - 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmcuqfh61/tmpmcuqfh61.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14cd0edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ccde4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ccde4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ccde37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcuqfh61                        0x0000558190705245 <unavailable> + 4677

    5    libc.so.6                          0x00002b14cd2d9460 __libc_start_main +
    245

    6    tmpmcuqfh61                        0x0000558190704ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var rightToLeft = [Int]()\n    var leftToRight = [Int]()\n\
    \    var collisionCount = 0\n    \n    // Generate n random numbers between 0\
    \ and n-1\n    for _ in 0..<n {\n        rightToLeft.append(Int.random(in: 0..<n))\n\
    \        leftToRight.append(Int.random(in: 0..<n))\n    }\n    \n    // Sort both\
    \ arrays\n    leftToRight.sort()\n    rightToLeft.sort()\n    \n    // Find the\
    \ intersection\n    var leftIndex = 0\n    var rightIndex = 0\n    var leftCount\
    \ = leftToRight.count\n    var rightCount = rightToLeft.count\n    \n    while\
    \ leftIndex < leftCount && rightIndex < rightCount {\n        if leftToRight[leftIndex]\
    \ == rightToLeft[rightIndex] {\n            collisionCount += 1\n            leftIndex\
    \ += 1\n            rightIndex += 1\n        } else if leftToRight[leftIndex]\
    \ < rightToLeft[rightIndex] {\n            leftIndex += 1\n        } else {\n\
    \            rightIndex += 1\n        }\n    }\n    \n    return collisionCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp3ev86qv_/tmp3ev86qv_.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0ae7b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0ae4a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0ae4a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0ae4a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ev86qv_                        0x000055bde00a86c5 <unavailable> + 5829

    5    libc.so.6                          0x00002ad0ae99e460 __libc_start_main +
    245

    6    tmp3ev86qv_                        0x000055bde00a8379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var car_collisions = 0\n    var left_car_pos = Array(repeating:\
    \ 0, count: n)\n    var right_car_pos = Array(repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_car_pos[i] = i\n        right_car_pos[i] = n - i\
    \ - 1\n    }\n    var right_index = 0\n    for i in 0..<n {\n        while right_index\
    \ < n && right_car_pos[right_index] <= left_car_pos[i] {\n            right_index\
    \ += 1\n        }\n        car_collisions += right_index - i - 1\n    }\n    return\
    \ car_collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpb5welwo_/tmpb5welwo_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b831bb21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b831b818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b831b818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b831b8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb5welwo_                        0x000055f1106e4455 <unavailable> + 5205

    5    libc.so.6                          0x00002b831bd0d460 __libc_start_main +
    245

    6    tmpb5welwo_                        0x000055f1106e4109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ (i+1)..<n {\n            if i < j {\n                collisions += 1\n     \
    \       }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpjsjoob74/tmpjsjoob74.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed7948cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed79183b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed79183988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed791827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsjoob74                        0x000055c69705a335 <unavailable> + 4917

    5    libc.so.6                          0x00002aed79678460 __libc_start_main +
    245

    6    tmpjsjoob74                        0x000055c697059fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    return n * (n -\
    \ 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(car_race_collision(n: 2) == 4)\n\
    assert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4) == 16)\n\
    assert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpze31wvmu/tmpze31wvmu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b325df42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b325dc39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b325dc39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b325dc387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpze31wvmu                        0x000055b1fee041b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b325e12e460 __libc_start_main +
    245

    6    tmpze31wvmu                        0x000055b1fee03e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var car_left = 1\n    var car_right = n\n    var direction\
    \ = 1\n    var collision = 0\n    while car_left <= n && car_right >= 1 {\n  \
    \      if direction == 1 {\n            car_left += 1\n            if car_left\
    \ == car_right {\n                collision += 1\n            }\n        } else\
    \ {\n            car_right -= 1\n            if car_left == car_right {\n    \
    \            collision += 1\n            }\n        }\n        direction *= -1\n\
    \    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpfyal2edf/tmpfyal2edf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23cf77cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23cf473b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23cf473988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23cf4727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfyal2edf                        0x00005627f3c4a1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b23cf968460 __libc_start_main +
    245

    6    tmpfyal2edf                        0x00005627f3c49e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpvus3w6g0/tmpvus3w6g0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f9a28cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f99f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f99f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f99f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvus3w6g0                        0x0000565049473245 <unavailable> + 4677

    5    libc.so.6                          0x00002b2f9a478460 __libc_start_main +
    245

    6    tmpvus3w6g0                        0x0000565049472ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    let arr = Array(repeating:\
    \ 1, count: n)\n    return arr.count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp_cx2vusv/tmp_cx2vusv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba33c8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba33982b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba33982988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba339817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cx2vusv                        0x0000565451675305 <unavailable> + 4869

    5    libc.so.6                          0x00002aba33e77460 __libc_start_main +
    245

    6    tmp_cx2vusv                        0x0000565451674fb9 <unavailable> + 4025

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var result = 0\n    var left = 0\n    var right = n - 1\n\
    \    var leftCar = Array(repeating: 0, count: n)\n    var rightCar = Array(repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        leftCar[i] = i\n        rightCar[i]\
    \ = n - 1 - i\n    }\n    while left <= right {\n        if leftCar[left] < rightCar[right]\
    \ {\n            result += right - left\n            left += 1\n        } else\
    \ {\n            right -= 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpueqomdn8/tmpueqomdn8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae569031c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae568d28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae568d28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae568d277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpueqomdn8                        0x0000560a4b19c455 <unavailable> + 5205

    5    libc.so.6                          0x00002ae56921d460 __libc_start_main +
    245

    6    tmpueqomdn8                        0x0000560a4b19c109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    assert(n >= 0)\n    if n == 0 {\n        return 0\n    }\n\
    \    var left = [Int]()\n    var right = [Int]()\n    for i in 1...n {\n     \
    \   left.append(i)\n        right.append(n + 1 - i)\n    }\n    return car_race_collision(left,\
    \ right: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpe7cdjbxz.swift:21:44: error: extra argument 'right' in call\n \
    \   return car_race_collision(left, right: right)\n                          \
    \   ~~~~~~~~~~~~~~^~~~~~\n/tmp/tmpe7cdjbxz.swift:21:31: error: cannot convert\
    \ value of type '[Int]' to expected argument type 'Int'\n    return car_race_collision(left,\
    \ right: right)\n                              ^\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if i < j {\n                collisions += 1\n         \
    \   }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp7pueah2g/tmp7pueah2g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b026f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b023eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b023ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b023e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pueah2g                        0x00005637895de335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4b028df460 __libc_start_main +
    245

    6    tmp7pueah2g                        0x00005637895ddfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    if n <= 0 {\n        return 0\n    }\n    \n    if\
    \ n % 2 == 0 {\n        return n * (n - 2)\n    } else {\n        return n * (n\
    \ - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpmx_1r6tv/tmpmx_1r6tv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec03fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec00f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec00f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec00f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmx_1r6tv                        0x0000558a1fbc0245 <unavailable> + 4677

    5    libc.so.6                          0x00002b6ec05e8460 __libc_start_main +
    245

    6    tmpmx_1r6tv                        0x0000558a1fbbfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var i: Int = 0\n    var j: Int = n-1\n    var collision_count:\
    \ Int = 0\n    while i < n && j >= 0 {\n        if i != j {\n            collision_count\
    \ += 1\n        }\n        i += 1\n        j -= 1\n    }\n    return collision_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpqsvh59wg/tmpqsvh59wg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71a2e06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71a2afdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71a2afd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71a2afc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsvh59wg                        0x000055ee8d9ad1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b71a2ff2460 __libc_start_main +
    245

    6    tmpqsvh59wg                        0x000055ee8d9ace69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let m = Int(sqrt(Double(n * n + n) / 2.0))\n    var coll\
    \ = 0\n    for i in 1...m {\n        coll += (n - i)\n    }\n    return coll\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpsx3lmpey.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n * n + n) / 2.0))\n                ^~~~\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int]()\n    var right = [Int]()\n    for i in\
    \ 0..<n {\n        left.append(i)\n        right.append(n-i-1)\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if (left[i] < right[j]) {\n                collisions += 1\n            }\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6qejjecy/tmp6qejjecy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f89575c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f8926cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f8926c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f8926b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qejjecy                        0x0000561b51118445 <unavailable> + 5189

    5    libc.so.6                          0x00002b3f89761460 __libc_start_main +
    245

    6    tmp6qejjecy                        0x0000561b511180f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var leftToRight = Array(repeating:\
    \ true, count: n)\n    var rightToLeft = Array(repeating: false, count: n)\n \
    \   for index in 0..<n {\n        for innerIndex in 0..<n {\n            if leftToRight[index]\
    \ == rightToLeft[innerIndex] {\n                collisions += 1\n            }\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpt15r0wse/tmpt15r0wse.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08940dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0893dd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0893dd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0893dd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt15r0wse                        0x0000557de3514475 <unavailable> + 5237

    5    libc.so.6                          0x00002b08942c8460 __libc_start_main +
    245

    6    tmpt15r0wse                        0x0000557de3514129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    var collisions = 0\n    \n    // n cars are moving\
    \ left to right\n    // n cars are moving right to left\n    // check for collisions\
    \ among these two sets of cars\n    // collision is possible if left car's position\
    \ is less than right car's position\n    // once collision is detected, the left\
    \ car position needs to move to a higher position\n    // but the right car position\
    \ can remain the same; this will prevent a future collision\n    // from being\
    \ detected\n    \n    var lc = [Int](repeating: 0, count: n)\n    var rc = [Int](repeating:\
    \ 0, count: n)\n    \n    for i in 0 ..< n {\n        lc[i] = i + 1\n        rc[i]\
    \ = i + 1\n    }\n    \n    // NOTE:  each time we go through the loop, we remove\
    \ one car from the right side\n    // since we're done with it; on the left side,\
    \ cars are still waiting to race\n    // so we need to keep track of the array\
    \ length we are working with\n    // and remove the cars that have passed by\n\
    \    var len_l = n\n    var len_r = n\n    \n    while len_r > 0 {\n        //\
    \ check for collisions\n        for i in 0 ..< len_l {\n            for j in 0\
    \ ..< len_r {\n                if lc[i] < rc[j] {\n                    collisions\
    \ += 1\n                    // remove the right car from the array\n         \
    \           // so we don't count it twice\n                    rc.remove(at: j)\n\
    \                    len_r -= 1\n                    break\n                }\n\
    \            }\n        }\n        // we are done with the left car; remove it\n\
    \        lc.remove(at: 0)\n        len_l -= 1\n    }\n    \n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b056ff68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b056fc5f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b056fc5f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b056fc5f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b056fc5ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b056fc4c018 <unavailable> + 1355800

    6    tmpfdlkksa2                        0x00005613466aacad <unavailable> + 7341

    7    tmpfdlkksa2                        0x00005613466aa438 <unavailable> + 5176

    8    libc.so.6                          0x00002b0570154460 __libc_start_main +
    245

    9    tmpfdlkksa2                        0x00005613466aa159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return n-1 + car_race_collision(n-1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpcku2__lg.swift:14:37: error: missing argument label 'n:' in call\n\
    \    return n-1 + car_race_collision(n-1)\n                                  \
    \  ^\n                                    n: \n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int](1...n)\n\
    \    var right_to_left = [Int](1...n)\n    right_to_left.reverse()\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp8mj5elxd/tmp8mj5elxd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c82584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c8227bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c8227b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c8227a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mj5elxd                        0x0000563d808165e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b5c82770460 __libc_start_main +
    245

    6    tmp8mj5elxd                        0x0000563d80816299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var result = 0\n    var leftToRight = [Int](repeating: 0,\
    \ count: n)\n    var rightToLeft = [Int](repeating: 0, count: n)\n    for i in\
    \ 0..<n {\n        leftToRight[i] = i\n        rightToLeft[i] = n - i - 1\n  \
    \  }\n    for i in 0..<n {\n        for j in 0..<n {\n            if leftToRight[i]\
    \ == rightToLeft[j] {\n                result += 1\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpo49vkkk7/tmpo49vkkk7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf4b3bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf4b0b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf4b0b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf4b0b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo49vkkk7                        0x00005638c45b1455 <unavailable> + 5205

    5    libc.so.6                          0x00002acf4b5a8460 __libc_start_main +
    245

    6    tmpo49vkkk7                        0x00005638c45b1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ (i+1)..<n {\n            collisions += 1\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp5uwtwgyg/tmp5uwtwgyg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c0fc74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c0f96bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c0f96b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c0f96a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uwtwgyg                        0x0000560cad3cb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7c0fe60460 __libc_start_main +
    245

    6    tmp5uwtwgyg                        0x0000560cad3cafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var ltoR: Array<Int> = []\n    var rtoL: Array<Int> = []\n\
    \    var t: Int = 0\n    var collision: Int = 0\n    var index: Int = 0\n    while\
    \ (ltoR.count != n) {\n        var temp: Int = Int(arc4random_uniform(50))\n \
    \       if (!ltoR.contains(temp)) {\n            ltoR.append(temp)\n        }\n\
    \    }\n    while (rtoL.count != n) {\n        var temp: Int = Int(arc4random_uniform(50))\n\
    \        if (!rtoL.contains(temp)) {\n            rtoL.append(temp)\n        }\n\
    \    }\n    ltoR.sortInPlace()\n    rtoL.sortInPlace()\n    while (t < ltoR[n-1])\
    \ {\n        while (index < n && ltoR[index] == t) {\n            if (rtoL.contains(t))\
    \ {\n                collision += 1\n            }\n            index += 1\n \
    \       }\n        t += 1\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp730e0x75.swift:17:29: error: cannot find 'arc4random_uniform' in\
    \ scope\n        var temp: Int = Int(arc4random_uniform(50))\n               \
    \             ^~~~~~~~~~~~~~~~~~\n/tmp/tmp730e0x75.swift:23:29: error: cannot\
    \ find 'arc4random_uniform' in scope\n        var temp: Int = Int(arc4random_uniform(50))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp730e0x75.swift:28:10:\
    \ error: value of type 'Array<Int>' has no member 'sortInPlace'\n    ltoR.sortInPlace()\n\
    \    ~~~~ ^~~~~~~~~~~\n/tmp/tmp730e0x75.swift:29:10: error: value of type 'Array<Int>'\
    \ has no member 'sortInPlace'\n    rtoL.sortInPlace()\n    ~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    /// The loop tracks the number of\
    \ cars moving left to right.\n    /// Each pass through the loop corresponds to\
    \ a new car moving left to right.\n    for i in 0..<n {\n        collisions +=\
    \ i\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpsc0iwoae/tmpsc0iwoae.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb74a9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb74794b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb74794988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb747937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsc0iwoae                        0x000055f21c960335 <unavailable> + 4917

    5    libc.so.6                          0x00002abb74c89460 __libc_start_main +
    245

    6    tmpsc0iwoae                        0x000055f21c95ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n + n - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpygqtb6t9/tmpygqtb6t9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b859274bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8592442b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8592442988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85924417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygqtb6t9                        0x000055f7120821b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8592937460 __libc_start_main +
    245

    6    tmpygqtb6t9                        0x000055f712081e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let sortedR = [Int](1...n).sorted { x, y in x > y }\n   \
    \ let sortedL = [Int](1...n).sorted { x, y in x < y }\n    var lIndex = 0\n  \
    \  var rIndex = 0\n    var collisions = 0\n    while lIndex < n && rIndex < n\
    \ {\n        if sortedL[lIndex] < sortedR[rIndex] {\n            collisions +=\
    \ n - rIndex\n            lIndex += 1\n        } else {\n            rIndex +=\
    \ 1\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmppb393y6u/tmppb393y6u.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f22f97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f22c8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f22c8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f22c8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppb393y6u                        0x000056051cff5445 <unavailable> + 5189

    5    libc.so.6                          0x00002b2f23183460 __libc_start_main +
    245

    6    tmppb393y6u                        0x000056051cff50f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // YOUR CODE GOES HERE\n    var numCollision = 0\n    var\
    \ iter = 0\n    while iter < n {\n        var temp = iter\n        iter += 1\n\
    \        while temp < n {\n            numCollision += 1\n            temp +=\
    \ 1\n        }\n    }\n    return numCollision\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpklmozges/tmpklmozges.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b6fb11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b6f808b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b6f808988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b6f8077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklmozges                        0x000055bd879b21b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b6b6fcfd460 __libc_start_main +
    245

    6    tmpklmozges                        0x000055bd879b1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_cars = Array(0..<n)\n    var right_cars = Array(0..<n)\n\
    \    var collisions = 0\n    while !right_cars.isEmpty {\n        let left_car\
    \ = left_cars.removeFirst()\n        let right_car = right_cars.removeFirst()\n\
    \        if left_car == right_car {\n            collisions += 1\n        } else\
    \ {\n            left_cars.append(left_car)\n            right_cars.append(right_car)\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpahwciwi8/tmpahwciwi8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08dbe00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08dbaf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08dbaf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08dbaf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahwciwi8                        0x000055ac190dd555 <unavailable> + 5461

    5    libc.so.6                          0x00002b08dbfec460 __libc_start_main +
    245

    6    tmpahwciwi8                        0x000055ac190dd209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    let half1 = n /\
    \ 2\n    let half2 = n - half1\n    return car_race_collision(n: half1) + car_race_collision(n:\
    \ half2) + half1 * half2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpwke_1924/tmpwke_1924.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3132e72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3132b69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3132b69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3132b687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwke_1924                        0x00005647b2d5f245 <unavailable> + 4677

    5    libc.so.6                          0x00002b313305e460 __libc_start_main +
    245

    6    tmpwke_1924                        0x00005647b2d5eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    /// Assume cars are labeled 1 through n.\n    /// We want\
    \ to label the cars going left to right as 1..<n and the cars\n    /// going right\
    \ to left as n+1..<2n\n    /// We also want to label the cars with the same label\
    \ as their initial position\n    var cars_left_to_right = Array(1...n)\n    var\
    \ cars_right_to_left = Array(n...2*n).reversed()\n    /// assert that the two\
    \ sets of cars have the same labels.\n    assert(cars_left_to_right == cars_right_to_left)\n\
    \    /// car_crossings[c] is a list of the cars at the same position as car c.\n\
    \    var car_crossings: [Int: [Int]] = [:]\n    /// add the crossings that are\
    \ already happening\n    for c in cars_left_to_right {\n        car_crossings[c]\
    \ = [c]\n    }\n    /// determine the collisions by looking at the crossings\n\
    \    var collisions = 0\n    for c in cars_left_to_right {\n        /// the cars\
    \ that are at the same position as car c\n        let cars_crossing = car_crossings[c]!\n\
    \        /// assert that car c is in this list\n        assert(cars_crossing.contains(c))\n\
    \        /// car c is going left to right\n        let cars_left_to_right_crossing\
    \ = cars_crossing.filter{$0 <= n}\n        /// car c is going right to left\n\
    \        let cars_right_to_left_crossing = cars_crossing.filter{$0 > n}\n    \
    \    /// assert that the cars in the crossing are all the cars going left to right\
    \ and the cars going right to left\n        assert(cars_left_to_right_crossing\
    \ == cars_left_to_right_crossing)\n        assert(cars_right_to_left_crossing\
    \ == cars_right_to_left_crossing)\n        /// count the collisions\n        collisions\
    \ += cars_left_to_right_crossing.count * cars_right_to_left_crossing.count\n \
    \   }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp9t8unp26.swift:18:34: error: cannot convert value of type 'ReversedCollection<[Int]>'\
    \ to expected argument type '[Int]'\n    assert(cars_left_to_right == cars_right_to_left)\n\
    \                                 ^\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 2 * n - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy67mb_pn/tmpy67mb_pn.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec1b3c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec1b0c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec1b0c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec1b0bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy67mb_pn                        0x000055fdf3e971b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aec1b5b5460 __libc_start_main +
    245

    6    tmpy67mb_pn                        0x000055fdf3e96e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    /// Given an array of n numbers, count the number of\
    \ unique\n    /// pairs of numbers whose sum is zero.\n    func count_zero_sum_pairs(num:\
    \ [Int]) -> Int {\n        var num = num\n        num.sort()\n        var z =\
    \ 0\n        var i = 0\n        var j = num.count - 1\n        while i < j {\n\
    \            let s = num[i] + num[j]\n            if s == 0 {\n              \
    \  z += 1\n                i += 1\n                j -= 1\n            } else\
    \ if s < 0 {\n                i += 1\n            } else {\n                j\
    \ -= 1\n            }\n        }\n        return z\n    }\n    \n    return count_zero_sum_pairs(num:\
    \ Array(0..<n) + Array(-n..<0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpunfzf4_f/tmpunfzf4_f.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3389fd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3389ccab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3389cca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3389cc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunfzf4_f                        0x0000564dc31105e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b338a1bf460 __libc_start_main +
    245

    6    tmpunfzf4_f                        0x0000564dc3110299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpe8u8jo34/tmpe8u8jo34.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad26169cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad261393b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad261393988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2613927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8u8jo34                        0x000055b0492b11b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ad261888460 __libc_start_main +
    245

    6    tmpe8u8jo34                        0x000055b0492b0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    var left_to_right: [Int] = []\n    var right_to_left:\
    \ [Int] = []\n    \n    for i in 0..<n {\n        left_to_right.append(i)\n  \
    \      right_to_left.append(i)\n    }\n    \n    var count = 0\n    \n    while\
    \ !left_to_right.isEmpty && !right_to_left.isEmpty {\n        if left_to_right.first!\
    \ < right_to_left.first! {\n            left_to_right.removeFirst()\n        }\
    \ else if left_to_right.first! > right_to_left.first! {\n            right_to_left.removeFirst()\n\
    \        } else {\n            count += 1\n            left_to_right.removeFirst()\n\
    \            right_to_left.removeFirst()\n        }\n    }\n    \n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpty4wjktg/tmpty4wjktg.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4216dcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4216ac6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4216ac6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4216ac57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpty4wjktg                        0x000055d6a029e5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b4216fbb460 __libc_start_main +
    245

    6    tmpty4wjktg                        0x000055d6a029e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmprvj6rlr0/tmprvj6rlr0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05adeb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05adbb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05adbb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05adbaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvj6rlr0                        0x00005623dd6be1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b05ae0a5460 __libc_start_main +
    245

    6    tmprvj6rlr0                        0x00005623dd6bde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return 2 * n -\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(car_race_collision(n: 2) == 4)\n\
    assert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4) == 16)\n\
    assert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp_d9dqgqn/tmp_d9dqgqn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3364d08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33649ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33649ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33649fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_d9dqgqn                        0x000055d33612e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3364ef4460 __libc_start_main +
    245

    6    tmp_d9dqgqn                        0x000055d33612de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    var collision = 0\n    \n    let mid = n * n * 3\n\
    \    \n    var l = (0...mid).map { _ in arc4random_uniform(UInt32(mid)) + UInt32(n)\
    \ }\n    var r = (0...mid).map { _ in arc4random_uniform(UInt32(mid)) + UInt32(n)\
    \ }\n    \n    l.sort()\n    r.sort()\n    \n    print(l)\n    print(r)\n    \n\
    \    for i in 0..<n {\n        collision += n - (l[i] > r[i] ? i : i + 1)\n  \
    \  }\n    \n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp10crm7zk.swift:16:34: error: cannot find 'arc4random_uniform' in\
    \ scope\n    var l = (0...mid).map { _ in arc4random_uniform(UInt32(mid)) + UInt32(n)\
    \ }\n                                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmp10crm7zk.swift:17:34:\
    \ error: cannot find 'arc4random_uniform' in scope\n    var r = (0...mid).map\
    \ { _ in arc4random_uniform(UInt32(mid)) + UInt32(n) }\n                     \
    \            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var right = [Int]()\n    var left = [Int]()\n    for i in\
    \ 0..<n {\n        right.append(i)\n        left.append(n+i)\n    }\n    var r\
    \ = 0\n    var l = n-1\n    var collisions = 0\n    while r <= l {\n        if\
    \ right[r] > left[l] {\n            collisions += 1\n            r += 1\n    \
    \        l -= 1\n        } else {\n            r += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp13_sxt26/tmp13_sxt26.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdd35a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdd329cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdd329c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdd329b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13_sxt26                        0x0000559c3c384445 <unavailable> + 5189

    5    libc.so.6                          0x00002acdd3791460 __libc_start_main +
    245

    6    tmp13_sxt26                        0x0000559c3c3840f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](1...n)\n    var right_to_left =\
    \ [Int](1...n)\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            collisions\
    \ += 1\n            left_to_right.remove(at: 0)\n            right_to_left.remove(at:\
    \ 0)\n        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.remove(at:\
    \ 0)\n        } else {\n            right_to_left.remove(at: 0)\n        }\n \
    \   }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp9pq0u1fu/tmp9pq0u1fu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa01c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa01922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa01922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa019217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9pq0u1fu                        0x000056209741e4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002baa01e17460 __libc_start_main +
    245

    6    tmp9pq0u1fu                        0x000056209741e179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in (i+1)..<n\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpq5in8n3l/tmpq5in8n3l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84d0407c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84d00feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84d00fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84d00fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5in8n3l                        0x00005569f6dd6335 <unavailable> + 4917

    5    libc.so.6                          0x00002b84d05f3460 __libc_start_main +
    245

    6    tmpq5in8n3l                        0x00005569f6dd5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var coll = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if i<j {\n                coll += 1\n            }\n        }\n\
    \    }\n    return coll\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp6j36u7i4/tmp6j36u7i4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4278f85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4278c7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4278c7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4278c7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6j36u7i4                        0x0000562bad1ff335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4279171460 __libc_start_main +
    245

    6    tmp6j36u7i4                        0x0000562bad1fefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var leftToRightCars: [Int] = []\n    var rightToLeftCars:\
    \ [Int] = []\n    var collisionCount = 0\n    \n    // Creates n cars which start\
    \ at different positions\n    for i in 1...n {\n        leftToRightCars.append(i)\n\
    \        rightToLeftCars.append(2*n - i)\n    }\n    \n    var leftCar = 0\n \
    \   var rightCar = 0\n    \n    // Cars drives at the same speed\n    while leftCar\
    \ < n && rightCar < n {\n        // There is a collision\n        if leftToRightCars[leftCar]\
    \ == rightToLeftCars[rightCar] {\n            collisionCount += 1\n          \
    \  leftCar += 1\n            rightCar += 1\n        }\n        // If left car\
    \ is faster\n        else if leftToRightCars[leftCar] < rightToLeftCars[rightCar]\
    \ {\n            leftCar += 1\n        }\n        // If right car is faster\n\
    \        else {\n            rightCar += 1\n        }\n    }\n    \n    return\
    \ collisionCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpxdwpspbl/tmpxdwpspbl.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af177d9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af177a94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af177a94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af177a937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdwpspbl                        0x000055e92ed68455 <unavailable> + 5205

    5    libc.so.6                          0x00002af177f89460 __libc_start_main +
    245

    6    tmpxdwpspbl                        0x000055e92ed68109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var car_direction: [Int] = [Int](repeating: 0, count: n *\
    \ 2)\n    var car_index: [Int] = [Int](repeating: 0, count: n * 2)\n    for i\
    \ in 0..<n {\n        car_direction[i] = 1\n        car_index[i] = i\n    }\n\
    \    for i in n..<n * 2 {\n        car_direction[i] = -1\n        car_index[i]\
    \ = i\n    }\n    //print(car_direction)\n    //print(car_index)\n    return merge_sort_count(arr:\
    \ &car_index, low: 0, high: n * 2 - 1, direction: &car_direction)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpfwhbim8u.swift:23:12: error: cannot find 'merge_sort_count' in\
    \ scope\n    return merge_sort_count(arr: &car_index, low: 0, high: n * 2 - 1,\
    \ direction: &car_direction)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collision = 0\n    var left_cars = [Int]()\n    var right_cars\
    \ = [Int]()\n    for i in 1...n {\n        left_cars.append(i)\n        right_cars.append(n\
    \ + i)\n    }\n    for l in left_cars {\n        for r in right_cars {\n     \
    \       if l == r {\n                collision += 1\n            }\n        }\n\
    \    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmps54cry1i/tmps54cry1i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bbc76fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bbc466b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bbc466988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bbc4657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps54cry1i                        0x000055b2499b35a5 <unavailable> + 5541

    5    libc.so.6                          0x00002b9bbc95b460 __libc_start_main +
    245

    6    tmps54cry1i                        0x000055b2499b3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // first we will model the infinite line as a finite line\
    \ of length n\n    // we will make all the cars driving right to left to appear\
    \ on the negative line,\n    // and make all the cars driving left to right to\
    \ appear on the positive line.\n    var freq = Array(repeating: 0, count: n)\n\
    \    // freq[i] will store the frequency of the number i in the array.\n    for\
    \ i in 0..<n {\n        freq[n - i - 1] += 1\n        freq[i] += 1\n    }\n  \
    \  var res = 0\n    for f in freq {\n        res += f * (f - 1) / 2\n    }\n \
    \   return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpob_nyl9u/tmpob_nyl9u.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0051365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b005105cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b005105c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b005105b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpob_nyl9u                        0x000055c1959375b5 <unavailable> + 5557

    5    libc.so.6                          0x00002b0051551460 __libc_start_main +
    245

    6    tmpob_nyl9u                        0x000055c195937269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    guard n > 0 else {\n        return 0\n    }\n    var set\
    \ = Set<Int>()\n    for i in 1...n {\n        set.insert(i)\n    }\n    return\
    \ car_race_collision(n: n, pos: 1, set: set)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpvu7dj67c.swift:18:30: error: extra arguments at positions #2, #3\
    \ in call\n    return car_race_collision(n: n, pos: 1, set: set)\n           \
    \                  ^\n/tmp/tmpvu7dj67c.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012303
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    let s: Set<Int> = Set(1...n)\n    for\
    \ x in s {\n        let y = n+1-x\n        if s.contains(y) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnu6xb5km/tmpnu6xb5km.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53230fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5322df1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5322df1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5322df07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnu6xb5km                        0x0000559e888b3575 <unavailable> + 5493

    5    libc.so.6                          0x00002b53232e6460 __libc_start_main +
    245

    6    tmpnu6xb5km                        0x0000559e888b3229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var n1 = 0\n    var n2 = n-1\n    var result = 0\n    while\
    \ n1 < n {\n        if n1 == n2 {\n            result += 1\n        } else if\
    \ n1 > n2 {\n            result += 2\n        }\n        n1 += 1\n        n2 -=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpesw2n0aa/tmpesw2n0aa.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43033aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43030a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43030a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43030a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpesw2n0aa                        0x0000562e8b17d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b4303596460 __libc_start_main +
    245

    6    tmpesw2n0aa                        0x0000562e8b17ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    var car_queue = Queue<Int>()\n    for car in 1...n\
    \ {\n        car_queue.enqueue(car)\n    }\n    \n    var collision_count = 0\n\
    \    var car_buffer = Array<Int>()\n    \n    while !car_queue.isEmpty() {\n \
    \       let dequeued_car = car_queue.dequeue()!\n        car_buffer.append(dequeued_car)\n\
    \        \n        while !car_buffer.isEmpty() {\n            if car_buffer.first!\
    \ == dequeued_car {\n                car_buffer.removeFirst()\n            } else\
    \ {\n                collision_count += 1\n                car_buffer.removeFirst()\n\
    \            }\n        }\n    }\n    \n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpyvov3ena.swift:12:21: error: cannot find 'Queue' in scope\n   \
    \ var car_queue = Queue<Int>()\n                    ^~~~~\n/tmp/tmpyvov3ena.swift:24:27:\
    \ error: cannot call value of non-function type 'Bool'\n        while !car_buffer.isEmpty()\
    \ {\n                          ^      ~~\n                                 \n"
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var num_collisions = 0\n    for i in 0..<n {\n        for\
    \ j in (i+1)..<n {\n            num_collisions += 1\n        }\n    }\n    return\
    \ num_collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpti_d6dh3/tmpti_d6dh3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38baf9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38bac95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38bac95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38bac947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpti_d6dh3                        0x0000561fa624b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b38bb18a460 __libc_start_main +
    245

    6    tmpti_d6dh3                        0x0000561fa624afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // TODO: implement me\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpm7p2ebvn/tmpm7p2ebvn.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b48243c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b47f3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b47f3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b47f397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7p2ebvn                        0x000055965bef01b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5b4842f460 __libc_start_main +
    245

    6    tmpm7p2ebvn                        0x000055965beefe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpcybcov4l/tmpcybcov4l.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5db2a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5daf9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5daf9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5daf9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcybcov4l                        0x000056532a27b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af5db491460 __libc_start_main +
    245

    6    tmpcybcov4l                        0x000056532a27ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: -1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars = Array(repeating: Array(repeating: 0, count: n),\
    \ count: n)\n    var x = 0\n    var y = 0\n    var dirX = 1\n    var dirY = 1\n\
    \    var total = 0\n    while (x >= 0 && x < n && y >= 0 && y < n) {\n       \
    \ if cars[x][y] != 0 {\n            total += 1\n        }\n        cars[x][y]\
    \ += 1\n        x += dirX\n        y += dirY\n        if x == n - 1 {\n      \
    \      dirX = -1\n        }\n        if x == 0 {\n            dirX = 1\n     \
    \   }\n        if y == n - 1 {\n            dirY = -1\n        }\n        if y\
    \ == 0 {\n            dirY = 1\n        }\n    }\n    return total\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660012309
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var leftToRight: [Bool] = Array(repeating: true, count: n)\n\
    \    var rightToLeft: [Bool] = Array(repeating: false, count: n)\n    var i =\
    \ 0\n    var collision = 0\n    while i < n {\n        leftToRight[i] = true\n\
    \        rightToLeft[i] = false\n        if leftToRight[i] == rightToLeft[i] {\n\
    \            collision += 1\n        }\n        i += 1\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp1z_jg2dx/tmp1z_jg2dx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc09c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc09927b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc09927988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc099267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1z_jg2dx                        0x000055f153ab72e5 <unavailable> + 4837

    5    libc.so.6                          0x00002acc09e1c460 __libc_start_main +
    245

    6    tmp1z_jg2dx                        0x000055f153ab6f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // your code here\n    var amount = 0\n    for x in 1...n\
    \ {\n        for y in 1...n {\n            if (x < y) {\n                amount\
    \ += 1\n            }\n        }\n    }\n    return amount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpygxiwqn0/tmpygxiwqn0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d64120c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d63e17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d63e17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d63e167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygxiwqn0                        0x000055e49589b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5d6430c460 __libc_start_main +
    245

    6    tmpygxiwqn0                        0x000055e49589afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp7crq2m7n/tmp7crq2m7n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d1755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d144cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d144c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d144b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7crq2m7n                        0x000055dd044431b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b05d1941460 __libc_start_main +
    245

    6    tmp7crq2m7n                        0x000055dd04442e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var right_to_left\
    \ = [(Int, Int)]()\n    var left_to_right = [(Int, Int)]()\n    for i in 0..<n\
    \ {\n        right_to_left.append((n - i, n + i))\n        left_to_right.append((i,\
    \ n - i))\n    }\n    let rtl_sorted = right_to_left.sorted { (t1, t2) -> Bool\
    \ in\n        t1.0 < t2.0\n    }\n    let ltr_sorted = left_to_right.sorted {\
    \ (t1, t2) -> Bool in\n        t1.0 < t2.0\n    }\n    var p1 = 0\n    var p2\
    \ = 0\n    var result = 0\n    while p1 < n && p2 < n {\n        if rtl_sorted[p1].0\
    \ < ltr_sorted[p2].0 {\n            p1 += 1\n        } else if rtl_sorted[p1].0\
    \ > ltr_sorted[p2].0 {\n            p2 += 1\n        } else {\n            p1\
    \ += 1\n            p2 += 1\n            result += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpi2k6246l/tmpi2k6246l.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdd9a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdd698b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdd698988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdd6977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2k6246l                        0x0000555d324764e5 <unavailable> + 5349

    5    libc.so.6                          0x00002adbddb8d460 __libc_start_main +
    245

    6    tmpi2k6246l                        0x0000555d32476199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    var left = Set<Int>()\n    var right =\
    \ Set<Int>()\n    for i in 0..<n {\n        left.insert(i)\n        right.insert(i)\n\
    \    }\n    while !left.isEmpty {\n        let c = left.removeFirst()\n      \
    \  if right.contains(c) {\n            count += 1\n            right.remove(c)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpli07al43/tmpli07al43.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e3cc8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e3c986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e3c986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e3c9857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpli07al43                        0x00005634c5d6a595 <unavailable> + 5525

    5    libc.so.6                          0x00002b8e3ce7b460 __libc_start_main +
    245

    6    tmpli07al43                        0x00005634c5d6a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_driving_cars: [Double] = []\n    var right_to_left_driving_cars:\
    \ [Double] = []\n    for _ in 0..<n {\n        left_to_right_driving_cars.append(Double.random(in:\
    \ 0...1000))\n        right_to_left_driving_cars.append(Double.random(in: 0...1000))\n\
    \    }\n    left_to_right_driving_cars.sort()\n    right_to_left_driving_cars.sort()\n\
    \    var num_collisions = 0\n    var i = 0\n    var j = 0\n    var i_max = n\n\
    \    var j_max = n\n    while i < i_max && j < j_max {\n        let c1 = left_to_right_driving_cars[i]\n\
    \        let c2 = right_to_left_driving_cars[j]\n        if c1 > c2 {\n      \
    \      num_collisions += 1\n            j += 1\n            j_max -= 1\n     \
    \   } else {\n            i += 1\n            i_max -= 1\n        }\n    }\n \
    \   return num_collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp5rr4mxsh/tmp5rr4mxsh.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaeb228c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeaf1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeaf1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeaf1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rr4mxsh                        0x000055f772a9c705 <unavailable> + 5893

    5    libc.so.6                          0x00002adaeb414460 __libc_start_main +
    245

    6    tmp5rr4mxsh                        0x000055f772a9c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    /// Two cars are said to collide iff they are at the same\
    \ position\n    /// at some point in time; since they continue moving, they are\
    \ at different\n    /// positions at a different point in time.\n    /// Note,\
    \ to ensure we don't count a collision more than once,\n    /// it suffices to\
    \ only consider one car moving left to right in\n    /// a single collision.\n\
    \    /// Given a car moving left to right, at time t, it is located at position\
    \ t.\n    /// Given a car moving right to left, at time t, it is located at position\
    \ -t.\n    /// So, a collision happens when the location of the left-to-right\
    \ car equals\n    /// the location of the right-to-left car.\n    /// In other\
    \ words, a collision happens when t equals -t, i.e., when t = 0.\n    /// This\
    \ means that there is only one collision.\n    return 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6da3pxg9/tmp6da3pxg9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b035d614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b035d30bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b035d30b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b035d30a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6da3pxg9                        0x0000555cd61ff1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b035d800460 __libc_start_main +
    245

    6    tmp6da3pxg9                        0x0000555cd61fee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n*(n-1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8or5dayb/tmp8or5dayb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad199836c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad19952db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad19952d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad19952c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8or5dayb                        0x000055bd81752245 <unavailable> + 4677

    5    libc.so.6                          0x00002ad199a22460 __libc_start_main +
    245

    6    tmp8or5dayb                        0x000055bd81751ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012302
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return (n-1)*n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdevx9oqc/tmpdevx9oqc.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75eb561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75eb258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75eb258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75eb2577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdevx9oqc                        0x00005598d3afd245 <unavailable> + 4677

    5    libc.so.6                          0x00002b75eb74d460 __libc_start_main +
    245

    6    tmpdevx9oqc                        0x00005598d3afcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    if n <= 1 {\n        return 0\n    }\n    \n    var\
    \ i = 1\n    var collision = 0\n    \n    while i <= n {\n        collision +=\
    \ i\n        i *= 2\n    }\n    \n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpwhup8_l6/tmpwhup8_l6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b733b01fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b733ad16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b733ad16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b733ad157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhup8_l6                        0x000055d1a314b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b733b20b460 __libc_start_main +
    245

    6    tmpwhup8_l6                        0x000055d1a314ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var s = 0\n    for i in 1...n {\n        for j in 1...n {\n\
    \            if i % j == 0 && i / j > 1 {\n                s += 1\n          \
    \  }\n        }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmip7msj8/tmpmip7msj8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b551a8b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b551a5b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b551a5b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b551a5af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmip7msj8                        0x0000562360e80335 <unavailable> + 4917

    5    libc.so.6                          0x00002b551aaa5460 __libc_start_main +
    245

    6    tmpmip7msj8                        0x0000562360e7ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left: [Int] = []\n    var right: [Int] = []\n    var\
    \ i = 0\n    var j = 0\n    var collision_count = 0\n    while i < n && j < n\
    \ {\n        if left[i] < right[j] {\n            collision_count += j\n     \
    \       i += 1\n        } else {\n            j += 1\n        }\n    }\n    return\
    \ collision_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bb16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2b80d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d2b80d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d2b80d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d2b80cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6d2b60ce83 <unavailable> + 188035

    6    tmpl1u999i7                        0x0000563fb8bd05e2 <unavailable> + 5602

    7    tmpl1u999i7                        0x0000563fb8bd0258 <unavailable> + 4696

    8    libc.so.6                          0x00002b6d2bd02460 __libc_start_main +
    245

    9    tmpl1u999i7                        0x0000563fb8bcff79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(car_race_collision(n: 2) == 4)\n\
    assert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4) == 16)\n\
    assert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpve4bjm1r/tmpve4bjm1r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74c9f57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74c9c4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74c9c4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74c9c4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpve4bjm1r                        0x0000562f578ae3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b74ca143460 __libc_start_main +
    245

    6    tmpve4bjm1r                        0x0000562f578ae0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let m = n/2\n    return m + m * (m - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpyvcbuxx8/tmpyvcbuxx8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac459609c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac459300b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac459300988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4592ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyvcbuxx8                        0x0000561d7972d245 <unavailable> + 4677

    5    libc.so.6                          0x00002ac4597f5460 __libc_start_main +
    245

    6    tmpyvcbuxx8                        0x0000561d7972cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    var cars = [Int](repeating: 0, count:\
    \ n)\n    for i in 0..<n {\n        for j in 0..<n {\n            if cars[i] ==\
    \ cars[j] {\n                count += 1\n            }\n        }\n        cars[i]\
    \ += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpk3snq4hy/tmpk3snq4hy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18bfb82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18bf879b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18bf879988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18bf8787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3snq4hy                        0x0000564796c54455 <unavailable> + 5205

    5    libc.so.6                          0x00002b18bfd6e460 __libc_start_main +
    245

    6    tmpk3snq4hy                        0x0000564796c54109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  // FILL ME IN\n  return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpltjkk1g4/tmpltjkk1g4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfa8fbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfa8cb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfa8cb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfa8cb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltjkk1g4                        0x00005561855d11b5 <unavailable> + 4533

    5    libc.so.6                          0x00002abfa91ab460 __libc_start_main +
    245

    6    tmpltjkk1g4                        0x00005561855d0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let left_to_right_cars: [Int] = [Int](repeating: 1, count:\
    \ n)\n    let right_to_left_cars: [Int] = [Int](repeating: -1, count: n)\n   \
    \ var pos = 0\n    var collisions = 0\n    for (i, v) in left_to_right_cars.enumerated()\
    \ {\n        pos += v\n        if right_to_left_cars[i] < 0 && pos == 0 {\n  \
    \          collisions += 1\n        }\n    }\n    return collisions\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp_2tfov6f/tmp_2tfov6f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3788f6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3788c61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3788c61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3788c607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2tfov6f                        0x000055601b8f5485 <unavailable> + 5253

    5    libc.so.6                          0x00002b3789156460 __libc_start_main +
    245

    6    tmp_2tfov6f                        0x000055601b8f5139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    let\
    \ distance_to_start = abs(left_to_right[0] - right_to_left[0])\n    var collision_count\
    \ = 0\n    while left_to_right.count > 0 && right_to_left.count > 0 {\n      \
    \  var i = 0\n        while i < left_to_right.count {\n            let colliding_car\
    \ = right_to_left[0]\n            if left_to_right[i] < colliding_car {\n    \
    \            // The left car crosses the line, meaning the right car is behind\
    \ the left car.\n                // No collision.\n                left_to_right.remove(at:\
    \ i)\n            } else if left_to_right[i] == colliding_car {\n            \
    \    collision_count += 1\n                // The left car crosses the line, meaning\
    \ the right car is behind the left car.\n                // No collision.\n  \
    \              left_to_right.remove(at: i)\n                right_to_left.remove(at:\
    \ 0)\n            } else {\n                // The right car crosses the line,\
    \ meaning the left car is behind the right car.\n                // No collision.\n\
    \                right_to_left.remove(at: 0)\n            }\n        }\n    }\n\
    \    return collision_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp2vh7ddy7/tmp2vh7ddy7.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaea0b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaea081eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaea081e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaea081d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vh7ddy7                        0x0000564555846635 <unavailable> + 5685

    5    libc.so.6                          0x00002aaea0d13460 __libc_start_main +
    245

    6    tmp2vh7ddy7                        0x00005645558462e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // **** sort the cars left to right ****\n    //\n    //\
    \ **** sort the cars right to left ****\n    //\n    // **** determine the number\
    \ of collisions ****\n    //\n    // **** return the number of collisions ****\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmphogtovys/tmphogtovys.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac68a465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac68a15cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac68a15c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac68a15b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphogtovys                        0x0000561d904ee1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac68a651460 __libc_start_main +
    245

    6    tmphogtovys                        0x0000561d904ede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var curr = 0\n    var total = 0\n    while curr < n {\n \
    \       total += curr\n        curr += 1\n    }\n    return total\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpgo0w89fv/tmpgo0w89fv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb82bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb828b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb828b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb828b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgo0w89fv                        0x000055581f84d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002acb82daa460 __libc_start_main +
    245

    6    tmpgo0w89fv                        0x000055581f84ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var i = 1, j = n, count = 0\n    while i < j {\n        if\
    \ i == j {\n            return count\n        }\n        if i < j {\n        \
    \    i += 1\n            j -= 1\n            count += 1\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpx332bpx6/tmpx332bpx6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04a5894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04a558bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04a558b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04a558a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx332bpx6                        0x000055fbe87d81b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b04a5a80460 __libc_start_main +
    245

    6    tmpx332bpx6                        0x000055fbe87d7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars_left_to_right: [Int] = []\n    var cars_right_to_left:\
    \ [Int] = []\n    for i in 1...n {\n        cars_left_to_right.append(n - i)\n\
    \        cars_right_to_left.append(i)\n    }\n    var collide_count = 0\n    for\
    \ i in 0..<n {\n        if cars_left_to_right[i] == cars_right_to_left[i] {\n\
    \            collide_count += 1\n        }\n    }\n    return collide_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpi9_04q4t/tmpi9_04q4t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba206941c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba206638b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba206638988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2066377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9_04q4t                        0x000055c8c62bd545 <unavailable> + 5445

    5    libc.so.6                          0x00002ba206b2d460 __libc_start_main +
    245

    6    tmpi9_04q4t                        0x000055c8c62bd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // Still have to figure out a test case\n    var cars = [Car]()\n\
    \    var cars_moving_left = [Car]()\n    var cars_moving_right = [Car]()\n   \
    \ var cars_colliding = [Car]()\n    var count = 0\n    \n    // Create n cars\
    \ moving left to right\n    for i in 1...n {\n        let car = Car(distance:\
    \ i, speed: 1, direction: 1)\n        cars.append(car)\n        cars_moving_left.append(car)\n\
    \    }\n    \n    // Create n cars moving right to left\n    for i in 1...n {\n\
    \        let car = Car(distance: i, speed: 1, direction: -1)\n        cars.append(car)\n\
    \        cars_moving_right.append(car)\n    }\n    \n    // Cars are moving\n\
    \    for i in 1...50 {\n        print(\"Time = \\(i)\")\n        for car in cars\
    \ {\n            car.distance += car.speed * car.direction\n            print(\"\
    Car traveling \\(car.direction) at distance \\(car.distance)\")\n        }\n \
    \       cars_colliding = cars_moving_left.filter { cars_moving_right.contains($0)\
    \ }\n        print(\"cars_colliding = \\(cars_colliding)\")\n        count +=\
    \ cars_colliding.count\n    }\n    \n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpc97unj_4.swift:12:17: error: cannot find 'Car' in scope\n    var\
    \ cars = [Car]()\n                ^~~\n/tmp/tmpc97unj_4.swift:12:16: error: cannot\
    \ call value of non-function type '[Any]'\n    var cars = [Car]()\n          \
    \     ^    ~~\n                    \n/tmp/tmpc97unj_4.swift:13:29: error: cannot\
    \ find 'Car' in scope\n    var cars_moving_left = [Car]()\n                  \
    \          ^~~\n/tmp/tmpc97unj_4.swift:13:28: error: cannot call value of non-function\
    \ type '[Any]'\n    var cars_moving_left = [Car]()\n                         \
    \  ^    ~~\n                                \n/tmp/tmpc97unj_4.swift:14:30: error:\
    \ cannot find 'Car' in scope\n    var cars_moving_right = [Car]()\n          \
    \                   ^~~\n/tmp/tmpc97unj_4.swift:14:29: error: cannot call value\
    \ of non-function type '[Any]'\n    var cars_moving_right = [Car]()\n        \
    \                    ^    ~~\n                                 \n/tmp/tmpc97unj_4.swift:15:27:\
    \ error: cannot find 'Car' in scope\n    var cars_colliding = [Car]()\n      \
    \                    ^~~\n/tmp/tmpc97unj_4.swift:15:26: error: cannot call value\
    \ of non-function type '[Any]'\n    var cars_colliding = [Car]()\n           \
    \              ^    ~~\n                              \n/tmp/tmpc97unj_4.swift:20:19:\
    \ error: cannot find 'Car' in scope\n        let car = Car(distance: i, speed:\
    \ 1, direction: 1)\n                  ^~~\n/tmp/tmpc97unj_4.swift:27:19: error:\
    \ cannot find 'Car' in scope\n        let car = Car(distance: i, speed: 1, direction:\
    \ -1)\n                  ^~~\n"
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmprvj6rlr0/tmprvj6rlr0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05adeb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05adbb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05adbb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05adbaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvj6rlr0                        0x00005623dd6be1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b05ae0a5460 __libc_start_main +
    245

    6    tmprvj6rlr0                        0x00005623dd6bde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012303
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    var lcarIndex = n\n    var rcarIndex = n\n    var lcarArray\
    \ = [Int](count: n, repeatedValue: n-1)\n    var rcarArray = [Int](count: n, repeatedValue:\
    \ n-1)\n    var collisionCounter = 0\n    \n    // Initialize the array with values\
    \ of the cars in opposite directions\n    for var index = n; index > 0; index--\
    \ {\n        lcarArray[index-1] = index-1\n        rcarArray[index-1] = index-1\n\
    \    }\n    \n    while (lcarIndex >= 0) && (rcarIndex >= 0) {\n        if lcarArray[lcarIndex]\
    \ == rcarArray[rcarIndex] {\n            collisionCounter++\n            lcarIndex--\n\
    \            rcarIndex--\n        } else if lcarArray[lcarIndex] > rcarArray[rcarIndex]\
    \ {\n            lcarIndex--\n        } else {\n            rcarIndex--\n    \
    \    }\n    }\n    \n    return collisionCounter\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpd4gjnryl.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var index = n; index > 0; index-- {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd4gjnryl.swift:14:21: error: no exact matches in call to initializer \n\
    \    var lcarArray = [Int](count: n, repeatedValue: n-1)\n                   \
    \ ^\n/tmp/tmpd4gjnryl.swift:14:21: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var lcarArray = [Int](count: n, repeatedValue:\
    \ n-1)\n                    ^\n/tmp/tmpd4gjnryl.swift:14:21: note: candidate has\
    \ partially matching parameter list (repeating: Int, count: Int)\n    var lcarArray\
    \ = [Int](count: n, repeatedValue: n-1)\n                    ^\n/tmp/tmpd4gjnryl.swift:15:21:\
    \ error: no exact matches in call to initializer \n    var rcarArray = [Int](count:\
    \ n, repeatedValue: n-1)\n                    ^\n/tmp/tmpd4gjnryl.swift:15:21:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var rcarArray = [Int](count: n, repeatedValue: n-1)\n            \
    \        ^\n/tmp/tmpd4gjnryl.swift:15:21: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var rcarArray = [Int](count:\
    \ n, repeatedValue: n-1)\n                    ^\n/tmp/tmpd4gjnryl.swift:26:29:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  collisionCounter++\n                            ^~\n/tmp/tmpd4gjnryl.swift:27:22:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  lcarIndex--\n                     ^~\n/tmp/tmpd4gjnryl.swift:28:22: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n            rcarIndex--\n\
    \                     ^~\n/tmp/tmpd4gjnryl.swift:30:22: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            lcarIndex--\n             \
    \        ^~\n/tmp/tmpd4gjnryl.swift:32:22: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            rcarIndex--\n                     ^~\n"
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars_1 = Array(repeating: 0, count: n)\n    var cars_2\
    \ = Array(repeating: n, count: n)\n    var cnt = 0\n    for i in 0..<n {\n   \
    \     cars_1[i] = i\n        cars_2[i] = n - i - 1\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if cars_1[i] == cars_2[j] {\n     \
    \           cnt += 1\n            }\n        }\n    }\n    return cnt\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpckeayi_z/tmpckeayi_z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3268234c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3267f2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3267f2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3267f2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckeayi_z                        0x000055df872f9455 <unavailable> + 5205

    5    libc.so.6                          0x00002b3268420460 __libc_start_main +
    245

    6    tmpckeayi_z                        0x000055df872f9109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let cars = Array(0..<n)\n    let leftToRight: [Int] = cars.shuffled()\n\
    \    let rightToLeft: [Int] = cars.shuffled()\n    var count = 0\n    for i in\
    \ 0..<n {\n        if leftToRight[i] == rightToLeft[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4grfvvuk/tmp4grfvvuk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fe9742c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fe9439b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fe9439988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fe94387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4grfvvuk                        0x00005607a4ad8525 <unavailable> + 5413

    5    libc.so.6                          0x00002b7fe992e460 __libc_start_main +
    245

    6    tmp4grfvvuk                        0x00005607a4ad81d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](0..<n)\n    var right_to_left_cars\
    \ = [Int](0..<n)\n    var num_collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            let left_to_right_car = left_to_right_cars[i]\n  \
    \          let right_to_left_car = right_to_left_cars[j]\n            if left_to_right_car\
    \ == right_to_left_car {\n                num_collisions += 1\n            }\n\
    \        }\n    }\n    return num_collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpf6b32t85/tmpf6b32t85.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae60e05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae60dd52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae60dd52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae60dd517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6b32t85                        0x0000562e15c0c515 <unavailable> + 5397

    5    libc.so.6                          0x00002ae60e247460 __libc_start_main +
    245

    6    tmpf6b32t85                        0x0000562e15c0c1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var dict: [Int: Int] = [:]\n    var res = 0\n    for i in\
    \ 0..<n {\n        if let val = dict[i + 1] {\n            res += val\n      \
    \  }\n        dict[i + 1] = dict[i + 1, default: 0] + 1\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2svzkgig/tmp2svzkgig.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dbf933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dbf62ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dbf62a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dbf6297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2svzkgig                        0x000055639297c555 <unavailable> + 5461

    5    libc.so.6                          0x00002b7dbfb1f460 __libc_start_main +
    245

    6    tmp2svzkgig                        0x000055639297c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let left = Array(1...n)\n    let right = Array(1...n).reversed()\n\
    \    var collisions = 0\n    var leftIdx = 0\n    var rightIdx = 0\n    while\
    \ leftIdx < left.count && rightIdx < right.count {\n        if left[leftIdx] ==\
    \ right[rightIdx] {\n            collisions += 1\n            leftIdx += 1\n \
    \           rightIdx += 1\n        } else if left[leftIdx] < right[rightIdx] {\n\
    \            leftIdx += 1\n        } else {\n            rightIdx += 1\n     \
    \   }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp9juha5go.swift:17:35: error: cannot convert value of type 'Int'\
    \ to expected argument type 'ReversedCollection<[Int]>.Index'\n        if left[leftIdx]\
    \ == right[rightIdx] {\n                                  ^\n/tmp/tmp9juha5go.swift:21:41:\
    \ error: cannot convert value of type 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n\
    \        } else if left[leftIdx] < right[rightIdx] {\n                       \
    \                 ^\n"
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var x: [Int] = [Int](repeating: -1, count: n)\n    var y:\
    \ [Int] = [Int](repeating: -1, count: n)\n    for i in 0..<n {\n        x[i] =\
    \ Int.random(in: 1...1000)\n        y[i] = Int.random(in: 1...1000)\n    }\n \
    \   var len_x = n, len_y = n\n    while len_x > 0 && len_y > 0 {\n        if x[len_x\
    \ - 1] == y[len_y - 1] {\n            len_x -= 1\n            len_y -= 1\n   \
    \     } else if x[len_x - 1] > y[len_y - 1] {\n            len_x -= 1\n      \
    \  } else {\n            len_y -= 1\n        }\n    }\n    return len_x + len_y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6dimjpua/tmp6dimjpua.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb5eafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb5ba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb5ba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb5ba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6dimjpua                        0x0000556ab914e505 <unavailable> + 5381

    5    libc.so.6                          0x00002b2cb609b460 __libc_start_main +
    245

    6    tmp6dimjpua                        0x0000556ab914e1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // (1) index is car number, value is car's position\n   \
    \ var lto_r = Array(repeating: 0, count: n) // 0..<n\n    var rto_l = Array(repeating:\
    \ 0, count: n) // 0..<n\n    // (2) time starts\n    for t in 1...n {\n      \
    \  // (3) pick a car number\n        for i in 0..<n {\n            // (4) note\
    \ the car's position\n            lto_r[i] = t\n            rto_l[i] = n - t\n\
    \        }\n        // (5) check for collision\n        for i in 0..<n {\n   \
    \         for j in 0..<n {\n                if lto_r[i] == rto_l[j] {\n      \
    \              // collision\n                    print(\"collision at time \\\
    (t)\")\n                }\n            }\n        }\n    }\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpomtmefge/tmpomtmefge.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac407d9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac407a94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac407a94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac407a937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomtmefge                        0x000055a4d36fea15 <unavailable> + 6677

    5    libc.so.6                          0x00002ac407f89460 __libc_start_main +
    245

    6    tmpomtmefge                        0x000055a4d36fe6c9 <unavailable> + 5833

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    let queue = LinkedListQueue<Int>()\n \
    \   var car = 0\n    while car < n {\n        // the car entering the intersection\
    \ is either:\n        // - an out-going car, or\n        // - a in-coming car\
    \ that has not yet collided with any out-going car.\n        if (queue.isEmpty()\
    \ || car != queue.dequeue()!) {\n            queue.enqueue(car)\n        } else\
    \ {\n            count += 1\n        }\n        car += 1\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpaylevmw2.swift:12:17: error: cannot find 'LinkedListQueue' in scope\n\
    \    let queue = LinkedListQueue<Int>()\n                ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return -1;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmphdzyu_ie/tmphdzyu_ie.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97513a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b975109db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b975109d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b975109c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdzyu_ie                        0x000055d4bb2f51b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9751592460 __libc_start_main +
    245

    6    tmphdzyu_ie                        0x000055d4bb2f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let l2r = Array<Bool>(count: n, repeatedValue: true)\n  \
    \  let r2l = Array<Bool>(count: n, repeatedValue: false)\n    return resolve_collision(l2r\
    \ + r2l)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpl24ckfit.swift:11:15: error: no exact matches in call to initializer\
    \ \n    let l2r = Array<Bool>(count: n, repeatedValue: true)\n              ^\n\
    /tmp/tmpl24ckfit.swift:11:15: note: candidate has partially matching parameter\
    \ list (repeating: Bool, count: Int)\n    let l2r = Array<Bool>(count: n, repeatedValue:\
    \ true)\n              ^\n/tmp/tmpl24ckfit.swift:11:15: note: candidate has partially\
    \ matching parameter list (repeating: Bool, count: Int)\n    let l2r = Array<Bool>(count:\
    \ n, repeatedValue: true)\n              ^\n/tmp/tmpl24ckfit.swift:12:15: error:\
    \ no exact matches in call to initializer \n    let r2l = Array<Bool>(count: n,\
    \ repeatedValue: false)\n              ^\n/tmp/tmpl24ckfit.swift:12:15: note:\
    \ candidate has partially matching parameter list (repeating: Bool, count: Int)\n\
    \    let r2l = Array<Bool>(count: n, repeatedValue: false)\n              ^\n\
    /tmp/tmpl24ckfit.swift:12:15: note: candidate has partially matching parameter\
    \ list (repeating: Bool, count: Int)\n    let r2l = Array<Bool>(count: n, repeatedValue:\
    \ false)\n              ^\n/tmp/tmpl24ckfit.swift:13:12: error: cannot find 'resolve_collision'\
    \ in scope\n    return resolve_collision(l2r + r2l)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012304
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    /// We use two one-dimensional arrays\
    \ to represent the cars driving left to right and\n    /// right to left.  Since\
    \ the cars are infinitely strong, we never need to remove\n    /// any car from\
    \ the array.\n    var cars_left_to_right: [Int] = []\n    var cars_right_to_left:\
    \ [Int] = []\n    /// cars_left_to_right is sorted in increasing order.  cars_right_to_left\
    \ is sorted\n    /// in decreasing order.\n    func insert_into_right_to_left(car:\
    \ Int) {\n        if cars_right_to_left.count == 0 {\n            cars_right_to_left.append(car)\n\
    \            return\n        }\n        /// We do binary search to find the place\
    \ where we need to insert the car.\n        var low = 0\n        var high = cars_right_to_left.count\
    \ - 1\n        while low <= high {\n            let mid = (low + high) / 2\n \
    \           if cars_right_to_left[mid] > car {\n                low = mid + 1\n\
    \            } else {\n                high = mid - 1\n            }\n       \
    \ }\n        cars_right_to_left.insert(car, at: low)\n    }\n    func insert_into_left_to_right(car:\
    \ Int) {\n        if cars_left_to_right.count == 0 {\n            cars_left_to_right.append(car)\n\
    \            return\n        }\n        /// We do binary search to find the place\
    \ where we need to insert the car.\n        var low = 0\n        var high = cars_left_to_right.count\
    \ - 1\n        while low <= high {\n            let mid = (low + high) / 2\n \
    \           if cars_left_to_right[mid] < car {\n                low = mid + 1\n\
    \            } else {\n                high = mid - 1\n            }\n       \
    \ }\n        cars_left_to_right.insert(car, at: low)\n    }\n    for i in 0..<n\
    \ {\n        insert_into_right_to_left(car: i)\n        insert_into_left_to_right(car:\
    \ n + i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(car_race_collision(n: 2)\
    \ == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4)\
    \ == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp104i52rs.swift:58:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp104i52rs.swift:57:34: note: to match this opening '('\n        insert_into_left_to_right(car:\
    \ n + i\n                                 ^\n/tmp/tmp104i52rs.swift:77:41: error:\
    \ expected '}' at end of brace statement\nassert(car_race_collision(n: 10) ==\
    \ 100)\n                                        ^\n/tmp/tmp104i52rs.swift:10:40:\
    \ note: to match this opening '{'\nfunc car_race_collision(n: Int) -> Int {\n\
    \                                       ^\n/tmp/tmp104i52rs.swift:61:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp104i52rs.swift:11:9:\
    \ warning: initialization of variable 'collisions' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var collisions = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // Placing cars in two arrays, one moving left to right,\
    \ other right to left\n    // Each car is represented by an integer in the array\n\
    \    // For example, array of size 4 [1, 2, 4, 7] means 4 cars\n    // Cars 1,\
    \ 2, 4, 7 are driving left to right\n    // Cars 8-n are driving right to left\n\
    \    var cars_left_to_right = [Int]()\n    var cars_right_to_left = [Int]()\n\
    \    for i in 1...n {\n        cars_left_to_right.append(i)\n        cars_right_to_left.append(n\
    \ + i)\n    }\n    \n    // For each car moving left to right, the car needs to\
    \ \"move\" a distance from the car in front of it\n    // For example, a car 2\
    \ needs to move 2 spots forward since car 1 is in front of it\n    // If the next\
    \ spot is occupied by a car in the opposite direction, there is a collision\n\
    \    // Once a collision is detected, replace the car in the current spot with\
    \ the car that collided with it\n    //\n    // Stop when the first car (car 1)\
    \ is at the end of the array\n    var collisions = 0\n    while cars_left_to_right[0]\
    \ != 1 {\n        var i = 1\n        while i < cars_left_to_right.count {\n  \
    \          let forward_distance = cars_left_to_right[i] - cars_left_to_right[i\
    \ - 1]\n            let next_index = i + forward_distance\n            if next_index\
    \ < cars_left_to_right.count {\n                if cars_left_to_right[next_index]\
    \ > n {\n                    collisions += 1\n                    cars_left_to_right[next_index]\
    \ = cars_left_to_right[i]\n                }\n            }\n            i +=\
    \ 1\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzjdohxn1/tmpzjdohxn1.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2e0580c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2e0277b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2e0277988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2e02767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjdohxn1                        0x00005652a2855535 <unavailable> + 5429

    5    libc.so.6                          0x00002ae2e076c460 __libc_start_main +
    245

    6    tmpzjdohxn1                        0x00005652a28551e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars: [[Int]] = Array(repeating: [], count: n)\n    for\
    \ i in 0..<n {\n        cars[i] = [Int.random(in: 0..<n), 0]\n    }\n    for _\
    \ in 0..<n {\n        for i in 0..<n {\n            for j in 0..<n {\n       \
    \         if i != j && cars[i][0] == cars[j][0] {\n                    cars[i][1]\
    \ += 1\n                    cars[j][1] += 1\n                }\n            }\n\
    \        }\n        for i in 0..<n {\n            cars[i][0] = (cars[i][0] + 1)\
    \ % n\n        }\n    }\n    return cars.map({$0[1]}).reduce(0, +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4hhna8zo/tmp4hhna8zo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b294c710c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b294c407b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b294c407988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b294c4067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4hhna8zo                        0x000055870efbe7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b294c8fc460 __libc_start_main +
    245

    6    tmp4hhna8zo                        0x000055870efbe479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var race = 0\n    for i in 0..<n {\n        race += i\n \
    \   }\n    return race\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpybm9n1nr/tmpybm9n1nr.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b798e62ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798e321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798e321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798e3207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybm9n1nr                        0x000055cf5c870335 <unavailable> + 4917

    5    libc.so.6                          0x00002b798e816460 __libc_start_main +
    245

    6    tmpybm9n1nr                        0x000055cf5c86ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    /// 0 <= n <= 100000\n    /// This is a horrible upper\
    \ bound on the number of input digits.\n    /// It's possible to implement this\
    \ with a fixed-length array.\n    /// (This was my first implementation.)\n  \
    \  /// In practice, however, in production you have to treat your algorithms as\n\
    \    /// \"black boxes\".  You can't predict what inputs you'll have.\n    ///\
    \ So I'll implement this with a dictionary.\n    var left_to_right = [Int:Int]()\n\
    \    var right_to_left = [Int:Int]()\n    \n    /// 0 <= speed <= 1000000\n  \
    \  /// the maximum number of digits in the input integers\n    var a: [Int] =\
    \ [Int]()\n    /// the maximum number of digits in the input integers\n    var\
    \ b: [Int] = [Int]()\n    \n    for _ in 0..<n {\n        a.append(Int(readLine()!)!)\n\
    \    }\n    for _ in 0..<n {\n        b.append(Int(readLine()!)!)\n    }\n   \
    \ \n    /// first car starts at 0\n    /// second car starts at a[0]\n    left_to_right[0]\
    \ = a[0]\n    right_to_left[a[0]] = 0\n    \n    /// car starts at b[i]\n    ///\
    \ car moves at speed b[i]\n    /// car arrives at 0\n    /// car must collide\
    \ with another car\n    for i in 1..<n {\n        let next_start = left_to_right[0]!\
    \ + a[i]\n        left_to_right[0] = next_start\n        right_to_left[next_start]\
    \ = 0\n    }\n    \n    /// car starts at a[i]\n    /// car moves at speed a[i]\n\
    \    /// car arrives at b[i]\n    /// car must collide with another car\n    for\
    \ i in 1..<n {\n        let next_start = right_to_left[b[i]]! + a[i]\n       \
    \ right_to_left[b[i]] = next_start\n        left_to_right[next_start] = b[i]\n\
    \    }\n    \n    ///\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: '/tmp/tmptmt5gc5m.swift:61:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        cars[i] = i\n    }\n    var already_collided = [Bool](repeating:\
    \ false, count: n)\n    var left_to_right_pos = 0\n    var right_to_left_pos =\
    \ n - 1\n    var collision_counter = 0\n    for _ in 0..<n {\n        if !already_collided[left_to_right_pos]\
    \ && !already_collided[right_to_left_pos] {\n            if left_to_right_pos\
    \ == right_to_left_pos {\n                collision_counter += 1\n           \
    \     already_collided[left_to_right_pos] = true\n            }\n        }\n \
    \       left_to_right_pos += 1\n        right_to_left_pos -= 1\n    }\n    return\
    \ collision_counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpbhjqi3ss/tmpbhjqi3ss.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3b5fabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3b5ca2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3b5ca2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3b5ca17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhjqi3ss                        0x0000555c96a55535 <unavailable> + 5429

    5    libc.so.6                          0x00002ae3b6197460 __libc_start_main +
    245

    6    tmpbhjqi3ss                        0x0000555c96a551e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let cars_1 = (0...n-1).map{_ in Int.random(in: 1...10)}\n\
    \    let cars_2 = (0...n-1).map{_ in Int.random(in: 1...10)}\n    print(\"Cars\
    \ 1 \", cars_1)\n    print(\"Cars 2 \", cars_2)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        let j = n - i - 1\n        if cars_1[i] < cars_2[j] {\n\
    \            collisions += 1\n        }\n    }\n    return collisions\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp0ddjwotd/tmp0ddjwotd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35d9cbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35d99b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35d99b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35d99b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ddjwotd                        0x0000564e7a98e7f5 <unavailable> + 6133

    5    libc.so.6                          0x00002b35d9eaa460 __libc_start_main +
    245

    6    tmp0ddjwotd                        0x0000564e7a98e4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left: [Int] = []\n    var right: [Int] = []\n    for\
    \ index in 1...n {\n        left.append(index)\n        right.append(n+1-index)\n\
    \    }\n    var count = 0\n    while left.count > 0 && right.count > 0 {\n   \
    \     if left[0] < right[0] {\n            count += 1\n            left.remove(at:\
    \ 0)\n            right.remove(at: 0)\n        } else {\n            left.remove(at:\
    \ 0)\n            right.remove(at: 0)\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmppqtwu38p/tmppqtwu38p.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6b7a6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6b7761b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6b7761988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6b77607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqtwu38p                        0x000055e62d6e2555 <unavailable> + 5461

    5    libc.so.6                          0x00002ac6b7c56460 __libc_start_main +
    245

    6    tmppqtwu38p                        0x000055e62d6e2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    let\
    \ min_collision_dist = 100\n    var current_dist = 1\n    var right_index = 0\n\
    \    var left_index = 0\n    while right_index < n && left_index < n {\n     \
    \   right_to_left[right_index] = current_dist\n        left_to_right[left_index]\
    \ = current_dist\n        while right_index < n && right_to_left[right_index]\
    \ <= current_dist {\n            right_index += 1\n        }\n        while left_index\
    \ < n && left_to_right[left_index] <= current_dist {\n            left_index +=\
    \ 1\n        }\n        if right_index >= n || left_index >= n {\n           \
    \ break\n        }\n        current_dist += 1\n        right_to_left[right_index]\
    \ = current_dist\n        left_to_right[left_index] = current_dist\n        while\
    \ right_index < n && right_to_left[right_index] <= current_dist {\n          \
    \  right_index += 1\n        }\n        while left_index < n && left_to_right[left_index]\
    \ <= current_dist {\n            left_index += 1\n        }\n        if right_index\
    \ >= n || left_index >= n {\n            break\n        }\n        current_dist\
    \ += 1\n        if left_to_right[left_index] < right_to_left[right_index] {\n\
    \            collisions += 1\n            current_dist = max(current_dist, right_to_left[right_index]\
    \ + min_collision_dist)\n        } else {\n            collisions += 1\n     \
    \       current_dist = max(current_dist, left_to_right[left_index] + min_collision_dist)\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpuod7lp9n/tmpuod7lp9n.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845b08ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845ad81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845ad81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845ad807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuod7lp9n                        0x0000560f66a2f355 <unavailable> + 4949

    5    libc.so.6                          0x00002b845b276460 __libc_start_main +
    245

    6    tmpuod7lp9n                        0x0000560f66a2f009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var result = 0\n\
    \    var i = 0\n    var j = n - 1\n    while i < j {\n        result += (j - i)\n\
    \        i += 1\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmptnt3y7ju/tmptnt3y7ju.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b2dd4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b2da43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b2da43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b2da427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnt3y7ju                        0x00005599d34111b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b1b2df38460 __libc_start_main +
    245

    6    tmptnt3y7ju                        0x00005599d3410e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var total = 0\n\
    \    for i in 1...n {\n        total += i\n    }\n    return total\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpf1dawj3j/tmpf1dawj3j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd08db5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd08aacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd08aac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd08aab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1dawj3j                        0x000056307bd77335 <unavailable> + 4917

    5    libc.so.6                          0x00002afd08fa1460 __libc_start_main +
    245

    6    tmpf1dawj3j                        0x000056307bd76fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // initialize variables\n    var collisions = 0\n    var\
    \ left = [Int](0...n-1)\n    var right = [Int](0...n-1)\n    // indices of cars\
    \ moving left to right\n    var left_i = 0\n    // indices of cars moving right\
    \ to left\n    var right_i = n-1\n    // sort cars moving left to right in descending\
    \ order\n    left.sort(by: >)\n    // sort cars moving right to left in ascending\
    \ order\n    right.sort(by: <)\n    // all cars move at the same speed\n    //\
    \ increment left and right indices by 1\n    // until they reach the other side\n\
    \    while(left_i < n && right_i >= 0) {\n        // if the right car is faster\n\
    \        // cars on the right side will reach the end first\n        if(left[left_i]\
    \ < right[right_i]) {\n            // both indices increment by 1\n          \
    \  // 1 collision\n            collisions += 1\n            left_i += 1\n    \
    \        right_i += 1\n        }\n        // else, cars on the left side will\
    \ reach the end first\n        else {\n            // only left index increments\
    \ by 1\n            left_i += 1\n        }\n    }\n    return collisions\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmprvoduvxe/tmprvoduvxe.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6c3b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6c3878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6c3878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6c38777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvoduvxe                        0x000055ba31723445 <unavailable> + 5189

    5    libc.so.6                          0x00002ae6c3d6d460 __libc_start_main +
    245

    6    tmprvoduvxe                        0x000055ba317230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    let cars = Array(repeating: Array(repeating:\
    \ false, count: 2*n), count: 2*n)\n    for i in 0..<2*n {\n        for j in 0..<2*n\
    \ {\n            if i == j { continue }\n            if cars[i][j] { continue\
    \ }\n            cars[i][j] = true\n            collisions += 1\n        }\n \
    \   }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp2eisbpxu.swift:17:20: error: cannot assign through subscript: 'cars'\
    \ is a 'let' constant\n            cars[i][j] = true\n            ~~~~   ^\n/tmp/tmp2eisbpxu.swift:12:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let cars = Array(repeating:\
    \ Array(repeating: false, count: 2*n), count: 2*n)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660012304
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var b = 0;\n    var d = 0;\n    var a = n;\n    while(a >\
    \ 0) {\n        b += a;\n        d += a;\n        a -= 1;\n    }\n    return (b\
    \ * d) / 2;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmprb1oa1v4/tmprb1oa1v4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b45957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b4564eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b4564e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b4564d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1oa1v4                        0x0000559ddeac12c0 <unavailable> + 4800

    5    libc.so.6                          0x00002b6b45b43460 __libc_start_main +
    245

    6    tmprb1oa1v4                        0x0000559ddeac0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var answer = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            // I can figure out if cars i and j collide or not by\n     \
    \       // looking at the value of i-j.\n            // If i > j, then car i is\
    \ moving right to left\n            // and car j is moving left to right.\n  \
    \          // If i < j, then car i is moving left to right\n            // and\
    \ car j is moving right to left.\n            // If i = j, then car i and car\
    \ j are both moving\n            // in the same direction and so do not collide.\n\
    \            if i-j != 0 {\n                answer += 1\n            }\n     \
    \   }\n    }\n    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpcy612wfw/tmpcy612wfw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbf66a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbf639db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbf639d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbf639c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcy612wfw                        0x0000561d9bf45335 <unavailable> + 4917

    5    libc.so.6                          0x00002afbf6892460 __libc_start_main +
    245

    6    tmpcy612wfw                        0x0000561d9bf44fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var coll = 0\n    var pos = [Int]()\n    var neg = [Int]()\n\
    \    for _ in 0..<n {\n        pos.append(Int.random(in: 1...100))\n        neg.append(Int.random(in:\
    \ -100...(-1)))\n    }\n    pos.sort()\n    neg.sort()\n    var i = 0\n    var\
    \ j = 0\n    while i < n && j < n {\n        if pos[i] < (-neg[j]) {\n       \
    \     coll += j\n            i += 1\n        } else {\n            j += 1\n  \
    \      }\n    }\n    coll += (n - i) * j\n    return coll\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp3nf8esb9/tmp3nf8esb9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcd2c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcd2996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcd2996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcd29957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nf8esb9                        0x0000557a451ab615 <unavailable> + 5653

    5    libc.so.6                          0x00002afcd2e8b460 __libc_start_main +
    245

    6    tmp3nf8esb9                        0x0000557a451ab2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var leftMoving = [Int](0..<n)\n    var rightMoving = [Int](0..<n)\n\
    \    var collisionCount = 0\n    // TODO: Implement.\n    return collisionCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpu0v2bb8y/tmpu0v2bb8y.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3be1eddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3be1bd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3be1bd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3be1bd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0v2bb8y                        0x0000555a009a4375 <unavailable> + 4981

    5    libc.so.6                          0x00002b3be20c9460 __libc_start_main +
    245

    6    tmpu0v2bb8y                        0x0000555a009a4029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var output = 0\n\
    \    for i in 1..<n {\n        output += i\n    }\n    return output\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpitr87p4o/tmpitr87p4o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160b465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160b15cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160b15c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160b15b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpitr87p4o                        0x0000559fb3b81335 <unavailable> + 4917

    5    libc.so.6                          0x00002b160b651460 __libc_start_main +
    245

    6    tmpitr87p4o                        0x0000559fb3b80fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    var l2r: Int =\
    \ 0\n    var r2l: Int = n - 1\n    var collisions: Int = 0\n    while l2r < r2l\
    \ {\n        l2r += 1\n        r2l -= 1\n        collisions += 1\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpqzu01d5v/tmpqzu01d5v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12e8d32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12e8a29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12e8a29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12e8a287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzu01d5v                        0x000055f4f317d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b12e8f1e460 __libc_start_main +
    245

    6    tmpqzu01d5v                        0x000055f4f317ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let left = Array(1...n)\n    let right = Array(1...n).reversed()\n\
    \    var collisions = 0\n    for (_, (x, y)) in zip(left, right).enumerated()\
    \ {\n        if x > y {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp97lun88y/tmp97lun88y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae78942ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae789121b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae789121988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7891207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp97lun88y                        0x000055f30f7916f5 <unavailable> + 5877

    5    libc.so.6                          0x00002ae789616460 __libc_start_main +
    245

    6    tmp97lun88y                        0x000055f30f7913a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  var number_of_collisions = 0\n  var cars_moving_right_to_left\
    \ = [Int]()\n  cars_moving_right_to_left.reserveCapacity(n)\n  for i in 0..<n\
    \ {\n    cars_moving_right_to_left.append(i)\n  }\n  for i in 0..<n {\n    for\
    \ j in 0..<n {\n      if i == cars_moving_right_to_left[j] {\n        number_of_collisions\
    \ += 1\n      }\n    }\n  }\n  return number_of_collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpu0tkb0z7/tmpu0tkb0z7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88c17e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88c14dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88c14da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88c14d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0tkb0z7                        0x000055bd6ab7b4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b88c19cf460 __libc_start_main +
    245

    6    tmpu0tkb0z7                        0x000055bd6ab7b159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  return n * (n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmptf3cppme/tmptf3cppme.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf44891c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf44588b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf44588988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf445877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptf3cppme                        0x00005570df24c1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002acf44a7d460 __libc_start_main +
    245

    6    tmptf3cppme                        0x00005570df24be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars: [Int] = []\n    var othrCars: [Int] = []\n    var\
    \ collisions = 0\n    var i = 0\n    while i < n {\n        cars.append(i)\n \
    \       othrCars.append(i + n)\n        i += 1\n    }\n    i = 0\n    var j =\
    \ 0\n    while i < n {\n        while j < n {\n            if cars[i] == othrCars[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2lnbtwg4/tmp2lnbtwg4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7673c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7670b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7670b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7670b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lnbtwg4                        0x0000563524ce52d5 <unavailable> + 4821

    5    libc.so.6                          0x00002ab7675ae460 __libc_start_main +
    245

    6    tmp2lnbtwg4                        0x0000563524ce4f89 <unavailable> + 3977

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = 0\n    var right = 0\n    var result = 0\n   \
    \ while left < n && right < n {\n        if left >= right {\n            result\
    \ += 1\n            right += 1\n        } else {\n            left += 1\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpsu6jrzt3/tmpsu6jrzt3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75a8c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75a8949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75a8949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75a89487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu6jrzt3                        0x000055ac5065e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b75a8e3e460 __libc_start_main +
    245

    6    tmpsu6jrzt3                        0x000055ac5065de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var arr1 = Array(1...n)\n    var arr2 = Array(1...n)\n  \
    \  arr1.reverse()\n    return compare(arr1, arr2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpgb6pj6m1.swift:14:12: error: cannot find 'compare' in scope\n \
    \   return compare(arr1, arr2)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ > right_to_left[j] {\n                collision += 1\n            }\n      \
    \  }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpit_im1jy/tmpit_im1jy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c6f521c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c6f218b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c6f218988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c6f2177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit_im1jy                        0x000055e32442d455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7c6f70d460 __libc_start_main +
    245

    6    tmpit_im1jy                        0x000055e32442d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let m = n / 2\n    var k = 0\n    for i in 1...m {\n    \
    \    k += i\n    }\n    return k\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp7i9_9gm3/tmp7i9_9gm3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc88c2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc88926b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc88926988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc889257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i9_9gm3                        0x000055d31defd335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc88e1b460 __libc_start_main +
    245

    6    tmp7i9_9gm3                        0x000055d31defcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  var i = 1\n  var j = 1\n  var c = 0\n  while i <= n {\n   \
    \ while j <= n {\n      if i == j {\n        i += 1\n        j = 1\n        continue\n\
    \      }\n      if i < j {\n        c += 1\n      }\n      j += 1\n    }\n   \
    \ i += 1\n    j = 1\n  }\n  return c\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpekep1jk1/tmpekep1jk1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a4e067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a4dd5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a4dd5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a4dd5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekep1jk1                        0x00005600763f51b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b0a4e253460 __libc_start_main +
    245

    6    tmpekep1jk1                        0x00005600763f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var left_cars:\
    \ [Int] = []\n    var right_cars: [Int] = []\n    for index in 0..<n {\n     \
    \   left_cars.append(index)\n        right_cars.append(n - index - 1)\n    }\n\
    \    var collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j <\
    \ n {\n        if left_cars[i] < right_cars[j] {\n            collisions += j\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    collisions += j * (n - i)\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp0irwcumz/tmp0irwcumz.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7fce0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7f9d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7f9d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7f9d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0irwcumz                        0x0000560e9fc04455 <unavailable> + 5205

    5    libc.so.6                          0x00002aee7fecc460 __libc_start_main +
    245

    6    tmp0irwcumz                        0x0000560e9fc04109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return collision_count(cars: (0..<n).map { (i: Int) -> Car\
    \ in .leftToRight(position: i) }\n        + (0..<n).map { (i: Int) -> Car in .rightToLeft(position:\
    \ i) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(car_race_collision(n: 2)\
    \ == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4)\
    \ == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmprea_b0n6.swift:11:12: error: cannot find 'collision_count' in scope\n\
    \    return collision_count(cars: (0..<n).map { (i: Int) -> Car in .leftToRight(position:\
    \ i) }\n           ^~~~~~~~~~~~~~~\n/tmp/tmprea_b0n6.swift:11:60: error: cannot\
    \ find type 'Car' in scope\n    return collision_count(cars: (0..<n).map { (i:\
    \ Int) -> Car in .leftToRight(position: i) }\n                               \
    \                            ^~~\n/tmp/tmprea_b0n6.swift:12:37: error: cannot\
    \ find type 'Car' in scope\n        + (0..<n).map { (i: Int) -> Car in .rightToLeft(position:\
    \ i) })\n                                    ^~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpuwwf6xfx/tmpuwwf6xfx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaa0aeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaa07e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaa07e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaa07e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuwwf6xfx                        0x000055cd870f81b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aeaa0cda460 __libc_start_main +
    245

    6    tmpuwwf6xfx                        0x000055cd870f7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    var count = 0\n    var left: [Bool] = Array(repeating:\
    \ true, count: n)\n    var right: [Bool] = Array(repeating: true, count: n)\n\
    \    \n    for _ in 0...100 {\n        let l = Int.random(in: 0..<n)\n       \
    \ let r = Int.random(in: 0..<n)\n        \n        if left[l] && right[r] {\n\
    \            count += 1\n            left[l] = false\n            right[r] = false\n\
    \        }\n    }\n    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpqlb2ez0h/tmpqlb2ez0h.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc7c78dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc7c484b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc7c484988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc7c4837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlb2ez0h                        0x0000563447731535 <unavailable> + 5429

    5    libc.so.6                          0x00002acc7c979460 __libc_start_main +
    245

    6    tmpqlb2ez0h                        0x00005634477311e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    left_to_right.sortInPlace {\n        $0 > $1\n    }\n    right_to_left.sortInPlace\
    \ {\n        $0 < $1\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n\
    \    while i < n && j < n {\n        if left_to_right[i] > right_to_left[j] {\n\
    \            count += 1\n            i += 1\n            j += 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpb_768g7k.swift:13:19: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    left_to_right.sortInPlace {\n    ~~~~~~~~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmpb_768g7k.swift:16:19: error: value of type '[Int]' has no member 'sortInPlace'\n\
    \    right_to_left.sortInPlace {\n    ~~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var result = 0\n    for i in 1...n {\n        result += (i-1)\
    \ * i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeul4tw0s/tmpeul4tw0s.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943c23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943bf34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943bf34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943bf337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeul4tw0s                        0x00005644e5c78335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943c429460 __libc_start_main +
    245

    6    tmpeul4tw0s                        0x00005644e5c77fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let left_to_right_cars = Array(0..<n)\n    let right_to_left_cars\
    \ = Array(0..<n).reversed()\n    var count = 0\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            if left_to_right_cars[i] == right_to_left_cars[j]\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp6g0fryeu.swift:16:60: error: cannot convert value of type 'Int'\
    \ to expected argument type 'ReversedCollection<[Int]>.Index'\n            if\
    \ left_to_right_cars[i] == right_to_left_cars[j] {\n                         \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var rr = [Int](repeating: 0, count: n)\n    var ll = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        rr[i] = i\n        ll[i] = n + i\n\
    \    }\n    var coll = 0\n    for i in 0..<n {\n        for j in 0..<n {\n   \
    \         if rr[i] == ll[j] {\n                coll += 1\n            }\n    \
    \    }\n    }\n    return coll\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp9nxbb3pi/tmp9nxbb3pi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6d7ef8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6d7befb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6d7bef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6d7bee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9nxbb3pi                        0x000055a44171a455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad6d80e4460 __libc_start_main +
    245

    6    tmp9nxbb3pi                        0x000055a44171a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var dict = [Int: Int]()\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        dict[i] = i\n    }\n    for i in 0..<n {\n        if let\
    \ value = dict[i] {\n            collisions += value\n        }\n    }\n    for\
    \ i in 0..<n {\n        if let value = dict[i] {\n            collisions += value\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpodb5y74o/tmpodb5y74o.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47e13a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47e109eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47e109e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47e109d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodb5y74o                        0x0000559697568465 <unavailable> + 5221

    5    libc.so.6                          0x00002b47e1593460 __libc_start_main +
    245

    6    tmpodb5y74o                        0x0000559697568119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var right_to_left = Array(1...n)\n    var left_to_right =\
    \ Array(1...n)\n    var collision_count = 0\n    while right_to_left.count > 0\
    \ && left_to_right.count > 0 {\n        let right = right_to_left.first!\n   \
    \     let left = left_to_right.first!\n        if right < left {\n           \
    \ right_to_left.removeFirst()\n        } else if left < right {\n            left_to_right.removeFirst()\n\
    \        } else {\n            collision_count += 1\n            right_to_left.removeFirst()\n\
    \            left_to_right.removeFirst()\n        }\n    }\n    return collision_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4bdvg4lq/tmp4bdvg4lq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08ea9c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08ea6c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08ea6c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08ea6bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4bdvg4lq                        0x0000562789d92565 <unavailable> + 5477

    5    libc.so.6                          0x00002b08eabb5460 __libc_start_main +
    245

    6    tmp4bdvg4lq                        0x0000562789d92219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    //there is no such thing as a collision for n < 2\n    guard\
    \ n > 1 else { return 0 }\n    \n    //there are always n-1 collisions for even\
    \ n\n    if n % 2 == 0 { return n - 1 }\n    \n    //there are always n collisions\
    \ for odd n\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp17b3st79/tmp17b3st79.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae11f8d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae11f5ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae11f5cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae11f5cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17b3st79                        0x0000555955f70245 <unavailable> + 4677

    5    libc.so.6                          0x00002ae11fac1460 __libc_start_main +
    245

    6    tmp17b3st79                        0x0000555955f6fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // Assume that n is a positive integer\n    if n <= 0 {\n\
    \        return 0\n    }\n    // Save the current position of each car\n    var\
    \ left_cars = Array(repeating: 0, count: n)\n    var right_cars = Array(repeating:\
    \ 0, count: n)\n    // Create a counter for the number of collisions\n    var\
    \ collision_counter = 0\n    // For each car on the left\n    for i in 0..<n {\n\
    \        // Move the car one step\n        left_cars[i] += 1\n        // If the\
    \ car has collided with any car on the right,\n        // remove the car on the\
    \ right from the list of cars that\n        // are still on the road and increment\
    \ the collision counter\n        for j in (0..<right_cars.count).reversed() {\n\
    \            if left_cars[i] >= right_cars[j] {\n                right_cars.remove(at:\
    \ j)\n                collision_counter += 1\n            }\n        }\n    }\n\
    \    // Return the number of collisions\n    return collision_counter\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp7qann2bb/tmp7qann2bb.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f6af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f6ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f6ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f6ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7qann2bb                        0x000055864fbc4815 <unavailable> + 6165

    5    libc.so.6                          0x00002b8f6b155460 __libc_start_main +
    245

    6    tmp7qann2bb                        0x000055864fbc44c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return Int(floor(sqrt(pow(Double(n), 2) * 2)))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp3fbbr4rb.swift:11:16: error: cannot find 'floor' in scope\n   \
    \ return Int(floor(sqrt(pow(Double(n), 2) * 2)))\n               ^~~~~\n/tmp/tmp3fbbr4rb.swift:11:22:\
    \ error: cannot find 'sqrt' in scope\n    return Int(floor(sqrt(pow(Double(n),\
    \ 2) * 2)))\n                     ^~~~\n/tmp/tmp3fbbr4rb.swift:11:27: error: cannot\
    \ find 'pow' in scope\n    return Int(floor(sqrt(pow(Double(n), 2) * 2)))\n  \
    \                        ^~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var leftToRight = [Int](repeating: 0, count: n)\n    var\
    \ rightToLeft = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        leftToRight[i]\
    \ = i\n        rightToLeft[i] = n-i-1\n    }\n    var result = 0\n    var i =\
    \ 0\n    var j = 0\n    while (i < n && j < n) {\n        if (leftToRight[i] <\
    \ rightToLeft[j]) {\n            i += 1\n        } else if (leftToRight[i] > rightToLeft[j])\
    \ {\n            j += 1\n        } else {\n            result += 1\n         \
    \   i += 1\n            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpm0va0vo_/tmpm0va0vo_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90627b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90624b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90624b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90624af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0va0vo_                        0x000055a26a77b455 <unavailable> + 5205

    5    libc.so.6                          0x00002b90629a5460 __libc_start_main +
    245

    6    tmpm0va0vo_                        0x000055a26a77b109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_queue = PriorityQueue<Int>()\n    var right_to_left_queue\
    \ = PriorityQueue<Int>()\n    for i in 0..<n {\n        left_to_right_queue.insert(i)\n\
    \        right_to_left_queue.insert(i)\n    }\n    var result = 0\n    while !left_to_right_queue.isEmpty\
    \ && !right_to_left_queue.isEmpty {\n        let left_to_right_car = left_to_right_queue.deleteMin()\n\
    \        let right_to_left_car = right_to_left_queue.deleteMin()\n        if left_to_right_car\
    \ == right_to_left_car {\n            result += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp26cnobuc.swift:11:31: error: cannot find 'PriorityQueue' in scope\n\
    \    var left_to_right_queue = PriorityQueue<Int>()\n                        \
    \      ^~~~~~~~~~~~~\n/tmp/tmp26cnobuc.swift:12:31: error: cannot find 'PriorityQueue'\
    \ in scope\n    var right_to_left_queue = PriorityQueue<Int>()\n             \
    \                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // car[i] gives the time it takes car i to reach the middle\
    \ point of the road\n    var car = [Int](repeating: 0, count: n)\n    // leftcar[i]\
    \ gives the index of the leftmost car that collides with the car\n    // moving\
    \ right to left that finishes i-th.\n    var leftcar = [Int](repeating: 0, count:\
    \ n)\n    // rightcar[i] gives the index of the rightmost car that collides with\
    \ the car\n    // moving left to right that finishes i-th.\n    var rightcar =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        car[i] = Int(arc4random())\
    \ % n + 1\n    }\n    // sort the cars by their arrival time in the middle\n \
    \   car.sort()\n    // Go through the cars,  and determine which other cars they\
    \ collide with\n    for i in 0..<n {\n        var left = 0\n        var right\
    \ = n - 1\n        while right > left {\n            let mid = (left + right)\
    \ / 2\n            if car[mid] > car[i] {\n                right = mid - 1\n \
    \           } else {\n                left = mid + 1\n            }\n        }\n\
    \        leftcar[i] = left\n        rightcar[n - i - 1] = n - right - 1\n    }\n\
    \    // count the total number of collisions\n    var result = 0\n    for i in\
    \ 0..<n {\n        // for each car (i), count how many collisions the car has\
    \ on the left\n        var left = leftcar[i]\n        // for each car (n-i-1),\
    \ count how many collisions the car has on the right\n        var right = rightcar[n\
    \ - i - 1]\n        // the collisions of a car on the left and the collisions\
    \ of the same car on the right\n        // all count as the same collision, so\
    \ we need to subtract 1 to avoid double counting\n        // this is the step\
    \ where we get the actual result\n        result += left + right - 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpg0atcmls.swift:20:22: error: cannot find 'arc4random' in scope\n\
    \        car[i] = Int(arc4random()) % n + 1\n                     ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    var left: [Int] = Array(0...n-1)\n    var right: [Int]\
    \ = Array(0...n-1)\n    right.reverse()\n    \n    var collision: Int = 0\n  \
    \  \n    for i in 0...n-1 {\n        for j in 0...n-1 {\n            if left[i]\
    \ == right[j] {\n                collision += 1\n            }\n        }\n  \
    \  }\n    \n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp4b59eacu/tmp4b59eacu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eaf5d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eaf2c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eaf2c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eaf2c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4b59eacu                        0x000055f3e08c55e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b7eaf7bc460 __libc_start_main +
    245

    6    tmp4b59eacu                        0x000055f3e08c5299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp2eqe5di9/tmp2eqe5di9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b414d601c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b414d2f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b414d2f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b414d2f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2eqe5di9                        0x0000561ba839f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b414d7ed460 __libc_start_main +
    245

    6    tmp2eqe5di9                        0x0000561ba839ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars_left_to_right: [Car] = []\n    var cars_right_to_left:\
    \ [Car] = []\n    var collisions = 0\n    \n    for _ in 0..<n {\n        let\
    \ car_left_to_right = Car(position: 0, velocity: 1)\n        let car_right_to_left\
    \ = Car(position: 0, velocity: -1)\n        cars_left_to_right.append(car_left_to_right)\n\
    \        cars_right_to_left.append(car_right_to_left)\n    }\n    \n    var current_time\
    \ = 0\n    while (cars_left_to_right.count > 0 && cars_right_to_left.count > 0)\
    \ {\n        let left_to_right_car = cars_left_to_right.removeFirst()\n      \
    \  let right_to_left_car = cars_right_to_left.removeFirst()\n        \n      \
    \  // Give both cars enough time to get to the same position\n        current_time\
    \ += abs(left_to_right_car.position - right_to_left_car.position)\n        \n\
    \        if (left_to_right_car.position == right_to_left_car.position) {\n   \
    \         // The cars have collided, but they continue moving in their respective\n\
    \            // trajectory as if they didn't collide.\n            collisions\
    \ += 1\n        }\n        \n        // The cars have not collided.  Let them\
    \ move a little bit more.\n        left_to_right_car.position += left_to_right_car.velocity\n\
    \        right_to_left_car.position += right_to_left_car.velocity\n        \n\
    \        cars_left_to_right.append(left_to_right_car)\n        cars_right_to_left.append(right_to_left_car)\n\
    \    }\n    \n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpimh1py58.swift:11:30: error: cannot find type 'Car' in scope\n\
    \    var cars_left_to_right: [Car] = []\n                             ^~~\n/tmp/tmpimh1py58.swift:12:30:\
    \ error: cannot find type 'Car' in scope\n    var cars_right_to_left: [Car] =\
    \ []\n                             ^~~\n/tmp/tmpimh1py58.swift:16:33: error: cannot\
    \ find 'Car' in scope\n        let car_left_to_right = Car(position: 0, velocity:\
    \ 1)\n                                ^~~\n/tmp/tmpimh1py58.swift:17:33: error:\
    \ cannot find 'Car' in scope\n        let car_right_to_left = Car(position: 0,\
    \ velocity: -1)\n                                ^~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var c1 = [Int](repeating: 0, count: n)\n    var c2 = [Int](repeating:\
    \ 0, count: n)\n    for (i, _) in c1.enumerated() {\n        c1[i] = i + 1\n \
    \   }\n    for (i, _) in c2.enumerated() {\n        c2[i] = n - i\n    }\n   \
    \ var pos = 0\n    var step = 2\n    var count = 0\n    while pos < n {\n    \
    \    if c1[pos] == c2[pos] {\n            count += 1\n        }\n        if pos\
    \ + step >= n {\n            step = 1\n        }\n        pos += step\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpwp_jh3ey/tmpwp_jh3ey.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac371b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac371817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac371817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3718167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwp_jh3ey                        0x00005577b166b525 <unavailable> + 5413

    5    libc.so.6                          0x00002ac371d0c460 __libc_start_main +
    245

    6    tmpwp_jh3ey                        0x00005577b166b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n  return n * (n - 1) / 2;\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzz72jrz0/tmpzz72jrz0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac695b60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac695857b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac695857988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6958567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz72jrz0                        0x000055bba7fe1245 <unavailable> + 4677

    5    libc.so.6                          0x00002ac695d4c460 __libc_start_main +
    245

    6    tmpzz72jrz0                        0x000055bba7fe0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var n = n\n    if n < 2 {\n        return 0\n    }\n    var\
    \ i = 0\n    var j = n - 1\n    var cars = Array(repeating: 1, count: n)\n   \
    \ var num = 0\n    while i < j {\n        if cars[i] + cars[j] == 2 {\n      \
    \      num += 1\n            cars[i] = 0\n            cars[j] = 0\n          \
    \  i += 1\n            j -= 1\n        } else if cars[i] + cars[j] == 0 {\n  \
    \          i += 1\n            j -= 1\n        } else if cars[i] == 1 {\n    \
    \        i += 1\n        } else {\n            j -= 1\n        }\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(car_race_collision(n: 2)\
    \ == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4)\
    \ == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp4ztyynld/tmp4ztyynld.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0758f6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0758c63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0758c63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0758c627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ztyynld                        0x0000555be2abb2c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b0759158460 __libc_start_main +
    245

    6    tmp4ztyynld                        0x0000555be2abaf79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var (c1, c2) = ([Int](), [Int]())\n    for i in 0...n {\n\
    \        c1.append(n - i)\n        c2.append(i)\n    }\n    return merge(c1, c2,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(car_race_collision(n: 2) == 4)\n\
    assert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4) == 16)\n\
    assert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpykz4lmfo.swift:16:12: error: cannot find 'merge' in scope\n   \
    \ return merge(c1, c2, n)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars: [Int] = []\n    var right_to_left_cars:\
    \ [Int] = []\n    for i in 0..<n {\n        left_to_right_cars.append(i)\n   \
    \     right_to_left_cars.append(n - i - 1)\n    }\n    var num_collisions = 0\n\
    \    var done = false\n    var i = 0\n    var j = 0\n    while !done {\n     \
    \   if left_to_right_cars[i] < right_to_left_cars[j] {\n            num_collisions\
    \ += 1\n            j += 1\n        } else {\n            i += 1\n        }\n\
    \        if i == n || j == n {\n            done = true\n        }\n    }\n  \
    \  return num_collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpt5_akuf7/tmpt5_akuf7.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69bb738c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69bb42fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69bb42f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69bb42e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5_akuf7                        0x000055db6db66455 <unavailable> + 5205

    5    libc.so.6                          0x00002b69bb924460 __libc_start_main +
    245

    6    tmpt5_akuf7                        0x000055db6db66109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var carLeft = 0\n    var carRight = n-1\n    var collisions\
    \ = 0\n    while carLeft < carRight {\n        if carLeft == carRight {\n    \
    \        collisions += 1\n        }\n        carLeft += 1\n        carRight -=\
    \ 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpi7j72xae/tmpi7j72xae.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc6c031c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc6bd28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc6bd28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc6bd277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7j72xae                        0x000055bd65bf81b5 <unavailable> + 4533

    5    libc.so.6                          0x00002afc6c21d460 __libc_start_main +
    245

    6    tmpi7j72xae                        0x000055bd65bf7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var result = 0\n    var right_to_left = Array(repeating:\
    \ 0, count: n)\n    var left_to_right = Array(repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = i\n \
    \   }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ < right_to_left[j] {\n                result += 1\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpn5m0oicd/tmpn5m0oicd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f21418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f2110fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f2110f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f2110e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn5m0oicd                        0x000055e4627e9455 <unavailable> + 5205

    5    libc.so.6                          0x00002b2f21604460 __libc_start_main +
    245

    6    tmpn5m0oicd                        0x000055e4627e9109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    \n    var cars1 = (0..<n).map { Car(pos: $0, dir: .left)\
    \ }\n    var cars2 = (0..<n).map { Car(pos: $0, dir: .right) }\n    \n    var\
    \ count = 0\n    \n    while cars1.count > 0 && cars2.count > 0 {\n        var\
    \ c1 = cars1.removeFirst()\n        var c2 = cars2.removeFirst()\n        \n \
    \       if c1.is_colliding(with: c2) {\n            count += 1\n            cars1.append(c1)\n\
    \            cars2.append(c2)\n        } else {\n            cars1.append(c1)\n\
    \            cars2.append(c2)\n        }\n    }\n    \n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpw0vg18rl.swift:12:31: error: cannot find 'Car' in scope\n    var\
    \ cars1 = (0..<n).map { Car(pos: $0, dir: .left) }\n                         \
    \     ^~~\n/tmp/tmpw0vg18rl.swift:13:31: error: cannot find 'Car' in scope\n \
    \   var cars2 = (0..<n).map { Car(pos: $0, dir: .right) }\n                  \
    \            ^~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    let cars : [Car] = (0..<n).map{ Car(pos: Double($0)) }\n\
    \    let cars2 : [Car] = (0..<n).map{ Car(pos: Double($0)) }\n    var collisions\
    \ = 0\n    for i in 0..<cars.count {\n        for j in i..<cars2.count {\n   \
    \         let c1 = cars[i]\n            let c2 = cars2[j]\n            if c1.compare(c2)\
    \ == .orderedAscending {\n                collisions += 1\n            }\n   \
    \     }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpjlb_0udq.swift:11:17: error: cannot find type 'Car' in scope\n\
    \    let cars : [Car] = (0..<n).map{ Car(pos: Double($0)) }\n                ^~~\n\
    /tmp/tmpjlb_0udq.swift:12:18: error: cannot find type 'Car' in scope\n    let\
    \ cars2 : [Car] = (0..<n).map{ Car(pos: Double($0)) }\n                 ^~~\n"
  stdout: ''
  timestamp: 1660012305
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var i = 1\n    while i <= n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i + 1)\n        i += 1\n    }\n    var collisions = 0\n    var l = 0\n   \
    \ var r = n - 1\n    while l < n && r >= 0 {\n        if left_to_right[l] > right_to_left[r]\
    \ {\n            collisions += 1\n            l += 1\n            r -= 1\n   \
    \     } else {\n            break\n        }\n    }\n    return collisions\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmph_375hc1/tmph_375hc1.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b967392bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9673622b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9673622988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96736217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_375hc1                        0x00005604929922b5 <unavailable> + 4789

    5    libc.so.6                          0x00002b9673b17460 __libc_start_main +
    245

    6    tmph_375hc1                        0x0000560492991f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012305
