name: HumanEval_17_parse_music
language: swift
prompt: "\n/// Input to this function is a string representing musical notes in a\
  \ special ASCII format.\n/// Your task is to parse this string and return array\
  \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
  \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts\
  \ two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
  \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc\
  \ parse_music(music_string: String) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_music(music_string: \"\") == [] as\
  \ [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
  \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .|\
  \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"\
  o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
completions: ["    var result: [Int] = []\n    var musicComponents = music_string.components(separatedBy:\
    \ \" \")\n    for i in 0..<musicComponents.count {\n        switch musicComponents[i]\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   let music = music_string.components(separatedBy: \" \")\n    var finalMusic\
    \ = [Int]()\n    for item in music {\n        switch item {\n        case \"o\"\
    :\n            finalMusic.append(4)\n        case \"o|\":\n            finalMusic.append(2)\n\
    \        case \".|\":\n            finalMusic.append(1)\n        default:\n  \
    \          print(\"Invalid input\")\n        }\n    }\n    return finalMusic",
  "    let notes = music_string.split(separator: \" \")\n    var beat_list: [Int]\
    \ = []\n    for note in notes {\n        if note == \"o\" {\n            beat_list.append(4)\n\
    \        } else if note == \"o|\" {\n            beat_list.append(2)\n       \
    \ } else if note == \".|\" {\n            beat_list.append(1)\n        }\n   \
    \ }\n    return beat_list", '    return []', "    // Convert the string into an\
    \ array of strings.\n    let notes = music_string.split(separator: \" \")\n  \
    \  // Create a variable to store the beats.\n    var beats = [Int]()\n    // Loop\
    \ through each note.\n    for note in notes {\n        // Check if the note is\
    \ a whole note.\n        if note == \"o\" {\n            // Append 4 to the beats.\n\
    \            beats.append(4)\n        }\n        // Check if the note is a half\
    \ note.\n        else if note == \"o|\" {\n            // Append 2 to the beats.\n\
    \            beats.append(2)\n        }\n        // Check if the note is a quarter\
    \ note.\n        else if note == \".|\" {\n            // Append 1 to the beats.\n\
    \            beats.append(1)\n        }\n    }\n    // Return the beats.\n   \
    \ return beats", "    // You can use regex to do this exercise.\n    // You can\
    \ access it like this: NSRegularExpression(pattern: \"o|o|\\\\.|\", options: [])\n\
    \    // and use function firstMatchInString to get the first matching character.\n\
    \    // Don't forget to include escape character '\\\\' before '.' because it\
    \ has special meaning in regexp.\n    var result = [Int]()\n    let regex = NSRegularExpression(pattern:\
    \ \"o|o|\\\\.|\", options: [])\n    let matches = regex?.matchesInString(music_string,\
    \ options: [], range: NSMakeRange(0, music_string.characters.count))\n    for\
    \ match in matches! {\n        let found_match = (music_string as NSString).substringWithRange(match.range)\n\
    \        result.append(beat_length(found_match))\n    }\n    return result", '    return
    []', '  return []', "    \n    var beats = [Int]()\n    let noteToBeats : [Character:\
    \ Int] = [\"o\": 4, \"|\": 2, \".\": 1]\n    \n    for character in music_string\
    \ {\n        if let value = noteToBeats[character] {\n            beats.append(value)\n\
    \        }\n    }\n    \n    return beats", "    let m = music_string.components(separatedBy:\
    \ \" \")\n    var ret = [Int]()\n    for note in m {\n        if note == \"o\"\
    \ {\n            ret.append(4)\n        } else if note == \"o|\" {\n         \
    \   ret.append(2)\n        } else if note == \".|\" {\n            ret.append(1)\n\
    \        }\n    }\n    return ret", "    var beats = [Int]()\n    for char in\
    \ music_string {\n        if char == \" \" {\n            continue\n        }\n\
    \        if char == \"o\" {\n            beats.append(4)\n        }\n        if\
    \ char == \".\" {\n            beats.append(1)\n        }\n        if char ==\
    \ \"|\" {\n            beats[beats.count - 1] = beats[beats.count - 1] / 2\n \
    \       }\n    }\n    return beats", "    var array = [Int]()\n    let newMusicString\
    \ = music_string.replacingOccurrences(of: \" \", with: \"\")\n    var i = 0\n\
    \    while i < newMusicString.count {\n        if (i+1) == newMusicString.count\
    \ {\n            array.append(4)\n            break\n        }\n        if newMusicString[i]\
    \ == \"o\" && newMusicString[i+1] == \"o\" {\n            array.append(4)\n  \
    \          i += 1\n        } else if newMusicString[i] == \"o\" && newMusicString[i+1]\
    \ == \"|\" {\n            array.append(2)\n            i += 1\n        } else\
    \ if newMusicString[i] == \".\" && newMusicString[i+1] == \"|\" {\n          \
    \  array.append(1)\n            i += 1\n        }\n        i += 1\n    }\n   \
    \ return array", "    var beats = [Int]()\n    let music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        if note == \"o\" {\n            beats.append(4)\n\
    \        } else if note == \"o|\" {\n            beats.append(2)\n        } else\
    \ if note == \".|\" {\n            beats.append(1)\n        }\n    }\n    return\
    \ beats", "    let music_notes = music_string.components(separatedBy: \" \")\n\
    \    let result = music_notes.map { $0.count < 2 ? 4 : 2 }\n    return result",
  "    var output: [Int] = []\n    var code : Int\n    // code 0 = whole note\n  \
    \  // code 1 = half note\n    // code 2 = quater note\n    for c in music_string\
    \ {\n        if c == \"o\" {\n            code = 0\n        } else if c == \"\
    |\" {\n            code += 1\n        } else {\n            code = 0\n       \
    \ }\n        if code == 0 {\n            output.append(4)\n        } else if code\
    \ == 1 {\n            output.append(2)\n        } else if code == 2 {\n      \
    \      output.append(1)\n        }\n    }\n    return output", '    return []',
  "    var beat_len = [Int]()\n    let chars = music_string.characters\n    var cur_char\
    \ = chars.startIndex\n    while cur_char != chars.endIndex {\n        switch chars[cur_char]\
    \ {\n        case \"o\":\n            if chars[cur_char.advancedBy(1)] == \"|\"\
    \ {\n                beat_len.append(2)\n                cur_char = cur_char.advancedBy(2)\n\
    \            } else {\n                beat_len.append(4)\n                cur_char\
    \ = cur_char.advancedBy(1)\n            }\n        case \".\":\n            beat_len.append(1)\n\
    \            cur_char = cur_char.advancedBy(2)\n        default:\n           \
    \ beat_len.append(1)\n            cur_char = cur_char.advancedBy(1)\n        }\n\
    \    }\n    return beat_len", "    let stringArray = music_string.components(separatedBy:\
    \ \" \")\n    var intArray: [Int] = []\n    for string in stringArray {\n    \
    \    let o = \"o\"\n        let oBar = \"o|\"\n        let dotBar = \".|\"\n \
    \       if string == o {\n            intArray.append(4)\n        } else if string\
    \ == oBar {\n            intArray.append(2)\n        } else if string == dotBar\
    \ {\n            intArray.append(1)\n        }\n    }\n    return intArray", '    return
    []', "    \n    return music_string.components(separatedBy: \" \").map({ (str)\
    \ -> Int in\n        let str = str.characters.last!\n        switch str {\n  \
    \      case \"o\":\n            return 4\n        case \"|\":\n            return\
    \ 2\n        case \".\":\n            return 1\n        default:\n           \
    \ return 0\n        }\n    })", "    var array: [Int] = []\n    for char in music_string\
    \ {\n        if char == \"o\" {\n            array.append(4)\n        } else if\
    \ char == \"|\" {\n            array.append(2)\n        } else if char == \".\"\
    \ {\n            array.append(1)\n        }\n    }\n    return array", "    var\
    \ result = [Int]()\n    var s = music_string.components(separatedBy: \" \")\n\
    \    for x in s {\n        if x == \"o\" {\n            result.append(4)\n   \
    \     } else if x == \"o|\" {\n            result.append(2)\n        } else if\
    \ x == \".|\" {\n            result.append(1)\n        }\n    }\n    return result",
  "    let beatPair = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    var musicArr: [Int] =\
    \ []\n    var prevBeat: String = \"\"\n    for char in music_string {\n      \
    \  if char == \" \" {\n            musicArr.append(beatPair[prevBeat]!)\n    \
    \        prevBeat = \"\"\n        } else {\n            prevBeat += String(char)\n\
    \        }\n    }\n    musicArr.append(beatPair[prevBeat]!)\n    return musicArr",
  '    return parse_music_rec(music_string: music_string, parsed: [])', "    var beats\
    \ = [Int]()\n    for char in music_string {\n        switch char {\n        case\
    \ \"o\":\n            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     continue\n        }\n    }\n    return beats", "    let fullNote = \"o\"\
    \n    let halfNote = \"o|\"\n    let quarterNote = \".|\"\n    let notes: [Int]\
    \ = []\n    return notes", "    var notes = [Int]()\n    let notes_array = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes_array {\n        if note == \"o\" {\n        \
    \    notes.append(4)\n        } else if note == \"o|\" {\n            notes.append(2)\n\
    \        } else if note == \".|\" {\n            notes.append(1)\n        }\n\
    \    }\n    return notes", "    let temp = music_string.components(separatedBy:\
    \ \" \")\n    var note_array = [Int]()\n    for note in temp {\n        if note\
    \ == \"o\" {\n            note_array.append(4)\n        } else if note == \"o|\"\
    \ {\n            note_array.append(2)\n        } else if note == \".|\" {\n  \
    \          note_array.append(1)\n        }\n    }\n    return note_array", " \
    \   var beats = [Int]()\n    let music = music_string.components(separatedBy:\
    \ \" \")\n    for item in music {\n        switch item {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     beats.append(0)\n        }\n    }\n    return beats", '    return [Int]()',
  "    var string = music_string\n    var result = [Int]()\n    while !string.isEmpty\
    \ {\n        let first_note = string.prefix(1)\n        switch first_note {\n\
    \        case \"o\":\n            result.append(4)\n            string.removeFirst()\n\
    \        case \".\":\n            string.removeFirst()\n            result.append(1)\n\
    \            string.removeFirst()\n        default:\n            print(\"unexpected\
    \ character: \\(first_note)\")\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var symbol = \"\"\n    var i = 0\n    while i < music_string.count\
    \ {\n        while music_string[i] != \" \" {\n            symbol += String(music_string[i])\n\
    \            i += 1\n        }\n        if symbol == \"o\" {\n            result.append(4)\n\
    \        } else if symbol == \"o|\" {\n            result.append(2)\n        }\
    \ else if symbol == \".|\" {\n            result.append(1)\n        }\n      \
    \  symbol = \"\"\n        i += 1\n    }\n    return result", "    let input =\
    \ music_string.split(separator: \" \")\n    var result = [Int]()\n    for i in\
    \ input {\n        switch i {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result", "    let music_array = music_string.characters.split\
    \ { $0 == \" \" }.map(String.init)\n    var beats: [Int] = []\n    for notes in\
    \ music_array {\n        if notes == \"o\" {\n            beats.append(4)\n  \
    \      } else if notes == \"o|\" {\n            beats.append(2)\n        } else\
    \ if notes == \".|\" {\n            beats.append(1)\n        }\n    }\n    return\
    \ beats", "    var result = [Int]()\n    let music_array = music_string.components(separatedBy:\
    \ \" \")\n    for element in music_array {\n        switch element {\n       \
    \ case \"o\":\n            result.append(4)\n        case \"o|\":\n          \
    \  result.append(2)\n        case \".|\":\n            result.append(1)\n    \
    \    default:\n            break\n        }\n    }\n    return result", "    let\
    \ lengths = [\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    ]\n\
    \    var result = [Int]()\n    var word = \"\"\n    for letter in music_string\
    \ {\n        if lengths[String(letter)] != nil {\n            result.append(lengths[word]!)\n\
    \            word = String(letter)\n        } else {\n            word += String(letter)\n\
    \        }\n    }\n    result.append(lengths[word]!)\n    return result", "  \
    \  let note_values = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    var result = [Int]()\n\
    \    let notes = music_string.components(separatedBy: \" \")\n    for note in\
    \ notes {\n        let value = note_values[note]\n        if value != nil {\n\
    \            result.append(value!)\n        }\n    }\n    return result", "  \
    \  // TODO:\n    // Fix this function.\n    var beats = [Int]()\n    for note\
    \ in music_string.split(separator: \" \") {\n        switch note {\n        case\
    \ \"o\":\n            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     beats.append(0)\n        }\n    }\n    return beats", "  let letters = music_string.characters.map({String($0)})\n\
    \  var output: [Int] = []\n  var i = 0\n  while i < letters.count {\n    let letter\
    \ = letters[i]\n    if letter == \"o\" {\n      output.append(4)\n      i += 1\n\
    \    } else if letter == \".\" {\n      output.append(1)\n      i += 2\n    }\
    \ else {\n      fatalError(\"Invalid input\")\n    }\n  }\n  return output", '    return
    [Int]()', "    \n    var rawArray = [String]()\n    var finalArray = [Int]()\n\
    \    \n    rawArray = music_string.characters.split { $0 == \" \" || $0 == \"\
    |\" }.map { String($0) }\n    \n    for element in rawArray {\n        if element\
    \ == \"o\" {\n            finalArray.append(4)\n        } else if element == \"\
    o\" {\n            finalArray.append(2)\n        } else if element == \".\" {\n\
    \            finalArray.append(1)\n        }\n    }\n    \n    return finalArray",
  "    let note_string = \"o|.|\"\n    let beats_string = \"4214\"\n    var beat_array\
    \ = [Int]()\n    for note in music_string {\n        let index = note_string.index(of:\
    \ note)\n        if let index = index {\n            let beats = beats_string[index]\n\
    \            beat_array.append(Int(String(beats))!)\n        }\n    }\n    return\
    \ beat_array", "    let dic = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes\
    \ = music_string.components(separatedBy: \" \")\n    return notes.map({ dic[$0]!\
    \ })", "    \n    var array_of_int = [Int]()\n    var array_of_string = music_string.components(separatedBy:\
    \ \" \")\n    \n    for string in array_of_string {\n        if string == \"o\"\
    \ {\n            array_of_int.append(4)\n        } else if string == \"o|\" {\n\
    \            array_of_int.append(2)\n        } else if string == \".|\" {\n  \
    \          array_of_int.append(1)\n        }\n    }\n    \n    return array_of_int",
  "    \n    let notes = music_string.components(separatedBy: \" \")\n    var note_beats\
    \ = [Int]()\n    \n    for note in notes {\n        switch note {\n        case\
    \ \"o\":\n            note_beats.append(4)\n        case \"o|\":\n           \
    \ note_beats.append(2)\n        case \".|\":\n            note_beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    \n    return note_beats",
  "    var result = [Int]()\n    let music_array = music_string.components(separatedBy:\
    \ \" \")\n    for i in music_array {\n        switch i {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result", "    let beats = \"o|.|\"\n\
    \    var music_string = music_string\n    var result: [Int] = []\n    while music_string.count\
    \ > 0 {\n        if let index = beats.firstIndex(of: music_string.removeFirst())\
    \ {\n            result.append(beats.distance(from: beats.startIndex, to: index))\n\
    \        }\n    }\n    return result", "    var output = [Int]()\n    var current_string\
    \ = \"\"\n    for i in music_string {\n        if i == \" \" {\n            if\
    \ current_string == \"o\" {\n                output.append(4)\n            } else\
    \ if current_string == \"o|\" {\n                output.append(2)\n          \
    \  } else if current_string == \".|\" {\n                output.append(1)\n  \
    \          }\n            current_string = \"\"\n        } else {\n          \
    \  current_string.append(i)\n        }\n    }\n    return output", "    var result\
    \ = [Int]()\n    var musicalNotes = music_string.components(separatedBy: \" \"\
    )\n    for var i in 0..<musicalNotes.count {\n        var size = musicalNotes[i].characters.count\n\
    \        if size == 1 {\n            result.append(4)\n        } else if size\
    \ == 2 {\n            result.append(2)\n        } else {\n            result.append(1)\n\
    \        }\n    }\n    return result", "    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var beat_map: [Int] = []\n    for note in notes {\n        switch\
    \ note {\n        case \"o\":\n            beat_map.append(4)\n        case \"\
    o|\":\n            beat_map.append(2)\n        case \".|\":\n            beat_map.append(1)\n\
    \        default:\n            print(\"Invalid note: \\(note)\")\n        }\n\
    \    }\n    return beat_map", "    let notes: [Character] = [Character](\"o|.\"\
    )\n    let durations: [Int] = [4, 2, 1]\n    var beats = [Int]()\n    for ch in\
    \ music_string {\n        for (i, note) in notes.enumerated() {\n            if\
    \ ch == note {\n                beats.append(durations[i])\n            }\n  \
    \      }\n    }\n    return beats", '    return [Int]()', "    \n    return []",
  "    let music_dictionary: [Character: Int] = [\"o\": 4, \"|\": 2, \".\": 1]\n \
    \   var parsed_music: [Int] = []\n    var count: Int = 0\n    var current_char:\
    \ Character = music_string[music_string.startIndex]\n    for char in music_string\
    \ {\n        if char == current_char {\n            count += 1\n        } else\
    \ {\n            if music_dictionary[current_char] != nil {\n                parsed_music.append(music_dictionary[current_char]!\
    \ * count)\n            }\n            count = 1\n            current_char = char\n\
    \        }\n    }\n    if music_dictionary[current_char] != nil {\n        parsed_music.append(music_dictionary[current_char]!\
    \ * count)\n    }\n    return parsed_music", "    var music_string = music_string\n\
    \    var result = [Int]()\n    while !music_string.isEmpty {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string.removeFirst()\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result", "  let symbols = [\n    \"o\" : 4,\n  \
    \  \"o|\" : 2,\n    \".|\" : 1\n  ]\n  var res = [Int]()\n  let pairs = music_string.split(separator:\
    \ \" \")\n  for pair in pairs {\n    let symbol = String(pair)\n    let duration\
    \ = symbols[symbol]\n    if duration != nil {\n      res.append(duration!)\n \
    \   }\n  }\n  return res", "    var note_lengths = [Int]()\n    var note_value\
    \ = [\".\", \"o\", \"o|\"]\n    var note_length = [1, 4, 2]\n    var input_notes\
    \ = music_string.split(separator: \" \")\n    for notes in input_notes {\n   \
    \     if let index = note_value.firstIndex(of: String(notes)) {\n            note_lengths.append(note_length[index])\n\
    \        }\n    }\n    return note_lengths", "    let m = music_string.components(separatedBy:\
    \ \" \")\n    var b:[Int] = []\n    for n in m {\n        switch n {\n       \
    \ case \"o\":\n            b.append(4)\n        case \"o|\":\n            b.append(2)\n\
    \        case \".|\":\n            b.append(1)\n        default:\n           \
    \ print(\"not in list!\")\n        }\n    }\n    return b", "    let length =\
    \ music_string.count\n    var beat = 0\n    var beats = [Int]()\n    for i in\
    \ 0...length - 1 {\n        switch music_string[i] {\n        case \"o\":\n  \
    \          beat = 4\n        case \"o|\":\n            beat = 2\n        case\
    \ \".|\":\n            beat = 1\n        default:\n            beat = 0\n    \
    \    }\n        beats.append(beat)\n    }\n    return beats", "    let beats =\
    \ [\".\", \"o\"]\n    let notes = music_string.split(separator: \" \")\n    var\
    \ parsed_music: [Int] = []\n    for note in notes {\n        if note.contains(\"\
    |\") {\n            let new_note = note.replacingOccurrences(of: \"|\", with:\
    \ \"\")\n            if beats.contains(new_note) {\n                parsed_music.append(note.count\
    \ - 1)\n            }\n        } else {\n            if beats.contains(note) {\n\
    \                parsed_music.append(note.count)\n            }\n        }\n \
    \   }\n    return parsed_music", "    let music = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var beat: [Int] = []\n    for note in music {\n    \
    \    switch note {\n        case \"o\":\n            beat.append(4)\n        case\
    \ \"o|\":\n            beat.append(2)\n        case \".|\":\n            beat.append(1)\n\
    \        default:\n            return []\n        }\n    }\n    return beat",
  "    let wholeNote = \"o\"\n    let halfNote = \"o|\"\n    let quarterNote = \"\
    .|\"\n    var measures: [Int] = []\n    var measure: String = \"\"\n    for char\
    \ in music_string {\n        if char == \" \" {\n            if measure == wholeNote\
    \ {\n                measures.append(4)\n            } else if measure == halfNote\
    \ {\n                measures.append(2)\n            } else if measure == quarterNote\
    \ {\n                measures.append(1)\n            }\n            measure =\
    \ \"\"\n        } else {\n            measure.append(char)\n        }\n    }\n\
    \    if measure == wholeNote {\n        measures.append(4)\n    } else if measure\
    \ == halfNote {\n        measures.append(2)\n    } else if measure == quarterNote\
    \ {\n        measures.append(1)\n    }\n    return measures", "    var result\
    \ = [Int]()\n    var split_by_beat = music_string.components(separatedBy: \" \"\
    )\n    for beat in split_by_beat {\n        if beat == \"o\" {\n            result.append(4)\n\
    \        } else if beat == \"o|\" {\n            result.append(2)\n        } else\
    \ if beat == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result", "    var count = 0\n    var music_notes = [Int]()\n    let array_music_string\
    \ = Array(music_string)\n    for item in array_music_string {\n        if item\
    \ == \"o\" {\n            count += 1\n        } else if item == \"|\" {\n    \
    \        if count == 1 {\n                music_notes.append(1)\n            }\
    \ else if count == 2 {\n                music_notes.append(2)\n            } else\
    \ if count == 3 {\n                music_notes.append(4)\n            }\n    \
    \        count = 0\n        }\n    }\n    return music_notes", "    var result:\
    \ [Int] = []\n    var resultIndex = 0\n    let array = Array(music_string)\n \
    \   for i in 0..<array.count {\n        let char = array[i]\n        switch char\
    \ {\n        case \"o\":\n            if i == array.count - 1 {\n            \
    \    result.append(4)\n            } else {\n                if array[i + 1] ==\
    \ \"|\" {\n                    result.append(2)\n                } else {\n  \
    \                  result.append(4)\n                }\n            }\n      \
    \  case \".\":\n            result.append(1)\n        default:\n            break\n\
    \        }\n    }\n    return result", "    let preprocessed_musical_notes = music_string.replacingOccurrences(of:\
    \ \" \", with: \"|\")\n    var parsed_notes: [Int] = []\n    var current_index\
    \ = 0\n    while (current_index < preprocessed_musical_notes.count) {\n      \
    \  let current_character = preprocessed_musical_notes[current_index]\n       \
    \ let next_character = preprocessed_musical_notes[current_index + 1]\n       \
    \ if (current_character == \"o\") {\n            if (next_character == \"|\")\
    \ {\n                parsed_notes.append(2)\n                current_index +=\
    \ 2\n            } else {\n                parsed_notes.append(4)\n          \
    \      current_index += 1\n            }\n        } else {\n            parsed_notes.append(1)\n\
    \            current_index += 2\n        }\n    }\n    return parsed_notes", '    return
    []', "    let arr = music_string.split(separator: \" \")\n    var arrInt = [Int]()\n\
    \    for ch in arr {\n        if ch == \"o\" {\n            arrInt.append(4)\n\
    \        } else if ch == \"o|\" {\n            arrInt.append(2)\n        } else\
    \ if ch == \".|\" {\n            arrInt.append(1)\n        }\n    }\n    return\
    \ arrInt", "    var result = [Int]()\n    var currentPosition = music_string.startIndex\n\
    \    for _ in 0..<music_string.count {\n        if music_string[currentPosition]\
    \ == \" \" {\n            currentPosition = music_string.index(after: currentPosition)\n\
    \            continue\n        }\n        switch music_string[currentPosition]\
    \ {\n        case \"o\":\n            result.append(4)\n            currentPosition\
    \ = music_string.index(after: currentPosition)\n        case \"o\":\n        \
    \    result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.", "    \n    let\
    \ musicArray = music_string.components(separatedBy: \" \")\n    var resultArray\
    \ = [Int]()\n    \n    for element in musicArray {\n        if element == \"o\"\
    \ {\n            resultArray.append(4)\n        } else if element == \"o|\" {\n\
    \            resultArray.append(2)\n        } else if element == \".|\" {\n  \
    \          resultArray.append(1)\n        }\n    }\n    \n    return resultArray",
  "    var result = [Int]()\n    for char in music_string.characters {\n        switch\
    \ char {\n        case \"o\":\n            result.append(4)\n        case \"|\"\
    :\n            result.append(2)\n        case \".\":\n            result.append(1)\n\
    \        default:\n            continue\n        }\n    }\n    return result",
  "    var beats = [Int]()\n    for note in music_string.split(separator: \" \") {\n\
    \        if note == \"o\" {\n            beats.append(4)\n        } else if note\
    \ == \"o|\" {\n            beats.append(2)\n        } else if note == \".|\" {\n\
    \            beats.append(1)\n        }\n    }\n    return beats", "    return\
    \ music_string.split(separator: \" \").compactMap({ (token) -> Int? in\n     \
    \   switch token {\n        case \"o\":\n            return 4\n        case \"\
    o|\":\n            return 2\n        case \".|\":\n            return 1\n    \
    \    default:\n            return nil\n        }\n    })", "    var music_array\
    \ : [Int] = []\n    for (i, char) in music_string.enumerated() {\n        if char\
    \ == \"o\" && (i + 1 < music_string.count) && (music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: i + 1)] == \" \") {\n            music_array.append(4)\n        }\
    \ else if char == \"o\" && (i + 1 < music_string.count) && (music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: i + 1)] == \"|\") {\n            music_array.append(2)\n        }\
    \ else if char == \".\" && (i + 1 < music_string.count) && (music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: i + 1)] == \"|\") {\n            music_array.append(1)\n        }\n\
    \    }\n    return music_array", '    return []', "    // write your code here\n\
    \    return []", "    var music_note: String = \"\"\n    var music_notes: [Int]\
    \ = []\n    for i in music_string {\n        if i == \" \" {\n            music_notes.append(get_music_note(music_note:\
    \ music_note))\n            music_note = \"\"\n        } else {\n            music_note\
    \ += String(i)\n        }\n    }\n    music_notes.append(get_music_note(music_note:\
    \ music_note))\n    return music_notes", "    let notes: [String: Int] = [\"o\"\
    : 4, \"o|\": 2, \".|\": 1]\n    let parts = music_string.split(separator: \" \"\
    )\n    return parts.map { notes[String($0)]! }", "    // FIXME: Implement this\n\
    \    return []", '    return [1]', "    var result: [Int] = []\n    var stringArray\
    \ = Array(music_string)\n    var charLength = stringArray.count\n    var currentIndex\
    \ = 0\n    while currentIndex < charLength {\n        let currentChar = stringArray[currentIndex]\n\
    \        switch currentChar {\n        case \"o\":\n            result.append(4)\n\
    \            currentIndex += 1\n        case \".\":\n            result.append(1)\n\
    \            currentIndex += 2\n        default:\n            currentIndex +=\
    \ 1\n        }\n    }\n    return result", "    var note: [Int] = []\n    var\
    \ string = music_string.replacingOccurrences(of: \" \", with: \"\")\n    string\
    \ = string.replacingOccurrences(of: \" \", with: \"\")\n    string = string.replacingOccurrences(of:\
    \ \"o|\", with: \"1\")\n    string = string.replacingOccurrences(of: \".|\", with:\
    \ \"0\")\n    string = string.replacingOccurrences(of: \"o\", with: \"4\")\n \
    \   let separatedArray = string.map{String($0)}\n    for number in separatedArray\
    \ {\n        let num = Int(number)\n        note.append(num!)\n    }\n    return\
    \ note", "    \n    var beats = [Int]()\n    var currentBeat = Int()\n    \n \
    \   for char in music_string {\n        switch char {\n        case \"o\":\n \
    \           currentBeat = 4\n        case \"|\":\n            beats.append(currentBeat)\n\
    \        case \".\":\n            currentBeat = 1\n        default:\n        \
    \    continue\n        }\n    }\n    \n    return beats", "    \n    var musicArray:\
    \ [Int] = []\n    var hasWholeNote = false\n    var hasHalfNote = false\n    var\
    \ hasQuaterNote = false\n    \n    let musicStringArray = music_string.components(separatedBy:\
    \ \" \")\n    \n    for stringValue in musicStringArray {\n        \n        switch\
    \ stringValue {\n            \n        case \"o\":\n            hasWholeNote =\
    \ true\n        case \"o|\":\n            hasHalfNote = true\n        case \"\
    .|\":\n            hasQuaterNote = true\n        default:\n            return\
    \ musicArray\n        }\n        \n        if hasWholeNote == true {\n       \
    \     musicArray.append(4)\n            hasWholeNote = false\n        }\n    \
    \    \n        if hasHalfNote == true {\n            musicArray.append(2)\n  \
    \          hasHalfNote = false\n        }\n        \n        if hasQuaterNote\
    \ == true {\n            musicArray.append(1)\n            hasQuaterNote = false\n\
    \        }\n    }\n    \n    return musicArray", "    var result: [Int] = []\n\
    \    var music_array = music_string.characters.split(separator: \" \").map(String.init)\n\
    \    for music in music_array {\n        if music == \"o\" {\n            result.append(4)\n\
    \        } else if music == \"o|\" {\n            result.append(2)\n        }\
    \ else if music == \".|\" {\n            result.append(1)\n        }\n    }\n\
    \    return result", "    \n    let parsedData = parse_music_helper(musicString:\
    \ music_string)\n    return parsedData", "    var result = [Int]()\n    let arr\
    \ = music_string.split(separator: \" \")\n    for i in arr {\n        let element\
    \ = String(i)\n        if element == \"o\" {\n            result.append(4)\n \
    \       } else if element == \"o|\" {\n            result.append(2)\n        }\
    \ else if element == \".|\" {\n            result.append(1)\n        }\n    }\n\
    \    return result", "    var note_beats: [Int] = []\n    var note_type: Int =\
    \ 0\n    for char in music_string {\n        switch char {\n        case \" \"\
    :\n            if note_type > 0 {\n                note_beats.append(note_type)\n\
    \                note_type = 0\n            }\n        case \"|\":\n         \
    \   note_type = note_type / 2\n        case \"o\":\n            note_type = 4\n\
    \        case \".\":\n            note_type = 1\n        default:\n          \
    \  print(\"Invalid character\")\n        }\n    }\n    return note_beats", " \
    \   let music_string = music_string.replacingOccurrences(of: \" \", with: \"\"\
    )\n    var music_notes = [Int]()\n    for note in music_string {\n        switch\
    \ note {\n        case \"o\":\n            music_notes.append(4)\n        case\
    \ \"|\":\n            music_notes.append(2)\n        case \".\":\n           \
    \ music_notes.append(1)\n        default:\n            break\n        }\n    }\n\
    \    return music_notes", "    var music_arr: [Int] = []\n    var arr: [String]\
    \ = music_string.split(separator: \" \").map { \"\\($0)\" }\n    for element in\
    \ arr {\n        if element == \"o\" {\n            music_arr.append(4)\n    \
    \    } else if element == \"o|\" {\n            music_arr.append(2)\n        }\
    \ else if element == \".|\" {\n            music_arr.append(1)\n        }\n  \
    \  }\n    return music_arr", "    let music = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var beatsArray = [Int]()\n    let beats = [\n      \
    \  \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    ]\n    var note = \"\"\
    \n    for character in music {\n        note.append(character)\n        if character\
    \ == \"|\" {\n            if let beat = beats[note] {\n                beatsArray.append(beat)\n\
    \            }\n            note = \"\"\n        }\n    }\n    return beatsArray",
  "    let notes: [Int] = [4, 2, 1]\n    var result: [Int] = []\n    let chars = Array(music_string)\n\
    \    var index = 0\n    while index < chars.count {\n        let c = chars[index]\n\
    \        if c == \"o\" {\n            result.append(notes[0])\n            index\
    \ += 2\n        } else if c == \".\" {\n            result.append(notes[2])\n\
    \            index += 3\n        } else {\n            result.append(notes[1])\n\
    \            index += 3\n        }\n    }\n    return result", "    let notes\
    \ = music_string.components(separatedBy: \" \")\n    var beat_counts = [Int]()\n\
    \    for note in notes {\n        switch note {\n        case \"o\":\n       \
    \     beat_counts.append(4)\n        case \"o|\":\n            beat_counts.append(2)\n\
    \        case \".|\":\n            beat_counts.append(1)\n        default:\n \
    \           break\n        }\n    }\n    return beat_counts", '    return []',
  "    var parsed: [Int] = []\n    var input = music_string.split(separator: \" \"\
    )\n    for i in input {\n        if i == \"o\" {\n            parsed.append(4)\n\
    \        } else if i == \"o|\" {\n            parsed.append(2)\n        } else\
    \ if i == \".|\" {\n            parsed.append(1)\n        }\n    }\n    return\
    \ parsed", "    \n    var parsed_music = [Int]()\n    \n    let characters_of_music\
    \ = Array(music_string)\n    \n    var index_of_string = 0\n    \n    while (index_of_string\
    \ < characters_of_music.count) {\n        \n        if characters_of_music[index_of_string]\
    \ == \"o\" {\n            \n            if index_of_string < characters_of_music.count\
    \ - 1 && characters_of_music[index_of_string + 1] == \"|\" {\n               \
    \ \n                parsed_music.append(2)\n                index_of_string +=\
    \ 2\n                \n            } else {\n                \n              \
    \  parsed_music.append(4)\n                index_of_string += 1\n            \
    \    \n            }\n            \n        } else if characters_of_music[index_of_string]\
    \ == \".\" {\n            \n            if index_of_string < characters_of_music.count\
    \ - 1 && characters_of_music[index_of_string + 1] == \"|\" {\n               \
    \ \n                parsed_music.append(1)\n                index_of_string +=\
    \ 2\n                \n            } else {\n                \n              \
    \  print(\"Error: incorrect string format\")\n                return [Int]()\n\
    \                \n            }\n            \n        } else {\n           \
    \ \n            print(\"Error: incorrect string format\")\n            return\
    \ [Int]()\n            \n        }\n        \n    }\n    \n    return parsed_music\n\
    \    ", "    var beats = [Int]()\n    var notes = Array(music_string)\n    var\
    \ note = \"\"\n    var previous_note = \"\"\n    for n in notes {\n        note\
    \ = String(n)\n        if note == \"o\" {\n            beats.append(4)\n     \
    \   } else if note == \"|\" {\n            if previous_note == \"o\" {\n     \
    \           beats[beats.count - 1] = 2\n            } else {\n               \
    \ beats.append(1)\n            }\n        }\n        previous_note = note\n  \
    \  }\n    return beats", "    // your code here\n    return []", "    return music_string.components(separatedBy:\
    \ \" \").map { beat in\n        switch beat {\n        case \"o\":\n         \
    \   return 4\n        case \"o|\":\n            return 2\n        case \".|\"\
    :\n            return 1\n        default:\n            return 0\n        }\n \
    \   }", "    let musicSplit = music_string.split(separator: \" \")\n    var result:\
    \ [Int] = []\n    for music in musicSplit {\n        if music == \"o\" {\n   \
    \         result.append(4)\n        } else if music == \"o|\" {\n            result.append(2)\n\
    \        } else if music == \".|\" {\n            result.append(1)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for i in 0..<music.count {\n        if music[i] == \"o\" {\n   \
    \         result.append(4)\n        } else if music[i] == \"o|\" {\n         \
    \   result.append(2)\n        } else if music[i] == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result", "    return music_string.components(separatedBy:\
    \ \" \").map {\n        switch $0 {\n        case \"o\":\n            return 4\n\
    \        case \"o|\":\n            return 2\n        case \".|\":\n          \
    \  return 1\n        default:\n            return 0\n        }\n    }", "    \n\
    \    let notes = music_string.components(separatedBy: \" \")\n    var parsedNotes\
    \ = [Int]()\n    \n    for note in notes {\n        if note == \"o\" {\n     \
    \       parsedNotes.append(4)\n        } else if note == \"o|\" {\n          \
    \  parsedNotes.append(2)\n        } else if note == \".|\" {\n            parsedNotes.append(1)\n\
    \        }\n    }\n    \n    return parsedNotes", '    return []', "    var beats:\
    \ [Int] = []\n    for char in music_string {\n        if char == \"o\" {\n   \
    \         beats.append(4)\n        } else if char == \"o\" {\n            beats.append(2)\n\
    \        } else if char == \".\" {\n            beats.append(1)\n        }\n \
    \   }\n    return beats", "    let notes:[String] = music_string.components(separatedBy:\
    \ \" \")\n    var notesBeat = [Int]()\n    for i in notes {\n        if i == \"\
    o\" {\n            notesBeat.append(4)\n        } else if i == \"o|\" {\n    \
    \        notesBeat.append(2)\n        } else if i == \".|\" {\n            notesBeat.append(1)\n\
    \        }\n    }\n    return notesBeat", "    var result = [Int]()\n    let notes\
    \ = music_string.components(separatedBy: \" \")\n    for note in notes {\n   \
    \     if note == \"o\" {\n            result.append(4)\n        } else if note\
    \ == \"o|\" {\n            result.append(2)\n        } else if note == \".|\"\
    \ {\n            result.append(1)\n        }\n    }\n    return result", "   \
    \ var beats = [Int]()\n    let music_array = music_string.split(separator: \"\
    \ \")\n    for item in music_array {\n        switch item {\n        case \"o\"\
    :\n            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     print(\"nope\")\n        }\n    }\n    return beats", "    let chars = music_string.characters.map\
    \ { String($0) }\n    var beats: [Int] = []\n    var beat: Int = 0\n    for char\
    \ in chars {\n        if char == \"o\" {\n            beat = 4\n        } else\
    \ if char == \"o|\" {\n            beat = 2\n        } else if char == \".|\"\
    \ {\n            beat = 1\n        }\n        beats.append(beat)\n    }\n    return\
    \ beats", "    let dic: [Character: Int] = [\"o\": 4, \"|\": 1]\n    var res:\
    \ [Int] = []\n    var sum = 0\n    for ch in music_string {\n        if ch ==\
    \ \" \" {\n            res.append(sum)\n            sum = 0\n        } else {\n\
    \            sum += dic[ch]!\n        }\n    }\n    res.append(sum)\n    return\
    \ res", '    return []', '    return [1]', "    var beats = [Int]()\n    for (index,\
    \ character) in music_string.characters.enumerated() {\n        if character ==\
    \ \"o\" {\n            beats.append(4)\n        } else if character == \"|\" {\n\
    \            beats[beats.count - 1] /= 2\n        }\n    }\n    return beats",
  '    return [Int]()', "    var result: [Int] = []\n    var notes = music_string.split(separator:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result", "    //let note: [Character]\
    \ = [\"o\", \"o|\", \".|\"]\n    var duration = [Int]()\n    var noteDuration\
    \ = 0\n    for char in music_string {\n        switch char {\n        case \"\
    o\":\n            noteDuration = 4\n        case \"o|\":\n            noteDuration\
    \ = 2\n        case \".|\":\n            noteDuration = 1\n        default:\n\
    \            noteDuration = 0\n        }\n        duration.append(noteDuration)\n\
    \    }\n    return duration", "    let (notes, length) = map_music(music_string:\
    \ music_string)\n    var result = [Int]()\n    var i = 0\n    while i < length\
    \ {\n        result.append(notes[i].duration)\n        i += notes[i].duration\n\
    \    }\n    return result", "    let notes = music_string.split(separator: \"\
    \ \")\n    var beats: [Int] = []\n    for note in notes {\n        if String(note)\
    \ == \"o\" {\n            beats.append(4)\n        } else if String(note) == \"\
    o|\" {\n            beats.append(2)\n        } else if String(note) == \".|\"\
    \ {\n            beats.append(1)\n        }\n    }\n    return beats", '    //
    Your code here', "    var music_string = music_string\n    let len = music_string.count\n\
    \    var start_ind = 0\n    var buffer = \"\"\n    var res: [Int] = []\n    while\
    \ start_ind < len {\n        buffer = \"\"\n        if music_string[start_ind]\
    \ == \"o\" {\n            if music_string[start_ind + 1] == \" \" {\n        \
    \        buffer = \"o\"\n                start_ind += 2\n            } else if\
    \ music_string[start_ind + 1] == \"|\" {\n                buffer = \"o|\"\n  \
    \              start_ind += 3\n            }\n        } else if music_string[start_ind]\
    \ == \".\" {\n            if music_string[start_ind + 1] == \"|\" {\n        \
    \        buffer = \".|\"\n                start_ind += 3\n            }\n    \
    \    }\n        if buffer == \"o\" {\n            res.append(4)\n        } else\
    \ if buffer == \"o|\" {\n            res.append(2)\n        } else if buffer ==\
    \ \".|\" {\n            res.append(1)\n        }\n    }\n    return res", "  \
    \  let musicArray = music_string.components(separatedBy: \" \")\n    var musicIntArray\
    \ = [Int]()\n    for note in musicArray {\n        if note == \"o\" {\n      \
    \      musicIntArray.append(4)\n        } else if note == \"o|\" {\n         \
    \   musicIntArray.append(2)\n        } else if note == \".|\" {\n            musicIntArray.append(1)\n\
    \        }\n    }\n    return musicIntArray", "    var res = [Int]()\n    var\
    \ chars = music_string.characters.map { String($0) }\n    while !chars.isEmpty\
    \ {\n        if chars[0] == \"o\" {\n            res.append(4)\n            chars.remove(at:\
    \ 0)\n        } else {\n            res.append(2)\n            chars.remove(at:\
    \ 0)\n            chars.remove(at: 0)\n        }\n    }\n    return res", "  \
    \  // Implement your solution here\n    return []", "    var beats : [Int] = []\n\
    \    for letter in music_string.characters {\n        switch letter {\n      \
    \  case \"o\":\n            beats.append(4)\n        case \"|\":\n           \
    \ beats.append(2)\n        case \".\":\n            beats.append(1)\n        default:\n\
    \            break\n        }\n    }\n    return beats", "    let music_string\
    \ = music_string.split(separator: \" \")\n    var beat = [Int]()\n    for element\
    \ in music_string {\n        let note = String(element)\n        if note == \"\
    o\" {\n            beat.append(4)\n        } else if note == \"o|\" {\n      \
    \      beat.append(2)\n        } else if note == \".|\" {\n            beat.append(1)\n\
    \        }\n    }\n    return beat", "    let notesDict: [Character: Int] = [\"\
    o\": 4, \"|\": 2, \".\": 1]\n    var result: [Int] = []\n    var note: String\
    \ = \"\"\n    for char in music_string {\n        if let value = notesDict[char]\
    \ {\n            result.append(value)\n        }\n    }\n    return result", " \
    \   // write your code here\n    var result: [Int] = []\n    let stringArray =\
    \ music_string.split(separator: \" \")\n    for i in stringArray {\n        switch\
    \ i {\n        case \"o\":\n            result.append(4)\n        case \"o|\"\
    :\n            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            result.append(0)\n        }\n    }\n    return\
    \ result", '    return []', "    return music_string.components(separatedBy: \"\
    \ \").map({(note: String) -> Int in\n        if note == \"o\" {\n            return\
    \ 4\n        } else if note == \"o|\" {\n            return 2\n        } else\
    \ {\n            return 1\n        }\n    })", "    var result = [Int]()\n   \
    \ var m = music_string.components(separatedBy: \" \")\n    for i in m {\n    \
    \    switch i {\n        case \"o\":\n            result.append(4)\n        case\
    \ \"o|\":\n            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var beats: [Int] = []\n    let chars = music_string.components(separatedBy:\
    \ \" \")\n    for char in chars {\n        switch char {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     print(\"Unknown character: \\(char)\")\n        }\n    }\n    return beats",
  "    // Your code here\n    let beats = music_string.split(separator: \" \")\n \
    \   var output = [Int]()\n    for b in beats {\n        if b == \"o\" {\n    \
    \        output.append(4)\n        } else if b == \"o|\" {\n            output.append(2)\n\
    \        } else if b == \".|\" {\n            output.append(1)\n        }\n  \
    \  }\n    return output", "    var duration = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            duration.append(4)\n\
    \        } else if note == \"o|\" {\n            duration.append(2)\n        }\
    \ else if note == \".|\" {\n            duration.append(1)\n        }\n    }\n\
    \    return duration", "    let _wholeNote = 4\n    let _halfNote = 2\n    let\
    \ _quarterNote = 1\n    \n    let _wholeNoteCharacter = \"o\"\n    let _halfNoteCharacter\
    \ = \"o|\"\n    let _quarterNoteCharacter = \".|\"\n    \n    var _returnArray\
    \ = [Int]()\n    \n    var _musicArray = music_string.components(separatedBy:\
    \ \" \")\n    \n    for i in 0..<_musicArray.count {\n        let _element = _musicArray[i]\n\
    \        \n        if _element == _wholeNoteCharacter {\n            _returnArray.append(_wholeNote)\n\
    \        } else if _element == _halfNoteCharacter {\n            _returnArray.append(_halfNote)\n\
    \        } else if _element == _quarterNoteCharacter {\n            _returnArray.append(_quarterNote)\n\
    \        }\n    }\n    \n    return _returnArray", "    let beatsArray = music_string.split(separator:\
    \ \" \")\n    var arrayOfBeats: [Int] = []\n    for beat in beatsArray {\n   \
    \     switch beat {\n        case \"o\":\n            arrayOfBeats.append(4)\n\
    \        case \"o|\":\n            arrayOfBeats.append(2)\n        case \".|\"\
    :\n            arrayOfBeats.append(1)\n        default:\n            arrayOfBeats.append(0)\n\
    \        }\n    }\n    return arrayOfBeats", "    var beat = 0\n    var beats\
    \ = [Int]()\n    for character in music_string {\n        switch character {\n\
    \        case \"o\":\n            beat += 4\n            beats.append(beat)\n\
    \            beat = 0\n        case \"o\":\n            beat += 2\n          \
    \  beats.append(beat)\n            beat = 0\n        case \".\":\n           \
    \ beat += 1\n            beats.append(beat)\n            beat = 0\n        default:\n\
    \            beat = 0\n        }\n    }\n    return beats", '    return [0]',
  "    var array = [Int]()\n    for i in music_string.components(separatedBy: \" \"\
    ) {\n        if i == \"o\" {\n            array.append(4)\n        } else if i\
    \ == \"o|\" {\n            array.append(2)\n        } else if i == \".|\" {\n\
    \            array.append(1)\n        }\n    }\n    return array", "    let beats:\
    \ [Character: Int] = [\"o\": 4, \".\": 1, \"|\": 0]\n    return music_string.reduce([Int]())\
    \ { acc, char in\n        guard let result = beats[char] else { return acc }\n\
    \        if result == 0 {\n            return acc + [acc.last ?? 0]\n        }\n\
    \        return acc + [result]\n    }", "    var input = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var array: [Int] = []\n    var count = 0\n    var i\
    \ = 0\n    while i < input.count {\n        if input[i] == \"o\" {\n         \
    \   count += 1\n            if input[i+1] == \"|\" {\n                array.append(2)\n\
    \                i += 1\n            } else {\n                array.append(4)\n\
    \            }\n        } else if input[i] == \".\" {\n            count += 1\n\
    \            array.append(1)\n        }\n        i += 1\n    }\n    if count ==\
    \ 4 || count == 6 || count == 8 || count == 10 {\n        return array\n    }\
    \ else {\n        return [0]\n    }", "    let characters = Array(music_string)\n\
    \    var index = 0\n    var array = [Int]()\n    while index < characters.count\
    \ {\n        let character = characters[index]\n        switch character {\n \
    \       case \"o\":\n            if index < characters.count - 1 {\n         \
    \       if characters[index + 1] == \"|\" {\n                    array.append(2)\n\
    \                    index += 1\n                } else {\n                  \
    \  array.append(4)\n                }\n            } else {\n                array.append(4)\n\
    \            }\n        case \".\":\n            if index < characters.count -\
    \ 1 {\n                if characters[index + 1] == \"|\" {\n                 \
    \   array.append(1)\n                    index += 1\n                }\n     \
    \       }\n        default:\n            break\n        }\n        index += 1\n\
    \    }\n    return array", "    var result = [Int]()\n    var i = 0\n    while\
    \ i < music_string.count {\n        let currentChar = music_string[i]\n      \
    \  if currentChar == \"o\" {\n            result.append(4)\n            i += 1\n\
    \        } else if currentChar == \".\" {\n            result.append(1)\n    \
    \        i += 2\n        }\n    }\n    return result", "    var beatArray: [Int]\
    \ = []\n    let musicArray = music_string.components(separatedBy: \" \")\n   \
    \ var notesArray: [String] = []\n    for note in musicArray {\n        let numberOfBars\
    \ = note.count\n        if numberOfBars == 2 {\n            notesArray.append(String(note.first!))\n\
    \            notesArray.append(String(note.last!))\n        } else {\n       \
    \     notesArray.append(note)\n        }\n    }\n    for note in notesArray {\n\
    \        if note == \"o\" {\n            beatArray.append(4)\n        } else if\
    \ note == \"o|\" {\n            beatArray.append(2)\n        } else if note ==\
    \ \".|\" {\n            beatArray.append(1)\n        }\n    }\n    return beatArray",
  "    let noteTypes: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    var notes:\
    \ [Int] = []\n    var characters = Array(music_string)\n    var index = 0\n  \
    \  while index < characters.count {\n        var noteType = \"\"\n        while\
    \ index < characters.count && characters[index] != \" \" {\n            noteType\
    \ += String(characters[index])\n            index += 1\n        }\n        index\
    \ += 1\n        notes.append(noteTypes[noteType]!)\n    }\n    return notes",
  "    let symbolBeats = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    var beats = [Int]()\n\
    \    for symbol in music_string.components(separatedBy: \" \") {\n        beats.append(symbolBeats[symbol]!)\n\
    \    }\n    return beats", '    return []', "    let beats: Dictionary<Character,\
    \ Int> = [\"o\": 4, \"|\": 2, \".\": 1]\n    return music_string.map { beats[$0]!\
    \ }", "    var result = [Int]()\n    for music in music_string.split(separator:\
    \ \" \") {\n        switch music {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            continue\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var arrayOfStrings\
    \ = music_string.components(separatedBy: \" \")\n    for item in arrayOfStrings\
    \ {\n        if item == \"o\" {\n            result.append(4)\n        } else\
    \ if item == \"o|\" {\n            result.append(2)\n        } else if item ==\
    \ \".|\" {\n            result.append(1)\n        }\n    }\n    return result",
  "    let beats = [\"o\" : 4, \"o|\" : 2, \".|\" : 1]\n    var notes: [Int] = []\n\
    \    var i = 0\n    var count = 0\n    while i < music_string.count {\n      \
    \  count = beats[music_string[i...i+1]] ?? beats[music_string[i]] ?? 0\n     \
    \   notes.append(count)\n        i += (count == 1) ? 2 : 3\n    }\n    return\
    \ notes", "  var result = [Int]()\n  var index = 0\n  var oneElement = [String]()\n\
    \  for i in music_string.indices {\n    if i == music_string.index(music_string.endIndex,\
    \ offsetBy: -1) {\n      oneElement.append(String(music_string[index..<i]))\n\
    \      break\n    }\n    if music_string[i] == \" \" {\n      oneElement.append(String(music_string[index..<i]))\n\
    \      index = music_string.index(after: i)\n    }\n  }\n  for i in oneElement\
    \ {\n    switch i {\n    case \"o\":\n      result.append(4)\n    case \"o|\"\
    :\n      result.append(2)\n    case \".|\":\n      result.append(1)\n    default:\n\
    \      result.append(0)\n    }\n  }\n  return result", "    var result: [Int]\
    \ = []\n    var counter = 0\n    for letter in music_string {\n        if letter\
    \ == \" \" {\n            counter += 1\n        } else if letter == \"|\" {\n\
    \            result.append(counter)\n            counter = 0\n        }\n    }\n\
    \    return result", "    var music_notes: [Int] = []\n    for char in music_string\
    \ {\n        switch char {\n        case \"o\":\n            music_notes.append(4)\n\
    \        case \"|\":\n            music_notes.append(2)\n        case \".\":\n\
    \            music_notes.append(1)\n        default:\n            print(\"Wrong\
    \ note!\")\n        }\n    }\n    return music_notes", '    return []', "    var\
    \ result: [Int] = []\n    let notes = music_string.split(separator: \" \")\n \
    \   for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result", "    var array_of_music: [Int] = []\n    for (index, char) in music_string.enumerated()\
    \ {\n        if index > 0 {\n            if music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index-1)] == \"o\" && char == \" \" {\n                array_of_music.append(4)\n\
    \            } else if music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index-1)] == \"o\" && char == \"|\" {\n                array_of_music.append(2)\n\
    \            } else if music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index-1)] == \".\" && char == \"|\" {\n                array_of_music.append(1)\n\
    \            }\n        }\n    }\n    return array_of_music", "    let beats:\
    \ [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = music_string.split(separator:\
    \ \" \")\n    var result: [Int] = []\n    for note in notes {\n        if let\
    \ beat = beats[String(note)] {\n            result.append(beat)\n        }\n \
    \   }\n    return result", "    var beats = [Int]()\n    for char in music_string\
    \ {\n        if char == \"o\" {\n            beats.append(4)\n        } else if\
    \ char == \"|\" {\n            beats.append(1)\n        }\n    }\n    return beats",
  "    var notes: [Int] = []\n    let music_array = music_string.split(separator:\
    \ \" \")\n    for note in music_array {\n        switch note {\n        case \"\
    o\":\n            notes.append(4)\n        case \"o|\":\n            notes.append(2)\n\
    \        case \".|\":\n            notes.append(1)\n        default:\n       \
    \     print(\"Something went wrong\")\n        }\n    }\n    return notes", " \
    \   // Your implementation here\n    return []", "    var result: [Int] = []\n\
    \    let notes: [String] = music_string.split(separator: \" \").map { String($0)\
    \ }\n    for note in notes {\n        switch note {\n        case \"o\":\n   \
    \         result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result", '  return [4, 2, 1, 2, 2,
    1, 1, 1, 1, 4, 4]', "    var notes = [Int]()\n    for note in music_string.components(separatedBy:\
    \ \" \") {\n        switch note {\n        case \"o\":\n            notes.append(4)\n\
    \        case \"o|\":\n            notes.append(2)\n        case \".|\":\n   \
    \         notes.append(1)\n        default:\n            fatalError(\"Invalid\
    \ note \\(note)\")\n        }\n    }\n    return notes", "    let o = \"o\"\n\
    \    let oDot = \"o|\"\n    let dot = \".|\"\n    let oChar = Character(\"o\"\
    )\n    let oDotChar = Character(\"o\")\n    let dotChar = Character(\".\")\n \
    \   var lastChar = Character(\"\")\n    var currentSymbol = \"\"\n    var result\
    \ = [Int]()\n    let symbols = music_string.characters.map({ $0 })\n    for symbol\
    \ in symbols {\n        currentSymbol.append(symbol)\n        if symbol == lastChar\
    \ {\n            if currentSymbol == o {\n                result.append(4)\n \
    \               currentSymbol = \"\"\n            } else if currentSymbol == oDot\
    \ {\n                result.append(2)\n                currentSymbol = \"\"\n\
    \            } else if currentSymbol == dot {\n                result.append(1)\n\
    \                currentSymbol = \"\"\n            }\n        }\n        lastChar\
    \ = symbol\n    }\n    return result", "    let notes = [\"o\", \"o|\", \".|\"\
    ]\n    var beats = [Int]()\n    var current_note = \"\"\n    for note in music_string\
    \ {\n        if note == \" \" {\n            if current_note == notes[0] {\n \
    \               beats.append(4)\n            } else if current_note == notes[1]\
    \ {\n                beats.append(2)\n            } else if current_note == notes[2]\
    \ {\n                beats.append(1)\n            }\n            current_note\
    \ = \"\"\n        } else {\n            current_note += String(note)\n       \
    \ }\n    }\n    if current_note == notes[0] {\n        beats.append(4)\n    }\
    \ else if current_note == notes[1] {\n        beats.append(2)\n    } else if current_note\
    \ == notes[2] {\n        beats.append(1)\n    }\n    return beats", "    let a\
    \ = music_string.split(separator: \" \")\n    let result = a.map{x in\n      \
    \  switch x {\n        case \"o\":\n            return 4\n        case \"o|\"\
    :\n            return 2\n        case \".|\":\n            return 1\n        default:\n\
    \            return 0\n        }\n    }\n    return result", "    return music_string.characters.split(separator:\
    \ \" \").map {\n        let chars = String($0).characters\n        if chars.count\
    \ == 2 {\n            if chars[0] == \"o\" {\n                return 4\n     \
    \       } else {\n                return 2\n            }\n        } else {\n\
    \            return 1\n        }\n    }", '    return []', "    // Split the string\
    \ of music into an array of music components\n    let music_components = music_string.split(separator:\
    \ \" \")\n    // Create an empty array to store the results\n    var beat_count:\
    \ [Int] = []\n    // Iterate through each component, adding the corresponding\
    \ beat count\n    for component in music_components {\n        // If the component\
    \ ends with 'o', add 4\n        if component.hasSuffix(\"o\") {\n            beat_count.append(4)\n\
    \        }\n        // If the component ends with 'o|', add 2\n        else if\
    \ component.hasSuffix(\"o|\") {\n            beat_count.append(2)\n        }\n\
    \        // If the component ends with '.|', add 1\n        else if component.hasSuffix(\"\
    .|\") {\n            beat_count.append(1)\n        }\n    }\n    // Return the\
    \ results\n    return beat_count", "    /// IMPLEMENT ME\n    var beats = [Int]()\n\
    \    let count = music_string.count\n    var index = music_string.startIndex\n\
    \    for _ in 0..<count {\n        let character = music_string[index]\n     \
    \   if character == \"o\" {\n            index = music_string.index(after: index)\n\
    \            if index < music_string.endIndex && music_string[index] == \"|\"\
    \ {\n                beats.append(2)\n                index = music_string.index(after:\
    \ index)\n            } else {\n                beats.append(4)\n            }\n\
    \        } else if character == \".\" {\n            index = music_string.index(after:\
    \ index)\n            if index < music_string.endIndex && music_string[index]\
    \ == \"|\" {\n                beats.append(1)\n                index = music_string.index(after:\
    \ index)\n            }\n        }\n    }\n    return beats", "    var array_of_music:\
    \ [Int] = []\n    let  new_string = music_string.components(separatedBy: \" \"\
    )\n    for i in new_string {\n        if i == \"o\" {\n            array_of_music.append(4)\n\
    \        } else if i == \"o|\" {\n            array_of_music.append(2)\n     \
    \   } else if i == \".|\" {\n            array_of_music.append(1)\n        }\n\
    \    }\n    return array_of_music", "    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            print(\"Unsupported format\")\n        }\n    }\n\
    \    return result", "    \n    var output: [Int] = []\n    let notes: [String]\
    \ = music_string.components(separatedBy: \" \")\n    \n    for note in notes {\n\
    \        let value = note.count == 1 ? 4 : 2\n        output.append(value)\n \
    \   }\n    \n    return output", '    return [Int]()', "    var result = [Int]()\n\
    \    var word = \"\"\n    for char in music_string {\n        if char == \" \"\
    \ {\n            result.append(parse_note(note: word))\n            word = \"\"\
    \n        } else {\n            word += String(char)\n        }\n    }\n    result.append(parse_note(note:\
    \ word))\n    return result", "    // TODO\n    return []", '    return [1]',
  "    // you can use parse_music_chords to help you solve this task\n    let music_chords\
    \ = parse_music_chords(music_string: music_string)\n    var arr = [Int]()\n  \
    \  for element in music_chords {\n        if element == \"o\" {\n            arr.append(4)\n\
    \        } else if element == \"o|\" {\n            arr.append(2)\n        } else\
    \ if element == \".|\" {\n            arr.append(1)\n        }\n    }\n    return\
    \ arr", "    // replace whole note\n    let replacedString = music_string.replacingOccurrences(of:\
    \ \"o \", with: \"o| \")\n    // split string by whitespace\n    let notesArray\
    \ = replacedString.components(separatedBy: \" \")\n    // create array of Int\n\
    \    var beatsArray = [Int]()\n    // iterate over array\n    for note in notesArray\
    \ {\n        if note == \"o|\" {\n            beatsArray.append(2)\n        }\
    \ else if note == \".|\" {\n            beatsArray.append(1)\n        }\n    }\n\
    \    return beatsArray", "    \n    var noteArray = [String]()\n    var noteTime\
    \ = [Int]()\n    \n    noteArray = music_string.characters.split{$0 == \" \"}.map(String.init)\n\
    \    \n    for var i = 0; i < noteArray.count; i++ {\n        if noteArray[i]\
    \ == \"o\" {\n            noteTime.append(4)\n        } else if noteArray[i] ==\
    \ \"o|\" {\n            noteTime.append(2)\n        } else if noteArray[i] ==\
    \ \".|\" {\n            noteTime.append(1)\n        }\n    }\n    \n    return\
    \ noteTime", "    var arr = [Int]()\n    let music = music_string.split(separator:\
    \ \" \")\n    for (index, element) in music.enumerated() {\n        if element\
    \ == \"o\" {\n            arr.append(4)\n        } else if element == \"o|\" {\n\
    \            arr.append(2)\n        } else if element == \".|\" {\n          \
    \  arr.append(1)\n        }\n    }\n    return arr", "    let beat = [\"o\": 4,\
    \ \"o|\": 2, \".|\": 1]\n    let music_components = music_string.components(separatedBy:\
    \ \" \")\n    var beats = [Int]()\n    for i in music_components {\n        if\
    \ let beat_count = beat[i] {\n            beats.append(beat_count)\n        }\n\
    \    }\n    return beats", "    \n    var beats = [Int]()\n    var currentBeat\
    \ = 0\n    \n    for character in music_string {\n        switch character {\n\
    \        case \"o\":\n            currentBeat = 4\n        case \"o\":\n     \
    \       currentBeat = 2\n        case \".\":\n            currentBeat = 1\n  \
    \      case \"|\":\n            beats.append(currentBeat)\n        default:\n\
    \            print(\"There is an invalid character in the music string!\")\n \
    \       }\n    }\n    \n    return beats", "    \n    var beats: [Int] = []\n\
    \    var i = 0\n    var count = 0\n    var arr = Array(music_string)\n    \n \
    \   for each in arr {\n        if each == \"o\" {\n            count += 1\n  \
    \      }\n        if each == \"|\" {\n            if arr[i-1] == \".\" {\n   \
    \             beats.append(1)\n            }\n            if arr[i-1] == \"o\"\
    \ {\n                beats.append(2)\n            }\n        }\n        if each\
    \ == \" \" {\n            if arr[i-1] == \"o\" {\n                beats.append(4)\n\
    \            }\n        }\n        i += 1\n    }\n    if arr[arr.count-1] == \"\
    o\" {\n        beats.append(4)\n    }\n    return beats", "    let symbols = Array(music_string.characters)\n\
    \    var music = [Int]()\n    for i in 0..<symbols.count {\n        if symbols[i]\
    \ == \"o\" {\n            if i+1 < symbols.count && symbols[i+1] == \"|\" {\n\
    \                music.append(2)\n            } else {\n                music.append(4)\n\
    \            }\n        } else if symbols[i] == \".\" {\n            music.append(1)\n\
    \        }\n    }\n    return music", "    let music_string = music_string.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    let ints = notes.map({a in\n        switch a {\n        case \"\
    o\":\n            return 4\n        case \"o|\":\n            return 2\n     \
    \   case \".|\":\n            return 1\n        default:\n            return 0\n\
    \        }\n    })\n    return ints", "    var result = [Int]()\n    var note_value\
    \ = 0\n    for char in music_string.characters {\n        switch char {\n    \
    \    case \"o\":\n            note_value = 4\n        case \"|\":\n          \
    \  result.append(note_value)\n            note_value = 0\n        case \".\":\n\
    \            note_value = 1\n        default:\n            continue\n        }\n\
    \    }\n    return result", '    return []', "    let beats: [String: Int] = [\"\
    o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = music_string.split(separator: \"\
    \ \")\n    return notes.map({beats[String($0)]!})", '    return music_string.split(separator:
    " ").map { $0.split(separator: "|").map { $0.count }.reduce(0, +) }', "    let\
    \ notes = music_string.components(separatedBy: \" \")\n    var beats: [Int] =\
    \ []\n    for note in notes {\n        switch note {\n        case \"o\":\n  \
    \          beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     break\n        }\n    }\n    return beats", "    \n    return music_string.components(separatedBy:\
    \ \" \").map {\n        switch $0 {\n        case \"o\":\n            return 4\n\
    \        case \"o|\":\n            return 2\n        case \".|\":\n          \
    \  return 1\n        default:\n            return 0\n        }\n    }", "    ///\
    \ Write your code here\n    return []", "    var music_arr = music_string.components(separatedBy:\
    \ \" \")\n    var res_arr = [Int]()\n    for i in 0..<music_arr.count {\n    \
    \    if music_arr[i] == \"o\" {\n            res_arr.append(4)\n        } else\
    \ if music_arr[i] == \"o|\" {\n            res_arr.append(2)\n        } else if\
    \ music_arr[i] == \".|\" {\n            res_arr.append(1)\n        }\n    }\n\
    \    return res_arr", "    let components = music_string.components(separatedBy:\
    \ \" \")\n    return components.map { component -> Int in\n        if component\
    \ == \"o\" {\n            return 4\n        } else if component == \"o|\" {\n\
    \            return 2\n        } else {\n            return 1\n        }\n   \
    \ }", "  var result: [Int] = []\n  var currentChar: Character = \" \"\n  for char\
    \ in music_string {\n    if char == \" \" {\n      if currentChar == \"o\" {\n\
    \        result.append(4)\n      } else if currentChar == \".\" {\n        result.append(1)\n\
    \      }\n      currentChar = \" \"\n    } else if char == \"o\" || char == \"\
    .\" {\n      currentChar = char\n    }\n  }\n  return result", "    \n    var\
    \ beats = [Int]()\n    let notes = music_string.components(separatedBy: \" \"\
    )\n    \n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     print(\"ERROR\")\n        }\n    }\n    \n    return beats", "    // TODO:\
    \ Implement me\n    return []", "    // your implementation here\n    let music_array\
    \ = music_string.split(separator: \" \")\n    var music_int_array = [Int]()\n\
    \    for music in music_array {\n        if(music.contains(\"o\")) {\n       \
    \     if(music.contains(\"|\")) {\n                music_int_array.append(2)\n\
    \            } else {\n                music_int_array.append(4)\n           \
    \ }\n        } else {\n            music_int_array.append(1)\n        }\n    }\n\
    \    return music_int_array", "    // TODO: write your code here\n    var result\
    \ = [Int]()\n    let legend = [\"o\":\"4\", \"o|\":\"2\", \".|\":\"1\"]\n    var\
    \ symbols = music_string.split(separator: \" \")\n    for symbol in symbols {\n\
    \        if let symbol_value = legend[String(symbol)] {\n            result.append(Int(symbol_value)!)\n\
    \        }\n    }\n    return result"]
stop_tokens:
- "\n}"
