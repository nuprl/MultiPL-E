name: HumanEval_98_count_upper
language: swift
prompt: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
  \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
  \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
  \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\")\
  \ == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
completions: ["    var count = 0\n    for index in 0..<s.count {\n        let i =\
    \ s.index(s.startIndex, offsetBy: index)\n        if index % 2 == 0 && is_upper(s[i])\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var result\
    \ = 0\n    for (index, char) in s.enumerated() {\n        if index % 2 == 0 &&\
    \ char.isUppercase {\n            result += 1\n        }\n    }\n    return result",
  '    s.enumerated().filter { $0.offset % 2 == 0 && (String($0.element) == "A" ||
    String($0.element) == "E" || String($0.element) == "I" || String($0.element) ==
    "O" || String($0.element) == "U")}.count', "    return s.enumerated().reduce(0)\
    \ { (result, current) in\n        guard current.offset % 2 == 0 else { return\
    \ result }\n        guard let c = current.element.unicodeScalars.first else {\
    \ return result }\n        return result + (c.properties.uppercase ? 1 : 0)\n\
    \    }", "    var count = 0\n    for (index, char) in s.enumerated() {\n     \
    \   if index % 2 == 0 && is_upper(char: char) {\n            count += 1\n    \
    \    }\n    }\n    return count", "    var count = 0\n    for (index, char) in\
    \ s.enumerated() {\n        if index % 2 == 0 && \"AEIOU\".contains(char) {\n\
    \            count += 1\n        }\n    }\n    return count", "    let vowels\
    \ = CharacterSet(charactersIn: \"AEIOU\")\n    var count = 0\n    for (i, char)\
    \ in s.enumerated() {\n        if i % 2 == 0 && char.unicodeScalars.allSatisfy(vowels.contains)\
    \ {\n            count += 1\n        }\n    }\n    return count", "  var count\
    \ = 0\n  for (i, c) in s.enumerated() {\n    if (i % 2 == 0) && is_upper(c: c)\
    \ {\n      count += 1\n    }\n  }\n  return count", "    var count = 0\n    for\
    \ (index, c) in s.enumerated() {\n        if index % 2 == 0 && String(c).uppercased()\
    \ == String(c) && [\"A\", \"E\", \"I\", \"O\", \"U\"].contains(String(c)) {\n\
    \            count += 1\n        }\n    }\n    return count", '    s.enumerated().filter
    { $0.0 % 2 == 0 && $0.1.isUppercase }.count', '    return 0', "    var counter\
    \ = 0\n    for (index, char) in s.enumerated() {\n        if index % 2 == 0 &&\
    \ char.isUppercase {\n            counter += 1\n        }\n    }\n    return counter",
  "    let vowels = \"AEIOU\"\n    var count = 0\n    for (i, c) in s.uppercased().enumerated()\
    \ {\n        if i % 2 == 0 && vowels.contains(c) {\n            count += 1\n \
    \       }\n    }\n    return count", "    // let vowels = [\"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    var count = 0\n    for (i, char) in s.enumerated() {\n  \
    \      if i % 2 == 0 {\n            if char == \"A\" || char == \"E\" || char\
    \ == \"I\" || char == \"O\" || char == \"U\" {\n                count += 1\n \
    \           }\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ (index, c) in s.enumerated() {\n        if index % 2 == 0 && is_upper(c: c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().filter({ (index, char) -> Bool in\n        index % 2 == 0 &&\
    \ char.isUppercase\n    }).count", "    // your code here\n    return 0", "  \
    \  var result = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 &&\
    \ is_vowel(c: c) && c.isUppercase {\n            result += 1\n        }\n    }\n\
    \    return result", '    return s.enumerated().reduce(0) { $0 + ($1.0 % 2 ==
    0 && $1.1.isUppercase ? 1 : 0) }', "    let vowels = \"AEIOU\"\n    var count\
    \ = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let char = s[index]\n        if i % 2 == 0 && char >= \"A\" && char\
    \ <= \"Z\" && vowels.contains(char) {\n            count += 1\n        }\n   \
    \ }\n    return count", '    return s.characters.enumerated().reduce(0) { $0 +
    ($1.offset % 2 == 0 && "AEIOU".characters.contains($1.element) ? 1 : 0) }', " \
    \   var count = 0\n    for (index, c) in s.enumerated() {\n        if (index %\
    \ 2 == 0) && is_upper(c: c) {\n            count += 1\n        }\n    }\n    return\
    \ count", "  var count = 0\n  let vowels = \"AEIOU\"\n  for (i, c) in s.enumerated()\
    \ {\n    if i % 2 == 0 && vowels.contains(c) {\n      count += 1\n    }\n  }\n\
    \  return count", '    return 0', "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    let vowels = Set([\"A\", \"E\", \"I\", \"\
    O\", \"U\"])\n    return s.enumerated().reduce(0) {\n        $0 + (vowels.contains($1.element)\
    \ && $1.offset % 2 == 0 ? 1 : 0)\n    }", "    var count = 0\n    for (index,\
    \ char) in s.enumerated() {\n        if(index % 2 == 0 && isUpper(c: char)) {\n\
    \            count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for (index, char) in s.enumerated() {\n        if index % 2 == 0 && [\"\
    A\", \"E\", \"I\", \"O\", \"U\"].contains(char) {\n            count += 1\n  \
    \      }\n    }\n    return count", "    let vowels = \"aeiouAEIOU\"\n    var\
    \ count = 0\n    for (index, char) in s.enumerated() {\n        if index % 2 ==\
    \ 0 && vowels.contains(char) {\n            count += 1\n        }\n    }\n   \
    \ return count", '    return 0', "    var count = 0\n    for (i, v) in s.enumerated()\
    \ {\n        if (i % 2 == 0) && v.isUppercase {\n            count += 1\n    \
    \    }\n    }\n    return count", "    let even_indices = stride(from: 0, to:\
    \ s.count, by: 2)\n    let upper_vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n\
    \    return even_indices.reduce(0) {\n        $0 + (upper_vowels.contains(String(s[s.index(s.startIndex,\
    \ offsetBy: $1)])) ? 1 : 0)\n    }", "    // Your code here\n    return 0", " \
    \ var count = 0\n  for i in 0..<s.count {\n    if i % 2 == 0 {\n      if s[i].isUppercase\
    \ {\n        count += 1\n      }\n    }\n  }\n  return count", '    return count_upper_delegate(s:
    s, closure: { $0.isUppercase && $0.isVowel })', "  let vowels = Set(\"AEIOU\"\
    .characters)\n  return s.characters.enumerated().filter({ $0.offset % 2 == 0 }).reduce(0)\
    \ {\n    return $1.element.uppercased() == $1.element && vowels.contains($1.element)\
    \ ? $0 + 1 : $0\n  }", "    var evenCount = 0\n    var oddCount = 0\n    for (index,\
    \ char) in s.enumerated() {\n        if index % 2 == 0 {\n            if \"AEIOU\"\
    .contains(char) {\n                evenCount += 1\n            }\n        } else\
    \ {\n            if \"aeiou\".contains(char) {\n                oddCount += 1\n\
    \            }\n        }\n    }\n    return evenCount", "    var cnt = 0\n  \
    \  for (i, char) in s.enumerated() {\n        if i % 2 == 0 && char.isUppercase\
    \ {\n            cnt += 1\n        }\n    }\n    return cnt", '    return s.enumerated().filter
    { $0.offset % 2 == 0 && $0.element.isUppercase }.count', "    let uppercaseVowels\
    \ = \"AEIOU\"\n    var count = 0\n    for (index, char) in s.enumerated() {\n\
    \        if index % 2 == 0 && uppercaseVowels.contains(char) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    \n    var result = 0\n    \n\
    \    for (index, char) in s.characters.enumerated() {\n        if index % 2 ==\
    \ 0 && String(char).uppercased() == String(char) && (char == \"A\" || char ==\
    \ \"E\" || char == \"I\" || char == \"O\" || char == \"U\") {\n            result\
    \ += 1\n        }\n    }\n    \n    return result", '    return 0', "    var count\
    \ = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ && is_vowel(c: c) {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 {\n\
    \            switch c {\n            case \"A\", \"E\", \"I\", \"O\", \"U\":\n\
    \                count += 1\n            default:\n                continue\n\
    \            }\n        }\n    }\n    return count", "    var numUpper = 0\n \
    \   for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n\
    \            numUpper += 1\n        }\n    }\n    return numUpper", "    var count\
    \ = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) {\n        $0 + (($1.offset % 2 == 0) && s[$1.offset].isUppercase\
    \ ? 1 : 0)\n    }", "    var count = 0\n    let vowels = Set(\"AEIOU\")\n    for\
    \ (index, char) in s.uppercased().enumerated() {\n        if vowels.contains(char)\
    \ && index % 2 == 0 {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for (i, c) in s.characters.enumerated() {\n        if (i\
    \ % 2 == 0) && isUpperVowel(c: c) {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for i in stride(from: 0, to: s.count,\
    \ by: 2) {\n        if let c = s.uppercased().characters.first(where: { $0 ==\
    \ s[s.index(s.startIndex, offsetBy: i)] }) {\n            count += 1\n       \
    \ }\n    }\n    return count", '    return 0', "    return s.enumerated().reduce(0)\
    \ {\n        ($0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 :\
    \ 0))\n    }", '  return s.enumerated().reduce(0) { $0 + (($1.0 % 2 == 0 && $1.1.isUppercase)
    ? 1 : 0) }', "    var count = 0\n    for (i, c) in s.enumerated() {\n        if\
    \ (i % 2) == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n\
    \    return count", "    \n    var count = 0\n    \n    for (index, letter) in\
    \ s.enumerated() {\n        if index % 2 == 0 && letter.isUppercase {\n      \
    \      count += 1\n        }\n    }\n    \n    return count", '    return count_upper_filter(s)',
  "    var total = 0\n    for (i, char) in s.enumerated() {\n        if i % 2 == 0\
    \ && char.isUppercase {\n            total += 1\n        }\n    }\n    return\
    \ total", "    var count = 0\n    for (index, char) in s.enumerated() {\n    \
    \    if index % 2 == 0 && String(char).uppercased() == String(char) && String(char).lowercased()\
    \ != String(char) {\n            count += 1\n        }\n    }\n    return count",
  '    return s.enumerated().reduce(0) { acc, cur in acc + (is_upper_vowel(s: cur.element)
    && cur.offset % 2 == 0 ? 1 : 0) }', '    return s.enumerated().reduce(0) { $0
    + ($1.offset % 2 == 0 && $1.element.isUppercase ? 1 : 0) }', "    var count =\
    \ 0\n    let vowels = \"AEIOU\"\n    for i in 0 ..< s.count {\n        let char\
    \ = s[i]\n        let isUpper = char >= \"A\" && char <= \"Z\"\n        let isVowel\
    \ = vowels.contains(char)\n        if isUpper && isVowel && i % 2 == 0 {\n   \
    \         count += 1\n        }\n    }\n    return count", "    \n    var count\
    \ = 0\n    \n    for (index, char) in s.enumerated() {\n        if index % 2 ==\
    \ 0 && char.isUppercase {\n            count += 1\n        }\n    }\n    \n  \
    \  return count", "    var s = s\n    s.remove(at: s.startIndex)\n    return (s.filter\
    \ { ($0 == \"A\" || $0 == \"E\" || $0 == \"I\" || $0 == \"O\" || $0 == \"U\")\
    \ }).count", "    return s.enumerated().reduce(0) { (acc, e) in\n        if e.offset\
    \ % 2 == 0 && e.element.isUppercase {\n            return acc + 1\n        }\n\
    \        return acc\n    }", "    var count = 0\n    for (index, c) in s.enumerated()\
    \ {\n        if index % 2 == 0 && isUpper(c) {\n            count += 1\n     \
    \   }\n    }\n    return count", "    var count = 0\n    for (index, char) in\
    \ s.enumerated() {\n        if (index % 2) == 0 {\n            if char.isUppercase\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var vowels = 0\n    var i = 0\n    while i < s.count {\n        let character\
    \ = String(s[String.Index(utf16Offset: i, in: s)])\n        if (character == \"\
    A\" || character == \"E\" || character == \"I\" || character == \"O\" || character\
    \ == \"U\") && i % 2 == 0 {\n            vowels += 1\n        }\n        i +=\
    \ 1\n    }\n    return vowels", "    // TODO: Implement function\n    return 0",
  "    var count = 0\n    let vowels = \"aeiou\"\n    for (index, char) in s.enumerated()\
    \ {\n        if index % 2 == 0 && vowels.contains(char) {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    var index =\
    \ 0\n    for ch in s {\n        if \"AEIOU\".contains(ch) && index % 2 == 0 {\n\
    \            count += 1\n        }\n        index += 1\n    }\n    return count",
  "    let vowels = Set(\"AEIOU\")\n    return s.enumerated().reduce(0) { result,\
    \ x in\n        return result + (vowels.contains(x.element) && x.offset % 2 ==\
    \ 0 ? 1 : 0)\n    }", "    return s.enumerated().filter { i, char in\n       \
    \ let isUpper = char.isUppercase\n        let isEven = i % 2 == 0\n        return\
    \ isUpper && isEven\n    }.count", "    return s.enumerated().reduce(0) { (acc,\
    \ pair) in\n        return pair.offset % 2 == 0 && pair.element.isUppercase ?\
    \ acc + 1 : acc\n    }", '    return 0', "    let vowels = \"AEIOU\"\n    var\
    \ count = 0\n    for (i, c) in s.enumerated() {\n        if (i % 2 == 0) && vowels.contains(c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for i in s.indices where i.encodedOffset % 2 == 0 {\n        if s[i].isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for (i,c) in s.enumerated() {\n        if i % 2 == 0 && is_upper(c:\
    \ c) {\n            count += 1\n        }\n    }\n    return count", "    \n \
    \   return 0", "    let vowels = CharacterSet(charactersIn: \"AEIOU\")\n    var\
    \ count = 0\n    for (index, character) in s.enumerated() {\n        if index\
    \ % 2 == 0 && String(character).rangeOfCharacter(from: vowels) != nil {\n    \
    \        count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for (index, value) in s.enumerated() {\n        if index % 2 == 0 && value.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", '    return
    0', "    var count = 0\n    for (index, char) in s.enumerated() {\n        if\
    \ index % 2 == 0 {\n            if char == \"A\" || char == \"E\" || char == \"\
    I\" || char == \"O\" || char == \"U\" {\n                count += 1\n        \
    \    }\n        }\n    }\n    return count", "    let vowels = [\"A\", \"E\",\
    \ \"I\", \"O\", \"U\"]\n    let uppercase = s.uppercased()\n    var count = 0\n\
    \    for (i, letter) in uppercase.enumerated() {\n        if i % 2 == 0 && vowels.contains(String(letter))\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for (i, c) in s.characters.enumerated() {\n        if i % 2 == 0 &&\
    \ is_upper(s: c) {\n            count += 1\n        }\n    }\n    return count",
  '    return s.enumerated().filter { $0.offset % 2 == 0 && $0.element.isUppercase
    }.count', "  var count = 0\n  for (i, c) in s.enumerated() {\n    if i % 2 ==\
    \ 0 && \"AEIOU\".contains(c) {\n      count += 1\n    }\n  }\n  return count",
  "    var upper_count = 0\n    for (index, character) in s.enumerated() {\n     \
    \   if index % 2 == 0 && is_upper(character: character) {\n            upper_count\
    \ += 1\n        }\n    }\n    return upper_count", "    return s.enumerated().reduce(0)\
    \ {\n        if $1.0 % 2 == 0 && \"AEIOU\".contains($1.1) {\n            return\
    \ $0 + 1\n        }\n        return $0\n    }", "    var sum = 0\n    for (i,\
    \ c) in s.enumerated() {\n        if i % 2 == 0 && c >= \"A\" && c <= \"Z\" {\n\
    \            sum += 1\n        }\n    }\n    return sum", "    return s.enumerated().filter\
    \ { (i, c) in\n        c.isUppercase && i % 2 == 0\n    }.count", "    // TODO:\
    \ Implement me!\n    return 0", "    s.enumerated().reduce(0) { (a, e) in\n  \
    \      a + (e.offset % 2 == 0 && e.element.isUppercase ? 1 : 0)\n    }", "   \
    \ var vowelCount = 0\n    let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n \
    \   for (index, char) in s.enumerated() {\n        if index % 2 == 0 && vowels.contains(String(char))\
    \ {\n            vowelCount += 1\n        }\n    }\n    return vowelCount", " \
    \   let vowels = s.enumerated().filter { $0.0 % 2 == 0 && \"AEIOU\".contains($0.1)\
    \ }\n    return vowels.count", "    var count = 0\n    for (index, char) in s.enumerated()\
    \ {\n        if index % 2 == 0 && char.isUppercase {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 {\n            if is_upper_vowel(c: c) {\n        \
    \        count += 1\n            }\n        }\n    }\n    return count", "   \
    \ return s.enumerated().filter { (offset, character) in\n        return offset\
    \ % 2 == 0 && CharacterSet.uppercaseLetters.contains(character.unicodeScalars.first!)\n\
    \    }.count", "    var c = 0\n    for (i, l) in s.enumerated() {\n        if\
    \ i % 2 == 0 && is_upper(l) && is_vowel(l) {\n            c += 1\n        }\n\
    \    }\n    return c", "    // TODO: implement me\n    return 0", "  var counter\
    \ = 0\n  for (index, letter) in s.enumerated() {\n    if isVowel(letter: letter)\
    \ && index % 2 == 0 {\n      counter += 1\n    }\n  }\n  return counter", '    return
    s.filter { $0.isUppercase && $0.isVowel }.count', '    // your code here', " \
    \ var ans = 0\n  for i in 0..<s.count {\n    let char = s[s.index(s.startIndex,\
    \ offsetBy: i)]\n    if i % 2 == 0 && is_upper(char: char) && is_vowel(char: char)\
    \ {\n      ans += 1\n    }\n  }\n  return ans", "    let vowels = \"aeiou\"\n\
    \    var count = 0\n    for (index, char) in s.enumerated() {\n        if index\
    \ % 2 == 0 && vowels.contains(char) {\n            count += 1\n        }\n   \
    \ }\n    return count", '    return 0', "    var count = 0\n    let vowels = \"\
    AEIOU\"\n    for (index, char) in s.uppercased().enumerated() {\n        if index\
    \ % 2 == 0 && vowels.contains(char) {\n            count += 1\n        }\n   \
    \ }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated() {\n\
    \        if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", '  return 0', "    var count = 0\n    for (i, char)\
    \ in s.characters.enumerated() {\n        switch char {\n        case \"A\", \"\
    E\", \"I\", \"O\", \"U\":\n            if i % 2 == 0 {\n                count\
    \ += 1\n            }\n        default:\n            continue\n        }\n   \
    \ }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated() {\n\
    \        if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for (index, char) in s.enumerated()\
    \ {\n        if index % 2 == 0 {\n            switch char {\n            case\
    \ \"A\", \"E\", \"I\", \"O\", \"U\":\n                count += 1\n           \
    \ default:\n                break\n            }\n        }\n    }\n    return\
    \ count", "    return s.enumerated().reduce(0) { (prev, i) in\n        prev +\
    \ (i.element.isUppercaseVowel && i.offset % 2 == 0 ? 1 : 0)\n    }", "    return\
    \ s.indices.reduce(0) { (count, index) in\n        let char = s[index]\n     \
    \   let isUpper = CharacterSet.uppercaseLetters.contains(char.unicodeScalars.first!)\n\
    \        let isEven = index.encodedOffset % 2 == 0\n        return count + (isUpper\
    \ && isEven ? 1 : 0)\n    }", "    \n    var count = 0\n    \n    for (index,\
    \ element) in s.enumerated() {\n        if index % 2 == 0 && element == \"A\"\
    \ || element == \"E\" || element == \"I\" || element == \"O\" || element == \"\
    U\" {\n            count += 1\n        }\n    }\n    \n    return count", "  \
    \  let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    var counter = 0\n   \
    \ for (index, character) in s.enumerated() {\n        if index % 2 == 0 && vowels.contains(String(character))\
    \ {\n            counter += 1\n        }\n    }\n    return counter", '    return
    0', "    return s.enumerated().filter {\n        $0.0 % 2 == 0 && \"AEIOU\".contains($0.1)\n\
    \    }.count", '    return s.enumerated().filter({ $0.offset % 2 == 0 && $0.element.isUppercase
    }).count', "    var count = 0\n    for (index, char) in s.enumerated() {\n   \
    \     if index % 2 == 0 {\n            if (char == \"A\" || char == \"E\" || char\
    \ == \"I\" || char == \"O\" || char == \"U\") {\n                count += 1\n\
    \            }\n        }\n    }\n    return count", '    return 0', "    var\
    \ count = 0\n    var i = 0\n    for c in s {\n        if i % 2 == 0 && is_upper(c:\
    \ c) {\n            count += 1\n        }\n        i += 1\n    }\n    return count",
  "    let vowels = CharacterSet(charactersIn: \"AEIOU\")\n    var count = 0\n   \
    \ for (i, c) in s.uppercased().enumerated() {\n        if i % 2 == 0 && vowels.contains(c.unicodeScalars.first!)\
    \ {\n            count += 1\n        }\n    }\n    return count", '  return s.filter{
    $0.isUppercase }.count', "    return zip(s.indices, s)\n        .filter{$0.0 %\
    \ 2 == 0}\n        .filter{$0.1 >= \"A\" && $0.1 <= \"Z\"}\n        .count", '    return
    0', "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 ==\
    \ 0 {\n            continue\n        }\n        if c == \"A\" || c == \"E\" ||\
    \ c == \"I\" || c == \"O\" || c == \"U\" {\n            count += 1\n        }\n\
    \    }\n    return count", "    var result = 0\n    let vowels = [\"A\", \"E\"\
    , \"I\", \"O\", \"U\"]\n    for (index, letter) in s.enumerated() {\n        if\
    \ index % 2 == 0 && vowels.contains(String(letter)) {\n            result += 1\n\
    \        }\n    }\n    return result", "    var count = 0\n    for (index, char)\
    \ in s.enumerated() {\n        if index % 2 == 0 && char.isUppercase {\n     \
    \       count += 1\n        }\n    }\n    return count", "  var count = 0\n  for\
    \ (i, c) in s.enumerated() {\n    if i % 2 == 0 && c.isUppercase {\n      count\
    \ += 1\n    }\n  }\n  return count", '    return 0', "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        if x.offset % 2 == 0 && x.element.isUppercase {\n   \
    \         return acc + 1\n        }\n        return acc\n    }", "    var total\
    \ = 0\n    for (i, c) in s.enumerated() {\n        if c.isUppercase && i.isMultiple(of:\
    \ 2) {\n            total += 1\n        }\n    }\n    return total", '    return
    Int()', "    var count = 0\n    for (index, char) in s.enumerated() {\n      \
    \  if index % 2 == 0 && is_vowel(s: String(char)) {\n            count += 1\n\
    \        }\n    }\n    return count", "    var n: Int = 0\n    for i in stride(from:\
    \ 0, to: s.count, by: 2) {\n        let c = s[s.index(s.startIndex, offsetBy:\
    \ i)]\n        if c.isUppercase {\n            n += 1\n        }\n    }\n    return\
    \ n", "    var count = 0\n    for (index, char) in s.enumerated() {\n        if\
    \ index % 2 == 0 && char.isUppercase {\n            count += 1\n        }\n  \
    \  }\n    return count", "    var count = 0\n    var up = [\"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 &&\
    \ up.contains(String(c)) {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var result = 0\n    for (i, c) in s.enumerated() {\n        if\
    \ i % 2 == 0 && \"AEIOU\".contains(c) {\n            result += 1\n        }\n\
    \    }\n    return result", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if \"AEIOU\".contains(c) && i % 2 == 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for (i, char) in\
    \ s.enumerated() {\n        if i % 2 == 0 && char.isUppercase {\n            count\
    \ += 1\n        }\n    }\n    return count", "    let vowels = s.filter {\n  \
    \      [\"A\", \"E\", \"I\", \"O\", \"U\"].contains($0)\n    }\n    return vowels.filter\
    \ { String($0) == String($0).uppercased() }.count", '    return s.enumerated().filter
    { $0.offset % 2 == 0 && $0.element.isUppercase }.count', "    var result = 0\n\
    \    for (index, char) in s.enumerated() {\n        switch char {\n        case\
    \ \"A\", \"E\", \"I\", \"O\", \"U\":\n            if index % 2 == 0 {\n      \
    \          result += 1\n            }\n        default:\n            continue\n\
    \        }\n    }\n    return result", "    return s.enumerated().reduce(0) {\n\
    \        return ( $1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ) ? $0\
    \ + 1 : $0\n    }", "    var result = 0\n    for (i, c) in s.enumerated() {\n\
    \        if i % 2 == 0 && c.isUppercase && c.isVowel {\n            result +=\
    \ 1\n        }\n    }\n    return result", "    let vowels = [\"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    var count = 0\n    for (index, char) in s.enumerated()\
    \ {\n        if index % 2 == 0 && vowels.contains(String(char)) {\n          \
    \  count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ (index, letter) in s.enumerated() {\n        if index % 2 == 0 && letter.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let upperVowels\
    \ = s.filter { $0.isUppercase && $0.isVowel }\n    return upperVowels.count",
  '    return s.enumerated().filter { $0.offset % 2 == 0 && "AEIOU".contains($0.element)
    }.count', "    return s.enumerated().reduce(0) {\n        $0 + (($1.offset % 2\
    \ == 0) && \"AEIOU\".contains($1.element)) ? 1 : 0\n    }", "    // TODO: Write\
    \ some code to solve this challenge!\n    var vowels : [Character] = [\"A\", \"\
    E\", \"I\", \"O\", \"U\"]\n    var count = 0\n    for (index, letter) in s.enumerated()\
    \ {\n        if index % 2 == 0 && vowels.contains(letter) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ { acc, item in\n        acc + (item.offset % 2 == 0 && item.element.isUppercase\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (index, char) in s.enumerated()\
    \ {\n        if index % 2 == 0 && char.isUppercase {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if \"AEIOU\".contains(c) && i % 2 == 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for (index, char)\
    \ in s.enumerated() {\n        if index % 2 == 0 && char.isUppercase {\n     \
    \       count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for (index, value) in s.enumerated() {\n        if index % 2 == 0 && value.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let char = s[index]\n        if i % 2 == 0 && char.isUppercase {\n\
    \            count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for (index, value) in s.enumerated() {\n        if index % 2 == 0 &&\
    \ value.isUppercase {\n            count += 1\n        }\n    }\n    return count",
  '    return s.enumerated().filter({ $0.0 % 2 == 0 }).reduce(0, { $1.element == "A"
    || $1.element == "E" || $1.element == "I" || $1.element == "O" || $1.element ==
    "U" ? $0 + 1 : $0 })', '    return s.enumerated().filter({$0.offset % 2 == 0}).filter({$0.element.isUppercase}).count',
  '    return 0', '    return 0', "    var num_upper = 0\n    for (index, char) in\
    \ s.enumerated() {\n        if is_vowel(char: char) && is_upper(char: char) &&\
    \ index % 2 == 0 {\n            num_upper += 1\n        }\n    }\n    return num_upper",
  "    let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    var count = 0\n    for\
    \ i in stride(from: 0, to: s.count, by: 2) {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let c = String(s[index])\n        if vowels.contains(c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for (index, character) in s.enumerated() {\n        if character ==\
    \ \"A\" || character == \"E\" || character == \"I\" || character == \"O\" || character\
    \ == \"U\" {\n            if index % 2 == 0 {\n                count += 1\n  \
    \          }\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ {\n        ($0 + ($1.offset % 2 == 0 && $1.element.isUppercase ? 1 : 0))\n \
    \   }", '    s.enumerated().reduce(0) {$0 + ($1.offset % 2 == 0 && $1.element.isUppercase
    ? 1 : 0)}', "  var count = 0\n  for (index, letter) in s.enumerated() {\n    if\
    \ index % 2 == 0 && letter.isUppercase {\n      count += 1\n    }\n  }\n  return\
    \ count", "    var num = 0\n    for (i, c) in s.enumerated() {\n        if i %\
    \ 2 == 0 && is_vowel(c: c) && c.isUppercase {\n            num += 1\n        }\n\
    \    }\n    return num", '    s.indices.reduce(0) { $1.isMultiple(of: 2) && s[$1].isUppercase
    ? $0 + 1 : $0 }', "    var vowelCount = 0\n    for (index, value) in s.enumerated()\
    \ {\n        switch value {\n        case \"A\", \"E\", \"I\", \"O\", \"U\":\n\
    \            if index % 2 == 0 {\n                vowelCount += 1\n          \
    \  }\n        default:\n            break\n        }\n    }\n    return vowelCount",
  '    return s.enumerated().filter {$0.0 % 2 == 0}.filter { $0.element.contains("A")
    || $0.element.contains("E") || $0.element.contains("I") || $0.element.contains("O")
    || $0.element.contains("U") }.count', "    var numUpper = 0\n    for (index, char)\
    \ in s.enumerated() {\n        if index % 2 == 0 && char.isUppercase && char.isVowel\
    \ {\n            numUpper += 1\n        }\n    }\n    return numUpper", "    return\
    \ s.enumerated().filter({ (index, character) -> Bool in\n        return index\
    \ % 2 == 0 && character.isUppercase\n    }).count", "    let allChars = Array(s)\n\
    \    var count = 0\n    for i in stride(from: 0, to: allChars.count, by: 2) {\n\
    \        if String(allChars[i]).uppercased() == String(allChars[i]) && isVowel(c:\
    \ allChars[i]) {\n            count += 1\n        }\n    }\n    return count",
  "    var result = 0\n    for (index, char) in s.enumerated() {\n        if index\
    \ % 2 == 0 && \"AEIOU\".contains(char) {\n            result += 1\n        }\n\
    \    }\n    return result", "    var c = 0\n    for (index, char) in s.enumerated()\
    \ {\n        if index % 2 == 0 && char.isUppercase && char.isVowel {\n       \
    \     c += 1\n        }\n    }\n    return c", "    var vowels = 0\n    var stringIndex\
    \ = s.startIndex\n    while stringIndex != s.endIndex {\n        let character\
    \ = s[stringIndex]\n        if (character == \"A\" || character == \"E\" || character\
    \ == \"I\" || character == \"O\" || character == \"U\") {\n            if (s.distance(from:\
    \ s.startIndex, to: stringIndex) % 2 == 0) {\n                vowels += 1\n  \
    \          }\n        }\n        stringIndex = s.index(after: stringIndex)\n \
    \   }\n    return vowels", '    return 0', "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.0 % 2 == 0 && $1.1.isUppercase ? 1 : 0)\n    }", "    let\
    \ vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    var uppercase_count = 0\n\
    \    for (i, c) in s.characters.enumerated() {\n        if i % 2 == 0 && vowels.contains(String(c))\
    \ {\n            uppercase_count += 1\n        }\n    }\n    return uppercase_count",
  "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 &&\
    \ is_upper(c: c) {\n            count += 1\n        }\n    }\n    return count",
  "    return s.enumerated().reduce(0) {\n        $0 + (($1.offset % 2 == 0) && isupper(String($1.element))\
    \ ? 1 : 0)\n    }", "    var count = 0\n    let vowels = \"aeiou\"\n    for i\
    \ in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n \
    \       let character = s[index]\n        if i % 2 == 0 && vowels.contains(character)\
    \ && character.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for (i, c) in s.enumerated() {\n        if c.isUppercase\
    \ && i % 2 == 0 {\n            count += 1\n        }\n    }\n    return count",
  "    // YOUR CODE HERE\n    return 0", "    // your code here\n    var count = 0\n\
    \    for (index, letter) in s.enumerated() {\n        if index % 2 == 0 && letter.isUppercase\
    \ && \"AEIOU\".contains(letter) {\n            count += 1\n        }\n    }\n\
    \    return count", "    // Your code here!\n    return 0", "    return s.enumerated().filter\
    \ { (index, char) in\n        index % 2 == 0 && \"AEIOU\".contains(char)\n   \
    \ }.count", "    var cnt = 0\n    for (i, ch) in s.enumerated() {\n        if\
    \ i % 2 == 0 && \"AEIOU\".contains(ch) {\n            cnt += 1\n        }\n  \
    \  }\n    return cnt", "    // TODO: Implement me!\n    return 0", "  var counter\
    \ = 0\n  for (index, character) in s.enumerated() {\n    if index % 2 == 0 &&\
    \ is_upper(character: character) {\n      counter += 1\n    }\n  }\n  return counter",
  "    let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    var result = 0\n    for\
    \ (index, char) in s.enumerated() {\n        if index % 2 == 0 && vowels.contains(String(char))\
    \ {\n            result += 1\n        }\n    }\n    return result", "    var count\
    \ = 0\n    var even = false\n    for char in s {\n        if even {\n        \
    \    if char.isUppercase {\n                count += 1\n            }\n      \
    \  }\n        even = !even\n    }\n    return count", "    var count = 0\n   \
    \ for i in 0..<s.count {\n        if i % 2 == 0 {\n            let c = s[i]\n\
    \            if c == \"A\" || c == \"E\" || c == \"I\" || c == \"O\" || c == \"\
    U\" {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count", "    return s.enumerated().reduce(0) {\n        if $1.offset % 2 ==\
    \ 0 && \"AEIOU\".contains($1.element) {\n            return $0 + 1\n        }\n\
    \        return $0\n    }", '    return s.characters.enumerated().reduce(0) {
    if $0.offset % 2 == 0, $0.element.isUppercase { return $1 + 1 } else { return
    $1 } }', "  // TODO: Implement\n  return 0", "    var count = 0\n    for (index,\
    \ char) in s.enumerated() {\n        if index % 2 == 0 {\n            if char\
    \ == \"A\" || char == \"E\" || char == \"I\" || char == \"O\" || char == \"U\"\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var c = 0\n    let u = \"AEIOU\"\n    for (i, char) in s.enumerated() {\n \
    \       if i % 2 == 0 && u.contains(char) {\n            c += 1\n        }\n \
    \   }\n    return c"]
stop_tokens:
- "\n}"
