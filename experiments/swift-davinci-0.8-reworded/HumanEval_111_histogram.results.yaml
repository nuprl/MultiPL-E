language: swift
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram: [String : Int] = [:]\n    let array = test.components(separatedBy:\
    \ \" \")\n    array.forEach {\n        let string = $0\n        let count = histogram[string]\
    \ ?? 0\n        histogram[string] = count + 1\n    }\n    let maxCount = histogram.values.max()\
    \ ?? 0\n    let chars = histogram.filter {\n        $0.value == maxCount\n   \
    \ }\n    return chars\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmprxudx0aj.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // STUDENT: write your code here\n    return [:]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpfksdi_zr/tmpfksdi_zr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8227a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8227716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8227716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82277157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfksdi_zr                        0x00005559140e459b <unavailable> + 5531

    5    libc.so.6                          0x00002b8227c0b460 __libc_start_main +
    245

    6    tmpfksdi_zr                        0x00005559140e4139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  let letters = test.split(separator: \" \")\n  let counts = letters.reduce(into:\
    \ [:]) {\n    if let value = $0[String($1)] {\n      $0[String($1)] = value +\
    \ 1\n    } else {\n      $0[String($1)] = 1\n    }\n  }\n  let max = counts.values.max()\
    \ ?? 0\n  return counts.filter { $0.value == max }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnvmdqjhy.swift:20:24: error: cannot convert value of type 'Any'\
    \ to expected argument type 'Int'\n      $0[String($1)] = value + 1\n        \
    \               ^\n                             as! Int\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var occurences: [String : Int] = [:]\n    var h: Int = 0\n    var\
    \ max: Int = 0\n    let letters = test.split(separator: \" \")\n    for i in letters\
    \ {\n        if occurences[String(i)] == nil {\n            occurences[String(i)]\
    \ = 1\n        } else {\n            occurences[String(i)]! += 1\n        }\n\
    \    }\n    for (key, value) in occurences {\n        if value > max {\n     \
    \       max = value\n        }\n    }\n    for (key, value) in occurences {\n\
    \        if value == max {\n            h += 1\n        }\n    }\n    var result:\
    \ [String : Int] = [:]\n    if h != 1 {\n        for (key, value) in occurences\
    \ {\n            if value == max {\n                result[key] = value\n    \
    \        }\n        }\n    } else {\n        for (key, value) in occurences {\n\
    \            if value == max {\n                result[key] = value\n        \
    \    }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    let frequency =\
    \ NSCountedSet(array: letters)\n    let maxCount = frequency.map { frequency.count(for:\
    \ $0) }.max()\n    let mostFrequent = frequency.filter { frequency.count(for:\
    \ $0) == maxCount }\n    return Dictionary(uniqueKeysWithValues: mostFrequent.map\
    \ { ($0 as! String, maxCount!) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnvry66cz.swift:18:21: error: cannot find 'NSCountedSet' in scope\n\
    \    let frequency = NSCountedSet(array: letters)\n                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let words = test.split(separator: \" \")\n    var result = [String\
    \ : Int]()\n    for word in words {\n        if let value = result[String(word)]\
    \ {\n            result[String(word)] = value + 1\n        } else {\n        \
    \    result[String(word)] = 1\n        }\n    }\n    var max = 0\n    for (key,\
    \ value) in result {\n        if value > max {\n            max = value\n    \
    \    }\n    }\n    var finalResult = [String : Int]()\n    for (key, value) in\
    \ result {\n        if value == max {\n            finalResult[key] = value\n\
    \        }\n    }\n    return finalResult\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var output = [String : Int]()\n    test.lowercased().split(separator:\
    \ \" \").forEach {\n        if output[String($0)] == nil {\n            output[String($0)]\
    \ = 1\n        } else {\n            output[String($0)]! += 1\n        }\n   \
    \ }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpwu8l1xz7/tmpwu8l1xz7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafbb0b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafbadaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafbadaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafbada97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu8l1xz7                        0x000055ee7c5c1bc6 <unavailable> + 7110

    5    libc.so.6                          0x00002aafbb29f460 __libc_start_main +
    245

    6    tmpwu8l1xz7                        0x000055ee7c5c15d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    let max = words.reduce(0) { (result, word) -> Int in\n        return\
    \ max(result, word.count)\n    }\n    for word in words {\n        if result[word]\
    \ == nil {\n            result[word] = 1\n        } else {\n            result[word]!\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphr77zxrm.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var max: Int = 0\n    for\
    \ letter in test.components(separatedBy: \" \") {\n        if histogram[letter]\
    \ == nil {\n            histogram[letter] = 1\n        } else {\n            histogram[letter]!\
    \ += 1\n        }\n        if histogram[letter]! > max {\n            max = histogram[letter]!\n\
    \        }\n    }\n    var final = [String : Int]()\n    for (key, value) in histogram\
    \ {\n        if value == max {\n            final[key] = value\n        }\n  \
    \  }\n    return final\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpk_v9vuo0.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letterList = test.split(separator: \" \")\n    var resultsDictionary\
    \ = [String : Int]()\n    if !test.isEmpty {\n        for letter in letterList\
    \ {\n            if let count = resultsDictionary[String(letter)] {\n        \
    \        resultsDictionary[String(letter)] = count + 1\n            } else {\n\
    \                resultsDictionary[String(letter)] = 1\n            }\n      \
    \  }\n    }\n    return resultsDictionary\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpwibqm05w/tmpwibqm05w.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bd800c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bd4f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85bd4f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85bd4f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwibqm05w                        0x0000563ce07c8bd6 <unavailable> + 7126

    5    libc.so.6                          0x00002b85bd9ec460 __libc_start_main +
    245

    6    tmpwibqm05w                        0x0000563ce07c85e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var hist = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    let arrayUnique = Array(Set(array))\n    let map = arrayUnique.map\
    \ { (str) -> Int in\n        return array.filter({$0 == str}).count\n    }\n \
    \   for (index, str) in arrayUnique.enumerated() {\n        hist[str] = map[index]\n\
    \    }\n    return hist\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphtqa3uci.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let arrayOfLetters = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \    let letters = Set(arrayOfLetters)\n    var histogram = [String : Int]()\n\
    \    var max = 1\n    var maxLetters = [String]()\n    for i in letters {\n  \
    \      histogram[i] = arrayOfLetters.filter {$0 == i}.count\n        if arrayOfLetters.filter\
    \ {$0 == i}.count == max {\n            maxLetters.append(i)\n        } else if\
    \ arrayOfLetters.filter {$0 == i}.count > max {\n            max = arrayOfLetters.filter\
    \ {$0 == i}.count\n            maxLetters = [i]\n        }\n    }\n    for i in\
    \ maxLetters {\n        histogram[i] = max\n    }\n    return histogram\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp40hm3gq3.swift:17:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    let arrayOfLetters = test.characters.split{$0 == \"\
    \ \"}.map(String.init)\n                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp40hm3gq3.swift:26:41: warning: trailing\
    \ closure in this context is confusable with the body of the statement; pass as\
    \ a parenthesized argument to silence this warning\n        } else if arrayOfLetters.filter\
    \ {$0 == i}.count > max {\n                                       ~^\n       \
    \                                (         )\n/tmp/tmp40hm3gq3.swift:24:34: warning:\
    \ trailing closure in this context is confusable with the body of the statement;\
    \ pass as a parenthesized argument to silence this warning\n        if arrayOfLetters.filter\
    \ {$0 == i}.count == max {\n                                ~^\n             \
    \                   (         )\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let test = test.lowercased()\n    let alphabet = CharacterSet.lowercaseLetters\n\
    \    let characters = test.trimmingCharacters(in: alphabet.inverted).split(separator:\
    \ \" \")\n    var histogram = [String : Int]()\n    for character in characters\
    \ {\n        if let count = histogram[String(character)] {\n            histogram[String(character)]\
    \ = count + 1\n        } else {\n            histogram[String(character)] = 1\n\
    \        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpno74jqug.swift:18:20: error: cannot find 'CharacterSet' in scope\n\
    \    let alphabet = CharacterSet.lowercaseLetters\n                   ^~~~~~~~~~~~\n\
    /tmp/tmpno74jqug.swift:19:27: error: value of type 'String' has no member 'trimmingCharacters'\n\
    \    let characters = test.trimmingCharacters(in: alphabet.inverted).split(separator:\
    \ \" \")\n                     ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let arr = test.split(separator: \" \")\n    var dict = [String :\
    \ Int]()\n    for s in arr {\n        if dict[String(s)] == nil {\n          \
    \  dict[String(s)] = 1\n        } else {\n            dict[String(s)]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpmvvo1vwz/tmpmvvo1vwz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bbc451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bbc148b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bbc148988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bbc1477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvvo1vwz                        0x000055d916d9fc76 <unavailable> + 7286

    5    libc.so.6                          0x00002b3bbc63d460 __libc_start_main +
    245

    6    tmpmvvo1vwz                        0x000055d916d9f689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    let charArray = test.components(separatedBy: \" \")\n    var\
    \ stringDict: [String : Int] = [:]\n    \n    for char in charArray {\n      \
    \  if stringDict[char] == nil {\n            stringDict[char] = 1\n        } else\
    \ {\n            stringDict[char]! += 1\n        }\n    }\n    \n    var resultDict:\
    \ [String : Int] = [:]\n    var maxValue = 0\n    \n    for key in stringDict.keys\
    \ {\n        if resultDict.isEmpty {\n            resultDict[key] = stringDict[key]\n\
    \            maxValue = stringDict[key]!\n        } else {\n            if stringDict[key]!\
    \ > maxValue {\n                resultDict = [:]\n                resultDict[key]\
    \ = stringDict[key]\n                maxValue = stringDict[key]!\n           \
    \ } else if stringDict[key]! == maxValue {\n                resultDict[key] =\
    \ stringDict[key]\n            }\n        }\n    }\n    \n    return resultDict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpta9pupos.swift:18:26: error: value of type 'String' has no member\
    \ 'components'\n    let charArray = test.components(separatedBy: \" \")\n    \
    \                ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letterArray = test.components(separatedBy: \" \")\n    var dictionary\
    \ = [String : Int]()\n    if letterArray.count == 0 {\n        return dictionary\n\
    \    }\n    for letter in letterArray {\n        let currentLetter = letter\n\
    \        if let letterOccurence = dictionary[currentLetter] {\n            dictionary[currentLetter]\
    \ = letterOccurence + 1\n        } else {\n            dictionary[currentLetter]\
    \ = 1\n        }\n    }\n    var maxValue = 0\n    var maxKey = String()\n   \
    \ for (key, value) in dictionary {\n        if value > maxValue {\n          \
    \  maxValue = value\n            maxKey = key\n        }\n    }\n    var maxLetterDictionary\
    \ = [String : Int]()\n    for (key, value) in dictionary {\n        if value ==\
    \ maxValue {\n            maxLetterDictionary[key] = value\n        }\n    }\n\
    \    return maxLetterDictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpl1mk901c.swift:17:28: error: value of type 'String' has no member\
    \ 'components'\n    let letterArray = test.components(separatedBy: \" \")\n  \
    \                    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    var dictionary: [String : Int] = [:]\n    var max = 1\n  \
    \  \n    for letter in test.components(separatedBy: \" \") {\n        let updatedCount\
    \ = (dictionary[letter] ?? 0) + 1\n        dictionary[letter] = updatedCount\n\
    \        max = max < updatedCount ? updatedCount : max\n    }\n    \n    var histogram:\
    \ [String : Int] = [:]\n    \n    for (letter, count) in dictionary {\n      \
    \  if count == max {\n            histogram[letter] = count\n        }\n    }\n\
    \    \n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpx2v_pef1.swift:21:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let words = test.components(separatedBy: \" \")\n    var result\
    \ = [String : Int]()\n    var highest = 0\n    var highestDict = [String : Int]()\n\
    \    for word in words {\n        result[word] = (result[word] ?? 0) + 1\n   \
    \     if (result[word] ?? 0) > highest {\n            highest = result[word] ??\
    \ 0\n            highestDict = [word : highest]\n        } else if (result[word]\
    \ ?? 0) == highest {\n            highestDict[word] = highest\n        }\n   \
    \ }\n    return highestDict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1ql5yqc7.swift:17:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let characters = test.characters.split(separator:\
    \ \" \")\n    for character in characters {\n        if let letter = histogram[String(character)]\
    \ {\n            histogram[String(character)] = letter + 1\n        } else {\n\
    \            histogram[String(character)] = 1\n        }\n    }\n    let newHistogram\
    \ = histogram.filter({$0.value == histogram.values.max()})\n    return newHistogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3772ycpa.swift:18:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = test.characters.split(separator: \"\
    \ \")\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return test.split(separator: \" \").reduce(into: [:]) { (result,\
    \ letter) in\n        result[String(letter), default: 0] += 1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpucs5om46/tmpucs5om46.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af11f7a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af11f499b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af11f499988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af11f4987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucs5om46                        0x0000562d337aeae6 <unavailable> + 6886

    5    libc.so.6                          0x00002af11f98e460 __libc_start_main +
    245

    6    tmpucs5om46                        0x0000562d337ae4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // Enter your solution here\n    var letters = [String : Int]()\n\
    \    var max_occur = 1\n    for letter in test.components(separatedBy: \" \")\
    \ {\n        if letters[letter] == nil {\n            letters[letter] = 1\n  \
    \      } else {\n            letters[letter]! += 1\n            if letters[letter]!\
    \ > max_occur {\n                max_occur = letters[letter]!\n            }\n\
    \        }\n    }\n    var max_letters = [String : Int]()\n    for (letter, value)\
    \ in letters {\n        if value == max_occur {\n            max_letters[letter]\
    \ = value\n        }\n    }\n    return max_letters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpyajkowpz.swift:20:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogramResult: [String : Int] = [:]\n    let letterArray =\
    \ test.components(separatedBy: \" \")\n    var maximumOfOccurrence = 0\n    for\
    \ char in letterArray {\n        if var occurenceCount = histogramResult[char]\
    \ {\n            occurenceCount += 1\n            if occurenceCount > maximumOfOccurrence\
    \ {\n                maximumOfOccurrence = occurenceCount\n            }\n   \
    \         histogramResult[char] = occurenceCount\n        } else {\n         \
    \   histogramResult[char] = 1\n        }\n    }\n    histogramResult = histogramResult.filter\
    \ { $0.value == maximumOfOccurrence }\n    return histogramResult\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpw_cjcsax.swift:18:28: error: value of type 'String' has no member\
    \ 'components'\n    let letterArray = test.components(separatedBy: \" \")\n  \
    \                    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpflhxgnpt/tmpflhxgnpt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4dae02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4daaf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4daaf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4daaf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpflhxgnpt                        0x000055deca90a59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab4dafee460 __libc_start_main +
    245

    6    tmpflhxgnpt                        0x000055deca90a139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // Implement the function here\n    return [:]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmppftgxpde/tmppftgxpde.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e5b21fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e5af16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e5af16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e5af157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppftgxpde                        0x00005634d8c2f59b <unavailable> + 5531

    5    libc.so.6                          0x00002b1e5b40b460 __libc_start_main +
    245

    6    tmppftgxpde                        0x00005634d8c2f139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    if letters.count > 0 {\n        var max = 0\n        for letter\
    \ in letters {\n            if let count = result[String(letter)] {\n        \
    \        result[String(letter)] = count + 1\n                if count > max {\n\
    \                    max = count\n                }\n            } else {\n  \
    \              result[String(letter)] = 1\n            }\n        }\n        var\
    \ most = [String : Int]()\n        for (key,value) in result {\n            if\
    \ value == max {\n                most[key] = value\n            }\n        }\n\
    \        return most\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpq1ovotyx/tmpq1ovotyx.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4da4250c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4da3f47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4da3f47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4da3f467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1ovotyx                        0x0000561902433bab <unavailable> + 7083

    5    libc.so.6                          0x00002b4da443c460 __libc_start_main +
    245

    6    tmpq1ovotyx                        0x0000561902433749 <unavailable> + 5961

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let value = result[letter] {\n            result[letter] = value + 1\n  \
    \          if result[letter]! > max {\n                max = result[letter]!\n\
    \            }\n        } else {\n            result[letter] = 1\n           \
    \ if result[letter]! > max {\n                max = result[letter]!\n        \
    \    }\n        }\n    }\n    var maxLetters = [String : Int]()\n    for (key,\
    \ value) in result {\n        if value == max {\n            maxLetters[key] =\
    \ value\n        }\n    }\n    return maxLetters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc9fk37k5.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [\"\":\"\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnjj32tef.swift:17:16: error: cannot convert value of type 'String'\
    \ to expected dictionary value type 'Int'\n    return [\"\":\"\"]\n          \
    \     ^\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var myStringArray = test.split(separator: \" \")\n    var myDictionary\
    \ = [String : Int]()\n    for item in myStringArray {\n        if myDictionary[String(item)]\
    \ == nil {\n            myDictionary[String(item)] = 1\n        } else {\n   \
    \         myDictionary[String(item)]! += 1\n        }\n    }\n    return myDictionary\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpgw4sqs7x/tmpgw4sqs7x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b702e41ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b702e111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b702e111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b702e1107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw4sqs7x                        0x0000556747217c76 <unavailable> + 7286

    5    libc.so.6                          0x00002b702e606460 __libc_start_main +
    245

    6    tmpgw4sqs7x                        0x0000556747217689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict: [String : Int] = [:]\n    var highestCount = 0\n    var\
    \ highestLetters: [String] = []\n    let testArr = test.components(separatedBy:\
    \ \" \")\n    for i in testArr {\n        dict[i] = dict[i] == nil ? 1 : dict[i]!\
    \ + 1\n        if dict[i]! > highestCount {\n            highestCount = dict[i]!\n\
    \            highestLetters = [i]\n        } else if dict[i]! == highestCount\
    \ {\n            highestLetters.append(i)\n        }\n    }\n    let newDict:\
    \ [String : Int] = highestLetters.reduce(into: [:]) { $0[$1] = highestCount }\n\
    \    return newDict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_pahkih1.swift:20:24: error: value of type 'String' has no member\
    \ 'components'\n    let testArr = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    var dictionary = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    \n    for word in array {\n        if let wordCount = dictionary[word]\
    \ {\n            dictionary[word] = wordCount + 1\n        } else {\n        \
    \    dictionary[word] = 1\n        }\n    }\n    \n    let maxCount = dictionary.values.max()\n\
    \    var countDictionary = [String : Int]()\n    \n    for (key, value) in dictionary\
    \ {\n        if value == maxCount {\n            countDictionary[key] = value\n\
    \        }\n    }\n    \n    return countDictionary\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmprdrq4okq.swift:19:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let testArray = test.components(separatedBy:\
    \ \" \")\n    for character in testArray {\n        if let count = dict[character]\
    \ {\n            dict[character] = count + 1\n        } else {\n            dict[character]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp11_4x72q.swift:18:26: error: value of type 'String' has no member\
    \ 'components'\n    let testArray = test.components(separatedBy: \" \")\n    \
    \                ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram: [String : Int] = [:]\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp42ei0qcy.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.components(separatedBy: \" \")\n    let countedSet\
    \ = NSCountedSet(array: letters)\n    let maxCount = countedSet.max { countedSet.count(for:\
    \ $0) < countedSet.count(for: $1) }\n    let maxLetters = countedSet.allObjects.filter\
    \ { countedSet.count(for: $0) == countedSet.count(for: maxCount!) }\n    return\
    \ maxLetters.reduce(into: [String : Int]()) { $0[$1 as! String] = countedSet.count(for:\
    \ $1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqeanfg3p.swift:17:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n/tmp/tmpqeanfg3p.swift:18:22: error: cannot find\
    \ 'NSCountedSet' in scope\n    let countedSet = NSCountedSet(array: letters)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return test.components(separatedBy: \" \").reduce(into: [:]) { counts,\
    \ letter in\n        counts[letter, default: 0] += 1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmps5ig6783.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    return test.components(separatedBy: \" \").reduce(into: [:])\
    \ { counts, letter in\n           ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let characters = test.characters.map { String($0) }\n    let unique\
    \ = Set(characters)\n    var frequency = [String : Int]()\n    for letter in unique\
    \ {\n        frequency[letter] = characters.filter({ $0 == letter }).count\n \
    \   }\n    return frequency\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp50gxldt0.swift:17:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = test.characters.map { String($0) }\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    for t in test.components(separatedBy:\
    \ \" \") {\n        dict[t] = (dict[t] ?? 0) + 1\n    }\n    return dict\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphxquy0cl.swift:18:19: error: value of type 'String' has no member\
    \ 'components'\n    for t in test.components(separatedBy: \" \") {\n         \
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram: [String : Int] = [:]\n    let letters = test.characters.split{$0\
    \ == \" \"}.map(String.init)\n    for letter in letters {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4y_8l4yy.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxgpu37pk.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var countDict: [String : Int] = [:]\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if countDict[String(letter)] ==\
    \ nil {\n            countDict[String(letter)] = 1\n        } else {\n       \
    \     countDict[String(letter)]! += 1\n        }\n    }\n    let maxCount = countDict.values.max()\n\
    \    let maxCountLetter = countDict.filter { $0.value == maxCount }\n    return\
    \ maxCountLetter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let allWords = test.split(separator: \" \")\n    var result = [String\
    \ : Int]()\n    for word in allWords {\n        if result[String(word)] == nil\
    \ {\n            result[String(word)] = 1\n        } else {\n            result[String(word)]!\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpc7gciupc/tmpc7gciupc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab16a446c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab16a13db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab16a13d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab16a13c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7gciupc                        0x00005611a5028c76 <unavailable> + 7286

    5    libc.so.6                          0x00002ab16a632460 __libc_start_main +
    245

    6    tmpc7gciupc                        0x00005611a5028689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // Complete this exercise here\n    var count = [String : Int]()\n\
    \    for character in test.characters {\n        if let char = String(character).lowercased().trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines) {\n            if count[char] == nil {\n\
    \                count[char] = 1\n            } else {\n                count[char]!\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmplzu51752.swift:19:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in test.characters {\n              \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmplzu51752.swift:20:77: error: cannot find 'CharacterSet' in scope\n   \
    \     if let char = String(character).lowercased().trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\
    \ {\n                                                                        \
    \    ^~~~~~~~~~~~\n/tmp/tmplzu51752.swift:20:54: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n        if let char = String(character).lowercased().trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines) {\n                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    if words.count == 0 {\n        return dict\n    }\n    var maxOccurrence\
    \ = 0\n    for word in words {\n        dict[word] = (dict[word] ?? 0) + 1\n \
    \       maxOccurrence = max(maxOccurrence, dict[word]!)\n    }\n    var finalDict\
    \ = [String : Int]()\n    for (key, value) in dict {\n        if value == maxOccurrence\
    \ {\n            finalDict[key] = value\n        }\n    }\n    return finalDict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwcansztu.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    if test.isEmpty {\n        return [:]\n    }\n    var dict = [String\
    \ : Int]()\n    var testArray = test.split(separator: \" \")\n    for letter in\
    \ testArray {\n        if dict[String(letter)] == nil {\n            dict[String(letter)]\
    \ = 1\n        } else {\n            dict[String(letter)]! += 1\n        }\n \
    \   }\n    let maxValue = dict.values.max()\n    var newDict = [String : Int]()\n\
    \    for (key, value) in dict {\n        if value == maxValue {\n            newDict[key]\
    \ = value\n        }\n    }\n    return newDict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict: [String : Int] = [:]\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpkwrp8hn6/tmpkwrp8hn6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f677c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f674b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f674b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f674b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwrp8hn6                        0x0000559e7999fb36 <unavailable> + 6966

    5    libc.so.6                          0x00002b1f679ac460 __libc_start_main +
    245

    6    tmpkwrp8hn6                        0x0000559e7999f549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return test.isEmpty ? [:] : histogram(test: test.withoutLastCharacter,\
    \ occurrence: test.lastCharacter)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9sp9roq2.swift:17:93: error: extra argument 'occurrence' in call\n\
    \    return test.isEmpty ? [:] : histogram(test: test.withoutLastCharacter, occurrence:\
    \ test.lastCharacter)\n                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\n\
    /tmp/tmp9sp9roq2.swift:17:54: error: value of type 'String' has no member 'withoutLastCharacter'\n\
    \    return test.isEmpty ? [:] : histogram(test: test.withoutLastCharacter, occurrence:\
    \ test.lastCharacter)\n                                                ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9sp9roq2.swift:17:93: error: value of type 'String' has no member 'lastCharacter'\n\
    \    return test.isEmpty ? [:] : histogram(test: test.withoutLastCharacter, occurrence:\
    \ test.lastCharacter)\n                                                      \
    \                                 ~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  var output: [String : Int] = [:]\n  for character in test.characters\
    \ {\n    guard character != \" \" else { continue }\n    output[String(character)]\
    \ = (output[String(character)] ?? 0) + 1\n  }\n  return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpf_b83rz8.swift:18:25: error: 'characters' is unavailable: Please\
    \ use String directly\n  for character in test.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var maxKey = \"\"\n    var maxVal\
    \ = 0\n    var maxArr = [String]()\n    var arr = test.components(separatedBy:\
    \ \" \")\n    for i in 0..<arr.count {\n        let currentVal = result[arr[i]]\n\
    \        if currentVal == nil {\n            result[arr[i]] = 1\n        } else\
    \ {\n            result[arr[i]] = currentVal! + 1\n        }\n        if result[arr[i]]!\
    \ > maxVal {\n            maxVal = result[arr[i]]!\n            maxKey = arr[i]\n\
    \            maxArr = [maxKey]\n        } else if result[arr[i]]! == maxVal {\n\
    \            maxArr.append(arr[i])\n        }\n    }\n    if maxVal == 0 {\n \
    \       return [:]\n    }\n    for i in 0..<maxArr.count {\n        result[maxArr[i]]\
    \ = maxVal\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfn9_txzz.swift:21:20: error: value of type 'String' has no member\
    \ 'components'\n    var arr = test.components(separatedBy: \" \")\n          \
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let split = test.components(separatedBy:\
    \ \" \")\n    for char in split {\n        let count = dict[char] ?? 0\n     \
    \   dict[char] = count + 1\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmppfprap3d.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let split = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    for char in test.components(separatedBy:\
    \ \" \") {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpvtkufhzg.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    for char in test.components(separatedBy: \" \") {\n      \
    \          ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  var dictionary = [String : Int]()\n  let array = test.split(separator:\
    \ \" \")\n  var n = 0\n  while n < array.count {\n    if let x = dictionary[String(array[n])]\
    \ {\n      dictionary[String(array[n])] = x + 1\n    } else {\n      dictionary[String(array[n])]\
    \ = 1\n    }\n    n += 1\n  }\n  return dictionary\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp9s0z2hd_/tmp9s0z2hd_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af23f447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af23f13eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af23f13e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af23f13d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9s0z2hd_                        0x0000557a48441aa6 <unavailable> + 6822

    5    libc.so.6                          0x00002af23f633460 __libc_start_main +
    245

    6    tmp9s0z2hd_                        0x0000557a484414b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    var countDict: [String : Int] = [:]\n    let testArr = test.split(separator:\
    \ \" \")\n    \n    for char in testArr {\n        if let letter = countDict[String(char)]\
    \ {\n            countDict[String(char)] = letter + 1\n        } else {\n    \
    \        countDict[String(char)] = 1\n        }\n    }\n    \n    var max = 0\n\
    \    var maxDict: [String : Int] = [:]\n    \n    for char in countDict {\n  \
    \      if char.value >= max {\n            max = char.value\n            maxDict[char.key]\
    \ = char.value\n        }\n    }\n    \n    return maxDict\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    let sortedLetters\
    \ = letters.sorted()\n    var occurences: [String : Int] = [:]\n    var count\
    \ = 1\n    var lastLetter = \"\"\n    for letter in sortedLetters {\n        if\
    \ letter == lastLetter {\n            count += 1\n        } else {\n         \
    \   occurences[lastLetter] = count\n            count = 1\n        }\n       \
    \ lastLetter = String(letter)\n    }\n    occurences[lastLetter] = count\n   \
    \ occurences.removeValue(forKey: \"\")\n    let sortedOccurences = occurences.sorted\
    \ { (first, second) -> Bool in\n        return first.value > second.value\n  \
    \  }\n    let maxOccurence = sortedOccurences.first?.value\n    let maxOccurences\
    \ = sortedOccurences.filter { (key, value) -> Bool in\n        return value ==\
    \ maxOccurence\n    }\n    var dict: [String : Int] = [:]\n    for item in maxOccurences\
    \ {\n        dict[item.key] = item.value\n    }\n    return dict\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let lowercaseTest = test.lowercased()\n    let letters = lowercaseTest.split(separator:\
    \ \" \")\n    var letterCounts = [String : Int]()\n    var maxCount = 0\n    for\
    \ letter in letters {\n        let letterString = String(letter)\n        if let\
    \ letterCount = letterCounts[letterString] {\n            letterCounts[letterString]\
    \ = letterCount + 1\n        } else {\n            letterCounts[letterString]\
    \ = 1\n        }\n        if letterCounts[letterString]! > maxCount {\n      \
    \      maxCount = letterCounts[letterString]!\n        }\n    }\n    if maxCount\
    \ == 0 {\n        return [:]\n    }\n    var maxLetters = [String : Int]()\n \
    \   for (letter, count) in letterCounts {\n        if count == maxCount {\n  \
    \          maxLetters[letter] = count\n        }\n    }\n    return maxLetters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let words = test.split(separator: \" \")\n    var dictionary = [String\
    \ : Int]()\n    var max = 0\n    for word in words {\n        if let value = dictionary[String(word)]\
    \ {\n            dictionary[String(word)] = value + 1\n            if value +\
    \ 1 > max {\n                max = value + 1\n            }\n        } else {\n\
    \            dictionary[String(word)] = 1\n            if 1 > max {\n        \
    \        max = 1\n            }\n        }\n    }\n    let keys = dictionary.filter\
    \ { $0.value == max }.map { $0.key }\n    var newDictionary = [String : Int]()\n\
    \    for key in keys {\n        newDictionary[key] = max\n    }\n    return newDictionary\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var histogram\
    \ = [String : Int]()\n    \n    for character in alphabet {\n        let character\
    \ = String(character)\n        var count = 0\n        for word in test.characters.split(separator:\
    \ \" \").map(String.init) {\n            if word == character {\n            \
    \    count += 1\n            }\n        }\n        histogram[character] = count\n\
    \    }\n    \n    // find largest count in dictionary\n    var largestCount =\
    \ 0\n    for count in histogram.values {\n        if count > largestCount {\n\
    \            largestCount = count\n        }\n    }\n    \n    // create new dictionary\
    \ with keys of letter(s) with largest count\n    var newHistogram = [String :\
    \ Int]()\n    for (key, value) in histogram {\n        if value == largestCount\
    \ {\n            newHistogram[key] = value\n        }\n    }\n    \n    return\
    \ newHistogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpl7rrumyq.swift:24:26: error: 'characters' is unavailable: Please\
    \ use String directly\n        for word in test.characters.split(separator: \"\
    \ \").map(String.init) {\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let lowerCase = test.lowercased()\n    var result : [String : Int]\
    \ = [:]\n    let array = lowerCase.components(separatedBy: \" \")\n    for item\
    \ in array {\n        if result[item] == nil {\n            result[item] = 1\n\
    \        } else {\n            result[item] = result[item]! + 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpku9g1c_9.swift:19:27: error: value of type 'String' has no member\
    \ 'components'\n    let array = lowerCase.components(separatedBy: \" \")\n   \
    \             ~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let array = test.split(separator: \" \")\n    var dictionary: [String\
    \ : Int] = [:]\n    for char in array {\n        let key = String(char)\n    \
    \    if let value = dictionary[key] {\n            dictionary[key] = value + 1\n\
    \        } else {\n            dictionary[key] = 1\n        }\n    }\n    return\
    \ dictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmphhs8ocrq/tmphhs8ocrq.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abacbce3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abacb9dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abacb9da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abacb9d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhs8ocrq                        0x000055ef8265fb36 <unavailable> + 6966

    5    libc.so.6                          0x00002abacbecf460 __libc_start_main +
    245

    6    tmphhs8ocrq                        0x000055ef8265f549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    if test.count == 0 {\n        return [:]\n    }\n    var hist =\
    \ [String : Int]()\n    let letters = test.split(separator: \" \")\n    for letter\
    \ in letters {\n        if let count = hist[String(letter)] {\n            hist[String(letter)]\
    \ = count + 1\n        } else {\n            hist[String(letter)] = 1\n      \
    \  }\n    }\n    return hist\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp_soz9vb2/tmp_soz9vb2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b119a691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b119a388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b119a388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b119a3877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_soz9vb2                        0x0000559d882a0bd6 <unavailable> + 7126

    5    libc.so.6                          0x00002b119a87d460 __libc_start_main +
    245

    6    tmp_soz9vb2                        0x0000559d882a05e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let validCharacters = test.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).components(separatedBy:\
    \ \" \")\n    var dictionary = [String : Int]()\n    var maxNumber = 0\n    for\
    \ letter in validCharacters {\n        if dictionary[letter] == nil {\n      \
    \      dictionary[letter] = 1\n        } else {\n            dictionary[letter]!\
    \ += 1\n        }\n        if dictionary[letter]! > maxNumber {\n            maxNumber\
    \ = dictionary[letter]!\n        }\n    }\n    var maxOccurrenceDictionary = [String\
    \ : Int]()\n    for (letter, number) in dictionary {\n        if number == maxNumber\
    \ {\n            maxOccurrenceDictionary[letter] = number\n        }\n    }\n\
    \    return maxOccurrenceDictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4plnplwt.swift:17:55: error: cannot find 'CharacterSet' in scope\n\
    \    let validCharacters = test.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).components(separatedBy:\
    \ \" \")\n                                                      ^~~~~~~~~~~~\n\
    /tmp/tmp4plnplwt.swift:17:32: error: value of type 'String' has no member 'trimmingCharacters'\n\
    \    let validCharacters = test.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).components(separatedBy:\
    \ \" \")\n                          ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    var result = [String : Int]()\n    var maxOccurrences = 0\n\
    \    \n    let testArr = test.components(separatedBy: \" \")\n    \n    for word\
    \ in testArr {\n        if result[word] == nil {\n            result[word] = 1\n\
    \        } else {\n            result[word]! += 1\n        }\n        if result[word]!\
    \ > maxOccurrences {\n            maxOccurrences = result[word]!\n        }\n\
    \    }\n    \n    for (key, value) in result {\n        if value < maxOccurrences\
    \ {\n            result.removeValue(forKey: key)\n        }\n    }\n    \n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6b1baexu.swift:21:24: error: value of type 'String' has no member\
    \ 'components'\n    let testArr = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    if test.isEmpty {\n        return [:]\n    }\n    let items = test.split(separator:\
    \ \" \")\n    var histogram: [String : Int] = [:]\n    for item in items {\n \
    \       histogram[String(item)] = (histogram[String(item)] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmphvxkf0dw/tmphvxkf0dw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86fa9a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86fa698b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86fa698988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86fa6977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphvxkf0dw                        0x0000560b1ed53b96 <unavailable> + 7062

    5    libc.so.6                          0x00002b86fab8d460 __libc_start_main +
    245

    6    tmphvxkf0dw                        0x0000560b1ed535a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let array = test.components(separatedBy: \" \")\n    var counts\
    \ = [String : Int]()\n    var maxCount = 0\n    for i in array {\n        counts[i]\
    \ = (counts[i] ?? 0) + 1\n        if maxCount < counts[i]! {\n            maxCount\
    \ = counts[i]!\n        }\n    }\n    let letters = counts.filter { $0.value ==\
    \ maxCount }\n    return letters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpu45lza2l.swift:17:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dictionary = [String : Int]()\n    var count = 1\n    var tempCount\
    \ = 0\n    var maxCount = 0\n    var letter = \"\"\n    var tempLetter = \"\"\n\
    \    let testArray = test.split(separator: \" \")\n    for letter in testArray\
    \ {\n        for tempLetter in testArray {\n            if tempLetter == letter\
    \ {\n                tempCount += 1\n            }\n        }\n        if tempCount\
    \ > maxCount {\n            maxCount = tempCount\n        }\n        tempCount\
    \ = 0\n    }\n    for letter in testArray {\n        for tempLetter in testArray\
    \ {\n            if tempLetter == letter {\n                tempCount += 1\n \
    \           }\n        }\n        if tempCount == maxCount {\n            dictionary[String(letter)]\
    \ = tempCount\n        }\n        tempCount = 0\n    }\n    return dictionary\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var results = [String : Int]()\n    if test == \"\" {\n        return\
    \ results\n    }\n    let words = test.split(separator: \" \")\n    for word in\
    \ words {\n        if let value = results[String(word)] {\n            results[String(word)]\
    \ = value + 1\n        } else {\n            results[String(word)] = 1\n     \
    \   }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpoc1o9221/tmpoc1o9221.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c57784c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5747bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5747b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5747a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoc1o9221                        0x000055d78ccf0be6 <unavailable> + 7142

    5    libc.so.6                          0x00002b9c57970460 __libc_start_main +
    245

    6    tmpoc1o9221                        0x000055d78ccf05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    let stringArray = test.split(separator:\
    \ \" \")\n    for str in stringArray {\n        result[String(str)] = (result[String(str)]\
    \ ?? 0) + 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpf3eat287/tmpf3eat287.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6235652c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6235349b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6235349988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62353487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf3eat287                        0x0000562b18daab36 <unavailable> + 6966

    5    libc.so.6                          0x00002b623583e460 __libc_start_main +
    245

    6    tmpf3eat287                        0x0000562b18daa549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var counts = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let currentCount = counts[word]\
    \ {\n            counts[word] = currentCount + 1\n        } else {\n         \
    \   counts[word] = 1\n        }\n    }\n    let maxCount = counts.values.max()\n\
    \    return counts.filter { $0.value == maxCount }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpm4eb89qd.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let arrayOfStrings = test.components(separatedBy:\
    \ \" \")\n    var highestValue = 0\n    arrayOfStrings.forEach({\n        if let\
    \ value = dict[$0] {\n            dict[$0] = value + 1\n        } else {\n   \
    \         dict[$0] = 1\n        }\n        if highestValue < dict[$0]! {\n   \
    \         highestValue = dict[$0]!\n        }\n    })\n    var result = [String\
    \ : Int]()\n    dict.forEach({\n        if dict[$0.key] == highestValue {\n  \
    \          result[$0.key] = $0.value\n        }\n    })\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpl8syyovc.swift:18:31: error: value of type 'String' has no member\
    \ 'components'\n    let arrayOfStrings = test.components(separatedBy: \" \")\n\
    \                         ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    if (test.isEmpty) {\n        return [:]\n    }\n    var dict = [String\
    \ : Int]()\n    let words = test.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if let count = dict[word] {\n            dict[word] = count\
    \ + 1\n        } else {\n            dict[word] = 1\n        }\n    }\n    let\
    \ maxKey = dict.max { a, b in a.value < b.value }!.key\n    return dict.filter\
    \ { $0.value == dict[maxKey]! }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5y2wp6sf.swift:21:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  var result: [String : Int] = [:]\n  let chars = test.characters.split(separator:\
    \ \" \")\n  var max = 0\n  for c in chars {\n    let s = String(c)\n    if result[s]\
    \ == nil {\n      result[s] = 1\n    } else {\n      result[s]! += 1\n    }\n\
    \    if result[s]! > max {\n      max = result[s]!\n    }\n  }\n  var maxList:\
    \ [String : Int] = [:]\n  for (key, value) in result {\n    if value == max {\n\
    \      maxList[key] = value\n    }\n  }\n  return maxList\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpecs_ku94.swift:18:20: error: 'characters' is unavailable: Please\
    \ use String directly\n  let chars = test.characters.split(separator: \" \")\n\
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  var dict: [String : Int] = [:]\n  var max = 0\n  for char in test.split(separator:\
    \ \" \") {\n    if let count = dict[String(char)] {\n      dict[String(char)]\
    \ = count + 1\n      if count + 1 > max {\n        max = count + 1\n      }\n\
    \    } else {\n      dict[String(char)] = 1\n      if 1 > max {\n        max =\
    \ 1\n      }\n    }\n  }\n  let result = dict.filter {\n    $0.value == max\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let words = test.components(separatedBy: \" \")\n    var dict =\
    \ [String : Int]()\n    for word in words {\n        dict[word] = (dict[word]\
    \ ?? 0) + 1\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1mj1xpig.swift:17:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dic = [String : Int]()\n    var max = 0\n    for i in test.characters.split(separator:\
    \ \" \") {\n        let a = String(i)\n        if dic[a] == nil {\n          \
    \  dic[a] = 1\n        } else {\n            dic[a] = dic[a]! + 1\n        }\n\
    \        if dic[a]! > max {\n            max = dic[a]!\n        }\n    }\n   \
    \ var dic2 = [String : Int]()\n    for (i, j) in dic {\n        if j == max {\n\
    \            dic2[i] = j\n        }\n    }\n    return dic2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnpanbm1m.swift:19:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in test.characters.split(separator: \" \") {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp3a4xyqe_/tmp3a4xyqe_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fa2ca2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fa2999b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fa2999988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fa29987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a4xyqe_                        0x000055ee2fa70b86 <unavailable> + 7046

    5    libc.so.6                          0x00002b4fa2e8e460 __libc_start_main +
    245

    6    tmp3a4xyqe_                        0x000055ee2fa70599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let strArr = test.components(separatedBy:\
    \ \" \")\n    for letter in strArr {\n        if dict[letter] == nil {\n     \
    \       dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n \
    \       }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqjahv9w_.swift:18:23: error: value of type 'String' has no member\
    \ 'components'\n    let strArr = test.components(separatedBy: \" \")\n       \
    \          ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var count: [String : Int] = [:]\n    for char in test.split(separator:\
    \ \" \") {\n        if count[String(char)] == nil {\n            count[String(char)]\
    \ = 1\n        } else {\n            count[String(char)]! += 1\n        }\n  \
    \  }\n    let largestCount = count.values.max()\n    for key in count.keys {\n\
    \        if count[key] != largestCount {\n            count.removeValue(forKey:\
    \ key)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return histogram(test: test, splitBy: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpoqb5olz5.swift:17:43: error: extra argument 'splitBy' in call\n\
    \    return histogram(test: test, splitBy: \" \")\n                    ~~~~~~~~~~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  var dictionary = [String : Int]()\n  var maxValue = 0\n  for letter\
    \ in test.split(separator: \" \") {\n    if let count = dictionary[String(letter)]\
    \ {\n      dictionary[String(letter)] = count + 1\n    } else {\n      dictionary[String(letter)]\
    \ = 1\n    }\n    if dictionary[String(letter)]! > maxValue {\n      maxValue\
    \ = dictionary[String(letter)]!\n    }\n  }\n  return dictionary.filter({$0.value\
    \ == maxValue})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict: [String : Int] = [:]\n    var letters = test.components(separatedBy:\
    \ \" \")\n    var max = 0\n    var maxLetters: [String] = []\n    for letter in\
    \ letters {\n        if dict[letter] == nil {\n            dict[letter] = 1\n\
    \        } else {\n            dict[letter]! += 1\n        }\n        if dict[letter]!\
    \ > max {\n            max = dict[letter]!\n            maxLetters = [letter]\n\
    \        } else if dict[letter]! == max {\n            maxLetters.append(letter)\n\
    \        }\n    }\n    var newDict: [String : Int] = [:]\n    for letter in maxLetters\
    \ {\n        newDict[letter] = max\n    }\n    return newDict\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4bjhbsop.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    var letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dictionary = [String : Int]()\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let value = dictionary[letter] {\n            dictionary[letter]\
    \ = value + 1\n        } else {\n            dictionary[letter] = 1\n        }\n\
    \    }\n    var topCount = 0\n    for letter in dictionary {\n        if letter.value\
    \ > topCount {\n            topCount = letter.value\n        }\n    }\n    var\
    \ topLetters = [String : Int]()\n    for letter in dictionary {\n        if letter.value\
    \ == topCount {\n            topLetters[letter.key] = letter.value\n        }\n\
    \    }\n    return topLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpki4vo25a.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letters = [String : Int]()\n    test.components(separatedBy:\
    \ \" \").forEach { (letter) in\n        if let count = letters[letter] {\n   \
    \         letters[letter] = count + 1\n        } else {\n            letters[letter]\
    \ = 1\n        }\n    }\n    return letters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpf0gku1wv.swift:18:10: error: value of type 'String' has no member\
    \ 'components'\n    test.components(separatedBy: \" \").forEach { (letter) in\n\
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    let components\
    \ = test.components(separatedBy: \" \")\n    for word in components {\n      \
    \  if let count = result[word] {\n            result[word] = count + 1\n     \
    \       if result[word]! > max {\n                max = result[word]!\n      \
    \      }\n        } else {\n            result[word] = 1\n        }\n    }\n \
    \   var res = [String : Int]()\n    for (key, value) in result {\n        if value\
    \ == max {\n            res[key] = value\n        }\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc6bdfrbh.swift:19:27: error: value of type 'String' has no member\
    \ 'components'\n    let components = test.components(separatedBy: \" \")\n   \
    \                  ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let stringArray = test.split(separator:\
    \ \" \")\n    for i in stringArray {\n        dict[String(i)] = (dict[String(i)]\
    \ ?? 0) + 1\n    }\n    let first = dict.values.max()\n    let dict1 = dict.filter\
    \ { (key, value) -> Bool in\n        value == first\n    }\n    return dict1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let array = test.split(separator: \" \")\n    var dictionary = [String\
    \ : Int]()\n    for element in array {\n        if let value = dictionary[String(element)]\
    \ {\n            dictionary[String(element)] = value + 1\n        } else {\n \
    \           dictionary[String(element)] = 1\n        }\n    }\n    return dictionary\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp_gmy8idv/tmp_gmy8idv.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc51a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc5173eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc5173e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc5173d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_gmy8idv                        0x0000559ac4a27b86 <unavailable> + 7046

    5    libc.so.6                          0x00002adc51c33460 __libc_start_main +
    245

    6    tmp_gmy8idv                        0x0000559ac4a27599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    var histo = [String : Int]()\n    let str = test.characters.split(separator:\
    \ \" \").map(String.init)\n    \n    for i in str {\n        if histo[i] == nil\
    \ {\n            histo[i] = 1\n        } else {\n            histo[i]! += 1\n\
    \        }\n    }\n    \n    var top = [String : Int]()\n    var max = 0\n   \
    \ \n    for i in histo {\n        if i.value > max {\n            max = i.value\n\
    \        }\n    }\n    \n    for i in histo {\n        if i.value == max {\n \
    \           top[i.key] = i.value\n        }\n    }\n    \n    return top\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiai4n6j4.swift:19:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let str = test.characters.split(separator: \" \").map(String.init)\n\
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dic = [String : Int]()\n    var maxChar = \"\"\n    var max\
    \ = 0\n    for char in test.components(separatedBy: \" \") {\n        if dic[char]\
    \ == nil {\n            dic[char] = 1\n        } else {\n            dic[char]!\
    \ += 1\n        }\n        if dic[char]! > max {\n            max = dic[char]!\n\
    \            maxChar = char\n        }\n    }\n    for char in dic.keys {\n  \
    \      if dic[char] != max {\n            dic.removeValue(forKey: char)\n    \
    \    }\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjnizm9ef.swift:20:22: error: value of type 'String' has no member\
    \ 'components'\n    for char in test.components(separatedBy: \" \") {\n      \
    \          ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var dictionary:\
    \ [String : Int] = [:]\n    for letter in alphabet {\n        let key = String(letter)\n\
    \        let keyCount = test.components(separatedBy: key).count - 1\n        dictionary[key]\
    \ = keyCount\n    }\n    let maximumCount = dictionary.values.max()!\n    let\
    \ filteredDictionary = dictionary.filter { $0.value == maximumCount }\n    return\
    \ filteredDictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpv6mxvlo6.swift:21:29: error: value of type 'String' has no member\
    \ 'components'\n        let keyCount = test.components(separatedBy: key).count\
    \ - 1\n                       ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let array = test.components(separatedBy: \" \")\n    var dict =\
    \ [String : Int]()\n    for string in array {\n        dict[string] = dict[string]\
    \ != nil ? dict[string]! + 1 : 1\n    }\n    var max = 0\n    for val in dict.values\
    \ {\n        if val > max {\n            max = val\n        }\n    }\n    var\
    \ newDict = [String : Int]()\n    for (key, val) in dict {\n        if val ==\
    \ max {\n            newDict[key] = val\n        }\n    }\n    return newDict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpochv8zwf.swift:17:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let input = test.components(separatedBy: \" \")\n    if input.count\
    \ == 0 {\n        return [:]\n    }\n    var temp = [String : Int]()\n    var\
    \ max = 1\n    for letter in input {\n        if let count = temp[letter] {\n\
    \            temp[letter] = count + 1\n            if count + 1 > max {\n    \
    \            max = count + 1\n            }\n        } else {\n            temp[letter]\
    \ = 1\n        }\n    }\n    return temp.filter { $0.value == max }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp0cv1pfww.swift:17:22: error: value of type 'String' has no member\
    \ 'components'\n    let input = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let filtered = test.split(separator: \" \").filter({$0 != \"\"})\n\
    \    if filtered.count == 0 { return [:] }\n    let dict = histogramRec(arr: filtered)\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgsrw7hif.swift:19:16: error: cannot find 'histogramRec' in scope\n\
    \    let dict = histogramRec(arr: filtered)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram: [String : Int] = [:]\n    let letters = test.components(separatedBy:\
    \ \" \")\n    let sortedLetters = letters.sorted()\n    if sortedLetters.count\
    \ > 0 {\n        let mostOccurredLetter = sortedLetters[0]\n        let occurrences\
    \ = sortedLetters.filter { $0 == mostOccurredLetter }\n        histogram[mostOccurredLetter]\
    \ = occurrences.count\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiy92aqx5.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var freq = [String : Int]()\n    let t = test.components(separatedBy:\
    \ .whitespaces)\n    for c in t {\n        freq[c] = freq[c] != nil ? freq[c]!\
    \ + 1 : 1\n    }\n    var max = 0\n    for (_, f) in freq {\n        if f > max\
    \ {\n            max = f\n        }\n    }\n    var hist = [String : Int]()\n\
    \    for (c, f) in freq {\n        if f == max {\n            hist[c] = f\n  \
    \      }\n    }\n    return hist\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpcf1uan31.swift:18:18: error: value of type 'String' has no member\
    \ 'components'\n    let t = test.components(separatedBy: .whitespaces)\n     \
    \       ~~~~ ^~~~~~~~~~\n/tmp/tmpcf1uan31.swift:18:43: error: cannot infer contextual\
    \ base in reference to member 'whitespaces'\n    let t = test.components(separatedBy:\
    \ .whitespaces)\n                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    var result = [String : Int]()\n    var letters = test.components(separatedBy:\
    \ \" \")\n    var maximum: Int = 0\n    \n    for letter in letters {\n      \
    \  if var value = result[letter] {\n            value += 1\n            result[letter]\
    \ = value\n        } else {\n            result[letter] = 1\n        }\n    }\n\
    \    \n    for (_, value) in result {\n        if value > maximum {\n        \
    \    maximum = value\n        }\n    }\n    \n    result = result.filter { $0.value\
    \ == maximum }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1ftzoj5o.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    var letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letters = [String : Int]()\n    var maxValue = 0\n    var maxKeys\
    \ = [String]()\n    for letter in test.split(separator: \" \") {\n        if let\
    \ value = letters[String(letter)] {\n            letters[String(letter)] = value\
    \ + 1\n        } else {\n            letters[String(letter)] = 1\n        }\n\
    \        if letters[String(letter)]! > maxValue {\n            maxValue = letters[String(letter)]!\n\
    \            maxKeys = [String(letter)]\n        } else if letters[String(letter)]!\
    \ == maxValue {\n            maxKeys.append(String(letter))\n        }\n    }\n\
    \    if maxKeys.count == 0 {\n        return [:]\n    }\n    for key in maxKeys\
    \ {\n        letters[key] = maxValue\n    }\n    return letters\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpnam0e8ae/tmpnam0e8ae.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5d7768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5d745fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5d745f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5d745e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnam0e8ae                        0x0000556dfe7ebd26 <unavailable> + 7462

    5    libc.so.6                          0x00002ae5d7954460 __libc_start_main +
    245

    6    tmpnam0e8ae                        0x0000556dfe7eb739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    if test.isEmpty {\n        return [:]\n    }\n    var histogram\
    \ = [String : Int]()\n    let array = test.split(separator: \" \")\n    for i\
    \ in array {\n        if let val = histogram[String(i)] {\n            histogram[String(i)]\
    \ = val + 1\n        } else {\n            histogram[String(i)] = 1\n        }\n\
    \    }\n    var max = 0\n    for i in histogram {\n        if i.value > max {\n\
    \            max = i.value\n        }\n    }\n    let res = histogram.filter({$0.value\
    \ == max})\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram:[String : Int] = [:]\n    var histMax:Int = 0\n  \
    \  let characters = test.components(separatedBy: \" \")\n    for character in\
    \ characters {\n        if let count = histogram[character] {\n            histogram[character]\
    \ = count + 1\n        } else {\n            histogram[character] = 1\n      \
    \  }\n        if histogram[character]! > histMax {\n            histMax = histogram[character]!\n\
    \        }\n    }\n    let finalHistogram:[String : Int] = histogram.filter {\n\
    \        (key, value) in\n        return value == histMax\n    }\n    return finalHistogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8uxeaneb.swift:19:27: error: value of type 'String' has no member\
    \ 'components'\n    let characters = test.components(separatedBy: \" \")\n   \
    \                  ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogramDict = [String : Int]()\n    let splitTest = test.split(separator:\
    \ \" \")\n    for character in splitTest {\n        let newDict = [String(character)\
    \ : splitTest.filter{ $0 == character }.count]\n        histogramDict.merge(newDict)\
    \ { (_, new) in new }\n    }\n    return histogramDict\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpirwmntt9/tmpirwmntt9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5cd6cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5cd3c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5cd3c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5cd3c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirwmntt9                        0x00005623dc34bd06 <unavailable> + 7430

    5    libc.so.6                          0x00002ab5cd8bb460 __libc_start_main +
    245

    6    tmpirwmntt9                        0x00005623dc34b719 <unavailable> + 5913

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let str = test.split(separator: \" \")\n    var result: [String\
    \ : Int] = [:]\n    var max = 0\n    for char in str {\n        if result[String(char)]\
    \ == nil {\n            result[String(char)] = 1\n        } else {\n         \
    \   result[String(char)]! += 1\n        }\n        if result[String(char)]! >\
    \ max {\n            max = result[String(char)]!\n        }\n    }\n    for char\
    \ in result.keys {\n        if result[char]! < max {\n            result.removeValue(forKey:\
    \ char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dictionary: [String : Int] = [:]\n    for char in test.characters\
    \ {\n        if let letter = String(char).lowercased().trimmingCharacters(in:\
    \ .whitespaces) {\n            if let count = dictionary[letter] {\n         \
    \       dictionary[letter] = count + 1\n            } else {\n               \
    \ dictionary[letter] = 1\n            }\n        }\n    }\n    return dictionary\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpcarfdah7.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in test.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpcarfdah7.swift:19:51:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n        if\
    \ let letter = String(char).lowercased().trimmingCharacters(in: .whitespaces)\
    \ {\n                        ~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpcarfdah7.swift:19:75:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \       if let letter = String(char).lowercased().trimmingCharacters(in: .whitespaces)\
    \ {\n                                                                        \
    \ ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var count = [String : Int]()\n    var maxOccurrences = 0\n    for\
    \ letter in test.components(separatedBy: \" \") {\n        if let number = count[letter]\
    \ {\n            count[letter] = number + 1\n        } else {\n            count[letter]\
    \ = 1\n        }\n        if let value = count[letter], value > maxOccurrences\
    \ {\n            maxOccurrences = value\n        }\n    }\n    return count.filter\
    \ { $0.value == maxOccurrences }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp70bjymtd.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dictionary = [String : Int]()\n    var maxCount = 1\n    var\
    \ result = [String : Int]()\n    let separated = test.split(separator: \" \")\n\
    \    for letter in separated {\n        if let count = dictionary[String(letter)]\
    \ {\n            dictionary[String(letter)] = count + 1\n            if count\
    \ + 1 > maxCount {\n                maxCount = count + 1\n            }\n    \
    \    } else {\n            dictionary[String(letter)] = 1\n        }\n    }\n\
    \    for entry in dictionary {\n        if entry.value == maxCount {\n       \
    \     result[entry.key] = entry.value\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let array = test.components(separatedBy: \" \")\n    var dictionary\
    \ = [String : Int]()\n    for word in array {\n        if let value = dictionary[word]\
    \ {\n            dictionary[word] = value + 1\n        } else {\n            dictionary[word]\
    \ = 1\n        }\n    }\n    let count = dictionary.count\n    if count == 0 {\n\
    \        return [:]\n    }\n    var max = 0\n    for value in dictionary.values\
    \ {\n        if value > max {\n            max = value\n        }\n    }\n   \
    \ var newDictionary = [String : Int]()\n    for (key, value) in dictionary {\n\
    \        if value == max {\n            newDictionary[key] = value\n        }\n\
    \    }\n    return newDictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpes9wd5x7.swift:17:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogramDictionary = [String : Int]()\n    let inputArray =\
    \ test.components(separatedBy: \" \")\n    var maxOccurence = 0\n    var maxKeys:\
    \ [String] = []\n    for element in inputArray {\n        if let currentOccurence\
    \ = histogramDictionary[element] {\n            if currentOccurence > maxOccurence\
    \ {\n                maxOccurence = currentOccurence\n                maxKeys\
    \ = [element]\n            } else if currentOccurence == maxOccurence {\n    \
    \            maxKeys.append(element)\n            }\n            histogramDictionary[element]\
    \ = currentOccurence + 1\n        } else {\n            histogramDictionary[element]\
    \ = 1\n        }\n    }\n    for key in maxKeys {\n        histogramDictionary[key]\
    \ = maxOccurence\n    }\n    return histogramDictionary\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpb_lyzc7z.swift:18:27: error: value of type 'String' has no member\
    \ 'components'\n    let inputArray = test.components(separatedBy: \" \")\n   \
    \                  ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let word = test.components(separatedBy: \" \")\n    var dict = [String\
    \ : Int]()\n    var max = 1\n    word.forEach {\n        if let count = dict[$0]\
    \ {\n            if count > max {\n                max = count\n            }\n\
    \            dict[$0] = count + 1\n        } else {\n            dict[$0] = 1\n\
    \        }\n    }\n    return dict.filter { $0.value == max }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpeme7_7hj.swift:17:21: error: value of type 'String' has no member\
    \ 'components'\n    let word = test.components(separatedBy: \" \")\n         \
    \      ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  let result = test.replacingOccurrences(of: \" \", with: \"\").map\
    \ {($0, 1)}\n  let histogram = result.reduce(into: [:]) {counts, pair in counts[pair.0,\
    \ default: 0] += pair.1}\n  var max = 0\n  for count in histogram.values {\n \
    \   if count > max {\n      max = count\n    }\n  }\n  let filtered = histogram.filter\
    \ {(key, value) in value == max}\n  return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpicua0hef.swift:17:21: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n  let result = test.replacingOccurrences(of: \" \",\
    \ with: \"\").map {($0, 1)}\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let characters = test.components(separatedBy: \" \")\n    let occurrences\
    \ = characters.groupCounter\n    let charsWithMaxOccurrence = occurrences.maxValue\n\
    \    let maxOccurrenceCount = charsWithMaxOccurrence.count\n    let maxOccurrenceKeys\
    \ = charsWithMaxOccurrence.keys\n    let result = maxOccurrenceKeys.reduce([String\
    \ : Int]()) { result, key in\n        var result = result\n        result[key]\
    \ = maxOccurrenceCount\n        return result\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpt7tl4uxj.swift:17:27: error: value of type 'String' has no member\
    \ 'components'\n    let characters = test.components(separatedBy: \" \")\n   \
    \                  ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterDictionary = [String : Int]()\n    var numberOfOccurences\
    \ = 0\n    let letterArray = test.split(separator: \" \")\n    for letter in letterArray\
    \ {\n        if let count = letterDictionary[String(letter)] {\n            letterDictionary[String(letter)]\
    \ = count + 1\n        } else {\n            letterDictionary[String(letter)]\
    \ = 1\n        }\n    }\n    for (_, value) in letterDictionary {\n        if\
    \ value > numberOfOccurences {\n            numberOfOccurences = value\n     \
    \   }\n    }\n    return letterDictionary.filter({ $0.value == numberOfOccurences\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\")\
    \ == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\"\
    \ : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\"\
    \ : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") ==\
    \ [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") ==\
    \ [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"\
    g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    test.components(separatedBy: \"\
    \ \").forEach { dict[$0] = (dict[$0] ?? 0) + 1 }\n    var maxKey = 0\n    for\
    \ (_, val) in dict {\n        if val > maxKey {\n            maxKey = val\n  \
    \      }\n    }\n    let dictmax = dict.filter({$0.value == maxKey})\n    return\
    \ dictmax\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwjvtbvph.swift:18:10: error: value of type 'String' has no member\
    \ 'components'\n    test.components(separatedBy: \" \").forEach { dict[$0] = (dict[$0]\
    \ ?? 0) + 1 }\n    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let input = test.split(separator:\
    \ \" \")\n    var max = 0\n    for i in input {\n        if result[String(i)]\
    \ == nil {\n            result[String(i)] = 1\n        } else {\n            result[String(i)]!\
    \ += 1\n        }\n        if result[String(i)]! > max {\n            max = result[String(i)]!\n\
    \        }\n    }\n    if max == 0 {\n        return [:]\n    }\n    var ret =\
    \ [String : Int]()\n    for i in result {\n        if i.value == max {\n     \
    \       ret[i.key] = i.value\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        dict[letter] = (dict[letter] ??\
    \ 0) + 1\n    }\n    var maxCount = 0\n    for (_, count) in dict {\n        maxCount\
    \ = max(maxCount, count)\n    }\n    return dict.filter { $0.value == maxCount\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\")\
    \ == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\"\
    \ : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\"\
    \ : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") ==\
    \ [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") ==\
    \ [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"\
    g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_5s7t50p.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let counts = test.split(separator: \" \").reduce(into: [:]) { counts,\
    \ word in\n        counts[String(word), default: 0] += 1\n    }\n    let maxCount\
    \ = counts.values.max()\n    return counts.filter { $0.value == maxCount }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    test.lowercased().split(separator:\
    \ \" \").forEach { char in\n        if var val = result[String(char)] {\n    \
    \        val += 1\n            result[String(char)] = val\n            if val\
    \ > max {\n                max = val\n            }\n        } else {\n      \
    \      result[String(char)] = 1\n        }\n    }\n    var toReturn = [String\
    \ : Int]()\n    result.forEach { (key, value) in\n        if value == max {\n\
    \            toReturn[key] = value\n        }\n    }\n    return toReturn\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmptk3vxz8q/tmptk3vxz8q.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b292e88ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b292e581b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b292e581988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b292e5807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptk3vxz8q                        0x000055f57d272d74 <unavailable> + 7540

    5    libc.so.6                          0x00002b292ea76460 __libc_start_main +
    245

    6    tmptk3vxz8q                        0x000055f57d272539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var splitResult = test.components(separatedBy:\
    \ \" \")\n    for item in splitResult {\n        if result[item] == nil {\n  \
    \          result[item] = 1\n        } else {\n            result[item]! += 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqtql13kw.swift:18:28: error: value of type 'String' has no member\
    \ 'components'\n    var splitResult = test.components(separatedBy: \" \")\n  \
    \                    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    for char in test.split(separator:\
    \ \" \") {\n        if let key = result[String(char)] {\n            result[String(char)]\
    \ = key + 1\n        } else {\n            result[String(char)] = 1\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpb5uodu24/tmpb5uodu24.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acba6701c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acba63f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acba63f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acba63f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb5uodu24                        0x00005610d169cb86 <unavailable> + 7046

    5    libc.so.6                          0x00002acba68ed460 __libc_start_main +
    245

    6    tmpb5uodu24                        0x00005610d169c599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var count = [String : Int]()\n    var maxValue = 1\n    var maxLetters\
    \ = [String]()\n    let letters = test.split(separator: \" \")\n    for letter\
    \ in letters {\n        if count[String(letter)] == nil {\n            count[String(letter)]\
    \ = 1\n        } else {\n            count[String(letter)]! += 1\n        }\n\
    \        if count[String(letter)]! > maxValue {\n            maxValue = count[String(letter)]!\n\
    \            maxLetters = [String(letter)]\n        } else if count[String(letter)]!\
    \ == maxValue {\n            maxLetters.append(String(letter))\n        }\n  \
    \  }\n    for letter in maxLetters {\n        count[letter] = maxValue\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpo8x4_lpf/tmpo8x4_lpf.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b32819c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b32510b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b32510988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b3250f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo8x4_lpf                        0x0000561e34ff5d26 <unavailable> + 7462

    5    libc.so.6                          0x00002b4b32a05460 __libc_start_main +
    245

    6    tmpo8x4_lpf                        0x0000561e34ff5739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let values = test.components(separatedBy: \" \")\n    let countedSet\
    \ = NSCountedSet(array: values)\n    let counts = countedSet.map { $0 as! String\
    \ }.map { countedSet.count(for: $0) }\n    let pairs = zip(values, counts)\n \
    \   let maxCount = pairs.map { $0.1 }.max() ?? 0\n    return Dictionary(uniqueKeysWithValues:\
    \ pairs.filter { $0.1 == maxCount })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpocgk8xb7.swift:17:23: error: value of type 'String' has no member\
    \ 'components'\n    let values = test.components(separatedBy: \" \")\n       \
    \          ~~~~ ^~~~~~~~~~\n/tmp/tmpocgk8xb7.swift:18:22: error: cannot find 'NSCountedSet'\
    \ in scope\n    let countedSet = NSCountedSet(array: values)\n               \
    \      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let splitArray = test.split(separator: \" \")\n    var dict: [String\
    \ : Int] = [:]\n    for char in splitArray {\n        dict[String(char)] = (dict[String(char)]\
    \ ?? 0) + 1\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp21v_y4k6/tmp21v_y4k6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7f8eecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7f8be3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7f8be3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7f8be27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21v_y4k6                        0x000056168eb8db36 <unavailable> + 6966

    5    libc.so.6                          0x00002ba7f90d8460 __libc_start_main +
    245

    6    tmp21v_y4k6                        0x000056168eb8d549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  if test.isEmpty {\n    return [:]\n  }\n\n  var res = [String : Int]()\n\
    \  let charArray = test.components(separatedBy: \" \")\n  for char in charArray\
    \ {\n    if let _ = res[char] {\n      res[char]! += 1\n    } else {\n      res[char]\
    \ = 1\n    }\n  }\n\n  let maxValue = res.values.max()\n  var result = [String\
    \ : Int]()\n  for (key, value) in res {\n    if value == maxValue {\n      result[key]\
    \ = value\n    }\n  }\n\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj_5p6jf1.swift:22:24: error: value of type 'String' has no member\
    \ 'components'\n  let charArray = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  let histogram: [String : Int] = [:]\n  let letters = test.split(separator:\
    \ \" \")\n  for letter in letters {\n    let count = histogram[letter]\n    if\
    \ let count = count {\n      histogram[letter] = count + 1\n    } else {\n   \
    \   histogram[letter] = 1\n    }\n  }\n  return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp73dimh0d.swift:20:26: error: no exact matches in call to subscript\
    \ \n    let count = histogram[letter]\n                         ^\nSwift.Dictionary:8:23:\
    \ note: candidate expects value of type 'Dictionary<String, Int>.Index' for parameter\
    \ #1 (got 'String.SubSequence' (aka 'Substring'))\n    @inlinable public subscript(position:\
    \ Dictionary<Key, Value>.Index) -> Dictionary<Key, Value>.Element { get }\n  \
    \                    ^\nSwift.Dictionary:2:23: note: candidate expects value of\
    \ type 'String' for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n\
    \    @inlinable public subscript(key: Key) -> Value? { get set }\n           \
    \           ^\nSwift.Collection:2:23: note: candidate expects value of type 'Range<Dictionary<String,\
    \ Int>.Index>' for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n\
    \    @inlinable public subscript(bounds: Range<Self.Index>) -> Slice<Self> { get\
    \ }\n                      ^\nSwift.Collection:3:23: note: candidate expects value\
    \ of type '(UnboundedRange_) -> ()' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get }\n                      ^\n/tmp/tmp73dimh0d.swift:22:17:\
    \ error: cannot convert value of type 'String.SubSequence' (aka 'Substring') to\
    \ expected argument type 'String'\n      histogram[letter] = count + 1\n     \
    \           ^\n                String( )\n/tmp/tmp73dimh0d.swift:24:17: error:\
    \ cannot convert value of type 'String.SubSequence' (aka 'Substring') to expected\
    \ argument type 'String'\n      histogram[letter] = 1\n                ^\n   \
    \             String( )\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    let letters = test.split(separator:\
    \ \" \")\n    var max = 0\n    for letter in letters {\n        if let count =\
    \ result[String(letter)] {\n            result[String(letter)] = count + 1\n \
    \           if count + 1 > max {\n                max = count + 1\n          \
    \  }\n        } else {\n            result[String(letter)] = 1\n            if\
    \ 1 > max {\n                max = 1\n            }\n        }\n    }\n    var\
    \ temp: [String : Int] = [:]\n    for (key, value) in result {\n        if value\
    \ == max {\n            temp[key] = value\n        }\n    }\n    return temp\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let split = test.components(separatedBy: \" \")\n    var dic = [String\
    \ : Int]()\n    for i in split {\n        if dic[i] == nil {\n            dic[i]\
    \ = 1\n        } else {\n            dic[i] = dic[i]! + 1\n        }\n    }\n\
    \    var max = 0\n    for i in dic {\n        if i.value > max {\n           \
    \ max = i.value\n        }\n    }\n    var result = [String : Int]()\n    for\
    \ i in dic {\n        if i.value == max {\n            result[i.key] = i.value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpoaw4hfg8.swift:17:22: error: value of type 'String' has no member\
    \ 'components'\n    let split = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict: [String : Int] = [:]\n    var words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let existWord = dict[word] {\n \
    \           dict[word] = existWord + 1\n        } else {\n            dict[word]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpzhwd04h1.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    var words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // Enter your code below\n    let strings = test.split(separator:\
    \ \" \")\n    var numbers = [String : Int]()\n    for s in strings {\n       \
    \ numbers[String(s)] = (numbers[String(s)] ?? 0) + 1\n    }\n    var maxValue\
    \ = 0\n    for (_, value) in numbers {\n        if value > maxValue {\n      \
    \      maxValue = value\n        }\n    }\n    var maxNumbers = [String : Int]()\n\
    \    for (key, value) in numbers {\n        if value == maxValue {\n         \
    \   maxNumbers[key] = value\n        }\n    }\n    return maxNumbers\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var counts: [String : Int] = [:]\n    for char in test.characters\
    \ {\n        if let count = counts[String(char)] {\n            counts[String(char)]\
    \ = count + 1\n        } else {\n            counts[String(char)] = 1\n      \
    \  }\n    }\n    return counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmppu04nvxu.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in test.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict : [String : Int] = [:]\n    var max = 1\n    let a = test.components(separatedBy:\
    \ \" \")\n    if a.count == 0 {\n        return dict\n    }\n    for i in a {\n\
    \        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n    \
    \        dict[i] = dict[i]! + 1\n            if dict[i]! > max {\n           \
    \     max = dict[i]!\n            }\n        }\n    }\n    var dict2 = [String\
    \ : Int]()\n    for (k, v) in dict {\n        if v == max {\n            dict2[k]\
    \ = v\n        }\n    }\n    return dict2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6bl9sgru.swift:19:18: error: value of type 'String' has no member\
    \ 'components'\n    let a = test.components(separatedBy: \" \")\n            ~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    //1. Split the string into an array of letters\n    let characters\
    \ = test.components(separatedBy: \" \")\n    //2. Create a dictionary to track\
    \ the count of each letter\n    var histo = [String : Int]()\n    //3. Fill up\
    \ the histogram\n    for character in characters {\n        if let count = histo[character]\
    \ {\n            histo[character] = count + 1\n        } else {\n            histo[character]\
    \ = 1\n        }\n    }\n    //4. Find the max\n    var maxCount = 0\n    for\
    \ (character, count) in histo {\n        if count > maxCount {\n            maxCount\
    \ = count\n        }\n    }\n    //5. Remove all the elements with a count lower\
    \ than the max\n    for (character, count) in histo {\n        if count < maxCount\
    \ {\n            histo.removeValue(forKey: character)\n        }\n    }\n    return\
    \ histo\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmu3q0_9q.swift:18:27: error: value of type 'String' has no member\
    \ 'components'\n    let characters = test.components(separatedBy: \" \")\n   \
    \                  ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letterArray = test.components(separatedBy: \" \")\n    var dictionary\
    \ : [String : Int] = [:]\n    for i in letterArray {\n        if dictionary[i]\
    \ == nil {\n            dictionary[i] = 1\n        } else {\n            dictionary[i]\
    \ = dictionary[i]! + 1\n        }\n    }\n    return dictionary\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpufe5ntzi.swift:17:28: error: value of type 'String' has no member\
    \ 'components'\n    let letterArray = test.components(separatedBy: \" \")\n  \
    \                    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let emptyHistogram = [String : Int]()\n    let letterArray = test.components(separatedBy:\
    \ \" \")\n    if letterArray.isEmpty {\n        return emptyHistogram\n    }\n\
    \    var histogramDict = [String : Int]()\n    for letter in letterArray {\n \
    \       if histogramDict[letter] == nil {\n            histogramDict[letter] =\
    \ 1\n        } else {\n            histogramDict[letter] = histogramDict[letter]!\
    \ + 1\n        }\n    }\n    var maxNumber = 0\n    for dict in histogramDict\
    \ {\n        if dict.value > maxNumber {\n            maxNumber = dict.value\n\
    \        }\n    }\n    var maxLetterArray = [String]()\n    for dict in histogramDict\
    \ {\n        if dict.value == maxNumber {\n            maxLetterArray.append(dict.key)\n\
    \        }\n    }\n    var finalDict = [String : Int]()\n    for letter in maxLetterArray\
    \ {\n        finalDict[letter] = maxNumber\n    }\n    return finalDict\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpprlsj5zh.swift:18:28: error: value of type 'String' has no member\
    \ 'components'\n    let letterArray = test.components(separatedBy: \" \")\n  \
    \                    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var res = [String : Int]()\n    let words = test.characters.split{$0\
    \ == \" \"}.map(String.init)\n    var max = 0\n    for word in words {\n     \
    \   if res[word] == nil {\n            res[word] = 1\n        } else {\n     \
    \       let value = res[word]!\n            res[word] = value + 1\n          \
    \  if value + 1 > max {\n                max = value + 1\n            }\n    \
    \    }\n    }\n    var temp = [String : Int]()\n    for word in res {\n      \
    \  if word.1 == max {\n            temp[word.0] = word.1\n        }\n    }\n \
    \   return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpymqmd4ro.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let words = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var counts = [String : Int]()\n    var max = 0\n    let characters\
    \ = test.lowercased().split(separator: \" \")\n    for i in characters {\n   \
    \     if counts[String(i)] == nil {\n            counts[String(i)] = 1\n     \
    \   } else {\n            counts[String(i)]! += 1\n        }\n        if counts[String(i)]!\
    \ > max {\n            max = counts[String(i)]!\n        }\n    }\n    var newDict\
    \ = [String : Int]()\n    for (key, value) in counts {\n        if value == max\
    \ {\n            newDict[key] = value\n        }\n    }\n    return newDict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  var dict = [String : Int]()\n  let inputs = test.split(separator:\
    \ \" \")\n  for input in inputs {\n    if let num = dict[String(input)] {\n  \
    \    dict[String(input)] = num + 1\n    } else {\n      dict[String(input)] =\
    \ 1\n    }\n  }\n  let dictKeys = dict.keys\n  var maxCount = 0\n  for key in\
    \ dictKeys {\n    if dict[key]! > maxCount {\n      maxCount = dict[key]!\n  \
    \  }\n  }\n  var dictAnswer = [String : Int]()\n  for key in dictKeys {\n    if\
    \ dict[key]! == maxCount {\n      dictAnswer[key] = dict[key]\n    }\n  }\n  return\
    \ dictAnswer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var keys = [String]()\n    var values = [Int]()\n    var dict =\
    \ [String : Int]()\n    let strSplit = test.components(separatedBy: \" \")\n \
    \   let dictStr = strSplit.reduce(into: [:]) { (dict, word) in\n        dict[word,\
    \ default: 0] += 1\n    }\n    dictStr.forEach { key, value in\n        keys.append(key)\n\
    \        values.append(value)\n    }\n    if !values.isEmpty {\n        let maxValue\
    \ = values.max()\n        for (i, _) in values.enumerated() {\n            if\
    \ values[i] == maxValue {\n                dict[keys[i]] = values[i]\n       \
    \     }\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphj6cbejv.swift:20:25: error: value of type 'String' has no member\
    \ 'components'\n    let strSplit = test.components(separatedBy: \" \")\n     \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var maxCount = 0\n    var maxLetters = [String]()\n    var result:\
    \ [String : Int] = [:]\n    let words = test.components(separatedBy: \" \")\n\
    \    for word in words {\n        if let count = result[word] {\n            result[word]\
    \ = count + 1\n        } else {\n            result[word] = 1\n        }\n   \
    \     if result[word]! > maxCount {\n            maxCount = result[word]!\n  \
    \          maxLetters = [word]\n        } else if result[word]! == maxCount {\n\
    \            maxLetters.append(word)\n        }\n    }\n    var res: [String :\
    \ Int] = [:]\n    for maxLetter in maxLetters {\n        res[maxLetter] = maxCount\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_gana23f.swift:20:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let maxOccurrence = test.components(separatedBy:\
    \ \" \").map { letter in\n        guard histogram[letter] != nil else {\n    \
    \        histogram[letter] = 1\n            return 1\n        }\n        histogram[letter]!\
    \ += 1\n        return histogram[letter]!\n    }.max() ?? 0\n    return histogram.filter\
    \ { $0.value == maxOccurrence }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpsmcyvdrt.swift:18:30: error: value of type 'String' has no member\
    \ 'components'\n    let maxOccurrence = test.components(separatedBy: \" \").map\
    \ { letter in\n                        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    var occurences =\
    \ [String : Int]()\n    var maxOccurence = 0\n    var toReturn = [String : Int]()\n\
    \    \n    for letter in letters {\n        if let _ = occurences[String(letter)]\
    \ {\n            occurences[String(letter)]! += 1\n        } else {\n        \
    \    occurences[String(letter)] = 1\n        }\n    }\n    \n    for (key, value)\
    \ in occurences {\n        if value > maxOccurence {\n            maxOccurence\
    \ = value\n        }\n    }\n    \n    for (key, value) in occurences {\n    \
    \    if value == maxOccurence {\n            toReturn[key] = value\n        }\n\
    \    }\n    \n    return toReturn\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // Validate\n    guard !test.isEmpty else { return [:] }\n    \n\
    \    // Split the string into an array of strings\n    let letters = test.split(separator:\
    \ \" \")\n    \n    // Initialize the return dictionary with the first word\n\
    \    var histo = [String(letters[0]) : 1]\n    \n    // Loop through the other\
    \ words, incrementing the value for existing keys\n    // and adding new keys\n\
    \    for i in 1..<letters.count {\n        let value = histo[String(letters[i])]\
    \ ?? 0\n        histo[String(letters[i])] = value + 1\n    }\n    \n    // Find\
    \ the maximum value\n    let maxVal = histo.values.max() ?? 0\n    \n    // Return\
    \ a dictionary containing only the keys with the maximum value\n    return Dictionary(uniqueKeysWithValues:\
    \ histo.filter({$0.value == maxVal}))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // Write your code below\n    return [:]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpn73_h974/tmpn73_h974.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b410e94ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b410e645b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b410e645988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b410e6447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn73_h974                        0x000055586cadc59b <unavailable> + 5531

    5    libc.so.6                          0x00002b410eb3a460 __libc_start_main +
    245

    6    tmpn73_h974                        0x000055586cadc139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let empty: [String : Int] = [:]\n    let chars = [Character](test)\n\
    \    let count = countCharacters(chars: chars)\n    let max = findMax(histogram:\
    \ count)\n    let keys = findKeys(histogram: count, max: max)\n    var result:\
    \ [String : Int] = [:]\n    for key in keys {\n        result[String(key)] = max\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp69hr1ms6.swift:19:17: error: cannot find 'countCharacters' in scope\n\
    \    let count = countCharacters(chars: chars)\n                ^~~~~~~~~~~~~~~\n\
    /tmp/tmp69hr1ms6.swift:20:15: error: cannot find 'findMax' in scope\n    let max\
    \ = findMax(histogram: count)\n              ^~~~~~~\n/tmp/tmp69hr1ms6.swift:21:16:\
    \ error: cannot find 'findKeys' in scope\n    let keys = findKeys(histogram: count,\
    \ max: max)\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    var output: [String\
    \ : Int] = [:]\n    var maxValue = 0\n    for i in letters {\n        if output[String(i)]\
    \ == nil {\n            output[String(i)] = 1\n        } else {\n            output[String(i)]!\
    \ += 1\n        }\n        if output[String(i)]! > maxValue {\n            maxValue\
    \ = output[String(i)]!\n        }\n    }\n    var output2: [String : Int] = [:]\n\
    \    for (key, value) in output {\n        if value == maxValue {\n          \
    \  output2[key] = value\n        }\n    }\n    return output2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let split = test.split(separator: \" \")\n    var dict: [String\
    \ : Int] = [:]\n    for word in split {\n        dict[String(word)] = (dict[String(word)]\
    \ ?? 0) + 1\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpbk9nc4u4/tmpbk9nc4u4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49d6b9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49d6892b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49d6892988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49d68917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbk9nc4u4                        0x000055e850406b36 <unavailable> + 6966

    5    libc.so.6                          0x00002b49d6d87460 __libc_start_main +
    245

    6    tmpbk9nc4u4                        0x000055e850406549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var output: [String : Int] = [:]\n    let elements = test.split(separator:\
    \ \" \")\n    var counts: [Int] = []\n    for element in elements {\n        if\
    \ let value = output[String(element)] {\n            output[String(element)] =\
    \ value + 1\n        } else {\n            output[String(element)] = 1\n     \
    \   }\n        counts.append(output[String(element)]!)\n    }\n    let maxCount\
    \ = counts.max()!\n    var filteredOutput: [String : Int] = [:]\n    for (key,\
    \ value) in output {\n        if value == maxCount {\n            filteredOutput[key]\
    \ = value\n        }\n    }\n    return filteredOutput\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp2yexur8l/tmp2yexur8l.swift:28: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3317d45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3317a3c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3317a3c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3317a3c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3317a3bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2yexur8l                        0x0000561cdeca901a <unavailable> + 12314

    6    tmp2yexur8l                        0x0000561cdeca8601 <unavailable> + 9729

    7    libc.so.6                          0x00002b3317f31460 __libc_start_main +
    245

    8    tmp2yexur8l                        0x0000561cdeca7849 <unavailable> + 6217

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    /// Create a dictionary from [String] to Integer\n    ///\
    \ representing the String value as a key and the Integer value as a count\n  \
    \  func from(letters: [String]) -> [String : Int] {\n        return letters.reduce(into:\
    \ [:]) { counts, letter in\n            counts[letter, default: 0] += 1\n    \
    \    }\n    }\n    \n    /// Returns the maximum occurrence of any element in\
    \ the dictionary\n    func maximum(dictionary: [String : Int]) -> Int {\n    \
    \    return dictionary.map({ $0.value }).max() ?? 0\n    }\n    \n    /// Returns\
    \ an array of String keys with the given occurrence\n    func keys(for occurrence:\
    \ Int, in dictionary: [String : Int]) -> [String] {\n        return dictionary.filter({\
    \ $0.value == occurrence }).map({ $0.key })\n    }\n    \n    /// Creates an histogram\
    \ from the given letters\n    func histogram(from letters: [String]) -> [String\
    \ : Int] {\n        let dictionary = from(letters: letters)\n        let maxOccurrence\
    \ = maximum(dictionary: dictionary)\n        return from(letters: keys(for: maxOccurrence,\
    \ in: dictionary))\n    }\n    \n    /// Test Cases\n    let tests = [\n     \
    \   TestCase(test: \"a b c\", expected: [\"a\" : 1, \"b\" : 1, \"c\" : 1]),\n\
    \        TestCase(test: \"a b b a\", expected: [\"a\" : 2, \"b\" : 2]),\n    \
    \    TestCase(test: \"a b c a b\", expected: [\"a\" : 2, \"b\" : 2]),\n      \
    \  TestCase(test: \"b b b b a\", expected: [\"b\" : 4]),\n        TestCase(test:\
    \ \"\", expected: [:])\n    ]\n    \n    /// Test the given Test Case\n    for\
    \ test in tests {\n        let result = histogram(from: test.test.split(separator:\
    \ \" \").map({ String($0) }))\n        assert(result == test.expected, \"\\(test.test)\
    \ should return \\(test.expected)\")\n    }\n    \n    /// Run the given test\n\
    \    return histogram(from: test.split(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnacex81j.swift:60:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpnacex81j.swift:45:9: error: cannot find 'TestCase' in scope\n  \
    \      TestCase(test: \"a b c\", expected: [\"a\" : 1, \"b\" : 1, \"c\" : 1]),\n\
    \        ^~~~~~~~\n/tmp/tmpnacex81j.swift:46:9: error: cannot find 'TestCase'\
    \ in scope\n        TestCase(test: \"a b b a\", expected: [\"a\" : 2, \"b\" :\
    \ 2]),\n        ^~~~~~~~\n/tmp/tmpnacex81j.swift:47:9: error: cannot find 'TestCase'\
    \ in scope\n        TestCase(test: \"a b c a b\", expected: [\"a\" : 2, \"b\"\
    \ : 2]),\n        ^~~~~~~~\n/tmp/tmpnacex81j.swift:48:9: error: cannot find 'TestCase'\
    \ in scope\n        TestCase(test: \"b b b b a\", expected: [\"b\" : 4]),\n  \
    \      ^~~~~~~~\n/tmp/tmpnacex81j.swift:49:9: error: cannot find 'TestCase' in\
    \ scope\n        TestCase(test: \"\", expected: [:])\n        ^~~~~~~~\n/tmp/tmpnacex81j.swift:59:38:\
    \ error: missing argument for parameter 'separator' in call\n    return histogram(from:\
    \ test.split(\n                                     ^\n                      \
    \               separator: <#String.Element#>\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ declared here\n    @inlinable public __consuming func split(separator: Self.Element,\
    \ maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1660009441
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    var counts: [String\
    \ : Int] = [:]\n    var results: [String : Int] = [:]\n    var maxCount = 0\n\
    \    \n    for letter in letters {\n        if counts[String(letter)] == nil {\n\
    \            counts[String(letter)] = 1\n        } else {\n            counts[String(letter)]!\
    \ += 1\n        }\n    }\n    \n    for count in counts {\n        if count.value\
    \ > maxCount {\n            maxCount = count.value\n        }\n    }\n    \n \
    \   for count in counts {\n        if count.value == maxCount {\n            results[count.key]\
    \ = count.value\n        }\n    }\n    \n    return results\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let testArr = test.components(separatedBy: \" \")\n    var dict\
    \ = [String : Int]()\n    var max = 0\n    testArr.forEach { (letter) in\n   \
    \     if dict[letter] == nil {\n            dict[letter] = 1\n        } else {\n\
    \            dict[letter]! += 1\n        }\n        if dict[letter]! > max {\n\
    \            max = dict[letter]!\n        }\n    }\n    return dict.filter { (arg)\
    \ -> Bool in\n        return arg.value == max\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbqpo4ri5.swift:17:24: error: value of type 'String' has no member\
    \ 'components'\n    let testArr = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // write your solution here\n    var res = [String : Int]()\n  \
    \  let testArr = test.components(separatedBy: \" \")\n    var maxCount = 0\n \
    \   for str in testArr {\n        if let count = res[str] {\n            res[str]\
    \ = count + 1\n            if count + 1 > maxCount {\n                maxCount\
    \ = count + 1\n            }\n        } else {\n            res[str] = 1\n   \
    \         if 1 > maxCount {\n                maxCount = 1\n            }\n   \
    \     }\n    }\n    var finalRes = [String : Int]()\n    for (key, value) in res\
    \ {\n        if value == maxCount {\n            finalRes[key] = value\n     \
    \   }\n    }\n    return finalRes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg03jideo.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    let testArr = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    var histogram: [String\
    \ : Int] = [:]\n    for letter in letters {\n        histogram[String(letter)]\
    \ = (histogram[String(letter)] ?? 0) + 1\n    }\n    return histogram\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpdtnv4ep4/tmpdtnv4ep4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e6096ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e60665b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e60665988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e606647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdtnv4ep4                        0x0000555b91856b36 <unavailable> + 6966

    5    libc.so.6                          0x00002b7e60b5a460 __libc_start_main +
    245

    6    tmpdtnv4ep4                        0x0000555b91856549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \    var letterCount = [String : Int]()\n    for letter in letters {\n       \
    \ if letterCount[letter] == nil {\n            letterCount[letter] = 1\n     \
    \   } else {\n            letterCount[letter]! += 1\n        }\n    }\n    return\
    \ letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9ynktnl6.swift:17:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var h = [String : Int]()\n    let all = test.components(separatedBy:\
    \ \" \")\n    for char in all {\n        if let current = h[char] {\n        \
    \    h[char] = current + 1\n        } else {\n            h[char] = 1\n      \
    \  }\n    }\n    return h\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2o7g_h9k.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let all = test.components(separatedBy: \" \")\n          \
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // TODO\n    var h = [String : Int]()\n    var maxCount = 0\n  \
    \  var maxKey = \"\"\n    var arr = test.components(separatedBy: \" \")\n    for\
    \ i in arr {\n        var count = 0\n        for j in arr {\n            if i\
    \ == j {\n                count += 1\n            }\n        }\n        h[i] =\
    \ count\n        if count > maxCount {\n            maxCount = count\n       \
    \     maxKey = i\n        }\n    }\n    return h\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkl8n7p_p.swift:21:20: error: value of type 'String' has no member\
    \ 'components'\n    var arr = test.components(separatedBy: \" \")\n          \
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let lowerCaseTuple = test.split(separator: \" \").map { ($0,1) }\n\
    \    let lowerCaseDict = Dictionary(lowerCaseTuple, uniquingKeysWith: +)\n   \
    \ let sorted = lowerCaseDict.sorted(by: { $0.1 > $1.1 })\n    let max = sorted.first!.value\n\
    \    return sorted.filter { $0.value == max }.reduce(into: [String : Int]()) {\
    \ $0[String($1.key)] = $1.value }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpo_ocrhrm/tmpo_ocrhrm.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002acf4a4b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf4a1ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acf4a1ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acf4a1ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acf4a1abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpo_ocrhrm                        0x0000562ef8749cfe <unavailable> + 11518

    6    tmpo_ocrhrm                        0x0000562ef8749631 <unavailable> + 9777

    7    libc.so.6                          0x00002acf4a6a1460 __libc_start_main +
    245

    8    tmpo_ocrhrm                        0x0000562ef8748879 <unavailable> + 6265

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if result[letter] == nil {\n            result[letter] = 1\n\
    \        } else {\n            result[letter]! += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1z28wczo.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var chars = test.split(separator: \" \")\n    var dict = [String\
    \ : Int]()\n    for char in chars {\n        if dict[String(char)] == nil {\n\
    \            dict[String(char)] = 1\n        } else {\n            dict[String(char)]!\
    \ += 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpp1oreuvv/tmpp1oreuvv.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77d9f46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77d9c3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77d9c3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77d9c3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1oreuvv                        0x000055b1bbe67c76 <unavailable> + 7286

    5    libc.so.6                          0x00002b77da132460 __libc_start_main +
    245

    6    tmpp1oreuvv                        0x000055b1bbe67689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var maxCount = 0\n    var count = 0\n    var result = [String :\
    \ Int]()\n    let letters = test.split(separator: \" \")\n    if letters.count\
    \ == 0 {\n        return result\n    }\n    var index = 0\n    while index < letters.count\
    \ {\n        count = 1\n        var innerIndex = index + 1\n        while innerIndex\
    \ < letters.count {\n            if letters[index] == letters[innerIndex] {\n\
    \                count += 1\n            }\n            innerIndex += 1\n    \
    \    }\n        if count > maxCount {\n            maxCount = count\n        \
    \    result.removeAll()\n            result[String(letters[index])] = count\n\
    \        } else if count == maxCount {\n            result[String(letters[index])]\
    \ = count\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    var dict : [String\
    \ : Int] = [:]\n    for letter in letters {\n        if dict[String(letter)] ==\
    \ nil {\n            dict[String(letter)] = 1\n        } else {\n            dict[String(letter)]!\
    \ += 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpdzxgr438/tmpdzxgr438.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15a24e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15a21d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15a21d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15a21d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzxgr438                        0x0000561e5c4b4c16 <unavailable> + 7190

    5    libc.so.6                          0x00002b15a26ce460 __libc_start_main +
    245

    6    tmpdzxgr438                        0x0000561e5c4b4629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    test.split(separator: \" \"\
    ).forEach({ key in\n        if let count = histogram[String(key)] {\n        \
    \    histogram[String(key)] = count + 1\n        } else {\n            histogram[String(key)]\
    \ = 1\n        }\n    })\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpzm1hy715/tmpzm1hy715.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d6f206c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d6eefdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d6eefd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d6eefc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzm1hy715                        0x000055bc4f9ada86 <unavailable> + 6790

    5    libc.so.6                          0x00002b6d6f3f2460 __libc_start_main +
    245

    6    tmpzm1hy715                        0x000055bc4f9ad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let result = [String : Int]()\n    if test.isEmpty {\n        return\
    \ result\n    }\n    var histogram = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if word.isEmpty {\n            continue\n\
    \        }\n        if let count = histogram[word] {\n            histogram[word]\
    \ = count + 1\n        } else {\n            histogram[word] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmph00z6a3m.swift:22:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var output: [String : Int] = [:]\n    let array: [String] = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if let count = output[letter] {\n\
    \            output[letter] = count + 1\n        } else {\n            output[letter]\
    \ = 1\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp29e1dt09.swift:18:32: error: value of type 'String' has no member\
    \ 'components'\n    let array: [String] = test.components(separatedBy: \" \")\n\
    \                          ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3yqgr74m.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.split(separator:\
    \ \" \") {\n        let letterString = String(letter)\n        if let value =\
    \ histogram[letterString] {\n            histogram[letterString] = value + 1\n\
    \        } else {\n            histogram[letterString] = 1\n        }\n    }\n\
    \    var max = 0\n    var maxDictionary = [String : Int]()\n    for (key, value)\
    \ in histogram {\n        if value > max {\n            max = value\n        \
    \    maxDictionary = [key : value]\n        } else if value == max {\n       \
    \     maxDictionary[key] = value\n        }\n    }\n    return maxDictionary\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict: [String : Int] = [:]\n    let array = test.components(separatedBy:\
    \ \" \")\n    for character in array {\n        if dict[character] == nil {\n\
    \            dict[character] = 1\n        } else {\n            dict[character]!\
    \ += 1\n        }\n    }\n    let biggest = dict.values.max()\n    let keys =\
    \ dict.filter {$0.value == biggest}.keys\n    return keys.reduce([:]) { (dict,\
    \ key) -> [String : Int] in\n        var dict = dict\n        dict[key] = biggest\n\
    \        return dict\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpl_r24duf.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    for letter in test.split(separator:\
    \ \" \") {\n        if dict[String(letter)] == nil {\n            dict[String(letter)]\
    \ = 1\n        } else {\n            dict[String(letter)]! += 1\n        }\n \
    \   }\n    var maxOccurence = [String : Int]()\n    var max = 0\n    for (_, count)\
    \ in dict {\n        if count > max {\n            max = count\n        }\n  \
    \  }\n    for (letter, count) in dict {\n        if count == max {\n         \
    \   maxOccurence[letter] = count\n        }\n    }\n    return maxOccurence\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let tokens = test.components(separatedBy: .whitespaces)\n    var\
    \ dictionary = [String : Int]()\n    for token in tokens {\n        let count\
    \ = dictionary[token] ?? 0\n        dictionary[token] = count + 1\n    }\n   \
    \ var maxCount = 0\n    for (_, value) in dictionary {\n        if value > maxCount\
    \ {\n            maxCount = value\n        }\n    }\n    var maxDictionary = [String\
    \ : Int]()\n    for (key, value) in dictionary {\n        if value == maxCount\
    \ {\n            maxDictionary[key] = value\n        }\n    }\n    return maxDictionary\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpu3fsm129.swift:17:23: error: value of type 'String' has no member\
    \ 'components'\n    let tokens = test.components(separatedBy: .whitespaces)\n\
    \                 ~~~~ ^~~~~~~~~~\n/tmp/tmpu3fsm129.swift:17:48: error: cannot\
    \ infer contextual base in reference to member 'whitespaces'\n    let tokens =\
    \ test.components(separatedBy: .whitespaces)\n                               \
    \               ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    var hist = [String\
    \ : Int]()\n    for letter in letters {\n        if hist[String(letter)] == nil\
    \ {\n            hist[String(letter)] = 1\n        } else {\n            hist[String(letter)]!\
    \ += 1\n        }\n    }\n    return hist\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmptwxnkrwz/tmptwxnkrwz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff18808c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff184ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff184ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff184fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwxnkrwz                        0x00005560b64c5c76 <unavailable> + 7286

    5    libc.so.6                          0x00002aff189f4460 __libc_start_main +
    245

    6    tmptwxnkrwz                        0x00005560b64c5689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var allChars = [String : Int]()\n    let word = test.split(separator:\
    \ \" \")\n    for element in word {\n        var counter = 0\n        for letter\
    \ in word {\n            if letter == element {\n                counter += 1\n\
    \            }\n        }\n        allChars[String(element)] = counter\n    }\n\
    \    var max = 0\n    for key in allChars.keys {\n        if max < allChars[key]!\
    \ {\n            max = allChars[key]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for key in allChars.keys {\n        if allChars[key] == max {\n\
    \            result[key] = max\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    \n    /// return empty dictionary\n    if test.isEmpty {\n     \
    \   return [:]\n    }\n    \n    /// create dictonary where letters will be keys\
    \ and occurences will be values\n    var letters = [String : Int]()\n    \n  \
    \  /// create an array out of our string, so we can add a value for each word\
    \ in the array\n    let stringArray = test.split(separator: \" \")\n    \n   \
    \ /// loop through each word in the array\n    for word in stringArray {\n   \
    \     \n        /// if the word is not in the dictionary, add it and set its value\
    \ to 1\n        if letters[String(word)] == nil {\n            letters[String(word)]\
    \ = 1\n            \n        /// if the word is already in the dictionary, increment\
    \ its value by 1\n        } else {\n            letters[String(word)]! += 1\n\
    \        }\n    }\n    \n    /// get the maximum value of the dictionary\n   \
    \ let maxValue = letters.values.max()!\n    \n    /// create a new empty dictionary,\
    \ this one is to store each key that has the maximum value\n    var newLetters\
    \ = [String : Int]()\n    \n    /// iterate through each key and value in our\
    \ original dictionary\n    for (key, value) in letters {\n        \n        ///\
    \ if the value of the current iteration is equal to the maximum value, add it\
    \ to the new dictionary\n        if value == maxValue {\n            newLetters[key]\
    \ = value\n        }\n    }\n    \n    /// return the new dictionary\n    return\
    \ newLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    let stringArray = test.components(separatedBy:\
    \ \" \")\n    var maxOccurrence: Int = 0\n    for string in stringArray {\n  \
    \      if let occurrence = result[string] {\n            result[string] = occurrence\
    \ + 1\n            if result[string]! > maxOccurrence {\n                maxOccurrence\
    \ = result[string]!\n            }\n        } else {\n            result[string]\
    \ = 1\n        }\n    }\n    let keys = result.keys\n    for key in keys {\n \
    \       if result[key]! < maxOccurrence {\n            result.removeValue(forKey:\
    \ key)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9d5h1xg3.swift:18:28: error: value of type 'String' has no member\
    \ 'components'\n    let stringArray = test.components(separatedBy: \" \")\n  \
    \                    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // your code here\n    return [\"\" : 0]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpia5mfo7l/tmpia5mfo7l.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d955d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d952cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d952ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d952c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia5mfo7l                        0x0000563f5975d59b <unavailable> + 5531

    5    libc.so.6                          0x00002b4d957bf460 __libc_start_main +
    245

    6    tmpia5mfo7l                        0x0000563f5975d139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  guard !test.isEmpty else { return [:] }\n  var dictionary: [String\
    \ : Int] = [:]\n  test.components(separatedBy: \" \").forEach {\n    let count\
    \ = dictionary[$0] ?? 0\n    dictionary[$0] = count + 1\n  }\n  let maxValue =\
    \ dictionary.values.max() ?? 0\n  return dictionary.filter { $0.value == maxValue\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\")\
    \ == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\"\
    \ : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\"\
    \ : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") ==\
    \ [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") ==\
    \ [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"\
    g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp01fpmx1l.swift:19:8: error: value of type 'String' has no member\
    \ 'components'\n  test.components(separatedBy: \" \").forEach {\n  ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let inputArray = test.split(separator: \" \")\n    var dictionary\
    \ = [String : Int]()\n    for currentElement in inputArray {\n        if let value\
    \ = dictionary[String(currentElement)] {\n            dictionary[String(currentElement)]\
    \ = value + 1\n        } else {\n            dictionary[String(currentElement)]\
    \ = 1\n        }\n    }\n    return dictionary\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmphf1ecj1n/tmphf1ecj1n.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80cf07cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80ced73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80ced73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80ced727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphf1ecj1n                        0x000055f16b23bb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b80cf268460 __libc_start_main +
    245

    6    tmphf1ecj1n                        0x000055f16b23b599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660009439
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var countDict = [String : Int]()\n    var maxCount = 0\n    var\
    \ mostCommon = [String]()\n    for char in test.split(separator: \" \") {\n  \
    \      if let count = countDict[String(char)] {\n            countDict[String(char)]\
    \ = count + 1\n            if count + 1 > maxCount {\n                maxCount\
    \ = count + 1\n                mostCommon = [String(char)]\n            } else\
    \ if count + 1 == maxCount {\n                mostCommon.append(String(char))\n\
    \            }\n        } else {\n            countDict[String(char)] = 1\n  \
    \          if maxCount == 0 {\n                maxCount = 1\n                mostCommon\
    \ = [String(char)]\n            }\n        }\n    }\n    return mostCommon.reduce(into:\
    \ [String : Int]()) { (result, key) in\n        result[key] = maxCount\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpv86gyphc/tmpv86gyphc.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b604a24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6049f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6049f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6049f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv86gyphc                        0x000055bb9e2e4f04 <unavailable> + 7940

    5    libc.so.6                          0x00002b604a43b460 __libc_start_main +
    245

    6    tmpv86gyphc                        0x000055bb9e2e46c9 <unavailable> + 5833

    '
  stdout: ''
  timestamp: 1660009439
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  var lettersDictionary = [String : Int]()\n  let letters = test.split(separator:\
    \ \" \")\n  var highestCount = 0\n  var dictionaryOfHighestCount = [String : Int]()\n\
    \  for letter in letters {\n    lettersDictionary[String(letter)] = (lettersDictionary[String(letter)]\
    \ ?? 0) + 1\n    if let count = lettersDictionary[String(letter)], count >= highestCount\
    \ {\n      highestCount = count\n      dictionaryOfHighestCount[String(letter)]\
    \ = count\n    }\n  }\n  return dictionaryOfHighestCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmprzrp6bln/tmprzrp6bln.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06eaae4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06ea7dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06ea7db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06ea7da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprzrp6bln                        0x0000558bfe636b86 <unavailable> + 7046

    5    libc.so.6                          0x00002b06eacd0460 __libc_start_main +
    245

    6    tmprzrp6bln                        0x0000558bfe636599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    if let results = test.split(separator:\
    \ \" \").count {\n        for i in 0..<results {\n            result[String(test.split(separator:\
    \ \" \")[i])] = (result[String(test.split(separator: \" \")[i])] ?? 0) + 1\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgp2z8ifx.swift:18:8: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n    if let results = test.split(separator:\
    \ \" \").count {\n       ^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    test.split(separator: \" \").forEach({\
    \ letter in\n        dict[String(letter)] = (dict[String(letter)] ?? 0) + 1\n\
    \    })\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpl5hoz4mx/tmpl5hoz4mx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9258e46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9258b3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9258b3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9258b3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5hoz4mx                        0x000055fbf52f0a86 <unavailable> + 6790

    5    libc.so.6                          0x00002b9259032460 __libc_start_main +
    245

    6    tmpl5hoz4mx                        0x000055fbf52f0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogramDictionary = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    if letters.count == 0 {\n        return histogramDictionary\n  \
    \  }\n    for letter in letters {\n        if let val = histogramDictionary[letter]\
    \ {\n            histogramDictionary[letter] = val + 1\n        } else {\n   \
    \         histogramDictionary[letter] = 1\n        }\n    }\n    var maxVal =\
    \ 0\n    for val in histogramDictionary.values {\n        if val > maxVal {\n\
    \            maxVal = val\n        }\n    }\n    for (letter, val) in histogramDictionary\
    \ {\n        if val != maxVal {\n            histogramDictionary.removeValue(forKey:\
    \ letter)\n        }\n    }\n    return histogramDictionary\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpd1rb6wt6.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let input = test.components(separatedBy: \" \")\n    var output\
    \ = [String : Int]()\n    for word in input {\n        if let count = output[word]\
    \ {\n            output[word] = count + 1\n        } else {\n            output[word]\
    \ = 1\n        }\n    }\n    let maxValue = output.values.max() ?? 0\n    let\
    \ maxValueKeys = output.filter { $0.value == maxValue }.map { $0.key }\n    for\
    \ key in output.keys {\n        if !maxValueKeys.contains(key) {\n           \
    \ output.removeValue(forKey: key)\n        }\n    }\n    return output\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6wnlcibj.swift:17:22: error: value of type 'String' has no member\
    \ 'components'\n    let input = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8e0xtukz/tmp8e0xtukz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca361d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca35ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca35ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca35ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e0xtukz                        0x00005642f7a0759b <unavailable> + 5531

    5    libc.so.6                          0x00002aca363be460 __libc_start_main +
    245

    6    tmp8e0xtukz                        0x00005642f7a07139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n  let letterOccurences = test.characters.reduce([String : Int]()) {\n\
    \    if $0[String($1)] == nil {\n      return $0.merging([String($1) : 1]) { (_,\
    \ new) in new }\n    } else {\n      var copy = $0\n      copy[String($1)] = $0[String($1)]!\
    \ + 1\n      return copy\n    }\n  }\n  return letterOccurences\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkhj9k6jp.swift:17:31: error: 'characters' is unavailable: Please\
    \ use String directly\n  let letterOccurences = test.characters.reduce([String\
    \ : Int]()) {\n                              ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dictionary: [String : Int] = [:]\n    for letter in test.split(separator:\
    \ \" \") {\n        dictionary[String(letter)] = (dictionary[String(letter)] ??\
    \ 0) + 1\n    }\n    return dictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpmzkbdld2/tmpmzkbdld2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd55b3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd55834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd55834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd558337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzkbdld2                        0x0000559b45bd8b36 <unavailable> + 6966

    5    libc.so.6                          0x00002abd55d29460 __libc_start_main +
    245

    6    tmpmzkbdld2                        0x0000559b45bd8549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    if test.isEmpty {\n        return [:]\n    }\n    var count = [String\
    \ : Int]()\n    let arrayOfStrings = test.components(separatedBy: \" \")\n   \
    \ for item in arrayOfStrings {\n        if count[item] == nil {\n            count[item]\
    \ = 1\n        } else {\n            count[item]! += 1\n        }\n    }\n   \
    \ var maxValue = 0\n    var bestWord = [String]()\n    for (_, value) in count\
    \ {\n        if value == maxValue {\n            bestWord.append(String(value))\n\
    \        } else if value > maxValue {\n            maxValue = value\n        \
    \    bestWord = [String(value)]\n        }\n    }\n    for (key, value) in count\
    \ {\n        if !bestWord.contains(String(value)) {\n            count.removeValue(forKey:\
    \ key)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkbzd5i80.swift:21:31: error: value of type 'String' has no member\
    \ 'components'\n    let arrayOfStrings = test.components(separatedBy: \" \")\n\
    \                         ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // Need to learn about character sets\n    let letters = test.components(separatedBy:\
    \ .whitespacesAndNewlines)\n    var histogramDict: [String : Int] = [:]\n    if\
    \ letters.count == 0 {\n        return histogramDict\n    }\n    for letter in\
    \ letters {\n        if histogramDict[letter] == nil {\n            histogramDict[letter]\
    \ = 1\n        } else {\n            histogramDict[letter]! += 1\n        }\n\
    \    }\n    return histogramDict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2wbcv10z.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: .whitespacesAndNewlines)\n\
    \                  ~~~~ ^~~~~~~~~~\n/tmp/tmp2wbcv10z.swift:18:49: error: cannot\
    \ infer contextual base in reference to member 'whitespacesAndNewlines'\n    let\
    \ letters = test.components(separatedBy: .whitespacesAndNewlines)\n          \
    \                                     ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var res: [String : Int] = [:]\n    var letters = test.components(separatedBy:\
    \ \" \")\n    var maxCount = 0\n    for letter in letters {\n        if res[letter]\
    \ == nil {\n            res[letter] = 1\n        } else {\n            res[letter]!\
    \ += 1\n        }\n        if res[letter]! > maxCount {\n            maxCount\
    \ = res[letter]!\n        }\n    }\n    for key in res.keys {\n        if res[key]!\
    \ < maxCount {\n            res.removeValue(forKey: key)\n        }\n    }\n \
    \   return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpy29ixukc.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    var letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    // your code here\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpanxnauzb/tmpanxnauzb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b3423ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b33f31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b33f31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b33f307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanxnauzb                        0x000055efb116f59b <unavailable> + 5531

    5    libc.so.6                          0x00002b4b34426460 __libc_start_main +
    245

    6    tmpanxnauzb                        0x000055efb116f139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterDict: [String : Int] = [:]\n    var arrayOfChars = test.components(separatedBy:\
    \ \" \")\n    for char in arrayOfChars {\n        if let count = letterDict[char]\
    \ {\n            letterDict[char] = count + 1\n        } else {\n            letterDict[char]\
    \ = 1\n        }\n    }\n    return letterDict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp25el_n0w.swift:18:29: error: value of type 'String' has no member\
    \ 'components'\n    var arrayOfChars = test.components(separatedBy: \" \")\n \
    \                      ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    if !test.isEmpty {\n        for\
    \ ch in test.split(separator: \" \") {\n            result[String(ch)] = (result[String(ch)]\
    \ ?? 0) + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpmuoo9akt/tmpmuoo9akt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076ea6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e761b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e761988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e7607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmuoo9akt                        0x00005556a01e6bd6 <unavailable> + 7126

    5    libc.so.6                          0x00002b076ec56460 __libc_start_main +
    245

    6    tmpmuoo9akt                        0x00005556a01e65e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let result = test.components(separatedBy: \" \")\n    var dict =\
    \ [String : Int]()\n    for i in result {\n        if dict[i] == nil {\n     \
    \       dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n  \
    \      }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpzq45tp0w.swift:17:23: error: value of type 'String' has no member\
    \ 'components'\n    let result = test.components(separatedBy: \" \")\n       \
    \          ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var input = [String]()\n    if\
    \ test.count > 0 {\n        input = test.components(separatedBy: \" \")\n    }\n\
    \    if input.count > 0 {\n        for item in input {\n            if let count\
    \ = result[item] {\n                result[item] = count + 1\n            } else\
    \ {\n                result[item] = 1\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmxe1nex5.swift:20:22: error: value of type 'String' has no member\
    \ 'components'\n        input = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let test = test.lowercased()\n    if test.count == 0 {\n       \
    \ return [:]\n    }\n    var result = [String : Int]()\n    var list = [String]()\n\
    \    let array = test.split(separator: \" \")\n    for char in array {\n     \
    \   if let index = list.firstIndex(of: String(char)) {\n            result[String(char)]\
    \ = result[String(char)]! + 1\n        } else {\n            list.append(String(char))\n\
    \            result[String(char)] = 1\n        }\n    }\n    var max = -1\n  \
    \  for (key, value) in result {\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for (key, value) in result {\n        if value < max {\n\
    \            result.removeValue(forKey: key)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let array = test.components(separatedBy: \" \")\n    let uniqueElements\
    \ = Set(array)\n    var histogramDict = [String : Int]()\n    for element in uniqueElements\
    \ {\n        let occurrence = array.filter { $0 == element }.count\n        histogramDict[element]\
    \ = occurrence\n    }\n    return histogramDict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpny7kw_1m.swift:17:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    if test.isEmpty {\n        return [:]\n    }\n    let testArray\
    \ = test.split(separator: \" \")\n    var histogram = [String : Int]()\n    for\
    \ char in testArray {\n        if let value = histogram[String(char)] {\n    \
    \        histogram[String(char)] = value + 1\n        } else {\n            histogram[String(char)]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpftt0b1q6/tmpftt0b1q6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a8160c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a7e57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a7e57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a7e567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpftt0b1q6                        0x00005617abcedbd6 <unavailable> + 7126

    5    libc.so.6                          0x00002b92a834c460 __libc_start_main +
    245

    6    tmpftt0b1q6                        0x00005617abced5e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let arr = test.components(separatedBy: \" \")\n    var histogram\
    \ = [String : Int]()\n    for index in 0..<arr.count {\n        if histogram[arr[index]]\
    \ == nil {\n            histogram[arr[index]] = 1\n        } else {\n        \
    \    histogram[arr[index]]! += 1\n        }\n    }\n    var max = 0\n    for (_,\
    \ value) in histogram {\n        if value > max {\n            max = value\n \
    \       }\n    }\n    var final = [String : Int]()\n    for (key, value) in histogram\
    \ {\n        if value == max {\n            final[key] = value\n        }\n  \
    \  }\n    return final\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpookhmrqp.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let arr = test.components(separatedBy: \" \")\n          \
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009439
