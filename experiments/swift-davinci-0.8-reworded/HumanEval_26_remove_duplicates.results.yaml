language: swift
name: HumanEval_26_remove_duplicates
results:
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce(into: [Int]()) { (unique: inout [Int], item: Int)\
    \ in\n        if !unique.contains(item) {\n            unique.append(item)\n \
    \       }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmps8pdsdj8/tmps8pdsdj8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ae8255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ae7f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ae7f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ae7f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8pdsdj8                        0x000055759c0037a1 <unavailable> + 6049

    5    libc.so.6                          0x00002b7ae8441460 __libc_start_main +
    245

    6    tmps8pdsdj8                        0x000055759c003159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var array = numbers\n    var tempArray = [Int]()\n    var index = 0\n\
    \    for i in array {\n        for j in array {\n            if j == i {\n   \
    \             index += 1\n            }\n        }\n        if index == 1 {\n\
    \            tempArray.append(i)\n        }\n        index = 0\n    }\n    return\
    \ tempArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let set = Set(numbers)\n    let array = Array(set)\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpvk3tg1kb/tmpvk3tg1kb.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b049beb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b049bbadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b049bbad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b049bbac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvk3tg1kb                        0x0000560a9c3eb60d <unavailable> + 5645

    5    libc.so.6                          0x00002b049c0a2460 __libc_start_main +
    245

    6    tmpvk3tg1kb                        0x0000560a9c3eb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  return [Int]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpb9dmb258/tmpb9dmb258.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18dd8bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18dd5b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18dd5b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18dd5b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9dmb258                        0x00005608063b750d <unavailable> + 5389

    5    libc.so.6                          0x00002b18ddaa6460 __libc_start_main +
    245

    6    tmpb9dmb258                        0x00005608063b7029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbers = numbers\n    for number in numbers {\n        if (numbers.filter\
    \ { $0 == number }).count > 1 {\n            numbers.remove(at: numbers.firstIndex(of:\
    \ number)!)\n        }\n    }\n    return numbers\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpeqx3dl2b/tmpeqx3dl2b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adffaeb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adffabacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adffabac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adffabab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqx3dl2b                        0x0000563f1ca17a01 <unavailable> + 6657

    5    libc.so.6                          0x00002adffb0a1460 __libc_start_main +
    245

    6    tmpeqx3dl2b                        0x0000563f1ca173b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    var result = [Int]()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            seen.insert(number)\n  \
    \          result.append(number)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmph5w5nzvl/tmph5w5nzvl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abed1aecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abed17e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abed17e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abed17e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5w5nzvl                        0x000055bd4d863981 <unavailable> + 6529

    5    libc.so.6                          0x00002abed1cd8460 __libc_start_main +
    245

    6    tmph5w5nzvl                        0x000055bd4d863339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueElements = Set<Int>()\n    var uniqueElementsArray = [Int]()\n\
    \    for element in numbers {\n        if uniqueElements.contains(element) {\n\
    \            continue\n        } else {\n            uniqueElements.insert(element)\n\
    \            uniqueElementsArray.append(element)\n        }\n    }\n    return\
    \ uniqueElementsArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp_qv9b79n/tmp_qv9b79n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7e295dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7e2654b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7e2654988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7e26537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qv9b79n                        0x000055a470cd8981 <unavailable> + 6529

    5    libc.so.6                          0x00002ad7e2b49460 __libc_start_main +
    245

    6    tmp_qv9b79n                        0x000055a470cd8339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict: [Int: Bool] = [:]\n    var result: [Int] = []\n    for number\
    \ in numbers {\n        if dict[number] == nil {\n            dict[number] = true\n\
    \            result.append(number)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9lzwydyk/tmp9lzwydyk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b571f828c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b571f51fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b571f51f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b571f51e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9lzwydyk                        0x000055633ebf0961 <unavailable> + 6497

    5    libc.so.6                          0x00002b571fa14460 __libc_start_main +
    245

    6    tmp9lzwydyk                        0x000055633ebf0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbers = numbers\n    let count = numbers.count\n    var i = 0\n\
    \    var j = 0\n    while i < count {\n        j = i + 1\n        while j < count\
    \ {\n            if numbers[i] == numbers[j] {\n                numbers.remove(at:\
    \ j)\n            } else {\n                j += 1\n            }\n        }\n\
    \        i += 1\n    }\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1b602fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1b5d26561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae1b5d26286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae1b5d2613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae1b5d25bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae1b5b25e83 <unavailable> + 188035

    6    tmpq5b9infb                        0x000055ece9497835 <unavailable> + 6197

    7    tmpq5b9infb                        0x000055ece9497627 <unavailable> + 5671

    8    libc.so.6                          0x00002ae1b621b460 __libc_start_main +
    245

    9    tmpq5b9infb                        0x000055ece94970d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for num in numbers {\n        if !result.contains(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp2gz6knmt/tmp2gz6knmt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae595bdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5958d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5958d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5958d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gz6knmt                        0x000056120c08e841 <unavailable> + 6209

    5    libc.so.6                          0x00002ae595dc8460 __libc_start_main +
    245

    6    tmp2gz6knmt                        0x000056120c08e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var set: Set<Int> = []\n    for n in numbers\
    \ {\n        if set.contains(n) {\n            continue\n        }\n        set.insert(n)\n\
    \        result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuf_pc208/tmpuf_pc208.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a5ee73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a5eb6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a5eb6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a5eb697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuf_pc208                        0x000056137b940941 <unavailable> + 6465

    5    libc.so.6                          0x00002b3a5f05f460 __libc_start_main +
    245

    6    tmpuf_pc208                        0x000056137b9402f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict:[Int:Int] = [:]\n    var result:[Int] = []\n    for number in\
    \ numbers {\n        if dict[number] == nil {\n            dict[number] = 1\n\
    \            result.append(number)\n        } else {\n            dict[number]!\
    \ += 1\n        }\n    }\n    print(dict)\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpof56wz7o/tmpof56wz7o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9be49a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9be469fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9be469f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9be469e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpof56wz7o                        0x000055b43ff77bb1 <unavailable> + 7089

    5    libc.so.6                          0x00002b9be4b94460 __libc_start_main +
    245

    6    tmpof56wz7o                        0x000055b43ff77569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numberSet = Set<Int>()\n    var result = [Int]()\n    for n in numbers\
    \ {\n        if !numberSet.contains(n) {\n            numberSet.insert(n)\n  \
    \          result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpx6exoz0v/tmpx6exoz0v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0371addc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03717d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03717d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03717d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6exoz0v                        0x000055df53b81981 <unavailable> + 6529

    5    libc.so.6                          0x00002b0371cc9460 __libc_start_main +
    245

    6    tmpx6exoz0v                        0x000055df53b81339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var duplicateNumbers = [Int]()\n    for number in numbers {\n       \
    \ if duplicateNumbers.contains(number) {\n            continue\n        }\n  \
    \      duplicateNumbers.append(number)\n    }\n    return duplicateNumbers\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuhtyhixc/tmpuhtyhixc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d4d1afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d4cea6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d4cea6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d4cea57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhtyhixc                        0x000055e3f501a891 <unavailable> + 6289

    5    libc.so.6                          0x00002b6d4d39b460 __libc_start_main +
    245

    6    tmpuhtyhixc                        0x000055e3f501a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var uniqueNumbers = [Int]()\n  var seenNumbers = [Int]()\n  \n  for number\
    \ in numbers {\n    if seenNumbers.contains(number) {\n      continue\n    }\n\
    \    \n    seenNumbers.append(number)\n    uniqueNumbers.append(number)\n  }\n\
    \  \n  return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp0gixhbv9/tmp0gixhbv9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b379c4e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b379c1dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b379c1da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b379c1d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gixhbv9                        0x0000562be0b0d891 <unavailable> + 6289

    5    libc.so.6                          0x00002b379c6cf460 __libc_start_main +
    245

    6    tmp0gixhbv9                        0x0000562be0b0d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var dict = [Int: Int]()\n    var singleNumbers = [Int]()\n    \n\
    \    for number in numbers {\n        dict[number] = (dict[number] ?? 0) + 1\n\
    \    }\n    \n    for (key, value) in dict {\n        if value == 1 {\n      \
    \      singleNumbers.append(key)\n        }\n    }\n    \n    return singleNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp44be2jur/tmp44be2jur.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bc3765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bc345cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bc345c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bc345b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44be2jur                        0x000055e957d8996d <unavailable> + 6509

    5    libc.so.6                          0x00002b9bc3951460 __libc_start_main +
    245

    6    tmp44be2jur                        0x000055e957d89489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let unique = Set(numbers)\n    return unique.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9plf4wlm/tmp9plf4wlm.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9342d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae933fcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae933fcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae933fcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9plf4wlm                        0x000055b8000d37a1 <unavailable> + 6049

    5    libc.so.6                          0x00002ae9344c2460 __libc_start_main +
    245

    6    tmp9plf4wlm                        0x000055b8000d3159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for num in numbers {\n        if !result.contains(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp2gz6knmt/tmp2gz6knmt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae595bdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5958d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5958d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5958d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gz6knmt                        0x000056120c08e841 <unavailable> + 6209

    5    libc.so.6                          0x00002ae595dc8460 __libc_start_main +
    245

    6    tmp2gz6knmt                        0x000056120c08e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var newNumbers = [Int]()\n    var countArray = [Int](repeating:\
    \ 0, count: numbers.count)\n    \n    for i in 0...numbers.count - 1 {\n     \
    \   for j in 0...numbers.count - 1 {\n            if (numbers[i] == numbers[j])\
    \ {\n                countArray[i] += 1\n            }\n        }\n    }\n   \
    \ \n    for i in 0...numbers.count - 1 {\n        if (countArray[i] == 1) {\n\
    \            newNumbers.append(numbers[i])\n        }\n    }\n    \n    return\
    \ newNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b037fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b034f1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2b034f1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2b034f113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2b034f0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpi_6k4zse                        0x00005555a71e3b74 <unavailable> + 7028

    6    tmpi_6k4zse                        0x00005555a71e365d <unavailable> + 5725

    7    libc.so.6                          0x00002b2b039e6460 __libc_start_main +
    245

    8    tmpi_6k4zse                        0x00005555a71e3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    return [Int]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp_ff1ekht/tmp_ff1ekht.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cbb520c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cbb217b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cbb217988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cbb2167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ff1ekht                        0x0000563accadc50d <unavailable> + 5389

    5    libc.so.6                          0x00002b0cbb70c460 __libc_start_main +
    245

    6    tmp_ff1ekht                        0x0000563accadc029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpd7w3kno_/tmpd7w3kno_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1654087c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1653d7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1653d7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1653d7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7w3kno_                        0x000055f3e9b2b891 <unavailable> + 6289

    5    libc.so.6                          0x00002b1654273460 __libc_start_main +
    245

    6    tmpd7w3kno_                        0x000055f3e9b2b249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var arr = [Int]()\n    for (i,_) in numbers.enumerated() {\n        if\
    \ !arr.contains(numbers[i]) {\n            arr.append(numbers[i])\n        }\n\
    \    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpllk84ci9/tmpllk84ci9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b207add5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b207aaccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b207aacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b207aacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpllk84ci9                        0x00005577d82e1991 <unavailable> + 6545

    5    libc.so.6                          0x00002b207afc1460 __libc_start_main +
    245

    6    tmpllk84ci9                        0x00005577d82e1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpal_e54l2/tmpal_e54l2.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b006f2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b006efd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b006efd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b006efd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpal_e54l2                        0x000056538ad01771 <unavailable> + 6001

    5    libc.so.6                          0x00002b006f4cd460 __libc_start_main +
    245

    6    tmpal_e54l2                        0x000056538ad01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  let set = Set(numbers)\n  return Array(set)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6vlf9f7l/tmp6vlf9f7l.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baa2a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ba9fa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ba9fa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ba9f9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vlf9f7l                        0x000056333a08e60d <unavailable> + 5645

    5    libc.so.6                          0x00002b8baa495460 __libc_start_main +
    245

    6    tmp6vlf9f7l                        0x000056333a08e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // Add your implementation here\n    var unique = [Int]()\n    for number\
    \ in numbers {\n        if unique.contains(number) {\n            unique.remove(at:\
    \ unique.index(of: number)!)\n        } else {\n            unique.append(number)\n\
    \        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ uniqueNumbers.contains(number) {\n            continue\n        }\n        uniqueNumbers.append(number)\n\
    \    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpetll8wmn/tmpetll8wmn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada4de5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada4db53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada4db53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada4db527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetll8wmn                        0x0000556d7ee77891 <unavailable> + 6289

    5    libc.so.6                          0x00002ada4e048460 __libc_start_main +
    245

    6    tmpetll8wmn                        0x0000556d7ee77249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var memo: [Int: Int] = [:]\n    for n in numbers {\n        memo[n] =\
    \ (memo[n] ?? 0) + 1\n    }\n    return numbers.filter { memo[$0] == 1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    //TODO\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpaeaag2ov/tmpaeaag2ov.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab63bb59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab63b850b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab63b850988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab63b84f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaeaag2ov                        0x0000559721bae4ad <unavailable> + 5293

    5    libc.so.6                          0x00002ab63bd45460 __libc_start_main +
    245

    6    tmpaeaag2ov                        0x0000559721badfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return [1, 3, 4]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpjfycu2p3/tmpjfycu2p3.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43a26b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43a23b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43a23b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43a23af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfycu2p3                        0x0000565124739376 <unavailable> + 4982

    5    libc.so.6                          0x00002b43a28a5460 __libc_start_main +
    245

    6    tmpjfycu2p3                        0x0000565124738fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var sorted = numbers.sorted()\n    var result = [Int]()\n    for i in\
    \ 0..<sorted.count {\n        if sorted[i] != sorted[i + 1] {\n            result.append(sorted[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac78ca51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac78c748561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac78c748286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac78c74813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac78c747bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac78c547e83 <unavailable> + 188035

    6    tmpym18ekhd                        0x000055b804a48c19 <unavailable> + 7193

    7    tmpym18ekhd                        0x000055b804a48755 <unavailable> + 5973

    8    libc.so.6                          0x00002ac78cc3d460 __libc_start_main +
    245

    9    tmpym18ekhd                        0x000055b804a48359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var set = Set<Int>()\n  return numbers.filter { set.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_duplicates(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) ==\
    \ [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])"
  status: Exception
  stderr: 'tmp9ccrwh1r/tmp9ccrwh1r.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1856dbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1856ab1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1856ab1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1856ab07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ccrwh1r                        0x000055fc441ed7e1 <unavailable> + 6113

    5    libc.so.6                          0x00002b1856fa6460 __libc_start_main +
    245

    6    tmp9ccrwh1r                        0x000055fc441ed199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Int] = [:]\n    return numbers.filter { seen.updateValue((seen[$0]\
    \ ?? 0) + 1, forKey: $0) == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpz6_tbhsf/tmpz6_tbhsf.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7107746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b710743db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b710743d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b710743c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tbhsf                        0x0000555966ca76dd <unavailable> + 5853

    5    libc.so.6                          0x00002b7107932460 __libc_start_main +
    245

    6    tmpz6_tbhsf                        0x0000555966ca71f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var newNumbers = numbers\n    var checkDict = [Int:Int]()\n    for num\
    \ in numbers {\n        if (checkDict[num] == nil) {\n            checkDict[num]\
    \ = 1\n        } else {\n            checkDict[num]! += 1\n        }\n    }\n\
    \    for (key, value) in checkDict {\n        if (value > 1) {\n            newNumbers\
    \ = newNumbers.filter({$0 != key})\n        }\n    }\n    return newNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var checkedNums: [Int] = []\n    for num\
    \ in numbers {\n        if !checkedNums.contains(num) {\n            result.append(num)\n\
    \            checkedNums.append(num)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp3o076kso/tmp3o076kso.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15d5620c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15d5317b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15d5317988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15d53167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3o076kso                        0x00005610a694e841 <unavailable> + 6209

    5    libc.so.6                          0x00002b15d580c460 __libc_start_main +
    245

    6    tmp3o076kso                        0x00005610a694e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var newArray = [Int]()\n    for number in numbers {\n        if !newArray.contains(number)\
    \ {\n            newArray.append(number)\n        }\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpawnpqodg/tmpawnpqodg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1418c71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1418968b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1418968988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14189677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawnpqodg                        0x000055a61f342891 <unavailable> + 6289

    5    libc.so.6                          0x00002b1418e5d460 __libc_start_main +
    245

    6    tmpawnpqodg                        0x000055a61f342249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ uniqueNumbers.contains(number) {\n            continue\n        }\n        uniqueNumbers.append(number)\n\
    \    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpetll8wmn/tmpetll8wmn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada4de5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada4db53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada4db53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada4db527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetll8wmn                        0x0000556d7ee77891 <unavailable> + 6289

    5    libc.so.6                          0x00002ada4e048460 __libc_start_main +
    245

    6    tmpetll8wmn                        0x0000556d7ee77249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpal_e54l2/tmpal_e54l2.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b006f2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b006efd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b006efd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b006efd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpal_e54l2                        0x000056538ad01771 <unavailable> + 6001

    5    libc.so.6                          0x00002b006f4cd460 __libc_start_main +
    245

    6    tmpal_e54l2                        0x000056538ad01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    var uniqueSet = Set<Int>()\n    for\
    \ number in numbers {\n        if !uniqueSet.contains(number) {\n            uniqueNumbers.append(number)\n\
    \            uniqueSet.insert(number)\n        }\n    }\n    return uniqueNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxukjo6sj/tmpxukjo6sj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4745aaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47457a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47457a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47457a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxukjo6sj                        0x0000555575dd6981 <unavailable> + 6529

    5    libc.so.6                          0x00002b4745c96460 __libc_start_main +
    245

    6    tmpxukjo6sj                        0x0000555575dd6339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if unique.contains(number)\
    \ {\n            continue\n        }\n        unique.append(number)\n    }\n \
    \   return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpk932t_c4/tmpk932t_c4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7315342c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7315039b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7315039988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73150387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk932t_c4                        0x00005616154a0891 <unavailable> + 6289

    5    libc.so.6                          0x00002b731552e460 __libc_start_main +
    245

    6    tmpk932t_c4                        0x00005616154a0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // implement me :)\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpknaixvu9/tmpknaixvu9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e1c5e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e1c2dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e1c2df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e1c2de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknaixvu9                        0x000055bfc3f9f4ad <unavailable> + 5293

    5    libc.so.6                          0x00002b3e1c7d4460 __libc_start_main +
    245

    6    tmpknaixvu9                        0x000055bfc3f9efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var array = numbers\n    for number in numbers {\n        if array.contains(number)\
    \ {\n            array.remove(at: array.firstIndex(of: number)!)\n        }\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpdgpepn3b/tmpdgpepn3b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ee3c62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ee3959b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ee3959988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ee39587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdgpepn3b                        0x000055e8201857dd <unavailable> + 6109

    5    libc.so.6                          0x00002b2ee3e4e460 __libc_start_main +
    245

    6    tmpdgpepn3b                        0x000055e8201852f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp13uvcgjh/tmp13uvcgjh.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5350bffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53508f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53508f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53508f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13uvcgjh                        0x00005622bb0a2841 <unavailable> + 6209

    5    libc.so.6                          0x00002b5350deb460 __libc_start_main +
    245

    6    tmp13uvcgjh                        0x00005622bb0a21f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var done: [Int] = []\n    for number in numbers {\n        if done.contains(number)\
    \ {\n            continue\n        }\n        done.append(number)\n    }\n   \
    \ return done\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpgjs7qzzp/tmpgjs7qzzp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82f0269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82eff60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82eff60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82eff5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjs7qzzp                        0x00005646c4cbc841 <unavailable> + 6209

    5    libc.so.6                          0x00002b82f0455460 __libc_start_main +
    245

    6    tmpgjs7qzzp                        0x00005646c4cbc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var set: Set<Int> = []\n    for n in numbers\
    \ {\n        if set.contains(n) {\n            continue\n        }\n        set.insert(n)\n\
    \        result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuf_pc208/tmpuf_pc208.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a5ee73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a5eb6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a5eb6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a5eb697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuf_pc208                        0x000056137b940941 <unavailable> + 6465

    5    libc.so.6                          0x00002b3a5f05f460 __libc_start_main +
    245

    6    tmpuf_pc208                        0x000056137b9402f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var filtered_values: [Int] = []\n    for number in numbers {\n      \
    \  if (!filtered_values.contains(number)) {\n            filtered_values.append(number)\n\
    \        }\n    }\n    return filtered_values\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpbkvavcek/tmpbkvavcek.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7178a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7178765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7178765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71787647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbkvavcek                        0x0000564e066d4841 <unavailable> + 6209

    5    libc.so.6                          0x00002b7178c5a460 __libc_start_main +
    245

    6    tmpbkvavcek                        0x0000564e066d41f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    var seenAgain = Set<Int>()\n    var result\
    \ = [Int]()\n    for number in numbers {\n        if seen.contains(number) {\n\
    \            seenAgain.insert(number)\n        } else {\n            seen.insert(number)\n\
    \        }\n    }\n    for number in numbers {\n        if !seenAgain.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique_numbers = [Int]()\n    var numbers_counts = [Int: Int]()\n\
    \    \n    for number in numbers {\n        numbers_counts[number] = (numbers_counts[number]\
    \ ?? 0) + 1\n    }\n    \n    for number in numbers {\n        if numbers_counts[number]\
    \ == 1 {\n            unique_numbers.append(number)\n        }\n    }\n    \n\
    \    return unique_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict = [Int: Int]()\n    var output = [Int]()\n    for n in numbers\
    \ {\n        dict[n] = (dict[n] ?? 0) + 1\n    }\n    for key in dict.keys {\n\
    \        if dict[key] == 1 {\n            output.append(key)\n        }\n    }\n\
    \    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp1gssy0ps/tmp1gssy0ps.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6db850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6db547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6db547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6db5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1gssy0ps                        0x000056352b92d9cd <unavailable> + 6605

    5    libc.so.6                          0x00002ae6dba3c460 __libc_start_main +
    245

    6    tmp1gssy0ps                        0x000056352b92d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let c = NSCountedSet(array: numbers)\n    return numbers.filter { c.count(for:\
    \ $0) == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp1vdfgwwc.swift:7:13: error: cannot find 'NSCountedSet' in scope\n\
    \    let c = NSCountedSet(array: numbers)\n            ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpebaa77d6/tmpebaa77d6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c8e38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c8b2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c8b2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c8b2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpebaa77d6                        0x000055a8c14cd981 <unavailable> + 6529

    5    libc.so.6                          0x00002b26c9024460 __libc_start_main +
    245

    6    tmpebaa77d6                        0x000055a8c14cd339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniq = [Int]()\n    var dict = [Int:Int]()\n    for number in numbers\
    \ {\n        if let _ = dict[number] {\n            dict[number] = dict[number]!\
    \ + 1\n        } else {\n            dict[number] = 1\n        }\n    }\n    for\
    \ number in numbers {\n        if dict[number] == 1 {\n            uniq.append(number)\n\
    \        }\n    }\n    return uniq\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var newArr = [Int]()\n    for num in numbers {\n        if !newArr.contains(num)\
    \ {\n            newArr.append(num)\n        }\n    }\n    return newArr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp_05hn12j/tmp_05hn12j.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ab7b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ab7866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ab7866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ab78657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_05hn12j                        0x000055ff87595891 <unavailable> + 6289

    5    libc.so.6                          0x00002b6ab7d5b460 __libc_start_main +
    245

    6    tmp_05hn12j                        0x000055ff87595249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let sortedNumbers = numbers.sorted()\n    var result = [Int]()\n    var\
    \ last: Int?\n    for number in sortedNumbers {\n        if number != last {\n\
    \            result.append(number)\n            last = number\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7idfrejf/tmp7idfrejf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26ae3bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26ae0b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26ae0b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26ae0b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7idfrejf                        0x0000556e14c8e8d1 <unavailable> + 6353

    5    libc.so.6                          0x00002b26ae5ab460 __libc_start_main +
    245

    6    tmp7idfrejf                        0x0000556e14c8e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict: [Int: Int] = [:]\n    numbers.forEach {\n        if let _ =\
    \ dict[$0] {\n            dict[$0] = dict[$0]! + 1\n        } else {\n       \
    \     dict[$0] = 1\n        }\n    }\n    return numbers.filter { dict[$0] ==\
    \ 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    var result = [Int]()\n    for number in numbers\
    \ {\n        if !set.contains(number) {\n            set.insert(number)\n    \
    \        result.append(number)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpdncx905c/tmpdncx905c.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa6483ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa64531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa64531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa645307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdncx905c                        0x000055d2e4df7981 <unavailable> + 6529

    5    libc.so.6                          0x00002afa64a26460 __libc_start_main +
    245

    6    tmpdncx905c                        0x000055d2e4df7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var result = [Int]()\n    var numbersSet = Set<Int>()\n    \n \
    \   for i in numbers {\n        if numbersSet.contains(i) {\n            continue\n\
    \        }\n        result.append(i)\n        numbersSet.insert(i)\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpfkatgcjr/tmpfkatgcjr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a2fe0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a2fb05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a2fb05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a2fb047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfkatgcjr                        0x0000559a65b6c981 <unavailable> + 6529

    5    libc.so.6                          0x00002b4a2fffa460 __libc_start_main +
    245

    6    tmpfkatgcjr                        0x0000559a65b6c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict = [Int: Int]()\n    var result = [Int]()\n    for n in numbers\
    \ {\n        if let count = dict[n] {\n            dict[n] = count + 1\n     \
    \   } else {\n            dict[n] = 1\n        }\n    }\n    for n in numbers\
    \ {\n        if dict[n] == 1 {\n            result.append(n)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict: [Int: Int] = [:]\n    var result: [Int] = []\n    for number\
    \ in numbers {\n        if dict[number] == nil {\n            dict[number] = 1\n\
    \            result.append(number)\n        } else {\n            dict[number]!\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpsly78xh8/tmpsly78xh8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91bd31bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91bd012b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91bd012988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91bd0117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsly78xh8                        0x000056112b3a9a01 <unavailable> + 6657

    5    libc.so.6                          0x00002b91bd507460 __libc_start_main +
    245

    6    tmpsly78xh8                        0x000056112b3a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var numberCounts = [Int: Int]()\n  var result = [Int]()\n  for number in\
    \ numbers {\n    let count = numberCounts[number] ?? 0\n    numberCounts[number]\
    \ = count + 1\n  }\n  for number in numbers {\n    if numberCounts[number] ==\
    \ 1 {\n      result.append(number)\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var nums : [Int] = []\n    for element in numbers {\n        if !nums.contains(element)\
    \ {\n            nums.append(element)\n        }\n    }\n    return nums\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmppc6q3p6e/tmppc6q3p6e.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6271c5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6271952b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6271952988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62719517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc6q3p6e                        0x000055b2e04b2841 <unavailable> + 6209

    5    libc.so.6                          0x00002b6271e47460 __libc_start_main +
    245

    6    tmppc6q3p6e                        0x000055b2e04b21f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // TODO\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for\
    \ number in numbers {\n        if let _ = dict[number] {\n            dict[number]!\
    \ += 1\n        } else {\n            dict[number] = 1\n        }\n    }\n   \
    \ for number in numbers {\n        if dict[number] == 1 {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbersCopy = numbers\n    for num in numbers {\n        numbersCopy.removeAll\
    \ { $0 == num }\n    }\n    return numbersCopy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp03h5vyvi/tmp03h5vyvi.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82a133bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82a1032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82a1032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82a10317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp03h5vyvi                        0x00005636b095770d <unavailable> + 5901

    5    libc.so.6                          0x00002b82a1527460 __libc_start_main +
    245

    6    tmp03h5vyvi                        0x00005636b0957229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output: [Int] = []\n    var memory: [Int: Int] = [:]\n    \n    for\
    \ number in numbers {\n        if let _ = memory[number] {\n            continue\n\
    \        }\n        \n        memory[number] = 1\n        output.append(number)\n\
    \    }\n    \n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp8rfjf460/tmp8rfjf460.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d6afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d67f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d67f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d67f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rfjf460                        0x000055b9e13aa921 <unavailable> + 6433

    5    libc.so.6                          0x00002b14d6ce9460 __libc_start_main +
    245

    6    tmp8rfjf460                        0x000055b9e13aa2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce(into: []) { result, number in\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpo4of_ijr/tmpo4of_ijr.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f9f095c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f9ed8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f9ed8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f9ed8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4of_ijr                        0x000055cb5602e751 <unavailable> + 5969

    5    libc.so.6                          0x00002b1f9f281460 __libc_start_main +
    245

    6    tmpo4of_ijr                        0x000055cb5602e109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbers = numbers\n    let count = numbers.count\n    var index =\
    \ 0\n    while index < count {\n        if let removedIndex = numbers.firstIndex(of:\
    \ numbers[index]) {\n            if removedIndex != index {\n                numbers.remove(at:\
    \ removedIndex)\n            } else {\n                index += 1\n          \
    \  }\n        }\n    }\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abdce6d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdce3cb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abdce3cb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abdce3cb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abdce3cabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abdce1cae83 <unavailable> + 188035

    6    tmpzbwgdeyj                        0x00005608734428b3 <unavailable> + 6323

    7    tmpzbwgdeyj                        0x00005608734426d7 <unavailable> + 5847

    8    libc.so.6                          0x00002abdce8c0460 __libc_start_main +
    245

    9    tmpzbwgdeyj                        0x0000560873442189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Set(numbers).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpck698lio/tmpck698lio.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51b07a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51b0499b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51b0499988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51b04987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpck698lio                        0x000055ba07db77a1 <unavailable> + 6049

    5    libc.so.6                          0x00002b51b098e460 __libc_start_main +
    245

    6    tmpck698lio                        0x000055ba07db7159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var new_numbers = numbers\n    var occurences = [Int: Int]()\n    for\
    \ number in numbers {\n        if let n = occurences[number] {\n            occurences[number]\
    \ = n + 1\n        } else {\n            occurences[number] = 1\n        }\n \
    \   }\n    for (key, value) in occurences {\n        if value > 1 {\n        \
    \    new_numbers = new_numbers.filter { $0 != key }\n        }\n    }\n    return\
    \ new_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmps7ilo_s0/tmps7ilo_s0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d2926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7ilo_s0                        0x000056386a3e1891 <unavailable> + 6289

    5    libc.so.6                          0x00002b69d2b12460 __libc_start_main +
    245

    6    tmps7ilo_s0                        0x000056386a3e1249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var countedNumbers = [Int: Int]()\n    numbers.forEach {\n        if\
    \ countedNumbers[$0] == nil {\n            countedNumbers[$0] = 1\n        } else\
    \ {\n            countedNumbers[$0]! += 1\n        }\n    }\n    return countedNumbers.filter\
    \ { $0.value == 1 }.map { $0.key }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp56y1m7kn/tmp56y1m7kn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f19e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f19afbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f19afb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f19afa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp56y1m7kn                        0x000055b9d63bb83d <unavailable> + 6205

    5    libc.so.6                          0x00002b0f19ff0460 __libc_start_main +
    245

    6    tmp56y1m7kn                        0x000055b9d63bb359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var found = [Int: Bool]()\n    return numbers.filter { found.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpf1xvg3w8/tmpf1xvg3w8.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07c3169c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07c2e60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07c2e60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07c2e5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1xvg3w8                        0x000055e553008811 <unavailable> + 6161

    5    libc.so.6                          0x00002b07c3355460 __libc_start_main +
    245

    6    tmpf1xvg3w8                        0x000055e5530081c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    // Create an empty set to hold unique numbers.\n    var uniqueNumbers\
    \ = Set<Int>()\n    \n    // Loop through the input numbers, adding each unique\
    \ number to the set.\n    for number in numbers {\n        uniqueNumbers.insert(number)\n\
    \    }\n    \n    // Create an empty array to hold the output numbers.\n    var\
    \ newNumbers = [Int]()\n    \n    // Loop through the set of unique numbers, adding\
    \ each number to the output array.\n    for number in uniqueNumbers {\n      \
    \  newNumbers.append(number)\n    }\n    \n    // Return the output array.\n \
    \   return newNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpqsrcs6o0/tmpqsrcs6o0.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6b737ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6b7071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6b7071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6b70707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsrcs6o0                        0x000055e06db3392d <unavailable> + 6445

    5    libc.so.6                          0x00002af6b7566460 __libc_start_main +
    245

    6    tmpqsrcs6o0                        0x000055e06db33449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var sorted = numbers.sorted()\n    var to_delete = [Int]()\n    var previous:\
    \ Int? = nil\n    for n in sorted {\n        if n == previous {\n            to_delete.append(n)\n\
    \        }\n        previous = n\n    }\n    return sorted.filter {!to_delete.contains($0)}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let set = Set(numbers)\n    return set.filter { (number) -> Bool in\n\
    \        return numbers.filter { (num) -> Bool in\n            return num == number\n\
    \        }.count == 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp5coag3lk/tmp5coag3lk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b566edd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b566eacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b566eacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b566eace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5coag3lk                        0x00005585edf7f71d <unavailable> + 5917

    5    libc.so.6                          0x00002b566efc4460 __libc_start_main +
    245

    6    tmp5coag3lk                        0x00005585edf7f239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var arr = numbers\n    var dict = [Int: Int]()\n    for number in arr\
    \ {\n        if dict[number] == nil {\n            dict[number] = 1\n        }\
    \ else {\n            dict[number]! += 1\n        }\n    }\n    arr = arr.filter\
    \ { dict[$0] == 1 }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var list: [Int] = []\n    for i in numbers {\n        if list.contains(i)\
    \ {\n            list.removeFirst()\n        } else {\n            list.append(i)\n\
    \        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9jnro18n/tmp9jnro18n.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44dbb18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44db80fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44db80f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44db80e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jnro18n                        0x000055ca7ac038e1 <unavailable> + 6369

    5    libc.so.6                          0x00002b44dbd04460 __libc_start_main +
    245

    6    tmp9jnro18n                        0x000055ca7ac03299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var nums = numbers\n  nums.sort()\n  var result: [Int] = []\n  var previous:\
    \ Int?\n  for number in nums {\n    if number != previous {\n      result.append(number)\n\
    \    }\n    previous = number\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpk9wxdlr4/tmpk9wxdlr4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1b1d1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1b1a15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1b1a15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1b1a147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9wxdlr4                        0x00005590f87c68f1 <unavailable> + 6385

    5    libc.so.6                          0x00002ad1b1f0a460 __libc_start_main +
    245

    6    tmpk9wxdlr4                        0x00005590f87c62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let set = Set(numbers)\n    return Array(set)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpfzs1hln3/tmpfzs1hln3.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23d1082c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23d0d79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23d0d79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23d0d787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzs1hln3                        0x000056496cce160d <unavailable> + 5645

    5    libc.so.6                          0x00002b23d126e460 __libc_start_main +
    245

    6    tmpfzs1hln3                        0x000056496cce1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // COMPLETE ME\n    return [Int]()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp29ov33d_/tmp29ov33d_.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9f7c48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9f793fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9f793f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9f793e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29ov33d_                        0x000055c34a13b50d <unavailable> + 5389

    5    libc.so.6                          0x00002ae9f7e34460 __libc_start_main +
    245

    6    tmp29ov33d_                        0x000055c34a13b029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var results: [Int] = []\n    for number in numbers {\n        if !results.contains(number)\
    \ {\n            results.append(number)\n        }\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp3uc0kxu_/tmp3uc0kxu_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b789cf0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b789cc05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b789cc05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b789cc047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3uc0kxu_                        0x0000555cb8528841 <unavailable> + 6209

    5    libc.so.6                          0x00002b789d0fa460 __libc_start_main +
    245

    6    tmp3uc0kxu_                        0x0000555cb85281f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var set = Set<Int>()\n    for number in numbers\
    \ {\n        if set.contains(number) {\n            continue\n        }\n    \
    \    result.append(number)\n        set.insert(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp44maqtt0/tmp44maqtt0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba81641bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba816112b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba816112988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8161117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44maqtt0                        0x000055648b8ca981 <unavailable> + 6529

    5    libc.so.6                          0x00002ba816607460 __libc_start_main +
    245

    6    tmp44maqtt0                        0x000055648b8ca339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    let count_dictionary = numbers.reduce(into:\
    \ [:]) { count, number in\n        count[number, default: 0] += 1\n    }\n   \
    \ for (number, count) in count_dictionary {\n        if count == 1 {\n       \
    \     result.append(number)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpu7yzmt26/tmpu7yzmt26.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842e31fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b842e016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b842e016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b842e0157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7yzmt26                        0x0000564427eca8dd <unavailable> + 6365

    5    libc.so.6                          0x00002b842e50b460 __libc_start_main +
    245

    6    tmpu7yzmt26                        0x0000564427eca3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var counts: [Int: Int] = [:]\n  numbers.forEach { counts[$0] = (counts[$0]\
    \ ?? 0) + 1 }\n  return numbers.filter { counts[$0] == 1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dictionary = [Int: Int]()\n    for (index, value) in numbers.enumerated()\
    \ {\n        dictionary[value] = (dictionary[value] ?? 0) + 1\n    }\n    var\
    \ result = [Int]()\n    for number in numbers {\n        if dictionary[number]\
    \ == 1 {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict: [Int: Int] = [:]\n    numbers.forEach { dict[$0] = (dict[$0]\
    \ ?? 0) + 1 }\n    return numbers.filter { dict[$0] == 1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmps7ilo_s0/tmps7ilo_s0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d2926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7ilo_s0                        0x000056386a3e1891 <unavailable> + 6289

    5    libc.so.6                          0x00002b69d2b12460 __libc_start_main +
    245

    6    tmps7ilo_s0                        0x000056386a3e1249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    var numbersUniques = [Int]()\n    for number\
    \ in numbers {\n        if !uniques.contains(number) {\n            uniques.append(number)\n\
    \            numbersUniques.append(number)\n        }\n    }\n    return numbersUniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpjro2dqk0/tmpjro2dqk0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80091bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba800612b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba800612988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8006117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjro2dqk0                        0x0000562676945891 <unavailable> + 6289

    5    libc.so.6                          0x00002ba800b07460 __libc_start_main +
    245

    6    tmpjro2dqk0                        0x0000562676945249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var tracker: [Int: Int] = [:]\n    for number\
    \ in numbers {\n        if tracker[number] == nil {\n            tracker[number]\
    \ = 1\n            result.append(number)\n        } else {\n            tracker[number]!\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpfj2b_y7_/tmpfj2b_y7_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb98322c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb98019b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb98019988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb980187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfj2b_y7_                        0x00005629ebf4da01 <unavailable> + 6657

    5    libc.so.6                          0x00002afb9850e460 __libc_start_main +
    245

    6    tmpfj2b_y7_                        0x00005629ebf4d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n    var seen = Set<Int>()\n    for num in numbers\
    \ {\n        if !seen.contains(num) {\n            output.append(num)\n      \
    \      seen.insert(num)\n        }\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl5ew2kl4/tmpl5ew2kl4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b13d5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b13a55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b13a55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b13a547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5ew2kl4                        0x00005565b3366981 <unavailable> + 6529

    5    libc.so.6                          0x00002b9b13f4a460 __libc_start_main +
    245

    6    tmpl5ew2kl4                        0x00005565b3366339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    let reduced = numbers.reduce(into: [:]) { counts, number in counts[number,\
    \ default: 0] += 1 }\n    return numbers.filter { reduced[$0] == 1 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    var uniques = [Int]()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            uniques.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return uniques\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpu2aeceti/tmpu2aeceti.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3829ea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3829b9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3829b9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3829b9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2aeceti                        0x0000561546521981 <unavailable> + 6529

    5    libc.so.6                          0x00002b382a093460 __libc_start_main +
    245

    6    tmpu2aeceti                        0x0000561546521339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let sortedNumbers = numbers.sorted()\n    var newArray: [Int] = []\n\
    \    var lastElement: Int = 0\n    var secondLastElement: Int = 0\n    for number\
    \ in sortedNumbers {\n        if number != lastElement {\n            if number\
    \ != secondLastElement {\n                newArray.append(number)\n          \
    \  }\n            secondLastElement = lastElement\n            lastElement = number\n\
    \        }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp8g3o5z8g/tmp8g3o5z8g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870e3a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870e099b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870e099988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870e0987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8g3o5z8g                        0x0000558961ec0881 <unavailable> + 6273

    5    libc.so.6                          0x00002b870e58e460 __libc_start_main +
    245

    6    tmp8g3o5z8g                        0x0000558961ec0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict = [Int: Int]()\n    var result = [Int]()\n    for n in numbers\
    \ {\n        dict[n] = dict[n, default: 0] + 1\n    }\n    for n in numbers {\n\
    \        if dict[n] == 1 {\n            result.append(n)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var ret = [Int]()\n    var dict = [Int: Int]()\n    for n in numbers\
    \ {\n        dict[n] = (dict[n] ?? 0) + 1\n    }\n    for k in dict.keys {\n \
    \       if dict[k] == 1 {\n            ret.append(k)\n        }\n    }\n    return\
    \ ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp61ht41ib/tmp61ht41ib.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4195a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4195760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4195760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b419575f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61ht41ib                        0x000055ddecb509cd <unavailable> + 6605

    5    libc.so.6                          0x00002b4195c55460 __libc_start_main +
    245

    6    tmp61ht41ib                        0x000055ddecb504e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp7yd4zn48/tmp7yd4zn48.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e46753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4644ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4644a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e464497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yd4zn48                        0x000055dee3ee14ad <unavailable> + 5293

    5    libc.so.6                          0x00002b5e4693f460 __libc_start_main +
    245

    6    tmp7yd4zn48                        0x000055dee3ee0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var arr = [Int]()\n    for (key, value) in numbers.enumerated() {\n \
    \       if key == numbers.index(of: value) {\n            arr.append(value)\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpgn6diz39/tmpgn6diz39.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1cca73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1cc76ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1cc76a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1cc7697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgn6diz39                        0x000055d0c5a81981 <unavailable> + 6529

    5    libc.so.6                          0x00002ab1ccc5f460 __libc_start_main +
    245

    6    tmpgn6diz39                        0x000055d0c5a81339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var result = [Int]()\n  var found = Set<Int>()\n  var dupes = Set<Int>()\n\
    \  for n in numbers {\n    if !found.contains(n) {\n      found.insert(n)\n  \
    \    result.append(n)\n    } else {\n      dupes.insert(n)\n    }\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp0pu304ya/tmp0pu304ya.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b448abb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b448a8acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b448a8ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b448a8ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0pu304ya                        0x000055fd3eb69981 <unavailable> + 6529

    5    libc.so.6                          0x00002b448ada1460 __libc_start_main +
    245

    6    tmp0pu304ya                        0x000055fd3eb69339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var dict: [Int: Int] = [:]\n    for number\
    \ in numbers {\n        dict[number] = (dict[number] ?? 0) + 1\n    }\n    for\
    \ number in numbers {\n        if dict[number]! < 2 {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueArray = [Int]()\n    for element in numbers {\n        if !uniqueArray.contains(element)\
    \ {\n            uniqueArray.append(element)\n        }\n    }\n    return uniqueArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpoubhamj7/tmpoubhamj7.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b775a183c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7759e7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7759e7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7759e797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoubhamj7                        0x00005614f745b891 <unavailable> + 6289

    5    libc.so.6                          0x00002b775a36f460 __libc_start_main +
    245

    6    tmpoubhamj7                        0x00005614f745b249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  // Your solution here\n  var numbersSet = Set<Int>()\n  var numbersNoDuplicates\
    \ = [Int]()\n  for number in numbers {\n    if !numbersSet.contains(number) {\n\
    \      numbersSet.insert(number)\n      numbersNoDuplicates.append(number)\n \
    \   }\n  }\n  return numbersNoDuplicates\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpwjftn5rl/tmpwjftn5rl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5095b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5092afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5092af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5092ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjftn5rl                        0x00005650f5e36981 <unavailable> + 6529

    5    libc.so.6                          0x00002ba5097a4460 __libc_start_main +
    245

    6    tmpwjftn5rl                        0x00005650f5e36339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for num in numbers {\n        if !unique.contains(num)\
    \ {\n            unique.append(num)\n        }\n    }\n    return unique\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpt0zxxfj_/tmpt0zxxfj_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9c5741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9c5438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9c5438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9c54377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0zxxfj_                        0x000056425c9a9891 <unavailable> + 6289

    5    libc.so.6                          0x00002ba9c592d460 __libc_start_main +
    245

    6    tmpt0zxxfj_                        0x000056425c9a9249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var existNumbers: [Int] = []\n    numbers.forEach\
    \ { number in\n        if !existNumbers.contains(number) {\n            existNumbers.append(number)\n\
    \            result.append(number)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6_za9c7r/tmp6_za9c7r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad20e13dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad20de34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad20de34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad20de337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_za9c7r                        0x000055fe6525b741 <unavailable> + 5953

    5    libc.so.6                          0x00002ad20e329460 __libc_start_main +
    245

    6    tmp6_za9c7r                        0x000055fe6525b0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmps7ilo_s0/tmps7ilo_s0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d2926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7ilo_s0                        0x000056386a3e1891 <unavailable> + 6289

    5    libc.so.6                          0x00002b69d2b12460 __libc_start_main +
    245

    6    tmps7ilo_s0                        0x000056386a3e1249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbersSet = Set<Int>()\n    var numbersList = [Int]()\n    for n\
    \ in numbers {\n        if !numbersSet.contains(n) {\n            numbersSet.insert(n)\n\
    \            numbersList.append(n)\n        }\n    }\n    return numbersList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpptx_ocw8/tmpptx_ocw8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2b8b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2b8824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2b8824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2b88237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptx_ocw8                        0x0000558e44608981 <unavailable> + 6529

    5    libc.so.6                          0x00002ac2b8d19460 __libc_start_main +
    245

    6    tmpptx_ocw8                        0x0000558e44608339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var count = [Int: Int]()\n    for number in\
    \ numbers {\n        count[number] = (count[number] ?? 0) + 1\n    }\n    for\
    \ number in numbers {\n        if count[number] == 1 {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var array: [Int] = []\n    var dictionary: [Int: Int] = [:]\n    for\
    \ number in numbers {\n        if let oldValue = dictionary[number] {\n      \
    \      dictionary[number] = oldValue + 1\n        } else {\n            dictionary[number]\
    \ = 1\n        }\n    }\n    for number in numbers {\n        if dictionary[number]\
    \ == 1 {\n            array.append(number)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique_ints = [Int]()\n    var appeared_ints = [Int]()\n    for number\
    \ in numbers {\n        if !appeared_ints.contains(number) {\n            unique_ints.append(number)\n\
    \            appeared_ints.append(number)\n        }\n    }\n    return unique_ints\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpfqfx66wm/tmpfqfx66wm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b928f8e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b928f5d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b928f5d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b928f5d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfqfx66wm                        0x000055f75dda0891 <unavailable> + 6289

    5    libc.so.6                          0x00002b928facd460 __libc_start_main +
    245

    6    tmpfqfx66wm                        0x000055f75dda0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var duplicates: [Int] = []\n    for number\
    \ in numbers {\n        if duplicates.contains(number) {\n            continue\n\
    \        }\n        if result.contains(number) {\n            duplicates.append(number)\n\
    \            continue\n        }\n        result.append(number)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp3c5j8bw5/tmp3c5j8bw5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c69ccec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c699c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c699c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c699c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3c5j8bw5                        0x000055a690826841 <unavailable> + 6209

    5    libc.so.6                          0x00002b8c69eba460 __libc_start_main +
    245

    6    tmp3c5j8bw5                        0x000055a6908261f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var occurrences = [Int: Int]()\n    for i in numbers {\n        if occurrences[i]\
    \ == nil {\n            occurrences[i] = 1\n        } else {\n            occurrences[i]!\
    \ += 1\n        }\n    }\n    var result = [Int]()\n    for number in numbers\
    \ {\n        if occurrences[number] == 1 {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce(into: [Int]()) { (result, number) in\n        if\
    \ !result.contains(number) {\n            result.append(number)\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpa72gn8j4/tmpa72gn8j4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66f9a5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66f9752b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66f9752988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66f97517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa72gn8j4                        0x000055f8e24e67a1 <unavailable> + 6049

    5    libc.so.6                          0x00002b66f9c47460 __libc_start_main +
    245

    6    tmpa72gn8j4                        0x000055f8e24e6159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var appearedNumbers = Set<Int>()\n    for number\
    \ in numbers {\n        if !appearedNumbers.contains(number) {\n            result.append(number)\n\
    \            appearedNumbers.insert(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpje6a6isq/tmpje6a6isq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b876053cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8760233b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8760233988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87602327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpje6a6isq                        0x0000555d4a62f981 <unavailable> + 6529

    5    libc.so.6                          0x00002b8760728460 __libc_start_main +
    245

    6    tmpje6a6isq                        0x0000555d4a62f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var counts: [Int: Int] = [:]\n  var removed: [Int] = []\n  for number in\
    \ numbers {\n    counts[number] = (counts[number] ?? 0) + 1\n  }\n  for number\
    \ in numbers {\n    if counts[number] == 1 {\n      removed.append(number)\n \
    \   }\n  }\n  return removed\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    let numberDict = Dictionary(grouping: numbers, by: { $0 })\n  \
    \  let filtered = numberDict.filter({ $0.value.count == 1 })\n    let values =\
    \ filtered.map({ $0.value })\n    let result = values.flatMap { $0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpx8lyahu6/tmpx8lyahu6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b60ebdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b60bb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b60bb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b60bb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8lyahu6                        0x000055636857e75d <unavailable> + 5981

    5    libc.so.6                          0x00002b0b610a9460 __libc_start_main +
    245

    6    tmpx8lyahu6                        0x000055636857e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var dict = [Int: Bool]()\n    for number in\
    \ numbers {\n        if dict[number] == nil {\n            dict[number] = true\n\
    \            result.append(number)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp74fezuz1/tmp74fezuz1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94ab07ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94aad75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94aad75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94aad747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74fezuz1                        0x000055ec08c63991 <unavailable> + 6545

    5    libc.so.6                          0x00002b94ab26a460 __libc_start_main +
    245

    6    tmp74fezuz1                        0x000055ec08c63349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbers_set = Set<Int>()\n    var result = [Int]()\n    for n in\
    \ numbers {\n        if !numbers_set.contains(n) {\n            numbers_set.insert(n)\n\
    \            result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpnw5zjjb8/tmpnw5zjjb8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b726cc9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b726c991b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b726c991988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b726c9907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnw5zjjb8                        0x000055f8cb46f981 <unavailable> + 6529

    5    libc.so.6                          0x00002b726ce86460 __libc_start_main +
    245

    6    tmpnw5zjjb8                        0x000055f8cb46f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var nums = [Int: Bool]()\n    for n in numbers {\n        nums[n] = true\n\
    \    }\n    return Array(nums.keys)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpcu4018hm/tmpcu4018hm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35c59dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af35c294b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af35c294988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af35c2937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcu4018hm                        0x000055a45a2d487d <unavailable> + 6269

    5    libc.so.6                          0x00002af35c789460 __libc_start_main +
    245

    6    tmpcu4018hm                        0x000055a45a2d4399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbersCopy = numbers\n    var duplicates: [Int] = []\n    for value\
    \ in numbers {\n        if numbersCopy.contains(value) {\n            numbersCopy.removeFirst()\n\
    \        } else {\n            duplicates.append(value)\n        }\n    }\n  \
    \  return duplicates\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpupzrjilf/tmpupzrjilf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b259917bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2598e72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2598e72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2598e717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpupzrjilf                        0x0000564686bc477d <unavailable> + 6013

    5    libc.so.6                          0x00002b2599367460 __libc_start_main +
    245

    6    tmpupzrjilf                        0x0000564686bc4299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    //build set of unique numbers\n    var unique: Set<Int> = []\n    for\
    \ num in numbers {\n        unique.insert(num)\n    }\n    //build array from\
    \ the set, keeping the order\n    var result: [Int] = []\n    for num in numbers\
    \ {\n        if (unique.contains(num)) {\n            result.append(num)\n   \
    \         unique.remove(num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpmrums3lu/tmpmrums3lu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afba212ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afba1e21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afba1e21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afba1e207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrums3lu                        0x00005632a97e1991 <unavailable> + 6545

    5    libc.so.6                          0x00002afba2316460 __libc_start_main +
    245

    6    tmpmrums3lu                        0x00005632a97e1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.filter { (value) -> Bool in\n        return numbers.filter\
    \ { $0 == value }.count == 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var set = Set<Int>()\n    for number in numbers\
    \ {\n        if !set.contains(number) {\n            result.append(number)\n \
    \           set.insert(number)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp1b5kc4ue/tmp1b5kc4ue.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b082771dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0827414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0827414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08274137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1b5kc4ue                        0x0000563f5697f981 <unavailable> + 6529

    5    libc.so.6                          0x00002b0827909460 __libc_start_main +
    245

    6    tmp1b5kc4ue                        0x0000563f5697f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var visited = [Int]()\n    var result = [Int]()\n    for number in numbers\
    \ {\n        if (!visited.contains(number)) {\n            visited.append(number)\n\
    \            result.append(number)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmprpn56ezp/tmprpn56ezp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5116242c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5115f39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5115f39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5115f387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpn56ezp                        0x0000561a37f30891 <unavailable> + 6289

    5    libc.so.6                          0x00002b511642e460 __libc_start_main +
    245

    6    tmprpn56ezp                        0x0000561a37f30249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict = [Int:Int]()\n    numbers.forEach { dict[$0] = dict[$0, default:\
    \ 0] + 1 }\n    return dict.filter { $0.value == 1 }.map { $0.key }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp1m7s70hw/tmp1m7s70hw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5983cb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59839adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59839ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59839ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1m7s70hw                        0x00005607fb00476d <unavailable> + 5997

    5    libc.so.6                          0x00002b5983ea2460 __libc_start_main +
    245

    6    tmp1m7s70hw                        0x00005607fb004289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = Set<Int>()\n    var uniqueNumbersArray = [Int]()\n\
    \    for number in numbers {\n        if !uniqueNumbers.contains(number) {\n \
    \           uniqueNumbers.insert(number)\n            uniqueNumbersArray.append(number)\n\
    \        }\n    }\n    return uniqueNumbersArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6ggx_9l3/tmp6ggx_9l3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8d409bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8d3d92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8d3d92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8d3d917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ggx_9l3                        0x000055828c219981 <unavailable> + 6529

    5    libc.so.6                          0x00002ab8d4287460 __libc_start_main +
    245

    6    tmp6ggx_9l3                        0x000055828c219339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var array = [Int]()\n    for number in numbers\
    \ {\n        if array.contains(number) {\n            continue\n        }\n  \
    \      array.append(number)\n        result.append(number)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpf4v0gkl1/tmpf4v0gkl1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b6b0fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b6adf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b6adf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b6adf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4v0gkl1                        0x0000564d4f713891 <unavailable> + 6289

    5    libc.so.6                          0x00002b0b6b2e9460 __libc_start_main +
    245

    6    tmpf4v0gkl1                        0x0000564d4f713249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    var result = [Int]()\n    for number in numbers\
    \ {\n        if !set.contains(number) {\n            set.insert(number)\n    \
    \        result.append(number)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpdncx905c/tmpdncx905c.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa6483ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa64531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa64531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa645307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdncx905c                        0x000055d2e4df7981 <unavailable> + 6529

    5    libc.so.6                          0x00002afa64a26460 __libc_start_main +
    245

    6    tmpdncx905c                        0x000055d2e4df7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    var distinct = [Int]()\n    for number in\
    \ numbers {\n        if !seen.contains(number) {\n            seen.insert(number)\n\
    \            distinct.append(number)\n        }\n    }\n    return distinct\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpbjydq7l6/tmpbjydq7l6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01b18f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01b15e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01b15e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01b15e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjydq7l6                        0x00005646f7f22981 <unavailable> + 6529

    5    libc.so.6                          0x00002b01b1ade460 __libc_start_main +
    245

    6    tmpbjydq7l6                        0x00005646f7f22339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var ary = numbers\n    var n = ary.count\n    var i = 0\n    var j =\
    \ 1\n    while (i < n - 1) {\n        while (j < n) {\n            if (ary[i]\
    \ == ary[j]) {\n                var k = j\n                while (k < n - 1) {\n\
    \                    ary[k] = ary[k + 1]\n                    k += 1\n       \
    \         }\n                n -= 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        i += 1\n        j = i + 1\n    }\n    return\
    \ ary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpd1zzena1/tmpd1zzena1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaff7a2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaff7726b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaff7726988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaff77257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1zzena1                        0x00005620fe367711 <unavailable> + 5905

    5    libc.so.6                          0x00002aaff7c1b460 __libc_start_main +
    245

    6    tmpd1zzena1                        0x00005620fe3670c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var filteredNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !filteredNumbers.contains(number) {\n            filteredNumbers.append(number)\n\
    \        }\n    }\n    return filteredNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkm7muicj/tmpkm7muicj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298b87dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298b574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298b574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298b5737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm7muicj                        0x000055db47804891 <unavailable> + 6289

    5    libc.so.6                          0x00002b298ba69460 __libc_start_main +
    245

    6    tmpkm7muicj                        0x000055db47804249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var toReturn: [Int] = []\n    var x: Int = 0\n    var y: Int = 0\n  \
    \  while x < numbers.count {\n        while y < numbers.count {\n            if\
    \ numbers[x] == numbers[y] && x != y {\n                y = numbers.count\n  \
    \          }\n            else if y == numbers.count - 1 {\n                toReturn.append(numbers[x])\n\
    \            }\n            y += 1\n        }\n        x += 1\n        y = 0\n\
    \    }\n    return toReturn\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if result.contains(number)\
    \ {\n            continue\n        }\n        result.append(number)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp_fdmovky/tmp_fdmovky.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ff626c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ff31db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ff31d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ff31c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_fdmovky                        0x00005621a50c8841 <unavailable> + 6209

    5    libc.so.6                          0x00002b90ff812460 __libc_start_main +
    245

    6    tmp_fdmovky                        0x00005621a50c81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpd7w3kno_/tmpd7w3kno_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1654087c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1653d7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1653d7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1653d7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7w3kno_                        0x000055f3e9b2b891 <unavailable> + 6289

    5    libc.so.6                          0x00002b1654273460 __libc_start_main +
    245

    6    tmpd7w3kno_                        0x000055f3e9b2b249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueArray: [Int] = []\n    for number in numbers {\n        if\
    \ uniqueArray.contains(number) {\n            uniqueArray.removeAll(where: {$0\
    \ == number})\n        } else {\n            uniqueArray.append(number)\n    \
    \    }\n    }\n    return uniqueArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for num in numbers {\n        if !result.contains(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp2gz6knmt/tmp2gz6knmt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae595bdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5958d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5958d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5958d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gz6knmt                        0x000056120c08e841 <unavailable> + 6209

    5    libc.so.6                          0x00002ae595dc8460 __libc_start_main +
    245

    6    tmp2gz6knmt                        0x000056120c08e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var flag: [Int] = []\n    for item in numbers\
    \ {\n        if !flag.contains(item) {\n            result.append(item)\n    \
    \        flag.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp0q3vjxkp/tmp0q3vjxkp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26059acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26056a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26056a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26056a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q3vjxkp                        0x000055c4274de841 <unavailable> + 6209

    5    libc.so.6                          0x00002b2605b98460 __libc_start_main +
    245

    6    tmp0q3vjxkp                        0x000055c4274de1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var numbersSet = Set<Int>()\n  var result = [Int]()\n  for number in numbers\
    \ {\n    if !numbersSet.contains(number) {\n      result.append(number)\n    \
    \  numbersSet.insert(number)\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpbx58niw7/tmpbx58niw7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad009d6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad009a64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad009a64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad009a637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbx58niw7                        0x00005625555d5981 <unavailable> + 6529

    5    libc.so.6                          0x00002ad009f59460 __libc_start_main +
    245

    6    tmpbx58niw7                        0x00005625555d5339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6vc21ax5/tmp6vc21ax5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0e310c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0e007b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a0e007988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a0e0067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vc21ax5                        0x000055e8a3d28891 <unavailable> + 6289

    5    libc.so.6                          0x00002b6a0e4fc460 __libc_start_main +
    245

    6    tmp6vc21ax5                        0x000055e8a3d28249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict: [Int: Int] = [:]\n    for n in numbers {\n        dict[n] =\
    \ dict[n, default: 0] + 1\n    }\n    return dict.filter { $0.value == 1 }.map\
    \ { $0.key }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmphjbdv2lu/tmphjbdv2lu.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eb2b75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eb286cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eb286c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eb286b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphjbdv2lu                        0x0000562ba8ca888d <unavailable> + 6285

    5    libc.so.6                          0x00002b3eb2d61460 __libc_start_main +
    245

    6    tmphjbdv2lu                        0x0000562ba8ca83a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let groups = Dictionary(grouping: numbers, by: { $0 })\n    let filteredGroups\
    \ = groups.filter { $0.value.count == 1 }\n    let keys = filteredGroups.map {\
    \ $0.key }\n    return keys\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpke8y1oc_/tmpke8y1oc_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad40544fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad405146b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad405146988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4051457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke8y1oc_                        0x000055d6101c56ed <unavailable> + 5869

    5    libc.so.6                          0x00002ad40563b460 __libc_start_main +
    245

    6    tmpke8y1oc_                        0x000055d6101c5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    guard numbers.count > 0 else { return [] }\n    var copy = numbers\n\
    \    copy.sort()\n    var result = [Int]()\n    result.append(copy[0])\n    for\
    \ i in 1..<copy.count {\n        if copy[i] != copy[i - 1] {\n            result.append(copy[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpqqfxua6g/tmpqqfxua6g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46b5821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46b5518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46b5518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46b55177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqfxua6g                        0x0000555e9b9baa21 <unavailable> + 6689

    5    libc.so.6                          0x00002b46b5a0d460 __libc_start_main +
    245

    6    tmpqqfxua6g                        0x0000555e9b9ba3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var newArray = [Int]()\n    for number in numbers {\n        if !newArray.contains(number)\
    \ {\n            newArray.append(number)\n        }\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpawnpqodg/tmpawnpqodg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1418c71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1418968b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1418968988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14189677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawnpqodg                        0x000055a61f342891 <unavailable> + 6289

    5    libc.so.6                          0x00002b1418e5d460 __libc_start_main +
    245

    6    tmpawnpqodg                        0x000055a61f342249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var mutableNumbers = numbers\n    var result : [Int] = []\n   \
    \ \n    for number in mutableNumbers {\n        let count = mutableNumbers.filter\
    \ { $0 == number }.count\n        if count == 1 {\n            result.append(number)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // Complete\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpc29ghf8r/tmpc29ghf8r.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc01185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc00e7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc00e7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc00e7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc29ghf8r                        0x00005617964764ad <unavailable> + 5293

    5    libc.so.6                          0x00002abc01371460 __libc_start_main +
    245

    6    tmpc29ghf8r                        0x0000561796475fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var set: Set<Int> = []\n    for n in numbers\
    \ {\n        if !set.contains(n) {\n            result.append(n)\n           \
    \ set.insert(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpm7_wzocv/tmpm7_wzocv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac33b484c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac33b17bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac33b17b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac33b17a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7_wzocv                        0x00005609c6070941 <unavailable> + 6465

    5    libc.so.6                          0x00002ac33b670460 __libc_start_main +
    245

    6    tmpm7_wzocv                        0x00005609c60702f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var histogram = [Int: Int]()\n    for number\
    \ in numbers {\n        histogram[number] = (histogram[number] ?? 0) + 1\n   \
    \ }\n    for number in numbers {\n        if histogram[number] == 1 {\n      \
    \      result.append(number)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let unique = Set(numbers)\n    return Array(unique)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp3dhcctcy/tmp3dhcctcy.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b235f3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235f0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b235f0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b235f0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dhcctcy                        0x00005629b46e2771 <unavailable> + 6001

    5    libc.so.6                          0x00002b235f5e7460 __libc_start_main +
    245

    6    tmp3dhcctcy                        0x00005629b46e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // Implement your solution here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpn3yoqccl/tmpn3yoqccl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3d0359c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3d0050b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3d0050988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3d004f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3yoqccl                        0x0000559db77cd4ad <unavailable> + 5293

    5    libc.so.6                          0x00002ae3d0545460 __libc_start_main +
    245

    6    tmpn3yoqccl                        0x0000559db77ccfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dic = [Int: Int]()\n    for num in numbers {\n        dic[num] =\
    \ (dic[num] ?? 0) + 1\n    }\n    return numbers.filter { dic[$0]! == 1 }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dict = [Int: Int]()\n    numbers.forEach { dict[$0] = (dict[$0] ??\
    \ 0) + 1 }\n    return dict.filter { $0.value == 1 }.map { $0.key }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9bwiigdu/tmp9bwiigdu.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60f367cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60f3373b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60f3373988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60f33727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9bwiigdu                        0x0000559709b5f75d <unavailable> + 5981

    5    libc.so.6                          0x00002b60f3868460 __libc_start_main +
    245

    6    tmp9bwiigdu                        0x0000559709b5f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for x in numbers {\n        if !unique.contains(x)\
    \ {\n            unique.append(x)\n        }\n    }\n    return unique\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpe_5bp4ck/tmpe_5bp4ck.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4936560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4936257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4936257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49362567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_5bp4ck                        0x000055ec5ec01891 <unavailable> + 6289

    5    libc.so.6                          0x00002b493674c460 __libc_start_main +
    245

    6    tmpe_5bp4ck                        0x000055ec5ec01249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var isDup = false\n    for number in numbers\
    \ {\n        for resultNumber in result {\n            if number == resultNumber\
    \ {\n                isDup = true\n                break\n            }\n    \
    \    }\n        if !isDup {\n            result.append(number)\n        }\n  \
    \      isDup = false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpdyfkyy7k/tmpdyfkyy7k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4990974c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b499066bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b499066b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b499066a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyfkyy7k                        0x000055d6d180d831 <unavailable> + 6193

    5    libc.so.6                          0x00002b4990b60460 __libc_start_main +
    245

    6    tmpdyfkyy7k                        0x000055d6d180d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let set = Set(numbers)\n    let sorted_set = set.sorted()\n    return\
    \ sorted_set\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpyjwjeb6k/tmpyjwjeb6k.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dd24b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dd21b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dd21b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dd21af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyjwjeb6k                        0x000055d6a2bc97a1 <unavailable> + 6049

    5    libc.so.6                          0x00002b4dd26a5460 __libc_start_main +
    245

    6    tmpyjwjeb6k                        0x000055d6a2bc9159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dictionary = [Int: Int]()\n    for number in numbers {\n        if\
    \ let count = dictionary[number] {\n            dictionary[number] = count + 1\n\
    \        } else {\n            dictionary[number] = 1\n        }\n    }\n    var\
    \ newArray = [Int]()\n    for number in numbers {\n        if let count = dictionary[number],\
    \ count == 1 {\n            newArray.append(number)\n        }\n    }\n    return\
    \ newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for value in numbers {\n        if !result.contains(value)\
    \ {\n            result.append(value)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpjlfdpxbr/tmpjlfdpxbr.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac059a9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac059794b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac059794988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0597937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjlfdpxbr                        0x000055ad9ddf5891 <unavailable> + 6289

    5    libc.so.6                          0x00002ac059c89460 __libc_start_main +
    245

    6    tmpjlfdpxbr                        0x000055ad9ddf5249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var count_dict = [Int: Int]()\n    for number\
    \ in numbers {\n        count_dict[number] = (count_dict[number] ?? 0) + 1\n \
    \   }\n    for number in numbers {\n        if count_dict[number] == 1 {\n   \
    \         result.append(number)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    var result = [Int]()\n    for n in numbers\
    \ {\n        if !set.contains(n) {\n            set.insert(n)\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmprhpyn0j9/tmprhpyn0j9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b218361bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2183312b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2183312988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21833117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhpyn0j9                        0x000055738bf7e981 <unavailable> + 6529

    5    libc.so.6                          0x00002b2183807460 __libc_start_main +
    245

    6    tmprhpyn0j9                        0x000055738bf7e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return [1, 3, 4]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpjfycu2p3/tmpjfycu2p3.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43a26b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43a23b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43a23b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43a23af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfycu2p3                        0x0000565124739376 <unavailable> + 4982

    5    libc.so.6                          0x00002b43a28a5460 __libc_start_main +
    245

    6    tmpjfycu2p3                        0x0000565124738fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set: Set<Int> = []\n    var result: [Int] = []\n    for number in\
    \ numbers {\n        if !set.contains(number) {\n            set.insert(number)\n\
    \            result.append(number)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpgegwydlj/tmpgegwydlj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a54932c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a54629b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a54629988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a546287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgegwydlj                        0x0000562275e0a941 <unavailable> + 6465

    5    libc.so.6                          0x00002b0a54b1e460 __libc_start_main +
    245

    6    tmpgegwydlj                        0x0000562275e0a2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var array = [Int]()\n    for i in numbers {\n        if array.count ==\
    \ 0 {\n            array.append(i)\n        } else {\n            if array.contains(i)\
    \ {\n                array.remove(at: array.index(of: i)!)\n            } else\
    \ {\n                array.append(i)\n            }\n        }\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbers_array = [Int]()\n    for num in numbers {\n        if numbers_array.contains(num)\
    \ {\n            continue\n        } else {\n            numbers_array.append(num)\n\
    \        }\n    }\n    return numbers_array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpowpfa2zh/tmpowpfa2zh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae528257c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae527f4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae527f4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae527f4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowpfa2zh                        0x00005602aa7c3891 <unavailable> + 6289

    5    libc.so.6                          0x00002ae528443460 __libc_start_main +
    245

    6    tmpowpfa2zh                        0x00005602aa7c3249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numberSet = Set<Int>()\n    var numberArray = [Int]()\n    for number\
    \ in numbers {\n        if !numberSet.contains(number) {\n            numberSet.insert(number)\n\
    \            numberArray.append(number)\n        }\n    }\n    return numberArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpnw96zn_u/tmpnw96zn_u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae108700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1083f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1083f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1083f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnw96zn_u                        0x0000561ad0654981 <unavailable> + 6529

    5    libc.so.6                          0x00002ae1088ec460 __libc_start_main +
    245

    6    tmpnw96zn_u                        0x0000561ad0654339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    var result: [Int] = []\n    for number\
    \ in numbers {\n        if seen[number] == nil {\n            seen[number] = true\n\
    \            result.append(number)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpiiji0vp9/tmpiiji0vp9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dbfe21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dbfb18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dbfb18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dbfb177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiiji0vp9                        0x000055d47367c961 <unavailable> + 6497

    5    libc.so.6                          0x00002b7dc000d460 __libc_start_main +
    245

    6    tmpiiji0vp9                        0x000055d47367c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var result: [Int] = []\n  var dic: [Int: Bool] = [:]\n  for n in numbers\
    \ {\n    if dic[n] == nil {\n      dic[n] = true\n      result.append(n)\n   \
    \ }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpli4bzz6r/tmpli4bzz6r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7fe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7fe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7fe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7fe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpli4bzz6r                        0x000055ea6b3af961 <unavailable> + 6497

    5    libc.so.6                          0x00002af7fe8df460 __libc_start_main +
    245

    6    tmpli4bzz6r                        0x000055ea6b3af319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let arr = numbers.sorted()\n    var result = [Int]()\n    var index =\
    \ 0\n    while index < arr.count {\n        if index == arr.count - 1 {\n    \
    \        result.append(arr[index])\n            break\n        }\n        if arr[index]\
    \ != arr[index + 1] {\n            result.append(arr[index])\n        }\n    \
    \    index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmputikyo3d/tmputikyo3d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4a8e5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4a8b54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4a8b54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4a8b537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmputikyo3d                        0x000055c1b94e6811 <unavailable> + 6161

    5    libc.so.6                          0x00002af4a9049460 __libc_start_main +
    245

    6    tmputikyo3d                        0x000055c1b94e61c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbersSet = Set<Int>()\n    var numbersList = [Int]()\n    for n\
    \ in numbers {\n        if !numbersSet.contains(n) {\n            numbersSet.insert(n)\n\
    \            numbersList.append(n)\n        }\n    }\n    return numbersList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpptx_ocw8/tmpptx_ocw8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2b8b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2b8824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2b8824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2b88237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptx_ocw8                        0x0000558e44608981 <unavailable> + 6529

    5    libc.so.6                          0x00002ac2b8d19460 __libc_start_main +
    245

    6    tmpptx_ocw8                        0x0000558e44608339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var integers = [Int]()\n    for num in numbers {\n        if integers.contains(num)\
    \ {\n            continue\n        }\n        integers.append(num)\n    }\n  \
    \  return integers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpr_ngothq/tmpr_ngothq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c49b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c46aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c46ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c46ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_ngothq                        0x00005598cfecc891 <unavailable> + 6289

    5    libc.so.6                          0x00002ab1c4ba3460 __libc_start_main +
    245

    6    tmpr_ngothq                        0x00005598cfecc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var arr = [Int]()\n    for number in numbers {\n        if !arr.contains(number)\
    \ {\n            arr.append(number)\n        }\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpm6q9qavu/tmpm6q9qavu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d96f09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d96c00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d96c00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d96bff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6q9qavu                        0x000055af0b0c6891 <unavailable> + 6289

    5    libc.so.6                          0x00002b6d970f5460 __libc_start_main +
    245

    6    tmpm6q9qavu                        0x000055af0b0c6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var dictionary = [Int: Int]()\n    for element in numbers {\n       \
    \ dictionary[element] = (dictionary[element] ?? 0) + 1\n    }\n    var newNumbers\
    \ = [Int]()\n    for element in numbers {\n        if dictionary[element] == 1\
    \ {\n            newNumbers.append(element)\n        }\n    }\n    return newNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // O(n^2)\n    // var numbers = numbers\n    // var idx = 0\n    // while\
    \ idx < numbers.count {\n    //     var del_idx = idx + 1\n    //     while del_idx\
    \ < numbers.count {\n    //         if numbers[idx] == numbers[del_idx] {\n  \
    \  //             numbers.remove(at: del_idx)\n    //         } else {\n    //\
    \             del_idx += 1\n    //         }\n    //     }\n    //     idx +=\
    \ 1\n    // }\n    // return numbers\n\n    // O(n)\n    var numbers_counts =\
    \ [Int: Int]()\n    for num in numbers {\n        if let count = numbers_counts[num]\
    \ {\n            numbers_counts[num] = count + 1\n        } else {\n         \
    \   numbers_counts[num] = 1\n        }\n    }\n    var numbers_counts_filtered\
    \ = [Int: Int]()\n    for (num, count) in numbers_counts {\n        if count ==\
    \ 1 {\n            numbers_counts_filtered[num] = count\n        }\n    }\n  \
    \  return Array(numbers_counts_filtered.keys)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpjyr6nz4l/tmpjyr6nz4l.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38d78c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38d75bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38d75bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38d75ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjyr6nz4l                        0x00005574ee723a0d <unavailable> + 6669

    5    libc.so.6                          0x00002b38d7ab0460 __libc_start_main +
    245

    6    tmpjyr6nz4l                        0x00005574ee723529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in numbers\
    \ {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    for key in dict.keys\
    \ {\n        if dict[key] == 1 {\n            result.append(key)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpxoe2lcxj/tmpxoe2lcxj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b324537bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3245072b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3245072988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32450717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxoe2lcxj                        0x00005648991619cd <unavailable> + 6605

    5    libc.so.6                          0x00002b3245567460 __libc_start_main +
    245

    6    tmpxoe2lcxj                        0x00005648991614e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce(into: [Int]()) { results, number in\n        if\
    \ !results.contains(number) {\n            results.append(number)\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpte37yfqv/tmpte37yfqv.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf25ef6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf25bedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf25bed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf25bec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpte37yfqv                        0x000055b24d8c27a1 <unavailable> + 6049

    5    libc.so.6                          0x00002adf260e2460 __libc_start_main +
    245

    6    tmpte37yfqv                        0x000055b24d8c2159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var array: [Int] = []\n    var dict: [Int: Int] = [:]\n    for number\
    \ in numbers {\n        if let count = dict[number] {\n            dict[number]\
    \ = count + 1\n        } else {\n            dict[number] = 1\n        }\n   \
    \ }\n    for number in numbers {\n        if dict[number] == 1 {\n           \
    \ array.append(number)\n        }\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    var uniqueNumberCount = 0\n    for number\
    \ in numbers {\n        if uniqueNumbers.contains(number) {\n            continue\n\
    \        }\n        uniqueNumbers.append(number)\n        uniqueNumberCount +=\
    \ 1\n    }\n    uniqueNumbers.sort()\n    return uniqueNumbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9209bapj/tmp9209bapj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fdf3ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fdf0d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fdf0d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fdf0d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9209bapj                        0x000055d88257f9b1 <unavailable> + 6577

    5    libc.so.6                          0x00002b0fdf5c9460 __libc_start_main +
    245

    6    tmp9209bapj                        0x000055d88257f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // Write your solution here\n    var result: [Int] = []\n    for num\
    \ in numbers {\n        if !result.contains(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpa8kihisy/tmpa8kihisy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a090b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a08dadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a08dad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a08dac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa8kihisy                        0x0000556eb11db841 <unavailable> + 6209

    5    libc.so.6                          0x00002b5a092a2460 __libc_start_main +
    245

    6    tmpa8kihisy                        0x0000556eb11db1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    var result = [Int]()\n    for x in numbers\
    \ {\n        if !set.contains(x) {\n            set.insert(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp226l_ntz/tmp226l_ntz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecf2680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecf2377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecf2377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecf23767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp226l_ntz                        0x00005642c1ee3981 <unavailable> + 6529

    5    libc.so.6                          0x00002aecf286c460 __libc_start_main +
    245

    6    tmp226l_ntz                        0x00005642c1ee3339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let uniqueNumbers = Set(numbers)\n    return Array(uniqueNumbers)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp_mye22le/tmp_mye22le.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b84adbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b847d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b847d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b847d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_mye22le                        0x0000563c663ce60d <unavailable> + 5645

    5    libc.so.6                          0x00002b1b84cc7460 __libc_start_main +
    245

    6    tmp_mye22le                        0x0000563c663ce129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpxlz6r2do/tmpxlz6r2do.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3440dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b341037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlz6r2do                        0x0000558101c2a60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7b345f9460 __libc_start_main +
    245

    6    tmpxlz6r2do                        0x0000558101c2a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  return Array(Set(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpal_e54l2/tmpal_e54l2.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b006f2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b006efd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b006efd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b006efd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpal_e54l2                        0x000056538ad01771 <unavailable> + 6001

    5    libc.so.6                          0x00002b006f4cd460 __libc_start_main +
    245

    6    tmpal_e54l2                        0x000056538ad01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979477
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    var result = [Int]()\n    for number in numbers\
    \ {\n        if !set.contains(number) {\n            set.insert(number)\n    \
    \        result.append(number)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpdncx905c/tmpdncx905c.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa6483ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa64531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa64531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa645307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdncx905c                        0x000055d2e4df7981 <unavailable> + 6529

    5    libc.so.6                          0x00002afa64a26460 __libc_start_main +
    245

    6    tmpdncx905c                        0x000055d2e4df7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var remaining = [Int]()\n    for (index, num) in numbers.enumerated()\
    \ {\n        if numbers.index(of: num) == index {\n            remaining.append(num)\n\
    \        }\n    }\n    return remaining\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp40qa3t0y/tmp40qa3t0y.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b350a3b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b350a0a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b350a0a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b350a0a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40qa3t0y                        0x000055c9b5aa2981 <unavailable> + 6529

    5    libc.so.6                          0x00002b350a59e460 __libc_start_main +
    245

    6    tmp40qa3t0y                        0x000055c9b5aa2339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var new_numbers = [Int]()\n    for number in numbers {\n        if !new_numbers.contains(number)\
    \ {\n            new_numbers.append(number)\n        }\n    }\n    return new_numbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpqqgt65x4/tmpqqgt65x4.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1745a81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1745778b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1745778988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17457777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqgt65x4                        0x0000556218853891 <unavailable> + 6289

    5    libc.so.6                          0x00002b1745c6d460 __libc_start_main +
    245

    6    tmpqqgt65x4                        0x0000556218853249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
