language: swift
name: HumanEval_151_double_the_difference
results:
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    var sum: Int = 0\n    for value in lst {\n        if (value.truncatingRemainder(dividingBy:\
    \ 2) != 0 || value == 0) && value > 0 {\n            sum += Int(value) * Int(value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var doubleTheDifference\
    \ = 0\n    for number in lst {\n        if number.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            doubleTheDifference += Int(pow(number, 2))\n        }\n\
    \    }\n    return doubleTheDifference\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkzz2304a.swift:17:40: error: cannot find 'pow' in scope\n     \
    \       doubleTheDifference += Int(pow(number, 2))\n                         \
    \              ^~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv1i2euo6/tmpv1i2euo6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1i2euo6                        0x000055a258fe63e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b8e8a9b5460 __libc_start_main +
    245

    6    tmpv1i2euo6                        0x000055a258fe5fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var ret =\
    \ 0\n    for num in lst {\n        if num > 0 && num == Double(Int(num)) {\n \
    \           ret += Int(num*num)\n        }\n    }\n    return ret\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpy_s8jdrd/tmpy_s8jdrd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86cbf67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86cbc5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86cbc5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86cbc5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_s8jdrd                        0x0000563ae1ebf5e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b86cc153460 __libc_start_main +
    245

    6    tmpy_s8jdrd                        0x0000563ae1ebf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    } else {\n        var lst = lst\n        var lst2:\
    \ [Double] = []\n        for num in lst {\n            if num >= 0 && Double(Int(num))\
    \ == num {\n                lst2.append(num)\n            }\n        }\n     \
    \   lst = lst2\n        var lst3: [Double] = []\n        for num in lst {\n  \
    \          if Double(Int(num)) % 2 == 1 {\n                lst3.append(num)\n\
    \            }\n        }\n        lst = lst3\n        if lst.isEmpty {\n    \
    \        return 0\n        } else {\n            var sum = 0\n            for\
    \ num in lst {\n                sum += Int(num * num)\n            }\n       \
    \     return sum\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmprm6eym2z.swift:27:33: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if Double(Int(num)) % 2\
    \ == 1 {\n                                ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    var result = 0\n    for i in lst {\n        if i >= 0 && i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            result += Int(i * i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return Int(lst.filter({$0\
    \ % 2 == 1}).map({$0 * $0}).reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0y6snpmo.swift:14:31: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    return Int(lst.filter({$0 % 2 ==\
    \ 1}).map({$0 * $0}).reduce(0, +))\n                              ^\nSwift.%:2:13:\
    \ note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs:\
    \ T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result\
    \ = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            result += Int(pow(i, 2))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmtfeexkb.swift:17:27: error: cannot find 'pow' in scope\n     \
    \       result += Int(pow(i, 2))\n                          ^~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv1i2euo6/tmpv1i2euo6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1i2euo6                        0x000055a258fe63e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b8e8a9b5460 __libc_start_main +
    245

    6    tmpv1i2euo6                        0x000055a258fe5fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sumOfOddSquares\
    \ = 0\n    for number in lst {\n        if (number > 0 && number.truncatingRemainder(dividingBy:\
    \ 1) == 0 && number % 2 != 0) {\n            sumOfOddSquares += Int(pow(number,\
    \ 2))\n        }\n    }\n    return sumOfOddSquares\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4sn441wm.swift:16:84: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if (number > 0 && number.truncatingRemainder(dividingBy:\
    \ 1) == 0 && number % 2 != 0) {\n                                            \
    \                                       ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp4sn441wm.swift:17:36: error: cannot find 'pow' in scope\n\
    \            sumOfOddSquares += Int(pow(number, 2))\n                        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for number in lst {\n        if Int(number) == number && number\
    \ >= 0 {\n            sum += Int(number) * Int(number)\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf378gomg.swift:16:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        if Int(number) == number && number\
    \ >= 0 {\n                          ^\n                          Int(  )\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ && i >= 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for number in lst {\n        if !(number.truncatingRemainder(dividingBy:\
    \ 2) == 0) && (number > 0) {\n            sum += Int(pow(number, 2))\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmppk0ijodw.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(number, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Your solution\
    \ goes here\n    var sum = 0\n    for n in lst {\n        if n > 0 && n.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if n % 2 == 1 {\n                sum += Int(n * n)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzn945jfl.swift:18:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if n % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for number in lst {\n        if number.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(pow(number, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpv_35ukwj.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(number, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    //YOUR CODE\
    \ HERE\n    var res = 0\n    for item in lst {\n        if (Int(item) % 2 == 1\
    \ && item >= 0) {\n            res += Int(item * item)\n        }\n    }\n   \
    \ return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let numberOfNegative\
    \ = lst.filter{$0 < 0}.count\n    let numberOfNumbers = lst.count - numberOfNegative\n\
    \    let sum = lst.filter{$0.isInt}.reduce(0, +)\n    let result = sum * sum\n\
    \    return numberOfNumbers == 0 ? 0 : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpcmynog2l.swift:16:29: error: value of type 'Double' has no member\
    \ 'isInt'\n    let sum = lst.filter{$0.isInt}.reduce(0, +)\n                 \
    \        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for item in lst {\n        if item.isInteger && item > 0 && item % 2\
    \ != 0 {\n            sum += Int(item * item)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwgearq8e.swift:16:17: error: value of type 'Double' has no member\
    \ 'isInteger'\n        if item.isInteger && item > 0 && item % 2 != 0 {\n    \
    \       ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let arr =\
    \ lst.filter {$0 >= 0 && floor($0) == $0 && $0 % 2 != 0}\n    if arr.count ==\
    \ 0 {\n        return 0\n    }\n    return Int(arr.map {$0 * $0}.reduce(0, +)\
    \ * 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptepp1h9l.swift:14:38: error: cannot find 'floor' in scope\n   \
    \ let arr = lst.filter {$0 >= 0 && floor($0) == $0 && $0 % 2 != 0}\n         \
    \                            ^~~~~\n"
  stdout: ''
  timestamp: 1659978569
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp2jgwk06g/tmp2jgwk06g.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4febea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4febb9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4febb9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4febb9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jgwk06g                        0x0000561e5687531b <unavailable> + 4891

    5    libc.so.6                          0x00002b4fec094460 __libc_start_main +
    245

    6    tmp2jgwk06g                        0x0000561e56874fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Your code\
    \ here!\n    var result = 0\n    for index in lst {\n        if (index.isInteger)\
    \ && (index > 0) && (index % 2 == 1) {\n            result += Int(index) * Int(index)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpv4f85s8e.swift:17:19: error: value of type 'Double' has no member\
    \ 'isInteger'\n        if (index.isInteger) && (index > 0) && (index % 2 == 1)\
    \ {\n            ~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for number in lst {\n        if number > 0 && number.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(number, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp8fvyt2qj.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(number, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var squares:\
    \ [Double] = []\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            squares.append(num * num)\n        }\n    }\n    return\
    \ Int(squares.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpuyh1vmjy/tmpuyh1vmjy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16f3173c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16f2e6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16f2e6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16f2e697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuyh1vmjy                        0x000055f43d99b752 <unavailable> + 5970

    5    libc.so.6                          0x00002b16f335f460 __libc_start_main +
    245

    6    tmpuyh1vmjy                        0x000055f43d99b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv1i2euo6/tmpv1i2euo6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1i2euo6                        0x000055a258fe63e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b8e8a9b5460 __libc_start_main +
    245

    6    tmpv1i2euo6                        0x000055a258fe5fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var nums:\
    \ [Double] = []\n    for num in lst {\n        if num >= 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            nums.append(num)\n        }\n    }\n    var total = 0\n\
    \    for num in nums {\n        if num % 2 != 0 {\n            total += Int(num\
    \ * num)\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5yquzesd.swift:22:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 != 0 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return lst.filter\
    \ {$0.truncatingRemainder(dividingBy: 2) == 1}.reduce(0) {(result, element) in\
    \ result + Int(element * element)}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv1i2euo6/tmpv1i2euo6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1i2euo6                        0x000055a258fe63e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b8e8a9b5460 __libc_start_main +
    245

    6    tmpv1i2euo6                        0x000055a258fe5fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for num in lst {\n        if num >= 0 && floor(num) == num && num.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjxe1_4j1.swift:16:24: error: cannot find 'floor' in scope\n   \
    \     if num >= 0 && floor(num) == num && num.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n                       ^~~~~\n/tmp/tmpjxe1_4j1.swift:17:24: error:\
    \ cannot find 'pow' in scope\n            sum += Int(pow(num, 2))\n          \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var output\
    \ = 0\n    for item in lst {\n        if item < 0 {\n            continue\n  \
    \      }\n        if floor(item) != item {\n            continue\n        }\n\
    \        let c = Int(item)\n        if c % 2 == 1 {\n            output += c *\
    \ c\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4xx4n26j.swift:19:12: error: cannot find 'floor' in scope\n   \
    \     if floor(item) != item {\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // your code\
    \ here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpgvsbtkja/tmpgvsbtkja.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2a5b4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2a5843b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2a5843988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2a58427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgvsbtkja                        0x000055fd4323d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ad2a5d38460 __libc_start_main +
    245

    6    tmpgvsbtkja                        0x000055fd4323cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    } else {\n        var sum = 0\n        for num in lst\
    \ {\n            if num % 2 != 0 {\n                sum += Int(num * num)\n  \
    \          }\n        }\n        return sum\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp1qy87ox8.swift:19:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 != 0 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv1i2euo6/tmpv1i2euo6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1i2euo6                        0x000055a258fe63e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b8e8a9b5460 __libc_start_main +
    245

    6    tmpv1i2euo6                        0x000055a258fe5fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if (lst.count\
    \ > 0) {\n        var mylist = [Double]()\n        for i in lst {\n          \
    \  if (i >= 0 && i % 2 != 0) {\n                mylist.append(i)\n           \
    \ }\n        }\n        var sum = 0.0\n        for i in mylist {\n           \
    \ sum += i\n        }\n        return Int(sum * 2)\n    }\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpadcb2kig.swift:17:29: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if (i >= 0 && i % 2 !=\
    \ 0) {\n                            ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    var\
    \ s: Double = 0\n    for el in lst {\n        if el > 0 {\n            if el ==\
    \ floor(el) {\n                if el % 2 == 1 {\n                    s += el *\
    \ el\n                }\n            }\n        }\n    }\n    return Int(s * 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_f_xtnm0.swift:18:22: error: cannot find 'floor' in scope\n   \
    \         if el == floor(el) {\n                     ^~~~~\n/tmp/tmp_f_xtnm0.swift:19:23:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n                if el % 2 == 1 {\n                      ^\nSwift.%:2:13:\
    \ note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs:\
    \ T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for item in lst {\n        if (item.isInteger) && (item > 0) && (item\
    \ % 2 != 0) {\n            sum += Int(item * item)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp3i4ru0ov.swift:16:18: error: value of type 'Double' has no member\
    \ 'isInteger'\n        if (item.isInteger) && (item > 0) && (item % 2 != 0) {\n\
    \            ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Your code\
    \ here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpux1fo5ei/tmpux1fo5ei.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7932c72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7932969b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7932969988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79329687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpux1fo5ei                        0x000055df60c153e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7932e5e460 __libc_start_main +
    245

    6    tmpux1fo5ei                        0x000055df60c14fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.isInteger && num % 2 != 0\
    \ {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp84bvmi32.swift:16:27: error: value of type 'Double' has no member\
    \ 'isInteger'\n        if num > 0 && num.isInteger && num % 2 != 0 {\n       \
    \               ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result:\
    \ Int = 0\n    for item in lst {\n        if item.truncatingRemainder(dividingBy:\
    \ 2) == 1 && item >= 0{\n            result += Int(item*item)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result\
    \ = 0\n    for number in lst {\n        if number > 0 && (number == floor(number))\
    \ {\n            result += Int(pow(number, 2))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp2tow2yjk.swift:16:37: error: cannot find 'floor' in scope\n   \
    \     if number > 0 && (number == floor(number)) {\n                         \
    \           ^~~~~\n/tmp/tmp2tow2yjk.swift:17:27: error: cannot find 'pow' in scope\n\
    \            result += Int(pow(number, 2))\n                          ^~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmppv86qlwi/tmppv86qlwi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d8d6a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d8d397b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d8d397988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d8d3967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv86qlwi                        0x0000561cd93a531b <unavailable> + 4891

    5    libc.so.6                          0x00002b9d8d88c460 __libc_start_main +
    245

    6    tmppv86qlwi                        0x0000561cd93a4fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Your code\
    \ here!\n    var odd_squares = 0\n    var even_squares = 0\n    for item in lst\
    \ {\n        if (item % 2 != 0 && item >= 0) {\n            odd_squares += Int(item\
    \ * item)\n        }\n        else if (item % 2 == 0 && item >= 0) {\n       \
    \     even_squares += Int(item * item)\n        }\n    }\n    return odd_squares\
    \ - even_squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpsz3x5lwp.swift:18:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if (item % 2 != 0 && item >=\
    \ 0) {\n                 ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpsz3x5lwp.swift:21:23: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n        else if (item % 2 ==\
    \ 0 && item >= 0) {\n                      ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // REPLACE\
    \ THIS LINE WITH YOUR CODE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp4dqbwiot/tmp4dqbwiot.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9da30ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9da005b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9da005988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9da0047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dqbwiot                        0x0000563045d993e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ae9da4fa460 __libc_start_main +
    245

    6    tmp4dqbwiot                        0x0000563045d98fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv1i2euo6/tmpv1i2euo6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1i2euo6                        0x000055a258fe63e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b8e8a9b5460 __libc_start_main +
    245

    6    tmpv1i2euo6                        0x000055a258fe5fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var total\
    \ = 0\n    for num in lst {\n        if num.isInteger == true && num >= 0 && num.isOdd\
    \ == true {\n            total += Int(num * num)\n        }\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpod5hdlm2.swift:16:16: error: value of type 'Double' has no member\
    \ 'isInteger'\n        if num.isInteger == true && num >= 0 && num.isOdd == true\
    \ {\n           ~~~ ^~~~~~~~~\n/tmp/tmpod5hdlm2.swift:16:53: error: value of type\
    \ 'Double' has no member 'isOdd'\n        if num.isInteger == true && num >= 0\
    \ && num.isOdd == true {\n                                                ~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var newArr:\
    \ [Double] = []\n    for i in lst {\n        if i < 0 {\n            newArr.append(0)\n\
    \        } else if i % 2 == 0 {\n            newArr.append(0)\n        } else\
    \ {\n            newArr.append(i)\n        }\n    }\n    return Int(newArr.reduce(0,\
    \ +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp3jy6ab7h.swift:18:21: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        } else if i % 2 == 0 {\n  \
    \                  ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return lst.filter\
    \ { $0 >= 0 }.filter { $0.truncatingRemainder(dividingBy: 1) == 0 }.map { $0 *\
    \ $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpafaa8c41.swift:14:98: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.filter { $0 >= 0 }.filter { $0.truncatingRemainder(dividingBy:\
    \ 1) == 0 }.map { $0 * $0 }.reduce(0, +)\n                                   \
    \                                                           ~~~^~~~\n        \
    \                                                                            \
    \          Int(   )\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.isInteger && num > 0 {\n           \
    \ sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplimgryr9.swift:16:16: error: value of type 'Double' has no member\
    \ 'isInteger'\n        if num.isInteger && num > 0 {\n           ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i\
    \ * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  var sum = 0\n\
    \  for i in lst {\n    if i.truncatingRemainder(dividingBy: 2) == 1 {\n      sum\
    \ += Int(i * i)\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && ceil(num) == num {\n        \
    \    if num % 2 == 1 {\n                sum += Int(pow(num, 2))\n            }\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0p48udo_.swift:16:23: error: cannot find 'ceil' in scope\n    \
    \    if num > 0 && ceil(num) == num {\n                      ^~~~\n/tmp/tmp0p48udo_.swift:17:20:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n            if num % 2 == 1 {\n                   ^\nSwift.%:2:13:\
    \ note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs:\
    \ T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmp0p48udo_.swift:18:28:\
    \ error: cannot find 'pow' in scope\n                sum += Int(pow(num, 2))\n\
    \                           ^~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    var i = 0\n    while i < lst.count {\n        if lst[i] >= 0 && (lst[i]\
    \ % 2 == 1) {\n            sum += Int(lst[i] * lst[i])\n        }\n        i +=\
    \ 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmph5e6nsk4.swift:17:35: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] >= 0 && (lst[i] %\
    \ 2 == 1) {\n                                  ^\nSwift.%:2:13: note: '%' has\
    \ been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) ->\
    \ T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var number\
    \ = 0\n    for item in lst {\n        if Double(item) == item, item > 0 {\n  \
    \          number += Int(item * item)\n        }\n    }\n    return number\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpuhpzi23r/tmpuhpzi23r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac23d178c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac23ce6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac23ce6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac23ce6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhpzi23r                        0x000055d70458e632 <unavailable> + 5682

    5    libc.so.6                          0x00002ac23d364460 __libc_start_main +
    245

    6    tmpuhpzi23r                        0x000055d70458e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for number in lst {\n        if number.truncatingRemainder(dividingBy:\
    \ 2) == 1 && number > 0 {\n            sum += Int(pow(number, 2))\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpt_zttsyb.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(number, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var newArr:\
    \ [Double] = []\n    var doubleSum: Double = 0\n    var intSum: Int = 0\n    for\
    \ num in lst {\n        if num >= 0 && num % 1 == 0 {\n            newArr.append(num)\n\
    \        }\n    }\n    for num in newArr {\n        if num % 2 != 0 {\n      \
    \      doubleSum += num * num\n        }\n    }\n    intSum = Int(doubleSum)\n\
    \    return intSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpteblmuqw.swift:18:28: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num >= 0 && num % 1 == 0\
    \ {\n                           ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpteblmuqw.swift:23:16: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n        if num % 2 != 0 {\n \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    }\n    var ret = 0\n    for i in lst {\n        if\
    \ let i = Int(exactly: i) {\n            if i < 0 {\n                continue\n\
    \            }\n            if i % 2 == 1 {\n                ret += i * i\n  \
    \          }\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.oAbcEN/tmp87xmdrm_-1.o:tmp87xmdrm_-1.o:function $s11tmp87xmdrm_21double_the_difference3lstSiSaySdG_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.oAbcEN/tmp87xmdrm_-1.o:tmp87xmdrm_-1.o:function $s11tmp87xmdrm_21double_the_difference3lstSiSaySdG_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.oAbcEN/tmp87xmdrm_-1.o:tmp87xmdrm_-1.o:function $s11tmp87xmdrm_21double_the_difference3lstSiSaySdG_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.oAbcEN/tmp87xmdrm_-1.o:tmp87xmdrm_-1.o:function $s11tmp87xmdrm_21double_the_difference3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.oAbcEN/tmp87xmdrm_-1.o:tmp87xmdrm_-1.o:function $s11tmp87xmdrm_21double_the_difference3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.oAbcEN/tmp87xmdrm_-1.o:tmp87xmdrm_-1.o:function $s11tmp87xmdrm_21double_the_difference3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.oAbcEN/tmp87xmdrm_-1.o:tmp87xmdrm_-1.o:function $s11tmp87xmdrm_21double_the_difference3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let sumOfSquares\
    \ = lst.filter{$0 % 2 != 0 && $0 >= 0}.map{Int($0 * $0)}.reduce(0, +)\n    return\
    \ sumOfSquares * 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9nmmux6q.swift:14:38: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    let sumOfSquares = lst.filter{$0\
    \ % 2 != 0 && $0 >= 0}.map{Int($0 * $0)}.reduce(0, +)\n                      \
    \               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    //YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpkkae3bno/tmpkkae3bno.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0887aaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08877a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08877a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08877a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkae3bno                        0x0000559709c273e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b0887c9a460 __libc_start_main +
    245

    6    tmpkkae3bno                        0x0000559709c26fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Put your\
    \ code here!\n    var sum = 0\n    for i in lst {\n        if !(i % 2 == 0) &&\
    \ i > 0 {\n            sum += Int(i*i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp30xu0ddm.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if !(i % 2 == 0) && i > 0 {\n\
    \               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for n in lst {\n        if(n < 0) {\n            continue\n        }\n\
    \        if(n - floor(n) != 0) {\n            continue\n        }\n        if(n\
    \ % 2 == 0) {\n            continue\n        }\n        sum += Int(n * n)\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpk35qvn02.swift:19:16: error: cannot find 'floor' in scope\n   \
    \     if(n - floor(n) != 0) {\n               ^~~~~\n/tmp/tmpk35qvn02.swift:22:14:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n        if(n % 2 == 0) {\n             ^\nSwift.%:2:13: note: '%' has\
    \ been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) ->\
    \ T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return sum_of_squares_of_odds(arr:\
    \ lst) * 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0xnsf6ik.swift:14:12: error: cannot find 'sum_of_squares_of_odds'\
    \ in scope\n    return sum_of_squares_of_odds(arr: lst) * 2\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if Int(i) % 2 != 0 && i > 0 {\n            sum\
    \ += Int(i) * Int(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv1i2euo6/tmpv1i2euo6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1i2euo6                        0x000055a258fe63e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b8e8a9b5460 __libc_start_main +
    245

    6    tmpv1i2euo6                        0x000055a258fe5fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Write\
    \ your code below.\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptmneu_m_/tmptmneu_m_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae17b839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae17b530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae17b530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae17b52f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptmneu_m_                        0x0000559b978a03e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ae17ba25460 __libc_start_main +
    245

    6    tmptmneu_m_                        0x0000559b9789ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    }\n    var result = 0\n    for num in lst {\n     \
    \   if num.truncatingRemainder(dividingBy: 2) == 1 {\n            result += Int(num)\
    \ * Int(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let isInt\
    \ = lst.filter { $0 % 1 == 0 && $0 >= 0 }\n    let squared = isInt.map { $0 *\
    \ $0 }\n    let sum = squared.reduce(0, +)\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5c55p_5r.swift:14:33: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    let isInt = lst.filter { $0 % 1\
    \ == 0 && $0 >= 0 }\n                                ^\nSwift.%:2:13: note: '%'\
    \ has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs:\
    \ T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmp5c55p_5r.swift:17:12:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return sum\n           ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var ans =\
    \ 0\n    for x in lst {\n        if (Int(x) != nil) && (x > 0) && (Int(x) % 2\
    \ != 0) {\n            ans += Int(x * x)\n        }\n    }\n    return ans\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result\
    \ = 0\n    for item in lst {\n        if item > 0 && floor(item) == item {\n \
    \           result += Int(item * item)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbez1cgzt.swift:16:24: error: cannot find 'floor' in scope\n   \
    \     if item > 0 && floor(item) == item {\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // TODO:\
    \ Implement this function!\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp7xqsk377/tmp7xqsk377.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24412f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2440fe9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2440fe9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2440fe87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xqsk377                        0x000055583826f3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b24414de460 __libc_start_main +
    245

    6    tmp7xqsk377                        0x000055583826efa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  // YOUR CODE\
    \ HERE\n  var result = 0\n  for num in lst {\n    if num % 2 == 1 && (num.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n      result += Int(num) * Int(num)\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpdvc_pwla.swift:17:12: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if num % 2 == 1 && (num.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n           ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for element in lst {\n        if element.truncatingRemainder(dividingBy:\
    \ 2) == 1.0 && element > 0 {\n            sum += Int(element * element)\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // WRITE\
    \ YOUR CODE HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpm0g94dvr/tmpm0g94dvr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48bc91cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48bc613b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48bc613988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48bc6127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0g94dvr                        0x000055eb46eb23e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b48bcb08460 __libc_start_main +
    245

    6    tmpm0g94dvr                        0x000055eb46eb1fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var array\
    \ = [Int]()\n    var sum = 0\n    for number in lst {\n        if number.truncatingRemainder(dividingBy:\
    \ 1) == 0 && number > 0 {\n            array.append(Int(number))\n        }\n\
    \    }\n    for num in array {\n        if num % 2 != 0 {\n            sum +=\
    \ num * num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    var total = 0\n    for i in lst {\n        if (i % 2 == 1) {\n   \
    \         total += Int(i*i)\n        }\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzf2wxhph.swift:17:15: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if (i % 2 == 1) {\n       \
    \       ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var newArr:\
    \ [Double] = []\n    for num in lst {\n        if (num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n            newArr.append(num)\n        }\n    }\n    var sum: Double\
    \ = 0\n    for num in newArr {\n        if (num.truncatingRemainder(dividingBy:\
    \ 2) != 0) {\n            sum += num * num\n        }\n    }\n    return Int(sum)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    var sum = 0\n    for number in lst {\n        if number >= 0 && floor(number)\
    \ == number && number != 0 {\n            if number % 2 == 1 {\n             \
    \   sum += Int(pow(number, 2))\n            }\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpk77d27bb.swift:17:27: error: cannot find 'floor' in scope\n   \
    \     if number >= 0 && floor(number) == number && number != 0 {\n           \
    \               ^~~~~\n/tmp/tmpk77d27bb.swift:18:23: error: '%' is unavailable:\
    \ For floating point numbers use truncatingRemainder instead\n            if number\
    \ % 2 == 1 {\n                      ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpk77d27bb.swift:19:28: error: cannot find 'pow' in scope\n\
    \                sum += Int(pow(number, 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    var oddSum = 0\n    var evenSum = 0\n    var oddArray: [Double] =\
    \ []\n    var evenArray: [Double] = []\n    var evenDifference = 0\n    var oddDifference\
    \ = 0\n    var difference = 0\n    var result = 0\n    for element in lst {\n\
    \        if element % 2 == 0 {\n            evenArray.append(element)\n      \
    \  } else {\n            oddArray.append(element)\n        }\n    }\n    for num\
    \ in evenArray {\n        evenSum += Int(num * num)\n    }\n    for num in oddArray\
    \ {\n        oddSum += Int(num * num)\n    }\n    evenDifference = evenSum - Int(evenArray.count)\n\
    \    oddDifference = oddSum - Int(oddArray.count)\n    difference = evenDifference\
    \ - oddDifference\n    result = difference * 2\n    return result\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp8d6xlme8.swift:24:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if element % 2 == 0 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var nums\
    \ = [Int]()\n    for num in lst {\n        if (num.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (num > 0) {\n            nums.append(Int(num))\n        }\n    }\n\
    \    return nums.reduce(0, { $0 + ($1 * $1) })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpr2scybz5/tmpr2scybz5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab36077ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab360471b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab360471988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3604707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2scybz5                        0x000055d3339947b2 <unavailable> + 6066

    5    libc.so.6                          0x00002ab360966460 __libc_start_main +
    245

    6    tmpr2scybz5                        0x000055d333994379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let filteredArr\
    \ = lst.filter { (num) -> Bool in\n        num > 0 && floor(num) == num\n    }\n\
    \    let filteredArrSquared = filteredArr.map { (num) -> Double in\n        num\
    \ * num\n    }\n    let filteredArrSquaredFiltered = filteredArrSquared.filter\
    \ { (num) -> Bool in\n        num % 2 == 1\n    }\n    let sum = filteredArrSquaredFiltered.reduce(0)\
    \ { (res, num) -> Double in\n        res + num\n    }\n    return Int(sum)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpdio972xx.swift:15:20: error: cannot find 'floor' in scope\n   \
    \     num > 0 && floor(num) == num\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result\
    \ = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            result += Int(i * i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for i in lst {\n        if i > 0 {\n            if i.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n                sum += Int(i * i)\n            }\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmppv86qlwi/tmppv86qlwi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d8d6a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d8d397b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d8d397988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d8d3967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv86qlwi                        0x0000561cd93a531b <unavailable> + 4891

    5    libc.so.6                          0x00002b9d8d88c460 __libc_start_main +
    245

    6    tmppv86qlwi                        0x0000561cd93a4fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp_f2myvn3/tmp_f2myvn3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b635aa3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b635a733b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b635a733988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b635a7327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f2myvn3                        0x00005589cec1c3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b635ac28460 __libc_start_main +
    245

    6    tmp_f2myvn3                        0x00005589cec1bfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for item in lst {\n        if is_int(x: item) && item >= 0 && is_odd(x:\
    \ item) {\n            sum += Int(item * item)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp07w3bicq.swift:16:12: error: cannot find 'is_int' in scope\n  \
    \      if is_int(x: item) && item >= 0 && is_odd(x: item) {\n           ^~~~~~\n\
    /tmp/tmp07w3bicq.swift:16:44: error: cannot find 'is_odd' in scope\n        if\
    \ is_int(x: item) && item >= 0 && is_odd(x: item) {\n                        \
    \                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  var filtered\
    \ = lst.filter({ (element) -> Bool in\n    if element > 0, element % 1 == 0 {\n\
    \      return true\n    }\n    return false\n  })\n  var double = filtered.filter({\
    \ (element) -> Bool in\n    if element % 2 == 0 {\n      return true\n    }\n\
    \    return false\n  })\n  double = double.map({ (element) -> Double in\n    return\
    \ element * 2\n  })\n  if double.count == 0 {\n    return 0\n  }\n  return Int(double.reduce(0,\
    \ +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp222hw5ht.swift:15:29: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if element > 0, element % 1 ==\
    \ 0 {\n                            ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp222hw5ht.swift:21:16: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    if element % 2 == 0 {\n \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp222hw5ht.swift:14:7: warning: variable 'filtered' was\
    \ never mutated; consider changing to 'let' constant\n  var filtered = lst.filter({\
    \ (element) -> Bool in\n  ~~~ ^\n  let\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var square:\
    \ [Double] = []\n    var sum = 0\n    for number in lst {\n        if Int(number)\
    \ == number && number > 0 {\n            square.append(number*number)\n      \
    \  }\n    }\n    for odd in square {\n        if Int(odd) % 2 != 0 {\n       \
    \     sum += Int(odd)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpsf77db20.swift:17:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        if Int(number) == number && number\
    \ > 0 {\n                          ^\n                          Int(  )\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var squareSum\
    \ = 0\n    for num in lst {\n        if num >= 0 {\n            if num % 2 !=\
    \ 0 {\n                squareSum += Int(num) * Int(num)\n            }\n     \
    \   }\n    }\n    return squareSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfjr0hhv8.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 != 0 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  // Your code\
    \ here\n  var intList = [Int]()\n  var sum = 0\n  for num in lst {\n    if num\
    \ >= 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n      intList.append(Int(num))\n\
    \    }\n  }\n  for num in intList {\n    if num % 2 != 0 {\n      sum += num *\
    \ num\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && (i - Double(Int(i))) == 0 {\n   \
    \         sum += Int(i)\n        }\n    }\n    return sum * 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp3u9hifc5/tmp3u9hifc5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed36ad8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed367cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed367cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed367ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u9hifc5                        0x00005575742445e2 <unavailable> + 5602

    5    libc.so.6                          0x00002aed36cc4460 __libc_start_main +
    245

    6    tmp3u9hifc5                        0x00005575742441a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let doubles\
    \ = lst.filter({ $0 >= 0 && $0.truncatingRemainder(dividingBy: 1) == 0 }).map({\
    \ $0 * $0 }).filter({ $0 % 2 == 1 })\n    let sum = doubles.reduce(0, +)\n   \
    \ return sum * 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp43do1zrf.swift:14:118: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    let doubles = lst.filter({\
    \ $0 >= 0 && $0.truncatingRemainder(dividingBy: 1) == 0 }).map({ $0 * $0 }).filter({\
    \ $0 % 2 == 1 })\n                                                           \
    \                                                          ^\nSwift.%:2:13: note:\
    \ '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs:\
    \ T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmp43do1zrf.swift:16:16:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return sum * 2\n           ~~~~^~~\n           Int(   )\n"
  stdout: ''
  timestamp: 1659978546
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  var sum = 0\n\
    \  for i in lst {\n    if i >= 0 && i.truncatingRemainder(dividingBy: 1) == 0\
    \ {\n      if i % 2 != 0 {\n        sum += Int(i * i)\n      }\n    }\n  }\n \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5iobqdhk.swift:17:12: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n      if i % 2 != 0 {\n           ^\n\
    Swift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func\
    \ % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for item in lst {\n        if item >= 0 && item.isInt && item % 2 !=\
    \ 0 {\n            sum += Int(item * item)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpee1ulokd.swift:16:30: error: value of type 'Double' has no member\
    \ 'isInt'\n        if item >= 0 && item.isInt && item % 2 != 0 {\n           \
    \             ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        let intNum = Int(num)\n        if intNum >\
    \ 0 && intNum % 2 != 0 {\n            sum += intNum * intNum\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for item in lst {\n        if item >= 0, item.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(item) * Int(item)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let squares\
    \ = lst.map { Double($0 * $0) }\n    return Int(squares.reduce(0, +))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpfuobo2vs/tmpfuobo2vs.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3438430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3438127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3438127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34381267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfuobo2vs                        0x000055d6209c45e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b343861c460 __libc_start_main +
    245

    6    tmpfuobo2vs                        0x000055d6209c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    var sum = 0\n    for number in lst {\n        if number > 0 && number.truncatingRemainder(dividingBy:\
    \ 2) != 0{\n            sum += Int(pow(number, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5vbftylr.swift:18:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(number, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result:\
    \ Int = 0\n    for num in lst {\n        if (num.isInteger && num > 0 && num %\
    \ 2 != 0) {\n            result += Int(num * num)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp7du3gkij.swift:16:17: error: value of type 'Double' has no member\
    \ 'isInteger'\n        if (num.isInteger && num > 0 && num % 2 != 0) {\n     \
    \       ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var oddSum\
    \ = 0\n    for num in lst {\n        if (Int(num) % 2 != 0) && (num > 0) {\n \
    \           oddSum += Int(num) * Int(num)\n        }\n    }\n    return oddSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num >= 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd1g5228j.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp_f2myvn3/tmp_f2myvn3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b635aa3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b635a733b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b635a733988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b635a7327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f2myvn3                        0x00005589cec1c3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b635ac28460 __libc_start_main +
    245

    6    tmp_f2myvn3                        0x00005589cec1bfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if Int(i) % 2 != 0 && i > 0 {\n            sum\
    \ += Int(i) * Int(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    var index = 0\n    while index < lst.count {\n        if lst[index] >\
    \ 0 {\n            sum += Int(lst[index] * lst[index])\n        }\n        index\
    \ += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpjhw9xg3u/tmpjhw9xg3u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bd660bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bd6302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bd6302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bd63017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhw9xg3u                        0x00005650eb137522 <unavailable> + 5410

    5    libc.so.6                          0x00002b8bd67f7460 __libc_start_main +
    245

    6    tmpjhw9xg3u                        0x00005650eb1370e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for number in lst {\n        let difference = number * number\n     \
    \   sum += Int(difference)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpe7_fzlzw/tmpe7_fzlzw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79c0e80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79c0b77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79c0b77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79c0b767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7_fzlzw                        0x0000556adb66d5e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b79c106c460 __libc_start_main +
    245

    6    tmpe7_fzlzw                        0x0000556adb66d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if (i >= 0 && i == Double(Int(i))) {\n      \
    \      sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp62_37qw_/tmp62_37qw_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f3b9f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f3b6e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f3b6e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f3b6e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62_37qw_                        0x0000565550fe55e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b0f3bbdd460 __libc_start_main +
    245

    6    tmp62_37qw_                        0x0000565550fe51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result\
    \ = 0\n    for i in lst {\n        if i > 0 && i % 2 == 1 {\n            result\
    \ += Int(i) * Int(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6ke9tkvh.swift:16:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for n in lst {\n        if n.isWholeNumber {\n            if n.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n                sum += Int(n * n)\n            }\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp84aq4v2k.swift:16:14: error: value of type 'Double' has no member\
    \ 'isWholeNumber'\n        if n.isWholeNumber {\n           ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    let\
    \ list = lst.map { $0.rounded() }\n    let sum = list.filter { $0 > 0 && $0 %\
    \ 2 != 0 }.map { $0 * $0 }.reduce(0, +)\n    let multiplier = list.filter { $0\
    \ > 0 && $0 % 2 == 0 }.count * 2\n    return sum * multiplier\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpv526g_rx.swift:16:42: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    let sum = list.filter { $0 > 0\
    \ && $0 % 2 != 0 }.map { $0 * $0 }.reduce(0, +)\n                            \
    \             ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpv526g_rx.swift:17:49: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    let multiplier = list.filter\
    \ { $0 > 0 && $0 % 2 == 0 }.count * 2\n                                      \
    \          ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpv526g_rx.swift:18:12: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return sum * multiplier\n           ^\n\
    \           Int( )\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let oddNums\
    \ = lst.filter { $0.truncatingRemainder(dividingBy: 2) != 0 }\n    let sum = oddNums.reduce(0)\
    \ { $0 + Int($1*$1) }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp29yvz7p6/tmp29yvz7p6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32ff381c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32ff078b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32ff078988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32ff0777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29yvz7p6                        0x00005555741868fc <unavailable> + 6396

    5    libc.so.6                          0x00002b32ff56d460 __libc_start_main +
    245

    6    tmp29yvz7p6                        0x0000555574186229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return Int(lst.reduce(0)\
    \ {\n        if $1 < 0 || $1 % 1 != 0 {\n            return $0\n        }\n  \
    \      return $0 + $1\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmppcm3gjzz.swift:15:25: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if $1 < 0 || $1 % 1 != 0 {\n\
    \                        ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var lst =\
    \ lst\n    var sum = 0\n    for element in lst {\n        if element.truncatingRemainder(dividingBy:\
    \ 2) == 1 && element > 0 {\n            sum += Int(element * element)\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // put your\
    \ code here.\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptw1wqc87/tmptw1wqc87.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0920932c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0920629b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0920629988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09206287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptw1wqc87                        0x0000561554e423e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b0920b1e460 __libc_start_main +
    245

    6    tmptw1wqc87                        0x0000561554e41fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for x in lst {\n        if x.truncatingRemainder(dividingBy: 2) == 1\
    \ {\n            sum += Int(x*x)\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Your code\
    \ here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpux1fo5ei/tmpux1fo5ei.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7932c72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7932969b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7932969988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79329687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpux1fo5ei                        0x000055df60c153e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7932e5e460 __libc_start_main +
    245

    6    tmpux1fo5ei                        0x000055df60c14fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // write\
    \ your code here\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 && i > 0{\n            sum += Int(i*i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result:\
    \ Int = 0\n    for num in lst {\n        if num > 0 {\n            if num != floor(num)\
    \ {\n                continue\n            }\n            if num % 2 == 1 {\n\
    \                result += Int(pow(num, 2))\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpi3afh807.swift:17:23: error: cannot find 'floor' in scope\n   \
    \         if num != floor(num) {\n                      ^~~~~\n/tmp/tmpi3afh807.swift:20:20:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n            if num % 2 == 1 {\n                   ^\nSwift.%:2:13:\
    \ note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs:\
    \ T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmpi3afh807.swift:21:31:\
    \ error: cannot find 'pow' in scope\n                result += Int(pow(num, 2))\n\
    \                              ^~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp2jgwk06g/tmp2jgwk06g.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4febea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4febb9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4febb9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4febb9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jgwk06g                        0x0000561e5687531b <unavailable> + 4891

    5    libc.so.6                          0x00002b4fec094460 __libc_start_main +
    245

    6    tmp2jgwk06g                        0x0000561e56874fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var oddSqSum\
    \ = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2)\
    \ == 1 && num > 0 {\n            oddSqSum += Int(num * num)\n        }\n    }\n\
    \    return oddSqSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var counter\
    \ = 0\n    for number in lst {\n        if number.isInteger && number > 0 && number\
    \ % 2 != 0 {\n            counter += Int(number * number)\n        }\n    }\n\
    \    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkx_cqm60.swift:16:19: error: value of type 'Double' has no member\
    \ 'isInteger'\n        if number.isInteger && number > 0 && number % 2 != 0 {\n\
    \           ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Intentionally\
    \ blank. Fill in the solution, then remove this comment.\n    let lst2 = lst.map{Int($0)}\n\
    \    let lst3 = lst2.filter{$0 % 2 != 0 && $0 >= 0}\n    let sum = lst3.reduce(0,\
    \ +)\n    return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpgg0ldr7u/tmpgg0ldr7u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2350cbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23509b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23509b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23509b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgg0ldr7u                        0x000055b9a9f029e8 <unavailable> + 6632

    5    libc.so.6                          0x00002b2350ea8460 __libc_start_main +
    245

    6    tmpgg0ldr7u                        0x000055b9a9f02229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var squaredOddValues\
    \ = [Double]()\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) != 0 && num > 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n      \
    \      squaredOddValues.append(num * num)\n        }\n    }\n    return Int(squaredOddValues.reduce(0,\
    \ +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num == 0 || num < 0 || num % 1 != 0 {\n\
    \            continue\n        }\n        sum += Int(num * num)\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptdxrfycx.swift:16:39: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num == 0 || num < 0 || num\
    \ % 1 != 0 {\n                                      ^\nSwift.%:2:13: note: '%'\
    \ has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs:\
    \ T) -> T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // put your\
    \ code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp2bhxn20q/tmp2bhxn20q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac0ff3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac0fc36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac0fc36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac0fc357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bhxn20q                        0x0000560a2ec1e3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002aac1012b460 __libc_start_main +
    245

    6    tmp2bhxn20q                        0x0000560a2ec1dfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  var double_diff\
    \ = 0\n  for num in lst {\n    if num < 0 {\n      continue\n    }\n    if num\
    \ % 2 == 0 {\n      continue\n    }\n    let diff = num - 4\n    double_diff +=\
    \ Int(diff * diff)\n  }\n  return double_diff\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpoman6u60.swift:19:12: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if num % 2 == 0 {\n           ^\n\
    Swift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func\
    \ % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && floor(num) == num && num % 2\
    \ != 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpx057sufs.swift:16:23: error: cannot find 'floor' in scope\n   \
    \     if num > 0 && floor(num) == num && num % 2 != 0 {\n                    \
    \  ^~~~~\n/tmp/tmpx057sufs.swift:17:24: error: cannot find 'pow' in scope\n  \
    \          sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sumOfOddSquares\
    \ = 0\n    for i in lst {\n        if (Int(i) % 2 != 0 && i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n            sumOfOddSquares += Int(i * i)\n        }\n    }\n  \
    \  return sumOfOddSquares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for i in lst {\n        if(i.truncatingRemainder(dividingBy: 2)\
    \ == 1) {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let oddSquares\
    \ = lst.filter({$0.truncatingRemainder(dividingBy: 2) == 1}).map({$0 * $0})\n\
    \    if (oddSquares.count > 0) {\n        return Int(oddSquares.reduce(0, +))\n\
    \    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return Int(lst.filter\
    \ {\n        $0 >= 0 && floor($0) == $0\n    }.map {\n        $0 * $0\n    }.reduce(0,\
    \ +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxv0a262a.swift:15:20: error: cannot find 'floor' in scope\n   \
    \     $0 >= 0 && floor($0) == $0\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if Int(num) % 2 != 0 && num > 0 {\n       \
    \     sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return lst.filter\
    \ { $0.truncatingRemainder(dividingBy: 2) == 1 }.map { Int($0 * $0) }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(double_the_difference(lst: []\
    \ as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && Double(i).truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptqmt6df0.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result:\
    \ Int = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2)\
    \ == 1 && i > 0 {\n            result += Int(i * i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for x in lst {\n        if x >= 0 && isAnInteger(number: x) && isOdd(number:\
    \ x) {\n            sum += Int(x * x)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6dvohlj9.swift:16:22: error: cannot find 'isAnInteger' in scope\n\
    \        if x >= 0 && isAnInteger(number: x) && isOdd(number: x) {\n         \
    \            ^~~~~~~~~~~\n/tmp/tmp6dvohlj9.swift:16:48: error: cannot find 'isOdd'\
    \ in scope\n        if x >= 0 && isAnInteger(number: x) && isOdd(number: x) {\n\
    \                                               ^~~~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    var\
    \ odds: [Double] = []\n    var sum: Double = 0\n    \n    for num in lst {\n \
    \       if num % 2 != 0 {\n            odds.append(num)\n        }\n    }\n  \
    \  \n    for odd in odds {\n        let odd_squared = odd * odd\n        sum +=\
    \ odd_squared\n    }\n    \n    return Int(sum)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpcakuzlkz.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 != 0 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.isPositiveInt() && i.isOdd() {\n       \
    \     sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmph0hwg87b.swift:16:14: error: value of type 'Double' has no member\
    \ 'isPositiveInt'\n        if i.isPositiveInt() && i.isOdd() {\n           ~ ^~~~~~~~~~~~~\n\
    /tmp/tmph0hwg87b.swift:16:35: error: value of type 'Double' has no member 'isOdd'\n\
    \        if i.isPositiveInt() && i.isOdd() {\n                               \
    \ ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var d = 0\n\
    \    for x in lst {\n        if (x > 0 && floor(x) == x) {\n            if (x\
    \ % 2 != 0) {\n                d += Int(pow(x, 2))\n            }\n        }\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwo2gdhp8.swift:16:22: error: cannot find 'floor' in scope\n   \
    \     if (x > 0 && floor(x) == x) {\n                     ^~~~~\n/tmp/tmpwo2gdhp8.swift:17:19:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n            if (x % 2 != 0) {\n                  ^\nSwift.%:2:13: note:\
    \ '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs:\
    \ T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmpwo2gdhp8.swift:18:26:\
    \ error: cannot find 'pow' in scope\n                d += Int(pow(x, 2))\n   \
    \                      ^~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    var\
    \ sum = 0\n    for num in lst {\n        if Int(num) % 2 != 0 && num >= 0 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result\
    \ = 0\n    for i in lst {\n        if i >= 0 && (Int(i) == i) {\n            if\
    \ (Int(i) % 2 != 0) {\n                result += Int(i) * Int(i)\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp52qonb7j.swift:16:33: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        if i >= 0 && (Int(i) == i) {\n    \
    \                            ^\n                                Int( )\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var total\
    \ = 0\n    for element in lst {\n        if element.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            total += Int(pow(element, 2))\n        }\n    }\n   \
    \ return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpg4xkcjnj.swift:17:26: error: cannot find 'pow' in scope\n     \
    \       total += Int(pow(element, 2))\n                         ^~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var squares\
    \ = [Int]()\n    for number in lst {\n        if number.truncatingRemainder(dividingBy:\
    \ 2) == 1 && number.truncatingRemainder(dividingBy: 1) == 0 {\n            squares.append(Int(pow(number,\
    \ 2)))\n        }\n    }\n    if squares.count == 0 {\n        return 0\n    }\n\
    \    return squares.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptryllt5q.swift:17:32: error: cannot find 'pow' in scope\n     \
    \       squares.append(Int(pow(number, 2)))\n                               ^~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv1i2euo6/tmpv1i2euo6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1i2euo6                        0x000055a258fe63e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b8e8a9b5460 __libc_start_main +
    245

    6    tmpv1i2euo6                        0x000055a258fe5fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // your code\
    \ here\n    if lst.count == 0 {\n        return 0\n    }\n    else {\n       \
    \ var total = 0\n        for element in lst {\n            if element - Double(Int(element))\
    \ == 0 {\n                if element > 0 {\n                    if Int(element)\
    \ % 2 == 1 {\n                        total += Int(element) * Int(element)\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ total\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for item in lst {\n        if item >= 0 && item == Double(Int(item))\
    \ && item % 2 != 0 {\n            sum += Int(item * item)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptid5lxgq.swift:16:59: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if item >= 0 && item == Double(Int(item))\
    \ && item % 2 != 0 {\n                                                       \
    \   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic\
    \ func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // TODO\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zjhcza2/tmp8zjhcza2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfeb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfe815b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfe815988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfe8147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zjhcza2                        0x000055e66b03d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b1bfed0a460 __libc_start_main +
    245

    6    tmp8zjhcza2                        0x000055e66b03cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv1i2euo6/tmpv1i2euo6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1i2euo6                        0x000055a258fe63e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b8e8a9b5460 __libc_start_main +
    245

    6    tmpv1i2euo6                        0x000055a258fe5fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return Int(lst.map{\
    \ $0 * $0 }.filter{ $0 % 2 == 1 }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5n15wvjd.swift:14:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Int(lst.map{ $0 * $0 }.filter{ $0 % 2 == 1 }.reduce(0,\
    \ +))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978566
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0, i.truncatingRemainder(dividingBy: 1)\
    \ == 0, i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i*i)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Hint:\
    \ You will need to implement the sumOfSquares function\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpv9588xo4/tmpv9588xo4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6db2e6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6db2b63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6db2b63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6db2b627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9588xo4                        0x0000555b4b2fb3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b6db3058460 __libc_start_main +
    245

    6    tmpv9588xo4                        0x0000555b4b2fafa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result\
    \ = 0\n    for number in lst {\n        if number >= 0 {\n            if number.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n                result += Int(number * number)\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let squared\
    \ = lst.filter({ $0 > 0 && $0.truncatingRemainder(dividingBy: 1) == 0 })\n   \
    \     .map({ Int(pow($0, 2)) })\n    return 2 * squared.reduce(0, +)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpq2nj3n46.swift:15:20: error: cannot find 'pow' in scope\n     \
    \   .map({ Int(pow($0, 2)) })\n                   ^~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for element in lst {\n        if let element = element as? Int {\n  \
    \          if element < 0 {\n                continue\n            }\n       \
    \     if element % 2 == 1 {\n                sum += element * element\n      \
    \      }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp_xis4719/tmp_xis4719.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b071399bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0713692b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0713692988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07136917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xis4719                        0x000055ce7a494542 <unavailable> + 5442

    5    libc.so.6                          0x00002b0713b87460 __libc_start_main +
    245

    6    tmp_xis4719                        0x000055ce7a494109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Double = 0.0\n    for n in lst {\n        if n > 0 && n == floor(n) {\n    \
    \        if n % 2 == 1 {\n                sum += n * n\n            }\n      \
    \  }\n    }\n    return Int(sum * 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpupvymfvo.swift:16:26: error: cannot find 'floor' in scope\n   \
    \     if n > 0 && n == floor(n) {\n                         ^~~~~\n/tmp/tmpupvymfvo.swift:17:18:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n            if n % 2 == 1 {\n                 ^\nSwift.%:2:13: note:\
    \ '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs:\
    \ T) -> T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // You can't\
    \ use range operators in Swift as you would in Python or C.\n    // To loop over\
    \ the elements of an array, use the for-in statement.\n    // See: https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html\n\
    \    //\n    // NOTE: The correct answer is:\n    // return lst.compactMap { $0\
    \ > 0 && $0.truncatingRemainder(dividingBy: 1) == 0 ? $0 : nil }.filter{ $0 %\
    \ 2 == 1 }.map{ $0 * $0 }.reduce(0, +)\n    \n    var sum = 0\n    for value in\
    \ lst {\n        if (value > 0 && value.truncatingRemainder(dividingBy: 1) ==\
    \ 0) {\n            if (value % 2 == 1) {\n                sum += Int(value *\
    \ value)\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmppot6x9s6.swift:24:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if (value % 2 == 1) {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return lst.filter\
    \ { $0 > 0 && floor($0) == $0 }.filter { $0 % 2 == 1 }.map { $0 * $0 }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(double_the_difference(lst: []\
    \ as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpg5621i97.swift:14:35: error: cannot find 'floor' in scope\n   \
    \ return lst.filter { $0 > 0 && floor($0) == $0 }.filter { $0 % 2 == 1 }.map {\
    \ $0 * $0 }.reduce(0, +)\n                                  ^~~~~\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ GOES HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp_7fzm0x1/tmp_7fzm0x1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68f8fb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f8cacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f8cac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f8cab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_7fzm0x1                        0x000055f6506713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b68f91a1460 __libc_start_main +
    245

    6    tmp_7fzm0x1                        0x000055f650670fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978538
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmptn96cxjn/tmptn96cxjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1dfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1dcd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1dcd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1dcd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn96cxjn                        0x00005641a354d3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b3d1e1cc460 __libc_start_main +
    245

    6    tmptn96cxjn                        0x00005641a354cfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978536
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // TODO:\
    \ Implement this function\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpmmnpmea_/tmpmmnpmea_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf730e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf72dd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf72dd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf72dd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmnpmea_                        0x000055e94431f3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002acf732cd460 __libc_start_main +
    245

    6    tmpmmnpmea_                        0x000055e94431efa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978538
