language: swift
name: HumanEval_103_rounded_avg
results:
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    fatalError(\"TODO:\
    \ implement this function\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpcnkoksgp/tmpcnkoksgp.swift:18: Fatal error: TODO: implement this function

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5f8b74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5f886bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5f886b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5f886a7b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmpcnkoksgp                        0x0000557444113378 <unavailable> + 9080

    5    tmpcnkoksgp                        0x0000557444112520 <unavailable> + 5408

    6    libc.so.6                          0x00002ac5f8d60460 __libc_start_main +
    245

    7    tmpcnkoksgp                        0x0000557444112239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let intermediate_result\
    \ = (n + m) / 2\n    let binaried_intermediate_result = intermediate_result.binaryRepresentation\n\
    \    return Result<String, Int>(catching: {\n        if n > m {\n            throw\
    \ -1\n        }\n        return \"0b\\(binaried_intermediate_result)\"\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpdictjnqf.swift:19:60: error: value of type 'Int' has no member\
    \ 'binaryRepresentation'\n    let binaried_intermediate_result = intermediate_result.binaryRepresentation\n\
    \                                       ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdictjnqf.swift:20:12: error: referencing initializer 'init(catching:)'\
    \ on 'Result' requires the types 'Int' and 'any Error' be equivalent\n    return\
    \ Result<String, Int>(catching: {\n           ^\nSwift.Result:1:11: note: where\
    \ 'Failure' = 'Int'\nextension Result where Failure == Error {\n          ^\n"
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp33noc_te/tmp33noc_te.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e80a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e80765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e80765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e807647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33noc_te                        0x0000561b226a4635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8e80c5a460 __libc_start_main +
    245

    6    tmp33noc_te                        0x0000561b226a4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n  guard n <= m else {\
    \ return .failure(-1) }\n  let sum = (n+m)*(m-n+1)/2\n  let rounded = (sum+((m-n+1)%2))/2\n\
    \  return .success(\"0b\\(rounded.binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpy9_wpuso.swift:21:32: error: value of type 'Int' has no member\
    \ 'binary'\n  return .success(\"0b\\(rounded.binary)\")\n                    \
    \   ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009149
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = round((n + m) / 2)\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmppftyi321.swift:19:15: error: cannot find 'round' in scope\n   \
    \ let avg = round((n + m) / 2)\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660009149
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    return .success(String(format: \"0b%0x\", (n+m)/2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpzluo1e0y.swift:19:27: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    return .success(String(format:\
    \ \"0b%0x\", (n+m)/2))\n                          ^~~~~~~\n                  \
    \         repeating        count: \n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    } else {\n        let sum = (n...m).reduce(0, +)\n\
    \        let average = sum / (m - n + 1)\n        let average_binary = String(average,\
    \ radix: 2)\n        return .success(\"0b\\(average_binary)\")\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpd5es9o2j/tmpd5es9o2j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69fd6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69fd3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69fd3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69fd3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5es9o2j                        0x000055f9ecc38fe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b69fd8d8460 __libc_start_main +
    245

    6    tmpd5es9o2j                        0x000055f9ecc38779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpfvw4hnh6/tmpfvw4hnh6.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46a0751c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46a0448b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46a0448988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46a04477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvw4hnh6                        0x00005634549d0635 <unavailable> + 5685

    5    libc.so.6                          0x00002b46a093d460 __libc_start_main +
    245

    6    tmpfvw4hnh6                        0x00005634549d0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    } else {\n        return .success(String(Int(ceil(Double(n\
    \ + m) / 2)), radix: 2))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp4umeuc2a.swift:21:36: error: cannot find 'ceil' in scope\n    \
    \    return .success(String(Int(ceil(Double(n + m) / 2)), radix: 2))\n       \
    \                            ^~~~\n"
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpcefo3ig7/tmpcefo3ig7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2046fdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2046cd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2046cd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2046cd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcefo3ig7                        0x0000563400278eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b20471cb460 __libc_start_main +
    245

    6    tmpcefo3ig7                        0x0000563400278649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let result = ((n + m) / 2).binarize()\n    return\
    \ .success(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpym1__31x.swift:19:32: error: value of type 'Int' has no member\
    \ 'binarize'\n    let result = ((n + m) / 2).binarize()\n                 ~~~~~~~~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // your code here\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    let average = (n + m)\
    \ / 2\n    let binary = String(average, radix: 2)\n    return .success(\"0b\\\
    (binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m:\
    \ 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_sb1igfr/tmp_sb1igfr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d9f0a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d9ed9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d9ed9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d9ed9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_sb1igfr                        0x0000557808627eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b6d9f294460 __libc_start_main +
    245

    6    tmp_sb1igfr                        0x0000557808627649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n + m) * (m - n + 1) / 2\n    let average\
    \ = sum / (m - n + 1)\n    return .success(\"0b\\(String(average, radix: 2))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp5sgy7ojz/tmp5sgy7ojz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9748c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9748927b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9748927988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97489267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5sgy7ojz                        0x00005629361c5eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b9748e1c460 __libc_start_main +
    245

    6    tmp5sgy7ojz                        0x00005629361c5649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // implement your\
    \ solution here\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp9gvgfxno/tmp9gvgfxno.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefa5e21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefa5b18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefa5b18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefa5b177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9gvgfxno                        0x000055d3b2ca3635 <unavailable> + 5685

    5    libc.so.6                          0x00002aefa600d460 __libc_start_main +
    245

    6    tmp9gvgfxno                        0x000055d3b2ca3239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n  return n > m ? .failure(-1)\
    \ : .success(\"0b\\(String(format: \"%b\", (n + m)/2))\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmptq2q1zxx.swift:18:53: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n  return n > m ? .failure(-1)\
    \ : .success(\"0b\\(String(format: \"%b\", (n + m)/2))\")\n                  \
    \                                  ^~~~~~~\n                                 \
    \                    repeating     count: \n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    return avg > m || avg < n ? .failure(-1)\
    \ : .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpg9_7qfmw/tmpg9_7qfmw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afed1d04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afed19fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afed19fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afed19fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9_7qfmw                        0x000055781e4d8fe8 <unavailable> + 8168

    5    libc.so.6                          0x00002afed1ef0460 __libc_start_main +
    245

    6    tmpg9_7qfmw                        0x000055781e4d8779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    switch (n, m) {\n\
    \    case let (n, m) where n > m:\n        return .failure(-1)\n    case let (n,\
    \ m):\n        let avg = (n + m) / 2\n        let bin = String(avg, radix: 2)\n\
    \        return .success(\"0b\\(bin)\")\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp4ijkf10s/tmp4ijkf10s.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2276364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b227605bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b227605b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b227605a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ijkf10s                        0x000055d40f834eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b2276550460 __libc_start_main +
    245

    6    tmp4ijkf10s                        0x000055d40f834649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let rounded\
    \ = sum / (m - n + 1)\n    return .success(String(rounded, radix: 2))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpojktlt8r/tmpojktlt8r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac286b71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac286868b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac286868988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2868677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojktlt8r                        0x00005582687df8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ac286d5d460 __libc_start_main +
    245

    6    tmpojktlt8r                        0x00005582687df4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // find the average\
    \ by adding n + m and dividing by 2\n    let avg = (n + m) / 2\n    // convert\
    \ the answer to binary and return the result\n    return Result.success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpx39dkqnq/tmpx39dkqnq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b212dbf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b212d8eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b212d8ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b212d8ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx39dkqnq                        0x000055b36d6c8eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b212dde3460 __libc_start_main +
    245

    6    tmpx39dkqnq                        0x000055b36d6c8649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    var result: String\
    \ = \"\"\n    if n > m {\n        return .failure(-1)\n    }\n    else {\n   \
    \     let sum: Int = n + m\n        let total: Int = m - n + 1\n        var div:\
    \ Int = sum / total\n        while div > 0 {\n            result = result + \"\
    \\(div % 2)\"\n            div = div / 2\n        }\n        let begin: String.Index\
    \ = result.startIndex\n        let end: String.Index = result.index(begin, offsetBy:\
    \ result.count)\n        let range: Range<String.Index> = begin..<end\n      \
    \  result = String(result[range].reversed())\n        return .success(\"0b\" +\
    \ result)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpd7dpm6qr/tmpd7dpm6qr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f07446c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f0713db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f0713d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f0713c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7dpm6qr                        0x000055ac23f99cd5 <unavailable> + 7381

    5    libc.so.6                          0x00002b3f07632460 __libc_start_main +
    245

    6    tmpd7dpm6qr                        0x000055ac23f998d9 <unavailable> + 6361

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // Add code here\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp884clex7/tmp884clex7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07dde85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07ddb7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07ddb7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07ddb7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp884clex7                        0x000056351f476635 <unavailable> + 5685

    5    libc.so.6                          0x00002b07de071460 __libc_start_main +
    245

    6    tmp884clex7                        0x000056351f476239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (m + n) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_urc3dhq/tmp_urc3dhq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff19f6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff19c64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff19c64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff19c637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_urc3dhq                        0x0000562b61e62eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002aff1a159460 __libc_start_main +
    245

    6    tmp_urc3dhq                        0x0000562b61e62649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let avg = (n + m)\
    \ / 2\n    let rounded = Int(Double(avg).rounded())\n    if n > m {\n        return\
    \ .failure(-1)\n    }\n    return .success(\"0b\\(String(rounded, radix: 2))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.4oCUQf/tmpjdhjtjti-1.o:tmpjdhjtjti-1.o:function $s11tmpjdhjtjti11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.4oCUQf/tmpjdhjtjti-1.o:tmpjdhjtjti-1.o:function $s11tmpjdhjtjti11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.4oCUQf/tmpjdhjtjti-1.o:tmpjdhjtjti-1.o:function $s11tmpjdhjtjti11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.4oCUQf/tmpjdhjtjti-1.o:tmpjdhjtjti-1.o:function $s11tmpjdhjtjti11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.4oCUQf/tmpjdhjtjti-1.o:tmpjdhjtjti-1.o:function $s11tmpjdhjtjti11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.4oCUQf/tmpjdhjtjti-1.o:tmpjdhjtjti-1.o:function $s11tmpjdhjtjti11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.4oCUQf/tmpjdhjtjti-1.o:tmpjdhjtjti-1.o:function $s11tmpjdhjtjti11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n  var result: Result<String,\
    \ Int>\n  let div = (n + m) / 2\n  if div <= m {\n    result = .success(String(div,\
    \ radix: 2))\n  } else {\n    result = .failure(-1)\n  }\n  return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpmyll492e/tmpmyll492e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad309364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad30905bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad30905b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad30905a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyll492e                        0x000055629a254775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad309550460 __libc_start_main +
    245

    6    tmpmyll492e                        0x000055629a254379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let result = Int((Double(n) + Double(m)) / 2.0).binaryString\n\
    \    return .success(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp9e4eujxc.swift:19:53: error: value of type 'Int' has no member\
    \ 'binaryString'\n    let result = Int((Double(n) + Double(m)) / 2.0).binaryString\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // your code here\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: '/tmp/tmp3uy9cupt.swift:19:1: error: missing return in global function expected
    to return ''Result<String, Int>''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    return .success(String(Int(floor(((n + m) / 2.0)\
    \ + 0.5)), radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpp02ygowd.swift:19:32: error: cannot find 'floor' in scope\n   \
    \ return .success(String(Int(floor(((n + m) / 2.0) + 0.5)), radix: 2))\n     \
    \                          ^~~~~\n/tmp/tmpp02ygowd.swift:19:42: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n    return .success(String(Int(floor(((n\
    \ + m) / 2.0) + 0.5)), radix: 2))\n                                         ^\n\
    \                                      Double()\n"
  stdout: ''
  timestamp: 1660009159
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let avg = (n + m)\
    \ / 2\n    if n > m {\n        return .failure(-1)\n    }\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7xep_5k_/tmp7xep_5k_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e27ea5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e27b9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e27b9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e27b9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xep_5k_                        0x000055cee36e7eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b4e28091460 __libc_start_main +
    245

    6    tmp7xep_5k_                        0x000055cee36e7649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    0b11\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpfsdw6kdn/tmpfsdw6kdn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11089a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110869cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110869c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110869b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsdw6kdn                        0x0000560b0c4bb73f <unavailable> + 5951

    5    libc.so.6                          0x00002b1108b91460 __libc_start_main +
    245

    6    tmpfsdw6kdn                        0x0000560b0c4bb239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let answer = ((n + m) / 2).bin\n    return .success(answer)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpdu7n0epx.swift:19:32: error: value of type 'Int' has no member\
    \ 'bin'\n    let answer = ((n + m) / 2).bin\n                 ~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    \n    if (n > m) {\n\
    \        return .failure(-1)\n    }\n    \n    let avg = (n + m) / 2\n    return\
    \ .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp3te3c1ef/tmp3te3c1ef.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1007f6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1007c65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1007c65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1007c647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3te3c1ef                        0x00005648d79f6eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b100815a460 __libc_start_main +
    245

    6    tmp3te3c1ef                        0x00005648d79f6649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let list = Array(n...m)\n\
    \    let average = list.reduce(0, +) / list.count\n    if n > m {\n        return\
    \ .failure(-1)\n    }\n    return .success(String(average, radix: 2))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpwydink7v/tmpwydink7v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9efbeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9ef8e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9ef8e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9ef8e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwydink7v                        0x000055abc03d5975 <unavailable> + 6517

    5    libc.so.6                          0x00002ba9efdda460 __libc_start_main +
    245

    6    tmpwydink7v                        0x000055abc03d5579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result<String,\
    \ Int>{\n        if n > m {\n            throw -1\n        }\n        let avg\
    \ = Double(n + m) / 2\n        let avgInt = Int(avg.rounded())\n        return\
    \ \"0b\\(String(avgInt, radix: 2))\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpmvyn2ojp.swift:18:12: error: referencing initializer 'init(catching:)'\
    \ on 'Result' requires the types 'Int' and 'any Error' be equivalent\n    return\
    \ Result<String, Int>{\n           ^\nSwift.Result:1:11: note: where 'Failure'\
    \ = 'Int'\nextension Result where Failure == Error {\n          ^\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = (n + m) / 2\n    let binary = average.binary\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmprnpstvoy.swift:20:26: error: value of type 'Int' has no member\
    \ 'binary'\n    let binary = average.binary\n                 ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Int(floor(Double(n + m) / 2))\n    return\
    \ .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpnfqgks8u.swift:19:19: error: cannot find 'floor' in scope\n   \
    \ let avg = Int(floor(Double(n + m) / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = (n + m) / 2\n    let binary = average.binaryString\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpu_qxn6m6.swift:20:26: error: value of type 'Int' has no member\
    \ 'binaryString'\n    let binary = average.binaryString\n                 ~~~~~~~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    \\(Int(round(Double(n + m) / 2)))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpbgeql6x6.swift:18:28: error: cannot find 'round' in scope\n   \
    \ return .success(\"\\(Int(round(Double(n + m) / 2)))\")\n                   \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Int(Double(n + m) / 2.0)\n    return\
    \ .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpw8w6hu_y/tmpw8w6hu_y.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62e9972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62e9669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62e9669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62e96687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8w6hu_y                        0x0000557eec4c7eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b62e9b5e460 __libc_start_main +
    245

    6    tmpw8w6hu_y                        0x0000557eec4c7649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    } else {\n        let avg = (n + m) / 2\n       \
    \ return .success(\"0b\\(String(avg, radix: 2))\")\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp_vfnuwur/tmp_vfnuwur.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1eb368c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1eb05fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1eb05f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1eb05e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vfnuwur                        0x000055bb7644aeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab1eb554460 __libc_start_main +
    245

    6    tmp_vfnuwur                        0x000055bb7644a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n  if n > m {\n    return\
    \ .failure(-1)\n  }\n  let sum = (n + m) * (m - n + 1) / 2\n  let result = Int(round(Double(sum)\
    \ / Double(m - n + 1)))\n  return .success(String(result, radix: 2))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp372o4zwx.swift:22:20: error: cannot find 'round' in scope\n  let\
    \ result = Int(round(Double(sum) / Double(m - n + 1)))\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = m + n\n    let count = (m - n) +\
    \ 1\n    let average = sum / count\n    let binaryAverage = String(average, radix:\
    \ 2)\n    return .success(\"0b\\(binaryAverage)\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpi1gyq_y8/tmpi1gyq_y8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae181cd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1819cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1819cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1819ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1gyq_y8                        0x000055a2a173ca45 <unavailable> + 6725

    5    libc.so.6                          0x00002ae181ec4460 __libc_start_main +
    245

    6    tmpi1gyq_y8                        0x000055a2a173c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    \n    if n <= m {\n\
    \        let avg = n + m / 2\n        return .success(avg.binaryRepresentation)\n\
    \    } else {\n        return .failure(-1)\n    }\n    \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpyx_wemqj.swift:21:29: error: value of type 'Int' has no member\
    \ 'binaryRepresentation'\n        return .success(avg.binaryRepresentation)\n\
    \                        ~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = n + m\n    let remainder = sum % 2\n\
    \    let avg = sum / 2\n    return .success(\"0b\\(String(avg, radix: 2))\\(remainder\
    \ == 1 ? \"1\" : \"0\")\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpbfz0jboc/tmpbfz0jboc.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add26c21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add26918b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add26918988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add269177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfz0jboc                        0x0000562c77157a45 <unavailable> + 6725

    5    libc.so.6                          0x00002add26e0d460 __libc_start_main +
    245

    6    tmpbfz0jboc                        0x0000562c77157649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return (n > m) ? .failure(-1)\
    \ :\n        .success(String(Array(((n+m)/2).toBinary()).dropFirst()))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmplitq3rlt.swift:19:41: error: value of type 'Int' has no member\
    \ 'toBinary'\n        .success(String(Array(((n+m)/2).toBinary()).dropFirst()))\n\
    \                              ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result<String,\
    \ Int>.failure(-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpb52bdl0z/tmpb52bdl0z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15b856dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15b8264b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15b8264988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15b82637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb52bdl0z                        0x00005596efc9c635 <unavailable> + 5685

    5    libc.so.6                          0x00002b15b8759460 __libc_start_main +
    245

    6    tmpb52bdl0z                        0x00005596efc9c239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = n + (m - n) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmprukhofqe/tmprukhofqe.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b101a3a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b101a098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b101a098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b101a0977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprukhofqe                        0x000055bbb4ecdeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b101a58d460 __libc_start_main +
    245

    6    tmprukhofqe                        0x000055bbb4ecd649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = (n + m) / 2\n    let binary = String(average,\
    \ radix: 2)\n    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp6hn65l_w/tmp6hn65l_w.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417bfd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417bcd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417bcd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417bccf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6hn65l_w                        0x000055c67e217eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b417c1c5460 __libc_start_main +
    245

    6    tmp6hn65l_w                        0x000055c67e217649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = Int(round(Double(n + m) / 2))\n \
    \   return .success(average.binary)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpqqq793dl.swift:19:23: error: cannot find 'round' in scope\n   \
    \ let average = Int(round(Double(n + m) / 2))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let mid = (n + m)\
    \ / 2\n    return m < n ? .failure(-1) : .success(String(mid, radix: 2))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7xhaqu3f/tmp7xhaqu3f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b094d000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b094ccf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b094ccf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b094ccf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xhaqu3f                        0x000056118c610775 <unavailable> + 6005

    5    libc.so.6                          0x00002b094d1ec460 __libc_start_main +
    245

    6    tmp7xhaqu3f                        0x000056118c610379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = (m + n) / 2\n    return .success(\"\
    0b\\(String(average, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpsacf29va/tmpsacf29va.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cfc24cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cfbf43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cfbf43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cfbf427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsacf29va                        0x00005576a1488eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b0cfc438460 __libc_start_main +
    245

    6    tmpsacf29va                        0x00005576a1488649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let avg = (n + m)\
    \ / 2\n    let rounded_avg = Int(round(Double(avg)))\n    return avg <= m && avg\
    \ >= n ? .success(String(rounded_avg, radix: 2)) : .failure(-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmp6agp8kch.swift:19:27: error: cannot find 'round' in scope\n   \
    \ let rounded_avg = Int(round(Double(avg)))\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = (n + m) / 2\n    let binary = String(average,\
    \ radix: 2)\n    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp6hn65l_w/tmp6hn65l_w.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417bfd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417bcd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417bcd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417bccf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6hn65l_w                        0x000055c67e217eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b417c1c5460 __libc_start_main +
    245

    6    tmp6hn65l_w                        0x000055c67e217649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result(catching:\
    \ {\n        if n > m {\n            throw -1\n        }\n        let result =\
    \ n + m\n        let bin = result.binaryString()\n        let left = bin.startIndex\n\
    \        let right = bin.index(bin.endIndex, offsetBy: -1)\n        let binRange\
    \ = left..<right\n        return \"0b\\(bin[binRange])\"\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpa1ekftij.swift:18:12: error: cannot convert return expression of\
    \ type 'Result<String, any Error>' to return type 'Result<String, Int>'\n    return\
    \ Result(catching: {\n           ^\n/tmp/tmpa1ekftij.swift:18:12: note: arguments\
    \ to generic parameter 'Failure' ('any Error' and 'Int') are expected to be equal\n\
    \    return Result(catching: {\n           ^\n/tmp/tmpa1ekftij.swift:23:26: error:\
    \ value of type 'Int' has no member 'binaryString'\n        let bin = result.binaryString()\n\
    \                  ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = Int(round(Double(n + m) / 2))\n \
    \   return .success(String(average, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpjdyxaf9u.swift:19:23: error: cannot find 'round' in scope\n   \
    \ let average = Int(round(Double(n + m) / 2))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n <= m {\n    \
    \    let sum = (n + m) * (m - n + 1) / 2\n        let avg = Int(round(Double(sum)\
    \ / Double(m - n + 1)))\n        return .success(String(avg, radix: 2))\n    }\
    \ else {\n        return .failure(-1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpoamrevbh.swift:20:23: error: cannot find 'round' in scope\n   \
    \     let avg = Int(round(Double(sum) / Double(m - n + 1)))\n                \
    \      ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (m + n) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpdjub63xq/tmpdjub63xq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a48279c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a47f70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a47f70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a47f6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjub63xq                        0x000055fd20d9aeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b1a48465460 __libc_start_main +
    245

    6    tmpdjub63xq                        0x000055fd20d9a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    0b11\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpfsdw6kdn/tmpfsdw6kdn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11089a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110869cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110869c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110869b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsdw6kdn                        0x0000560b0c4bb73f <unavailable> + 5951

    5    libc.so.6                          0x00002b1108b91460 __libc_start_main +
    245

    6    tmpfsdw6kdn                        0x0000560b0c4bb239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = Int(ceil(Double(sum)\
    \ / Double(m - n + 1)))\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp2rf0f7a6.swift:20:19: error: cannot find 'ceil' in scope\n    let\
    \ avg = Int(ceil(Double(sum) / Double(m - n + 1)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp33noc_te/tmp33noc_te.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e80a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e80765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e80765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e807647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33noc_te                        0x0000561b226a4635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8e80c5a460 __libc_start_main +
    245

    6    tmp33noc_te                        0x0000561b226a4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = Int(Float(n + m) / 2.0)\n    return\
    \ .success(String(average, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpgeguy_av/tmpgeguy_av.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da40a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da3d9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da3d9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da3d9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgeguy_av                        0x000055dd9d561775 <unavailable> + 6005

    5    libc.so.6                          0x00002b5da4293460 __libc_start_main +
    245

    6    tmpgeguy_av                        0x000055dd9d561379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let avg = (n + m)\
    \ / 2\n    if avg < n {\n        return .failure(-1)\n    }\n    let bin = String(avg,\
    \ radix: 2)\n    return .success(\"0b\\(bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpbji3e_6f/tmpbji3e_6f.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45f747c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45f43eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45f43e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45f43d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbji3e_6f                        0x000055a1c698ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab45f933460 __libc_start_main +
    245

    6    tmpbji3e_6f                        0x000055a1c698c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp2nr7zlq4.swift:18:5: error: non-void function should return a value\n\
    \    return\n    ^\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    var n = n\n    var\
    \ m = m\n    var sum = 0\n    if n > m {\n        return .failure(-1)\n    }\n\
    \    while n <= m {\n        sum += n\n        n += 1\n    }\n    let average\
    \ = sum / ((m-n)+1)\n    return .success(String(average, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14137: Fatal error: Division by zero

    Current stack trace:

    0    libswiftCore.so                    0x00002b20689d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20686cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b20686cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b20686cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b20686ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1tb26_z7                        0x0000559f69fbf5d4 <unavailable> + 9684

    6    tmp1tb26_z7                        0x0000559f69fbe660 <unavailable> + 5728

    7    libc.so.6                          0x00002b2068bc2460 __libc_start_main +
    245

    8    tmp1tb26_z7                        0x0000559f69fbe379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    0b11\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpfsdw6kdn/tmpfsdw6kdn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11089a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110869cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110869c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110869b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsdw6kdn                        0x0000560b0c4bb73f <unavailable> + 5951

    5    libc.so.6                          0x00002b1108b91460 __libc_start_main +
    245

    6    tmpfsdw6kdn                        0x0000560b0c4bb239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let avg = (n + m)\
    \ / 2\n    if n > m {\n        return .failure(-1)\n    }\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7xep_5k_/tmp7xep_5k_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e27ea5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e27b9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e27b9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e27b9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xep_5k_                        0x000055cee36e7eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b4e28091460 __libc_start_main +
    245

    6    tmp7xep_5k_                        0x000055cee36e7649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // Your code here\n\
    \    if (n < m) {\n        let avg = n + m/2\n        let binary = String(avg,\
    \ radix: 2)\n        return .success(\"0b\\(binary)\")\n    } else {\n       \
    \ return .failure(-1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpf6wl5lny/tmpf6wl5lny.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac65b261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac65af58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac65af58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac65af577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6wl5lny                        0x0000555f9b9fab4f <unavailable> + 6991

    5    libc.so.6                          0x00002ac65b44d460 __libc_start_main +
    245

    6    tmpf6wl5lny                        0x0000555f9b9fa649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let average = (m+n)/2\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    return .success(\"0b\\\
    (String(average, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpb7srmxlq/tmpb7srmxlq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b859a157c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8599e4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8599e4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8599e4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7srmxlq                        0x000055974d9faeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b859a343460 __libc_start_main +
    245

    6    tmpb7srmxlq                        0x000055974d9fa649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let decimalAverage = round((Double(n) + Double(m))\
    \ / 2)\n    let binaryAverage = String(decimalAverage, radix: 2)\n    return .success(\"\
    0b\\(binaryAverage)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp98c6knaz.swift:19:26: error: cannot find 'round' in scope\n   \
    \ let decimalAverage = round((Double(n) + Double(m)) / 2)\n                  \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // TODO\n    let result\
    \ = (n + m) / 2\n    if n > m {\n        return .failure(-1)\n    } else {\n \
    \       return .success(\"0b\\(String(result, radix: 2))\")\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp922lh4l7/tmp922lh4l7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b804212fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8041e26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8041e26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8041e257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp922lh4l7                        0x00005599d8669eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b804231b460 __libc_start_main +
    245

    6    tmp922lh4l7                        0x00005599d8669649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = (sum\
    \ + ((m - n + 1) / 2)) / (m - n + 1)\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3i0j6zf9/tmp3i0j6zf9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba05b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba05b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba05b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba05b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3i0j6zf9                        0x00005563239168b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ba05b60c460 __libc_start_main +
    245

    6    tmp3i0j6zf9                        0x00005563239164b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result {\n\
    \        let avg = (n + m) / 2\n        return \"0b\\(String(avg, radix: 2))\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpcv0di8vo.swift:18:12: error: cannot convert return expression of\
    \ type 'Result<String, any Error>' to return type 'Result<String, Int>'\n    return\
    \ Result {\n           ^\n/tmp/tmpcv0di8vo.swift:18:12: note: arguments to generic\
    \ parameter 'Failure' ('any Error' and 'Int') are expected to be equal\n    return\
    \ Result {\n           ^\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Int(Double(n + m) / 2.0)\n    return\
    \ .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpw8w6hu_y/tmpw8w6hu_y.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62e9972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62e9669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62e9669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62e96687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8w6hu_y                        0x0000557eec4c7eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b62e9b5e460 __libc_start_main +
    245

    6    tmpw8w6hu_y                        0x0000557eec4c7649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let average = (m +\
    \ n) / 2\n    if n > m {\n        return .failure(-1)\n    }\n    return .success(\"\
    0b\\(String(average, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpa5sw3ilx/tmpa5sw3ilx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a634c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a631bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a631bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a631ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5sw3ilx                        0x0000564443251eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b0a636b0460 __libc_start_main +
    245

    6    tmpa5sw3ilx                        0x0000564443251649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp33noc_te/tmp33noc_te.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e80a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e80765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e80765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e807647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33noc_te                        0x0000561b226a4635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8e80c5a460 __libc_start_main +
    245

    6    tmp33noc_te                        0x0000561b226a4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n+m)*(m-n+1)/2\n    let avg = sum/((m-n)+1)\n\
    \    return .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp_v019c9a/tmp_v019c9a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16d4f48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16d4c3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16d4c3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16d4c3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_v019c9a                        0x0000555f03412eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b16d5134460 __libc_start_main +
    245

    6    tmp_v019c9a                        0x0000555f03412649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpcefo3ig7/tmpcefo3ig7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2046fdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2046cd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2046cd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2046cd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcefo3ig7                        0x0000563400278eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b20471cb460 __libc_start_main +
    245

    6    tmpcefo3ig7                        0x0000563400278649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpcefo3ig7/tmpcefo3ig7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2046fdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2046cd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2046cd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2046cd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcefo3ig7                        0x0000563400278eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b20471cb460 __libc_start_main +
    245

    6    tmpcefo3ig7                        0x0000563400278649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = round((n + m).toDouble() / 2)\n \
    \   return .success(\"0b\\(average.toBinaryString())\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpkyt7ei2q.swift:19:19: error: cannot find 'round' in scope\n   \
    \ let average = round((n + m).toDouble() / 2)\n                  ^~~~~\n/tmp/tmpkyt7ei2q.swift:19:33:\
    \ error: value of type 'Int' has no member 'toDouble'\n    let average = round((n\
    \ + m).toDouble() / 2)\n                        ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let total = (m - n + 1) * (n + m) / 2\n  \
    \  let result =  String(total / (m - n + 1), radix: 2)\n    return .success(\"\
    0b\\(result)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp9t8semiv/tmp9t8semiv.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01eeb72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01ee869b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01ee869988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01ee8687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9t8semiv                        0x000055fc7d692eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b01eed5e460 __libc_start_main +
    245

    6    tmp9t8semiv                        0x000055fc7d692649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result {\n\
    \        guard n <= m else { throw -1 }\n        let sum = (n...m).reduce(0, +)\n\
    \        let rounded = (sum / (m - n + 1))\n        return \"0b\\(String(rounded,\
    \ radix: 2))\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmppnckgw_m.swift:18:12: error: cannot convert return expression of\
    \ type 'Result<String, any Error>' to return type 'Result<String, Int>'\n    return\
    \ Result {\n           ^\n/tmp/tmppnckgw_m.swift:18:12: note: arguments to generic\
    \ parameter 'Failure' ('any Error' and 'Int') are expected to be equal\n    return\
    \ Result {\n           ^\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = Int(Double(n + m) / 2.0 + 0.5)\n\
    \    return .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpebr1xd_a/tmpebr1xd_a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c9ad5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c9aa53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c9aa53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c9aa527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpebr1xd_a                        0x00005620f9d88c68 <unavailable> + 7272

    5    libc.so.6                          0x00002b1c9af48460 __libc_start_main +
    245

    6    tmpebr1xd_a                        0x00005620f9d88649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // your code here\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    var total = 0\n    for\
    \ i in n...m {\n        total += i\n    }\n    return .success(\"0b\\(String(total\
    \ / (m - n + 1), radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8t59iffh/tmp8t59iffh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc4ea3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc4e734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc4e734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc4e7337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8t59iffh                        0x0000565142c53fa8 <unavailable> + 8104

    5    libc.so.6                          0x00002acc4ec29460 __libc_start_main +
    245

    6    tmp8t59iffh                        0x0000565142c53739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Int(ceil(Double(n + m) / 2))\n    return\
    \ .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpxu9eccx2.swift:19:19: error: cannot find 'ceil' in scope\n    let\
    \ avg = Int(ceil(Double(n + m) / 2))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // Your code here\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp6vvur10w/tmp6vvur10w.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bd01f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bcfeefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bcfeef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bcfeee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vvur10w                        0x00005652bf7bd635 <unavailable> + 5685

    5    libc.so.6                          0x00002b9bd03e4460 __libc_start_main +
    245

    6    tmp6vvur10w                        0x00005652bf7bd239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n  if n > m {\n    return\
    \ .failure(-1)\n  }\n  let avg = (n + m) / 2\n  return .success(\"0b\\(String(avg,\
    \ radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84793c82/tmp84793c82.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25fecec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25fbc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25fbc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25fbc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84793c82                        0x000055f34b709eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ae2600ba460 __libc_start_main +
    245

    6    tmp84793c82                        0x000055f34b709649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let rounded_average = Int(Float(n + m) / 2.0 +\
    \ 0.5)\n    return .success(String(rounded_average, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp0bn7a7zi/tmp0bn7a7zi.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af42046ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af420165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af420165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4201647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0bn7a7zi                        0x000055cc5e43d775 <unavailable> + 6005

    5    libc.so.6                          0x00002af42065a460 __libc_start_main +
    245

    6    tmp0bn7a7zi                        0x000055cc5e43d379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(\"\
    0b\\(Int((n + m) / 2).binaryString)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpd1vb8oo7.swift:18:49: error: value of type 'Int' has no member\
    \ 'binaryString'\n    return Result.success(\"0b\\(Int((n + m) / 2).binaryString)\"\
    )\n                               ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // your code here\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpemlpdo8y/tmpemlpdo8y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b122b5adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b122b2a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b122b2a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b122b2a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemlpdo8y                        0x000055a5e7536635 <unavailable> + 5685

    5    libc.so.6                          0x00002b122b799460 __libc_start_main +
    245

    6    tmpemlpdo8y                        0x000055a5e7536239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = Int(round(Double(n + m) / 2))\n\
    \    return .success(avg.bin)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpk_wsyc46.swift:21:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(n + m) / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // your code here\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpemlpdo8y/tmpemlpdo8y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b122b5adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b122b2a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b122b2a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b122b2a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemlpdo8y                        0x000055a5e7536635 <unavailable> + 5685

    5    libc.so.6                          0x00002b122b799460 __libc_start_main +
    245

    6    tmpemlpdo8y                        0x000055a5e7536239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp33noc_te/tmp33noc_te.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e80a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e80765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e80765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e807647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33noc_te                        0x0000561b226a4635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8e80c5a460 __libc_start_main +
    245

    6    tmp33noc_te                        0x0000561b226a4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    } else {\n        let avg = (n + m) / 2\n       \
    \ return .success(\"0b\\(String(avg, radix: 2))\")\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp_vfnuwur/tmp_vfnuwur.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1eb368c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1eb05fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1eb05f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1eb05e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vfnuwur                        0x000055bb7644aeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab1eb554460 __libc_start_main +
    245

    6    tmp_vfnuwur                        0x000055bb7644a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let avrg = (n + m)\
    \ / 2\n    if n > m {\n        return .failure(-1)\n    }\n    return .success(\"\
    0b\\(String(avrg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpi_b2pzkv/tmpi_b2pzkv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fa4883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fa457ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fa457a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fa45797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_b2pzkv                        0x000055e40546aeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8fa4a6f460 __libc_start_main +
    245

    6    tmpi_b2pzkv                        0x000055e40546a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n+m) * (m-n+1) / 2\n    let roundedAvg\
    \ = sum / (m-n+1)\n    let binary = String(roundedAvg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp2zl007b1/tmp2zl007b1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0232e24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0232b1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0232b1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0232b1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2zl007b1                        0x00005621962b7eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b0233010460 __libc_start_main +
    245

    6    tmp2zl007b1                        0x00005621962b7649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n  let average = (n + m)\
    \ / 2\n  if n > m {\n    return .failure(-1)\n  }\n  return .success(\"0b\\(String(average,\
    \ radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpof0ci1rr/tmpof0ci1rr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32d3427c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32d311eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32d311e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32d311d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpof0ci1rr                        0x00005555f9ed2eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b32d3613460 __libc_start_main +
    245

    6    tmpof0ci1rr                        0x00005555f9ed2649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpcefo3ig7/tmpcefo3ig7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2046fdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2046cd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2046cd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2046cd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcefo3ig7                        0x0000563400278eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b20471cb460 __libc_start_main +
    245

    6    tmpcefo3ig7                        0x0000563400278649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = Double(n + m) / 2\n    let roundedAvg\
    \ = Int(round(avg))\n    let binary = String(roundedAvg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp4fyrn_d6.swift:22:26: error: cannot find 'round' in scope\n   \
    \ let roundedAvg = Int(round(avg))\n                         ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    switch n < m {\n \
    \   case true:\n        let result = (n + m) / 2\n        return .success(\"0b\\\
    (String(result, radix: 2))\")\n    case false:\n        return .failure(-1)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpiv6u936d/tmpiv6u936d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5362defc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5362ae6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5362ae6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5362ae57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv6u936d                        0x000056277da7aeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b5362fdb460 __libc_start_main +
    245

    6    tmpiv6u936d                        0x000056277da7a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Int(round(Double(n + m) / 2))\n    return\
    \ .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpgc5mdktv.swift:19:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(n + m) / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    var total = 0\n    for num in n...m {\n  \
    \      total += num\n    }\n    let avg = Int(round(Double(total) / Double(m -\
    \ n + 1)))\n    return .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpbk0jbzd8.swift:25:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(total) / Double(m - n + 1)))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    var sum = 0\n    for i in n...m {\n      \
    \  sum += i\n    }\n    let res = sum / (m - n + 1)\n    let binary = String(res,\
    \ radix: 2)\n    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpehn97t4h/tmpehn97t4h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b821e876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821e56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821e56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b821e56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehn97t4h                        0x000055d8b58bafa8 <unavailable> + 8104

    5    libc.so.6                          0x00002b821ea62460 __libc_start_main +
    245

    6    tmpehn97t4h                        0x000055d8b58ba739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let result = (n...m).reduce(0, +) / (m - n + 1)\n\
    \    return .success(String(result, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp81uchf1n/tmp81uchf1n.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea18c5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea18954b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea18954988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea189537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81uchf1n                        0x00005581ace4b8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002aea18e49460 __libc_start_main +
    245

    6    tmp81uchf1n                        0x00005581ace4b4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = Int(floor(Double(n + m) / 2))\n \
    \   return .success(\"0b\\(String(average, radix: 2))\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmprve4qoxg.swift:19:23: error: cannot find 'floor' in scope\n   \
    \ let average = Int(floor(Double(n + m) / 2))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let average\
    \ = sum / (m - n + 1)\n    return .success(String(average, radix: 2))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpd5cbx1cc/tmpd5cbx1cc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12062afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1205fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1205fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1205fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5cbx1cc                        0x000056317947f8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b120649b460 __libc_start_main +
    245

    6    tmpd5cbx1cc                        0x000056317947f4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = ((n + m) / 2).binaryString\n    return\
    \ .success(\"0b\\(average)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpsdz4nz7g.swift:19:33: error: value of type 'Int' has no member\
    \ 'binaryString'\n    let average = ((n + m) / 2).binaryString\n             \
    \     ~~~~~~~~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp33noc_te/tmp33noc_te.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e80a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e80765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e80765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e807647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33noc_te                        0x0000561b226a4635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8e80c5a460 __libc_start_main +
    245

    6    tmp33noc_te                        0x0000561b226a4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    \n    guard n <= m\
    \ else {\n        return .failure(-1)\n    }\n    \n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = (sum / (m - n + 1))\n    let rounded_avg = String(avg, radix:\
    \ 2)\n    \n    return .success(\"0b\\(rounded_avg)\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpveljuvjc/tmpveljuvjc.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be2ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be2bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be2bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be2bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveljuvjc                        0x000056174c7abfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b4be30c1460 __libc_start_main +
    245

    6    tmpveljuvjc                        0x000056174c7ab779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    switch (n, m) {\n\
    \    case let (i, j) where i > j:\n        return .failure(-1)\n    default:\n\
    \        let sum = (n...m).reduce(0, +)\n        let avg = sum / (m - n + 1)\n\
    \        return .success(\"0b\\(String(avg, radix: 2))\")\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpc0nec2jf/tmpc0nec2jf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42db720c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42db417b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42db417988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42db4167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc0nec2jf                        0x000055eec6932fe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b42db90c460 __libc_start_main +
    245

    6    tmpc0nec2jf                        0x000055eec6932779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = n + m\n    var n = n\n    while\
    \ n <= m {\n        n += 1\n    }\n    let average = n / 2\n    let binaryString\
    \ = String(average, radix: 2)\n    return .success(\"0b\\(binaryString)\")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp21ik5olv/tmp21ik5olv.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55f4838c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55f452fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55f452f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55f452e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21ik5olv                        0x00005612a24a0b4f <unavailable> + 6991

    5    libc.so.6                          0x00002b55f4a24460 __libc_start_main +
    245

    6    tmp21ik5olv                        0x00005612a24a0649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n + m) * (m - n + 1) / 2\n    let rounded\
    \ = Int(floor(Double(sum) / Double(m - n + 1) + 0.5))\n    return .success(\"\
    0b\\(String(rounded, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpa7qwa0gi.swift:20:23: error: cannot find 'floor' in scope\n   \
    \ let rounded = Int(floor(Double(sum) / Double(m - n + 1) + 0.5))\n          \
    \            ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    return .success(String(format: \"0b%b\", [Int(Double(n\
    \ + m) / 2.0)]))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp6vuj0zom.swift:19:27: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    return .success(String(format:\
    \ \"0b%b\", [Int(Double(n + m) / 2.0)]))\n                          ^~~~~~~\n\
    \                           repeating       count: \n/tmp/tmp6vuj0zom.swift:19:44:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return .success(String(format: \"0b%b\", [Int(Double(n + m) / 2.0)]))\n \
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Int(n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpwd1nf2nh/tmpwd1nf2nh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dfeee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dfebddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dfebdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dfebdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwd1nf2nh                        0x000055de1e0e9fa8 <unavailable> + 8104

    5    libc.so.6                          0x00002b2dff0d2460 __libc_start_main +
    245

    6    tmpwd1nf2nh                        0x000055de1e0e9739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let result = (Double(n) + Double(m)) / 2.0\n  \
    \  let roundedResult = round(result)\n    let binResult = String(Int(roundedResult),\
    \ radix: 2)\n    return .success(\"0b\\(binResult)\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmp5vogjzct.swift:20:25: error: cannot find 'round' in scope\n   \
    \ let roundedResult = round(result)\n                        ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // Your code here.\n\
    \    let x = (m - n) / 2\n    let y = m - x\n    if (m < n) {\n        return\
    \ .failure(-1)\n    }\n    return .success(\"0b\\(y.binaryValue)\")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpoleneqva.swift:24:28: error: value of type 'Int' has no member\
    \ 'binaryValue'\n    return .success(\"0b\\(y.binaryValue)\")\n              \
    \           ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // your code here\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    else {\n        var average\
    \ = 0\n        for number in n...m {\n            average += number\n        }\n\
    \        average = (average + ((m - n) / 2)) / (m - n + 1)\n        let binary\
    \ = String(average, radix: 2)\n        return .success(\"0b\\(binary)\")\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp1eprpgzs/tmp1eprpgzs.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f3c6f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f3c3eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f3c3ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f3c3ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1eprpgzs                        0x000056122ae4cfa8 <unavailable> + 8104

    5    libc.so.6                          0x00002b9f3c8e3460 __libc_start_main +
    245

    6    tmp1eprpgzs                        0x000056122ae4c739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = n + m\n    let val = sum / 2\n \
    \   let avg = String(val, radix: 2)\n    return .success(\"0b\\(avg)\")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpc23xdz0u/tmpc23xdz0u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1037229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036f20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036f20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1036f1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc23xdz0u                        0x0000560a5e9c8eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b1037415460 __libc_start_main +
    245

    6    tmpc23xdz0u                        0x0000560a5e9c8649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpcefo3ig7/tmpcefo3ig7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2046fdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2046cd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2046cd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2046cd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcefo3ig7                        0x0000563400278eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b20471cb460 __libc_start_main +
    245

    6    tmpcefo3ig7                        0x0000563400278649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    \n    func average(_\
    \ n: Int, _ m: Int) -> Int {\n        return Int((Double(n + m) / 2.0).rounded())\n\
    \    }\n    \n    func intToBinary(_ n: Int) -> String {\n        return String(n,\
    \ radix: 2)\n    }\n    \n    guard n <= m else { return .failure(-1) }\n    let\
    \ average = average(n, m)\n    let binary = intToBinary(average)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.SCb5nh/tmpjuia1tpm-1.o:tmpjuia1tpm-1.o:function $s11tmpjuia1tpm11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF7averageL_yS2i_SitF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.SCb5nh/tmpjuia1tpm-1.o:tmpjuia1tpm-1.o:function $s11tmpjuia1tpm11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF7averageL_yS2i_SitF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.SCb5nh/tmpjuia1tpm-1.o:tmpjuia1tpm-1.o:function $s11tmpjuia1tpm11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF7averageL_yS2i_SitF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.SCb5nh/tmpjuia1tpm-1.o:tmpjuia1tpm-1.o:function $s11tmpjuia1tpm11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF7averageL_yS2i_SitF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.SCb5nh/tmpjuia1tpm-1.o:tmpjuia1tpm-1.o:function $s11tmpjuia1tpm11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF7averageL_yS2i_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.SCb5nh/tmpjuia1tpm-1.o:tmpjuia1tpm-1.o:function $s11tmpjuia1tpm11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF7averageL_yS2i_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.SCb5nh/tmpjuia1tpm-1.o:tmpjuia1tpm-1.o:function $s11tmpjuia1tpm11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF7averageL_yS2i_SitF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result(n <\
    \ m ? (n + m) / 2 : -1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpmliwa5ph.swift:18:19: error: missing argument label 'catching:'\
    \ in call\n    return Result(n < m ? (n + m) / 2 : -1)\n                  ^\n\
    \                  catching: \n/tmp/tmpmliwa5ph.swift:18:12: error: cannot convert\
    \ return expression of type 'Result<String, any Error>' to return type 'Result<String,\
    \ Int>'\n    return Result(n < m ? (n + m) / 2 : -1)\n           ^\n/tmp/tmpmliwa5ph.swift:18:12:\
    \ note: arguments to generic parameter 'Failure' ('any Error' and 'Int') are expected\
    \ to be equal\n    return Result(n < m ? (n + m) / 2 : -1)\n           ^\n/tmp/tmpmliwa5ph.swift:18:25:\
    \ error: cannot convert value of type 'Int' to expected argument type '() throws\
    \ -> String'\n    return Result(n < m ? (n + m) / 2 : -1)\n                  \
    \      ^\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let sum = Int(Double(n\
    \ + m) / 2)\n    guard sum >= n else { return .failure(-1) }\n    return .success(\"\
    0b\\(String(sum, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpb2fawou8/tmpb2fawou8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8648365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b864805cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b864805c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b864805b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2fawou8                        0x0000556842fc9eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8648551460 __libc_start_main +
    245

    6    tmpb2fawou8                        0x0000556842fc9649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    var counter = 0\n\
    \    var sum = 0\n    for x in n...m {\n        sum += x\n        counter += 1\n\
    \    }\n    if counter == 0 {\n        return .failure(-1)\n    }\n    let result\
    \ = sum / counter\n    return .success(String(result, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpoooq8xyu/tmpoooq8xyu.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b30d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b2dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b2dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b2dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoooq8xyu                        0x0000563973d7b865 <unavailable> + 6245

    5    libc.so.6                          0x00002b74b32bd460 __libc_start_main +
    245

    6    tmpoooq8xyu                        0x0000563973d7b469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let rounded_avg\
    \ = Int(round(Double(sum) / Double(m - n + 1)))\n    return .success(String(rounded_avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmppx904dy8.swift:22:27: error: cannot find 'round' in scope\n   \
    \ let rounded_avg = Int(round(Double(sum) / Double(m - n + 1)))\n            \
    \              ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let result = (n...m).reduce(0, +) / (m - n\
    \ + 1)\n    return .success(String(result, radix: 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp7wfeuapq/tmp7wfeuapq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c4e81bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c4e512b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c4e512988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c4e5117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wfeuapq                        0x000055714e0478b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b4c4ea07460 __libc_start_main +
    245

    6    tmp7wfeuapq                        0x000055714e0474b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n...m).reduce(0, +) / (m - n +\
    \ 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpkrvympnb/tmpkrvympnb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8abaf89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8abac80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8abac80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8abac7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrvympnb                        0x000055d4d21698b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b8abb175460 __libc_start_main +
    245

    6    tmpkrvympnb                        0x000055d4d21694b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    0b11\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpfsdw6kdn/tmpfsdw6kdn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11089a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110869cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110869c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110869b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsdw6kdn                        0x0000560b0c4bb73f <unavailable> + 5951

    5    libc.so.6                          0x00002b1108b91460 __libc_start_main +
    245

    6    tmpfsdw6kdn                        0x0000560b0c4bb239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n + m) * (m - n + 1) / 2\n    let average\
    \ = sum / (m - n + 1)\n    return .success(\"0b\\(String(average, radix: 2))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp5sgy7ojz/tmp5sgy7ojz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9748c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9748927b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9748927988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97489267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5sgy7ojz                        0x00005629361c5eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b9748e1c460 __libc_start_main +
    245

    6    tmp5sgy7ojz                        0x00005629361c5649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let avg = (n + m)\
    \ / 2\n    return avg > m ? .failure(-1) : .success(\"0b\\(String(avg, radix:\
    \ 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m:\
    \ 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmprwp_5g34/tmprwp_5g34.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76aa173c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76a9e6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76a9e6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76a9e697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwp_5g34                        0x0000563f887f0eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b76aa35f460 __libc_start_main +
    245

    6    tmprwp_5g34                        0x0000563f887f0649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = (n...m).reduce(0, +) / (m -\
    \ n + 1)\n    return .success(String(average, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp6pon73_x/tmp6pon73_x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11776bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11773b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11773b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11773b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6pon73_x                        0x0000562e1004d8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b11778a7460 __libc_start_main +
    245

    6    tmp6pon73_x                        0x0000562e1004d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = Int(floor(Double(n + m) / 2))\n\
    \    return .success(\"0b\\(String(average, radix: 2))\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpv3zl7513.swift:21:23: error: cannot find 'floor' in scope\n   \
    \ let average = Int(floor(Double(n + m) / 2))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Int(round(Double(n + m) / 2))\n    return\
    \ .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpgc5mdktv.swift:19:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(n + m) / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    // Write your code below \U0001F913\n    let\
    \ roundedAvarage = floor((Double(n) + Double(m)) / 2)\n    let binaryString =\
    \ String(Int(roundedAvarage), radix: 2)\n    return .success(\"0b\\(binaryString)\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpn6h6v93r.swift:22:26: error: cannot find 'floor' in scope\n   \
    \ let roundedAvarage = floor((Double(n) + Double(m)) / 2)\n                  \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    var sum = 0\n    for\
    \ i in n...m {\n        sum += i\n    }\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    else {\n        return .success(String(sum/((m-n)+1), radix: 2))\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpzo8e1zva/tmpzo8e1zva.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b229519ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2294e95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2294e95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2294e947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo8e1zva                        0x000055bfebd3d865 <unavailable> + 6245

    5    libc.so.6                          0x00002b229538a460 __libc_start_main +
    245

    6    tmpzo8e1zva                        0x000055bfebd3d469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    \n    // your code\
    \ goes here.\n    \n    let sum = (n+m)*(m-n+1)/2\n    let average = Int(round(Double(sum)/Double(m-n+1)))\n\
    \    let binary = String(average, radix: 2)\n    let result = \"0b\" + binary\n\
    \    \n    if n > m {\n        return .failure(-1)\n    } else {\n        return\
    \ .success(result)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpdl7uhaet.swift:22:23: error: cannot find 'round' in scope\n   \
    \ let average = Int(round(Double(sum)/Double(m-n+1)))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let\
    \ roundedAvg = sum / (m - n + 1)\n    let binary = String(roundedAvg, radix: 2)\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp8lbll4xe/tmp8lbll4xe.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9efc427c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9efc11eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9efc11e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9efc11d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lbll4xe                        0x00005633a8a9ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b9efc613460 __libc_start_main +
    245

    6    tmp8lbll4xe                        0x00005633a8a9c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    0b1010\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m:\
    \ 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpoio2yjo8/tmpoio2yjo8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cbf030c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cbed27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cbed27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cbed267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoio2yjo8                        0x000055f93f574635 <unavailable> + 5685

    5    libc.so.6                          0x00002b6cbf21c460 __libc_start_main +
    245

    6    tmpoio2yjo8                        0x000055f93f574239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let output = String(avg, radix: 2)\n    return .success(\"\
    0b\\(output)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxdmql8u2/tmpxdmql8u2.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e7d4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7a46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7a46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7a457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdmql8u2                        0x000055e914099fe8 <unavailable> + 8168

    5    libc.so.6                          0x00002ac7e7f3b460 __libc_start_main +
    245

    6    tmpxdmql8u2                        0x000055e914099779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // TODO: Implement!\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp90c0vk2b/tmp90c0vk2b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7ee861c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7ee558b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7ee558988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7ee5577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90c0vk2b                        0x0000560e4ac5d635 <unavailable> + 5685

    5    libc.so.6                          0x00002ad7eea4d460 __libc_start_main +
    245

    6    tmp90c0vk2b                        0x0000560e4ac5d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n <= m {\n    \
    \    let avg = Double(n + m) / 2\n        let rounded = Int(round(avg))\n    \
    \    let binary = String(rounded, radix: 2)\n        return .success(\"0b\\(binary)\"\
    )\n    } else {\n        return .failure(-1)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpyb6l3rv4.swift:20:27: error: cannot find 'round' in scope\n   \
    \     let rounded = Int(round(avg))\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = Double(n + m) / 2\n    let decimal\
    \ = (avg - floor(avg)) >= 0.5 ? ceil(avg) : floor(avg)\n    return .success(\"\
    0b\\(String(Int(decimal), radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpwnq1fqqj.swift:22:26: error: cannot find 'floor' in scope\n   \
    \ let decimal = (avg - floor(avg)) >= 0.5 ? ceil(avg) : floor(avg)\n         \
    \                ^~~~~\n/tmp/tmpwnq1fqqj.swift:22:47: error: cannot find 'ceil'\
    \ in scope\n    let decimal = (avg - floor(avg)) >= 0.5 ? ceil(avg) : floor(avg)\n\
    \                                              ^~~~\n/tmp/tmpwnq1fqqj.swift:22:59:\
    \ error: cannot find 'floor' in scope\n    let decimal = (avg - floor(avg)) >=\
    \ 0.5 ? ceil(avg) : floor(avg)\n                                             \
    \             ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = (n...m).reduce(0, +) / (m -\
    \ n + 1)\n    return .success(String(average, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp6pon73_x/tmp6pon73_x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11776bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11773b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11773b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11773b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6pon73_x                        0x0000562e1004d8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b11778a7460 __libc_start_main +
    245

    6    tmp6pon73_x                        0x0000562e1004d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp33noc_te/tmp33noc_te.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e80a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e80765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e80765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e807647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33noc_te                        0x0000561b226a4635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8e80c5a460 __libc_start_main +
    245

    6    tmp33noc_te                        0x0000561b226a4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum\
    \ / (n - m)\n    let avg_bin = String(avg, radix: 2)\n    return .success(\"0b\\\
    (avg_bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpw3jm6eq1/tmpw3jm6eq1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c65988c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c6567fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c6567f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c6567e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3jm6eq1                        0x000055fbbed14b75 <unavailable> + 7029

    5    libc.so.6                          0x00002b7c65b74460 __libc_start_main +
    245

    6    tmpw3jm6eq1                        0x000055fbbed14779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    0b\\(Int(round(Double(n + m) / 2)).binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpcco2cclu.swift:18:30: error: cannot find 'round' in scope\n   \
    \ return .success(\"0b\\(Int(round(Double(n + m) / 2)).binary)\")\n          \
    \                   ^~~~~\n/tmp/tmpcco2cclu.swift:18:56: error: reference to member\
    \ 'binary' cannot be resolved without a contextual type\n    return .success(\"\
    0b\\(Int(round(Double(n + m) / 2)).binary)\")\n                              \
    \                         ^\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = String(format: \"0b%b\", (n + m)\
    \ / 2)\n    return .success(average)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpmswgsylm.swift:19:25: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    let average = String(format:\
    \ \"0b%b\", (n + m) / 2)\n                        ^~~~~~~\n                  \
    \       repeating       count: \n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    return .success(String(Int(floor((n + m) /\
    \ 2)).toBinary, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp8ao8opgx.swift:21:32: error: cannot find 'floor' in scope\n   \
    \ return .success(String(Int(floor((n + m) / 2)).toBinary, radix: 2))\n      \
    \                         ^~~~~\n/tmp/tmp8ao8opgx.swift:21:52: error: reference\
    \ to member 'toBinary' cannot be resolved without a contextual type\n    return\
    \ .success(String(Int(floor((n + m) / 2)).toBinary, radix: 2))\n             \
    \                                      ^\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let intResult = Int(Double(n + m) / 2)\n \
    \   return .success(String(intResult, radix: 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpout8vbg6/tmpout8vbg6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec28887c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec2857eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec2857e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec2857d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpout8vbg6                        0x000055f3bd176775 <unavailable> + 6005

    5    libc.so.6                          0x00002aec28a73460 __libc_start_main +
    245

    6    tmpout8vbg6                        0x000055f3bd176379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = n + (m - n) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp2u8py9s7/tmp2u8py9s7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e39973c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e3966ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e3966a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e396697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2u8py9s7                        0x00005649037b9eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b7e39b5f460 __libc_start_main +
    245

    6    tmp2u8py9s7                        0x00005649037b9649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = Int(Double(n + m) / 2.0)\n \
    \   return .success(\"0b\\(String(average, radix: 2))\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpfjzz6f3r/tmpfjzz6f3r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b242937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2429073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2429073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24290727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjzz6f3r                        0x00005642da4ddeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b2429568460 __libc_start_main +
    245

    6    tmpfjzz6f3r                        0x00005642da4dd649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    return .success(\"0b\\(String(Int(round(Double(m\
    \ + n) / 2)), radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpdrbu8k05.swift:21:37: error: cannot find 'round' in scope\n   \
    \ return .success(\"0b\\(String(Int(round(Double(m + n) / 2)), radix: 2))\")\n\
    \                                    ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    var sum = 0\n    if\
    \ n > m {\n        return .failure(-1)\n    }\n    else {\n        for index in\
    \ n...m {\n            sum += index\n        }\n        let average = String(sum\
    \ / (m - n + 1), radix: 2)\n        return .success(\"0b\\(average)\")\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp88f5pvyf/tmp88f5pvyf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf6d23ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf6cf31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf6cf31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf6cf307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp88f5pvyf                        0x000056316f68bfa8 <unavailable> + 8104

    5    libc.so.6                          0x00002acf6d426460 __libc_start_main +
    245

    6    tmp88f5pvyf                        0x000056316f68b739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    return .success(String(avg(n: n, m: m), radix:\
    \ 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpizl9h11z.swift:19:28: error: cannot find 'avg' in scope\n    return\
    \ .success(String(avg(n: n, m: m), radix: 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let rounded = String(Int(round(Double(n + m) /\
    \ 2)), radix: 2)\n    return .success(\"0b\\(rounded)\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmp2vk22w3y.swift:19:30: error: cannot find 'round' in scope\n   \
    \ let rounded = String(Int(round(Double(n + m) / 2)), radix: 2)\n            \
    \                 ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let result = (n + m) / 2\n    return .success(\"\
    0b\\(String(result, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp777icte9/tmp777icte9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba45a4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba45a1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba45a1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba45a1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp777icte9                        0x0000561ccc606eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ba45a6ea460 __libc_start_main +
    245

    6    tmp777icte9                        0x0000561ccc606649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let average = (n +\
    \ m) / 2\n    if n > m {\n        return .failure(-1)\n    }\n    return .success(\"\
    0b\\(String(average, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpc9pjvd0n/tmpc9pjvd0n.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b285d1fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b285cef3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b285cef3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b285cef27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9pjvd0n                        0x0000561041e31eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b285d3e8460 __libc_start_main +
    245

    6    tmpc9pjvd0n                        0x0000561041e31649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    var sum = 0\n    if\
    \ n <= m {\n        for num in n...m {\n            sum += num\n        }\n  \
    \      return Result.success(String(format: \"0b%b\", sum / (m - n + 1)))\n  \
    \  } else {\n        return Result.failure(-1)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmppjmfs6dk.swift:23:37: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        return Result.success(String(format:\
    \ \"0b%b\", sum / (m - n + 1)))\n                                    ^~~~~~~\n\
    \                                     repeating       count: \n"
  stdout: ''
  timestamp: 1660009154
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return n > m ? .failure(-1)\
    \ : .success(\"0b\\(String(Int((n + m) / 2), radix: 2))\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmptynv_spm/tmptynv_spm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b063b32ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063b025b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b063b025988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b063b0247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptynv_spm                        0x00005630c32e5fa8 <unavailable> + 8104

    5    libc.so.6                          0x00002b063b51a460 __libc_start_main +
    245

    6    tmptynv_spm                        0x00005630c32e5739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = round((Double(n) + Double(m)) / 2)\n\
    \    let result = String(avg, radix: 2)\n    return .success(\"0b\\(result)\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpn525kpdu.swift:19:15: error: cannot find 'round' in scope\n   \
    \ let avg = round((Double(n) + Double(m)) / 2)\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = ((n + m) / 2).binaryString\n    return\
    \ .success(\"0b\\(avg)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpq5jub35k.swift:19:29: error: value of type 'Int' has no member\
    \ 'binaryString'\n    let avg = ((n + m) / 2).binaryString\n              ~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    var roundedSum = 0\n\
    \    for i in n...m {\n        roundedSum += i\n    }\n    let avg = roundedSum\
    \ / (m - n + 1)\n    return Result(catching: { try avg.toBinary() })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpjzs6aher.swift:23:12: error: cannot convert return expression of\
    \ type 'Result<String, any Error>' to return type 'Result<String, Int>'\n    return\
    \ Result(catching: { try avg.toBinary() })\n           ^\n/tmp/tmpjzs6aher.swift:23:12:\
    \ note: arguments to generic parameter 'Failure' ('any Error' and 'Int') are expected\
    \ to be equal\n    return Result(catching: { try avg.toBinary() })\n         \
    \  ^\n/tmp/tmpjzs6aher.swift:23:39: error: value of type 'Int' has no member 'toBinary'\n\
    \    return Result(catching: { try avg.toBinary() })\n                       \
    \           ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // your code here\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpemlpdo8y/tmpemlpdo8y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b122b5adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b122b2a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b122b2a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b122b2a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemlpdo8y                        0x000055a5e7536635 <unavailable> + 5685

    5    libc.so.6                          0x00002b122b799460 __libc_start_main +
    245

    6    tmpemlpdo8y                        0x000055a5e7536239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    \n    guard n <= m\
    \ else {\n        return .failure(-1)\n    }\n    \n    let avg: Double = Double(n\
    \ + m) / 2\n    let binary = String(Int(avg), radix: 2)\n    \n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp6xphnfz2/tmp6xphnfz2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b376e869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b376e560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b376e560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b376e55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xphnfz2                        0x00005616b69f9eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b376ea55460 __libc_start_main +
    245

    6    tmp6xphnfz2                        0x00005616b69f9649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(\"0b\\(String(avg, radix: 2))\")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpnwbsrdjy/tmpnwbsrdjy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15c9803c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15c94fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15c94fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15c94f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwbsrdjy                        0x000055659169aeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b15c99ef460 __libc_start_main +
    245

    6    tmpnwbsrdjy                        0x000055659169a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = n.addingReportingOverflow(m)\n    let\
    \ avg = sum.overflow ? nil : sum.partialValue / 2\n    guard let num = avg else\
    \ { return .failure(-1) }\n    return .success(String(format: \"0b%x\", num))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpzz8ofteq.swift:22:27: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    return .success(String(format:\
    \ \"0b%x\", num))\n                          ^~~~~~~\n                       \
    \    repeating       count: \n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(\"0b\\(String(avg, radix: 2))\")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpnwbsrdjy/tmpnwbsrdjy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15c9803c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15c94fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15c94fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15c94f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwbsrdjy                        0x000055659169aeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b15c99ef460 __libc_start_main +
    245

    6    tmpnwbsrdjy                        0x000055659169a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = ((m + n) / 2).binary()\n    return\
    \ .success(avg)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp0mntiyrj.swift:21:29: error: value of type 'Int' has no member\
    \ 'binary'\n    let avg = ((m + n) / 2).binary()\n              ~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Int(Double(n + m) / 2.0)\n    return\
    \ .success(\"0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpw8w6hu_y/tmpw8w6hu_y.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62e9972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62e9669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62e9669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62e96687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8w6hu_y                        0x0000557eec4c7eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b62e9b5e460 __libc_start_main +
    245

    6    tmpw8w6hu_y                        0x0000557eec4c7649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = ((m - n) / 2) + n\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmptzzps8zq/tmptzzps8zq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22fd0a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22fcd9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22fcd9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22fcd9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptzzps8zq                        0x000055cc3c649775 <unavailable> + 6005

    5    libc.so.6                          0x00002b22fd293460 __libc_start_main +
    245

    6    tmptzzps8zq                        0x000055cc3c649379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let r = (n + m) /\
    \ 2\n    if r == 0 {\n        return .success(\"0b0\")\n    }\n    var s = \"\"\
    \n    var rr = r\n    while rr > 0 {\n        s.append(rr % 2 == 0 ? \"0\" : \"\
    1\")\n        rr /= 2\n    }\n    return .success(\"0b\\(String(s.reversed()))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpa0sefuiq/tmpa0sefuiq.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad81cd18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81ca0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81ca0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81ca0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa0sefuiq                        0x000055ac19111008 <unavailable> + 8200

    5    libc.so.6                          0x00002ad81cf04460 __libc_start_main +
    245

    6    tmpa0sefuiq                        0x000055ac19110799 <unavailable> + 6041

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp33noc_te/tmp33noc_te.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e80a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e80765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e80765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e807647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33noc_te                        0x0000561b226a4635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8e80c5a460 __libc_start_main +
    245

    6    tmp33noc_te                        0x0000561b226a4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009149
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = (sum / (m - n + 1))\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmped8ufoct/tmped8ufoct.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf89839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf89530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf89530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf8952f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped8ufoct                        0x000056373858c8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002abf89a25460 __libc_start_main +
    245

    6    tmped8ufoct                        0x000056373858c4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    switch n {\n    case\
    \ ...m:\n        return Result.success(String(Int((n + m) / 2), radix: 2))\n \
    \   default:\n        return Result.failure(-1)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmppx6bxi0q/tmppx6bxi0q.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3c93b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3c90adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3c90ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3c90ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppx6bxi0q                        0x0000561f90ab7975 <unavailable> + 6517

    5    libc.so.6                          0x00002ae3c95a2460 __libc_start_main +
    245

    6    tmppx6bxi0q                        0x0000561f90ab7579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = Double(n + m) / 2\n    let roundedAvg\
    \ = Int(avg.rounded())\n    let avgBinary = String(roundedAvg, radix: 2)\n   \
    \ return .success(\"0b\\(avgBinary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.6ZlNwh/tmprz9rekyo-1.o:tmprz9rekyo-1.o:function $s11tmprz9rekyo11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.6ZlNwh/tmprz9rekyo-1.o:tmprz9rekyo-1.o:function $s11tmprz9rekyo11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.6ZlNwh/tmprz9rekyo-1.o:tmprz9rekyo-1.o:function $s11tmprz9rekyo11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.6ZlNwh/tmprz9rekyo-1.o:tmprz9rekyo-1.o:function $s11tmprz9rekyo11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.6ZlNwh/tmprz9rekyo-1.o:tmprz9rekyo-1.o:function $s11tmprz9rekyo11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.6ZlNwh/tmprz9rekyo-1.o:tmprz9rekyo-1.o:function $s11tmprz9rekyo11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.6ZlNwh/tmprz9rekyo-1.o:tmprz9rekyo-1.o:function $s11tmprz9rekyo11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    var averageInt: Int\
    \ {\n        return (n + m) / 2\n    }\n    var averageBinary: String {\n    \
    \    return String(averageInt, radix: 2)\n    }\n    return (n > m) ? .failure(-1)\
    \ : .success(\"0b\\(averageBinary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmporiyb9py/tmporiyb9py.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17103f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17100f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17100f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17100ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmporiyb9py                        0x000055bb11af2eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b17105e5460 __libc_start_main +
    245

    6    tmporiyb9py                        0x000055bb11af2649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    // TODO: Write some\
    \ code to solve this coding challenge\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvyie54cd/tmpvyie54cd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b953c3dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b953c0d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b953c0d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b953c0d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvyie54cd                        0x0000564817b52635 <unavailable> + 5685

    5    libc.so.6                          0x00002b953c5c6460 __libc_start_main +
    245

    6    tmpvyie54cd                        0x0000564817b52239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let roundedAvg = ((n + m) / 2).toBinaryString()\n\
    \    return .success(\"0b\\(roundedAvg)\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmp5q1lucph.swift:21:36: error: value of type 'Int' has no member\
    \ 'toBinaryString'\n    let roundedAvg = ((n + m) / 2).toBinaryString()\n    \
    \                 ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    \n    if (n > m) {\n\
    \        return .failure(-1)\n    }\n    \n    var sum = 0\n    for index in n...m\
    \ {\n        sum += index\n    }\n    \n    let average = sum / (m - n + 1)\n\
    \    let binary = String(average, radix: 2)\n    \n    return .success(\"0b\\\
    (binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m:\
    \ 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7b4y8_n4/tmp7b4y8_n4.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2700aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae26fda5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae26fda5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae26fda47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b4y8_n4                        0x0000564c44e9bfa8 <unavailable> + 8104

    5    libc.so.6                          0x00002ae27029a460 __libc_start_main +
    245

    6    tmp7b4y8_n4                        0x0000564c44e9b739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpcefo3ig7/tmpcefo3ig7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2046fdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2046cd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2046cd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2046cd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcefo3ig7                        0x0000563400278eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b20471cb460 __libc_start_main +
    245

    6    tmpcefo3ig7                        0x0000563400278649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    return .success(String(numbers: m...n, averageFunction:\
    \ { round($0.average).binary })!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp6jck940l.swift:21:63: error: cannot find 'round' in scope\n   \
    \ return .success(String(numbers: m...n, averageFunction: { round($0.average).binary\
    \ })!)\n                                                              ^~~~~\n"
  stdout: ''
  timestamp: 1660009151
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = Double(n + m) / 2\n    let binary\
    \ = String(Int(avg.rounded()), radix: 2)\n    return .success(\"0b\\(binary)\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.nMvxal/tmpdcytlktc-1.o:tmpdcytlktc-1.o:function $s11tmpdcytlktc11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.nMvxal/tmpdcytlktc-1.o:tmpdcytlktc-1.o:function $s11tmpdcytlktc11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.nMvxal/tmpdcytlktc-1.o:tmpdcytlktc-1.o:function $s11tmpdcytlktc11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.nMvxal/tmpdcytlktc-1.o:tmpdcytlktc-1.o:function $s11tmpdcytlktc11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.nMvxal/tmpdcytlktc-1.o:tmpdcytlktc-1.o:function $s11tmpdcytlktc11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.nMvxal/tmpdcytlktc-1.o:tmpdcytlktc-1.o:function $s11tmpdcytlktc11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.nMvxal/tmpdcytlktc-1.o:tmpdcytlktc-1.o:function $s11tmpdcytlktc11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpw7061dah.swift:18:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Result<String, Int>'\n    return -1\n           ^~\n"
  stdout: ''
  timestamp: 1660009152
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    switch n {\n    case\
    \ ...m:\n        return Result.success(String(format: \"0b%x\", (n + m) / 2))\n\
    \    default:\n        return Result.failure(-1)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpcwmd47xq.swift:20:37: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        return Result.success(String(format:\
    \ \"0b%x\", (n + m) / 2))\n                                    ^~~~~~~\n     \
    \                                repeating       count: \n"
  stdout: ''
  timestamp: 1660009152
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result {\n\
    \        if n > m {\n            throw -1\n        }\n        let average = (n\
    \ + m) / 2\n        return \"0b\\(String(average, radix: 2))\"\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpsydo75id.swift:18:12: error: cannot convert return expression of\
    \ type 'Result<String, any Error>' to return type 'Result<String, Int>'\n    return\
    \ Result {\n           ^\n/tmp/tmpsydo75id.swift:18:12: note: arguments to generic\
    \ parameter 'Failure' ('any Error' and 'Int') are expected to be equal\n    return\
    \ Result {\n           ^\n"
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n <= m {\n    \
    \    let sum = n + m\n        let count = 2\n        let average = sum / count\n\
    \        let binary = String(average, radix: 2)\n        return .success(\"0b\\\
    (binary)\")\n    } else {\n        return .failure(-1)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpmd4a1hzs/tmpmd4a1hzs.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b669c740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b669c437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b669c437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b669c4367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmd4a1hzs                        0x00005594e96a6eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b669c92c460 __libc_start_main +
    245

    6    tmpmd4a1hzs                        0x00005594e96a6649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Double(n + m) / 2\n    let rounded =\
    \ Int(avg.rounded())\n    let binary = String(rounded, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.1YUCpo/tmptb967dwu-1.o:tmptb967dwu-1.o:function $s11tmptb967dwu11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.1YUCpo/tmptb967dwu-1.o:tmptb967dwu-1.o:function $s11tmptb967dwu11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.1YUCpo/tmptb967dwu-1.o:tmptb967dwu-1.o:function $s11tmptb967dwu11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.1YUCpo/tmptb967dwu-1.o:tmptb967dwu-1.o:function $s11tmptb967dwu11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.1YUCpo/tmptb967dwu-1.o:tmptb967dwu-1.o:function $s11tmptb967dwu11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.1YUCpo/tmptb967dwu-1.o:tmptb967dwu-1.o:function $s11tmptb967dwu11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.1YUCpo/tmptb967dwu-1.o:tmptb967dwu-1.o:function $s11tmptb967dwu11rounded_avg1n1ms6ResultOySSS2is5ErrorAAyHCg_GSi_SitF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpig_a2r8x/tmpig_a2r8x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2939001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2939001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29390007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig_a2r8x                        0x00005608d2e06eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29394f6460 __libc_start_main +
    245

    6    tmpig_a2r8x                        0x00005608d2e06649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    0b11\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpfsdw6kdn/tmpfsdw6kdn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11089a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110869cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110869c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110869b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsdw6kdn                        0x0000560b0c4bb73f <unavailable> + 5951

    5    libc.so.6                          0x00002b1108b91460 __libc_start_main +
    245

    6    tmpfsdw6kdn                        0x0000560b0c4bb239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009150
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let result = (n +\
    \ m) / 2\n    if n > m {\n        return .failure(-1)\n    }\n    return .success(String(result,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp4cg2uehj/tmp4cg2uehj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63a433bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63a4032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63a4032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63a40317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4cg2uehj                        0x000056321a4dc775 <unavailable> + 6005

    5    libc.so.6                          0x00002b63a4527460 __libc_start_main +
    245

    6    tmp4cg2uehj                        0x000056321a4dc379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009152
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    return .success(String(format: \"0b%b\", (n + m)\
    \ / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp1r2vx0wl.swift:19:27: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    return .success(String(format:\
    \ \"0b%b\", (n + m) / 2))\n                          ^~~~~~~\n               \
    \            repeating       count: \n"
  stdout: ''
  timestamp: 1660009152
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result {\n\
    \        guard n <= m else { throw -1 }\n        return String(Int(0b1 + (n +\
    \ m) / 2), radix: 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp4sdstk5c.swift:18:12: error: cannot convert return expression of\
    \ type 'Result<String, any Error>' to return type 'Result<String, Int>'\n    return\
    \ Result {\n           ^\n/tmp/tmp4sdstk5c.swift:18:12: note: arguments to generic\
    \ parameter 'Failure' ('any Error' and 'Int') are expected to be equal\n    return\
    \ Result {\n           ^\n"
  stdout: ''
  timestamp: 1660009152
